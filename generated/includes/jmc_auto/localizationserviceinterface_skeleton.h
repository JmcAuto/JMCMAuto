/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef jmc_auto_localizationserviceinterface_skeleton_h
#define jmc_auto_localizationserviceinterface_skeleton_h

#include "ara/com/internal/skeleton/SkeletonAdapter.h"
#include "ara/com/internal/skeleton/EventAdapter.h"
#include "ara/com/internal/skeleton/FieldAdapter.h"
#include "jmc_auto/localizationserviceinterface_common.h"
#include "impl_type_localization.h"
#include <cstdint>

namespace jmc_auto {
namespace skeleton {
namespace events
{
    using LocalizationEvent = ara::com::internal::skeleton::event::EventAdapter<::Localization>;
    static constexpr ara::com::internal::EntityId LocalizationEventId = 63490; //LocalizationEvent_event_hash
}

namespace methods
{
}

namespace fields
{
}

class LocalizationServiceInterfaceSkeleton : public ara::com::internal::skeleton::SkeletonAdapter {
public:

    explicit LocalizationServiceInterfaceSkeleton(ara::com::InstanceIdentifier instanceId,
                           ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        :ara::com::internal::skeleton::SkeletonAdapter(::jmc_auto::LocalizationServiceInterface::ServiceIdentifier, instanceId, mode),
        LocalizationEvent(GetSkeleton(), events::LocalizationEventId)
    {
    }

    LocalizationServiceInterfaceSkeleton(const LocalizationServiceInterfaceSkeleton&) = delete;
    LocalizationServiceInterfaceSkeleton& operator=(const LocalizationServiceInterfaceSkeleton&) = delete;

    LocalizationServiceInterfaceSkeleton(LocalizationServiceInterfaceSkeleton&& other) = default;
    LocalizationServiceInterfaceSkeleton& operator=(LocalizationServiceInterfaceSkeleton&& other) = default;

    virtual ~LocalizationServiceInterfaceSkeleton()
    {
        ara::com::internal::skeleton::SkeletonAdapter::StopOfferService();
    }

    void OfferService()
    {
        InitializeEvent(LocalizationEvent);
        ara::com::internal::skeleton::SkeletonAdapter::OfferService();
    }


    events::LocalizationEvent LocalizationEvent;
};
} // namespace skeleton
} // namespace jmc_auto

#endif // jmc_auto_localizationserviceinterface_skeleton_h
