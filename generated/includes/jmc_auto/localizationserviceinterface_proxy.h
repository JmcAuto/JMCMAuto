/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef jmc_auto_localizationserviceinterface_proxy_h
#define jmc_auto_localizationserviceinterface_proxy_h

#include "ara/com/internal/proxy/ProxyAdapter.h"
#include "ara/com/internal/proxy/EventAdapter.h"
#include "ara/com/internal/proxy/FieldAdapter.h"
#include "ara/com/internal/proxy/MethodAdapter.h"
#include "jmc_auto/localizationserviceinterface_common.h"
#include "impl_type_localization.h"
#include <string>

namespace jmc_auto {
namespace proxy {
namespace events {
    using LocalizationEvent = ara::com::internal::proxy::event::EventAdapter<::Localization>;
    static constexpr ara::com::internal::EntityId LocalizationEventId = 63490; //LocalizationEvent_event_hash
}

namespace fields {
}

namespace methods {

} // namespace methods

class LocalizationServiceInterfaceProxy :public ara::com::internal::proxy::ProxyAdapter {
public:
    virtual ~LocalizationServiceInterfaceProxy()
    {
        LocalizationEvent.UnsetReceiveHandler();
        LocalizationEvent.Unsubscribe();
    }

    explicit LocalizationServiceInterfaceProxy(const HandleType &handle)
        :ara::com::internal::proxy::ProxyAdapter(::jmc_auto::LocalizationServiceInterface::ServiceIdentifier, handle),
        LocalizationEvent(GetProxy(), events::LocalizationEventId, handle, ::jmc_auto::LocalizationServiceInterface::ServiceIdentifier){        }

    LocalizationServiceInterfaceProxy(const LocalizationServiceInterfaceProxy&) = delete;
    LocalizationServiceInterfaceProxy& operator=(const LocalizationServiceInterfaceProxy&) = delete;

    LocalizationServiceInterfaceProxy(LocalizationServiceInterfaceProxy&& other) = default;
    LocalizationServiceInterfaceProxy& operator=(LocalizationServiceInterfaceProxy&& other) = default;


    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::com::InstanceIdentifier instance = ara::com::InstanceIdentifier::Any)
    {
        return ProxyAdapter::StartFindService(handler, ::jmc_auto::LocalizationServiceInterface::ServiceIdentifier, instance);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::com::InstanceIdentifier instance = ara::com::InstanceIdentifier::Any)
    {
        return ProxyAdapter::FindService(::jmc_auto::LocalizationServiceInterface::ServiceIdentifier, instance);
    }

    events::LocalizationEvent LocalizationEvent;
};
} // namespace proxy
} // namespace jmc_auto

#endif // jmc_auto_localizationserviceinterface_proxy_h
