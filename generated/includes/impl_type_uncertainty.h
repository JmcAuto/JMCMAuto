/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef impl_type_uncertainty_h
#define impl_type_uncertainty_h






#include "impl_type_point3d.h"


struct Uncertainty {
    ::Point3D position_std_dev;
    
    ::Point3D orientation_std_dev;
    
    ::Point3D linear_velocity_std_dev;
    
    ::Point3D linear_acceleration_std_dev;
    
    ::Point3D angular_velocity_std_dev;
    

    static bool IsPlane()
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(position_std_dev);
        fun(orientation_std_dev);
        fun(linear_velocity_std_dev);
        fun(linear_acceleration_std_dev);
        fun(angular_velocity_std_dev);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(position_std_dev);
        fun(orientation_std_dev);
        fun(linear_velocity_std_dev);
        fun(linear_acceleration_std_dev);
        fun(angular_velocity_std_dev);
    }

    bool operator == (const ::Uncertainty& t) const {
        return (position_std_dev == t.position_std_dev) && (orientation_std_dev == t.orientation_std_dev) && (linear_velocity_std_dev == t.linear_velocity_std_dev) && (linear_acceleration_std_dev == t.linear_acceleration_std_dev) && (angular_velocity_std_dev == t.angular_velocity_std_dev);
    }
};


#endif // impl_type_uncertainty_h
