// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_raw_feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/auto_tuning_raw_feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
namespace autotuning {
class PathPointRawFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PathPointRawFeature> {
} _PathPointRawFeature_default_instance_;
class SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedPointRawFeature_ObjectDecisionFeature> {
} _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
class SpeedPointRawFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedPointRawFeature> {
} _SpeedPointRawFeature_default_instance_;
class ObstacleSTRawData_STPointPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleSTRawData_STPointPair> {
} _ObstacleSTRawData_STPointPair_default_instance_;
class ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleSTRawData_ObstacleSTData> {
} _ObstacleSTRawData_ObstacleSTData_default_instance_;
class ObstacleSTRawDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleSTRawData> {
} _ObstacleSTRawData_default_instance_;
class TrajectoryPointRawFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPointRawFeature> {
} _TrajectoryPointRawFeature_default_instance_;
class TrajectoryRawFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryRawFeature> {
} _TrajectoryRawFeature_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, cartesian_coord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointRawFeature, frenet_coord_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, relative_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, relative_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, relative_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, speed_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, j_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, follow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, overtake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, virtual_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, collision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, nudge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, sidepass_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, sidepass_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPointRawFeature, keep_clear_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, s_lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, s_upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_STPointPair, l_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, is_virtual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, distribution_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, obstacle_st_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, obstacle_st_nudge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleSTRawData, obstacle_st_sidepass_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, path_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointRawFeature, speed_feature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, point_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryRawFeature, st_raw_data_),
  ~0u,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(PathPointRawFeature)},
  { 9, 19, sizeof(SpeedPointRawFeature_ObjectDecisionFeature)},
  { 24, 44, sizeof(SpeedPointRawFeature)},
  { 59, 68, sizeof(ObstacleSTRawData_STPointPair)},
  { 72, 83, sizeof(ObstacleSTRawData_ObstacleSTData)},
  { 89, 97, sizeof(ObstacleSTRawData)},
  { 100, 107, sizeof(TrajectoryPointRawFeature)},
  { 109, 116, sizeof(TrajectoryRawFeature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathPointRawFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedPointRawFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleSTRawData_STPointPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleSTRawData_ObstacleSTData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleSTRawData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryPointRawFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryRawFeature_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/auto_tuning_raw_feature.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _PathPointRawFeature_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SpeedPointRawFeature_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ObstacleSTRawData_STPointPair_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ObstacleSTRawData_ObstacleSTData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ObstacleSTRawData_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _TrajectoryPointRawFeature_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TrajectoryRawFeature_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  _PathPointRawFeature_default_instance_.DefaultConstruct();
  _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_.DefaultConstruct();
  _SpeedPointRawFeature_default_instance_.DefaultConstruct();
  _ObstacleSTRawData_STPointPair_default_instance_.DefaultConstruct();
  _ObstacleSTRawData_ObstacleSTData_default_instance_.DefaultConstruct();
  _ObstacleSTRawData_default_instance_.DefaultConstruct();
  _TrajectoryPointRawFeature_default_instance_.DefaultConstruct();
  _TrajectoryRawFeature_default_instance_.DefaultConstruct();
  _PathPointRawFeature_default_instance_.get_mutable()->cartesian_coord_ = const_cast< ::jmc_auto::common::PathPoint*>(
      ::jmc_auto::common::PathPoint::internal_default_instance());
  _PathPointRawFeature_default_instance_.get_mutable()->frenet_coord_ = const_cast< ::jmc_auto::common::FrenetFramePoint*>(
      ::jmc_auto::common::FrenetFramePoint::internal_default_instance());
  _TrajectoryPointRawFeature_default_instance_.get_mutable()->path_feature_ = const_cast< ::jmc_auto::planning::autotuning::PathPointRawFeature*>(
      ::jmc_auto::planning::autotuning::PathPointRawFeature::internal_default_instance());
  _TrajectoryPointRawFeature_default_instance_.get_mutable()->speed_feature_ = const_cast< ::jmc_auto::planning::autotuning::SpeedPointRawFeature*>(
      ::jmc_auto::planning::autotuning::SpeedPointRawFeature::internal_default_instance());
  _TrajectoryRawFeature_default_instance_.get_mutable()->st_raw_data_ = const_cast< ::jmc_auto::planning::autotuning::ObstacleSTRawData*>(
      ::jmc_auto::planning::autotuning::ObstacleSTRawData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n4modules/planning/proto/auto_tuning_raw"
      "_feature.proto\022\034jmc_auto.planning.autotu"
      "ning\032$modules/common/proto/pnc_point.pro"
      "to\"\203\001\n\023PathPointRawFeature\0223\n\017cartesian_"
      "coord\030\001 \001(\0132\032.jmc_auto.common.PathPoint\022"
      "7\n\014frenet_coord\030\002 \001(\0132!.jmc_auto.common."
      "FrenetFramePoint\"\233\010\n\024SpeedPointRawFeatur"
      "e\022\t\n\001s\030\001 \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030"
      "\004 \001(\001\022\t\n\001j\030\005 \001(\001\022\023\n\013speed_limit\030\006 \001(\001\022X\n"
      "\006follow\030\n \003(\0132H.jmc_auto.planning.autotu"
      "ning.SpeedPointRawFeature.ObjectDecision"
      "Feature\022Z\n\010overtake\030\013 \003(\0132H.jmc_auto.pla"
      "nning.autotuning.SpeedPointRawFeature.Ob"
      "jectDecisionFeature\022b\n\020virtual_decision\030"
      "\r \003(\0132H.jmc_auto.planning.autotuning.Spe"
      "edPointRawFeature.ObjectDecisionFeature\022"
      "V\n\004stop\030\016 \003(\0132H.jmc_auto.planning.autotu"
      "ning.SpeedPointRawFeature.ObjectDecision"
      "Feature\022[\n\tcollision\030\017 \003(\0132H.jmc_auto.pl"
      "anning.autotuning.SpeedPointRawFeature.O"
      "bjectDecisionFeature\022W\n\005nudge\030\014 \003(\0132H.jm"
      "c_auto.planning.autotuning.SpeedPointRaw"
      "Feature.ObjectDecisionFeature\022`\n\016sidepas"
      "s_front\030\020 \003(\0132H.jmc_auto.planning.autotu"
      "ning.SpeedPointRawFeature.ObjectDecision"
      "Feature\022_\n\rsidepass_rear\030\021 \003(\0132H.jmc_aut"
      "o.planning.autotuning.SpeedPointRawFeatu"
      "re.ObjectDecisionFeature\022\\\n\nkeep_clear\030\022"
      " \003(\0132H.jmc_auto.planning.autotuning.Spee"
      "dPointRawFeature.ObjectDecisionFeature\032n"
      "\n\025ObjectDecisionFeature\022\n\n\002id\030\001 \001(\005\022\022\n\nr"
      "elative_s\030\002 \001(\001\022\022\n\nrelative_l\030\003 \001(\001\022\022\n\nr"
      "elative_v\030\004 \001(\001\022\r\n\005speed\030\005 \001(\001\"\351\004\n\021Obsta"
      "cleSTRawData\022X\n\020obstacle_st_data\030\001 \003(\0132>"
      ".jmc_auto.planning.autotuning.ObstacleST"
      "RawData.ObstacleSTData\022Y\n\021obstacle_st_nu"
      "dge\030\002 \003(\0132>.jmc_auto.planning.autotuning"
      ".ObstacleSTRawData.ObstacleSTData\022\\\n\024obs"
      "tacle_st_sidepass\030\003 \003(\0132>.jmc_auto.plann"
      "ing.autotuning.ObstacleSTRawData.Obstacl"
      "eSTData\032I\n\013STPointPair\022\017\n\007s_lower\030\001 \001(\001\022"
      "\017\n\007s_upper\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022\r\n\001l\030\004 \001(\001:\002"
      "10\032\365\001\n\016ObstacleSTData\022\n\n\002id\030\001 \001(\005\022\r\n\005spe"
      "ed\030\002 \001(\001\022\022\n\nis_virtual\030\003 \001(\010\022\023\n\013probabil"
      "ity\030\004 \001(\001\022L\n\007polygon\030\010 \003(\0132;.jmc_auto.pl"
      "anning.autotuning.ObstacleSTRawData.STPo"
      "intPair\022Q\n\014distribution\030\t \003(\0132;.jmc_auto"
      ".planning.autotuning.ObstacleSTRawData.S"
      "TPointPair\"\257\001\n\031TrajectoryPointRawFeature"
      "\022G\n\014path_feature\030\001 \001(\01321.jmc_auto.planni"
      "ng.autotuning.PathPointRawFeature\022I\n\rspe"
      "ed_feature\030\002 \001(\01322.jmc_auto.planning.aut"
      "otuning.SpeedPointRawFeature\"\254\001\n\024Traject"
      "oryRawFeature\022N\n\rpoint_feature\030\001 \003(\01327.j"
      "mc_auto.planning.autotuning.TrajectoryPo"
      "intRawFeature\022D\n\013st_raw_data\030\002 \001(\0132/.jmc"
      "_auto.planning.autotuning.ObstacleSTRawD"
      "ata"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/auto_tuning_raw_feature.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointRawFeature::kCartesianCoordFieldNumber;
const int PathPointRawFeature::kFrenetCoordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointRawFeature::PathPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.PathPointRawFeature)
}
PathPointRawFeature::PathPointRawFeature(const PathPointRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cartesian_coord()) {
    cartesian_coord_ = new ::jmc_auto::common::PathPoint(*from.cartesian_coord_);
  } else {
    cartesian_coord_ = NULL;
  }
  if (from.has_frenet_coord()) {
    frenet_coord_ = new ::jmc_auto::common::FrenetFramePoint(*from.frenet_coord_);
  } else {
    frenet_coord_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.PathPointRawFeature)
}

void PathPointRawFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cartesian_coord_, 0, reinterpret_cast<char*>(&frenet_coord_) -
    reinterpret_cast<char*>(&cartesian_coord_) + sizeof(frenet_coord_));
}

PathPointRawFeature::~PathPointRawFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.PathPointRawFeature)
  SharedDtor();
}

void PathPointRawFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cartesian_coord_;
  }
  if (this != internal_default_instance()) {
    delete frenet_coord_;
  }
}

void PathPointRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointRawFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPointRawFeature& PathPointRawFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathPointRawFeature* PathPointRawFeature::New(::google::protobuf::Arena* arena) const {
  PathPointRawFeature* n = new PathPointRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cartesian_coord()) {
      GOOGLE_DCHECK(cartesian_coord_ != NULL);
      cartesian_coord_->::jmc_auto::common::PathPoint::Clear();
    }
    if (has_frenet_coord()) {
      GOOGLE_DCHECK(frenet_coord_ != NULL);
      frenet_coord_->::jmc_auto::common::FrenetFramePoint::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.PathPoint cartesian_coord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cartesian_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.FrenetFramePoint frenet_coord = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frenet_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.PathPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.PathPointRawFeature)
  return false;
#undef DO_
}

void PathPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.PathPoint cartesian_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cartesian_coord_, output);
  }

  // optional .jmc_auto.common.FrenetFramePoint frenet_coord = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->frenet_coord_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.PathPointRawFeature)
}

::google::protobuf::uint8* PathPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.PathPoint cartesian_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cartesian_coord_, deterministic, target);
  }

  // optional .jmc_auto.common.FrenetFramePoint frenet_coord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->frenet_coord_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.PathPointRawFeature)
  return target;
}

size_t PathPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.common.PathPoint cartesian_coord = 1;
    if (has_cartesian_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cartesian_coord_);
    }

    // optional .jmc_auto.common.FrenetFramePoint frenet_coord = 2;
    if (has_frenet_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frenet_coord_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.PathPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.PathPointRawFeature)
    MergeFrom(*source);
  }
}

void PathPointRawFeature::MergeFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cartesian_coord()->::jmc_auto::common::PathPoint::MergeFrom(from.cartesian_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_frenet_coord()->::jmc_auto::common::FrenetFramePoint::MergeFrom(from.frenet_coord());
    }
  }
}

void PathPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointRawFeature::CopyFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointRawFeature::IsInitialized() const {
  return true;
}

void PathPointRawFeature::Swap(PathPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointRawFeature::InternalSwap(PathPointRawFeature* other) {
  std::swap(cartesian_coord_, other->cartesian_coord_);
  std::swap(frenet_coord_, other->frenet_coord_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPointRawFeature

// optional .jmc_auto.common.PathPoint cartesian_coord = 1;
bool PathPointRawFeature::has_cartesian_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPointRawFeature::set_has_cartesian_coord() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPointRawFeature::clear_has_cartesian_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointRawFeature::clear_cartesian_coord() {
  if (cartesian_coord_ != NULL) cartesian_coord_->::jmc_auto::common::PathPoint::Clear();
  clear_has_cartesian_coord();
}
const ::jmc_auto::common::PathPoint& PathPointRawFeature::cartesian_coord() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.PathPointRawFeature.cartesian_coord)
  return cartesian_coord_ != NULL ? *cartesian_coord_
                         : *::jmc_auto::common::PathPoint::internal_default_instance();
}
::jmc_auto::common::PathPoint* PathPointRawFeature::mutable_cartesian_coord() {
  set_has_cartesian_coord();
  if (cartesian_coord_ == NULL) {
    cartesian_coord_ = new ::jmc_auto::common::PathPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.PathPointRawFeature.cartesian_coord)
  return cartesian_coord_;
}
::jmc_auto::common::PathPoint* PathPointRawFeature::release_cartesian_coord() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.autotuning.PathPointRawFeature.cartesian_coord)
  clear_has_cartesian_coord();
  ::jmc_auto::common::PathPoint* temp = cartesian_coord_;
  cartesian_coord_ = NULL;
  return temp;
}
void PathPointRawFeature::set_allocated_cartesian_coord(::jmc_auto::common::PathPoint* cartesian_coord) {
  delete cartesian_coord_;
  cartesian_coord_ = cartesian_coord;
  if (cartesian_coord) {
    set_has_cartesian_coord();
  } else {
    clear_has_cartesian_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.autotuning.PathPointRawFeature.cartesian_coord)
}

// optional .jmc_auto.common.FrenetFramePoint frenet_coord = 2;
bool PathPointRawFeature::has_frenet_coord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPointRawFeature::set_has_frenet_coord() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPointRawFeature::clear_has_frenet_coord() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPointRawFeature::clear_frenet_coord() {
  if (frenet_coord_ != NULL) frenet_coord_->::jmc_auto::common::FrenetFramePoint::Clear();
  clear_has_frenet_coord();
}
const ::jmc_auto::common::FrenetFramePoint& PathPointRawFeature::frenet_coord() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.PathPointRawFeature.frenet_coord)
  return frenet_coord_ != NULL ? *frenet_coord_
                         : *::jmc_auto::common::FrenetFramePoint::internal_default_instance();
}
::jmc_auto::common::FrenetFramePoint* PathPointRawFeature::mutable_frenet_coord() {
  set_has_frenet_coord();
  if (frenet_coord_ == NULL) {
    frenet_coord_ = new ::jmc_auto::common::FrenetFramePoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.PathPointRawFeature.frenet_coord)
  return frenet_coord_;
}
::jmc_auto::common::FrenetFramePoint* PathPointRawFeature::release_frenet_coord() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.autotuning.PathPointRawFeature.frenet_coord)
  clear_has_frenet_coord();
  ::jmc_auto::common::FrenetFramePoint* temp = frenet_coord_;
  frenet_coord_ = NULL;
  return temp;
}
void PathPointRawFeature::set_allocated_frenet_coord(::jmc_auto::common::FrenetFramePoint* frenet_coord) {
  delete frenet_coord_;
  frenet_coord_ = frenet_coord;
  if (frenet_coord) {
    set_has_frenet_coord();
  } else {
    clear_has_frenet_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.autotuning.PathPointRawFeature.frenet_coord)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointRawFeature_ObjectDecisionFeature::kIdFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeSFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeLFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeVFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}
SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(const SpeedPointRawFeature_ObjectDecisionFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relative_s_, &from.relative_s_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&relative_s_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&relative_s_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&relative_s_) + sizeof(id_));
}

SpeedPointRawFeature_ObjectDecisionFeature::~SpeedPointRawFeature_ObjectDecisionFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  SharedDtor();
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedDtor() {
}

void SpeedPointRawFeature_ObjectDecisionFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPointRawFeature_ObjectDecisionFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature_ObjectDecisionFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature_ObjectDecisionFeature::New(::google::protobuf::Arena* arena) const {
  SpeedPointRawFeature_ObjectDecisionFeature* n = new SpeedPointRawFeature_ObjectDecisionFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPointRawFeature_ObjectDecisionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&relative_s_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&relative_s_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPointRawFeature_ObjectDecisionFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_relative_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_l = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_relative_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_relative_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return false;
#undef DO_
}

void SpeedPointRawFeature_ObjectDecisionFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double relative_s = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->relative_s(), output);
  }

  // optional double relative_l = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->relative_l(), output);
  }

  // optional double relative_v = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_v(), output);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

::google::protobuf::uint8* SpeedPointRawFeature_ObjectDecisionFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double relative_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->relative_s(), target);
  }

  // optional double relative_l = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->relative_l(), target);
  }

  // optional double relative_v = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_v(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return target;
}

size_t SpeedPointRawFeature_ObjectDecisionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double relative_s = 2;
    if (has_relative_s()) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 3;
    if (has_relative_l()) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 4;
    if (has_relative_v()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointRawFeature_ObjectDecisionFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointRawFeature_ObjectDecisionFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      relative_s_ = from.relative_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      relative_l_ = from.relative_l_;
    }
    if (cached_has_bits & 0x00000004u) {
      relative_v_ = from.relative_v_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature_ObjectDecisionFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature_ObjectDecisionFeature::Swap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointRawFeature_ObjectDecisionFeature::InternalSwap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  std::swap(relative_s_, other->relative_s_);
  std::swap(relative_l_, other->relative_l_);
  std::swap(relative_v_, other->relative_v_);
  std::swap(speed_, other->speed_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPointRawFeature_ObjectDecisionFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPointRawFeature_ObjectDecisionFeature

// optional int32 id = 1;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 SpeedPointRawFeature_ObjectDecisionFeature::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.id)
  return id_;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.id)
}

// optional double relative_s = 2;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
double SpeedPointRawFeature_ObjectDecisionFeature::relative_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_s)
  return relative_s_;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_s)
}

// optional double relative_l = 3;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_l() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
double SpeedPointRawFeature_ObjectDecisionFeature::relative_l() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_l)
  return relative_l_;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_l)
}

// optional double relative_v = 4;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_v() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_v() {
  relative_v_ = 0;
  clear_has_relative_v();
}
double SpeedPointRawFeature_ObjectDecisionFeature::relative_v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_v)
  return relative_v_;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_v(double value) {
  set_has_relative_v();
  relative_v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_v)
}

// optional double speed = 5;
bool SpeedPointRawFeature_ObjectDecisionFeature::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPointRawFeature_ObjectDecisionFeature::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double SpeedPointRawFeature_ObjectDecisionFeature::speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.speed)
  return speed_;
}
void SpeedPointRawFeature_ObjectDecisionFeature::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointRawFeature::kSFieldNumber;
const int SpeedPointRawFeature::kTFieldNumber;
const int SpeedPointRawFeature::kVFieldNumber;
const int SpeedPointRawFeature::kAFieldNumber;
const int SpeedPointRawFeature::kJFieldNumber;
const int SpeedPointRawFeature::kSpeedLimitFieldNumber;
const int SpeedPointRawFeature::kFollowFieldNumber;
const int SpeedPointRawFeature::kOvertakeFieldNumber;
const int SpeedPointRawFeature::kVirtualDecisionFieldNumber;
const int SpeedPointRawFeature::kStopFieldNumber;
const int SpeedPointRawFeature::kCollisionFieldNumber;
const int SpeedPointRawFeature::kNudgeFieldNumber;
const int SpeedPointRawFeature::kSidepassFrontFieldNumber;
const int SpeedPointRawFeature::kSidepassRearFieldNumber;
const int SpeedPointRawFeature::kKeepClearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointRawFeature::SpeedPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.SpeedPointRawFeature)
}
SpeedPointRawFeature::SpeedPointRawFeature(const SpeedPointRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      follow_(from.follow_),
      overtake_(from.overtake_),
      nudge_(from.nudge_),
      virtual_decision_(from.virtual_decision_),
      stop_(from.stop_),
      collision_(from.collision_),
      sidepass_front_(from.sidepass_front_),
      sidepass_rear_(from.sidepass_rear_),
      keep_clear_(from.keep_clear_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&s_) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.SpeedPointRawFeature)
}

void SpeedPointRawFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&s_) + sizeof(speed_limit_));
}

SpeedPointRawFeature::~SpeedPointRawFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  SharedDtor();
}

void SpeedPointRawFeature::SharedDtor() {
}

void SpeedPointRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPointRawFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPointRawFeature& SpeedPointRawFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedPointRawFeature* SpeedPointRawFeature::New(::google::protobuf::Arena* arena) const {
  SpeedPointRawFeature* n = new SpeedPointRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  follow_.Clear();
  overtake_.Clear();
  nudge_.Clear();
  virtual_decision_.Clear();
  stop_.Clear();
  collision_.Clear();
  sidepass_front_.Clear();
  sidepass_rear_.Clear();
  keep_clear_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&s_) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double j = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_j();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_follow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overtake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nudge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtual_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidepass_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidepass_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keep_clear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  return false;
#undef DO_
}

void SpeedPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double j = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->j(), output);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_limit(), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0, n = this->follow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->follow(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0, n = this->overtake_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->overtake(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0, n = this->nudge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->nudge(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0, n = this->virtual_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->virtual_decision(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0, n = this->stop_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->stop(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->collision(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0, n = this->sidepass_front_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sidepass_front(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0, n = this->sidepass_rear_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->sidepass_rear(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  for (unsigned int i = 0, n = this->keep_clear_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->keep_clear(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.SpeedPointRawFeature)
}

::google::protobuf::uint8* SpeedPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double j = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->j(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_limit(), target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0, n = this->follow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->follow(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0, n = this->overtake_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->overtake(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0, n = this->nudge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->nudge(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0, n = this->virtual_decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->virtual_decision(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0, n = this->stop_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->stop(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->collision(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0, n = this->sidepass_front_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->sidepass_front(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0, n = this->sidepass_rear_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->sidepass_rear(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  for (unsigned int i = 0, n = this->keep_clear_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->keep_clear(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  return target;
}

size_t SpeedPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  {
    unsigned int count = this->follow_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->follow(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  {
    unsigned int count = this->overtake_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overtake(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  {
    unsigned int count = this->nudge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nudge(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  {
    unsigned int count = this->virtual_decision_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virtual_decision(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  {
    unsigned int count = this->stop_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  {
    unsigned int count = this->collision_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collision(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  {
    unsigned int count = this->sidepass_front_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sidepass_front(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  {
    unsigned int count = this->sidepass_rear_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sidepass_rear(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  {
    unsigned int count = this->keep_clear_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keep_clear(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double j = 5;
    if (has_j()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.SpeedPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.SpeedPointRawFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature::MergeFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  follow_.MergeFrom(from.follow_);
  overtake_.MergeFrom(from.overtake_);
  nudge_.MergeFrom(from.nudge_);
  virtual_decision_.MergeFrom(from.virtual_decision_);
  stop_.MergeFrom(from.stop_);
  collision_.MergeFrom(from.collision_);
  sidepass_front_.MergeFrom(from.sidepass_front_);
  sidepass_rear_.MergeFrom(from.sidepass_rear_);
  keep_clear_.MergeFrom(from.keep_clear_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      j_ = from.j_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature::CopyFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature::Swap(SpeedPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointRawFeature::InternalSwap(SpeedPointRawFeature* other) {
  follow_.InternalSwap(&other->follow_);
  overtake_.InternalSwap(&other->overtake_);
  nudge_.InternalSwap(&other->nudge_);
  virtual_decision_.InternalSwap(&other->virtual_decision_);
  stop_.InternalSwap(&other->stop_);
  collision_.InternalSwap(&other->collision_);
  sidepass_front_.InternalSwap(&other->sidepass_front_);
  sidepass_rear_.InternalSwap(&other->sidepass_rear_);
  keep_clear_.InternalSwap(&other->keep_clear_);
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(j_, other->j_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPointRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPointRawFeature

// optional double s = 1;
bool SpeedPointRawFeature::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPointRawFeature::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPointRawFeature::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPointRawFeature::clear_s() {
  s_ = 0;
  clear_has_s();
}
double SpeedPointRawFeature::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.s)
  return s_;
}
void SpeedPointRawFeature::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.s)
}

// optional double t = 2;
bool SpeedPointRawFeature::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPointRawFeature::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPointRawFeature::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPointRawFeature::clear_t() {
  t_ = 0;
  clear_has_t();
}
double SpeedPointRawFeature::t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.t)
  return t_;
}
void SpeedPointRawFeature::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.t)
}

// optional double v = 3;
bool SpeedPointRawFeature::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPointRawFeature::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPointRawFeature::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPointRawFeature::clear_v() {
  v_ = 0;
  clear_has_v();
}
double SpeedPointRawFeature::v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.v)
  return v_;
}
void SpeedPointRawFeature::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.v)
}

// optional double a = 4;
bool SpeedPointRawFeature::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPointRawFeature::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPointRawFeature::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPointRawFeature::clear_a() {
  a_ = 0;
  clear_has_a();
}
double SpeedPointRawFeature::a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.a)
  return a_;
}
void SpeedPointRawFeature::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.a)
}

// optional double j = 5;
bool SpeedPointRawFeature::has_j() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPointRawFeature::set_has_j() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPointRawFeature::clear_has_j() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPointRawFeature::clear_j() {
  j_ = 0;
  clear_has_j();
}
double SpeedPointRawFeature::j() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.j)
  return j_;
}
void SpeedPointRawFeature::set_j(double value) {
  set_has_j();
  j_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.j)
}

// optional double speed_limit = 6;
bool SpeedPointRawFeature::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SpeedPointRawFeature::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void SpeedPointRawFeature::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void SpeedPointRawFeature::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
double SpeedPointRawFeature::speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.speed_limit)
  return speed_limit_;
}
void SpeedPointRawFeature::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.SpeedPointRawFeature.speed_limit)
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
int SpeedPointRawFeature::follow_size() const {
  return follow_.size();
}
void SpeedPointRawFeature::clear_follow() {
  follow_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::follow(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_follow(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_follow() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_follow() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.follow)
  return &follow_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::follow() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
int SpeedPointRawFeature::overtake_size() const {
  return overtake_.size();
}
void SpeedPointRawFeature::clear_overtake() {
  overtake_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::overtake(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_overtake(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_overtake() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_overtake() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.overtake)
  return &overtake_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::overtake() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
int SpeedPointRawFeature::virtual_decision_size() const {
  return virtual_decision_.size();
}
void SpeedPointRawFeature::clear_virtual_decision() {
  virtual_decision_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::virtual_decision(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_virtual_decision(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_virtual_decision() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_virtual_decision() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return &virtual_decision_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::virtual_decision() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
int SpeedPointRawFeature::stop_size() const {
  return stop_.size();
}
void SpeedPointRawFeature::clear_stop() {
  stop_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::stop(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_stop() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.stop)
  return &stop_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::stop() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
int SpeedPointRawFeature::collision_size() const {
  return collision_.size();
}
void SpeedPointRawFeature::clear_collision() {
  collision_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::collision(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_collision() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.collision)
  return &collision_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::collision() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
int SpeedPointRawFeature::nudge_size() const {
  return nudge_.size();
}
void SpeedPointRawFeature::clear_nudge() {
  nudge_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::nudge(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_nudge(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_nudge() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_nudge() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.nudge)
  return &nudge_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::nudge() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
int SpeedPointRawFeature::sidepass_front_size() const {
  return sidepass_front_.size();
}
void SpeedPointRawFeature::clear_sidepass_front() {
  sidepass_front_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::sidepass_front(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_sidepass_front(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_sidepass_front() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_sidepass_front() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return &sidepass_front_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::sidepass_front() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
int SpeedPointRawFeature::sidepass_rear_size() const {
  return sidepass_rear_.size();
}
void SpeedPointRawFeature::clear_sidepass_rear() {
  sidepass_rear_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::sidepass_rear(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_sidepass_rear(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_sidepass_rear() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_sidepass_rear() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return &sidepass_rear_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::sidepass_rear() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_;
}

// repeated .jmc_auto.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
int SpeedPointRawFeature::keep_clear_size() const {
  return keep_clear_.size();
}
void SpeedPointRawFeature::clear_keep_clear() {
  keep_clear_.Clear();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::keep_clear(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_.Get(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_keep_clear(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_.Mutable(index);
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_keep_clear() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_keep_clear() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return &keep_clear_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::keep_clear() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData_STPointPair::kSLowerFieldNumber;
const int ObstacleSTRawData_STPointPair::kSUpperFieldNumber;
const int ObstacleSTRawData_STPointPair::kTFieldNumber;
const int ObstacleSTRawData_STPointPair::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
}
ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(const ObstacleSTRawData_STPointPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_lower_, &from.s_lower_,
    reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_lower_) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
}

void ObstacleSTRawData_STPointPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_lower_, 0, reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&s_lower_) + sizeof(t_));
  l_ = 10;
}

ObstacleSTRawData_STPointPair::~ObstacleSTRawData_STPointPair() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  SharedDtor();
}

void ObstacleSTRawData_STPointPair::SharedDtor() {
}

void ObstacleSTRawData_STPointPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleSTRawData_STPointPair::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleSTRawData_STPointPair& ObstacleSTRawData_STPointPair::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleSTRawData_STPointPair* ObstacleSTRawData_STPointPair::New(::google::protobuf::Arena* arena) const {
  ObstacleSTRawData_STPointPair* n = new ObstacleSTRawData_STPointPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleSTRawData_STPointPair::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s_lower_, 0, reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&s_lower_) + sizeof(t_));
    l_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleSTRawData_STPointPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s_lower = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s_lower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s_upper = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_s_upper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  return false;
#undef DO_
}

void ObstacleSTRawData_STPointPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s_lower = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s_lower(), output);
  }

  // optional double s_upper = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s_upper(), output);
  }

  // optional double t = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t(), output);
  }

  // optional double l = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
}

::google::protobuf::uint8* ObstacleSTRawData_STPointPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s_lower = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s_lower(), target);
  }

  // optional double s_upper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s_upper(), target);
  }

  // optional double t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t(), target);
  }

  // optional double l = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  return target;
}

size_t ObstacleSTRawData_STPointPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double s_lower = 1;
    if (has_s_lower()) {
      total_size += 1 + 8;
    }

    // optional double s_upper = 2;
    if (has_s_upper()) {
      total_size += 1 + 8;
    }

    // optional double t = 3;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double l = 4 [default = 10];
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData_STPointPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData_STPointPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      s_lower_ = from.s_lower_;
    }
    if (cached_has_bits & 0x00000002u) {
      s_upper_ = from.s_upper_;
    }
    if (cached_has_bits & 0x00000004u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000008u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_STPointPair::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_STPointPair::Swap(ObstacleSTRawData_STPointPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData_STPointPair::InternalSwap(ObstacleSTRawData_STPointPair* other) {
  std::swap(s_lower_, other->s_lower_);
  std::swap(s_upper_, other->s_upper_);
  std::swap(t_, other->t_);
  std::swap(l_, other->l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleSTRawData_STPointPair::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleSTRawData_STPointPair

// optional double s_lower = 1;
bool ObstacleSTRawData_STPointPair::has_s_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_s_lower() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleSTRawData_STPointPair::clear_has_s_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleSTRawData_STPointPair::clear_s_lower() {
  s_lower_ = 0;
  clear_has_s_lower();
}
double ObstacleSTRawData_STPointPair::s_lower() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.s_lower)
  return s_lower_;
}
void ObstacleSTRawData_STPointPair::set_s_lower(double value) {
  set_has_s_lower();
  s_lower_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.s_lower)
}

// optional double s_upper = 2;
bool ObstacleSTRawData_STPointPair::has_s_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_s_upper() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleSTRawData_STPointPair::clear_has_s_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleSTRawData_STPointPair::clear_s_upper() {
  s_upper_ = 0;
  clear_has_s_upper();
}
double ObstacleSTRawData_STPointPair::s_upper() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.s_upper)
  return s_upper_;
}
void ObstacleSTRawData_STPointPair::set_s_upper(double value) {
  set_has_s_upper();
  s_upper_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.s_upper)
}

// optional double t = 3;
bool ObstacleSTRawData_STPointPair::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_t() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleSTRawData_STPointPair::clear_has_t() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleSTRawData_STPointPair::clear_t() {
  t_ = 0;
  clear_has_t();
}
double ObstacleSTRawData_STPointPair::t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.t)
  return t_;
}
void ObstacleSTRawData_STPointPair::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.t)
}

// optional double l = 4 [default = 10];
bool ObstacleSTRawData_STPointPair::has_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleSTRawData_STPointPair::set_has_l() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleSTRawData_STPointPair::clear_has_l() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleSTRawData_STPointPair::clear_l() {
  l_ = 10;
  clear_has_l();
}
double ObstacleSTRawData_STPointPair::l() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.l)
  return l_;
}
void ObstacleSTRawData_STPointPair::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData_ObstacleSTData::kIdFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kSpeedFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kIsVirtualFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kProbabilityFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kPolygonFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kDistributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}
ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(const ObstacleSTRawData_ObstacleSTData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_(from.polygon_),
      distribution_(from.distribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&speed_) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

void ObstacleSTRawData_ObstacleSTData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&speed_, 0, reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&speed_) + sizeof(probability_));
}

ObstacleSTRawData_ObstacleSTData::~ObstacleSTRawData_ObstacleSTData() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  SharedDtor();
}

void ObstacleSTRawData_ObstacleSTData::SharedDtor() {
}

void ObstacleSTRawData_ObstacleSTData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleSTRawData_ObstacleSTData::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData_ObstacleSTData::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData_ObstacleSTData::New(::google::protobuf::Arena* arena) const {
  ObstacleSTRawData_ObstacleSTData* n = new ObstacleSTRawData_ObstacleSTData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleSTRawData_ObstacleSTData::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  polygon_.Clear();
  distribution_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&speed_, 0, reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&speed_) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleSTRawData_ObstacleSTData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_virtual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_virtual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_virtual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_distribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return false;
#undef DO_
}

void ObstacleSTRawData_ObstacleSTData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  // optional bool is_virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_virtual(), output);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->probability(), output);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0, n = this->polygon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0, n = this->distribution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->distribution(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

::google::protobuf::uint8* ObstacleSTRawData_ObstacleSTData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  // optional bool is_virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_virtual(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->probability(), target);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0, n = this->polygon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0, n = this->distribution_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->distribution(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return target;
}

size_t ObstacleSTRawData_ObstacleSTData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  {
    unsigned int count = this->polygon_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  {
    unsigned int count = this->distribution_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distribution(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional double speed = 2;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool is_virtual = 3;
    if (has_is_virtual()) {
      total_size += 1 + 1;
    }

    // optional double probability = 4;
    if (has_probability()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData_ObstacleSTData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData_ObstacleSTData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  distribution_.MergeFrom(from.distribution_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_virtual_ = from.is_virtual_;
    }
    if (cached_has_bits & 0x00000008u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_ObstacleSTData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_ObstacleSTData::Swap(ObstacleSTRawData_ObstacleSTData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData_ObstacleSTData::InternalSwap(ObstacleSTRawData_ObstacleSTData* other) {
  polygon_.InternalSwap(&other->polygon_);
  distribution_.InternalSwap(&other->distribution_);
  std::swap(speed_, other->speed_);
  std::swap(id_, other->id_);
  std::swap(is_virtual_, other->is_virtual_);
  std::swap(probability_, other->probability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleSTRawData_ObstacleSTData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleSTRawData_ObstacleSTData

// optional int32 id = 1;
bool ObstacleSTRawData_ObstacleSTData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleSTRawData_ObstacleSTData::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 ObstacleSTRawData_ObstacleSTData::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.id)
  return id_;
}
void ObstacleSTRawData_ObstacleSTData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.id)
}

// optional double speed = 2;
bool ObstacleSTRawData_ObstacleSTData::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleSTRawData_ObstacleSTData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double ObstacleSTRawData_ObstacleSTData::speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.speed)
  return speed_;
}
void ObstacleSTRawData_ObstacleSTData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.speed)
}

// optional bool is_virtual = 3;
bool ObstacleSTRawData_ObstacleSTData::has_is_virtual() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_is_virtual() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_is_virtual() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleSTRawData_ObstacleSTData::clear_is_virtual() {
  is_virtual_ = false;
  clear_has_is_virtual();
}
bool ObstacleSTRawData_ObstacleSTData::is_virtual() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.is_virtual)
  return is_virtual_;
}
void ObstacleSTRawData_ObstacleSTData::set_is_virtual(bool value) {
  set_has_is_virtual();
  is_virtual_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.is_virtual)
}

// optional double probability = 4;
bool ObstacleSTRawData_ObstacleSTData::has_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleSTRawData_ObstacleSTData::set_has_probability() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleSTRawData_ObstacleSTData::clear_has_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleSTRawData_ObstacleSTData::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
double ObstacleSTRawData_ObstacleSTData::probability() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.probability)
  return probability_;
}
void ObstacleSTRawData_ObstacleSTData::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.probability)
}

// repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
int ObstacleSTRawData_ObstacleSTData::polygon_size() const {
  return polygon_.size();
}
void ObstacleSTRawData_ObstacleSTData::clear_polygon() {
  polygon_.Clear();
}
const ::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair& ObstacleSTRawData_ObstacleSTData::polygon(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Get(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Mutable(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::add_polygon() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair >*
ObstacleSTRawData_ObstacleSTData::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return &polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair >&
ObstacleSTRawData_ObstacleSTData::polygon() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_;
}

// repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
int ObstacleSTRawData_ObstacleSTData::distribution_size() const {
  return distribution_.size();
}
void ObstacleSTRawData_ObstacleSTData::clear_distribution() {
  distribution_.Clear();
}
const ::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair& ObstacleSTRawData_ObstacleSTData::distribution(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Get(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::mutable_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Mutable(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::add_distribution() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair >*
ObstacleSTRawData_ObstacleSTData::mutable_distribution() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return &distribution_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_STPointPair >&
ObstacleSTRawData_ObstacleSTData::distribution() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData::kObstacleStDataFieldNumber;
const int ObstacleSTRawData::kObstacleStNudgeFieldNumber;
const int ObstacleSTRawData::kObstacleStSidepassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData::ObstacleSTRawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.ObstacleSTRawData)
}
ObstacleSTRawData::ObstacleSTRawData(const ObstacleSTRawData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      obstacle_st_data_(from.obstacle_st_data_),
      obstacle_st_nudge_(from.obstacle_st_nudge_),
      obstacle_st_sidepass_(from.obstacle_st_sidepass_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.ObstacleSTRawData)
}

void ObstacleSTRawData::SharedCtor() {
  _cached_size_ = 0;
}

ObstacleSTRawData::~ObstacleSTRawData() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.ObstacleSTRawData)
  SharedDtor();
}

void ObstacleSTRawData::SharedDtor() {
}

void ObstacleSTRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleSTRawData::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleSTRawData& ObstacleSTRawData::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleSTRawData* ObstacleSTRawData::New(::google::protobuf::Arena* arena) const {
  ObstacleSTRawData* n = new ObstacleSTRawData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleSTRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  obstacle_st_data_.Clear();
  obstacle_st_nudge_.Clear();
  obstacle_st_sidepass_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleSTRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle_st_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle_st_nudge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle_st_sidepass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.ObstacleSTRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.ObstacleSTRawData)
  return false;
#undef DO_
}

void ObstacleSTRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0, n = this->obstacle_st_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obstacle_st_data(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0, n = this->obstacle_st_nudge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obstacle_st_nudge(i), output);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0, n = this->obstacle_st_sidepass_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacle_st_sidepass(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.ObstacleSTRawData)
}

::google::protobuf::uint8* ObstacleSTRawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0, n = this->obstacle_st_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->obstacle_st_data(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0, n = this->obstacle_st_nudge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->obstacle_st_nudge(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0, n = this->obstacle_st_sidepass_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->obstacle_st_sidepass(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.ObstacleSTRawData)
  return target;
}

size_t ObstacleSTRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  {
    unsigned int count = this->obstacle_st_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle_st_data(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  {
    unsigned int count = this->obstacle_st_nudge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle_st_nudge(i));
    }
  }

  // repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  {
    unsigned int count = this->obstacle_st_sidepass_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle_st_sidepass(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleSTRawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.ObstacleSTRawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.ObstacleSTRawData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData::MergeFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_st_data_.MergeFrom(from.obstacle_st_data_);
  obstacle_st_nudge_.MergeFrom(from.obstacle_st_nudge_);
  obstacle_st_sidepass_.MergeFrom(from.obstacle_st_sidepass_);
}

void ObstacleSTRawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData::CopyFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData::Swap(ObstacleSTRawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData::InternalSwap(ObstacleSTRawData* other) {
  obstacle_st_data_.InternalSwap(&other->obstacle_st_data_);
  obstacle_st_nudge_.InternalSwap(&other->obstacle_st_nudge_);
  obstacle_st_sidepass_.InternalSwap(&other->obstacle_st_sidepass_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleSTRawData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleSTRawData

// repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
int ObstacleSTRawData::obstacle_st_data_size() const {
  return obstacle_st_data_.size();
}
void ObstacleSTRawData::clear_obstacle_st_data() {
  obstacle_st_data_.Clear();
}
const ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_data(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Get(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_data(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Mutable(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_data() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_data() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return &obstacle_st_data_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_data() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_;
}

// repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
int ObstacleSTRawData::obstacle_st_nudge_size() const {
  return obstacle_st_nudge_.size();
}
void ObstacleSTRawData::clear_obstacle_st_nudge() {
  obstacle_st_nudge_.Clear();
}
const ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_nudge(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Get(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_nudge(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Mutable(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_nudge() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_nudge() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return &obstacle_st_nudge_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_nudge() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_;
}

// repeated .jmc_auto.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
int ObstacleSTRawData::obstacle_st_sidepass_size() const {
  return obstacle_st_sidepass_.size();
}
void ObstacleSTRawData::clear_obstacle_st_sidepass() {
  obstacle_st_sidepass_.Clear();
}
const ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_sidepass(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Get(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_sidepass(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Mutable(index);
}
::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_sidepass() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_sidepass() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return &obstacle_st_sidepass_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_sidepass() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointRawFeature::kPathFeatureFieldNumber;
const int TrajectoryPointRawFeature::kSpeedFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointRawFeature::TrajectoryPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
}
TrajectoryPointRawFeature::TrajectoryPointRawFeature(const TrajectoryPointRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_feature()) {
    path_feature_ = new ::jmc_auto::planning::autotuning::PathPointRawFeature(*from.path_feature_);
  } else {
    path_feature_ = NULL;
  }
  if (from.has_speed_feature()) {
    speed_feature_ = new ::jmc_auto::planning::autotuning::SpeedPointRawFeature(*from.speed_feature_);
  } else {
    speed_feature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
}

void TrajectoryPointRawFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_feature_, 0, reinterpret_cast<char*>(&speed_feature_) -
    reinterpret_cast<char*>(&path_feature_) + sizeof(speed_feature_));
}

TrajectoryPointRawFeature::~TrajectoryPointRawFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  SharedDtor();
}

void TrajectoryPointRawFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete path_feature_;
  }
  if (this != internal_default_instance()) {
    delete speed_feature_;
  }
}

void TrajectoryPointRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPointRawFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPointRawFeature& TrajectoryPointRawFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryPointRawFeature* TrajectoryPointRawFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryPointRawFeature* n = new TrajectoryPointRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path_feature()) {
      GOOGLE_DCHECK(path_feature_ != NULL);
      path_feature_->::jmc_auto::planning::autotuning::PathPointRawFeature::Clear();
    }
    if (has_speed_feature()) {
      GOOGLE_DCHECK(speed_feature_ != NULL);
      speed_feature_->::jmc_auto::planning::autotuning::SpeedPointRawFeature::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.autotuning.PathPointRawFeature path_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  return false;
#undef DO_
}

void TrajectoryPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_feature_, output);
  }

  // optional .jmc_auto.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->speed_feature_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
}

::google::protobuf::uint8* TrajectoryPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_feature_, deterministic, target);
  }

  // optional .jmc_auto.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->speed_feature_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  return target;
}

size_t TrajectoryPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.autotuning.PathPointRawFeature path_feature = 1;
    if (has_path_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_feature_);
    }

    // optional .jmc_auto.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
    if (has_speed_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_feature_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointRawFeature::MergeFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_feature()->::jmc_auto::planning::autotuning::PathPointRawFeature::MergeFrom(from.path_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed_feature()->::jmc_auto::planning::autotuning::SpeedPointRawFeature::MergeFrom(from.speed_feature());
    }
  }
}

void TrajectoryPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointRawFeature::CopyFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointRawFeature::Swap(TrajectoryPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointRawFeature::InternalSwap(TrajectoryPointRawFeature* other) {
  std::swap(path_feature_, other->path_feature_);
  std::swap(speed_feature_, other->speed_feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPointRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPointRawFeature

// optional .jmc_auto.planning.autotuning.PathPointRawFeature path_feature = 1;
bool TrajectoryPointRawFeature::has_path_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPointRawFeature::set_has_path_feature() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPointRawFeature::clear_has_path_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPointRawFeature::clear_path_feature() {
  if (path_feature_ != NULL) path_feature_->::jmc_auto::planning::autotuning::PathPointRawFeature::Clear();
  clear_has_path_feature();
}
const ::jmc_auto::planning::autotuning::PathPointRawFeature& TrajectoryPointRawFeature::path_feature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  return path_feature_ != NULL ? *path_feature_
                         : *::jmc_auto::planning::autotuning::PathPointRawFeature::internal_default_instance();
}
::jmc_auto::planning::autotuning::PathPointRawFeature* TrajectoryPointRawFeature::mutable_path_feature() {
  set_has_path_feature();
  if (path_feature_ == NULL) {
    path_feature_ = new ::jmc_auto::planning::autotuning::PathPointRawFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  return path_feature_;
}
::jmc_auto::planning::autotuning::PathPointRawFeature* TrajectoryPointRawFeature::release_path_feature() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  clear_has_path_feature();
  ::jmc_auto::planning::autotuning::PathPointRawFeature* temp = path_feature_;
  path_feature_ = NULL;
  return temp;
}
void TrajectoryPointRawFeature::set_allocated_path_feature(::jmc_auto::planning::autotuning::PathPointRawFeature* path_feature) {
  delete path_feature_;
  path_feature_ = path_feature;
  if (path_feature) {
    set_has_path_feature();
  } else {
    clear_has_path_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.path_feature)
}

// optional .jmc_auto.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
bool TrajectoryPointRawFeature::has_speed_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPointRawFeature::set_has_speed_feature() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPointRawFeature::clear_has_speed_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPointRawFeature::clear_speed_feature() {
  if (speed_feature_ != NULL) speed_feature_->::jmc_auto::planning::autotuning::SpeedPointRawFeature::Clear();
  clear_has_speed_feature();
}
const ::jmc_auto::planning::autotuning::SpeedPointRawFeature& TrajectoryPointRawFeature::speed_feature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  return speed_feature_ != NULL ? *speed_feature_
                         : *::jmc_auto::planning::autotuning::SpeedPointRawFeature::internal_default_instance();
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature* TrajectoryPointRawFeature::mutable_speed_feature() {
  set_has_speed_feature();
  if (speed_feature_ == NULL) {
    speed_feature_ = new ::jmc_auto::planning::autotuning::SpeedPointRawFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  return speed_feature_;
}
::jmc_auto::planning::autotuning::SpeedPointRawFeature* TrajectoryPointRawFeature::release_speed_feature() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  clear_has_speed_feature();
  ::jmc_auto::planning::autotuning::SpeedPointRawFeature* temp = speed_feature_;
  speed_feature_ = NULL;
  return temp;
}
void TrajectoryPointRawFeature::set_allocated_speed_feature(::jmc_auto::planning::autotuning::SpeedPointRawFeature* speed_feature) {
  delete speed_feature_;
  speed_feature_ = speed_feature;
  if (speed_feature) {
    set_has_speed_feature();
  } else {
    clear_has_speed_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryRawFeature::kPointFeatureFieldNumber;
const int TrajectoryRawFeature::kStRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryRawFeature::TrajectoryRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.autotuning.TrajectoryRawFeature)
}
TrajectoryRawFeature::TrajectoryRawFeature(const TrajectoryRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_feature_(from.point_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_st_raw_data()) {
    st_raw_data_ = new ::jmc_auto::planning::autotuning::ObstacleSTRawData(*from.st_raw_data_);
  } else {
    st_raw_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.autotuning.TrajectoryRawFeature)
}

void TrajectoryRawFeature::SharedCtor() {
  _cached_size_ = 0;
  st_raw_data_ = NULL;
}

TrajectoryRawFeature::~TrajectoryRawFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  SharedDtor();
}

void TrajectoryRawFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete st_raw_data_;
  }
}

void TrajectoryRawFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryRawFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryRawFeature& TrajectoryRawFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryRawFeature* TrajectoryRawFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryRawFeature* n = new TrajectoryRawFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  point_feature_.Clear();
  if (has_st_raw_data()) {
    GOOGLE_DCHECK(st_raw_data_ != NULL);
    st_raw_data_->::jmc_auto::planning::autotuning::ObstacleSTRawData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  return false;
#undef DO_
}

void TrajectoryRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0, n = this->point_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point_feature(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->st_raw_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.autotuning.TrajectoryRawFeature)
}

::google::protobuf::uint8* TrajectoryRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0, n = this->point_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point_feature(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->st_raw_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  return target;
}

size_t TrajectoryRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  {
    unsigned int count = this->point_feature_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_feature(i));
    }
  }

  // optional .jmc_auto.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (has_st_raw_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->st_raw_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.autotuning.TrajectoryRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.autotuning.TrajectoryRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryRawFeature::MergeFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_feature_.MergeFrom(from.point_feature_);
  if (from.has_st_raw_data()) {
    mutable_st_raw_data()->::jmc_auto::planning::autotuning::ObstacleSTRawData::MergeFrom(from.st_raw_data());
  }
}

void TrajectoryRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRawFeature::CopyFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryRawFeature::Swap(TrajectoryRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryRawFeature::InternalSwap(TrajectoryRawFeature* other) {
  point_feature_.InternalSwap(&other->point_feature_);
  std::swap(st_raw_data_, other->st_raw_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryRawFeature

// repeated .jmc_auto.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
int TrajectoryRawFeature::point_feature_size() const {
  return point_feature_.size();
}
void TrajectoryRawFeature::clear_point_feature() {
  point_feature_.Clear();
}
const ::jmc_auto::planning::autotuning::TrajectoryPointRawFeature& TrajectoryRawFeature::point_feature(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Get(index);
}
::jmc_auto::planning::autotuning::TrajectoryPointRawFeature* TrajectoryRawFeature::mutable_point_feature(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Mutable(index);
}
::jmc_auto::planning::autotuning::TrajectoryPointRawFeature* TrajectoryRawFeature::add_point_feature() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::TrajectoryPointRawFeature >*
TrajectoryRawFeature::mutable_point_feature() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.autotuning.TrajectoryRawFeature.point_feature)
  return &point_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::autotuning::TrajectoryPointRawFeature >&
TrajectoryRawFeature::point_feature() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_;
}

// optional .jmc_auto.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
bool TrajectoryRawFeature::has_st_raw_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryRawFeature::set_has_st_raw_data() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryRawFeature::clear_has_st_raw_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryRawFeature::clear_st_raw_data() {
  if (st_raw_data_ != NULL) st_raw_data_->::jmc_auto::planning::autotuning::ObstacleSTRawData::Clear();
  clear_has_st_raw_data();
}
const ::jmc_auto::planning::autotuning::ObstacleSTRawData& TrajectoryRawFeature::st_raw_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  return st_raw_data_ != NULL ? *st_raw_data_
                         : *::jmc_auto::planning::autotuning::ObstacleSTRawData::internal_default_instance();
}
::jmc_auto::planning::autotuning::ObstacleSTRawData* TrajectoryRawFeature::mutable_st_raw_data() {
  set_has_st_raw_data();
  if (st_raw_data_ == NULL) {
    st_raw_data_ = new ::jmc_auto::planning::autotuning::ObstacleSTRawData;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  return st_raw_data_;
}
::jmc_auto::planning::autotuning::ObstacleSTRawData* TrajectoryRawFeature::release_st_raw_data() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  clear_has_st_raw_data();
  ::jmc_auto::planning::autotuning::ObstacleSTRawData* temp = st_raw_data_;
  st_raw_data_ = NULL;
  return temp;
}
void TrajectoryRawFeature::set_allocated_st_raw_data(::jmc_auto::planning::autotuning::ObstacleSTRawData* st_raw_data) {
  delete st_raw_data_;
  st_raw_data_ = st_raw_data;
  if (st_raw_data) {
    set_has_st_raw_data();
  } else {
    clear_has_st_raw_data();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.autotuning.TrajectoryRawFeature.st_raw_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace autotuning
}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
