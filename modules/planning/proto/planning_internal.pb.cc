// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning_internal {
class DebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug> {
} _Debug_default_instance_;
class SpeedPlanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedPlan> {
} _SpeedPlan_default_instance_;
class StGraphBoundaryDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StGraphBoundaryDebug> {
} _StGraphBoundaryDebug_default_instance_;
class SLFrameDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLFrameDebug> {
} _SLFrameDebug_default_instance_;
class STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug_STGraphSpeedConstraint> {
} _STGraphDebug_STGraphSpeedConstraint_default_instance_;
class STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug_STGraphKernelCuiseRef> {
} _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
class STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug_STGraphKernelFollowRef> {
} _STGraphDebug_STGraphKernelFollowRef_default_instance_;
class STGraphDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<STGraphDebug> {
} _STGraphDebug_default_instance_;
class SignalLightDebug_SignalDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignalLightDebug_SignalDebug> {
} _SignalLightDebug_SignalDebug_default_instance_;
class SignalLightDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignalLightDebug> {
} _SignalLightDebug_default_instance_;
class DecisionTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecisionTag> {
} _DecisionTag_default_instance_;
class ObstacleDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleDebug> {
} _ObstacleDebug_default_instance_;
class ReferenceLineDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineDebug> {
} _ReferenceLineDebug_default_instance_;
class SampleLayerDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleLayerDebug> {
} _SampleLayerDebug_default_instance_;
class DpPolyGraphDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DpPolyGraphDebug> {
} _DpPolyGraphDebug_default_instance_;
class ScenarioDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScenarioDebug> {
} _ScenarioDebug_default_instance_;
class TrajectoriesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Trajectories> {
} _Trajectories_default_instance_;
class OpenSpaceDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceDebug> {
} _OpenSpaceDebug_default_instance_;
class SmootherDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SmootherDebug> {
} _SmootherDebug_default_instance_;
class PullOverDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PullOverDebug> {
} _PullOverDebug_default_instance_;
class PlanningDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningData> {
} _PlanningData_default_instance_;
class LatticeStPixelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatticeStPixel> {
} _LatticeStPixel_default_instance_;
class LatticeStTrainingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatticeStTraining> {
} _LatticeStTraining_default_instance_;
class CostComponentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CostComponents> {
} _CostComponents_default_instance_;
class AutoTuningTrainingDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoTuningTrainingData> {
} _AutoTuningTrainingData_default_instance_;
class CloudReferenceLineRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloudReferenceLineRequest> {
} _CloudReferenceLineRequest_default_instance_;
class CloudReferenceLineRoutingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloudReferenceLineRoutingRequest> {
} _CloudReferenceLineRoutingRequest_default_instance_;
class CloudReferenceLineResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloudReferenceLineResponse> {
} _CloudReferenceLineResponse_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug, planning_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPlan, speed_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGraphBoundaryDebug, type_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, sampled_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, static_obstacle_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, dynamic_obstacle_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, static_obstacle_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, dynamic_obstacle_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, map_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, map_upper_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, sl_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLFrameDebug, aggregated_boundary_high_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphSpeedConstraint, upper_bound_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelCuiseRef, cruise_line_s_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug_STGraphKernelFollowRef, follow_line_s_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_profile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, speed_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, kernel_cruise_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STGraphDebug, kernel_follow_ref_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, light_stop_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, adc_stop_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug_SignalDebug, is_stop_wall_created_),
  0,
  2,
  1,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, adc_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, adc_front_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalLightDebug, signal_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, decider_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionTag, decision_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, sl_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, decision_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, vertices_x_coords_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleDebug, vertices_y_coords_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_change_lane_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_drivable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_protected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, is_offroad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, minimum_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, average_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, average_dkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, kappa_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, dkappa_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, kappa_max_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, dkappa_max_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineDebug, average_offset_),
  0,
  1,
  2,
  11,
  12,
  13,
  14,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleLayerDebug, sl_point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, sample_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpPolyGraphDebug, min_cost_point_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioDebug, scenario_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioDebug, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenarioDebug, msg_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectories, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectories, trajectory_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, trajectories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, warm_start_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, smoothed_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, warm_start_dual_lambda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, warm_start_dual_miu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, optimized_dual_lambda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, optimized_dual_miu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, xy_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, roi_shift_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, end_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, partitioned_trajectories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, chosen_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, is_fallback_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, fallback_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, trajectory_stitching_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, future_collision_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, time_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, origin_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceDebug, origin_heading_rad_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  13,
  7,
  8,
  9,
  11,
  10,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherDebug, is_smoothed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherDebug, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmootherDebug, reason_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, length_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, length_back_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, width_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullOverDebug, width_right_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, adc_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, chassis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, routing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, init_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, speed_plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, st_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, sl_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, prediction_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, signal_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, reference_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, dp_poly_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, lattice_st_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, relative_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, auto_tuning_training_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, front_clear_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, chart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, scenario_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, open_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, smoother_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningData, pull_over_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  6,
  7,
  8,
  9,
  14,
  ~0u,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStPixel, b_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, pixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, annotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, num_s_grids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, num_t_grids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, s_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatticeStTraining, t_resolution_),
  ~0u,
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostComponents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostComponents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostComponents, cost_component_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, teacher_component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoTuningTrainingData, student_component_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRequest, lane_segment_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRoutingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineRoutingRequest, routing_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloudReferenceLineResponse, segment_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Debug)},
  { 7, 14, sizeof(SpeedPlan)},
  { 16, 24, sizeof(StGraphBoundaryDebug)},
  { 27, 44, sizeof(SLFrameDebug)},
  { 56, 64, sizeof(STGraphDebug_STGraphSpeedConstraint)},
  { 67, 74, sizeof(STGraphDebug_STGraphKernelCuiseRef)},
  { 76, 83, sizeof(STGraphDebug_STGraphKernelFollowRef)},
  { 85, 97, sizeof(STGraphDebug)},
  { 104, 114, sizeof(SignalLightDebug_SignalDebug)},
  { 119, 127, sizeof(SignalLightDebug)},
  { 130, 137, sizeof(DecisionTag)},
  { 139, 149, sizeof(ObstacleDebug)},
  { 154, 174, sizeof(ReferenceLineDebug)},
  { 189, 195, sizeof(SampleLayerDebug)},
  { 196, 203, sizeof(DpPolyGraphDebug)},
  { 205, 213, sizeof(ScenarioDebug)},
  { 216, 222, sizeof(Trajectories)},
  { 223, 248, sizeof(OpenSpaceDebug)},
  { 268, 276, sizeof(SmootherDebug)},
  { 279, 290, sizeof(PullOverDebug)},
  { 296, 323, sizeof(PlanningData)},
  { 345, 355, sizeof(LatticeStPixel)},
  { 360, 372, sizeof(LatticeStTraining)},
  { 379, 385, sizeof(CostComponents)},
  { 386, 393, sizeof(AutoTuningTrainingData)},
  { 395, 401, sizeof(CloudReferenceLineRequest)},
  { 402, 408, sizeof(CloudReferenceLineRoutingRequest)},
  { 409, 415, sizeof(CloudReferenceLineResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedPlan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StGraphBoundaryDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLFrameDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_STGraphSpeedConstraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_STGraphKernelCuiseRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_STGraphKernelFollowRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_STGraphDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignalLightDebug_SignalDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignalLightDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecisionTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReferenceLineDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleLayerDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DpPolyGraphDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenarioDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectories_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpenSpaceDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SmootherDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PullOverDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatticeStPixel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatticeStTraining_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CostComponents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoTuningTrainingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudReferenceLineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudReferenceLineRoutingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloudReferenceLineResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning_internal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

}  // namespace

void TableStruct::Shutdown() {
  _Debug_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SpeedPlan_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _StGraphBoundaryDebug_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SLFrameDebug_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _STGraphDebug_STGraphSpeedConstraint_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _STGraphDebug_STGraphKernelCuiseRef_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _STGraphDebug_STGraphKernelFollowRef_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _STGraphDebug_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SignalLightDebug_SignalDebug_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SignalLightDebug_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _DecisionTag_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ObstacleDebug_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ReferenceLineDebug_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SampleLayerDebug_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _DpPolyGraphDebug_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ScenarioDebug_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Trajectories_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _OpenSpaceDebug_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _SmootherDebug_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _PullOverDebug_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _PlanningData_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _LatticeStPixel_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _LatticeStTraining_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CostComponents_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _AutoTuningTrainingData_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CloudReferenceLineRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CloudReferenceLineRoutingRequest_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CloudReferenceLineResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::jmc_auto::localization::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  ::jmc_auto::dreamview::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  ::jmc_auto::relative_map::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  ::jmc_auto::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto::InitDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::InitDefaults();
  _Debug_default_instance_.DefaultConstruct();
  _SpeedPlan_default_instance_.DefaultConstruct();
  _StGraphBoundaryDebug_default_instance_.DefaultConstruct();
  _SLFrameDebug_default_instance_.DefaultConstruct();
  _STGraphDebug_STGraphSpeedConstraint_default_instance_.DefaultConstruct();
  _STGraphDebug_STGraphKernelCuiseRef_default_instance_.DefaultConstruct();
  _STGraphDebug_STGraphKernelFollowRef_default_instance_.DefaultConstruct();
  _STGraphDebug_default_instance_.DefaultConstruct();
  _SignalLightDebug_SignalDebug_default_instance_.DefaultConstruct();
  _SignalLightDebug_default_instance_.DefaultConstruct();
  _DecisionTag_default_instance_.DefaultConstruct();
  _ObstacleDebug_default_instance_.DefaultConstruct();
  _ReferenceLineDebug_default_instance_.DefaultConstruct();
  _SampleLayerDebug_default_instance_.DefaultConstruct();
  _DpPolyGraphDebug_default_instance_.DefaultConstruct();
  _ScenarioDebug_default_instance_.DefaultConstruct();
  _Trajectories_default_instance_.DefaultConstruct();
  _OpenSpaceDebug_default_instance_.DefaultConstruct();
  _SmootherDebug_default_instance_.DefaultConstruct();
  _PullOverDebug_default_instance_.DefaultConstruct();
  _PlanningData_default_instance_.DefaultConstruct();
  _LatticeStPixel_default_instance_.DefaultConstruct();
  _LatticeStTraining_default_instance_.DefaultConstruct();
  _CostComponents_default_instance_.DefaultConstruct();
  _AutoTuningTrainingData_default_instance_.DefaultConstruct();
  _CloudReferenceLineRequest_default_instance_.DefaultConstruct();
  _CloudReferenceLineRoutingRequest_default_instance_.DefaultConstruct();
  _CloudReferenceLineResponse_default_instance_.DefaultConstruct();
  _Debug_default_instance_.get_mutable()->planning_data_ = const_cast< ::jmc_auto::planning_internal::PlanningData*>(
      ::jmc_auto::planning_internal::PlanningData::internal_default_instance());
  _STGraphDebug_default_instance_.get_mutable()->speed_constraint_ = const_cast< ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint*>(
      ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance());
  _STGraphDebug_default_instance_.get_mutable()->kernel_cruise_ref_ = const_cast< ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef*>(
      ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance());
  _STGraphDebug_default_instance_.get_mutable()->kernel_follow_ref_ = const_cast< ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef*>(
      ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance());
  _DecisionTag_default_instance_.get_mutable()->decision_ = const_cast< ::jmc_auto::planning::ObjectDecisionType*>(
      ::jmc_auto::planning::ObjectDecisionType::internal_default_instance());
  _ObstacleDebug_default_instance_.get_mutable()->sl_boundary_ = const_cast< ::jmc_auto::planning::SLBoundary*>(
      ::jmc_auto::planning::SLBoundary::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->trajectories_ = const_cast< ::jmc_auto::planning_internal::Trajectories*>(
      ::jmc_auto::planning_internal::Trajectories::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->warm_start_trajectory_ = const_cast< ::jmc_auto::common::VehicleMotion*>(
      ::jmc_auto::common::VehicleMotion::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->smoothed_trajectory_ = const_cast< ::jmc_auto::common::VehicleMotion*>(
      ::jmc_auto::common::VehicleMotion::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->roi_shift_point_ = const_cast< ::jmc_auto::common::TrajectoryPoint*>(
      ::jmc_auto::common::TrajectoryPoint::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->end_point_ = const_cast< ::jmc_auto::common::TrajectoryPoint*>(
      ::jmc_auto::common::TrajectoryPoint::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->partitioned_trajectories_ = const_cast< ::jmc_auto::planning_internal::Trajectories*>(
      ::jmc_auto::planning_internal::Trajectories::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->chosen_trajectory_ = const_cast< ::jmc_auto::planning_internal::Trajectories*>(
      ::jmc_auto::planning_internal::Trajectories::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->fallback_trajectory_ = const_cast< ::jmc_auto::planning_internal::Trajectories*>(
      ::jmc_auto::planning_internal::Trajectories::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->trajectory_stitching_point_ = const_cast< ::jmc_auto::common::TrajectoryPoint*>(
      ::jmc_auto::common::TrajectoryPoint::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->future_collision_point_ = const_cast< ::jmc_auto::common::TrajectoryPoint*>(
      ::jmc_auto::common::TrajectoryPoint::internal_default_instance());
  _OpenSpaceDebug_default_instance_.get_mutable()->origin_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _PullOverDebug_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->adc_position_ = const_cast< ::jmc_auto::localization::LocalizationEstimate*>(
      ::jmc_auto::localization::LocalizationEstimate::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->chassis_ = const_cast< ::jmc_auto::canbus::Chassis*>(
      ::jmc_auto::canbus::Chassis::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->routing_ = const_cast< ::jmc_auto::routing::RoutingResponse*>(
      ::jmc_auto::routing::RoutingResponse::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->init_point_ = const_cast< ::jmc_auto::common::TrajectoryPoint*>(
      ::jmc_auto::common::TrajectoryPoint::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->prediction_header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->signal_light_ = const_cast< ::jmc_auto::planning_internal::SignalLightDebug*>(
      ::jmc_auto::planning_internal::SignalLightDebug::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->dp_poly_graph_ = const_cast< ::jmc_auto::planning_internal::DpPolyGraphDebug*>(
      ::jmc_auto::planning_internal::DpPolyGraphDebug::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->lattice_st_image_ = const_cast< ::jmc_auto::planning_internal::LatticeStTraining*>(
      ::jmc_auto::planning_internal::LatticeStTraining::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->relative_map_ = const_cast< ::jmc_auto::relative_map::MapMsg*>(
      ::jmc_auto::relative_map::MapMsg::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->auto_tuning_training_data_ = const_cast< ::jmc_auto::planning_internal::AutoTuningTrainingData*>(
      ::jmc_auto::planning_internal::AutoTuningTrainingData::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->scenario_ = const_cast< ::jmc_auto::planning_internal::ScenarioDebug*>(
      ::jmc_auto::planning_internal::ScenarioDebug::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->open_space_ = const_cast< ::jmc_auto::planning_internal::OpenSpaceDebug*>(
      ::jmc_auto::planning_internal::OpenSpaceDebug::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->smoother_ = const_cast< ::jmc_auto::planning_internal::SmootherDebug*>(
      ::jmc_auto::planning_internal::SmootherDebug::internal_default_instance());
  _PlanningData_default_instance_.get_mutable()->pull_over_ = const_cast< ::jmc_auto::planning_internal::PullOverDebug*>(
      ::jmc_auto::planning_internal::PullOverDebug::internal_default_instance());
  _AutoTuningTrainingData_default_instance_.get_mutable()->teacher_component_ = const_cast< ::jmc_auto::planning_internal::CostComponents*>(
      ::jmc_auto::planning_internal::CostComponents::internal_default_instance());
  _AutoTuningTrainingData_default_instance_.get_mutable()->student_component_ = const_cast< ::jmc_auto::planning_internal::CostComponents*>(
      ::jmc_auto::planning_internal::CostComponents::internal_default_instance());
  _CloudReferenceLineRoutingRequest_default_instance_.get_mutable()->routing_ = const_cast< ::jmc_auto::routing::RoutingResponse*>(
      ::jmc_auto::routing::RoutingResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n.modules/planning/proto/planning_intern"
      "al.proto\022\032jmc_auto.planning_internal\032#mo"
      "dules/common/proto/geometry.proto\032!modul"
      "es/common/proto/header.proto\032\"modules/ca"
      "nbus/proto/chassis.proto\032$modules/common"
      "/proto/pnc_point.proto\032-modules/localiza"
      "tion/proto/localization.proto\032#modules/d"
      "reamview/proto/chart.proto\032/modules/map/"
      "relative_map/proto/navigation.proto\032#mod"
      "ules/routing/proto/routing.proto\0326module"
      "s/perception/proto/traffic_light_detecti"
      "on.proto\032(modules/planning/proto/sl_boun"
      "dary.proto\032%modules/planning/proto/decis"
      "ion.proto\032,modules/planning/proto/planni"
      "ng_config.proto\"H\n\005Debug\022\?\n\rplanning_dat"
      "a\030\002 \001(\0132(.jmc_auto.planning_internal.Pla"
      "nningData\"K\n\tSpeedPlan\022\014\n\004name\030\001 \001(\t\0220\n\013"
      "speed_point\030\002 \003(\0132\033.jmc_auto.common.Spee"
      "dPoint\"\212\003\n\024StGraphBoundaryDebug\022\014\n\004name\030"
      "\001 \001(\t\022*\n\005point\030\002 \003(\0132\033.jmc_auto.common.S"
      "peedPoint\022M\n\004type\030\003 \001(\0162\?.jmc_auto.plann"
      "ing_internal.StGraphBoundaryDebug.StBoun"
      "daryType\"\350\001\n\016StBoundaryType\022\034\n\030ST_BOUNDA"
      "RY_TYPE_UNKNOWN\020\001\022\031\n\025ST_BOUNDARY_TYPE_ST"
      "OP\020\002\022\033\n\027ST_BOUNDARY_TYPE_FOLLOW\020\003\022\032\n\026ST_"
      "BOUNDARY_TYPE_YIELD\020\004\022\035\n\031ST_BOUNDARY_TYP"
      "E_OVERTAKE\020\005\022\037\n\033ST_BOUNDARY_TYPE_KEEP_CL"
      "EAR\020\006\022$\n ST_BOUNDARY_TYPE_DRIVABLE_REGIO"
      "N\020\007\"\204\003\n\014SLFrameDebug\022\014\n\004name\030\001 \001(\t\022\021\n\tsa"
      "mpled_s\030\002 \003(\001\022#\n\033static_obstacle_lower_b"
      "ound\030\003 \003(\001\022$\n\034dynamic_obstacle_lower_bou"
      "nd\030\004 \003(\001\022#\n\033static_obstacle_upper_bound\030"
      "\005 \003(\001\022$\n\034dynamic_obstacle_upper_bound\030\006 "
      "\003(\001\022\027\n\017map_lower_bound\030\007 \003(\001\022\027\n\017map_uppe"
      "r_bound\030\010 \003(\001\022)\n\007sl_path\030\t \003(\0132\030.jmc_aut"
      "o.common.SLPoint\022\035\n\025aggregated_boundary_"
      "s\030\n \003(\001\022\037\n\027aggregated_boundary_low\030\013 \003(\001"
      "\022 \n\030aggregated_boundary_high\030\014 \003(\001\"\236\005\n\014S"
      "TGraphDebug\022\014\n\004name\030\001 \001(\t\022B\n\010boundary\030\002 "
      "\003(\01320.jmc_auto.planning_internal.StGraph"
      "BoundaryDebug\0220\n\013speed_limit\030\003 \003(\0132\033.jmc"
      "_auto.common.SpeedPoint\0222\n\rspeed_profile"
      "\030\004 \003(\0132\033.jmc_auto.common.SpeedPoint\022Y\n\020s"
      "peed_constraint\030\005 \001(\0132\?.jmc_auto.plannin"
      "g_internal.STGraphDebug.STGraphSpeedCons"
      "traint\022Y\n\021kernel_cruise_ref\030\006 \001(\0132>.jmc_"
      "auto.planning_internal.STGraphDebug.STGr"
      "aphKernelCuiseRef\022Z\n\021kernel_follow_ref\030\007"
      " \001(\0132\?.jmc_auto.planning_internal.STGrap"
      "hDebug.STGraphKernelFollowRef\032M\n\026STGraph"
      "SpeedConstraint\022\t\n\001t\030\001 \003(\001\022\023\n\013lower_boun"
      "d\030\002 \003(\001\022\023\n\013upper_bound\030\003 \003(\001\0329\n\025STGraphK"
      "ernelCuiseRef\022\t\n\001t\030\001 \003(\001\022\025\n\rcruise_line_"
      "s\030\002 \003(\001\032:\n\026STGraphKernelFollowRef\022\t\n\001t\030\001"
      " \003(\001\022\025\n\rfollow_line_s\030\002 \003(\001\"\261\002\n\020SignalLi"
      "ghtDebug\022\021\n\tadc_speed\030\001 \001(\001\022\023\n\013adc_front"
      "_s\030\002 \001(\001\022H\n\006signal\030\003 \003(\01328.jmc_auto.plan"
      "ning_internal.SignalLightDebug.SignalDeb"
      "ug\032\252\001\n\013SignalDebug\022\020\n\010light_id\030\001 \001(\t\0226\n\005"
      "color\030\002 \001(\0162\'.jmc_auto.perception.Traffi"
      "cLight.Color\022\024\n\014light_stop_s\030\003 \001(\001\022\035\n\025ad"
      "c_stop_deceleration\030\004 \001(\001\022\034\n\024is_stop_wal"
      "l_created\030\005 \001(\010\"[\n\013DecisionTag\022\023\n\013decide"
      "r_tag\030\001 \001(\t\0227\n\010decision\030\002 \001(\0132%.jmc_auto"
      ".planning.ObjectDecisionType\"\304\001\n\rObstacl"
      "eDebug\022\n\n\002id\030\001 \001(\t\0222\n\013sl_boundary\030\002 \001(\0132"
      "\035.jmc_auto.planning.SLBoundary\022=\n\014decisi"
      "on_tag\030\003 \003(\0132\'.jmc_auto.planning_interna"
      "l.DecisionTag\022\031\n\021vertices_x_coords\030\004 \003(\001"
      "\022\031\n\021vertices_y_coords\030\005 \003(\001\"\331\002\n\022Referenc"
      "eLineDebug\022\n\n\002id\030\001 \001(\t\022\016\n\006length\030\002 \001(\001\022\014"
      "\n\004cost\030\003 \001(\001\022\033\n\023is_change_lane_path\030\004 \001("
      "\010\022\023\n\013is_drivable\030\005 \001(\010\022\024\n\014is_protected\030\006"
      " \001(\010\022\022\n\nis_offroad\030\007 \001(\010\022\030\n\020minimum_boun"
      "dary\030\010 \001(\001\022\031\n\raverage_kappa\030\t \001(\001B\002\030\001\022\032\n"
      "\016average_dkappa\030\n \001(\001B\002\030\001\022\021\n\tkappa_rms\030\013"
      " \001(\001\022\022\n\ndkappa_rms\030\014 \001(\001\022\025\n\rkappa_max_ab"
      "s\030\r \001(\001\022\026\n\016dkappa_max_abs\030\016 \001(\001\022\026\n\016avera"
      "ge_offset\030\017 \001(\001\">\n\020SampleLayerDebug\022*\n\010s"
      "l_point\030\001 \003(\0132\030.jmc_auto.common.SLPoint\""
      "\210\001\n\020DpPolyGraphDebug\022B\n\014sample_layer\030\001 \003"
      "(\0132,.jmc_auto.planning_internal.SampleLa"
      "yerDebug\0220\n\016min_cost_point\030\002 \003(\0132\030.jmc_a"
      "uto.common.SLPoint\"\244\001\n\rScenarioDebug\022E\n\r"
      "scenario_type\030\001 \001(\0162..jmc_auto.planning."
      "ScenarioConfig.ScenarioType\022\?\n\nstage_typ"
      "e\030\002 \001(\0162+.jmc_auto.planning.ScenarioConf"
      "ig.StageType\022\013\n\003msg\030\003 \001(\t\"\?\n\014Trajectorie"
      "s\022/\n\ntrajectory\030\001 \003(\0132\033.jmc_auto.common."
      "Trajectory\"\355\007\n\016OpenSpaceDebug\022>\n\014traject"
      "ories\030\001 \001(\0132(.jmc_auto.planning_internal"
      ".Trajectories\022=\n\025warm_start_trajectory\030\002"
      " \001(\0132\036.jmc_auto.common.VehicleMotion\022;\n\023"
      "smoothed_trajectory\030\003 \001(\0132\036.jmc_auto.com"
      "mon.VehicleMotion\022\036\n\026warm_start_dual_lam"
      "bda\030\004 \003(\001\022\033\n\023warm_start_dual_miu\030\005 \003(\001\022\035"
      "\n\025optimized_dual_lambda\030\006 \003(\001\022\032\n\022optimiz"
      "ed_dual_miu\030\007 \003(\001\022\023\n\013xy_boundary\030\010 \003(\001\022<"
      "\n\tobstacles\030\t \003(\0132).jmc_auto.planning_in"
      "ternal.ObstacleDebug\0229\n\017roi_shift_point\030"
      "\n \001(\0132 .jmc_auto.common.TrajectoryPoint\022"
      "3\n\tend_point\030\013 \001(\0132 .jmc_auto.common.Tra"
      "jectoryPoint\022J\n\030partitioned_trajectories"
      "\030\014 \001(\0132(.jmc_auto.planning_internal.Traj"
      "ectories\022C\n\021chosen_trajectory\030\r \001(\0132(.jm"
      "c_auto.planning_internal.Trajectories\022\036\n"
      "\026is_fallback_trajectory\030\016 \001(\010\022E\n\023fallbac"
      "k_trajectory\030\017 \001(\0132(.jmc_auto.planning_i"
      "nternal.Trajectories\022D\n\032trajectory_stitc"
      "hing_point\030\020 \001(\0132 .jmc_auto.common.Traje"
      "ctoryPoint\022@\n\026future_collision_point\030\021 \001"
      "(\0132 .jmc_auto.common.TrajectoryPoint\022\027\n\014"
      "time_latency\030\022 \001(\001:\0010\022/\n\014origin_point\030\023 "
      "\001(\0132\031.jmc_auto.common.PointENU\022\032\n\022origin"
      "_heading_rad\030\024 \001(\001\"\305\001\n\rSmootherDebug\022\023\n\013"
      "is_smoothed\030\001 \001(\010\022S\n\004type\030\002 \001(\01626.jmc_au"
      "to.planning_internal.SmootherDebug.Smoot"
      "herType:\rSMOOTHER_NONE\022\016\n\006reason\030\003 \001(\t\":"
      "\n\014SmootherType\022\021\n\rSMOOTHER_NONE\020\001\022\027\n\023SMO"
      "OTHER_CLOSE_STOP\020\002\"\237\001\n\rPullOverDebug\022+\n\010"
      "position\030\001 \001(\0132\031.jmc_auto.common.PointEN"
      "U\022\r\n\005theta\030\002 \001(\001\022\024\n\014length_front\030\003 \001(\001\022\023"
      "\n\013length_back\030\004 \001(\001\022\022\n\nwidth_left\030\005 \001(\001\022"
      "\023\n\013width_right\030\006 \001(\001\"\225\n\n\014PlanningData\022A\n"
      "\014adc_position\030\007 \001(\0132+.jmc_auto.localizat"
      "ion.LocalizationEstimate\022)\n\007chassis\030\010 \001("
      "\0132\030.jmc_auto.canbus.Chassis\0222\n\007routing\030\t"
      " \001(\0132!.jmc_auto.routing.RoutingResponse\022"
      "4\n\ninit_point\030\n \001(\0132 .jmc_auto.common.Tr"
      "ajectoryPoint\022#\n\004path\030\006 \003(\0132\025.jmc_auto.c"
      "ommon.Path\0229\n\nspeed_plan\030\r \003(\0132%.jmc_aut"
      "o.planning_internal.SpeedPlan\022:\n\010st_grap"
      "h\030\016 \003(\0132(.jmc_auto.planning_internal.STG"
      "raphDebug\022:\n\010sl_frame\030\017 \003(\0132(.jmc_auto.p"
      "lanning_internal.SLFrameDebug\0222\n\021predict"
      "ion_header\030\020 \001(\0132\027.jmc_auto.common.Heade"
      "r\022B\n\014signal_light\030\021 \001(\0132,.jmc_auto.plann"
      "ing_internal.SignalLightDebug\022;\n\010obstacl"
      "e\030\022 \003(\0132).jmc_auto.planning_internal.Obs"
      "tacleDebug\022F\n\016reference_line\030\023 \003(\0132..jmc"
      "_auto.planning_internal.ReferenceLineDeb"
      "ug\022C\n\rdp_poly_graph\030\024 \001(\0132,.jmc_auto.pla"
      "nning_internal.DpPolyGraphDebug\022G\n\020latti"
      "ce_st_image\030\025 \001(\0132-.jmc_auto.planning_in"
      "ternal.LatticeStTraining\0223\n\014relative_map"
      "\030\026 \001(\0132\035.jmc_auto.relative_map.MapMsg\022U\n"
      "\031auto_tuning_training_data\030\027 \001(\01322.jmc_a"
      "uto.planning_internal.AutoTuningTraining"
      "Data\022\034\n\024front_clear_distance\030\030 \001(\001\022(\n\005ch"
      "art\030\031 \003(\0132\031.jmc_auto.dreamview.Chart\022;\n\010"
      "scenario\030\032 \001(\0132).jmc_auto.planning_inter"
      "nal.ScenarioDebug\022>\n\nopen_space\030\033 \001(\0132*."
      "jmc_auto.planning_internal.OpenSpaceDebu"
      "g\022;\n\010smoother\030\034 \001(\0132).jmc_auto.planning_"
      "internal.SmootherDebug\022<\n\tpull_over\030\035 \001("
      "\0132).jmc_auto.planning_internal.PullOverD"
      "ebug\"G\n\016LatticeStPixel\022\t\n\001s\030\001 \001(\005\022\t\n\001t\030\002"
      " \001(\005\022\t\n\001r\030\003 \001(\r\022\t\n\001g\030\004 \001(\r\022\t\n\001b\030\005 \001(\r\"\313\001"
      "\n\021LatticeStTraining\0229\n\005pixel\030\001 \003(\0132*.jmc"
      "_auto.planning_internal.LatticeStPixel\022\021"
      "\n\ttimestamp\030\002 \001(\001\022\022\n\nannotation\030\003 \001(\t\022\023\n"
      "\013num_s_grids\030\004 \001(\r\022\023\n\013num_t_grids\030\005 \001(\r\022"
      "\024\n\014s_resolution\030\006 \001(\001\022\024\n\014t_resolution\030\007 "
      "\001(\001\"(\n\016CostComponents\022\026\n\016cost_component\030"
      "\001 \003(\001\"\246\001\n\026AutoTuningTrainingData\022E\n\021teac"
      "her_component\030\001 \001(\0132*.jmc_auto.planning_"
      "internal.CostComponents\022E\n\021student_compo"
      "nent\030\002 \001(\0132*.jmc_auto.planning_internal."
      "CostComponents\"P\n\031CloudReferenceLineRequ"
      "est\0223\n\014lane_segment\030\001 \003(\0132\035.jmc_auto.rou"
      "ting.LaneSegment\"V\n CloudReferenceLineRo"
      "utingRequest\0222\n\007routing\030\001 \001(\0132!.jmc_auto"
      ".routing.RoutingResponse\"D\n\032CloudReferen"
      "ceLineResponse\022&\n\007segment\030\001 \003(\0132\025.jmc_au"
      "to.common.Path"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6974);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_internal.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::jmc_auto::localization::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::AddDescriptors();
  ::jmc_auto::dreamview::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::AddDescriptors();
  ::jmc_auto::relative_map::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::AddDescriptors();
  ::jmc_auto::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::AddDescriptors();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::AddDescriptors();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto::AddDescriptors();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::AddDescriptors();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto

const ::google::protobuf::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_enum_descriptors[0];
}
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_UNKNOWN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_STOP;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_FOLLOW;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_YIELD;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_OVERTAKE;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_KEEP_CLEAR;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_DRIVABLE_REGION;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MIN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MAX;
const int StGraphBoundaryDebug::StBoundaryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SmootherDebug_SmootherType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_enum_descriptors[1];
}
bool SmootherDebug_SmootherType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SmootherDebug_SmootherType SmootherDebug::SMOOTHER_NONE;
const SmootherDebug_SmootherType SmootherDebug::SMOOTHER_CLOSE_STOP;
const SmootherDebug_SmootherType SmootherDebug::SmootherType_MIN;
const SmootherDebug_SmootherType SmootherDebug::SmootherType_MAX;
const int SmootherDebug::SmootherType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kPlanningDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.Debug)
}
Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planning_data()) {
    planning_data_ = new ::jmc_auto::planning_internal::PlanningData(*from.planning_data_);
  } else {
    planning_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.Debug)
}

void Debug::SharedCtor() {
  _cached_size_ = 0;
  planning_data_ = NULL;
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete planning_data_;
  }
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug& Debug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.Debug)
  if (has_planning_data()) {
    GOOGLE_DCHECK(planning_data_ != NULL);
    planning_data_->::jmc_auto::planning_internal::PlanningData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planning_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planning_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.Debug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
  if (has_planning_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planning_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_planning_data()) {
    mutable_planning_data()->::jmc_auto::planning_internal::PlanningData::MergeFrom(from.planning_data());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  std::swap(planning_data_, other->planning_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
bool Debug::has_planning_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug::set_has_planning_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug::clear_has_planning_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->::jmc_auto::planning_internal::PlanningData::Clear();
  clear_has_planning_data();
}
const ::jmc_auto::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_
                         : *::jmc_auto::planning_internal::PlanningData::internal_default_instance();
}
::jmc_auto::planning_internal::PlanningData* Debug::mutable_planning_data() {
  set_has_planning_data();
  if (planning_data_ == NULL) {
    planning_data_ = new ::jmc_auto::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.Debug.planning_data)
  return planning_data_;
}
::jmc_auto::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.Debug.planning_data)
  clear_has_planning_data();
  ::jmc_auto::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
void Debug::set_allocated_planning_data(::jmc_auto::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    set_has_planning_data();
  } else {
    clear_has_planning_data();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.Debug.planning_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPlan::kNameFieldNumber;
const int SpeedPlan::kSpeedPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPlan::SpeedPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.SpeedPlan)
}
SpeedPlan::SpeedPlan(const SpeedPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      speed_point_(from.speed_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.SpeedPlan)
}

void SpeedPlan::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpeedPlan::~SpeedPlan() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.SpeedPlan)
  SharedDtor();
}

void SpeedPlan::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpeedPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPlan::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPlan& SpeedPlan::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedPlan* SpeedPlan::New(::google::protobuf::Arena* arena) const {
  SpeedPlan* n = new SpeedPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.SpeedPlan)
  speed_point_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.SpeedPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.SpeedPlan.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.SpeedPoint speed_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.SpeedPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.SpeedPlan)
  return false;
#undef DO_
}

void SpeedPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.SpeedPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SpeedPlan.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .jmc_auto.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0, n = this->speed_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speed_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.SpeedPlan)
}

::google::protobuf::uint8* SpeedPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.SpeedPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SpeedPlan.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .jmc_auto.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0, n = this->speed_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->speed_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.SpeedPlan)
  return target;
}

size_t SpeedPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.SpeedPlan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.SpeedPoint speed_point = 2;
  {
    unsigned int count = this->speed_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_point(i));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.SpeedPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.SpeedPlan)
    MergeFrom(*source);
  }
}

void SpeedPlan::MergeFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_point_.MergeFrom(from.speed_point_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SpeedPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPlan::CopyFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPlan::IsInitialized() const {
  return true;
}

void SpeedPlan::Swap(SpeedPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPlan::InternalSwap(SpeedPlan* other) {
  speed_point_.InternalSwap(&other->speed_point_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPlan::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPlan

// optional string name = 1;
bool SpeedPlan::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPlan::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPlan::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPlan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SpeedPlan::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SpeedPlan.name)
  return name_.GetNoArena();
}
void SpeedPlan::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SpeedPlan.name)
}
#if LANG_CXX11
void SpeedPlan::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SpeedPlan.name)
}
#endif
void SpeedPlan::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SpeedPlan.name)
}
void SpeedPlan::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SpeedPlan.name)
}
::std::string* SpeedPlan::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SpeedPlan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpeedPlan::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SpeedPlan.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpeedPlan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SpeedPlan.name)
}

// repeated .jmc_auto.common.SpeedPoint speed_point = 2;
int SpeedPlan::speed_point_size() const {
  return speed_point_.size();
}
void SpeedPlan::clear_speed_point() {
  speed_point_.Clear();
}
const ::jmc_auto::common::SpeedPoint& SpeedPlan::speed_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Get(index);
}
::jmc_auto::common::SpeedPoint* SpeedPlan::mutable_speed_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Mutable(index);
}
::jmc_auto::common::SpeedPoint* SpeedPlan::add_speed_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
SpeedPlan::mutable_speed_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return &speed_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
SpeedPlan::speed_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StGraphBoundaryDebug::kNameFieldNumber;
const int StGraphBoundaryDebug::kPointFieldNumber;
const int StGraphBoundaryDebug::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StGraphBoundaryDebug::StGraphBoundaryDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.StGraphBoundaryDebug)
}
StGraphBoundaryDebug::StGraphBoundaryDebug(const StGraphBoundaryDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.StGraphBoundaryDebug)
}

void StGraphBoundaryDebug::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

StGraphBoundaryDebug::~StGraphBoundaryDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.StGraphBoundaryDebug)
  SharedDtor();
}

void StGraphBoundaryDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StGraphBoundaryDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StGraphBoundaryDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StGraphBoundaryDebug& StGraphBoundaryDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

StGraphBoundaryDebug* StGraphBoundaryDebug::New(::google::protobuf::Arena* arena) const {
  StGraphBoundaryDebug* n = new StGraphBoundaryDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StGraphBoundaryDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  point_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StGraphBoundaryDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.StGraphBoundaryDebug.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.SpeedPoint point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.StGraphBoundaryDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.StGraphBoundaryDebug)
  return false;
#undef DO_
}

void StGraphBoundaryDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.StGraphBoundaryDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .jmc_auto.common.SpeedPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(i), output);
  }

  // optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.StGraphBoundaryDebug)
}

::google::protobuf::uint8* StGraphBoundaryDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.StGraphBoundaryDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .jmc_auto.common.SpeedPoint point = 2;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->point(i), deterministic, target);
  }

  // optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.StGraphBoundaryDebug)
  return target;
}

size_t StGraphBoundaryDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.SpeedPoint point = 2;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StGraphBoundaryDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const StGraphBoundaryDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StGraphBoundaryDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.StGraphBoundaryDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.StGraphBoundaryDebug)
    MergeFrom(*source);
  }
}

void StGraphBoundaryDebug::MergeFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StGraphBoundaryDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StGraphBoundaryDebug::CopyFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StGraphBoundaryDebug::IsInitialized() const {
  return true;
}

void StGraphBoundaryDebug::Swap(StGraphBoundaryDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StGraphBoundaryDebug::InternalSwap(StGraphBoundaryDebug* other) {
  point_.InternalSwap(&other->point_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StGraphBoundaryDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StGraphBoundaryDebug

// optional string name = 1;
bool StGraphBoundaryDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StGraphBoundaryDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StGraphBoundaryDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StGraphBoundaryDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& StGraphBoundaryDebug::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
  return name_.GetNoArena();
}
void StGraphBoundaryDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
#if LANG_CXX11
void StGraphBoundaryDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
#endif
void StGraphBoundaryDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
void StGraphBoundaryDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
::std::string* StGraphBoundaryDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StGraphBoundaryDebug::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StGraphBoundaryDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}

// repeated .jmc_auto.common.SpeedPoint point = 2;
int StGraphBoundaryDebug::point_size() const {
  return point_.size();
}
void StGraphBoundaryDebug::clear_point() {
  point_.Clear();
}
const ::jmc_auto::common::SpeedPoint& StGraphBoundaryDebug::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_.Get(index);
}
::jmc_auto::common::SpeedPoint* StGraphBoundaryDebug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_.Mutable(index);
}
::jmc_auto::common::SpeedPoint* StGraphBoundaryDebug::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
StGraphBoundaryDebug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
StGraphBoundaryDebug::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_;
}

// optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
bool StGraphBoundaryDebug::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StGraphBoundaryDebug::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StGraphBoundaryDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StGraphBoundaryDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.StGraphBoundaryDebug.type)
  return static_cast< ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType >(type_);
}
void StGraphBoundaryDebug::set_type(::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  assert(::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.StGraphBoundaryDebug.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLFrameDebug::kNameFieldNumber;
const int SLFrameDebug::kSampledSFieldNumber;
const int SLFrameDebug::kStaticObstacleLowerBoundFieldNumber;
const int SLFrameDebug::kDynamicObstacleLowerBoundFieldNumber;
const int SLFrameDebug::kStaticObstacleUpperBoundFieldNumber;
const int SLFrameDebug::kDynamicObstacleUpperBoundFieldNumber;
const int SLFrameDebug::kMapLowerBoundFieldNumber;
const int SLFrameDebug::kMapUpperBoundFieldNumber;
const int SLFrameDebug::kSlPathFieldNumber;
const int SLFrameDebug::kAggregatedBoundarySFieldNumber;
const int SLFrameDebug::kAggregatedBoundaryLowFieldNumber;
const int SLFrameDebug::kAggregatedBoundaryHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLFrameDebug::SLFrameDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.SLFrameDebug)
}
SLFrameDebug::SLFrameDebug(const SLFrameDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sampled_s_(from.sampled_s_),
      static_obstacle_lower_bound_(from.static_obstacle_lower_bound_),
      dynamic_obstacle_lower_bound_(from.dynamic_obstacle_lower_bound_),
      static_obstacle_upper_bound_(from.static_obstacle_upper_bound_),
      dynamic_obstacle_upper_bound_(from.dynamic_obstacle_upper_bound_),
      map_lower_bound_(from.map_lower_bound_),
      map_upper_bound_(from.map_upper_bound_),
      sl_path_(from.sl_path_),
      aggregated_boundary_s_(from.aggregated_boundary_s_),
      aggregated_boundary_low_(from.aggregated_boundary_low_),
      aggregated_boundary_high_(from.aggregated_boundary_high_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.SLFrameDebug)
}

void SLFrameDebug::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SLFrameDebug::~SLFrameDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.SLFrameDebug)
  SharedDtor();
}

void SLFrameDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SLFrameDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLFrameDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SLFrameDebug& SLFrameDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLFrameDebug* SLFrameDebug::New(::google::protobuf::Arena* arena) const {
  SLFrameDebug* n = new SLFrameDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLFrameDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.SLFrameDebug)
  sampled_s_.Clear();
  static_obstacle_lower_bound_.Clear();
  dynamic_obstacle_lower_bound_.Clear();
  static_obstacle_upper_bound_.Clear();
  dynamic_obstacle_upper_bound_.Clear();
  map_lower_bound_.Clear();
  map_upper_bound_.Clear();
  sl_path_.Clear();
  aggregated_boundary_s_.Clear();
  aggregated_boundary_low_.Clear();
  aggregated_boundary_high_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLFrameDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.SLFrameDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.SLFrameDebug.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double sampled_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_sampled_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sampled_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double static_obstacle_lower_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_static_obstacle_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_static_obstacle_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dynamic_obstacle_lower_bound = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_dynamic_obstacle_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dynamic_obstacle_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double static_obstacle_upper_bound = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_static_obstacle_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_static_obstacle_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dynamic_obstacle_upper_bound = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49u, input, this->mutable_dynamic_obstacle_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dynamic_obstacle_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double map_lower_bound = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_map_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_map_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double map_upper_bound = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65u, input, this->mutable_map_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_map_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.SLPoint sl_path = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sl_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double aggregated_boundary_s = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_aggregated_boundary_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double aggregated_boundary_low = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_aggregated_boundary_low())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_low())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double aggregated_boundary_high = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97u, input, this->mutable_aggregated_boundary_high())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_aggregated_boundary_high())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.SLFrameDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.SLFrameDebug)
  return false;
#undef DO_
}

void SLFrameDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.SLFrameDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SLFrameDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated double sampled_s = 2;
  for (int i = 0, n = this->sampled_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->sampled_s(i), output);
  }

  // repeated double static_obstacle_lower_bound = 3;
  for (int i = 0, n = this->static_obstacle_lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->static_obstacle_lower_bound(i), output);
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  for (int i = 0, n = this->dynamic_obstacle_lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->dynamic_obstacle_lower_bound(i), output);
  }

  // repeated double static_obstacle_upper_bound = 5;
  for (int i = 0, n = this->static_obstacle_upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->static_obstacle_upper_bound(i), output);
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  for (int i = 0, n = this->dynamic_obstacle_upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->dynamic_obstacle_upper_bound(i), output);
  }

  // repeated double map_lower_bound = 7;
  for (int i = 0, n = this->map_lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->map_lower_bound(i), output);
  }

  // repeated double map_upper_bound = 8;
  for (int i = 0, n = this->map_upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->map_upper_bound(i), output);
  }

  // repeated .jmc_auto.common.SLPoint sl_path = 9;
  for (unsigned int i = 0, n = this->sl_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sl_path(i), output);
  }

  // repeated double aggregated_boundary_s = 10;
  for (int i = 0, n = this->aggregated_boundary_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->aggregated_boundary_s(i), output);
  }

  // repeated double aggregated_boundary_low = 11;
  for (int i = 0, n = this->aggregated_boundary_low_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->aggregated_boundary_low(i), output);
  }

  // repeated double aggregated_boundary_high = 12;
  for (int i = 0, n = this->aggregated_boundary_high_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->aggregated_boundary_high(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.SLFrameDebug)
}

::google::protobuf::uint8* SLFrameDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.SLFrameDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SLFrameDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double sampled_s = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->sampled_s_, target);

  // repeated double static_obstacle_lower_bound = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->static_obstacle_lower_bound_, target);

  // repeated double dynamic_obstacle_lower_bound = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->dynamic_obstacle_lower_bound_, target);

  // repeated double static_obstacle_upper_bound = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->static_obstacle_upper_bound_, target);

  // repeated double dynamic_obstacle_upper_bound = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(6, this->dynamic_obstacle_upper_bound_, target);

  // repeated double map_lower_bound = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->map_lower_bound_, target);

  // repeated double map_upper_bound = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(8, this->map_upper_bound_, target);

  // repeated .jmc_auto.common.SLPoint sl_path = 9;
  for (unsigned int i = 0, n = this->sl_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->sl_path(i), deterministic, target);
  }

  // repeated double aggregated_boundary_s = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(10, this->aggregated_boundary_s_, target);

  // repeated double aggregated_boundary_low = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->aggregated_boundary_low_, target);

  // repeated double aggregated_boundary_high = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(12, this->aggregated_boundary_high_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.SLFrameDebug)
  return target;
}

size_t SLFrameDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.SLFrameDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double sampled_s = 2;
  {
    unsigned int count = this->sampled_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sampled_s_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_lower_bound = 3;
  {
    unsigned int count = this->static_obstacle_lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->static_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  {
    unsigned int count = this->dynamic_obstacle_lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dynamic_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_upper_bound = 5;
  {
    unsigned int count = this->static_obstacle_upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->static_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  {
    unsigned int count = this->dynamic_obstacle_upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dynamic_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double map_lower_bound = 7;
  {
    unsigned int count = this->map_lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->map_lower_bound_size());
    total_size += data_size;
  }

  // repeated double map_upper_bound = 8;
  {
    unsigned int count = this->map_upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->map_upper_bound_size());
    total_size += data_size;
  }

  // repeated .jmc_auto.common.SLPoint sl_path = 9;
  {
    unsigned int count = this->sl_path_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sl_path(i));
    }
  }

  // repeated double aggregated_boundary_s = 10;
  {
    unsigned int count = this->aggregated_boundary_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aggregated_boundary_s_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_low = 11;
  {
    unsigned int count = this->aggregated_boundary_low_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aggregated_boundary_low_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_high = 12;
  {
    unsigned int count = this->aggregated_boundary_high_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aggregated_boundary_high_size());
    total_size += data_size;
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLFrameDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SLFrameDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLFrameDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.SLFrameDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.SLFrameDebug)
    MergeFrom(*source);
  }
}

void SLFrameDebug::MergeFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sampled_s_.MergeFrom(from.sampled_s_);
  static_obstacle_lower_bound_.MergeFrom(from.static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.MergeFrom(from.dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.MergeFrom(from.static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.MergeFrom(from.dynamic_obstacle_upper_bound_);
  map_lower_bound_.MergeFrom(from.map_lower_bound_);
  map_upper_bound_.MergeFrom(from.map_upper_bound_);
  sl_path_.MergeFrom(from.sl_path_);
  aggregated_boundary_s_.MergeFrom(from.aggregated_boundary_s_);
  aggregated_boundary_low_.MergeFrom(from.aggregated_boundary_low_);
  aggregated_boundary_high_.MergeFrom(from.aggregated_boundary_high_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SLFrameDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLFrameDebug::CopyFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLFrameDebug::IsInitialized() const {
  return true;
}

void SLFrameDebug::Swap(SLFrameDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLFrameDebug::InternalSwap(SLFrameDebug* other) {
  sampled_s_.InternalSwap(&other->sampled_s_);
  static_obstacle_lower_bound_.InternalSwap(&other->static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.InternalSwap(&other->dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.InternalSwap(&other->static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.InternalSwap(&other->dynamic_obstacle_upper_bound_);
  map_lower_bound_.InternalSwap(&other->map_lower_bound_);
  map_upper_bound_.InternalSwap(&other->map_upper_bound_);
  sl_path_.InternalSwap(&other->sl_path_);
  aggregated_boundary_s_.InternalSwap(&other->aggregated_boundary_s_);
  aggregated_boundary_low_.InternalSwap(&other->aggregated_boundary_low_);
  aggregated_boundary_high_.InternalSwap(&other->aggregated_boundary_high_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLFrameDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLFrameDebug

// optional string name = 1;
bool SLFrameDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLFrameDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SLFrameDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLFrameDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SLFrameDebug::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.name)
  return name_.GetNoArena();
}
void SLFrameDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.name)
}
#if LANG_CXX11
void SLFrameDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SLFrameDebug.name)
}
#endif
void SLFrameDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SLFrameDebug.name)
}
void SLFrameDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SLFrameDebug.name)
}
::std::string* SLFrameDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SLFrameDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SLFrameDebug::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SLFrameDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SLFrameDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SLFrameDebug.name)
}

// repeated double sampled_s = 2;
int SLFrameDebug::sampled_s_size() const {
  return sampled_s_.size();
}
void SLFrameDebug::clear_sampled_s() {
  sampled_s_.Clear();
}
double SLFrameDebug::sampled_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_.Get(index);
}
void SLFrameDebug::set_sampled_s(int index, double value) {
  sampled_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
}
void SLFrameDebug::add_sampled_s(double value) {
  sampled_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::sampled_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_sampled_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
  return &sampled_s_;
}

// repeated double static_obstacle_lower_bound = 3;
int SLFrameDebug::static_obstacle_lower_bound_size() const {
  return static_obstacle_lower_bound_.size();
}
void SLFrameDebug::clear_static_obstacle_lower_bound() {
  static_obstacle_lower_bound_.Clear();
}
double SLFrameDebug::static_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_.Get(index);
}
void SLFrameDebug::set_static_obstacle_lower_bound(int index, double value) {
  static_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
void SLFrameDebug::add_static_obstacle_lower_bound(double value) {
  static_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return &static_obstacle_lower_bound_;
}

// repeated double dynamic_obstacle_lower_bound = 4;
int SLFrameDebug::dynamic_obstacle_lower_bound_size() const {
  return dynamic_obstacle_lower_bound_.size();
}
void SLFrameDebug::clear_dynamic_obstacle_lower_bound() {
  dynamic_obstacle_lower_bound_.Clear();
}
double SLFrameDebug::dynamic_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_.Get(index);
}
void SLFrameDebug::set_dynamic_obstacle_lower_bound(int index, double value) {
  dynamic_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
void SLFrameDebug::add_dynamic_obstacle_lower_bound(double value) {
  dynamic_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return &dynamic_obstacle_lower_bound_;
}

// repeated double static_obstacle_upper_bound = 5;
int SLFrameDebug::static_obstacle_upper_bound_size() const {
  return static_obstacle_upper_bound_.size();
}
void SLFrameDebug::clear_static_obstacle_upper_bound() {
  static_obstacle_upper_bound_.Clear();
}
double SLFrameDebug::static_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_.Get(index);
}
void SLFrameDebug::set_static_obstacle_upper_bound(int index, double value) {
  static_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
void SLFrameDebug::add_static_obstacle_upper_bound(double value) {
  static_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return &static_obstacle_upper_bound_;
}

// repeated double dynamic_obstacle_upper_bound = 6;
int SLFrameDebug::dynamic_obstacle_upper_bound_size() const {
  return dynamic_obstacle_upper_bound_.size();
}
void SLFrameDebug::clear_dynamic_obstacle_upper_bound() {
  dynamic_obstacle_upper_bound_.Clear();
}
double SLFrameDebug::dynamic_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_.Get(index);
}
void SLFrameDebug::set_dynamic_obstacle_upper_bound(int index, double value) {
  dynamic_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
void SLFrameDebug::add_dynamic_obstacle_upper_bound(double value) {
  dynamic_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return &dynamic_obstacle_upper_bound_;
}

// repeated double map_lower_bound = 7;
int SLFrameDebug::map_lower_bound_size() const {
  return map_lower_bound_.size();
}
void SLFrameDebug::clear_map_lower_bound() {
  map_lower_bound_.Clear();
}
double SLFrameDebug::map_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_.Get(index);
}
void SLFrameDebug::set_map_lower_bound(int index, double value) {
  map_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
}
void SLFrameDebug::add_map_lower_bound(double value) {
  map_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
  return &map_lower_bound_;
}

// repeated double map_upper_bound = 8;
int SLFrameDebug::map_upper_bound_size() const {
  return map_upper_bound_.size();
}
void SLFrameDebug::clear_map_upper_bound() {
  map_upper_bound_.Clear();
}
double SLFrameDebug::map_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_.Get(index);
}
void SLFrameDebug::set_map_upper_bound(int index, double value) {
  map_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
}
void SLFrameDebug::add_map_upper_bound(double value) {
  map_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
  return &map_upper_bound_;
}

// repeated .jmc_auto.common.SLPoint sl_path = 9;
int SLFrameDebug::sl_path_size() const {
  return sl_path_.size();
}
void SLFrameDebug::clear_sl_path() {
  sl_path_.Clear();
}
const ::jmc_auto::common::SLPoint& SLFrameDebug::sl_path(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Get(index);
}
::jmc_auto::common::SLPoint* SLFrameDebug::mutable_sl_path(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Mutable(index);
}
::jmc_auto::common::SLPoint* SLFrameDebug::add_sl_path() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
SLFrameDebug::mutable_sl_path() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return &sl_path_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
SLFrameDebug::sl_path() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_;
}

// repeated double aggregated_boundary_s = 10;
int SLFrameDebug::aggregated_boundary_s_size() const {
  return aggregated_boundary_s_.size();
}
void SLFrameDebug::clear_aggregated_boundary_s() {
  aggregated_boundary_s_.Clear();
}
double SLFrameDebug::aggregated_boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_.Get(index);
}
void SLFrameDebug::set_aggregated_boundary_s(int index, double value) {
  aggregated_boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
void SLFrameDebug::add_aggregated_boundary_s(double value) {
  aggregated_boundary_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return &aggregated_boundary_s_;
}

// repeated double aggregated_boundary_low = 11;
int SLFrameDebug::aggregated_boundary_low_size() const {
  return aggregated_boundary_low_.size();
}
void SLFrameDebug::clear_aggregated_boundary_low() {
  aggregated_boundary_low_.Clear();
}
double SLFrameDebug::aggregated_boundary_low(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_.Get(index);
}
void SLFrameDebug::set_aggregated_boundary_low(int index, double value) {
  aggregated_boundary_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
void SLFrameDebug::add_aggregated_boundary_low(double value) {
  aggregated_boundary_low_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_low() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_low() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return &aggregated_boundary_low_;
}

// repeated double aggregated_boundary_high = 12;
int SLFrameDebug::aggregated_boundary_high_size() const {
  return aggregated_boundary_high_.size();
}
void SLFrameDebug::clear_aggregated_boundary_high() {
  aggregated_boundary_high_.Clear();
}
double SLFrameDebug::aggregated_boundary_high(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_.Get(index);
}
void SLFrameDebug::set_aggregated_boundary_high(int index, double value) {
  aggregated_boundary_high_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
void SLFrameDebug::add_aggregated_boundary_high(double value) {
  aggregated_boundary_high_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_high() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_;
}
::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_high() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return &aggregated_boundary_high_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphSpeedConstraint::kTFieldNumber;
const int STGraphDebug_STGraphSpeedConstraint::kLowerBoundFieldNumber;
const int STGraphDebug_STGraphSpeedConstraint::kUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}
STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      t_(from.t_),
      lower_bound_(from.lower_bound_),
      upper_bound_(from.upper_bound_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

void STGraphDebug_STGraphSpeedConstraint::SharedCtor() {
  _cached_size_ = 0;
}

STGraphDebug_STGraphSpeedConstraint::~STGraphDebug_STGraphSpeedConstraint() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  SharedDtor();
}

void STGraphDebug_STGraphSpeedConstraint::SharedDtor() {
}

void STGraphDebug_STGraphSpeedConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphSpeedConstraint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug_STGraphSpeedConstraint& STGraphDebug_STGraphSpeedConstraint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug_STGraphSpeedConstraint* STGraphDebug_STGraphSpeedConstraint::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphSpeedConstraint* n = new STGraphDebug_STGraphSpeedConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphSpeedConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  t_.Clear();
  lower_bound_.Clear();
  upper_bound_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug_STGraphSpeedConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_t())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double lower_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_lower_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_lower_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double upper_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_upper_bound())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_upper_bound())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return false;
#undef DO_
}

void STGraphDebug_STGraphSpeedConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double lower_bound = 2;
  for (int i = 0, n = this->lower_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->lower_bound(i), output);
  }

  // repeated double upper_bound = 3;
  for (int i = 0, n = this->upper_bound_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->upper_bound(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

::google::protobuf::uint8* STGraphDebug_STGraphSpeedConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->t_, target);

  // repeated double lower_bound = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->lower_bound_, target);

  // repeated double upper_bound = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->upper_bound_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return target;
}

size_t STGraphDebug_STGraphSpeedConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double t = 1;
  {
    unsigned int count = this->t_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->t_size());
    total_size += data_size;
  }

  // repeated double lower_bound = 2;
  {
    unsigned int count = this->lower_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lower_bound_size());
    total_size += data_size;
  }

  // repeated double upper_bound = 3;
  {
    unsigned int count = this->upper_bound_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->upper_bound_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphSpeedConstraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphSpeedConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  lower_bound_.MergeFrom(from.lower_bound_);
  upper_bound_.MergeFrom(from.upper_bound_);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphSpeedConstraint::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphSpeedConstraint::Swap(STGraphDebug_STGraphSpeedConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphSpeedConstraint::InternalSwap(STGraphDebug_STGraphSpeedConstraint* other) {
  t_.InternalSwap(&other->t_);
  lower_bound_.InternalSwap(&other->lower_bound_);
  upper_bound_.InternalSwap(&other->upper_bound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphSpeedConstraint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphSpeedConstraint

// repeated double t = 1;
int STGraphDebug_STGraphSpeedConstraint::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_t() {
  t_.Clear();
}
double STGraphDebug_STGraphSpeedConstraint::t(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_.Get(index);
}
void STGraphDebug_STGraphSpeedConstraint::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
void STGraphDebug_STGraphSpeedConstraint::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::t() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return &t_;
}

// repeated double lower_bound = 2;
int STGraphDebug_STGraphSpeedConstraint::lower_bound_size() const {
  return lower_bound_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_lower_bound() {
  lower_bound_.Clear();
}
double STGraphDebug_STGraphSpeedConstraint::lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_.Get(index);
}
void STGraphDebug_STGraphSpeedConstraint::set_lower_bound(int index, double value) {
  lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
void STGraphDebug_STGraphSpeedConstraint::add_lower_bound(double value) {
  lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return &lower_bound_;
}

// repeated double upper_bound = 3;
int STGraphDebug_STGraphSpeedConstraint::upper_bound_size() const {
  return upper_bound_.size();
}
void STGraphDebug_STGraphSpeedConstraint::clear_upper_bound() {
  upper_bound_.Clear();
}
double STGraphDebug_STGraphSpeedConstraint::upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_.Get(index);
}
void STGraphDebug_STGraphSpeedConstraint::set_upper_bound(int index, double value) {
  upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
void STGraphDebug_STGraphSpeedConstraint::add_upper_bound(double value) {
  upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return &upper_bound_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphKernelCuiseRef::kTFieldNumber;
const int STGraphDebug_STGraphKernelCuiseRef::kCruiseLineSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}
STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      t_(from.t_),
      cruise_line_s_(from.cruise_line_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

void STGraphDebug_STGraphKernelCuiseRef::SharedCtor() {
  _cached_size_ = 0;
}

STGraphDebug_STGraphKernelCuiseRef::~STGraphDebug_STGraphKernelCuiseRef() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelCuiseRef::SharedDtor() {
}

void STGraphDebug_STGraphKernelCuiseRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelCuiseRef::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug_STGraphKernelCuiseRef& STGraphDebug_STGraphKernelCuiseRef::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug_STGraphKernelCuiseRef* STGraphDebug_STGraphKernelCuiseRef::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphKernelCuiseRef* n = new STGraphDebug_STGraphKernelCuiseRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphKernelCuiseRef::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  t_.Clear();
  cruise_line_s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug_STGraphKernelCuiseRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_t())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double cruise_line_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_cruise_line_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cruise_line_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return false;
#undef DO_
}

void STGraphDebug_STGraphKernelCuiseRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double cruise_line_s = 2;
  for (int i = 0, n = this->cruise_line_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->cruise_line_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

::google::protobuf::uint8* STGraphDebug_STGraphKernelCuiseRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->t_, target);

  // repeated double cruise_line_s = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->cruise_line_s_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return target;
}

size_t STGraphDebug_STGraphKernelCuiseRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double t = 1;
  {
    unsigned int count = this->t_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->t_size());
    total_size += data_size;
  }

  // repeated double cruise_line_s = 2;
  {
    unsigned int count = this->cruise_line_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cruise_line_s_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphKernelCuiseRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphKernelCuiseRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  cruise_line_s_.MergeFrom(from.cruise_line_s_);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelCuiseRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelCuiseRef::Swap(STGraphDebug_STGraphKernelCuiseRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphKernelCuiseRef::InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other) {
  t_.InternalSwap(&other->t_);
  cruise_line_s_.InternalSwap(&other->cruise_line_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphKernelCuiseRef::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphKernelCuiseRef

// repeated double t = 1;
int STGraphDebug_STGraphKernelCuiseRef::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphKernelCuiseRef::clear_t() {
  t_.Clear();
}
double STGraphDebug_STGraphKernelCuiseRef::t(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_.Get(index);
}
void STGraphDebug_STGraphKernelCuiseRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
void STGraphDebug_STGraphKernelCuiseRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::t() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return &t_;
}

// repeated double cruise_line_s = 2;
int STGraphDebug_STGraphKernelCuiseRef::cruise_line_s_size() const {
  return cruise_line_s_.size();
}
void STGraphDebug_STGraphKernelCuiseRef::clear_cruise_line_s() {
  cruise_line_s_.Clear();
}
double STGraphDebug_STGraphKernelCuiseRef::cruise_line_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_.Get(index);
}
void STGraphDebug_STGraphKernelCuiseRef::set_cruise_line_s(int index, double value) {
  cruise_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
void STGraphDebug_STGraphKernelCuiseRef::add_cruise_line_s(double value) {
  cruise_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::cruise_line_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_cruise_line_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return &cruise_line_s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug_STGraphKernelFollowRef::kTFieldNumber;
const int STGraphDebug_STGraphKernelFollowRef::kFollowLineSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}
STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      t_(from.t_),
      follow_line_s_(from.follow_line_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

void STGraphDebug_STGraphKernelFollowRef::SharedCtor() {
  _cached_size_ = 0;
}

STGraphDebug_STGraphKernelFollowRef::~STGraphDebug_STGraphKernelFollowRef() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelFollowRef::SharedDtor() {
}

void STGraphDebug_STGraphKernelFollowRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug_STGraphKernelFollowRef::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug_STGraphKernelFollowRef& STGraphDebug_STGraphKernelFollowRef::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug_STGraphKernelFollowRef* STGraphDebug_STGraphKernelFollowRef::New(::google::protobuf::Arena* arena) const {
  STGraphDebug_STGraphKernelFollowRef* n = new STGraphDebug_STGraphKernelFollowRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug_STGraphKernelFollowRef::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  t_.Clear();
  follow_line_s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug_STGraphKernelFollowRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_t())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double follow_line_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_follow_line_s())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_follow_line_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return false;
#undef DO_
}

void STGraphDebug_STGraphKernelFollowRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->t_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t(i), output);
  }

  // repeated double follow_line_s = 2;
  for (int i = 0, n = this->follow_line_s_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->follow_line_s(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

::google::protobuf::uint8* STGraphDebug_STGraphKernelFollowRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->t_, target);

  // repeated double follow_line_s = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->follow_line_s_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return target;
}

size_t STGraphDebug_STGraphKernelFollowRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double t = 1;
  {
    unsigned int count = this->t_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->t_size());
    total_size += data_size;
  }

  // repeated double follow_line_s = 2;
  {
    unsigned int count = this->follow_line_s_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->follow_line_s_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphKernelFollowRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug_STGraphKernelFollowRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  follow_line_s_.MergeFrom(from.follow_line_s_);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelFollowRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelFollowRef::Swap(STGraphDebug_STGraphKernelFollowRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug_STGraphKernelFollowRef::InternalSwap(STGraphDebug_STGraphKernelFollowRef* other) {
  t_.InternalSwap(&other->t_);
  follow_line_s_.InternalSwap(&other->follow_line_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug_STGraphKernelFollowRef::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug_STGraphKernelFollowRef

// repeated double t = 1;
int STGraphDebug_STGraphKernelFollowRef::t_size() const {
  return t_.size();
}
void STGraphDebug_STGraphKernelFollowRef::clear_t() {
  t_.Clear();
}
double STGraphDebug_STGraphKernelFollowRef::t(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_.Get(index);
}
void STGraphDebug_STGraphKernelFollowRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
void STGraphDebug_STGraphKernelFollowRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::t() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return &t_;
}

// repeated double follow_line_s = 2;
int STGraphDebug_STGraphKernelFollowRef::follow_line_s_size() const {
  return follow_line_s_.size();
}
void STGraphDebug_STGraphKernelFollowRef::clear_follow_line_s() {
  follow_line_s_.Clear();
}
double STGraphDebug_STGraphKernelFollowRef::follow_line_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_.Get(index);
}
void STGraphDebug_STGraphKernelFollowRef::set_follow_line_s(int index, double value) {
  follow_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
void STGraphDebug_STGraphKernelFollowRef::add_follow_line_s(double value) {
  follow_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::follow_line_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_;
}
::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_follow_line_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return &follow_line_s_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraphDebug::kNameFieldNumber;
const int STGraphDebug::kBoundaryFieldNumber;
const int STGraphDebug::kSpeedLimitFieldNumber;
const int STGraphDebug::kSpeedProfileFieldNumber;
const int STGraphDebug::kSpeedConstraintFieldNumber;
const int STGraphDebug::kKernelCruiseRefFieldNumber;
const int STGraphDebug::kKernelFollowRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraphDebug::STGraphDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.STGraphDebug)
}
STGraphDebug::STGraphDebug(const STGraphDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      boundary_(from.boundary_),
      speed_limit_(from.speed_limit_),
      speed_profile_(from.speed_profile_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_speed_constraint()) {
    speed_constraint_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint(*from.speed_constraint_);
  } else {
    speed_constraint_ = NULL;
  }
  if (from.has_kernel_cruise_ref()) {
    kernel_cruise_ref_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef(*from.kernel_cruise_ref_);
  } else {
    kernel_cruise_ref_ = NULL;
  }
  if (from.has_kernel_follow_ref()) {
    kernel_follow_ref_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef(*from.kernel_follow_ref_);
  } else {
    kernel_follow_ref_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.STGraphDebug)
}

void STGraphDebug::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_constraint_, 0, reinterpret_cast<char*>(&kernel_follow_ref_) -
    reinterpret_cast<char*>(&speed_constraint_) + sizeof(kernel_follow_ref_));
}

STGraphDebug::~STGraphDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.STGraphDebug)
  SharedDtor();
}

void STGraphDebug::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete speed_constraint_;
  }
  if (this != internal_default_instance()) {
    delete kernel_cruise_ref_;
  }
  if (this != internal_default_instance()) {
    delete kernel_follow_ref_;
  }
}

void STGraphDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraphDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraphDebug& STGraphDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

STGraphDebug* STGraphDebug::New(::google::protobuf::Arena* arena) const {
  STGraphDebug* n = new STGraphDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.STGraphDebug)
  boundary_.Clear();
  speed_limit_.Clear();
  speed_profile_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_speed_constraint()) {
      GOOGLE_DCHECK(speed_constraint_ != NULL);
      speed_constraint_->::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
    }
    if (has_kernel_cruise_ref()) {
      GOOGLE_DCHECK(kernel_cruise_ref_ != NULL);
      kernel_cruise_ref_->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
    }
    if (has_kernel_follow_ref()) {
      GOOGLE_DCHECK(kernel_follow_ref_ != NULL);
      kernel_follow_ref_->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STGraphDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.STGraphDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.STGraphDebug.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_cruise_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_follow_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.STGraphDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.STGraphDebug)
  return false;
#undef DO_
}

void STGraphDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.STGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.STGraphDebug.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0, n = this->boundary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundary(i), output);
  }

  // repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0, n = this->speed_limit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speed_limit(i), output);
  }

  // repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0, n = this->speed_profile_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speed_profile(i), output);
  }

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->speed_constraint_, output);
  }

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->kernel_cruise_ref_, output);
  }

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->kernel_follow_ref_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.STGraphDebug)
}

::google::protobuf::uint8* STGraphDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.STGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.STGraphDebug.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0, n = this->boundary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->boundary(i), deterministic, target);
  }

  // repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0, n = this->speed_limit_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->speed_limit(i), deterministic, target);
  }

  // repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0, n = this->speed_profile_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->speed_profile(i), deterministic, target);
  }

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->speed_constraint_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->kernel_cruise_ref_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->kernel_follow_ref_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.STGraphDebug)
  return target;
}

size_t STGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.STGraphDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
  {
    unsigned int count = this->boundary_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundary(i));
    }
  }

  // repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
  {
    unsigned int count = this->speed_limit_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_limit(i));
    }
  }

  // repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
  {
    unsigned int count = this->speed_profile_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_profile(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
    if (has_speed_constraint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speed_constraint_);
    }

    // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
    if (has_kernel_cruise_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kernel_cruise_ref_);
    }

    // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
    if (has_kernel_follow_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kernel_follow_ref_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraphDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraphDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.STGraphDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.STGraphDebug)
    MergeFrom(*source);
  }
}

void STGraphDebug::MergeFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_.MergeFrom(from.boundary_);
  speed_limit_.MergeFrom(from.speed_limit_);
  speed_profile_.MergeFrom(from.speed_profile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed_constraint()->::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::MergeFrom(from.speed_constraint());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kernel_cruise_ref()->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::MergeFrom(from.kernel_cruise_ref());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_kernel_follow_ref()->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::MergeFrom(from.kernel_follow_ref());
    }
  }
}

void STGraphDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug::CopyFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug::IsInitialized() const {
  return true;
}

void STGraphDebug::Swap(STGraphDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraphDebug::InternalSwap(STGraphDebug* other) {
  boundary_.InternalSwap(&other->boundary_);
  speed_limit_.InternalSwap(&other->speed_limit_);
  speed_profile_.InternalSwap(&other->speed_profile_);
  name_.Swap(&other->name_);
  std::swap(speed_constraint_, other->speed_constraint_);
  std::swap(kernel_cruise_ref_, other->kernel_cruise_ref_);
  std::swap(kernel_follow_ref_, other->kernel_follow_ref_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraphDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STGraphDebug

// optional string name = 1;
bool STGraphDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void STGraphDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void STGraphDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void STGraphDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& STGraphDebug::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.name)
  return name_.GetNoArena();
}
void STGraphDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.name)
}
#if LANG_CXX11
void STGraphDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.STGraphDebug.name)
}
#endif
void STGraphDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.STGraphDebug.name)
}
void STGraphDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.STGraphDebug.name)
}
::std::string* STGraphDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* STGraphDebug::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void STGraphDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.name)
}

// repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
int STGraphDebug::boundary_size() const {
  return boundary_.size();
}
void STGraphDebug::clear_boundary() {
  boundary_.Clear();
}
const ::jmc_auto::planning_internal::StGraphBoundaryDebug& STGraphDebug::boundary(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_.Get(index);
}
::jmc_auto::planning_internal::StGraphBoundaryDebug* STGraphDebug::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_.Mutable(index);
}
::jmc_auto::planning_internal::StGraphBoundaryDebug* STGraphDebug::add_boundary() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug >*
STGraphDebug::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.boundary)
  return &boundary_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug >&
STGraphDebug::boundary() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_;
}

// repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
int STGraphDebug::speed_limit_size() const {
  return speed_limit_.size();
}
void STGraphDebug::clear_speed_limit() {
  speed_limit_.Clear();
}
const ::jmc_auto::common::SpeedPoint& STGraphDebug::speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Get(index);
}
::jmc_auto::common::SpeedPoint* STGraphDebug::mutable_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Mutable(index);
}
::jmc_auto::common::SpeedPoint* STGraphDebug::add_speed_limit() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
STGraphDebug::mutable_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return &speed_limit_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
STGraphDebug::speed_limit() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_;
}

// repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
int STGraphDebug::speed_profile_size() const {
  return speed_profile_.size();
}
void STGraphDebug::clear_speed_profile() {
  speed_profile_.Clear();
}
const ::jmc_auto::common::SpeedPoint& STGraphDebug::speed_profile(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Get(index);
}
::jmc_auto::common::SpeedPoint* STGraphDebug::mutable_speed_profile(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Mutable(index);
}
::jmc_auto::common::SpeedPoint* STGraphDebug::add_speed_profile() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
STGraphDebug::mutable_speed_profile() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return &speed_profile_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
STGraphDebug::speed_profile() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_;
}

// optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
bool STGraphDebug::has_speed_constraint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void STGraphDebug::set_has_speed_constraint() {
  _has_bits_[0] |= 0x00000002u;
}
void STGraphDebug::clear_has_speed_constraint() {
  _has_bits_[0] &= ~0x00000002u;
}
void STGraphDebug::clear_speed_constraint() {
  if (speed_constraint_ != NULL) speed_constraint_->::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
  clear_has_speed_constraint();
}
const ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::speed_constraint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_ != NULL ? *speed_constraint_
                         : *::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance();
}
::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::mutable_speed_constraint() {
  set_has_speed_constraint();
  if (speed_constraint_ == NULL) {
    speed_constraint_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_;
}
::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::release_speed_constraint() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
  clear_has_speed_constraint();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = speed_constraint_;
  speed_constraint_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_speed_constraint(::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  delete speed_constraint_;
  speed_constraint_ = speed_constraint;
  if (speed_constraint) {
    set_has_speed_constraint();
  } else {
    clear_has_speed_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
}

// optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
bool STGraphDebug::has_kernel_cruise_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void STGraphDebug::set_has_kernel_cruise_ref() {
  _has_bits_[0] |= 0x00000004u;
}
void STGraphDebug::clear_has_kernel_cruise_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
void STGraphDebug::clear_kernel_cruise_ref() {
  if (kernel_cruise_ref_ != NULL) kernel_cruise_ref_->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
  clear_has_kernel_cruise_ref();
}
const ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::kernel_cruise_ref() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_ != NULL ? *kernel_cruise_ref_
                         : *::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance();
}
::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::mutable_kernel_cruise_ref() {
  set_has_kernel_cruise_ref();
  if (kernel_cruise_ref_ == NULL) {
    kernel_cruise_ref_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_;
}
::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::release_kernel_cruise_ref() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
  clear_has_kernel_cruise_ref();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = kernel_cruise_ref_;
  kernel_cruise_ref_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_kernel_cruise_ref(::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  delete kernel_cruise_ref_;
  kernel_cruise_ref_ = kernel_cruise_ref;
  if (kernel_cruise_ref) {
    set_has_kernel_cruise_ref();
  } else {
    clear_has_kernel_cruise_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
}

// optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
bool STGraphDebug::has_kernel_follow_ref() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void STGraphDebug::set_has_kernel_follow_ref() {
  _has_bits_[0] |= 0x00000008u;
}
void STGraphDebug::clear_has_kernel_follow_ref() {
  _has_bits_[0] &= ~0x00000008u;
}
void STGraphDebug::clear_kernel_follow_ref() {
  if (kernel_follow_ref_ != NULL) kernel_follow_ref_->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
  clear_has_kernel_follow_ref();
}
const ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::kernel_follow_ref() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_ != NULL ? *kernel_follow_ref_
                         : *::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance();
}
::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::mutable_kernel_follow_ref() {
  set_has_kernel_follow_ref();
  if (kernel_follow_ref_ == NULL) {
    kernel_follow_ref_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_;
}
::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::release_kernel_follow_ref() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
  clear_has_kernel_follow_ref();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = kernel_follow_ref_;
  kernel_follow_ref_ = NULL;
  return temp;
}
void STGraphDebug::set_allocated_kernel_follow_ref(::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  delete kernel_follow_ref_;
  kernel_follow_ref_ = kernel_follow_ref;
  if (kernel_follow_ref) {
    set_has_kernel_follow_ref();
  } else {
    clear_has_kernel_follow_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightDebug_SignalDebug::kLightIdFieldNumber;
const int SignalLightDebug_SignalDebug::kColorFieldNumber;
const int SignalLightDebug_SignalDebug::kLightStopSFieldNumber;
const int SignalLightDebug_SignalDebug::kAdcStopDecelerationFieldNumber;
const int SignalLightDebug_SignalDebug::kIsStopWallCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
}
SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_light_id()) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  ::memcpy(&light_stop_s_, &from.light_stop_s_,
    reinterpret_cast<char*>(&adc_stop_deceleration_) -
    reinterpret_cast<char*>(&light_stop_s_) + sizeof(adc_stop_deceleration_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
}

void SignalLightDebug_SignalDebug::SharedCtor() {
  _cached_size_ = 0;
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&light_stop_s_, 0, reinterpret_cast<char*>(&adc_stop_deceleration_) -
    reinterpret_cast<char*>(&light_stop_s_) + sizeof(adc_stop_deceleration_));
}

SignalLightDebug_SignalDebug::~SignalLightDebug_SignalDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  SharedDtor();
}

void SignalLightDebug_SignalDebug::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignalLightDebug_SignalDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightDebug_SignalDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalLightDebug_SignalDebug& SignalLightDebug_SignalDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignalLightDebug_SignalDebug* SignalLightDebug_SignalDebug::New(::google::protobuf::Arena* arena) const {
  SignalLightDebug_SignalDebug* n = new SignalLightDebug_SignalDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightDebug_SignalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  if (has_light_id()) {
    GOOGLE_DCHECK(!light_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*light_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&light_stop_s_, 0, reinterpret_cast<char*>(&adc_stop_deceleration_) -
      reinterpret_cast<char*>(&light_stop_s_) + sizeof(adc_stop_deceleration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalLightDebug_SignalDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string light_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->light_id().data(), this->light_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.TrafficLight.Color color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::jmc_auto::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double light_stop_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_light_stop_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &light_stop_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_stop_deceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_adc_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stop_wall_created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_stop_wall_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stop_wall_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  return false;
#undef DO_
}

void SignalLightDebug_SignalDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string light_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), this->light_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->light_id(), output);
  }

  // optional .jmc_auto.perception.TrafficLight.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // optional double light_stop_s = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->light_stop_s(), output);
  }

  // optional double adc_stop_deceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->adc_stop_deceleration(), output);
  }

  // optional bool is_stop_wall_created = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_stop_wall_created(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
}

::google::protobuf::uint8* SignalLightDebug_SignalDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string light_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), this->light_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->light_id(), target);
  }

  // optional .jmc_auto.perception.TrafficLight.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // optional double light_stop_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->light_stop_s(), target);
  }

  // optional double adc_stop_deceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->adc_stop_deceleration(), target);
  }

  // optional bool is_stop_wall_created = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_stop_wall_created(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  return target;
}

size_t SignalLightDebug_SignalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string light_id = 1;
    if (has_light_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->light_id());
    }

    // optional double light_stop_s = 3;
    if (has_light_stop_s()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.perception.TrafficLight.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool is_stop_wall_created = 5;
    if (has_is_stop_wall_created()) {
      total_size += 1 + 1;
    }

    // optional double adc_stop_deceleration = 4;
    if (has_adc_stop_deceleration()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightDebug_SignalDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLightDebug_SignalDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightDebug_SignalDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug_SignalDebug::MergeFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_light_id();
      light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      light_stop_s_ = from.light_stop_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_stop_wall_created_ = from.is_stop_wall_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      adc_stop_deceleration_ = from.adc_stop_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalLightDebug_SignalDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug_SignalDebug::CopyFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug_SignalDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug_SignalDebug::Swap(SignalLightDebug_SignalDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightDebug_SignalDebug::InternalSwap(SignalLightDebug_SignalDebug* other) {
  light_id_.Swap(&other->light_id_);
  std::swap(light_stop_s_, other->light_stop_s_);
  std::swap(color_, other->color_);
  std::swap(is_stop_wall_created_, other->is_stop_wall_created_);
  std::swap(adc_stop_deceleration_, other->adc_stop_deceleration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightDebug_SignalDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalLightDebug_SignalDebug

// optional string light_id = 1;
bool SignalLightDebug_SignalDebug::has_light_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_light_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightDebug_SignalDebug::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightDebug_SignalDebug::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
const ::std::string& SignalLightDebug_SignalDebug::light_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.GetNoArena();
}
void SignalLightDebug_SignalDebug::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#if LANG_CXX11
void SignalLightDebug_SignalDebug::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#endif
void SignalLightDebug_SignalDebug::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
void SignalLightDebug_SignalDebug::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
::std::string* SignalLightDebug_SignalDebug::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignalLightDebug_SignalDebug::release_light_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignalLightDebug_SignalDebug::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}

// optional .jmc_auto.perception.TrafficLight.Color color = 2;
bool SignalLightDebug_SignalDebug::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void SignalLightDebug_SignalDebug::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignalLightDebug_SignalDebug::clear_color() {
  color_ = 0;
  clear_has_color();
}
::jmc_auto::perception::TrafficLight_Color SignalLightDebug_SignalDebug::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.color)
  return static_cast< ::jmc_auto::perception::TrafficLight_Color >(color_);
}
void SignalLightDebug_SignalDebug::set_color(::jmc_auto::perception::TrafficLight_Color value) {
  assert(::jmc_auto::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.color)
}

// optional double light_stop_s = 3;
bool SignalLightDebug_SignalDebug::has_light_stop_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_light_stop_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightDebug_SignalDebug::clear_has_light_stop_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightDebug_SignalDebug::clear_light_stop_s() {
  light_stop_s_ = 0;
  clear_has_light_stop_s();
}
double SignalLightDebug_SignalDebug::light_stop_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
  return light_stop_s_;
}
void SignalLightDebug_SignalDebug::set_light_stop_s(double value) {
  set_has_light_stop_s();
  light_stop_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
}

// optional double adc_stop_deceleration = 4;
bool SignalLightDebug_SignalDebug::has_adc_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_adc_stop_deceleration() {
  _has_bits_[0] |= 0x00000010u;
}
void SignalLightDebug_SignalDebug::clear_has_adc_stop_deceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
void SignalLightDebug_SignalDebug::clear_adc_stop_deceleration() {
  adc_stop_deceleration_ = 0;
  clear_has_adc_stop_deceleration();
}
double SignalLightDebug_SignalDebug::adc_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deceleration)
  return adc_stop_deceleration_;
}
void SignalLightDebug_SignalDebug::set_adc_stop_deceleration(double value) {
  set_has_adc_stop_deceleration();
  adc_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deceleration)
}

// optional bool is_stop_wall_created = 5;
bool SignalLightDebug_SignalDebug::has_is_stop_wall_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignalLightDebug_SignalDebug::set_has_is_stop_wall_created() {
  _has_bits_[0] |= 0x00000008u;
}
void SignalLightDebug_SignalDebug::clear_has_is_stop_wall_created() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignalLightDebug_SignalDebug::clear_is_stop_wall_created() {
  is_stop_wall_created_ = false;
  clear_has_is_stop_wall_created();
}
bool SignalLightDebug_SignalDebug::is_stop_wall_created() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
  return is_stop_wall_created_;
}
void SignalLightDebug_SignalDebug::set_is_stop_wall_created(bool value) {
  set_has_is_stop_wall_created();
  is_stop_wall_created_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalLightDebug::kAdcSpeedFieldNumber;
const int SignalLightDebug::kAdcFrontSFieldNumber;
const int SignalLightDebug::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalLightDebug::SignalLightDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.SignalLightDebug)
}
SignalLightDebug::SignalLightDebug(const SignalLightDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_speed_, &from.adc_speed_,
    reinterpret_cast<char*>(&adc_front_s_) -
    reinterpret_cast<char*>(&adc_speed_) + sizeof(adc_front_s_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.SignalLightDebug)
}

void SignalLightDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&adc_speed_, 0, reinterpret_cast<char*>(&adc_front_s_) -
    reinterpret_cast<char*>(&adc_speed_) + sizeof(adc_front_s_));
}

SignalLightDebug::~SignalLightDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.SignalLightDebug)
  SharedDtor();
}

void SignalLightDebug::SharedDtor() {
}

void SignalLightDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalLightDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalLightDebug& SignalLightDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignalLightDebug* SignalLightDebug::New(::google::protobuf::Arena* arena) const {
  SignalLightDebug* n = new SignalLightDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.SignalLightDebug)
  signal_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&adc_speed_, 0, reinterpret_cast<char*>(&adc_front_s_) -
      reinterpret_cast<char*>(&adc_speed_) + sizeof(adc_front_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignalLightDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.SignalLightDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double adc_speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_adc_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_front_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_adc_front_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_front_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.SignalLightDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.SignalLightDebug)
  return false;
#undef DO_
}

void SignalLightDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.SignalLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->adc_speed(), output);
  }

  // optional double adc_front_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->adc_front_s(), output);
  }

  // repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.SignalLightDebug)
}

::google::protobuf::uint8* SignalLightDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.SignalLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->adc_speed(), target);
  }

  // optional double adc_front_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->adc_front_s(), target);
  }

  // repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->signal(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.SignalLightDebug)
  return target;
}

size_t SignalLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.SignalLightDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  {
    unsigned int count = this->signal_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double adc_speed = 1;
    if (has_adc_speed()) {
      total_size += 1 + 8;
    }

    // optional double adc_front_s = 2;
    if (has_adc_front_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalLightDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLightDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalLightDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.SignalLightDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.SignalLightDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug::MergeFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      adc_speed_ = from.adc_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      adc_front_s_ = from.adc_front_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalLightDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug::CopyFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug::Swap(SignalLightDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalLightDebug::InternalSwap(SignalLightDebug* other) {
  signal_.InternalSwap(&other->signal_);
  std::swap(adc_speed_, other->adc_speed_);
  std::swap(adc_front_s_, other->adc_front_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalLightDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignalLightDebug

// optional double adc_speed = 1;
bool SignalLightDebug::has_adc_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignalLightDebug::set_has_adc_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void SignalLightDebug::clear_has_adc_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignalLightDebug::clear_adc_speed() {
  adc_speed_ = 0;
  clear_has_adc_speed();
}
double SignalLightDebug::adc_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.adc_speed)
  return adc_speed_;
}
void SignalLightDebug::set_adc_speed(double value) {
  set_has_adc_speed();
  adc_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.adc_speed)
}

// optional double adc_front_s = 2;
bool SignalLightDebug::has_adc_front_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignalLightDebug::set_has_adc_front_s() {
  _has_bits_[0] |= 0x00000002u;
}
void SignalLightDebug::clear_has_adc_front_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignalLightDebug::clear_adc_front_s() {
  adc_front_s_ = 0;
  clear_has_adc_front_s();
}
double SignalLightDebug::adc_front_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.adc_front_s)
  return adc_front_s_;
}
void SignalLightDebug::set_adc_front_s(double value) {
  set_has_adc_front_s();
  adc_front_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.adc_front_s)
}

// repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
int SignalLightDebug::signal_size() const {
  return signal_.size();
}
void SignalLightDebug::clear_signal() {
  signal_.Clear();
}
const ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::signal(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_.Get(index);
}
::jmc_auto::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_.Mutable(index);
}
::jmc_auto::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::add_signal() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug >*
SignalLightDebug::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SignalLightDebug.signal)
  return &signal_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug >&
SignalLightDebug::signal() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTag::kDeciderTagFieldNumber;
const int DecisionTag::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTag::DecisionTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.DecisionTag)
}
DecisionTag::DecisionTag(const DecisionTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  decider_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_decider_tag()) {
    decider_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
  }
  if (from.has_decision()) {
    decision_ = new ::jmc_auto::planning::ObjectDecisionType(*from.decision_);
  } else {
    decision_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.DecisionTag)
}

void DecisionTag::SharedCtor() {
  _cached_size_ = 0;
  decider_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  decision_ = NULL;
}

DecisionTag::~DecisionTag() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.DecisionTag)
  SharedDtor();
}

void DecisionTag::SharedDtor() {
  decider_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete decision_;
  }
}

void DecisionTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionTag::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionTag& DecisionTag::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecisionTag* DecisionTag::New(::google::protobuf::Arena* arena) const {
  DecisionTag* n = new DecisionTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionTag::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.DecisionTag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_decider_tag()) {
      GOOGLE_DCHECK(!decider_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*decider_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_decision()) {
      GOOGLE_DCHECK(decision_ != NULL);
      decision_->::jmc_auto::planning::ObjectDecisionType::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DecisionTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.DecisionTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string decider_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decider_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->decider_tag().data(), this->decider_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.DecisionTag.decider_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectDecisionType decision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.DecisionTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.DecisionTag)
  return false;
#undef DO_
}

void DecisionTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.DecisionTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decider_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->decider_tag().data(), this->decider_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.DecisionTag.decider_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->decider_tag(), output);
  }

  // optional .jmc_auto.planning.ObjectDecisionType decision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->decision_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.DecisionTag)
}

::google::protobuf::uint8* DecisionTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.DecisionTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decider_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->decider_tag().data(), this->decider_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.DecisionTag.decider_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->decider_tag(), target);
  }

  // optional .jmc_auto.planning.ObjectDecisionType decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->decision_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.DecisionTag)
  return target;
}

size_t DecisionTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.DecisionTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string decider_tag = 1;
    if (has_decider_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decider_tag());
    }

    // optional .jmc_auto.planning.ObjectDecisionType decision = 2;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.DecisionTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.DecisionTag)
    MergeFrom(*source);
  }
}

void DecisionTag::MergeFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_decider_tag();
      decider_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_decision()->::jmc_auto::planning::ObjectDecisionType::MergeFrom(from.decision());
    }
  }
}

void DecisionTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTag::CopyFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTag::IsInitialized() const {
  return true;
}

void DecisionTag::Swap(DecisionTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionTag::InternalSwap(DecisionTag* other) {
  decider_tag_.Swap(&other->decider_tag_);
  std::swap(decision_, other->decision_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionTag::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionTag

// optional string decider_tag = 1;
bool DecisionTag::has_decider_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DecisionTag::set_has_decider_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void DecisionTag::clear_has_decider_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void DecisionTag::clear_decider_tag() {
  decider_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_decider_tag();
}
const ::std::string& DecisionTag::decider_tag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.GetNoArena();
}
void DecisionTag::set_decider_tag(const ::std::string& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
#if LANG_CXX11
void DecisionTag::set_decider_tag(::std::string&& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
#endif
void DecisionTag::set_decider_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
void DecisionTag::set_decider_tag(const char* value, size_t size) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
::std::string* DecisionTag::mutable_decider_tag() {
  set_has_decider_tag();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DecisionTag::release_decider_tag() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.DecisionTag.decider_tag)
  clear_has_decider_tag();
  return decider_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DecisionTag::set_allocated_decider_tag(::std::string* decider_tag) {
  if (decider_tag != NULL) {
    set_has_decider_tag();
  } else {
    clear_has_decider_tag();
  }
  decider_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decider_tag);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.DecisionTag.decider_tag)
}

// optional .jmc_auto.planning.ObjectDecisionType decision = 2;
bool DecisionTag::has_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionTag::set_has_decision() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionTag::clear_has_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionTag::clear_decision() {
  if (decision_ != NULL) decision_->::jmc_auto::planning::ObjectDecisionType::Clear();
  clear_has_decision();
}
const ::jmc_auto::planning::ObjectDecisionType& DecisionTag::decision() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DecisionTag.decision)
  return decision_ != NULL ? *decision_
                         : *::jmc_auto::planning::ObjectDecisionType::internal_default_instance();
}
::jmc_auto::planning::ObjectDecisionType* DecisionTag::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::jmc_auto::planning::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DecisionTag.decision)
  return decision_;
}
::jmc_auto::planning::ObjectDecisionType* DecisionTag::release_decision() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.DecisionTag.decision)
  clear_has_decision();
  ::jmc_auto::planning::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
void DecisionTag::set_allocated_decision(::jmc_auto::planning::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.DecisionTag.decision)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleDebug::kIdFieldNumber;
const int ObstacleDebug::kSlBoundaryFieldNumber;
const int ObstacleDebug::kDecisionTagFieldNumber;
const int ObstacleDebug::kVerticesXCoordsFieldNumber;
const int ObstacleDebug::kVerticesYCoordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleDebug::ObstacleDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.ObstacleDebug)
}
ObstacleDebug::ObstacleDebug(const ObstacleDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      decision_tag_(from.decision_tag_),
      vertices_x_coords_(from.vertices_x_coords_),
      vertices_y_coords_(from.vertices_y_coords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_sl_boundary()) {
    sl_boundary_ = new ::jmc_auto::planning::SLBoundary(*from.sl_boundary_);
  } else {
    sl_boundary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.ObstacleDebug)
}

void ObstacleDebug::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sl_boundary_ = NULL;
}

ObstacleDebug::~ObstacleDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.ObstacleDebug)
  SharedDtor();
}

void ObstacleDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete sl_boundary_;
  }
}

void ObstacleDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleDebug& ObstacleDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleDebug* ObstacleDebug::New(::google::protobuf::Arena* arena) const {
  ObstacleDebug* n = new ObstacleDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.ObstacleDebug)
  decision_tag_.Clear();
  vertices_x_coords_.Clear();
  vertices_y_coords_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_sl_boundary()) {
      GOOGLE_DCHECK(sl_boundary_ != NULL);
      sl_boundary_->::jmc_auto::planning::SLBoundary::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.ObstacleDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.ObstacleDebug.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sl_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decision_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double vertices_x_coords = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_vertices_x_coords())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vertices_x_coords())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double vertices_y_coords = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_vertices_y_coords())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vertices_y_coords())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.ObstacleDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.ObstacleDebug)
  return false;
#undef DO_
}

void ObstacleDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.ObstacleDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.ObstacleDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sl_boundary_, output);
  }

  // repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0, n = this->decision_tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->decision_tag(i), output);
  }

  // repeated double vertices_x_coords = 4;
  for (int i = 0, n = this->vertices_x_coords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->vertices_x_coords(i), output);
  }

  // repeated double vertices_y_coords = 5;
  for (int i = 0, n = this->vertices_y_coords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->vertices_y_coords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.ObstacleDebug)
}

::google::protobuf::uint8* ObstacleDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.ObstacleDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.ObstacleDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sl_boundary_, deterministic, target);
  }

  // repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0, n = this->decision_tag_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->decision_tag(i), deterministic, target);
  }

  // repeated double vertices_x_coords = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->vertices_x_coords_, target);

  // repeated double vertices_y_coords = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->vertices_y_coords_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.ObstacleDebug)
  return target;
}

size_t ObstacleDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.ObstacleDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
  {
    unsigned int count = this->decision_tag_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decision_tag(i));
    }
  }

  // repeated double vertices_x_coords = 4;
  {
    unsigned int count = this->vertices_x_coords_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->vertices_x_coords_size());
    total_size += data_size;
  }

  // repeated double vertices_y_coords = 5;
  {
    unsigned int count = this->vertices_y_coords_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->vertices_y_coords_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
    if (has_sl_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sl_boundary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.ObstacleDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.ObstacleDebug)
    MergeFrom(*source);
  }
}

void ObstacleDebug::MergeFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decision_tag_.MergeFrom(from.decision_tag_);
  vertices_x_coords_.MergeFrom(from.vertices_x_coords_);
  vertices_y_coords_.MergeFrom(from.vertices_y_coords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sl_boundary()->::jmc_auto::planning::SLBoundary::MergeFrom(from.sl_boundary());
    }
  }
}

void ObstacleDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleDebug::CopyFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDebug::IsInitialized() const {
  return true;
}

void ObstacleDebug::Swap(ObstacleDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleDebug::InternalSwap(ObstacleDebug* other) {
  decision_tag_.InternalSwap(&other->decision_tag_);
  vertices_x_coords_.InternalSwap(&other->vertices_x_coords_);
  vertices_y_coords_.InternalSwap(&other->vertices_y_coords_);
  id_.Swap(&other->id_);
  std::swap(sl_boundary_, other->sl_boundary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleDebug

// optional string id = 1;
bool ObstacleDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ObstacleDebug::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.id)
  return id_.GetNoArena();
}
void ObstacleDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ObstacleDebug.id)
}
#if LANG_CXX11
void ObstacleDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.ObstacleDebug.id)
}
#endif
void ObstacleDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.ObstacleDebug.id)
}
void ObstacleDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.ObstacleDebug.id)
}
::std::string* ObstacleDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ObstacleDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObstacleDebug::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ObstacleDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObstacleDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ObstacleDebug.id)
}

// optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
bool ObstacleDebug::has_sl_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleDebug::set_has_sl_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleDebug::clear_has_sl_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleDebug::clear_sl_boundary() {
  if (sl_boundary_ != NULL) sl_boundary_->::jmc_auto::planning::SLBoundary::Clear();
  clear_has_sl_boundary();
}
const ::jmc_auto::planning::SLBoundary& ObstacleDebug::sl_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_ != NULL ? *sl_boundary_
                         : *::jmc_auto::planning::SLBoundary::internal_default_instance();
}
::jmc_auto::planning::SLBoundary* ObstacleDebug::mutable_sl_boundary() {
  set_has_sl_boundary();
  if (sl_boundary_ == NULL) {
    sl_boundary_ = new ::jmc_auto::planning::SLBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_;
}
::jmc_auto::planning::SLBoundary* ObstacleDebug::release_sl_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
  clear_has_sl_boundary();
  ::jmc_auto::planning::SLBoundary* temp = sl_boundary_;
  sl_boundary_ = NULL;
  return temp;
}
void ObstacleDebug::set_allocated_sl_boundary(::jmc_auto::planning::SLBoundary* sl_boundary) {
  delete sl_boundary_;
  sl_boundary_ = sl_boundary;
  if (sl_boundary) {
    set_has_sl_boundary();
  } else {
    clear_has_sl_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
}

// repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
int ObstacleDebug::decision_tag_size() const {
  return decision_tag_.size();
}
void ObstacleDebug::clear_decision_tag() {
  decision_tag_.Clear();
}
const ::jmc_auto::planning_internal::DecisionTag& ObstacleDebug::decision_tag(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Get(index);
}
::jmc_auto::planning_internal::DecisionTag* ObstacleDebug::mutable_decision_tag(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Mutable(index);
}
::jmc_auto::planning_internal::DecisionTag* ObstacleDebug::add_decision_tag() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag >*
ObstacleDebug::mutable_decision_tag() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return &decision_tag_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag >&
ObstacleDebug::decision_tag() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_;
}

// repeated double vertices_x_coords = 4;
int ObstacleDebug::vertices_x_coords_size() const {
  return vertices_x_coords_.size();
}
void ObstacleDebug::clear_vertices_x_coords() {
  vertices_x_coords_.Clear();
}
double ObstacleDebug::vertices_x_coords(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
  return vertices_x_coords_.Get(index);
}
void ObstacleDebug::set_vertices_x_coords(int index, double value) {
  vertices_x_coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
}
void ObstacleDebug::add_vertices_x_coords(double value) {
  vertices_x_coords_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
}
const ::google::protobuf::RepeatedField< double >&
ObstacleDebug::vertices_x_coords() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
  return vertices_x_coords_;
}
::google::protobuf::RepeatedField< double >*
ObstacleDebug::mutable_vertices_x_coords() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
  return &vertices_x_coords_;
}

// repeated double vertices_y_coords = 5;
int ObstacleDebug::vertices_y_coords_size() const {
  return vertices_y_coords_.size();
}
void ObstacleDebug::clear_vertices_y_coords() {
  vertices_y_coords_.Clear();
}
double ObstacleDebug::vertices_y_coords(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
  return vertices_y_coords_.Get(index);
}
void ObstacleDebug::set_vertices_y_coords(int index, double value) {
  vertices_y_coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
}
void ObstacleDebug::add_vertices_y_coords(double value) {
  vertices_y_coords_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
}
const ::google::protobuf::RepeatedField< double >&
ObstacleDebug::vertices_y_coords() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
  return vertices_y_coords_;
}
::google::protobuf::RepeatedField< double >*
ObstacleDebug::mutable_vertices_y_coords() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
  return &vertices_y_coords_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineDebug::kIdFieldNumber;
const int ReferenceLineDebug::kLengthFieldNumber;
const int ReferenceLineDebug::kCostFieldNumber;
const int ReferenceLineDebug::kIsChangeLanePathFieldNumber;
const int ReferenceLineDebug::kIsDrivableFieldNumber;
const int ReferenceLineDebug::kIsProtectedFieldNumber;
const int ReferenceLineDebug::kIsOffroadFieldNumber;
const int ReferenceLineDebug::kMinimumBoundaryFieldNumber;
const int ReferenceLineDebug::kAverageKappaFieldNumber;
const int ReferenceLineDebug::kAverageDkappaFieldNumber;
const int ReferenceLineDebug::kKappaRmsFieldNumber;
const int ReferenceLineDebug::kDkappaRmsFieldNumber;
const int ReferenceLineDebug::kKappaMaxAbsFieldNumber;
const int ReferenceLineDebug::kDkappaMaxAbsFieldNumber;
const int ReferenceLineDebug::kAverageOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineDebug::ReferenceLineDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.ReferenceLineDebug)
}
ReferenceLineDebug::ReferenceLineDebug(const ReferenceLineDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&is_offroad_) -
    reinterpret_cast<char*>(&length_) + sizeof(is_offroad_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.ReferenceLineDebug)
}

void ReferenceLineDebug::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&is_offroad_) -
    reinterpret_cast<char*>(&length_) + sizeof(is_offroad_));
}

ReferenceLineDebug::~ReferenceLineDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.ReferenceLineDebug)
  SharedDtor();
}

void ReferenceLineDebug::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReferenceLineDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineDebug& ReferenceLineDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReferenceLineDebug* ReferenceLineDebug::New(::google::protobuf::Arena* arena) const {
  ReferenceLineDebug* n = new ReferenceLineDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.ReferenceLineDebug)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&dkappa_rms_) -
      reinterpret_cast<char*>(&length_) + sizeof(dkappa_rms_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&kappa_max_abs_, 0, reinterpret_cast<char*>(&is_offroad_) -
      reinterpret_cast<char*>(&kappa_max_abs_) + sizeof(is_offroad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReferenceLineDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.ReferenceLineDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.ReferenceLineDebug.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_change_lane_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_change_lane_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_change_lane_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_drivable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_drivable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drivable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_protected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_protected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_protected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_offroad = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_offroad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_offroad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimum_boundary = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_minimum_boundary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double average_kappa = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_average_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double average_dkappa = 10 [deprecated = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_average_dkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_rms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_kappa_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dkappa_rms = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_dkappa_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_max_abs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_kappa_max_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_max_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dkappa_max_abs = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_dkappa_max_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_max_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double average_offset = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_average_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.ReferenceLineDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.ReferenceLineDebug)
  return false;
#undef DO_
}

void ReferenceLineDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.ReferenceLineDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.ReferenceLineDebug.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cost(), output);
  }

  // optional bool is_change_lane_path = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_change_lane_path(), output);
  }

  // optional bool is_drivable = 5;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_drivable(), output);
  }

  // optional bool is_protected = 6;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_protected(), output);
  }

  // optional bool is_offroad = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_offroad(), output);
  }

  // optional double minimum_boundary = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->minimum_boundary(), output);
  }

  // optional double average_kappa = 9 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->average_kappa(), output);
  }

  // optional double average_dkappa = 10 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->average_dkappa(), output);
  }

  // optional double kappa_rms = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->kappa_rms(), output);
  }

  // optional double dkappa_rms = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dkappa_rms(), output);
  }

  // optional double kappa_max_abs = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->kappa_max_abs(), output);
  }

  // optional double dkappa_max_abs = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->dkappa_max_abs(), output);
  }

  // optional double average_offset = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->average_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.ReferenceLineDebug)
}

::google::protobuf::uint8* ReferenceLineDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.ReferenceLineDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.ReferenceLineDebug.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cost(), target);
  }

  // optional bool is_change_lane_path = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_change_lane_path(), target);
  }

  // optional bool is_drivable = 5;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_drivable(), target);
  }

  // optional bool is_protected = 6;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_protected(), target);
  }

  // optional bool is_offroad = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_offroad(), target);
  }

  // optional double minimum_boundary = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->minimum_boundary(), target);
  }

  // optional double average_kappa = 9 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->average_kappa(), target);
  }

  // optional double average_dkappa = 10 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->average_dkappa(), target);
  }

  // optional double kappa_rms = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->kappa_rms(), target);
  }

  // optional double dkappa_rms = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dkappa_rms(), target);
  }

  // optional double kappa_max_abs = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->kappa_max_abs(), target);
  }

  // optional double dkappa_max_abs = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->dkappa_max_abs(), target);
  }

  // optional double average_offset = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->average_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.ReferenceLineDebug)
  return target;
}

size_t ReferenceLineDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.ReferenceLineDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double cost = 3;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional double minimum_boundary = 8;
    if (has_minimum_boundary()) {
      total_size += 1 + 8;
    }

    // optional double average_kappa = 9 [deprecated = true];
    if (has_average_kappa()) {
      total_size += 1 + 8;
    }

    // optional double average_dkappa = 10 [deprecated = true];
    if (has_average_dkappa()) {
      total_size += 1 + 8;
    }

    // optional double kappa_rms = 11;
    if (has_kappa_rms()) {
      total_size += 1 + 8;
    }

    // optional double dkappa_rms = 12;
    if (has_dkappa_rms()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double kappa_max_abs = 13;
    if (has_kappa_max_abs()) {
      total_size += 1 + 8;
    }

    // optional double dkappa_max_abs = 14;
    if (has_dkappa_max_abs()) {
      total_size += 1 + 8;
    }

    // optional double average_offset = 15;
    if (has_average_offset()) {
      total_size += 1 + 8;
    }

    // optional bool is_change_lane_path = 4;
    if (has_is_change_lane_path()) {
      total_size += 1 + 1;
    }

    // optional bool is_drivable = 5;
    if (has_is_drivable()) {
      total_size += 1 + 1;
    }

    // optional bool is_protected = 6;
    if (has_is_protected()) {
      total_size += 1 + 1;
    }

    // optional bool is_offroad = 7;
    if (has_is_offroad()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.ReferenceLineDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.ReferenceLineDebug)
    MergeFrom(*source);
  }
}

void ReferenceLineDebug::MergeFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      minimum_boundary_ = from.minimum_boundary_;
    }
    if (cached_has_bits & 0x00000010u) {
      average_kappa_ = from.average_kappa_;
    }
    if (cached_has_bits & 0x00000020u) {
      average_dkappa_ = from.average_dkappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      kappa_rms_ = from.kappa_rms_;
    }
    if (cached_has_bits & 0x00000080u) {
      dkappa_rms_ = from.dkappa_rms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      kappa_max_abs_ = from.kappa_max_abs_;
    }
    if (cached_has_bits & 0x00000200u) {
      dkappa_max_abs_ = from.dkappa_max_abs_;
    }
    if (cached_has_bits & 0x00000400u) {
      average_offset_ = from.average_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_change_lane_path_ = from.is_change_lane_path_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_drivable_ = from.is_drivable_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_protected_ = from.is_protected_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_offroad_ = from.is_offroad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineDebug::CopyFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineDebug::IsInitialized() const {
  return true;
}

void ReferenceLineDebug::Swap(ReferenceLineDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineDebug::InternalSwap(ReferenceLineDebug* other) {
  id_.Swap(&other->id_);
  std::swap(length_, other->length_);
  std::swap(cost_, other->cost_);
  std::swap(minimum_boundary_, other->minimum_boundary_);
  std::swap(average_kappa_, other->average_kappa_);
  std::swap(average_dkappa_, other->average_dkappa_);
  std::swap(kappa_rms_, other->kappa_rms_);
  std::swap(dkappa_rms_, other->dkappa_rms_);
  std::swap(kappa_max_abs_, other->kappa_max_abs_);
  std::swap(dkappa_max_abs_, other->dkappa_max_abs_);
  std::swap(average_offset_, other->average_offset_);
  std::swap(is_change_lane_path_, other->is_change_lane_path_);
  std::swap(is_drivable_, other->is_drivable_);
  std::swap(is_protected_, other->is_protected_);
  std::swap(is_offroad_, other->is_offroad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceLineDebug

// optional string id = 1;
bool ReferenceLineDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferenceLineDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferenceLineDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceLineDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ReferenceLineDebug::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.id)
  return id_.GetNoArena();
}
void ReferenceLineDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
#if LANG_CXX11
void ReferenceLineDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
#endif
void ReferenceLineDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
void ReferenceLineDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
::std::string* ReferenceLineDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ReferenceLineDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReferenceLineDebug::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ReferenceLineDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReferenceLineDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ReferenceLineDebug.id)
}

// optional double length = 2;
bool ReferenceLineDebug::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferenceLineDebug::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferenceLineDebug::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineDebug::clear_length() {
  length_ = 0;
  clear_has_length();
}
double ReferenceLineDebug::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.length)
  return length_;
}
void ReferenceLineDebug::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.length)
}

// optional double cost = 3;
bool ReferenceLineDebug::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReferenceLineDebug::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void ReferenceLineDebug::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReferenceLineDebug::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
double ReferenceLineDebug::cost() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.cost)
  return cost_;
}
void ReferenceLineDebug::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.cost)
}

// optional bool is_change_lane_path = 4;
bool ReferenceLineDebug::has_is_change_lane_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ReferenceLineDebug::set_has_is_change_lane_path() {
  _has_bits_[0] |= 0x00000800u;
}
void ReferenceLineDebug::clear_has_is_change_lane_path() {
  _has_bits_[0] &= ~0x00000800u;
}
void ReferenceLineDebug::clear_is_change_lane_path() {
  is_change_lane_path_ = false;
  clear_has_is_change_lane_path();
}
bool ReferenceLineDebug::is_change_lane_path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_change_lane_path)
  return is_change_lane_path_;
}
void ReferenceLineDebug::set_is_change_lane_path(bool value) {
  set_has_is_change_lane_path();
  is_change_lane_path_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_change_lane_path)
}

// optional bool is_drivable = 5;
bool ReferenceLineDebug::has_is_drivable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ReferenceLineDebug::set_has_is_drivable() {
  _has_bits_[0] |= 0x00001000u;
}
void ReferenceLineDebug::clear_has_is_drivable() {
  _has_bits_[0] &= ~0x00001000u;
}
void ReferenceLineDebug::clear_is_drivable() {
  is_drivable_ = false;
  clear_has_is_drivable();
}
bool ReferenceLineDebug::is_drivable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_drivable)
  return is_drivable_;
}
void ReferenceLineDebug::set_is_drivable(bool value) {
  set_has_is_drivable();
  is_drivable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_drivable)
}

// optional bool is_protected = 6;
bool ReferenceLineDebug::has_is_protected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ReferenceLineDebug::set_has_is_protected() {
  _has_bits_[0] |= 0x00002000u;
}
void ReferenceLineDebug::clear_has_is_protected() {
  _has_bits_[0] &= ~0x00002000u;
}
void ReferenceLineDebug::clear_is_protected() {
  is_protected_ = false;
  clear_has_is_protected();
}
bool ReferenceLineDebug::is_protected() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_protected)
  return is_protected_;
}
void ReferenceLineDebug::set_is_protected(bool value) {
  set_has_is_protected();
  is_protected_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_protected)
}

// optional bool is_offroad = 7;
bool ReferenceLineDebug::has_is_offroad() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ReferenceLineDebug::set_has_is_offroad() {
  _has_bits_[0] |= 0x00004000u;
}
void ReferenceLineDebug::clear_has_is_offroad() {
  _has_bits_[0] &= ~0x00004000u;
}
void ReferenceLineDebug::clear_is_offroad() {
  is_offroad_ = false;
  clear_has_is_offroad();
}
bool ReferenceLineDebug::is_offroad() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_offroad)
  return is_offroad_;
}
void ReferenceLineDebug::set_is_offroad(bool value) {
  set_has_is_offroad();
  is_offroad_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_offroad)
}

// optional double minimum_boundary = 8;
bool ReferenceLineDebug::has_minimum_boundary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReferenceLineDebug::set_has_minimum_boundary() {
  _has_bits_[0] |= 0x00000008u;
}
void ReferenceLineDebug::clear_has_minimum_boundary() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReferenceLineDebug::clear_minimum_boundary() {
  minimum_boundary_ = 0;
  clear_has_minimum_boundary();
}
double ReferenceLineDebug::minimum_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.minimum_boundary)
  return minimum_boundary_;
}
void ReferenceLineDebug::set_minimum_boundary(double value) {
  set_has_minimum_boundary();
  minimum_boundary_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.minimum_boundary)
}

// optional double average_kappa = 9 [deprecated = true];
bool ReferenceLineDebug::has_average_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReferenceLineDebug::set_has_average_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
void ReferenceLineDebug::clear_has_average_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReferenceLineDebug::clear_average_kappa() {
  average_kappa_ = 0;
  clear_has_average_kappa();
}
double ReferenceLineDebug::average_kappa() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.average_kappa)
  return average_kappa_;
}
void ReferenceLineDebug::set_average_kappa(double value) {
  set_has_average_kappa();
  average_kappa_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.average_kappa)
}

// optional double average_dkappa = 10 [deprecated = true];
bool ReferenceLineDebug::has_average_dkappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReferenceLineDebug::set_has_average_dkappa() {
  _has_bits_[0] |= 0x00000020u;
}
void ReferenceLineDebug::clear_has_average_dkappa() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReferenceLineDebug::clear_average_dkappa() {
  average_dkappa_ = 0;
  clear_has_average_dkappa();
}
double ReferenceLineDebug::average_dkappa() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.average_dkappa)
  return average_dkappa_;
}
void ReferenceLineDebug::set_average_dkappa(double value) {
  set_has_average_dkappa();
  average_dkappa_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.average_dkappa)
}

// optional double kappa_rms = 11;
bool ReferenceLineDebug::has_kappa_rms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReferenceLineDebug::set_has_kappa_rms() {
  _has_bits_[0] |= 0x00000040u;
}
void ReferenceLineDebug::clear_has_kappa_rms() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReferenceLineDebug::clear_kappa_rms() {
  kappa_rms_ = 0;
  clear_has_kappa_rms();
}
double ReferenceLineDebug::kappa_rms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.kappa_rms)
  return kappa_rms_;
}
void ReferenceLineDebug::set_kappa_rms(double value) {
  set_has_kappa_rms();
  kappa_rms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.kappa_rms)
}

// optional double dkappa_rms = 12;
bool ReferenceLineDebug::has_dkappa_rms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReferenceLineDebug::set_has_dkappa_rms() {
  _has_bits_[0] |= 0x00000080u;
}
void ReferenceLineDebug::clear_has_dkappa_rms() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReferenceLineDebug::clear_dkappa_rms() {
  dkappa_rms_ = 0;
  clear_has_dkappa_rms();
}
double ReferenceLineDebug::dkappa_rms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_rms)
  return dkappa_rms_;
}
void ReferenceLineDebug::set_dkappa_rms(double value) {
  set_has_dkappa_rms();
  dkappa_rms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_rms)
}

// optional double kappa_max_abs = 13;
bool ReferenceLineDebug::has_kappa_max_abs() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ReferenceLineDebug::set_has_kappa_max_abs() {
  _has_bits_[0] |= 0x00000100u;
}
void ReferenceLineDebug::clear_has_kappa_max_abs() {
  _has_bits_[0] &= ~0x00000100u;
}
void ReferenceLineDebug::clear_kappa_max_abs() {
  kappa_max_abs_ = 0;
  clear_has_kappa_max_abs();
}
double ReferenceLineDebug::kappa_max_abs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.kappa_max_abs)
  return kappa_max_abs_;
}
void ReferenceLineDebug::set_kappa_max_abs(double value) {
  set_has_kappa_max_abs();
  kappa_max_abs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.kappa_max_abs)
}

// optional double dkappa_max_abs = 14;
bool ReferenceLineDebug::has_dkappa_max_abs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ReferenceLineDebug::set_has_dkappa_max_abs() {
  _has_bits_[0] |= 0x00000200u;
}
void ReferenceLineDebug::clear_has_dkappa_max_abs() {
  _has_bits_[0] &= ~0x00000200u;
}
void ReferenceLineDebug::clear_dkappa_max_abs() {
  dkappa_max_abs_ = 0;
  clear_has_dkappa_max_abs();
}
double ReferenceLineDebug::dkappa_max_abs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_max_abs)
  return dkappa_max_abs_;
}
void ReferenceLineDebug::set_dkappa_max_abs(double value) {
  set_has_dkappa_max_abs();
  dkappa_max_abs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_max_abs)
}

// optional double average_offset = 15;
bool ReferenceLineDebug::has_average_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ReferenceLineDebug::set_has_average_offset() {
  _has_bits_[0] |= 0x00000400u;
}
void ReferenceLineDebug::clear_has_average_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
void ReferenceLineDebug::clear_average_offset() {
  average_offset_ = 0;
  clear_has_average_offset();
}
double ReferenceLineDebug::average_offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.average_offset)
  return average_offset_;
}
void ReferenceLineDebug::set_average_offset(double value) {
  set_has_average_offset();
  average_offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.average_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleLayerDebug::kSlPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleLayerDebug::SampleLayerDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.SampleLayerDebug)
}
SampleLayerDebug::SampleLayerDebug(const SampleLayerDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sl_point_(from.sl_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.SampleLayerDebug)
}

void SampleLayerDebug::SharedCtor() {
  _cached_size_ = 0;
}

SampleLayerDebug::~SampleLayerDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.SampleLayerDebug)
  SharedDtor();
}

void SampleLayerDebug::SharedDtor() {
}

void SampleLayerDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleLayerDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleLayerDebug& SampleLayerDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleLayerDebug* SampleLayerDebug::New(::google::protobuf::Arena* arena) const {
  SampleLayerDebug* n = new SampleLayerDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleLayerDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.SampleLayerDebug)
  sl_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampleLayerDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.SampleLayerDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.SLPoint sl_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sl_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.SampleLayerDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.SampleLayerDebug)
  return false;
#undef DO_
}

void SampleLayerDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.SampleLayerDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.SLPoint sl_point = 1;
  for (unsigned int i = 0, n = this->sl_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sl_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.SampleLayerDebug)
}

::google::protobuf::uint8* SampleLayerDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.SampleLayerDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.SLPoint sl_point = 1;
  for (unsigned int i = 0, n = this->sl_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sl_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.SampleLayerDebug)
  return target;
}

size_t SampleLayerDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.SampleLayerDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.SLPoint sl_point = 1;
  {
    unsigned int count = this->sl_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sl_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleLayerDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleLayerDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleLayerDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.SampleLayerDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.SampleLayerDebug)
    MergeFrom(*source);
  }
}

void SampleLayerDebug::MergeFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sl_point_.MergeFrom(from.sl_point_);
}

void SampleLayerDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleLayerDebug::CopyFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleLayerDebug::IsInitialized() const {
  return true;
}

void SampleLayerDebug::Swap(SampleLayerDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleLayerDebug::InternalSwap(SampleLayerDebug* other) {
  sl_point_.InternalSwap(&other->sl_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleLayerDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleLayerDebug

// repeated .jmc_auto.common.SLPoint sl_point = 1;
int SampleLayerDebug::sl_point_size() const {
  return sl_point_.size();
}
void SampleLayerDebug::clear_sl_point() {
  sl_point_.Clear();
}
const ::jmc_auto::common::SLPoint& SampleLayerDebug::sl_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Get(index);
}
::jmc_auto::common::SLPoint* SampleLayerDebug::mutable_sl_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Mutable(index);
}
::jmc_auto::common::SLPoint* SampleLayerDebug::add_sl_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
SampleLayerDebug::mutable_sl_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return &sl_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
SampleLayerDebug::sl_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpPolyGraphDebug::kSampleLayerFieldNumber;
const int DpPolyGraphDebug::kMinCostPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpPolyGraphDebug::DpPolyGraphDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.DpPolyGraphDebug)
}
DpPolyGraphDebug::DpPolyGraphDebug(const DpPolyGraphDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sample_layer_(from.sample_layer_),
      min_cost_point_(from.min_cost_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.DpPolyGraphDebug)
}

void DpPolyGraphDebug::SharedCtor() {
  _cached_size_ = 0;
}

DpPolyGraphDebug::~DpPolyGraphDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.DpPolyGraphDebug)
  SharedDtor();
}

void DpPolyGraphDebug::SharedDtor() {
}

void DpPolyGraphDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpPolyGraphDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpPolyGraphDebug& DpPolyGraphDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

DpPolyGraphDebug* DpPolyGraphDebug::New(::google::protobuf::Arena* arena) const {
  DpPolyGraphDebug* n = new DpPolyGraphDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpPolyGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  sample_layer_.Clear();
  min_cost_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpPolyGraphDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sample_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.SLPoint min_cost_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_min_cost_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.DpPolyGraphDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.DpPolyGraphDebug)
  return false;
#undef DO_
}

void DpPolyGraphDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0, n = this->sample_layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sample_layer(i), output);
  }

  // repeated .jmc_auto.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0, n = this->min_cost_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->min_cost_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.DpPolyGraphDebug)
}

::google::protobuf::uint8* DpPolyGraphDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0, n = this->sample_layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sample_layer(i), deterministic, target);
  }

  // repeated .jmc_auto.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0, n = this->min_cost_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->min_cost_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.DpPolyGraphDebug)
  return target;
}

size_t DpPolyGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
  {
    unsigned int count = this->sample_layer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sample_layer(i));
    }
  }

  // repeated .jmc_auto.common.SLPoint min_cost_point = 2;
  {
    unsigned int count = this->min_cost_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_cost_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpPolyGraphDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const DpPolyGraphDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpPolyGraphDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.DpPolyGraphDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.DpPolyGraphDebug)
    MergeFrom(*source);
  }
}

void DpPolyGraphDebug::MergeFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_layer_.MergeFrom(from.sample_layer_);
  min_cost_point_.MergeFrom(from.min_cost_point_);
}

void DpPolyGraphDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyGraphDebug::CopyFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyGraphDebug::IsInitialized() const {
  return true;
}

void DpPolyGraphDebug::Swap(DpPolyGraphDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpPolyGraphDebug::InternalSwap(DpPolyGraphDebug* other) {
  sample_layer_.InternalSwap(&other->sample_layer_);
  min_cost_point_.InternalSwap(&other->min_cost_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpPolyGraphDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpPolyGraphDebug

// repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
int DpPolyGraphDebug::sample_layer_size() const {
  return sample_layer_.size();
}
void DpPolyGraphDebug::clear_sample_layer() {
  sample_layer_.Clear();
}
const ::jmc_auto::planning_internal::SampleLayerDebug& DpPolyGraphDebug::sample_layer(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Get(index);
}
::jmc_auto::planning_internal::SampleLayerDebug* DpPolyGraphDebug::mutable_sample_layer(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Mutable(index);
}
::jmc_auto::planning_internal::SampleLayerDebug* DpPolyGraphDebug::add_sample_layer() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug >*
DpPolyGraphDebug::mutable_sample_layer() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return &sample_layer_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug >&
DpPolyGraphDebug::sample_layer() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_;
}

// repeated .jmc_auto.common.SLPoint min_cost_point = 2;
int DpPolyGraphDebug::min_cost_point_size() const {
  return min_cost_point_.size();
}
void DpPolyGraphDebug::clear_min_cost_point() {
  min_cost_point_.Clear();
}
const ::jmc_auto::common::SLPoint& DpPolyGraphDebug::min_cost_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Get(index);
}
::jmc_auto::common::SLPoint* DpPolyGraphDebug::mutable_min_cost_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Mutable(index);
}
::jmc_auto::common::SLPoint* DpPolyGraphDebug::add_min_cost_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
DpPolyGraphDebug::mutable_min_cost_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return &min_cost_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
DpPolyGraphDebug::min_cost_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioDebug::kScenarioTypeFieldNumber;
const int ScenarioDebug::kStageTypeFieldNumber;
const int ScenarioDebug::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioDebug::ScenarioDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.ScenarioDebug)
}
ScenarioDebug::ScenarioDebug(const ScenarioDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&scenario_type_, &from.scenario_type_,
    reinterpret_cast<char*>(&stage_type_) -
    reinterpret_cast<char*>(&scenario_type_) + sizeof(stage_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.ScenarioDebug)
}

void ScenarioDebug::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scenario_type_, 0, reinterpret_cast<char*>(&stage_type_) -
    reinterpret_cast<char*>(&scenario_type_) + sizeof(stage_type_));
}

ScenarioDebug::~ScenarioDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.ScenarioDebug)
  SharedDtor();
}

void ScenarioDebug::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScenarioDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenarioDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioDebug& ScenarioDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenarioDebug* ScenarioDebug::New(::google::protobuf::Arena* arena) const {
  ScenarioDebug* n = new ScenarioDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenarioDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.ScenarioDebug)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&scenario_type_, 0, reinterpret_cast<char*>(&stage_type_) -
      reinterpret_cast<char*>(&scenario_type_) + sizeof(stage_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.ScenarioDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ScenarioConfig_ScenarioType_IsValid(value)) {
            set_scenario_type(static_cast< ::jmc_auto::planning::ScenarioConfig_ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ScenarioConfig_StageType_IsValid(value)) {
            set_stage_type(static_cast< ::jmc_auto::planning::ScenarioConfig_StageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.ScenarioDebug.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.ScenarioDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.ScenarioDebug)
  return false;
#undef DO_
}

void ScenarioDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.ScenarioDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scenario_type(), output);
  }

  // optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage_type(), output);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.ScenarioDebug.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.ScenarioDebug)
}

::google::protobuf::uint8* ScenarioDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.ScenarioDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scenario_type(), target);
  }

  // optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage_type(), target);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.ScenarioDebug.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.ScenarioDebug)
  return target;
}

size_t ScenarioDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.ScenarioDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
    if (has_scenario_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scenario_type());
    }

    // optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
    if (has_stage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenarioDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.ScenarioDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.ScenarioDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.ScenarioDebug)
    MergeFrom(*source);
  }
}

void ScenarioDebug::MergeFrom(const ScenarioDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.ScenarioDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      scenario_type_ = from.scenario_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      stage_type_ = from.stage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.ScenarioDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioDebug::CopyFrom(const ScenarioDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.ScenarioDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioDebug::IsInitialized() const {
  return true;
}

void ScenarioDebug::Swap(ScenarioDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioDebug::InternalSwap(ScenarioDebug* other) {
  msg_.Swap(&other->msg_);
  std::swap(scenario_type_, other->scenario_type_);
  std::swap(stage_type_, other->stage_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenarioDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenarioDebug

// optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
bool ScenarioDebug::has_scenario_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScenarioDebug::set_has_scenario_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ScenarioDebug::clear_has_scenario_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScenarioDebug::clear_scenario_type() {
  scenario_type_ = 0;
  clear_has_scenario_type();
}
::jmc_auto::planning::ScenarioConfig_ScenarioType ScenarioDebug::scenario_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ScenarioDebug.scenario_type)
  return static_cast< ::jmc_auto::planning::ScenarioConfig_ScenarioType >(scenario_type_);
}
void ScenarioDebug::set_scenario_type(::jmc_auto::planning::ScenarioConfig_ScenarioType value) {
  assert(::jmc_auto::planning::ScenarioConfig_ScenarioType_IsValid(value));
  set_has_scenario_type();
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ScenarioDebug.scenario_type)
}

// optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
bool ScenarioDebug::has_stage_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScenarioDebug::set_has_stage_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ScenarioDebug::clear_has_stage_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScenarioDebug::clear_stage_type() {
  stage_type_ = 0;
  clear_has_stage_type();
}
::jmc_auto::planning::ScenarioConfig_StageType ScenarioDebug::stage_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ScenarioDebug.stage_type)
  return static_cast< ::jmc_auto::planning::ScenarioConfig_StageType >(stage_type_);
}
void ScenarioDebug::set_stage_type(::jmc_auto::planning::ScenarioConfig_StageType value) {
  assert(::jmc_auto::planning::ScenarioConfig_StageType_IsValid(value));
  set_has_stage_type();
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ScenarioDebug.stage_type)
}

// optional string msg = 3;
bool ScenarioDebug::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScenarioDebug::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void ScenarioDebug::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScenarioDebug::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& ScenarioDebug::msg() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ScenarioDebug.msg)
  return msg_.GetNoArena();
}
void ScenarioDebug::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ScenarioDebug.msg)
}
#if LANG_CXX11
void ScenarioDebug::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.ScenarioDebug.msg)
}
#endif
void ScenarioDebug::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.ScenarioDebug.msg)
}
void ScenarioDebug::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.ScenarioDebug.msg)
}
::std::string* ScenarioDebug::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ScenarioDebug.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScenarioDebug::release_msg() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ScenarioDebug.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScenarioDebug::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ScenarioDebug.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectories::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectories::Trajectories()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.Trajectories)
}
Trajectories::Trajectories(const Trajectories& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.Trajectories)
}

void Trajectories::SharedCtor() {
  _cached_size_ = 0;
}

Trajectories::~Trajectories() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.Trajectories)
  SharedDtor();
}

void Trajectories::SharedDtor() {
}

void Trajectories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectories::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectories& Trajectories::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectories* Trajectories::New(::google::protobuf::Arena* arena) const {
  Trajectories* n = new Trajectories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectories::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.Trajectories)
  trajectory_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.Trajectories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.Trajectory trajectory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.Trajectories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.Trajectories)
  return false;
#undef DO_
}

void Trajectories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.Trajectories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Trajectory trajectory = 1;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trajectory(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.Trajectories)
}

::google::protobuf::uint8* Trajectories::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.Trajectories)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Trajectory trajectory = 1;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trajectory(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.Trajectories)
  return target;
}

size_t Trajectories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.Trajectories)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Trajectory trajectory = 1;
  {
    unsigned int count = this->trajectory_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectories::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.Trajectories)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectories* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectories>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.Trajectories)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.Trajectories)
    MergeFrom(*source);
  }
}

void Trajectories::MergeFrom(const Trajectories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.Trajectories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void Trajectories::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.Trajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectories::CopyFrom(const Trajectories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.Trajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectories::IsInitialized() const {
  return true;
}

void Trajectories::Swap(Trajectories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectories::InternalSwap(Trajectories* other) {
  trajectory_.InternalSwap(&other->trajectory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectories::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectories

// repeated .jmc_auto.common.Trajectory trajectory = 1;
int Trajectories::trajectory_size() const {
  return trajectory_.size();
}
void Trajectories::clear_trajectory() {
  trajectory_.Clear();
}
const ::jmc_auto::common::Trajectory& Trajectories::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_.Get(index);
}
::jmc_auto::common::Trajectory* Trajectories::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_.Mutable(index);
}
::jmc_auto::common::Trajectory* Trajectories::add_trajectory() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory >*
Trajectories::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.Trajectories.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory >&
Trajectories::trajectory() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceDebug::kTrajectoriesFieldNumber;
const int OpenSpaceDebug::kWarmStartTrajectoryFieldNumber;
const int OpenSpaceDebug::kSmoothedTrajectoryFieldNumber;
const int OpenSpaceDebug::kWarmStartDualLambdaFieldNumber;
const int OpenSpaceDebug::kWarmStartDualMiuFieldNumber;
const int OpenSpaceDebug::kOptimizedDualLambdaFieldNumber;
const int OpenSpaceDebug::kOptimizedDualMiuFieldNumber;
const int OpenSpaceDebug::kXyBoundaryFieldNumber;
const int OpenSpaceDebug::kObstaclesFieldNumber;
const int OpenSpaceDebug::kRoiShiftPointFieldNumber;
const int OpenSpaceDebug::kEndPointFieldNumber;
const int OpenSpaceDebug::kPartitionedTrajectoriesFieldNumber;
const int OpenSpaceDebug::kChosenTrajectoryFieldNumber;
const int OpenSpaceDebug::kIsFallbackTrajectoryFieldNumber;
const int OpenSpaceDebug::kFallbackTrajectoryFieldNumber;
const int OpenSpaceDebug::kTrajectoryStitchingPointFieldNumber;
const int OpenSpaceDebug::kFutureCollisionPointFieldNumber;
const int OpenSpaceDebug::kTimeLatencyFieldNumber;
const int OpenSpaceDebug::kOriginPointFieldNumber;
const int OpenSpaceDebug::kOriginHeadingRadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceDebug::OpenSpaceDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.OpenSpaceDebug)
}
OpenSpaceDebug::OpenSpaceDebug(const OpenSpaceDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      warm_start_dual_lambda_(from.warm_start_dual_lambda_),
      warm_start_dual_miu_(from.warm_start_dual_miu_),
      optimized_dual_lambda_(from.optimized_dual_lambda_),
      optimized_dual_miu_(from.optimized_dual_miu_),
      xy_boundary_(from.xy_boundary_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectories()) {
    trajectories_ = new ::jmc_auto::planning_internal::Trajectories(*from.trajectories_);
  } else {
    trajectories_ = NULL;
  }
  if (from.has_warm_start_trajectory()) {
    warm_start_trajectory_ = new ::jmc_auto::common::VehicleMotion(*from.warm_start_trajectory_);
  } else {
    warm_start_trajectory_ = NULL;
  }
  if (from.has_smoothed_trajectory()) {
    smoothed_trajectory_ = new ::jmc_auto::common::VehicleMotion(*from.smoothed_trajectory_);
  } else {
    smoothed_trajectory_ = NULL;
  }
  if (from.has_roi_shift_point()) {
    roi_shift_point_ = new ::jmc_auto::common::TrajectoryPoint(*from.roi_shift_point_);
  } else {
    roi_shift_point_ = NULL;
  }
  if (from.has_end_point()) {
    end_point_ = new ::jmc_auto::common::TrajectoryPoint(*from.end_point_);
  } else {
    end_point_ = NULL;
  }
  if (from.has_partitioned_trajectories()) {
    partitioned_trajectories_ = new ::jmc_auto::planning_internal::Trajectories(*from.partitioned_trajectories_);
  } else {
    partitioned_trajectories_ = NULL;
  }
  if (from.has_chosen_trajectory()) {
    chosen_trajectory_ = new ::jmc_auto::planning_internal::Trajectories(*from.chosen_trajectory_);
  } else {
    chosen_trajectory_ = NULL;
  }
  if (from.has_fallback_trajectory()) {
    fallback_trajectory_ = new ::jmc_auto::planning_internal::Trajectories(*from.fallback_trajectory_);
  } else {
    fallback_trajectory_ = NULL;
  }
  if (from.has_trajectory_stitching_point()) {
    trajectory_stitching_point_ = new ::jmc_auto::common::TrajectoryPoint(*from.trajectory_stitching_point_);
  } else {
    trajectory_stitching_point_ = NULL;
  }
  if (from.has_future_collision_point()) {
    future_collision_point_ = new ::jmc_auto::common::TrajectoryPoint(*from.future_collision_point_);
  } else {
    future_collision_point_ = NULL;
  }
  if (from.has_origin_point()) {
    origin_point_ = new ::jmc_auto::common::PointENU(*from.origin_point_);
  } else {
    origin_point_ = NULL;
  }
  ::memcpy(&time_latency_, &from.time_latency_,
    reinterpret_cast<char*>(&is_fallback_trajectory_) -
    reinterpret_cast<char*>(&time_latency_) + sizeof(is_fallback_trajectory_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.OpenSpaceDebug)
}

void OpenSpaceDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trajectories_, 0, reinterpret_cast<char*>(&is_fallback_trajectory_) -
    reinterpret_cast<char*>(&trajectories_) + sizeof(is_fallback_trajectory_));
}

OpenSpaceDebug::~OpenSpaceDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.OpenSpaceDebug)
  SharedDtor();
}

void OpenSpaceDebug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete trajectories_;
  }
  if (this != internal_default_instance()) {
    delete warm_start_trajectory_;
  }
  if (this != internal_default_instance()) {
    delete smoothed_trajectory_;
  }
  if (this != internal_default_instance()) {
    delete roi_shift_point_;
  }
  if (this != internal_default_instance()) {
    delete end_point_;
  }
  if (this != internal_default_instance()) {
    delete partitioned_trajectories_;
  }
  if (this != internal_default_instance()) {
    delete chosen_trajectory_;
  }
  if (this != internal_default_instance()) {
    delete fallback_trajectory_;
  }
  if (this != internal_default_instance()) {
    delete trajectory_stitching_point_;
  }
  if (this != internal_default_instance()) {
    delete future_collision_point_;
  }
  if (this != internal_default_instance()) {
    delete origin_point_;
  }
}

void OpenSpaceDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSpaceDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceDebug& OpenSpaceDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenSpaceDebug* OpenSpaceDebug::New(::google::protobuf::Arena* arena) const {
  OpenSpaceDebug* n = new OpenSpaceDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenSpaceDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.OpenSpaceDebug)
  warm_start_dual_lambda_.Clear();
  warm_start_dual_miu_.Clear();
  optimized_dual_lambda_.Clear();
  optimized_dual_miu_.Clear();
  xy_boundary_.Clear();
  obstacles_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_trajectories()) {
      GOOGLE_DCHECK(trajectories_ != NULL);
      trajectories_->::jmc_auto::planning_internal::Trajectories::Clear();
    }
    if (has_warm_start_trajectory()) {
      GOOGLE_DCHECK(warm_start_trajectory_ != NULL);
      warm_start_trajectory_->::jmc_auto::common::VehicleMotion::Clear();
    }
    if (has_smoothed_trajectory()) {
      GOOGLE_DCHECK(smoothed_trajectory_ != NULL);
      smoothed_trajectory_->::jmc_auto::common::VehicleMotion::Clear();
    }
    if (has_roi_shift_point()) {
      GOOGLE_DCHECK(roi_shift_point_ != NULL);
      roi_shift_point_->::jmc_auto::common::TrajectoryPoint::Clear();
    }
    if (has_end_point()) {
      GOOGLE_DCHECK(end_point_ != NULL);
      end_point_->::jmc_auto::common::TrajectoryPoint::Clear();
    }
    if (has_partitioned_trajectories()) {
      GOOGLE_DCHECK(partitioned_trajectories_ != NULL);
      partitioned_trajectories_->::jmc_auto::planning_internal::Trajectories::Clear();
    }
    if (has_chosen_trajectory()) {
      GOOGLE_DCHECK(chosen_trajectory_ != NULL);
      chosen_trajectory_->::jmc_auto::planning_internal::Trajectories::Clear();
    }
    if (has_fallback_trajectory()) {
      GOOGLE_DCHECK(fallback_trajectory_ != NULL);
      fallback_trajectory_->::jmc_auto::planning_internal::Trajectories::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_trajectory_stitching_point()) {
      GOOGLE_DCHECK(trajectory_stitching_point_ != NULL);
      trajectory_stitching_point_->::jmc_auto::common::TrajectoryPoint::Clear();
    }
    if (has_future_collision_point()) {
      GOOGLE_DCHECK(future_collision_point_ != NULL);
      future_collision_point_->::jmc_auto::common::TrajectoryPoint::Clear();
    }
    if (has_origin_point()) {
      GOOGLE_DCHECK(origin_point_ != NULL);
      origin_point_->::jmc_auto::common::PointENU::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 14336u) {
    ::memset(&time_latency_, 0, reinterpret_cast<char*>(&is_fallback_trajectory_) -
      reinterpret_cast<char*>(&time_latency_) + sizeof(is_fallback_trajectory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.OpenSpaceDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warm_start_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smoothed_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double warm_start_dual_lambda = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33u, input, this->mutable_warm_start_dual_lambda())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_warm_start_dual_lambda())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double warm_start_dual_miu = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_warm_start_dual_miu())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_warm_start_dual_miu())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double optimized_dual_lambda = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49u, input, this->mutable_optimized_dual_lambda())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_optimized_dual_lambda())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double optimized_dual_miu = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_optimized_dual_miu())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_optimized_dual_miu())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double xy_boundary = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65u, input, this->mutable_xy_boundary())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xy_boundary())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_shift_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.TrajectoryPoint end_point = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partitioned_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chosen_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_fallback_trajectory = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_is_fallback_trajectory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fallback_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fallback_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_stitching_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_future_collision_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_latency = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_time_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU origin_point = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double origin_heading_rad = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_origin_heading_rad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_heading_rad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.OpenSpaceDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.OpenSpaceDebug)
  return false;
#undef DO_
}

void OpenSpaceDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.OpenSpaceDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trajectories_, output);
  }

  // optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->warm_start_trajectory_, output);
  }

  // optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->smoothed_trajectory_, output);
  }

  // repeated double warm_start_dual_lambda = 4;
  for (int i = 0, n = this->warm_start_dual_lambda_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->warm_start_dual_lambda(i), output);
  }

  // repeated double warm_start_dual_miu = 5;
  for (int i = 0, n = this->warm_start_dual_miu_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->warm_start_dual_miu(i), output);
  }

  // repeated double optimized_dual_lambda = 6;
  for (int i = 0, n = this->optimized_dual_lambda_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->optimized_dual_lambda(i), output);
  }

  // repeated double optimized_dual_miu = 7;
  for (int i = 0, n = this->optimized_dual_miu_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->optimized_dual_miu(i), output);
  }

  // repeated double xy_boundary = 8;
  for (int i = 0, n = this->xy_boundary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->xy_boundary(i), output);
  }

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
  for (unsigned int i = 0, n = this->obstacles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->obstacles(i), output);
  }

  // optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->roi_shift_point_, output);
  }

  // optional .jmc_auto.common.TrajectoryPoint end_point = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->end_point_, output);
  }

  // optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->partitioned_trajectories_, output);
  }

  // optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->chosen_trajectory_, output);
  }

  // optional bool is_fallback_trajectory = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_fallback_trajectory(), output);
  }

  // optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->fallback_trajectory_, output);
  }

  // optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->trajectory_stitching_point_, output);
  }

  // optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->future_collision_point_, output);
  }

  // optional double time_latency = 18 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->time_latency(), output);
  }

  // optional .jmc_auto.common.PointENU origin_point = 19;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->origin_point_, output);
  }

  // optional double origin_heading_rad = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->origin_heading_rad(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.OpenSpaceDebug)
}

::google::protobuf::uint8* OpenSpaceDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.OpenSpaceDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trajectories_, deterministic, target);
  }

  // optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->warm_start_trajectory_, deterministic, target);
  }

  // optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->smoothed_trajectory_, deterministic, target);
  }

  // repeated double warm_start_dual_lambda = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(4, this->warm_start_dual_lambda_, target);

  // repeated double warm_start_dual_miu = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->warm_start_dual_miu_, target);

  // repeated double optimized_dual_lambda = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(6, this->optimized_dual_lambda_, target);

  // repeated double optimized_dual_miu = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->optimized_dual_miu_, target);

  // repeated double xy_boundary = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(8, this->xy_boundary_, target);

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
  for (unsigned int i = 0, n = this->obstacles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->obstacles(i), deterministic, target);
  }

  // optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->roi_shift_point_, deterministic, target);
  }

  // optional .jmc_auto.common.TrajectoryPoint end_point = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->end_point_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->partitioned_trajectories_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->chosen_trajectory_, deterministic, target);
  }

  // optional bool is_fallback_trajectory = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_fallback_trajectory(), target);
  }

  // optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->fallback_trajectory_, deterministic, target);
  }

  // optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->trajectory_stitching_point_, deterministic, target);
  }

  // optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->future_collision_point_, deterministic, target);
  }

  // optional double time_latency = 18 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->time_latency(), target);
  }

  // optional .jmc_auto.common.PointENU origin_point = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->origin_point_, deterministic, target);
  }

  // optional double origin_heading_rad = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->origin_heading_rad(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.OpenSpaceDebug)
  return target;
}

size_t OpenSpaceDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.OpenSpaceDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double warm_start_dual_lambda = 4;
  {
    unsigned int count = this->warm_start_dual_lambda_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->warm_start_dual_lambda_size());
    total_size += data_size;
  }

  // repeated double warm_start_dual_miu = 5;
  {
    unsigned int count = this->warm_start_dual_miu_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->warm_start_dual_miu_size());
    total_size += data_size;
  }

  // repeated double optimized_dual_lambda = 6;
  {
    unsigned int count = this->optimized_dual_lambda_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->optimized_dual_lambda_size());
    total_size += data_size;
  }

  // repeated double optimized_dual_miu = 7;
  {
    unsigned int count = this->optimized_dual_miu_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->optimized_dual_miu_size());
    total_size += data_size;
  }

  // repeated double xy_boundary = 8;
  {
    unsigned int count = this->xy_boundary_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->xy_boundary_size());
    total_size += data_size;
  }

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
  {
    unsigned int count = this->obstacles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacles(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
    if (has_trajectories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectories_);
    }

    // optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
    if (has_warm_start_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->warm_start_trajectory_);
    }

    // optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
    if (has_smoothed_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smoothed_trajectory_);
    }

    // optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
    if (has_roi_shift_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_shift_point_);
    }

    // optional .jmc_auto.common.TrajectoryPoint end_point = 11;
    if (has_end_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_point_);
    }

    // optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
    if (has_partitioned_trajectories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->partitioned_trajectories_);
    }

    // optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
    if (has_chosen_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chosen_trajectory_);
    }

    // optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
    if (has_fallback_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fallback_trajectory_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
    if (has_trajectory_stitching_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_stitching_point_);
    }

    // optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
    if (has_future_collision_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->future_collision_point_);
    }

    // optional .jmc_auto.common.PointENU origin_point = 19;
    if (has_origin_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_point_);
    }

    // optional double time_latency = 18 [default = 0];
    if (has_time_latency()) {
      total_size += 2 + 8;
    }

    // optional double origin_heading_rad = 20;
    if (has_origin_heading_rad()) {
      total_size += 2 + 8;
    }

    // optional bool is_fallback_trajectory = 14;
    if (has_is_fallback_trajectory()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSpaceDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.OpenSpaceDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.OpenSpaceDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.OpenSpaceDebug)
    MergeFrom(*source);
  }
}

void OpenSpaceDebug::MergeFrom(const OpenSpaceDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.OpenSpaceDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warm_start_dual_lambda_.MergeFrom(from.warm_start_dual_lambda_);
  warm_start_dual_miu_.MergeFrom(from.warm_start_dual_miu_);
  optimized_dual_lambda_.MergeFrom(from.optimized_dual_lambda_);
  optimized_dual_miu_.MergeFrom(from.optimized_dual_miu_);
  xy_boundary_.MergeFrom(from.xy_boundary_);
  obstacles_.MergeFrom(from.obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectories()->::jmc_auto::planning_internal::Trajectories::MergeFrom(from.trajectories());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_warm_start_trajectory()->::jmc_auto::common::VehicleMotion::MergeFrom(from.warm_start_trajectory());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_smoothed_trajectory()->::jmc_auto::common::VehicleMotion::MergeFrom(from.smoothed_trajectory());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_roi_shift_point()->::jmc_auto::common::TrajectoryPoint::MergeFrom(from.roi_shift_point());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_end_point()->::jmc_auto::common::TrajectoryPoint::MergeFrom(from.end_point());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_partitioned_trajectories()->::jmc_auto::planning_internal::Trajectories::MergeFrom(from.partitioned_trajectories());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_chosen_trajectory()->::jmc_auto::planning_internal::Trajectories::MergeFrom(from.chosen_trajectory());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_fallback_trajectory()->::jmc_auto::planning_internal::Trajectories::MergeFrom(from.fallback_trajectory());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_trajectory_stitching_point()->::jmc_auto::common::TrajectoryPoint::MergeFrom(from.trajectory_stitching_point());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_future_collision_point()->::jmc_auto::common::TrajectoryPoint::MergeFrom(from.future_collision_point());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_origin_point()->::jmc_auto::common::PointENU::MergeFrom(from.origin_point());
    }
    if (cached_has_bits & 0x00000800u) {
      time_latency_ = from.time_latency_;
    }
    if (cached_has_bits & 0x00001000u) {
      origin_heading_rad_ = from.origin_heading_rad_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_fallback_trajectory_ = from.is_fallback_trajectory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.OpenSpaceDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceDebug::CopyFrom(const OpenSpaceDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.OpenSpaceDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceDebug::IsInitialized() const {
  return true;
}

void OpenSpaceDebug::Swap(OpenSpaceDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceDebug::InternalSwap(OpenSpaceDebug* other) {
  warm_start_dual_lambda_.InternalSwap(&other->warm_start_dual_lambda_);
  warm_start_dual_miu_.InternalSwap(&other->warm_start_dual_miu_);
  optimized_dual_lambda_.InternalSwap(&other->optimized_dual_lambda_);
  optimized_dual_miu_.InternalSwap(&other->optimized_dual_miu_);
  xy_boundary_.InternalSwap(&other->xy_boundary_);
  obstacles_.InternalSwap(&other->obstacles_);
  std::swap(trajectories_, other->trajectories_);
  std::swap(warm_start_trajectory_, other->warm_start_trajectory_);
  std::swap(smoothed_trajectory_, other->smoothed_trajectory_);
  std::swap(roi_shift_point_, other->roi_shift_point_);
  std::swap(end_point_, other->end_point_);
  std::swap(partitioned_trajectories_, other->partitioned_trajectories_);
  std::swap(chosen_trajectory_, other->chosen_trajectory_);
  std::swap(fallback_trajectory_, other->fallback_trajectory_);
  std::swap(trajectory_stitching_point_, other->trajectory_stitching_point_);
  std::swap(future_collision_point_, other->future_collision_point_);
  std::swap(origin_point_, other->origin_point_);
  std::swap(time_latency_, other->time_latency_);
  std::swap(origin_heading_rad_, other->origin_heading_rad_);
  std::swap(is_fallback_trajectory_, other->is_fallback_trajectory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenSpaceDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceDebug

// optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
bool OpenSpaceDebug::has_trajectories() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenSpaceDebug::set_has_trajectories() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenSpaceDebug::clear_has_trajectories() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenSpaceDebug::clear_trajectories() {
  if (trajectories_ != NULL) trajectories_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_trajectories();
}
const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::trajectories() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
  return trajectories_ != NULL ? *trajectories_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_trajectories() {
  set_has_trajectories();
  if (trajectories_ == NULL) {
    trajectories_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
  return trajectories_;
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_trajectories() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
  clear_has_trajectories();
  ::jmc_auto::planning_internal::Trajectories* temp = trajectories_;
  trajectories_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_trajectories(::jmc_auto::planning_internal::Trajectories* trajectories) {
  delete trajectories_;
  trajectories_ = trajectories;
  if (trajectories) {
    set_has_trajectories();
  } else {
    clear_has_trajectories();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
}

// optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
bool OpenSpaceDebug::has_warm_start_trajectory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpenSpaceDebug::set_has_warm_start_trajectory() {
  _has_bits_[0] |= 0x00000002u;
}
void OpenSpaceDebug::clear_has_warm_start_trajectory() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpenSpaceDebug::clear_warm_start_trajectory() {
  if (warm_start_trajectory_ != NULL) warm_start_trajectory_->::jmc_auto::common::VehicleMotion::Clear();
  clear_has_warm_start_trajectory();
}
const ::jmc_auto::common::VehicleMotion& OpenSpaceDebug::warm_start_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
  return warm_start_trajectory_ != NULL ? *warm_start_trajectory_
                         : *::jmc_auto::common::VehicleMotion::internal_default_instance();
}
::jmc_auto::common::VehicleMotion* OpenSpaceDebug::mutable_warm_start_trajectory() {
  set_has_warm_start_trajectory();
  if (warm_start_trajectory_ == NULL) {
    warm_start_trajectory_ = new ::jmc_auto::common::VehicleMotion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
  return warm_start_trajectory_;
}
::jmc_auto::common::VehicleMotion* OpenSpaceDebug::release_warm_start_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
  clear_has_warm_start_trajectory();
  ::jmc_auto::common::VehicleMotion* temp = warm_start_trajectory_;
  warm_start_trajectory_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_warm_start_trajectory(::jmc_auto::common::VehicleMotion* warm_start_trajectory) {
  delete warm_start_trajectory_;
  warm_start_trajectory_ = warm_start_trajectory;
  if (warm_start_trajectory) {
    set_has_warm_start_trajectory();
  } else {
    clear_has_warm_start_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
}

// optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
bool OpenSpaceDebug::has_smoothed_trajectory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpenSpaceDebug::set_has_smoothed_trajectory() {
  _has_bits_[0] |= 0x00000004u;
}
void OpenSpaceDebug::clear_has_smoothed_trajectory() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpenSpaceDebug::clear_smoothed_trajectory() {
  if (smoothed_trajectory_ != NULL) smoothed_trajectory_->::jmc_auto::common::VehicleMotion::Clear();
  clear_has_smoothed_trajectory();
}
const ::jmc_auto::common::VehicleMotion& OpenSpaceDebug::smoothed_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
  return smoothed_trajectory_ != NULL ? *smoothed_trajectory_
                         : *::jmc_auto::common::VehicleMotion::internal_default_instance();
}
::jmc_auto::common::VehicleMotion* OpenSpaceDebug::mutable_smoothed_trajectory() {
  set_has_smoothed_trajectory();
  if (smoothed_trajectory_ == NULL) {
    smoothed_trajectory_ = new ::jmc_auto::common::VehicleMotion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
  return smoothed_trajectory_;
}
::jmc_auto::common::VehicleMotion* OpenSpaceDebug::release_smoothed_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
  clear_has_smoothed_trajectory();
  ::jmc_auto::common::VehicleMotion* temp = smoothed_trajectory_;
  smoothed_trajectory_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_smoothed_trajectory(::jmc_auto::common::VehicleMotion* smoothed_trajectory) {
  delete smoothed_trajectory_;
  smoothed_trajectory_ = smoothed_trajectory;
  if (smoothed_trajectory) {
    set_has_smoothed_trajectory();
  } else {
    clear_has_smoothed_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
}

// repeated double warm_start_dual_lambda = 4;
int OpenSpaceDebug::warm_start_dual_lambda_size() const {
  return warm_start_dual_lambda_.size();
}
void OpenSpaceDebug::clear_warm_start_dual_lambda() {
  warm_start_dual_lambda_.Clear();
}
double OpenSpaceDebug::warm_start_dual_lambda(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
  return warm_start_dual_lambda_.Get(index);
}
void OpenSpaceDebug::set_warm_start_dual_lambda(int index, double value) {
  warm_start_dual_lambda_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
}
void OpenSpaceDebug::add_warm_start_dual_lambda(double value) {
  warm_start_dual_lambda_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
}
const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::warm_start_dual_lambda() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
  return warm_start_dual_lambda_;
}
::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_warm_start_dual_lambda() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
  return &warm_start_dual_lambda_;
}

// repeated double warm_start_dual_miu = 5;
int OpenSpaceDebug::warm_start_dual_miu_size() const {
  return warm_start_dual_miu_.size();
}
void OpenSpaceDebug::clear_warm_start_dual_miu() {
  warm_start_dual_miu_.Clear();
}
double OpenSpaceDebug::warm_start_dual_miu(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
  return warm_start_dual_miu_.Get(index);
}
void OpenSpaceDebug::set_warm_start_dual_miu(int index, double value) {
  warm_start_dual_miu_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
}
void OpenSpaceDebug::add_warm_start_dual_miu(double value) {
  warm_start_dual_miu_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
}
const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::warm_start_dual_miu() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
  return warm_start_dual_miu_;
}
::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_warm_start_dual_miu() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
  return &warm_start_dual_miu_;
}

// repeated double optimized_dual_lambda = 6;
int OpenSpaceDebug::optimized_dual_lambda_size() const {
  return optimized_dual_lambda_.size();
}
void OpenSpaceDebug::clear_optimized_dual_lambda() {
  optimized_dual_lambda_.Clear();
}
double OpenSpaceDebug::optimized_dual_lambda(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
  return optimized_dual_lambda_.Get(index);
}
void OpenSpaceDebug::set_optimized_dual_lambda(int index, double value) {
  optimized_dual_lambda_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
}
void OpenSpaceDebug::add_optimized_dual_lambda(double value) {
  optimized_dual_lambda_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
}
const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::optimized_dual_lambda() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
  return optimized_dual_lambda_;
}
::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_optimized_dual_lambda() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
  return &optimized_dual_lambda_;
}

// repeated double optimized_dual_miu = 7;
int OpenSpaceDebug::optimized_dual_miu_size() const {
  return optimized_dual_miu_.size();
}
void OpenSpaceDebug::clear_optimized_dual_miu() {
  optimized_dual_miu_.Clear();
}
double OpenSpaceDebug::optimized_dual_miu(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
  return optimized_dual_miu_.Get(index);
}
void OpenSpaceDebug::set_optimized_dual_miu(int index, double value) {
  optimized_dual_miu_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
}
void OpenSpaceDebug::add_optimized_dual_miu(double value) {
  optimized_dual_miu_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
}
const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::optimized_dual_miu() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
  return optimized_dual_miu_;
}
::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_optimized_dual_miu() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
  return &optimized_dual_miu_;
}

// repeated double xy_boundary = 8;
int OpenSpaceDebug::xy_boundary_size() const {
  return xy_boundary_.size();
}
void OpenSpaceDebug::clear_xy_boundary() {
  xy_boundary_.Clear();
}
double OpenSpaceDebug::xy_boundary(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
  return xy_boundary_.Get(index);
}
void OpenSpaceDebug::set_xy_boundary(int index, double value) {
  xy_boundary_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
}
void OpenSpaceDebug::add_xy_boundary(double value) {
  xy_boundary_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
}
const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::xy_boundary() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
  return xy_boundary_;
}
::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_xy_boundary() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
  return &xy_boundary_;
}

// repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
int OpenSpaceDebug::obstacles_size() const {
  return obstacles_.size();
}
void OpenSpaceDebug::clear_obstacles() {
  obstacles_.Clear();
}
const ::jmc_auto::planning_internal::ObstacleDebug& OpenSpaceDebug::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_.Get(index);
}
::jmc_auto::planning_internal::ObstacleDebug* OpenSpaceDebug::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_.Mutable(index);
}
::jmc_auto::planning_internal::ObstacleDebug* OpenSpaceDebug::add_obstacles() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >*
OpenSpaceDebug::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return &obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >&
OpenSpaceDebug::obstacles() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_;
}

// optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
bool OpenSpaceDebug::has_roi_shift_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpenSpaceDebug::set_has_roi_shift_point() {
  _has_bits_[0] |= 0x00000008u;
}
void OpenSpaceDebug::clear_has_roi_shift_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpenSpaceDebug::clear_roi_shift_point() {
  if (roi_shift_point_ != NULL) roi_shift_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_roi_shift_point();
}
const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::roi_shift_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
  return roi_shift_point_ != NULL ? *roi_shift_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_roi_shift_point() {
  set_has_roi_shift_point();
  if (roi_shift_point_ == NULL) {
    roi_shift_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
  return roi_shift_point_;
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_roi_shift_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
  clear_has_roi_shift_point();
  ::jmc_auto::common::TrajectoryPoint* temp = roi_shift_point_;
  roi_shift_point_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_roi_shift_point(::jmc_auto::common::TrajectoryPoint* roi_shift_point) {
  delete roi_shift_point_;
  roi_shift_point_ = roi_shift_point;
  if (roi_shift_point) {
    set_has_roi_shift_point();
  } else {
    clear_has_roi_shift_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
}

// optional .jmc_auto.common.TrajectoryPoint end_point = 11;
bool OpenSpaceDebug::has_end_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpenSpaceDebug::set_has_end_point() {
  _has_bits_[0] |= 0x00000010u;
}
void OpenSpaceDebug::clear_has_end_point() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpenSpaceDebug::clear_end_point() {
  if (end_point_ != NULL) end_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_end_point();
}
const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::end_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
  return end_point_ != NULL ? *end_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_end_point() {
  set_has_end_point();
  if (end_point_ == NULL) {
    end_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
  return end_point_;
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_end_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
  clear_has_end_point();
  ::jmc_auto::common::TrajectoryPoint* temp = end_point_;
  end_point_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_end_point(::jmc_auto::common::TrajectoryPoint* end_point) {
  delete end_point_;
  end_point_ = end_point;
  if (end_point) {
    set_has_end_point();
  } else {
    clear_has_end_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
}

// optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
bool OpenSpaceDebug::has_partitioned_trajectories() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpenSpaceDebug::set_has_partitioned_trajectories() {
  _has_bits_[0] |= 0x00000020u;
}
void OpenSpaceDebug::clear_has_partitioned_trajectories() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpenSpaceDebug::clear_partitioned_trajectories() {
  if (partitioned_trajectories_ != NULL) partitioned_trajectories_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_partitioned_trajectories();
}
const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::partitioned_trajectories() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
  return partitioned_trajectories_ != NULL ? *partitioned_trajectories_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_partitioned_trajectories() {
  set_has_partitioned_trajectories();
  if (partitioned_trajectories_ == NULL) {
    partitioned_trajectories_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
  return partitioned_trajectories_;
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_partitioned_trajectories() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
  clear_has_partitioned_trajectories();
  ::jmc_auto::planning_internal::Trajectories* temp = partitioned_trajectories_;
  partitioned_trajectories_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_partitioned_trajectories(::jmc_auto::planning_internal::Trajectories* partitioned_trajectories) {
  delete partitioned_trajectories_;
  partitioned_trajectories_ = partitioned_trajectories;
  if (partitioned_trajectories) {
    set_has_partitioned_trajectories();
  } else {
    clear_has_partitioned_trajectories();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
}

// optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
bool OpenSpaceDebug::has_chosen_trajectory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpenSpaceDebug::set_has_chosen_trajectory() {
  _has_bits_[0] |= 0x00000040u;
}
void OpenSpaceDebug::clear_has_chosen_trajectory() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpenSpaceDebug::clear_chosen_trajectory() {
  if (chosen_trajectory_ != NULL) chosen_trajectory_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_chosen_trajectory();
}
const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::chosen_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
  return chosen_trajectory_ != NULL ? *chosen_trajectory_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_chosen_trajectory() {
  set_has_chosen_trajectory();
  if (chosen_trajectory_ == NULL) {
    chosen_trajectory_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
  return chosen_trajectory_;
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_chosen_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
  clear_has_chosen_trajectory();
  ::jmc_auto::planning_internal::Trajectories* temp = chosen_trajectory_;
  chosen_trajectory_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_chosen_trajectory(::jmc_auto::planning_internal::Trajectories* chosen_trajectory) {
  delete chosen_trajectory_;
  chosen_trajectory_ = chosen_trajectory;
  if (chosen_trajectory) {
    set_has_chosen_trajectory();
  } else {
    clear_has_chosen_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
}

// optional bool is_fallback_trajectory = 14;
bool OpenSpaceDebug::has_is_fallback_trajectory() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OpenSpaceDebug::set_has_is_fallback_trajectory() {
  _has_bits_[0] |= 0x00002000u;
}
void OpenSpaceDebug::clear_has_is_fallback_trajectory() {
  _has_bits_[0] &= ~0x00002000u;
}
void OpenSpaceDebug::clear_is_fallback_trajectory() {
  is_fallback_trajectory_ = false;
  clear_has_is_fallback_trajectory();
}
bool OpenSpaceDebug::is_fallback_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.is_fallback_trajectory)
  return is_fallback_trajectory_;
}
void OpenSpaceDebug::set_is_fallback_trajectory(bool value) {
  set_has_is_fallback_trajectory();
  is_fallback_trajectory_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.is_fallback_trajectory)
}

// optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
bool OpenSpaceDebug::has_fallback_trajectory() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpenSpaceDebug::set_has_fallback_trajectory() {
  _has_bits_[0] |= 0x00000080u;
}
void OpenSpaceDebug::clear_has_fallback_trajectory() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpenSpaceDebug::clear_fallback_trajectory() {
  if (fallback_trajectory_ != NULL) fallback_trajectory_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_fallback_trajectory();
}
const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::fallback_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
  return fallback_trajectory_ != NULL ? *fallback_trajectory_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_fallback_trajectory() {
  set_has_fallback_trajectory();
  if (fallback_trajectory_ == NULL) {
    fallback_trajectory_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
  return fallback_trajectory_;
}
::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_fallback_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
  clear_has_fallback_trajectory();
  ::jmc_auto::planning_internal::Trajectories* temp = fallback_trajectory_;
  fallback_trajectory_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_fallback_trajectory(::jmc_auto::planning_internal::Trajectories* fallback_trajectory) {
  delete fallback_trajectory_;
  fallback_trajectory_ = fallback_trajectory;
  if (fallback_trajectory) {
    set_has_fallback_trajectory();
  } else {
    clear_has_fallback_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
}

// optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
bool OpenSpaceDebug::has_trajectory_stitching_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpenSpaceDebug::set_has_trajectory_stitching_point() {
  _has_bits_[0] |= 0x00000100u;
}
void OpenSpaceDebug::clear_has_trajectory_stitching_point() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpenSpaceDebug::clear_trajectory_stitching_point() {
  if (trajectory_stitching_point_ != NULL) trajectory_stitching_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_trajectory_stitching_point();
}
const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::trajectory_stitching_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
  return trajectory_stitching_point_ != NULL ? *trajectory_stitching_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_trajectory_stitching_point() {
  set_has_trajectory_stitching_point();
  if (trajectory_stitching_point_ == NULL) {
    trajectory_stitching_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
  return trajectory_stitching_point_;
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_trajectory_stitching_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
  clear_has_trajectory_stitching_point();
  ::jmc_auto::common::TrajectoryPoint* temp = trajectory_stitching_point_;
  trajectory_stitching_point_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_trajectory_stitching_point(::jmc_auto::common::TrajectoryPoint* trajectory_stitching_point) {
  delete trajectory_stitching_point_;
  trajectory_stitching_point_ = trajectory_stitching_point;
  if (trajectory_stitching_point) {
    set_has_trajectory_stitching_point();
  } else {
    clear_has_trajectory_stitching_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
}

// optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
bool OpenSpaceDebug::has_future_collision_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpenSpaceDebug::set_has_future_collision_point() {
  _has_bits_[0] |= 0x00000200u;
}
void OpenSpaceDebug::clear_has_future_collision_point() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpenSpaceDebug::clear_future_collision_point() {
  if (future_collision_point_ != NULL) future_collision_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_future_collision_point();
}
const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::future_collision_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
  return future_collision_point_ != NULL ? *future_collision_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_future_collision_point() {
  set_has_future_collision_point();
  if (future_collision_point_ == NULL) {
    future_collision_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
  return future_collision_point_;
}
::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_future_collision_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
  clear_has_future_collision_point();
  ::jmc_auto::common::TrajectoryPoint* temp = future_collision_point_;
  future_collision_point_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_future_collision_point(::jmc_auto::common::TrajectoryPoint* future_collision_point) {
  delete future_collision_point_;
  future_collision_point_ = future_collision_point;
  if (future_collision_point) {
    set_has_future_collision_point();
  } else {
    clear_has_future_collision_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
}

// optional double time_latency = 18 [default = 0];
bool OpenSpaceDebug::has_time_latency() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OpenSpaceDebug::set_has_time_latency() {
  _has_bits_[0] |= 0x00000800u;
}
void OpenSpaceDebug::clear_has_time_latency() {
  _has_bits_[0] &= ~0x00000800u;
}
void OpenSpaceDebug::clear_time_latency() {
  time_latency_ = 0;
  clear_has_time_latency();
}
double OpenSpaceDebug::time_latency() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.time_latency)
  return time_latency_;
}
void OpenSpaceDebug::set_time_latency(double value) {
  set_has_time_latency();
  time_latency_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.time_latency)
}

// optional .jmc_auto.common.PointENU origin_point = 19;
bool OpenSpaceDebug::has_origin_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OpenSpaceDebug::set_has_origin_point() {
  _has_bits_[0] |= 0x00000400u;
}
void OpenSpaceDebug::clear_has_origin_point() {
  _has_bits_[0] &= ~0x00000400u;
}
void OpenSpaceDebug::clear_origin_point() {
  if (origin_point_ != NULL) origin_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_origin_point();
}
const ::jmc_auto::common::PointENU& OpenSpaceDebug::origin_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
  return origin_point_ != NULL ? *origin_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* OpenSpaceDebug::mutable_origin_point() {
  set_has_origin_point();
  if (origin_point_ == NULL) {
    origin_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
  return origin_point_;
}
::jmc_auto::common::PointENU* OpenSpaceDebug::release_origin_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
  clear_has_origin_point();
  ::jmc_auto::common::PointENU* temp = origin_point_;
  origin_point_ = NULL;
  return temp;
}
void OpenSpaceDebug::set_allocated_origin_point(::jmc_auto::common::PointENU* origin_point) {
  delete origin_point_;
  origin_point_ = origin_point;
  if (origin_point) {
    set_has_origin_point();
  } else {
    clear_has_origin_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
}

// optional double origin_heading_rad = 20;
bool OpenSpaceDebug::has_origin_heading_rad() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OpenSpaceDebug::set_has_origin_heading_rad() {
  _has_bits_[0] |= 0x00001000u;
}
void OpenSpaceDebug::clear_has_origin_heading_rad() {
  _has_bits_[0] &= ~0x00001000u;
}
void OpenSpaceDebug::clear_origin_heading_rad() {
  origin_heading_rad_ = 0;
  clear_has_origin_heading_rad();
}
double OpenSpaceDebug::origin_heading_rad() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.origin_heading_rad)
  return origin_heading_rad_;
}
void OpenSpaceDebug::set_origin_heading_rad(double value) {
  set_has_origin_heading_rad();
  origin_heading_rad_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.origin_heading_rad)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmootherDebug::kIsSmoothedFieldNumber;
const int SmootherDebug::kTypeFieldNumber;
const int SmootherDebug::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmootherDebug::SmootherDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.SmootherDebug)
}
SmootherDebug::SmootherDebug(const SmootherDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&is_smoothed_, &from.is_smoothed_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&is_smoothed_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.SmootherDebug)
}

void SmootherDebug::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_smoothed_ = false;
  type_ = 1;
}

SmootherDebug::~SmootherDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.SmootherDebug)
  SharedDtor();
}

void SmootherDebug::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SmootherDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmootherDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmootherDebug& SmootherDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SmootherDebug* SmootherDebug::New(::google::protobuf::Arena* arena) const {
  SmootherDebug* n = new SmootherDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmootherDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.SmootherDebug)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    is_smoothed_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SmootherDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.SmootherDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_smoothed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_smoothed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_smoothed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning_internal::SmootherDebug_SmootherType_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::planning_internal::SmootherDebug_SmootherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.SmootherDebug.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.SmootherDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.SmootherDebug)
  return false;
#undef DO_
}

void SmootherDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.SmootherDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_smoothed = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_smoothed(), output);
  }

  // optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SmootherDebug.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.SmootherDebug)
}

::google::protobuf::uint8* SmootherDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.SmootherDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_smoothed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_smoothed(), target);
  }

  // optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.SmootherDebug.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.SmootherDebug)
  return target;
}

size_t SmootherDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.SmootherDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool is_smoothed = 1;
    if (has_is_smoothed()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmootherDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.SmootherDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SmootherDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmootherDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.SmootherDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.SmootherDebug)
    MergeFrom(*source);
  }
}

void SmootherDebug::MergeFrom(const SmootherDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.SmootherDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_smoothed_ = from.is_smoothed_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SmootherDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.SmootherDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmootherDebug::CopyFrom(const SmootherDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.SmootherDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmootherDebug::IsInitialized() const {
  return true;
}

void SmootherDebug::Swap(SmootherDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmootherDebug::InternalSwap(SmootherDebug* other) {
  reason_.Swap(&other->reason_);
  std::swap(is_smoothed_, other->is_smoothed_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmootherDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmootherDebug

// optional bool is_smoothed = 1;
bool SmootherDebug::has_is_smoothed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SmootherDebug::set_has_is_smoothed() {
  _has_bits_[0] |= 0x00000002u;
}
void SmootherDebug::clear_has_is_smoothed() {
  _has_bits_[0] &= ~0x00000002u;
}
void SmootherDebug::clear_is_smoothed() {
  is_smoothed_ = false;
  clear_has_is_smoothed();
}
bool SmootherDebug::is_smoothed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SmootherDebug.is_smoothed)
  return is_smoothed_;
}
void SmootherDebug::set_is_smoothed(bool value) {
  set_has_is_smoothed();
  is_smoothed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SmootherDebug.is_smoothed)
}

// optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
bool SmootherDebug::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SmootherDebug::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SmootherDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SmootherDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
::jmc_auto::planning_internal::SmootherDebug_SmootherType SmootherDebug::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SmootherDebug.type)
  return static_cast< ::jmc_auto::planning_internal::SmootherDebug_SmootherType >(type_);
}
void SmootherDebug::set_type(::jmc_auto::planning_internal::SmootherDebug_SmootherType value) {
  assert(::jmc_auto::planning_internal::SmootherDebug_SmootherType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SmootherDebug.type)
}

// optional string reason = 3;
bool SmootherDebug::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SmootherDebug::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void SmootherDebug::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void SmootherDebug::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& SmootherDebug::reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SmootherDebug.reason)
  return reason_.GetNoArena();
}
void SmootherDebug::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SmootherDebug.reason)
}
#if LANG_CXX11
void SmootherDebug::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SmootherDebug.reason)
}
#endif
void SmootherDebug::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SmootherDebug.reason)
}
void SmootherDebug::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SmootherDebug.reason)
}
::std::string* SmootherDebug::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SmootherDebug.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SmootherDebug::release_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SmootherDebug.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SmootherDebug::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SmootherDebug.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullOverDebug::kPositionFieldNumber;
const int PullOverDebug::kThetaFieldNumber;
const int PullOverDebug::kLengthFrontFieldNumber;
const int PullOverDebug::kLengthBackFieldNumber;
const int PullOverDebug::kWidthLeftFieldNumber;
const int PullOverDebug::kWidthRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullOverDebug::PullOverDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.PullOverDebug)
}
PullOverDebug::PullOverDebug(const PullOverDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::PointENU(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&theta_, &from.theta_,
    reinterpret_cast<char*>(&width_right_) -
    reinterpret_cast<char*>(&theta_) + sizeof(width_right_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.PullOverDebug)
}

void PullOverDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&width_right_) -
    reinterpret_cast<char*>(&position_) + sizeof(width_right_));
}

PullOverDebug::~PullOverDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.PullOverDebug)
  SharedDtor();
}

void PullOverDebug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void PullOverDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullOverDebug::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PullOverDebug& PullOverDebug::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

PullOverDebug* PullOverDebug::New(::google::protobuf::Arena* arena) const {
  PullOverDebug* n = new PullOverDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PullOverDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.PullOverDebug)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::jmc_auto::common::PointENU::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&theta_, 0, reinterpret_cast<char*>(&width_right_) -
      reinterpret_cast<char*>(&theta_) + sizeof(width_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PullOverDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.PullOverDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.PointENU position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length_front = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_length_front();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length_back = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_length_back();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_width_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width_right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_width_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.PullOverDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.PullOverDebug)
  return false;
#undef DO_
}

void PullOverDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.PullOverDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional double theta = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->theta(), output);
  }

  // optional double length_front = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->length_front(), output);
  }

  // optional double length_back = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->length_back(), output);
  }

  // optional double width_left = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->width_left(), output);
  }

  // optional double width_right = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.PullOverDebug)
}

::google::protobuf::uint8* PullOverDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.PullOverDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.PointENU position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // optional double theta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->theta(), target);
  }

  // optional double length_front = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->length_front(), target);
  }

  // optional double length_back = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->length_back(), target);
  }

  // optional double width_left = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->width_left(), target);
  }

  // optional double width_right = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.PullOverDebug)
  return target;
}

size_t PullOverDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.PullOverDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.common.PointENU position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional double theta = 2;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length_front = 3;
    if (has_length_front()) {
      total_size += 1 + 8;
    }

    // optional double length_back = 4;
    if (has_length_back()) {
      total_size += 1 + 8;
    }

    // optional double width_left = 5;
    if (has_width_left()) {
      total_size += 1 + 8;
    }

    // optional double width_right = 6;
    if (has_width_right()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullOverDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.PullOverDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const PullOverDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullOverDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.PullOverDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.PullOverDebug)
    MergeFrom(*source);
  }
}

void PullOverDebug::MergeFrom(const PullOverDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.PullOverDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::jmc_auto::common::PointENU::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_front_ = from.length_front_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_back_ = from.length_back_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_left_ = from.width_left_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_right_ = from.width_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PullOverDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.PullOverDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullOverDebug::CopyFrom(const PullOverDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.PullOverDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullOverDebug::IsInitialized() const {
  return true;
}

void PullOverDebug::Swap(PullOverDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PullOverDebug::InternalSwap(PullOverDebug* other) {
  std::swap(position_, other->position_);
  std::swap(theta_, other->theta_);
  std::swap(length_front_, other->length_front_);
  std::swap(length_back_, other->length_back_);
  std::swap(width_left_, other->width_left_);
  std::swap(width_right_, other->width_right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullOverDebug::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PullOverDebug

// optional .jmc_auto.common.PointENU position = 1;
bool PullOverDebug::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PullOverDebug::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PullOverDebug::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PullOverDebug::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::PointENU::Clear();
  clear_has_position();
}
const ::jmc_auto::common::PointENU& PullOverDebug::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* PullOverDebug::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PullOverDebug.position)
  return position_;
}
::jmc_auto::common::PointENU* PullOverDebug::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PullOverDebug.position)
  clear_has_position();
  ::jmc_auto::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
void PullOverDebug::set_allocated_position(::jmc_auto::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PullOverDebug.position)
}

// optional double theta = 2;
bool PullOverDebug::has_theta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PullOverDebug::set_has_theta() {
  _has_bits_[0] |= 0x00000002u;
}
void PullOverDebug::clear_has_theta() {
  _has_bits_[0] &= ~0x00000002u;
}
void PullOverDebug::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PullOverDebug::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.theta)
  return theta_;
}
void PullOverDebug::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.theta)
}

// optional double length_front = 3;
bool PullOverDebug::has_length_front() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PullOverDebug::set_has_length_front() {
  _has_bits_[0] |= 0x00000004u;
}
void PullOverDebug::clear_has_length_front() {
  _has_bits_[0] &= ~0x00000004u;
}
void PullOverDebug::clear_length_front() {
  length_front_ = 0;
  clear_has_length_front();
}
double PullOverDebug::length_front() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.length_front)
  return length_front_;
}
void PullOverDebug::set_length_front(double value) {
  set_has_length_front();
  length_front_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.length_front)
}

// optional double length_back = 4;
bool PullOverDebug::has_length_back() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PullOverDebug::set_has_length_back() {
  _has_bits_[0] |= 0x00000008u;
}
void PullOverDebug::clear_has_length_back() {
  _has_bits_[0] &= ~0x00000008u;
}
void PullOverDebug::clear_length_back() {
  length_back_ = 0;
  clear_has_length_back();
}
double PullOverDebug::length_back() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.length_back)
  return length_back_;
}
void PullOverDebug::set_length_back(double value) {
  set_has_length_back();
  length_back_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.length_back)
}

// optional double width_left = 5;
bool PullOverDebug::has_width_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PullOverDebug::set_has_width_left() {
  _has_bits_[0] |= 0x00000010u;
}
void PullOverDebug::clear_has_width_left() {
  _has_bits_[0] &= ~0x00000010u;
}
void PullOverDebug::clear_width_left() {
  width_left_ = 0;
  clear_has_width_left();
}
double PullOverDebug::width_left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.width_left)
  return width_left_;
}
void PullOverDebug::set_width_left(double value) {
  set_has_width_left();
  width_left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.width_left)
}

// optional double width_right = 6;
bool PullOverDebug::has_width_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PullOverDebug::set_has_width_right() {
  _has_bits_[0] |= 0x00000020u;
}
void PullOverDebug::clear_has_width_right() {
  _has_bits_[0] &= ~0x00000020u;
}
void PullOverDebug::clear_width_right() {
  width_right_ = 0;
  clear_has_width_right();
}
double PullOverDebug::width_right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.width_right)
  return width_right_;
}
void PullOverDebug::set_width_right(double value) {
  set_has_width_right();
  width_right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.width_right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningData::kAdcPositionFieldNumber;
const int PlanningData::kChassisFieldNumber;
const int PlanningData::kRoutingFieldNumber;
const int PlanningData::kInitPointFieldNumber;
const int PlanningData::kPathFieldNumber;
const int PlanningData::kSpeedPlanFieldNumber;
const int PlanningData::kStGraphFieldNumber;
const int PlanningData::kSlFrameFieldNumber;
const int PlanningData::kPredictionHeaderFieldNumber;
const int PlanningData::kSignalLightFieldNumber;
const int PlanningData::kObstacleFieldNumber;
const int PlanningData::kReferenceLineFieldNumber;
const int PlanningData::kDpPolyGraphFieldNumber;
const int PlanningData::kLatticeStImageFieldNumber;
const int PlanningData::kRelativeMapFieldNumber;
const int PlanningData::kAutoTuningTrainingDataFieldNumber;
const int PlanningData::kFrontClearDistanceFieldNumber;
const int PlanningData::kChartFieldNumber;
const int PlanningData::kScenarioFieldNumber;
const int PlanningData::kOpenSpaceFieldNumber;
const int PlanningData::kSmootherFieldNumber;
const int PlanningData::kPullOverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningData::PlanningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.PlanningData)
}
PlanningData::PlanningData(const PlanningData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      path_(from.path_),
      speed_plan_(from.speed_plan_),
      st_graph_(from.st_graph_),
      sl_frame_(from.sl_frame_),
      obstacle_(from.obstacle_),
      reference_line_(from.reference_line_),
      chart_(from.chart_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_adc_position()) {
    adc_position_ = new ::jmc_auto::localization::LocalizationEstimate(*from.adc_position_);
  } else {
    adc_position_ = NULL;
  }
  if (from.has_chassis()) {
    chassis_ = new ::jmc_auto::canbus::Chassis(*from.chassis_);
  } else {
    chassis_ = NULL;
  }
  if (from.has_routing()) {
    routing_ = new ::jmc_auto::routing::RoutingResponse(*from.routing_);
  } else {
    routing_ = NULL;
  }
  if (from.has_init_point()) {
    init_point_ = new ::jmc_auto::common::TrajectoryPoint(*from.init_point_);
  } else {
    init_point_ = NULL;
  }
  if (from.has_prediction_header()) {
    prediction_header_ = new ::jmc_auto::common::Header(*from.prediction_header_);
  } else {
    prediction_header_ = NULL;
  }
  if (from.has_signal_light()) {
    signal_light_ = new ::jmc_auto::planning_internal::SignalLightDebug(*from.signal_light_);
  } else {
    signal_light_ = NULL;
  }
  if (from.has_dp_poly_graph()) {
    dp_poly_graph_ = new ::jmc_auto::planning_internal::DpPolyGraphDebug(*from.dp_poly_graph_);
  } else {
    dp_poly_graph_ = NULL;
  }
  if (from.has_lattice_st_image()) {
    lattice_st_image_ = new ::jmc_auto::planning_internal::LatticeStTraining(*from.lattice_st_image_);
  } else {
    lattice_st_image_ = NULL;
  }
  if (from.has_relative_map()) {
    relative_map_ = new ::jmc_auto::relative_map::MapMsg(*from.relative_map_);
  } else {
    relative_map_ = NULL;
  }
  if (from.has_auto_tuning_training_data()) {
    auto_tuning_training_data_ = new ::jmc_auto::planning_internal::AutoTuningTrainingData(*from.auto_tuning_training_data_);
  } else {
    auto_tuning_training_data_ = NULL;
  }
  if (from.has_scenario()) {
    scenario_ = new ::jmc_auto::planning_internal::ScenarioDebug(*from.scenario_);
  } else {
    scenario_ = NULL;
  }
  if (from.has_open_space()) {
    open_space_ = new ::jmc_auto::planning_internal::OpenSpaceDebug(*from.open_space_);
  } else {
    open_space_ = NULL;
  }
  if (from.has_smoother()) {
    smoother_ = new ::jmc_auto::planning_internal::SmootherDebug(*from.smoother_);
  } else {
    smoother_ = NULL;
  }
  if (from.has_pull_over()) {
    pull_over_ = new ::jmc_auto::planning_internal::PullOverDebug(*from.pull_over_);
  } else {
    pull_over_ = NULL;
  }
  front_clear_distance_ = from.front_clear_distance_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.PlanningData)
}

void PlanningData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&adc_position_, 0, reinterpret_cast<char*>(&front_clear_distance_) -
    reinterpret_cast<char*>(&adc_position_) + sizeof(front_clear_distance_));
}

PlanningData::~PlanningData() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.PlanningData)
  SharedDtor();
}

void PlanningData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete adc_position_;
  }
  if (this != internal_default_instance()) {
    delete chassis_;
  }
  if (this != internal_default_instance()) {
    delete routing_;
  }
  if (this != internal_default_instance()) {
    delete init_point_;
  }
  if (this != internal_default_instance()) {
    delete prediction_header_;
  }
  if (this != internal_default_instance()) {
    delete signal_light_;
  }
  if (this != internal_default_instance()) {
    delete dp_poly_graph_;
  }
  if (this != internal_default_instance()) {
    delete lattice_st_image_;
  }
  if (this != internal_default_instance()) {
    delete relative_map_;
  }
  if (this != internal_default_instance()) {
    delete auto_tuning_training_data_;
  }
  if (this != internal_default_instance()) {
    delete scenario_;
  }
  if (this != internal_default_instance()) {
    delete open_space_;
  }
  if (this != internal_default_instance()) {
    delete smoother_;
  }
  if (this != internal_default_instance()) {
    delete pull_over_;
  }
}

void PlanningData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningData::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningData& PlanningData::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningData* PlanningData::New(::google::protobuf::Arena* arena) const {
  PlanningData* n = new PlanningData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningData::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.PlanningData)
  path_.Clear();
  speed_plan_.Clear();
  st_graph_.Clear();
  sl_frame_.Clear();
  obstacle_.Clear();
  reference_line_.Clear();
  chart_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_adc_position()) {
      GOOGLE_DCHECK(adc_position_ != NULL);
      adc_position_->::jmc_auto::localization::LocalizationEstimate::Clear();
    }
    if (has_chassis()) {
      GOOGLE_DCHECK(chassis_ != NULL);
      chassis_->::jmc_auto::canbus::Chassis::Clear();
    }
    if (has_routing()) {
      GOOGLE_DCHECK(routing_ != NULL);
      routing_->::jmc_auto::routing::RoutingResponse::Clear();
    }
    if (has_init_point()) {
      GOOGLE_DCHECK(init_point_ != NULL);
      init_point_->::jmc_auto::common::TrajectoryPoint::Clear();
    }
    if (has_prediction_header()) {
      GOOGLE_DCHECK(prediction_header_ != NULL);
      prediction_header_->::jmc_auto::common::Header::Clear();
    }
    if (has_signal_light()) {
      GOOGLE_DCHECK(signal_light_ != NULL);
      signal_light_->::jmc_auto::planning_internal::SignalLightDebug::Clear();
    }
    if (has_dp_poly_graph()) {
      GOOGLE_DCHECK(dp_poly_graph_ != NULL);
      dp_poly_graph_->::jmc_auto::planning_internal::DpPolyGraphDebug::Clear();
    }
    if (has_lattice_st_image()) {
      GOOGLE_DCHECK(lattice_st_image_ != NULL);
      lattice_st_image_->::jmc_auto::planning_internal::LatticeStTraining::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_relative_map()) {
      GOOGLE_DCHECK(relative_map_ != NULL);
      relative_map_->::jmc_auto::relative_map::MapMsg::Clear();
    }
    if (has_auto_tuning_training_data()) {
      GOOGLE_DCHECK(auto_tuning_training_data_ != NULL);
      auto_tuning_training_data_->::jmc_auto::planning_internal::AutoTuningTrainingData::Clear();
    }
    if (has_scenario()) {
      GOOGLE_DCHECK(scenario_ != NULL);
      scenario_->::jmc_auto::planning_internal::ScenarioDebug::Clear();
    }
    if (has_open_space()) {
      GOOGLE_DCHECK(open_space_ != NULL);
      open_space_->::jmc_auto::planning_internal::OpenSpaceDebug::Clear();
    }
    if (has_smoother()) {
      GOOGLE_DCHECK(smoother_ != NULL);
      smoother_->::jmc_auto::planning_internal::SmootherDebug::Clear();
    }
    if (has_pull_over()) {
      GOOGLE_DCHECK(pull_over_ != NULL);
      pull_over_->::jmc_auto::planning_internal::PullOverDebug::Clear();
    }
  }
  front_clear_distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.PlanningData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.Path path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adc_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis chassis = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.RoutingResponse routing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.TrajectoryPoint init_point = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_st_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sl_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Header prediction_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prediction_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reference_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dp_poly_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lattice_st_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.relative_map.MapMsg relative_map = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_tuning_training_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_clear_distance = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_front_clear_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_clear_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.dreamview.Chart chart = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenario()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smoother()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull_over()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.PlanningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.PlanningData)
  return false;
#undef DO_
}

void PlanningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.PlanningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Path path = 6;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->path(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->adc_position_, output);
  }

  // optional .jmc_auto.canbus.Chassis chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->chassis_, output);
  }

  // optional .jmc_auto.routing.RoutingResponse routing = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->routing_, output);
  }

  // optional .jmc_auto.common.TrajectoryPoint init_point = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->init_point_, output);
  }

  // repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0, n = this->speed_plan_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->speed_plan(i), output);
  }

  // repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0, n = this->st_graph_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->st_graph(i), output);
  }

  // repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0, n = this->sl_frame_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sl_frame(i), output);
  }

  // optional .jmc_auto.common.Header prediction_header = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->prediction_header_, output);
  }

  // optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->signal_light_, output);
  }

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->obstacle(i), output);
  }

  // repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0, n = this->reference_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->reference_line(i), output);
  }

  // optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->dp_poly_graph_, output);
  }

  // optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->lattice_st_image_, output);
  }

  // optional .jmc_auto.relative_map.MapMsg relative_map = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->relative_map_, output);
  }

  // optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->auto_tuning_training_data_, output);
  }

  // optional double front_clear_distance = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->front_clear_distance(), output);
  }

  // repeated .jmc_auto.dreamview.Chart chart = 25;
  for (unsigned int i = 0, n = this->chart_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->chart(i), output);
  }

  // optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->scenario_, output);
  }

  // optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->open_space_, output);
  }

  // optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->smoother_, output);
  }

  // optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->pull_over_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.PlanningData)
}

::google::protobuf::uint8* PlanningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.PlanningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Path path = 6;
  for (unsigned int i = 0, n = this->path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->path(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->adc_position_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Chassis chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->chassis_, deterministic, target);
  }

  // optional .jmc_auto.routing.RoutingResponse routing = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->routing_, deterministic, target);
  }

  // optional .jmc_auto.common.TrajectoryPoint init_point = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->init_point_, deterministic, target);
  }

  // repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0, n = this->speed_plan_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->speed_plan(i), deterministic, target);
  }

  // repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0, n = this->st_graph_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->st_graph(i), deterministic, target);
  }

  // repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0, n = this->sl_frame_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->sl_frame(i), deterministic, target);
  }

  // optional .jmc_auto.common.Header prediction_header = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->prediction_header_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->signal_light_, deterministic, target);
  }

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->obstacle(i), deterministic, target);
  }

  // repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0, n = this->reference_line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->reference_line(i), deterministic, target);
  }

  // optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->dp_poly_graph_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->lattice_st_image_, deterministic, target);
  }

  // optional .jmc_auto.relative_map.MapMsg relative_map = 22;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->relative_map_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->auto_tuning_training_data_, deterministic, target);
  }

  // optional double front_clear_distance = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->front_clear_distance(), target);
  }

  // repeated .jmc_auto.dreamview.Chart chart = 25;
  for (unsigned int i = 0, n = this->chart_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->chart(i), deterministic, target);
  }

  // optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->scenario_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->open_space_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->smoother_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->pull_over_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.PlanningData)
  return target;
}

size_t PlanningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.PlanningData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Path path = 6;
  {
    unsigned int count = this->path_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path(i));
    }
  }

  // repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
  {
    unsigned int count = this->speed_plan_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_plan(i));
    }
  }

  // repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
  {
    unsigned int count = this->st_graph_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st_graph(i));
    }
  }

  // repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
  {
    unsigned int count = this->sl_frame_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sl_frame(i));
    }
  }

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
  {
    unsigned int count = this->obstacle_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle(i));
    }
  }

  // repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
  {
    unsigned int count = this->reference_line_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_line(i));
    }
  }

  // repeated .jmc_auto.dreamview.Chart chart = 25;
  {
    unsigned int count = this->chart_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
    if (has_adc_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adc_position_);
    }

    // optional .jmc_auto.canbus.Chassis chassis = 8;
    if (has_chassis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_);
    }

    // optional .jmc_auto.routing.RoutingResponse routing = 9;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_);
    }

    // optional .jmc_auto.common.TrajectoryPoint init_point = 10;
    if (has_init_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->init_point_);
    }

    // optional .jmc_auto.common.Header prediction_header = 16;
    if (has_prediction_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prediction_header_);
    }

    // optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
    if (has_signal_light()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_light_);
    }

    // optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
    if (has_dp_poly_graph()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dp_poly_graph_);
    }

    // optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
    if (has_lattice_st_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lattice_st_image_);
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .jmc_auto.relative_map.MapMsg relative_map = 22;
    if (has_relative_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relative_map_);
    }

    // optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
    if (has_auto_tuning_training_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->auto_tuning_training_data_);
    }

    // optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
    if (has_scenario()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scenario_);
    }

    // optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
    if (has_open_space()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->open_space_);
    }

    // optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
    if (has_smoother()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->smoother_);
    }

    // optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
    if (has_pull_over()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pull_over_);
    }

    // optional double front_clear_distance = 24;
    if (has_front_clear_distance()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.PlanningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.PlanningData)
    MergeFrom(*source);
  }
}

void PlanningData::MergeFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  speed_plan_.MergeFrom(from.speed_plan_);
  st_graph_.MergeFrom(from.st_graph_);
  sl_frame_.MergeFrom(from.sl_frame_);
  obstacle_.MergeFrom(from.obstacle_);
  reference_line_.MergeFrom(from.reference_line_);
  chart_.MergeFrom(from.chart_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_adc_position()->::jmc_auto::localization::LocalizationEstimate::MergeFrom(from.adc_position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chassis()->::jmc_auto::canbus::Chassis::MergeFrom(from.chassis());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_routing()->::jmc_auto::routing::RoutingResponse::MergeFrom(from.routing());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_init_point()->::jmc_auto::common::TrajectoryPoint::MergeFrom(from.init_point());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_prediction_header()->::jmc_auto::common::Header::MergeFrom(from.prediction_header());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_signal_light()->::jmc_auto::planning_internal::SignalLightDebug::MergeFrom(from.signal_light());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dp_poly_graph()->::jmc_auto::planning_internal::DpPolyGraphDebug::MergeFrom(from.dp_poly_graph());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_lattice_st_image()->::jmc_auto::planning_internal::LatticeStTraining::MergeFrom(from.lattice_st_image());
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_relative_map()->::jmc_auto::relative_map::MapMsg::MergeFrom(from.relative_map());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_auto_tuning_training_data()->::jmc_auto::planning_internal::AutoTuningTrainingData::MergeFrom(from.auto_tuning_training_data());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_scenario()->::jmc_auto::planning_internal::ScenarioDebug::MergeFrom(from.scenario());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_open_space()->::jmc_auto::planning_internal::OpenSpaceDebug::MergeFrom(from.open_space());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_smoother()->::jmc_auto::planning_internal::SmootherDebug::MergeFrom(from.smoother());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_pull_over()->::jmc_auto::planning_internal::PullOverDebug::MergeFrom(from.pull_over());
    }
    if (cached_has_bits & 0x00004000u) {
      front_clear_distance_ = from.front_clear_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningData::CopyFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningData::IsInitialized() const {
  return true;
}

void PlanningData::Swap(PlanningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningData::InternalSwap(PlanningData* other) {
  path_.InternalSwap(&other->path_);
  speed_plan_.InternalSwap(&other->speed_plan_);
  st_graph_.InternalSwap(&other->st_graph_);
  sl_frame_.InternalSwap(&other->sl_frame_);
  obstacle_.InternalSwap(&other->obstacle_);
  reference_line_.InternalSwap(&other->reference_line_);
  chart_.InternalSwap(&other->chart_);
  std::swap(adc_position_, other->adc_position_);
  std::swap(chassis_, other->chassis_);
  std::swap(routing_, other->routing_);
  std::swap(init_point_, other->init_point_);
  std::swap(prediction_header_, other->prediction_header_);
  std::swap(signal_light_, other->signal_light_);
  std::swap(dp_poly_graph_, other->dp_poly_graph_);
  std::swap(lattice_st_image_, other->lattice_st_image_);
  std::swap(relative_map_, other->relative_map_);
  std::swap(auto_tuning_training_data_, other->auto_tuning_training_data_);
  std::swap(scenario_, other->scenario_);
  std::swap(open_space_, other->open_space_);
  std::swap(smoother_, other->smoother_);
  std::swap(pull_over_, other->pull_over_);
  std::swap(front_clear_distance_, other->front_clear_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningData

// optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
bool PlanningData::has_adc_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningData::set_has_adc_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningData::clear_has_adc_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningData::clear_adc_position() {
  if (adc_position_ != NULL) adc_position_->::jmc_auto::localization::LocalizationEstimate::Clear();
  clear_has_adc_position();
}
const ::jmc_auto::localization::LocalizationEstimate& PlanningData::adc_position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.adc_position)
  return adc_position_ != NULL ? *adc_position_
                         : *::jmc_auto::localization::LocalizationEstimate::internal_default_instance();
}
::jmc_auto::localization::LocalizationEstimate* PlanningData::mutable_adc_position() {
  set_has_adc_position();
  if (adc_position_ == NULL) {
    adc_position_ = new ::jmc_auto::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.adc_position)
  return adc_position_;
}
::jmc_auto::localization::LocalizationEstimate* PlanningData::release_adc_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.adc_position)
  clear_has_adc_position();
  ::jmc_auto::localization::LocalizationEstimate* temp = adc_position_;
  adc_position_ = NULL;
  return temp;
}
void PlanningData::set_allocated_adc_position(::jmc_auto::localization::LocalizationEstimate* adc_position) {
  delete adc_position_;
  adc_position_ = adc_position;
  if (adc_position) {
    set_has_adc_position();
  } else {
    clear_has_adc_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.adc_position)
}

// optional .jmc_auto.canbus.Chassis chassis = 8;
bool PlanningData::has_chassis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningData::set_has_chassis() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningData::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningData::clear_chassis() {
  if (chassis_ != NULL) chassis_->::jmc_auto::canbus::Chassis::Clear();
  clear_has_chassis();
}
const ::jmc_auto::canbus::Chassis& PlanningData::chassis() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.chassis)
  return chassis_ != NULL ? *chassis_
                         : *::jmc_auto::canbus::Chassis::internal_default_instance();
}
::jmc_auto::canbus::Chassis* PlanningData::mutable_chassis() {
  set_has_chassis();
  if (chassis_ == NULL) {
    chassis_ = new ::jmc_auto::canbus::Chassis;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.chassis)
  return chassis_;
}
::jmc_auto::canbus::Chassis* PlanningData::release_chassis() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.chassis)
  clear_has_chassis();
  ::jmc_auto::canbus::Chassis* temp = chassis_;
  chassis_ = NULL;
  return temp;
}
void PlanningData::set_allocated_chassis(::jmc_auto::canbus::Chassis* chassis) {
  delete chassis_;
  chassis_ = chassis;
  if (chassis) {
    set_has_chassis();
  } else {
    clear_has_chassis();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.chassis)
}

// optional .jmc_auto.routing.RoutingResponse routing = 9;
bool PlanningData::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningData::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningData::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningData::clear_routing() {
  if (routing_ != NULL) routing_->::jmc_auto::routing::RoutingResponse::Clear();
  clear_has_routing();
}
const ::jmc_auto::routing::RoutingResponse& PlanningData::routing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.routing)
  return routing_ != NULL ? *routing_
                         : *::jmc_auto::routing::RoutingResponse::internal_default_instance();
}
::jmc_auto::routing::RoutingResponse* PlanningData::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::jmc_auto::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.routing)
  return routing_;
}
::jmc_auto::routing::RoutingResponse* PlanningData::release_routing() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.routing)
  clear_has_routing();
  ::jmc_auto::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
void PlanningData::set_allocated_routing(::jmc_auto::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.routing)
}

// optional .jmc_auto.common.TrajectoryPoint init_point = 10;
bool PlanningData::has_init_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanningData::set_has_init_point() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanningData::clear_has_init_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningData::clear_init_point() {
  if (init_point_ != NULL) init_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_init_point();
}
const ::jmc_auto::common::TrajectoryPoint& PlanningData::init_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.init_point)
  return init_point_ != NULL ? *init_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
::jmc_auto::common::TrajectoryPoint* PlanningData::mutable_init_point() {
  set_has_init_point();
  if (init_point_ == NULL) {
    init_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.init_point)
  return init_point_;
}
::jmc_auto::common::TrajectoryPoint* PlanningData::release_init_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.init_point)
  clear_has_init_point();
  ::jmc_auto::common::TrajectoryPoint* temp = init_point_;
  init_point_ = NULL;
  return temp;
}
void PlanningData::set_allocated_init_point(::jmc_auto::common::TrajectoryPoint* init_point) {
  delete init_point_;
  init_point_ = init_point;
  if (init_point) {
    set_has_init_point();
  } else {
    clear_has_init_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.init_point)
}

// repeated .jmc_auto.common.Path path = 6;
int PlanningData::path_size() const {
  return path_.size();
}
void PlanningData::clear_path() {
  path_.Clear();
}
const ::jmc_auto::common::Path& PlanningData::path(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.path)
  return path_.Get(index);
}
::jmc_auto::common::Path* PlanningData::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.path)
  return path_.Mutable(index);
}
::jmc_auto::common::Path* PlanningData::add_path() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.path)
  return path_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >*
PlanningData::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.path)
  return &path_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >&
PlanningData::path() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.path)
  return path_;
}

// repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
int PlanningData::speed_plan_size() const {
  return speed_plan_.size();
}
void PlanningData::clear_speed_plan() {
  speed_plan_.Clear();
}
const ::jmc_auto::planning_internal::SpeedPlan& PlanningData::speed_plan(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Get(index);
}
::jmc_auto::planning_internal::SpeedPlan* PlanningData::mutable_speed_plan(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Mutable(index);
}
::jmc_auto::planning_internal::SpeedPlan* PlanningData::add_speed_plan() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan >*
PlanningData::mutable_speed_plan() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.speed_plan)
  return &speed_plan_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan >&
PlanningData::speed_plan() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_;
}

// repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
int PlanningData::st_graph_size() const {
  return st_graph_.size();
}
void PlanningData::clear_st_graph() {
  st_graph_.Clear();
}
const ::jmc_auto::planning_internal::STGraphDebug& PlanningData::st_graph(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_.Get(index);
}
::jmc_auto::planning_internal::STGraphDebug* PlanningData::mutable_st_graph(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_.Mutable(index);
}
::jmc_auto::planning_internal::STGraphDebug* PlanningData::add_st_graph() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug >*
PlanningData::mutable_st_graph() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.st_graph)
  return &st_graph_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug >&
PlanningData::st_graph() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_;
}

// repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
int PlanningData::sl_frame_size() const {
  return sl_frame_.size();
}
void PlanningData::clear_sl_frame() {
  sl_frame_.Clear();
}
const ::jmc_auto::planning_internal::SLFrameDebug& PlanningData::sl_frame(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Get(index);
}
::jmc_auto::planning_internal::SLFrameDebug* PlanningData::mutable_sl_frame(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Mutable(index);
}
::jmc_auto::planning_internal::SLFrameDebug* PlanningData::add_sl_frame() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug >*
PlanningData::mutable_sl_frame() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.sl_frame)
  return &sl_frame_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug >&
PlanningData::sl_frame() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_;
}

// optional .jmc_auto.common.Header prediction_header = 16;
bool PlanningData::has_prediction_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlanningData::set_has_prediction_header() {
  _has_bits_[0] |= 0x00000010u;
}
void PlanningData::clear_has_prediction_header() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlanningData::clear_prediction_header() {
  if (prediction_header_ != NULL) prediction_header_->::jmc_auto::common::Header::Clear();
  clear_has_prediction_header();
}
const ::jmc_auto::common::Header& PlanningData::prediction_header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.prediction_header)
  return prediction_header_ != NULL ? *prediction_header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* PlanningData::mutable_prediction_header() {
  set_has_prediction_header();
  if (prediction_header_ == NULL) {
    prediction_header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.prediction_header)
  return prediction_header_;
}
::jmc_auto::common::Header* PlanningData::release_prediction_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.prediction_header)
  clear_has_prediction_header();
  ::jmc_auto::common::Header* temp = prediction_header_;
  prediction_header_ = NULL;
  return temp;
}
void PlanningData::set_allocated_prediction_header(::jmc_auto::common::Header* prediction_header) {
  delete prediction_header_;
  prediction_header_ = prediction_header;
  if (prediction_header) {
    set_has_prediction_header();
  } else {
    clear_has_prediction_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.prediction_header)
}

// optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
bool PlanningData::has_signal_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlanningData::set_has_signal_light() {
  _has_bits_[0] |= 0x00000020u;
}
void PlanningData::clear_has_signal_light() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlanningData::clear_signal_light() {
  if (signal_light_ != NULL) signal_light_->::jmc_auto::planning_internal::SignalLightDebug::Clear();
  clear_has_signal_light();
}
const ::jmc_auto::planning_internal::SignalLightDebug& PlanningData::signal_light() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.signal_light)
  return signal_light_ != NULL ? *signal_light_
                         : *::jmc_auto::planning_internal::SignalLightDebug::internal_default_instance();
}
::jmc_auto::planning_internal::SignalLightDebug* PlanningData::mutable_signal_light() {
  set_has_signal_light();
  if (signal_light_ == NULL) {
    signal_light_ = new ::jmc_auto::planning_internal::SignalLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.signal_light)
  return signal_light_;
}
::jmc_auto::planning_internal::SignalLightDebug* PlanningData::release_signal_light() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.signal_light)
  clear_has_signal_light();
  ::jmc_auto::planning_internal::SignalLightDebug* temp = signal_light_;
  signal_light_ = NULL;
  return temp;
}
void PlanningData::set_allocated_signal_light(::jmc_auto::planning_internal::SignalLightDebug* signal_light) {
  delete signal_light_;
  signal_light_ = signal_light;
  if (signal_light) {
    set_has_signal_light();
  } else {
    clear_has_signal_light();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.signal_light)
}

// repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
int PlanningData::obstacle_size() const {
  return obstacle_.size();
}
void PlanningData::clear_obstacle() {
  obstacle_.Clear();
}
const ::jmc_auto::planning_internal::ObstacleDebug& PlanningData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_.Get(index);
}
::jmc_auto::planning_internal::ObstacleDebug* PlanningData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_.Mutable(index);
}
::jmc_auto::planning_internal::ObstacleDebug* PlanningData::add_obstacle() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >*
PlanningData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.obstacle)
  return &obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >&
PlanningData::obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_;
}

// repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
int PlanningData::reference_line_size() const {
  return reference_line_.size();
}
void PlanningData::clear_reference_line() {
  reference_line_.Clear();
}
const ::jmc_auto::planning_internal::ReferenceLineDebug& PlanningData::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_.Get(index);
}
::jmc_auto::planning_internal::ReferenceLineDebug* PlanningData::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_.Mutable(index);
}
::jmc_auto::planning_internal::ReferenceLineDebug* PlanningData::add_reference_line() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug >*
PlanningData::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.reference_line)
  return &reference_line_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug >&
PlanningData::reference_line() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_;
}

// optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
bool PlanningData::has_dp_poly_graph() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlanningData::set_has_dp_poly_graph() {
  _has_bits_[0] |= 0x00000040u;
}
void PlanningData::clear_has_dp_poly_graph() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlanningData::clear_dp_poly_graph() {
  if (dp_poly_graph_ != NULL) dp_poly_graph_->::jmc_auto::planning_internal::DpPolyGraphDebug::Clear();
  clear_has_dp_poly_graph();
}
const ::jmc_auto::planning_internal::DpPolyGraphDebug& PlanningData::dp_poly_graph() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_ != NULL ? *dp_poly_graph_
                         : *::jmc_auto::planning_internal::DpPolyGraphDebug::internal_default_instance();
}
::jmc_auto::planning_internal::DpPolyGraphDebug* PlanningData::mutable_dp_poly_graph() {
  set_has_dp_poly_graph();
  if (dp_poly_graph_ == NULL) {
    dp_poly_graph_ = new ::jmc_auto::planning_internal::DpPolyGraphDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_;
}
::jmc_auto::planning_internal::DpPolyGraphDebug* PlanningData::release_dp_poly_graph() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
  clear_has_dp_poly_graph();
  ::jmc_auto::planning_internal::DpPolyGraphDebug* temp = dp_poly_graph_;
  dp_poly_graph_ = NULL;
  return temp;
}
void PlanningData::set_allocated_dp_poly_graph(::jmc_auto::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  delete dp_poly_graph_;
  dp_poly_graph_ = dp_poly_graph;
  if (dp_poly_graph) {
    set_has_dp_poly_graph();
  } else {
    clear_has_dp_poly_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
}

// optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
bool PlanningData::has_lattice_st_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlanningData::set_has_lattice_st_image() {
  _has_bits_[0] |= 0x00000080u;
}
void PlanningData::clear_has_lattice_st_image() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlanningData::clear_lattice_st_image() {
  if (lattice_st_image_ != NULL) lattice_st_image_->::jmc_auto::planning_internal::LatticeStTraining::Clear();
  clear_has_lattice_st_image();
}
const ::jmc_auto::planning_internal::LatticeStTraining& PlanningData::lattice_st_image() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.lattice_st_image)
  return lattice_st_image_ != NULL ? *lattice_st_image_
                         : *::jmc_auto::planning_internal::LatticeStTraining::internal_default_instance();
}
::jmc_auto::planning_internal::LatticeStTraining* PlanningData::mutable_lattice_st_image() {
  set_has_lattice_st_image();
  if (lattice_st_image_ == NULL) {
    lattice_st_image_ = new ::jmc_auto::planning_internal::LatticeStTraining;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.lattice_st_image)
  return lattice_st_image_;
}
::jmc_auto::planning_internal::LatticeStTraining* PlanningData::release_lattice_st_image() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.lattice_st_image)
  clear_has_lattice_st_image();
  ::jmc_auto::planning_internal::LatticeStTraining* temp = lattice_st_image_;
  lattice_st_image_ = NULL;
  return temp;
}
void PlanningData::set_allocated_lattice_st_image(::jmc_auto::planning_internal::LatticeStTraining* lattice_st_image) {
  delete lattice_st_image_;
  lattice_st_image_ = lattice_st_image;
  if (lattice_st_image) {
    set_has_lattice_st_image();
  } else {
    clear_has_lattice_st_image();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.lattice_st_image)
}

// optional .jmc_auto.relative_map.MapMsg relative_map = 22;
bool PlanningData::has_relative_map() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlanningData::set_has_relative_map() {
  _has_bits_[0] |= 0x00000100u;
}
void PlanningData::clear_has_relative_map() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlanningData::clear_relative_map() {
  if (relative_map_ != NULL) relative_map_->::jmc_auto::relative_map::MapMsg::Clear();
  clear_has_relative_map();
}
const ::jmc_auto::relative_map::MapMsg& PlanningData::relative_map() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.relative_map)
  return relative_map_ != NULL ? *relative_map_
                         : *::jmc_auto::relative_map::MapMsg::internal_default_instance();
}
::jmc_auto::relative_map::MapMsg* PlanningData::mutable_relative_map() {
  set_has_relative_map();
  if (relative_map_ == NULL) {
    relative_map_ = new ::jmc_auto::relative_map::MapMsg;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.relative_map)
  return relative_map_;
}
::jmc_auto::relative_map::MapMsg* PlanningData::release_relative_map() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.relative_map)
  clear_has_relative_map();
  ::jmc_auto::relative_map::MapMsg* temp = relative_map_;
  relative_map_ = NULL;
  return temp;
}
void PlanningData::set_allocated_relative_map(::jmc_auto::relative_map::MapMsg* relative_map) {
  delete relative_map_;
  relative_map_ = relative_map;
  if (relative_map) {
    set_has_relative_map();
  } else {
    clear_has_relative_map();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.relative_map)
}

// optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
bool PlanningData::has_auto_tuning_training_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlanningData::set_has_auto_tuning_training_data() {
  _has_bits_[0] |= 0x00000200u;
}
void PlanningData::clear_has_auto_tuning_training_data() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlanningData::clear_auto_tuning_training_data() {
  if (auto_tuning_training_data_ != NULL) auto_tuning_training_data_->::jmc_auto::planning_internal::AutoTuningTrainingData::Clear();
  clear_has_auto_tuning_training_data();
}
const ::jmc_auto::planning_internal::AutoTuningTrainingData& PlanningData::auto_tuning_training_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
  return auto_tuning_training_data_ != NULL ? *auto_tuning_training_data_
                         : *::jmc_auto::planning_internal::AutoTuningTrainingData::internal_default_instance();
}
::jmc_auto::planning_internal::AutoTuningTrainingData* PlanningData::mutable_auto_tuning_training_data() {
  set_has_auto_tuning_training_data();
  if (auto_tuning_training_data_ == NULL) {
    auto_tuning_training_data_ = new ::jmc_auto::planning_internal::AutoTuningTrainingData;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
  return auto_tuning_training_data_;
}
::jmc_auto::planning_internal::AutoTuningTrainingData* PlanningData::release_auto_tuning_training_data() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
  clear_has_auto_tuning_training_data();
  ::jmc_auto::planning_internal::AutoTuningTrainingData* temp = auto_tuning_training_data_;
  auto_tuning_training_data_ = NULL;
  return temp;
}
void PlanningData::set_allocated_auto_tuning_training_data(::jmc_auto::planning_internal::AutoTuningTrainingData* auto_tuning_training_data) {
  delete auto_tuning_training_data_;
  auto_tuning_training_data_ = auto_tuning_training_data;
  if (auto_tuning_training_data) {
    set_has_auto_tuning_training_data();
  } else {
    clear_has_auto_tuning_training_data();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
}

// optional double front_clear_distance = 24;
bool PlanningData::has_front_clear_distance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PlanningData::set_has_front_clear_distance() {
  _has_bits_[0] |= 0x00004000u;
}
void PlanningData::clear_has_front_clear_distance() {
  _has_bits_[0] &= ~0x00004000u;
}
void PlanningData::clear_front_clear_distance() {
  front_clear_distance_ = 0;
  clear_has_front_clear_distance();
}
double PlanningData::front_clear_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.front_clear_distance)
  return front_clear_distance_;
}
void PlanningData::set_front_clear_distance(double value) {
  set_has_front_clear_distance();
  front_clear_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PlanningData.front_clear_distance)
}

// repeated .jmc_auto.dreamview.Chart chart = 25;
int PlanningData::chart_size() const {
  return chart_.size();
}
void PlanningData::clear_chart() {
  chart_.Clear();
}
const ::jmc_auto::dreamview::Chart& PlanningData::chart(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.chart)
  return chart_.Get(index);
}
::jmc_auto::dreamview::Chart* PlanningData::mutable_chart(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.chart)
  return chart_.Mutable(index);
}
::jmc_auto::dreamview::Chart* PlanningData::add_chart() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.chart)
  return chart_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart >*
PlanningData::mutable_chart() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.chart)
  return &chart_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart >&
PlanningData::chart() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.chart)
  return chart_;
}

// optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
bool PlanningData::has_scenario() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PlanningData::set_has_scenario() {
  _has_bits_[0] |= 0x00000400u;
}
void PlanningData::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000400u;
}
void PlanningData::clear_scenario() {
  if (scenario_ != NULL) scenario_->::jmc_auto::planning_internal::ScenarioDebug::Clear();
  clear_has_scenario();
}
const ::jmc_auto::planning_internal::ScenarioDebug& PlanningData::scenario() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.scenario)
  return scenario_ != NULL ? *scenario_
                         : *::jmc_auto::planning_internal::ScenarioDebug::internal_default_instance();
}
::jmc_auto::planning_internal::ScenarioDebug* PlanningData::mutable_scenario() {
  set_has_scenario();
  if (scenario_ == NULL) {
    scenario_ = new ::jmc_auto::planning_internal::ScenarioDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.scenario)
  return scenario_;
}
::jmc_auto::planning_internal::ScenarioDebug* PlanningData::release_scenario() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.scenario)
  clear_has_scenario();
  ::jmc_auto::planning_internal::ScenarioDebug* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
void PlanningData::set_allocated_scenario(::jmc_auto::planning_internal::ScenarioDebug* scenario) {
  delete scenario_;
  scenario_ = scenario;
  if (scenario) {
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.scenario)
}

// optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
bool PlanningData::has_open_space() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PlanningData::set_has_open_space() {
  _has_bits_[0] |= 0x00000800u;
}
void PlanningData::clear_has_open_space() {
  _has_bits_[0] &= ~0x00000800u;
}
void PlanningData::clear_open_space() {
  if (open_space_ != NULL) open_space_->::jmc_auto::planning_internal::OpenSpaceDebug::Clear();
  clear_has_open_space();
}
const ::jmc_auto::planning_internal::OpenSpaceDebug& PlanningData::open_space() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.open_space)
  return open_space_ != NULL ? *open_space_
                         : *::jmc_auto::planning_internal::OpenSpaceDebug::internal_default_instance();
}
::jmc_auto::planning_internal::OpenSpaceDebug* PlanningData::mutable_open_space() {
  set_has_open_space();
  if (open_space_ == NULL) {
    open_space_ = new ::jmc_auto::planning_internal::OpenSpaceDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.open_space)
  return open_space_;
}
::jmc_auto::planning_internal::OpenSpaceDebug* PlanningData::release_open_space() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.open_space)
  clear_has_open_space();
  ::jmc_auto::planning_internal::OpenSpaceDebug* temp = open_space_;
  open_space_ = NULL;
  return temp;
}
void PlanningData::set_allocated_open_space(::jmc_auto::planning_internal::OpenSpaceDebug* open_space) {
  delete open_space_;
  open_space_ = open_space;
  if (open_space) {
    set_has_open_space();
  } else {
    clear_has_open_space();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.open_space)
}

// optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
bool PlanningData::has_smoother() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PlanningData::set_has_smoother() {
  _has_bits_[0] |= 0x00001000u;
}
void PlanningData::clear_has_smoother() {
  _has_bits_[0] &= ~0x00001000u;
}
void PlanningData::clear_smoother() {
  if (smoother_ != NULL) smoother_->::jmc_auto::planning_internal::SmootherDebug::Clear();
  clear_has_smoother();
}
const ::jmc_auto::planning_internal::SmootherDebug& PlanningData::smoother() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.smoother)
  return smoother_ != NULL ? *smoother_
                         : *::jmc_auto::planning_internal::SmootherDebug::internal_default_instance();
}
::jmc_auto::planning_internal::SmootherDebug* PlanningData::mutable_smoother() {
  set_has_smoother();
  if (smoother_ == NULL) {
    smoother_ = new ::jmc_auto::planning_internal::SmootherDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.smoother)
  return smoother_;
}
::jmc_auto::planning_internal::SmootherDebug* PlanningData::release_smoother() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.smoother)
  clear_has_smoother();
  ::jmc_auto::planning_internal::SmootherDebug* temp = smoother_;
  smoother_ = NULL;
  return temp;
}
void PlanningData::set_allocated_smoother(::jmc_auto::planning_internal::SmootherDebug* smoother) {
  delete smoother_;
  smoother_ = smoother;
  if (smoother) {
    set_has_smoother();
  } else {
    clear_has_smoother();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.smoother)
}

// optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
bool PlanningData::has_pull_over() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PlanningData::set_has_pull_over() {
  _has_bits_[0] |= 0x00002000u;
}
void PlanningData::clear_has_pull_over() {
  _has_bits_[0] &= ~0x00002000u;
}
void PlanningData::clear_pull_over() {
  if (pull_over_ != NULL) pull_over_->::jmc_auto::planning_internal::PullOverDebug::Clear();
  clear_has_pull_over();
}
const ::jmc_auto::planning_internal::PullOverDebug& PlanningData::pull_over() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.pull_over)
  return pull_over_ != NULL ? *pull_over_
                         : *::jmc_auto::planning_internal::PullOverDebug::internal_default_instance();
}
::jmc_auto::planning_internal::PullOverDebug* PlanningData::mutable_pull_over() {
  set_has_pull_over();
  if (pull_over_ == NULL) {
    pull_over_ = new ::jmc_auto::planning_internal::PullOverDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.pull_over)
  return pull_over_;
}
::jmc_auto::planning_internal::PullOverDebug* PlanningData::release_pull_over() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.pull_over)
  clear_has_pull_over();
  ::jmc_auto::planning_internal::PullOverDebug* temp = pull_over_;
  pull_over_ = NULL;
  return temp;
}
void PlanningData::set_allocated_pull_over(::jmc_auto::planning_internal::PullOverDebug* pull_over) {
  delete pull_over_;
  pull_over_ = pull_over;
  if (pull_over) {
    set_has_pull_over();
  } else {
    clear_has_pull_over();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.pull_over)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatticeStPixel::kSFieldNumber;
const int LatticeStPixel::kTFieldNumber;
const int LatticeStPixel::kRFieldNumber;
const int LatticeStPixel::kGFieldNumber;
const int LatticeStPixel::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatticeStPixel::LatticeStPixel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.LatticeStPixel)
}
LatticeStPixel::LatticeStPixel(const LatticeStPixel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&s_) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.LatticeStPixel)
}

void LatticeStPixel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&s_) + sizeof(b_));
}

LatticeStPixel::~LatticeStPixel() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.LatticeStPixel)
  SharedDtor();
}

void LatticeStPixel::SharedDtor() {
}

void LatticeStPixel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatticeStPixel::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatticeStPixel& LatticeStPixel::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatticeStPixel* LatticeStPixel::New(::google::protobuf::Arena* arena) const {
  LatticeStPixel* n = new LatticeStPixel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatticeStPixel::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.LatticeStPixel)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&s_) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatticeStPixel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.LatticeStPixel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 g = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 b = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.LatticeStPixel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.LatticeStPixel)
  return false;
#undef DO_
}

void LatticeStPixel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.LatticeStPixel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->s(), output);
  }

  // optional int32 t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->t(), output);
  }

  // optional uint32 r = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  // optional uint32 g = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->g(), output);
  }

  // optional uint32 b = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.LatticeStPixel)
}

::google::protobuf::uint8* LatticeStPixel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.LatticeStPixel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->s(), target);
  }

  // optional int32 t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->t(), target);
  }

  // optional uint32 r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  // optional uint32 g = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->g(), target);
  }

  // optional uint32 b = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.LatticeStPixel)
  return target;
}

size_t LatticeStPixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.LatticeStPixel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->s());
    }

    // optional int32 t = 2;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }

    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 g = 4;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // optional uint32 b = 5;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatticeStPixel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.LatticeStPixel)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeStPixel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatticeStPixel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.LatticeStPixel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.LatticeStPixel)
    MergeFrom(*source);
  }
}

void LatticeStPixel::MergeFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.LatticeStPixel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000008u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000010u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatticeStPixel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeStPixel::CopyFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStPixel::IsInitialized() const {
  return true;
}

void LatticeStPixel::Swap(LatticeStPixel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatticeStPixel::InternalSwap(LatticeStPixel* other) {
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatticeStPixel::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatticeStPixel

// optional int32 s = 1;
bool LatticeStPixel::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatticeStPixel::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void LatticeStPixel::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatticeStPixel::clear_s() {
  s_ = 0;
  clear_has_s();
}
::google::protobuf::int32 LatticeStPixel::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.s)
  return s_;
}
void LatticeStPixel::set_s(::google::protobuf::int32 value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.s)
}

// optional int32 t = 2;
bool LatticeStPixel::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatticeStPixel::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void LatticeStPixel::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatticeStPixel::clear_t() {
  t_ = 0;
  clear_has_t();
}
::google::protobuf::int32 LatticeStPixel::t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.t)
  return t_;
}
void LatticeStPixel::set_t(::google::protobuf::int32 value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.t)
}

// optional uint32 r = 3;
bool LatticeStPixel::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatticeStPixel::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
void LatticeStPixel::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatticeStPixel::clear_r() {
  r_ = 0u;
  clear_has_r();
}
::google::protobuf::uint32 LatticeStPixel::r() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.r)
  return r_;
}
void LatticeStPixel::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.r)
}

// optional uint32 g = 4;
bool LatticeStPixel::has_g() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LatticeStPixel::set_has_g() {
  _has_bits_[0] |= 0x00000008u;
}
void LatticeStPixel::clear_has_g() {
  _has_bits_[0] &= ~0x00000008u;
}
void LatticeStPixel::clear_g() {
  g_ = 0u;
  clear_has_g();
}
::google::protobuf::uint32 LatticeStPixel::g() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.g)
  return g_;
}
void LatticeStPixel::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.g)
}

// optional uint32 b = 5;
bool LatticeStPixel::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LatticeStPixel::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
void LatticeStPixel::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
void LatticeStPixel::clear_b() {
  b_ = 0u;
  clear_has_b();
}
::google::protobuf::uint32 LatticeStPixel::b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.b)
  return b_;
}
void LatticeStPixel::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatticeStTraining::kPixelFieldNumber;
const int LatticeStTraining::kTimestampFieldNumber;
const int LatticeStTraining::kAnnotationFieldNumber;
const int LatticeStTraining::kNumSGridsFieldNumber;
const int LatticeStTraining::kNumTGridsFieldNumber;
const int LatticeStTraining::kSResolutionFieldNumber;
const int LatticeStTraining::kTResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatticeStTraining::LatticeStTraining()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.LatticeStTraining)
}
LatticeStTraining::LatticeStTraining(const LatticeStTraining& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pixel_(from.pixel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_annotation()) {
    annotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&t_resolution_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(t_resolution_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.LatticeStTraining)
}

void LatticeStTraining::SharedCtor() {
  _cached_size_ = 0;
  annotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&t_resolution_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(t_resolution_));
}

LatticeStTraining::~LatticeStTraining() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.LatticeStTraining)
  SharedDtor();
}

void LatticeStTraining::SharedDtor() {
  annotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LatticeStTraining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatticeStTraining::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatticeStTraining& LatticeStTraining::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatticeStTraining* LatticeStTraining::New(::google::protobuf::Arena* arena) const {
  LatticeStTraining* n = new LatticeStTraining;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatticeStTraining::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.LatticeStTraining)
  pixel_.Clear();
  if (has_annotation()) {
    GOOGLE_DCHECK(!annotation_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*annotation_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&t_resolution_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(t_resolution_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatticeStTraining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.LatticeStTraining)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pixel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string annotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->annotation().data(), this->annotation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning_internal.LatticeStTraining.annotation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_s_grids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_num_s_grids();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_s_grids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_t_grids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_t_grids();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_t_grids_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s_resolution = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_s_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_resolution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_t_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.LatticeStTraining)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.LatticeStTraining)
  return false;
#undef DO_
}

void LatticeStTraining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.LatticeStTraining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
  for (unsigned int i = 0, n = this->pixel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pixel(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional string annotation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->annotation().data(), this->annotation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.LatticeStTraining.annotation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->annotation(), output);
  }

  // optional uint32 num_s_grids = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_s_grids(), output);
  }

  // optional uint32 num_t_grids = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_t_grids(), output);
  }

  // optional double s_resolution = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s_resolution(), output);
  }

  // optional double t_resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->t_resolution(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.LatticeStTraining)
}

::google::protobuf::uint8* LatticeStTraining::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.LatticeStTraining)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
  for (unsigned int i = 0, n = this->pixel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pixel(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional string annotation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->annotation().data(), this->annotation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning_internal.LatticeStTraining.annotation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->annotation(), target);
  }

  // optional uint32 num_s_grids = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_s_grids(), target);
  }

  // optional uint32 num_t_grids = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_t_grids(), target);
  }

  // optional double s_resolution = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s_resolution(), target);
  }

  // optional double t_resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->t_resolution(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.LatticeStTraining)
  return target;
}

size_t LatticeStTraining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.LatticeStTraining)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
  {
    unsigned int count = this->pixel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pixel(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string annotation = 3;
    if (has_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->annotation());
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_s_grids = 4;
    if (has_num_s_grids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_s_grids());
    }

    // optional uint32 num_t_grids = 5;
    if (has_num_t_grids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_t_grids());
    }

    // optional double s_resolution = 6;
    if (has_s_resolution()) {
      total_size += 1 + 8;
    }

    // optional double t_resolution = 7;
    if (has_t_resolution()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatticeStTraining::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.LatticeStTraining)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeStTraining* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatticeStTraining>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.LatticeStTraining)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.LatticeStTraining)
    MergeFrom(*source);
  }
}

void LatticeStTraining::MergeFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.LatticeStTraining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pixel_.MergeFrom(from.pixel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_annotation();
      annotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_s_grids_ = from.num_s_grids_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_t_grids_ = from.num_t_grids_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_resolution_ = from.s_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      t_resolution_ = from.t_resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatticeStTraining::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeStTraining::CopyFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStTraining::IsInitialized() const {
  return true;
}

void LatticeStTraining::Swap(LatticeStTraining* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatticeStTraining::InternalSwap(LatticeStTraining* other) {
  pixel_.InternalSwap(&other->pixel_);
  annotation_.Swap(&other->annotation_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(num_s_grids_, other->num_s_grids_);
  std::swap(num_t_grids_, other->num_t_grids_);
  std::swap(s_resolution_, other->s_resolution_);
  std::swap(t_resolution_, other->t_resolution_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatticeStTraining::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatticeStTraining

// repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
int LatticeStTraining::pixel_size() const {
  return pixel_.size();
}
void LatticeStTraining::clear_pixel() {
  pixel_.Clear();
}
const ::jmc_auto::planning_internal::LatticeStPixel& LatticeStTraining::pixel(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_.Get(index);
}
::jmc_auto::planning_internal::LatticeStPixel* LatticeStTraining::mutable_pixel(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_.Mutable(index);
}
::jmc_auto::planning_internal::LatticeStPixel* LatticeStTraining::add_pixel() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel >*
LatticeStTraining::mutable_pixel() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return &pixel_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel >&
LatticeStTraining::pixel() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_;
}

// optional double timestamp = 2;
bool LatticeStTraining::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatticeStTraining::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void LatticeStTraining::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatticeStTraining::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double LatticeStTraining::timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.timestamp)
  return timestamp_;
}
void LatticeStTraining::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.timestamp)
}

// optional string annotation = 3;
bool LatticeStTraining::has_annotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatticeStTraining::set_has_annotation() {
  _has_bits_[0] |= 0x00000001u;
}
void LatticeStTraining::clear_has_annotation() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatticeStTraining::clear_annotation() {
  annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_annotation();
}
const ::std::string& LatticeStTraining::annotation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.annotation)
  return annotation_.GetNoArena();
}
void LatticeStTraining::set_annotation(const ::std::string& value) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
#if LANG_CXX11
void LatticeStTraining::set_annotation(::std::string&& value) {
  set_has_annotation();
  annotation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
#endif
void LatticeStTraining::set_annotation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
void LatticeStTraining::set_annotation(const char* value, size_t size) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
::std::string* LatticeStTraining::mutable_annotation() {
  set_has_annotation();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.LatticeStTraining.annotation)
  return annotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LatticeStTraining::release_annotation() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.LatticeStTraining.annotation)
  clear_has_annotation();
  return annotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LatticeStTraining::set_allocated_annotation(::std::string* annotation) {
  if (annotation != NULL) {
    set_has_annotation();
  } else {
    clear_has_annotation();
  }
  annotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.LatticeStTraining.annotation)
}

// optional uint32 num_s_grids = 4;
bool LatticeStTraining::has_num_s_grids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LatticeStTraining::set_has_num_s_grids() {
  _has_bits_[0] |= 0x00000004u;
}
void LatticeStTraining::clear_has_num_s_grids() {
  _has_bits_[0] &= ~0x00000004u;
}
void LatticeStTraining::clear_num_s_grids() {
  num_s_grids_ = 0u;
  clear_has_num_s_grids();
}
::google::protobuf::uint32 LatticeStTraining::num_s_grids() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.num_s_grids)
  return num_s_grids_;
}
void LatticeStTraining::set_num_s_grids(::google::protobuf::uint32 value) {
  set_has_num_s_grids();
  num_s_grids_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.num_s_grids)
}

// optional uint32 num_t_grids = 5;
bool LatticeStTraining::has_num_t_grids() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LatticeStTraining::set_has_num_t_grids() {
  _has_bits_[0] |= 0x00000008u;
}
void LatticeStTraining::clear_has_num_t_grids() {
  _has_bits_[0] &= ~0x00000008u;
}
void LatticeStTraining::clear_num_t_grids() {
  num_t_grids_ = 0u;
  clear_has_num_t_grids();
}
::google::protobuf::uint32 LatticeStTraining::num_t_grids() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.num_t_grids)
  return num_t_grids_;
}
void LatticeStTraining::set_num_t_grids(::google::protobuf::uint32 value) {
  set_has_num_t_grids();
  num_t_grids_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.num_t_grids)
}

// optional double s_resolution = 6;
bool LatticeStTraining::has_s_resolution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LatticeStTraining::set_has_s_resolution() {
  _has_bits_[0] |= 0x00000010u;
}
void LatticeStTraining::clear_has_s_resolution() {
  _has_bits_[0] &= ~0x00000010u;
}
void LatticeStTraining::clear_s_resolution() {
  s_resolution_ = 0;
  clear_has_s_resolution();
}
double LatticeStTraining::s_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.s_resolution)
  return s_resolution_;
}
void LatticeStTraining::set_s_resolution(double value) {
  set_has_s_resolution();
  s_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.s_resolution)
}

// optional double t_resolution = 7;
bool LatticeStTraining::has_t_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LatticeStTraining::set_has_t_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
void LatticeStTraining::clear_has_t_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
void LatticeStTraining::clear_t_resolution() {
  t_resolution_ = 0;
  clear_has_t_resolution();
}
double LatticeStTraining::t_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.t_resolution)
  return t_resolution_;
}
void LatticeStTraining::set_t_resolution(double value) {
  set_has_t_resolution();
  t_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.t_resolution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostComponents::kCostComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostComponents::CostComponents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.CostComponents)
}
CostComponents::CostComponents(const CostComponents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cost_component_(from.cost_component_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.CostComponents)
}

void CostComponents::SharedCtor() {
  _cached_size_ = 0;
}

CostComponents::~CostComponents() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.CostComponents)
  SharedDtor();
}

void CostComponents::SharedDtor() {
}

void CostComponents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostComponents::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CostComponents& CostComponents::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

CostComponents* CostComponents::New(::google::protobuf::Arena* arena) const {
  CostComponents* n = new CostComponents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CostComponents::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.CostComponents)
  cost_component_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CostComponents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.CostComponents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double cost_component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_cost_component())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_cost_component())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.CostComponents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.CostComponents)
  return false;
#undef DO_
}

void CostComponents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.CostComponents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double cost_component = 1;
  for (int i = 0, n = this->cost_component_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->cost_component(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.CostComponents)
}

::google::protobuf::uint8* CostComponents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.CostComponents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double cost_component = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->cost_component_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.CostComponents)
  return target;
}

size_t CostComponents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.CostComponents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double cost_component = 1;
  {
    unsigned int count = this->cost_component_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cost_component_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostComponents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.CostComponents)
  GOOGLE_DCHECK_NE(&from, this);
  const CostComponents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CostComponents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.CostComponents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.CostComponents)
    MergeFrom(*source);
  }
}

void CostComponents::MergeFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.CostComponents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_component_.MergeFrom(from.cost_component_);
}

void CostComponents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostComponents::CopyFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostComponents::IsInitialized() const {
  return true;
}

void CostComponents::Swap(CostComponents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CostComponents::InternalSwap(CostComponents* other) {
  cost_component_.InternalSwap(&other->cost_component_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CostComponents::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CostComponents

// repeated double cost_component = 1;
int CostComponents::cost_component_size() const {
  return cost_component_.size();
}
void CostComponents::clear_cost_component() {
  cost_component_.Clear();
}
double CostComponents::cost_component(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CostComponents.cost_component)
  return cost_component_.Get(index);
}
void CostComponents::set_cost_component(int index, double value) {
  cost_component_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.CostComponents.cost_component)
}
void CostComponents::add_cost_component(double value) {
  cost_component_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.CostComponents.cost_component)
}
const ::google::protobuf::RepeatedField< double >&
CostComponents::cost_component() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.CostComponents.cost_component)
  return cost_component_;
}
::google::protobuf::RepeatedField< double >*
CostComponents::mutable_cost_component() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.CostComponents.cost_component)
  return &cost_component_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoTuningTrainingData::kTeacherComponentFieldNumber;
const int AutoTuningTrainingData::kStudentComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoTuningTrainingData::AutoTuningTrainingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.AutoTuningTrainingData)
}
AutoTuningTrainingData::AutoTuningTrainingData(const AutoTuningTrainingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_teacher_component()) {
    teacher_component_ = new ::jmc_auto::planning_internal::CostComponents(*from.teacher_component_);
  } else {
    teacher_component_ = NULL;
  }
  if (from.has_student_component()) {
    student_component_ = new ::jmc_auto::planning_internal::CostComponents(*from.student_component_);
  } else {
    student_component_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.AutoTuningTrainingData)
}

void AutoTuningTrainingData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&teacher_component_, 0, reinterpret_cast<char*>(&student_component_) -
    reinterpret_cast<char*>(&teacher_component_) + sizeof(student_component_));
}

AutoTuningTrainingData::~AutoTuningTrainingData() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.AutoTuningTrainingData)
  SharedDtor();
}

void AutoTuningTrainingData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete teacher_component_;
  }
  if (this != internal_default_instance()) {
    delete student_component_;
  }
}

void AutoTuningTrainingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoTuningTrainingData::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoTuningTrainingData& AutoTuningTrainingData::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoTuningTrainingData* AutoTuningTrainingData::New(::google::protobuf::Arena* arena) const {
  AutoTuningTrainingData* n = new AutoTuningTrainingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoTuningTrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_teacher_component()) {
      GOOGLE_DCHECK(teacher_component_ != NULL);
      teacher_component_->::jmc_auto::planning_internal::CostComponents::Clear();
    }
    if (has_student_component()) {
      GOOGLE_DCHECK(student_component_ != NULL);
      student_component_->::jmc_auto::planning_internal::CostComponents::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoTuningTrainingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teacher_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.CostComponents student_component = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_student_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.AutoTuningTrainingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.AutoTuningTrainingData)
  return false;
#undef DO_
}

void AutoTuningTrainingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->teacher_component_, output);
  }

  // optional .jmc_auto.planning_internal.CostComponents student_component = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->student_component_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.AutoTuningTrainingData)
}

::google::protobuf::uint8* AutoTuningTrainingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->teacher_component_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.CostComponents student_component = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->student_component_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.AutoTuningTrainingData)
  return target;
}

size_t AutoTuningTrainingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
    if (has_teacher_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->teacher_component_);
    }

    // optional .jmc_auto.planning_internal.CostComponents student_component = 2;
    if (has_student_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->student_component_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoTuningTrainingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoTuningTrainingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoTuningTrainingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.AutoTuningTrainingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.AutoTuningTrainingData)
    MergeFrom(*source);
  }
}

void AutoTuningTrainingData::MergeFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_teacher_component()->::jmc_auto::planning_internal::CostComponents::MergeFrom(from.teacher_component());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_student_component()->::jmc_auto::planning_internal::CostComponents::MergeFrom(from.student_component());
    }
  }
}

void AutoTuningTrainingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoTuningTrainingData::CopyFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoTuningTrainingData::IsInitialized() const {
  return true;
}

void AutoTuningTrainingData::Swap(AutoTuningTrainingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoTuningTrainingData::InternalSwap(AutoTuningTrainingData* other) {
  std::swap(teacher_component_, other->teacher_component_);
  std::swap(student_component_, other->student_component_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoTuningTrainingData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoTuningTrainingData

// optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
bool AutoTuningTrainingData::has_teacher_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoTuningTrainingData::set_has_teacher_component() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoTuningTrainingData::clear_has_teacher_component() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoTuningTrainingData::clear_teacher_component() {
  if (teacher_component_ != NULL) teacher_component_->::jmc_auto::planning_internal::CostComponents::Clear();
  clear_has_teacher_component();
}
const ::jmc_auto::planning_internal::CostComponents& AutoTuningTrainingData::teacher_component() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
  return teacher_component_ != NULL ? *teacher_component_
                         : *::jmc_auto::planning_internal::CostComponents::internal_default_instance();
}
::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::mutable_teacher_component() {
  set_has_teacher_component();
  if (teacher_component_ == NULL) {
    teacher_component_ = new ::jmc_auto::planning_internal::CostComponents;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
  return teacher_component_;
}
::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::release_teacher_component() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
  clear_has_teacher_component();
  ::jmc_auto::planning_internal::CostComponents* temp = teacher_component_;
  teacher_component_ = NULL;
  return temp;
}
void AutoTuningTrainingData::set_allocated_teacher_component(::jmc_auto::planning_internal::CostComponents* teacher_component) {
  delete teacher_component_;
  teacher_component_ = teacher_component;
  if (teacher_component) {
    set_has_teacher_component();
  } else {
    clear_has_teacher_component();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
}

// optional .jmc_auto.planning_internal.CostComponents student_component = 2;
bool AutoTuningTrainingData::has_student_component() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AutoTuningTrainingData::set_has_student_component() {
  _has_bits_[0] |= 0x00000002u;
}
void AutoTuningTrainingData::clear_has_student_component() {
  _has_bits_[0] &= ~0x00000002u;
}
void AutoTuningTrainingData::clear_student_component() {
  if (student_component_ != NULL) student_component_->::jmc_auto::planning_internal::CostComponents::Clear();
  clear_has_student_component();
}
const ::jmc_auto::planning_internal::CostComponents& AutoTuningTrainingData::student_component() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
  return student_component_ != NULL ? *student_component_
                         : *::jmc_auto::planning_internal::CostComponents::internal_default_instance();
}
::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::mutable_student_component() {
  set_has_student_component();
  if (student_component_ == NULL) {
    student_component_ = new ::jmc_auto::planning_internal::CostComponents;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
  return student_component_;
}
::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::release_student_component() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
  clear_has_student_component();
  ::jmc_auto::planning_internal::CostComponents* temp = student_component_;
  student_component_ = NULL;
  return temp;
}
void AutoTuningTrainingData::set_allocated_student_component(::jmc_auto::planning_internal::CostComponents* student_component) {
  delete student_component_;
  student_component_ = student_component;
  if (student_component) {
    set_has_student_component();
  } else {
    clear_has_student_component();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudReferenceLineRequest::kLaneSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudReferenceLineRequest::CloudReferenceLineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.CloudReferenceLineRequest)
}
CloudReferenceLineRequest::CloudReferenceLineRequest(const CloudReferenceLineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_segment_(from.lane_segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.CloudReferenceLineRequest)
}

void CloudReferenceLineRequest::SharedCtor() {
  _cached_size_ = 0;
}

CloudReferenceLineRequest::~CloudReferenceLineRequest() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.CloudReferenceLineRequest)
  SharedDtor();
}

void CloudReferenceLineRequest::SharedDtor() {
}

void CloudReferenceLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudReferenceLineRequest::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudReferenceLineRequest& CloudReferenceLineRequest::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudReferenceLineRequest* CloudReferenceLineRequest::New(::google::protobuf::Arena* arena) const {
  CloudReferenceLineRequest* n = new CloudReferenceLineRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudReferenceLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  lane_segment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloudReferenceLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.CloudReferenceLineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.CloudReferenceLineRequest)
  return false;
#undef DO_
}

void CloudReferenceLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_segment(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.CloudReferenceLineRequest)
}

::google::protobuf::uint8* CloudReferenceLineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
  for (unsigned int i = 0, n = this->lane_segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lane_segment(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.CloudReferenceLineRequest)
  return target;
}

size_t CloudReferenceLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
  {
    unsigned int count = this->lane_segment_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_segment(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudReferenceLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudReferenceLineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudReferenceLineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.CloudReferenceLineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.CloudReferenceLineRequest)
    MergeFrom(*source);
  }
}

void CloudReferenceLineRequest::MergeFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_segment_.MergeFrom(from.lane_segment_);
}

void CloudReferenceLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineRequest::CopyFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRequest::IsInitialized() const {
  return true;
}

void CloudReferenceLineRequest::Swap(CloudReferenceLineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudReferenceLineRequest::InternalSwap(CloudReferenceLineRequest* other) {
  lane_segment_.InternalSwap(&other->lane_segment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudReferenceLineRequest::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudReferenceLineRequest

// repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
int CloudReferenceLineRequest::lane_segment_size() const {
  return lane_segment_.size();
}
void CloudReferenceLineRequest::clear_lane_segment() {
  lane_segment_.Clear();
}
const ::jmc_auto::routing::LaneSegment& CloudReferenceLineRequest::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Get(index);
}
::jmc_auto::routing::LaneSegment* CloudReferenceLineRequest::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Mutable(index);
}
::jmc_auto::routing::LaneSegment* CloudReferenceLineRequest::add_lane_segment() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >*
CloudReferenceLineRequest::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return &lane_segment_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >&
CloudReferenceLineRequest::lane_segment() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudReferenceLineRoutingRequest::kRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
}
CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest(const CloudReferenceLineRoutingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routing()) {
    routing_ = new ::jmc_auto::routing::RoutingResponse(*from.routing_);
  } else {
    routing_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
}

void CloudReferenceLineRoutingRequest::SharedCtor() {
  _cached_size_ = 0;
  routing_ = NULL;
}

CloudReferenceLineRoutingRequest::~CloudReferenceLineRoutingRequest() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  SharedDtor();
}

void CloudReferenceLineRoutingRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete routing_;
  }
}

void CloudReferenceLineRoutingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudReferenceLineRoutingRequest::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudReferenceLineRoutingRequest& CloudReferenceLineRoutingRequest::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudReferenceLineRoutingRequest* CloudReferenceLineRoutingRequest::New(::google::protobuf::Arena* arena) const {
  CloudReferenceLineRoutingRequest* n = new CloudReferenceLineRoutingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudReferenceLineRoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  if (has_routing()) {
    GOOGLE_DCHECK(routing_ != NULL);
    routing_->::jmc_auto::routing::RoutingResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloudReferenceLineRoutingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.routing.RoutingResponse routing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  return false;
#undef DO_
}

void CloudReferenceLineRoutingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.routing.RoutingResponse routing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->routing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
}

::google::protobuf::uint8* CloudReferenceLineRoutingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.routing.RoutingResponse routing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->routing_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  return target;
}

size_t CloudReferenceLineRoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.routing.RoutingResponse routing = 1;
  if (has_routing()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->routing_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudReferenceLineRoutingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudReferenceLineRoutingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudReferenceLineRoutingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
    MergeFrom(*source);
  }
}

void CloudReferenceLineRoutingRequest::MergeFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_routing()) {
    mutable_routing()->::jmc_auto::routing::RoutingResponse::MergeFrom(from.routing());
  }
}

void CloudReferenceLineRoutingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineRoutingRequest::CopyFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRoutingRequest::IsInitialized() const {
  return true;
}

void CloudReferenceLineRoutingRequest::Swap(CloudReferenceLineRoutingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudReferenceLineRoutingRequest::InternalSwap(CloudReferenceLineRoutingRequest* other) {
  std::swap(routing_, other->routing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudReferenceLineRoutingRequest::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudReferenceLineRoutingRequest

// optional .jmc_auto.routing.RoutingResponse routing = 1;
bool CloudReferenceLineRoutingRequest::has_routing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CloudReferenceLineRoutingRequest::set_has_routing() {
  _has_bits_[0] |= 0x00000001u;
}
void CloudReferenceLineRoutingRequest::clear_has_routing() {
  _has_bits_[0] &= ~0x00000001u;
}
void CloudReferenceLineRoutingRequest::clear_routing() {
  if (routing_ != NULL) routing_->::jmc_auto::routing::RoutingResponse::Clear();
  clear_has_routing();
}
const ::jmc_auto::routing::RoutingResponse& CloudReferenceLineRoutingRequest::routing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return routing_ != NULL ? *routing_
                         : *::jmc_auto::routing::RoutingResponse::internal_default_instance();
}
::jmc_auto::routing::RoutingResponse* CloudReferenceLineRoutingRequest::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::jmc_auto::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return routing_;
}
::jmc_auto::routing::RoutingResponse* CloudReferenceLineRoutingRequest::release_routing() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
  clear_has_routing();
  ::jmc_auto::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
void CloudReferenceLineRoutingRequest::set_allocated_routing(::jmc_auto::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudReferenceLineResponse::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudReferenceLineResponse::CloudReferenceLineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning_internal.CloudReferenceLineResponse)
}
CloudReferenceLineResponse::CloudReferenceLineResponse(const CloudReferenceLineResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning_internal.CloudReferenceLineResponse)
}

void CloudReferenceLineResponse::SharedCtor() {
  _cached_size_ = 0;
}

CloudReferenceLineResponse::~CloudReferenceLineResponse() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning_internal.CloudReferenceLineResponse)
  SharedDtor();
}

void CloudReferenceLineResponse::SharedDtor() {
}

void CloudReferenceLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloudReferenceLineResponse::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloudReferenceLineResponse& CloudReferenceLineResponse::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloudReferenceLineResponse* CloudReferenceLineResponse::New(::google::protobuf::Arena* arena) const {
  CloudReferenceLineResponse* n = new CloudReferenceLineResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloudReferenceLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  segment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloudReferenceLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.Path segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning_internal.CloudReferenceLineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning_internal.CloudReferenceLineResponse)
  return false;
#undef DO_
}

void CloudReferenceLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Path segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning_internal.CloudReferenceLineResponse)
}

::google::protobuf::uint8* CloudReferenceLineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Path segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning_internal.CloudReferenceLineResponse)
  return target;
}

size_t CloudReferenceLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Path segment = 1;
  {
    unsigned int count = this->segment_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloudReferenceLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudReferenceLineResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloudReferenceLineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning_internal.CloudReferenceLineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning_internal.CloudReferenceLineResponse)
    MergeFrom(*source);
  }
}

void CloudReferenceLineResponse::MergeFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
}

void CloudReferenceLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineResponse::CopyFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineResponse::IsInitialized() const {
  return true;
}

void CloudReferenceLineResponse::Swap(CloudReferenceLineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudReferenceLineResponse::InternalSwap(CloudReferenceLineResponse* other) {
  segment_.InternalSwap(&other->segment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloudReferenceLineResponse::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudReferenceLineResponse

// repeated .jmc_auto.common.Path segment = 1;
int CloudReferenceLineResponse::segment_size() const {
  return segment_.size();
}
void CloudReferenceLineResponse::clear_segment() {
  segment_.Clear();
}
const ::jmc_auto::common::Path& CloudReferenceLineResponse::segment(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Get(index);
}
::jmc_auto::common::Path* CloudReferenceLineResponse::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Mutable(index);
}
::jmc_auto::common::Path* CloudReferenceLineResponse::add_segment() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >*
CloudReferenceLineResponse::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >&
CloudReferenceLineResponse::segment() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_internal
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
