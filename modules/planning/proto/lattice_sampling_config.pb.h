// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_sampling_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class LatCondition;
class LatConditionDefaultTypeInternal;
extern LatConditionDefaultTypeInternal _LatCondition_default_instance_;
class LatSampleConfig;
class LatSampleConfigDefaultTypeInternal;
extern LatSampleConfigDefaultTypeInternal _LatSampleConfig_default_instance_;
class LatticeSamplingConfig;
class LatticeSamplingConfigDefaultTypeInternal;
extern LatticeSamplingConfigDefaultTypeInternal _LatticeSamplingConfig_default_instance_;
class LonCondition;
class LonConditionDefaultTypeInternal;
extern LonConditionDefaultTypeInternal _LonCondition_default_instance_;
class LonSampleConfig;
class LonSampleConfigDefaultTypeInternal;
extern LonSampleConfigDefaultTypeInternal _LonSampleConfig_default_instance_;
class SStrategy;
class SStrategyDefaultTypeInternal;
extern SStrategyDefaultTypeInternal _SStrategy_default_instance_;
class TStrategy;
class TStrategyDefaultTypeInternal;
extern TStrategyDefaultTypeInternal _TStrategy_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto

// ===================================================================

class LonCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.LonCondition) */ {
 public:
  LonCondition();
  virtual ~LonCondition();

  LonCondition(const LonCondition& from);

  inline LonCondition& operator=(const LonCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LonCondition& default_instance();

  static inline const LonCondition* internal_default_instance() {
    return reinterpret_cast<const LonCondition*>(
               &_LonCondition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LonCondition* other);

  // implements Message ----------------------------------------------

  inline LonCondition* New() const PROTOBUF_FINAL { return New(NULL); }

  LonCondition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LonCondition& from);
  void MergeFrom(const LonCondition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LonCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 1 [default = 0];
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double ds = 2 [default = 0];
  bool has_ds() const;
  void clear_ds();
  static const int kDsFieldNumber = 2;
  double ds() const;
  void set_ds(double value);

  // optional double dds = 3 [default = 0];
  bool has_dds() const;
  void clear_dds();
  static const int kDdsFieldNumber = 3;
  double dds() const;
  void set_dds(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.LonCondition)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_ds();
  void clear_has_ds();
  void set_has_dds();
  void clear_has_dds();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double s_;
  double ds_;
  double dds_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.LatCondition) */ {
 public:
  LatCondition();
  virtual ~LatCondition();

  LatCondition(const LatCondition& from);

  inline LatCondition& operator=(const LatCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatCondition& default_instance();

  static inline const LatCondition* internal_default_instance() {
    return reinterpret_cast<const LatCondition*>(
               &_LatCondition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LatCondition* other);

  // implements Message ----------------------------------------------

  inline LatCondition* New() const PROTOBUF_FINAL { return New(NULL); }

  LatCondition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatCondition& from);
  void MergeFrom(const LatCondition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double l = 1 [default = 0];
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 1;
  double l() const;
  void set_l(double value);

  // optional double dl = 2 [default = 0];
  bool has_dl() const;
  void clear_dl();
  static const int kDlFieldNumber = 2;
  double dl() const;
  void set_dl(double value);

  // optional double ddl = 3 [default = 0];
  bool has_ddl() const;
  void clear_ddl();
  static const int kDdlFieldNumber = 3;
  double ddl() const;
  void set_ddl(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.LatCondition)
 private:
  void set_has_l();
  void clear_has_l();
  void set_has_dl();
  void clear_has_dl();
  void set_has_ddl();
  void clear_has_ddl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double l_;
  double dl_;
  double ddl_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TStrategy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.TStrategy) */ {
 public:
  TStrategy();
  virtual ~TStrategy();

  TStrategy(const TStrategy& from);

  inline TStrategy& operator=(const TStrategy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStrategy& default_instance();

  static inline const TStrategy* internal_default_instance() {
    return reinterpret_cast<const TStrategy*>(
               &_TStrategy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TStrategy* other);

  // implements Message ----------------------------------------------

  inline TStrategy* New() const PROTOBUF_FINAL { return New(NULL); }

  TStrategy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TStrategy& from);
  void MergeFrom(const TStrategy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TStrategy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t_markers = 1;
  int t_markers_size() const;
  void clear_t_markers();
  static const int kTMarkersFieldNumber = 1;
  double t_markers(int index) const;
  void set_t_markers(int index, double value);
  void add_t_markers(double value);
  const ::google::protobuf::RepeatedField< double >&
      t_markers() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t_markers();

  // optional string strategy = 3;
  bool has_strategy() const;
  void clear_strategy();
  static const int kStrategyFieldNumber = 3;
  const ::std::string& strategy() const;
  void set_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_strategy(::std::string&& value);
  #endif
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  ::std::string* mutable_strategy();
  ::std::string* release_strategy();
  void set_allocated_strategy(::std::string* strategy);

  // optional double t_step = 2 [default = 0.5];
  bool has_t_step() const;
  void clear_t_step();
  static const int kTStepFieldNumber = 2;
  double t_step() const;
  void set_t_step(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.TStrategy)
 private:
  void set_has_t_step();
  void clear_has_t_step();
  void set_has_strategy();
  void clear_has_strategy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_markers_;
  ::google::protobuf::internal::ArenaStringPtr strategy_;
  double t_step_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SStrategy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.SStrategy) */ {
 public:
  SStrategy();
  virtual ~SStrategy();

  SStrategy(const SStrategy& from);

  inline SStrategy& operator=(const SStrategy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SStrategy& default_instance();

  static inline const SStrategy* internal_default_instance() {
    return reinterpret_cast<const SStrategy*>(
               &_SStrategy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SStrategy* other);

  // implements Message ----------------------------------------------

  inline SStrategy* New() const PROTOBUF_FINAL { return New(NULL); }

  SStrategy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SStrategy& from);
  void MergeFrom(const SStrategy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SStrategy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double s_markers = 1;
  int s_markers_size() const;
  void clear_s_markers();
  static const int kSMarkersFieldNumber = 1;
  double s_markers(int index) const;
  void set_s_markers(int index, double value);
  void add_s_markers(double value);
  const ::google::protobuf::RepeatedField< double >&
      s_markers() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_s_markers();

  // optional string strategy = 3;
  bool has_strategy() const;
  void clear_strategy();
  static const int kStrategyFieldNumber = 3;
  const ::std::string& strategy() const;
  void set_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_strategy(::std::string&& value);
  #endif
  void set_strategy(const char* value);
  void set_strategy(const char* value, size_t size);
  ::std::string* mutable_strategy();
  ::std::string* release_strategy();
  void set_allocated_strategy(::std::string* strategy);

  // optional double s_step = 2 [default = 0.5];
  bool has_s_step() const;
  void clear_s_step();
  static const int kSStepFieldNumber = 2;
  double s_step() const;
  void set_s_step(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.SStrategy)
 private:
  void set_has_s_step();
  void clear_has_s_step();
  void set_has_strategy();
  void clear_has_strategy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > s_markers_;
  ::google::protobuf::internal::ArenaStringPtr strategy_;
  double s_step_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LonSampleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.LonSampleConfig) */ {
 public:
  LonSampleConfig();
  virtual ~LonSampleConfig();

  LonSampleConfig(const LonSampleConfig& from);

  inline LonSampleConfig& operator=(const LonSampleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LonSampleConfig& default_instance();

  static inline const LonSampleConfig* internal_default_instance() {
    return reinterpret_cast<const LonSampleConfig*>(
               &_LonSampleConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LonSampleConfig* other);

  // implements Message ----------------------------------------------

  inline LonSampleConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  LonSampleConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LonSampleConfig& from);
  void MergeFrom(const LonSampleConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LonSampleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.LonCondition lon_end_condition = 1;
  bool has_lon_end_condition() const;
  void clear_lon_end_condition();
  static const int kLonEndConditionFieldNumber = 1;
  const ::jmc_auto::planning::LonCondition& lon_end_condition() const;
  ::jmc_auto::planning::LonCondition* mutable_lon_end_condition();
  ::jmc_auto::planning::LonCondition* release_lon_end_condition();
  void set_allocated_lon_end_condition(::jmc_auto::planning::LonCondition* lon_end_condition);

  // optional .jmc_auto.planning.TStrategy t_strategy = 2;
  bool has_t_strategy() const;
  void clear_t_strategy();
  static const int kTStrategyFieldNumber = 2;
  const ::jmc_auto::planning::TStrategy& t_strategy() const;
  ::jmc_auto::planning::TStrategy* mutable_t_strategy();
  ::jmc_auto::planning::TStrategy* release_t_strategy();
  void set_allocated_t_strategy(::jmc_auto::planning::TStrategy* t_strategy);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.LonSampleConfig)
 private:
  void set_has_lon_end_condition();
  void clear_has_lon_end_condition();
  void set_has_t_strategy();
  void clear_has_t_strategy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::LonCondition* lon_end_condition_;
  ::jmc_auto::planning::TStrategy* t_strategy_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatSampleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.LatSampleConfig) */ {
 public:
  LatSampleConfig();
  virtual ~LatSampleConfig();

  LatSampleConfig(const LatSampleConfig& from);

  inline LatSampleConfig& operator=(const LatSampleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatSampleConfig& default_instance();

  static inline const LatSampleConfig* internal_default_instance() {
    return reinterpret_cast<const LatSampleConfig*>(
               &_LatSampleConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LatSampleConfig* other);

  // implements Message ----------------------------------------------

  inline LatSampleConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  LatSampleConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatSampleConfig& from);
  void MergeFrom(const LatSampleConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatSampleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.LatCondition lat_end_condition = 1;
  bool has_lat_end_condition() const;
  void clear_lat_end_condition();
  static const int kLatEndConditionFieldNumber = 1;
  const ::jmc_auto::planning::LatCondition& lat_end_condition() const;
  ::jmc_auto::planning::LatCondition* mutable_lat_end_condition();
  ::jmc_auto::planning::LatCondition* release_lat_end_condition();
  void set_allocated_lat_end_condition(::jmc_auto::planning::LatCondition* lat_end_condition);

  // optional .jmc_auto.planning.SStrategy s_strategy = 2;
  bool has_s_strategy() const;
  void clear_s_strategy();
  static const int kSStrategyFieldNumber = 2;
  const ::jmc_auto::planning::SStrategy& s_strategy() const;
  ::jmc_auto::planning::SStrategy* mutable_s_strategy();
  ::jmc_auto::planning::SStrategy* release_s_strategy();
  void set_allocated_s_strategy(::jmc_auto::planning::SStrategy* s_strategy);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.LatSampleConfig)
 private:
  void set_has_lat_end_condition();
  void clear_has_lat_end_condition();
  void set_has_s_strategy();
  void clear_has_s_strategy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::LatCondition* lat_end_condition_;
  ::jmc_auto::planning::SStrategy* s_strategy_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatticeSamplingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.LatticeSamplingConfig) */ {
 public:
  LatticeSamplingConfig();
  virtual ~LatticeSamplingConfig();

  LatticeSamplingConfig(const LatticeSamplingConfig& from);

  inline LatticeSamplingConfig& operator=(const LatticeSamplingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatticeSamplingConfig& default_instance();

  static inline const LatticeSamplingConfig* internal_default_instance() {
    return reinterpret_cast<const LatticeSamplingConfig*>(
               &_LatticeSamplingConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(LatticeSamplingConfig* other);

  // implements Message ----------------------------------------------

  inline LatticeSamplingConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  LatticeSamplingConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatticeSamplingConfig& from);
  void MergeFrom(const LatticeSamplingConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatticeSamplingConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.LonSampleConfig lon_sample_config = 1;
  bool has_lon_sample_config() const;
  void clear_lon_sample_config();
  static const int kLonSampleConfigFieldNumber = 1;
  const ::jmc_auto::planning::LonSampleConfig& lon_sample_config() const;
  ::jmc_auto::planning::LonSampleConfig* mutable_lon_sample_config();
  ::jmc_auto::planning::LonSampleConfig* release_lon_sample_config();
  void set_allocated_lon_sample_config(::jmc_auto::planning::LonSampleConfig* lon_sample_config);

  // optional .jmc_auto.planning.LatSampleConfig lat_sample_config = 2;
  bool has_lat_sample_config() const;
  void clear_lat_sample_config();
  static const int kLatSampleConfigFieldNumber = 2;
  const ::jmc_auto::planning::LatSampleConfig& lat_sample_config() const;
  ::jmc_auto::planning::LatSampleConfig* mutable_lat_sample_config();
  ::jmc_auto::planning::LatSampleConfig* release_lat_sample_config();
  void set_allocated_lat_sample_config(::jmc_auto::planning::LatSampleConfig* lat_sample_config);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.LatticeSamplingConfig)
 private:
  void set_has_lon_sample_config();
  void clear_has_lon_sample_config();
  void set_has_lat_sample_config();
  void clear_has_lat_sample_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::LonSampleConfig* lon_sample_config_;
  ::jmc_auto::planning::LatSampleConfig* lat_sample_config_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LonCondition

// optional double s = 1 [default = 0];
inline bool LonCondition::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LonCondition::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LonCondition::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LonCondition::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double LonCondition::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LonCondition.s)
  return s_;
}
inline void LonCondition::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LonCondition.s)
}

// optional double ds = 2 [default = 0];
inline bool LonCondition::has_ds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LonCondition::set_has_ds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LonCondition::clear_has_ds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LonCondition::clear_ds() {
  ds_ = 0;
  clear_has_ds();
}
inline double LonCondition::ds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LonCondition.ds)
  return ds_;
}
inline void LonCondition::set_ds(double value) {
  set_has_ds();
  ds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LonCondition.ds)
}

// optional double dds = 3 [default = 0];
inline bool LonCondition::has_dds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LonCondition::set_has_dds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LonCondition::clear_has_dds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LonCondition::clear_dds() {
  dds_ = 0;
  clear_has_dds();
}
inline double LonCondition::dds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LonCondition.dds)
  return dds_;
}
inline void LonCondition::set_dds(double value) {
  set_has_dds();
  dds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LonCondition.dds)
}

// -------------------------------------------------------------------

// LatCondition

// optional double l = 1 [default = 0];
inline bool LatCondition::has_l() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatCondition::set_has_l() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatCondition::clear_has_l() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatCondition::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double LatCondition::l() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatCondition.l)
  return l_;
}
inline void LatCondition::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LatCondition.l)
}

// optional double dl = 2 [default = 0];
inline bool LatCondition::has_dl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatCondition::set_has_dl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatCondition::clear_has_dl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatCondition::clear_dl() {
  dl_ = 0;
  clear_has_dl();
}
inline double LatCondition::dl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatCondition.dl)
  return dl_;
}
inline void LatCondition::set_dl(double value) {
  set_has_dl();
  dl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LatCondition.dl)
}

// optional double ddl = 3 [default = 0];
inline bool LatCondition::has_ddl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatCondition::set_has_ddl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatCondition::clear_has_ddl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatCondition::clear_ddl() {
  ddl_ = 0;
  clear_has_ddl();
}
inline double LatCondition::ddl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatCondition.ddl)
  return ddl_;
}
inline void LatCondition::set_ddl(double value) {
  set_has_ddl();
  ddl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LatCondition.ddl)
}

// -------------------------------------------------------------------

// TStrategy

// repeated double t_markers = 1;
inline int TStrategy::t_markers_size() const {
  return t_markers_.size();
}
inline void TStrategy::clear_t_markers() {
  t_markers_.Clear();
}
inline double TStrategy::t_markers(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TStrategy.t_markers)
  return t_markers_.Get(index);
}
inline void TStrategy::set_t_markers(int index, double value) {
  t_markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TStrategy.t_markers)
}
inline void TStrategy::add_t_markers(double value) {
  t_markers_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.TStrategy.t_markers)
}
inline const ::google::protobuf::RepeatedField< double >&
TStrategy::t_markers() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.TStrategy.t_markers)
  return t_markers_;
}
inline ::google::protobuf::RepeatedField< double >*
TStrategy::mutable_t_markers() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.TStrategy.t_markers)
  return &t_markers_;
}

// optional double t_step = 2 [default = 0.5];
inline bool TStrategy::has_t_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TStrategy::set_has_t_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TStrategy::clear_has_t_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TStrategy::clear_t_step() {
  t_step_ = 0.5;
  clear_has_t_step();
}
inline double TStrategy::t_step() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TStrategy.t_step)
  return t_step_;
}
inline void TStrategy::set_t_step(double value) {
  set_has_t_step();
  t_step_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TStrategy.t_step)
}

// optional string strategy = 3;
inline bool TStrategy::has_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TStrategy::set_has_strategy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TStrategy::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TStrategy::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strategy();
}
inline const ::std::string& TStrategy::strategy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TStrategy.strategy)
  return strategy_.GetNoArena();
}
inline void TStrategy::set_strategy(const ::std::string& value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TStrategy.strategy)
}
#if LANG_CXX11
inline void TStrategy::set_strategy(::std::string&& value) {
  set_has_strategy();
  strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.TStrategy.strategy)
}
#endif
inline void TStrategy::set_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.TStrategy.strategy)
}
inline void TStrategy::set_strategy(const char* value, size_t size) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.TStrategy.strategy)
}
inline ::std::string* TStrategy::mutable_strategy() {
  set_has_strategy();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TStrategy.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TStrategy::release_strategy() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TStrategy.strategy)
  clear_has_strategy();
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TStrategy::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    set_has_strategy();
  } else {
    clear_has_strategy();
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TStrategy.strategy)
}

// -------------------------------------------------------------------

// SStrategy

// repeated double s_markers = 1;
inline int SStrategy::s_markers_size() const {
  return s_markers_.size();
}
inline void SStrategy::clear_s_markers() {
  s_markers_.Clear();
}
inline double SStrategy::s_markers(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SStrategy.s_markers)
  return s_markers_.Get(index);
}
inline void SStrategy::set_s_markers(int index, double value) {
  s_markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.SStrategy.s_markers)
}
inline void SStrategy::add_s_markers(double value) {
  s_markers_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.SStrategy.s_markers)
}
inline const ::google::protobuf::RepeatedField< double >&
SStrategy::s_markers() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.SStrategy.s_markers)
  return s_markers_;
}
inline ::google::protobuf::RepeatedField< double >*
SStrategy::mutable_s_markers() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.SStrategy.s_markers)
  return &s_markers_;
}

// optional double s_step = 2 [default = 0.5];
inline bool SStrategy::has_s_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SStrategy::set_has_s_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SStrategy::clear_has_s_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SStrategy::clear_s_step() {
  s_step_ = 0.5;
  clear_has_s_step();
}
inline double SStrategy::s_step() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SStrategy.s_step)
  return s_step_;
}
inline void SStrategy::set_s_step(double value) {
  set_has_s_step();
  s_step_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.SStrategy.s_step)
}

// optional string strategy = 3;
inline bool SStrategy::has_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SStrategy::set_has_strategy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SStrategy::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SStrategy::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strategy();
}
inline const ::std::string& SStrategy::strategy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SStrategy.strategy)
  return strategy_.GetNoArena();
}
inline void SStrategy::set_strategy(const ::std::string& value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.SStrategy.strategy)
}
#if LANG_CXX11
inline void SStrategy::set_strategy(::std::string&& value) {
  set_has_strategy();
  strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.SStrategy.strategy)
}
#endif
inline void SStrategy::set_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.SStrategy.strategy)
}
inline void SStrategy::set_strategy(const char* value, size_t size) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.SStrategy.strategy)
}
inline ::std::string* SStrategy::mutable_strategy() {
  set_has_strategy();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.SStrategy.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SStrategy::release_strategy() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.SStrategy.strategy)
  clear_has_strategy();
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SStrategy::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    set_has_strategy();
  } else {
    clear_has_strategy();
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.SStrategy.strategy)
}

// -------------------------------------------------------------------

// LonSampleConfig

// optional .jmc_auto.planning.LonCondition lon_end_condition = 1;
inline bool LonSampleConfig::has_lon_end_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LonSampleConfig::set_has_lon_end_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LonSampleConfig::clear_has_lon_end_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LonSampleConfig::clear_lon_end_condition() {
  if (lon_end_condition_ != NULL) lon_end_condition_->::jmc_auto::planning::LonCondition::Clear();
  clear_has_lon_end_condition();
}
inline const ::jmc_auto::planning::LonCondition& LonSampleConfig::lon_end_condition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LonSampleConfig.lon_end_condition)
  return lon_end_condition_ != NULL ? *lon_end_condition_
                         : *::jmc_auto::planning::LonCondition::internal_default_instance();
}
inline ::jmc_auto::planning::LonCondition* LonSampleConfig::mutable_lon_end_condition() {
  set_has_lon_end_condition();
  if (lon_end_condition_ == NULL) {
    lon_end_condition_ = new ::jmc_auto::planning::LonCondition;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LonSampleConfig.lon_end_condition)
  return lon_end_condition_;
}
inline ::jmc_auto::planning::LonCondition* LonSampleConfig::release_lon_end_condition() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LonSampleConfig.lon_end_condition)
  clear_has_lon_end_condition();
  ::jmc_auto::planning::LonCondition* temp = lon_end_condition_;
  lon_end_condition_ = NULL;
  return temp;
}
inline void LonSampleConfig::set_allocated_lon_end_condition(::jmc_auto::planning::LonCondition* lon_end_condition) {
  delete lon_end_condition_;
  lon_end_condition_ = lon_end_condition;
  if (lon_end_condition) {
    set_has_lon_end_condition();
  } else {
    clear_has_lon_end_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LonSampleConfig.lon_end_condition)
}

// optional .jmc_auto.planning.TStrategy t_strategy = 2;
inline bool LonSampleConfig::has_t_strategy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LonSampleConfig::set_has_t_strategy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LonSampleConfig::clear_has_t_strategy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LonSampleConfig::clear_t_strategy() {
  if (t_strategy_ != NULL) t_strategy_->::jmc_auto::planning::TStrategy::Clear();
  clear_has_t_strategy();
}
inline const ::jmc_auto::planning::TStrategy& LonSampleConfig::t_strategy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LonSampleConfig.t_strategy)
  return t_strategy_ != NULL ? *t_strategy_
                         : *::jmc_auto::planning::TStrategy::internal_default_instance();
}
inline ::jmc_auto::planning::TStrategy* LonSampleConfig::mutable_t_strategy() {
  set_has_t_strategy();
  if (t_strategy_ == NULL) {
    t_strategy_ = new ::jmc_auto::planning::TStrategy;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LonSampleConfig.t_strategy)
  return t_strategy_;
}
inline ::jmc_auto::planning::TStrategy* LonSampleConfig::release_t_strategy() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LonSampleConfig.t_strategy)
  clear_has_t_strategy();
  ::jmc_auto::planning::TStrategy* temp = t_strategy_;
  t_strategy_ = NULL;
  return temp;
}
inline void LonSampleConfig::set_allocated_t_strategy(::jmc_auto::planning::TStrategy* t_strategy) {
  delete t_strategy_;
  t_strategy_ = t_strategy;
  if (t_strategy) {
    set_has_t_strategy();
  } else {
    clear_has_t_strategy();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LonSampleConfig.t_strategy)
}

// -------------------------------------------------------------------

// LatSampleConfig

// optional .jmc_auto.planning.LatCondition lat_end_condition = 1;
inline bool LatSampleConfig::has_lat_end_condition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatSampleConfig::set_has_lat_end_condition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatSampleConfig::clear_has_lat_end_condition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatSampleConfig::clear_lat_end_condition() {
  if (lat_end_condition_ != NULL) lat_end_condition_->::jmc_auto::planning::LatCondition::Clear();
  clear_has_lat_end_condition();
}
inline const ::jmc_auto::planning::LatCondition& LatSampleConfig::lat_end_condition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatSampleConfig.lat_end_condition)
  return lat_end_condition_ != NULL ? *lat_end_condition_
                         : *::jmc_auto::planning::LatCondition::internal_default_instance();
}
inline ::jmc_auto::planning::LatCondition* LatSampleConfig::mutable_lat_end_condition() {
  set_has_lat_end_condition();
  if (lat_end_condition_ == NULL) {
    lat_end_condition_ = new ::jmc_auto::planning::LatCondition;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LatSampleConfig.lat_end_condition)
  return lat_end_condition_;
}
inline ::jmc_auto::planning::LatCondition* LatSampleConfig::release_lat_end_condition() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LatSampleConfig.lat_end_condition)
  clear_has_lat_end_condition();
  ::jmc_auto::planning::LatCondition* temp = lat_end_condition_;
  lat_end_condition_ = NULL;
  return temp;
}
inline void LatSampleConfig::set_allocated_lat_end_condition(::jmc_auto::planning::LatCondition* lat_end_condition) {
  delete lat_end_condition_;
  lat_end_condition_ = lat_end_condition;
  if (lat_end_condition) {
    set_has_lat_end_condition();
  } else {
    clear_has_lat_end_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LatSampleConfig.lat_end_condition)
}

// optional .jmc_auto.planning.SStrategy s_strategy = 2;
inline bool LatSampleConfig::has_s_strategy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatSampleConfig::set_has_s_strategy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatSampleConfig::clear_has_s_strategy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatSampleConfig::clear_s_strategy() {
  if (s_strategy_ != NULL) s_strategy_->::jmc_auto::planning::SStrategy::Clear();
  clear_has_s_strategy();
}
inline const ::jmc_auto::planning::SStrategy& LatSampleConfig::s_strategy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatSampleConfig.s_strategy)
  return s_strategy_ != NULL ? *s_strategy_
                         : *::jmc_auto::planning::SStrategy::internal_default_instance();
}
inline ::jmc_auto::planning::SStrategy* LatSampleConfig::mutable_s_strategy() {
  set_has_s_strategy();
  if (s_strategy_ == NULL) {
    s_strategy_ = new ::jmc_auto::planning::SStrategy;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LatSampleConfig.s_strategy)
  return s_strategy_;
}
inline ::jmc_auto::planning::SStrategy* LatSampleConfig::release_s_strategy() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LatSampleConfig.s_strategy)
  clear_has_s_strategy();
  ::jmc_auto::planning::SStrategy* temp = s_strategy_;
  s_strategy_ = NULL;
  return temp;
}
inline void LatSampleConfig::set_allocated_s_strategy(::jmc_auto::planning::SStrategy* s_strategy) {
  delete s_strategy_;
  s_strategy_ = s_strategy;
  if (s_strategy) {
    set_has_s_strategy();
  } else {
    clear_has_s_strategy();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LatSampleConfig.s_strategy)
}

// -------------------------------------------------------------------

// LatticeSamplingConfig

// optional .jmc_auto.planning.LonSampleConfig lon_sample_config = 1;
inline bool LatticeSamplingConfig::has_lon_sample_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatticeSamplingConfig::set_has_lon_sample_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatticeSamplingConfig::clear_has_lon_sample_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatticeSamplingConfig::clear_lon_sample_config() {
  if (lon_sample_config_ != NULL) lon_sample_config_->::jmc_auto::planning::LonSampleConfig::Clear();
  clear_has_lon_sample_config();
}
inline const ::jmc_auto::planning::LonSampleConfig& LatticeSamplingConfig::lon_sample_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatticeSamplingConfig.lon_sample_config)
  return lon_sample_config_ != NULL ? *lon_sample_config_
                         : *::jmc_auto::planning::LonSampleConfig::internal_default_instance();
}
inline ::jmc_auto::planning::LonSampleConfig* LatticeSamplingConfig::mutable_lon_sample_config() {
  set_has_lon_sample_config();
  if (lon_sample_config_ == NULL) {
    lon_sample_config_ = new ::jmc_auto::planning::LonSampleConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LatticeSamplingConfig.lon_sample_config)
  return lon_sample_config_;
}
inline ::jmc_auto::planning::LonSampleConfig* LatticeSamplingConfig::release_lon_sample_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LatticeSamplingConfig.lon_sample_config)
  clear_has_lon_sample_config();
  ::jmc_auto::planning::LonSampleConfig* temp = lon_sample_config_;
  lon_sample_config_ = NULL;
  return temp;
}
inline void LatticeSamplingConfig::set_allocated_lon_sample_config(::jmc_auto::planning::LonSampleConfig* lon_sample_config) {
  delete lon_sample_config_;
  lon_sample_config_ = lon_sample_config;
  if (lon_sample_config) {
    set_has_lon_sample_config();
  } else {
    clear_has_lon_sample_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LatticeSamplingConfig.lon_sample_config)
}

// optional .jmc_auto.planning.LatSampleConfig lat_sample_config = 2;
inline bool LatticeSamplingConfig::has_lat_sample_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatticeSamplingConfig::set_has_lat_sample_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatticeSamplingConfig::clear_has_lat_sample_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatticeSamplingConfig::clear_lat_sample_config() {
  if (lat_sample_config_ != NULL) lat_sample_config_->::jmc_auto::planning::LatSampleConfig::Clear();
  clear_has_lat_sample_config();
}
inline const ::jmc_auto::planning::LatSampleConfig& LatticeSamplingConfig::lat_sample_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatticeSamplingConfig.lat_sample_config)
  return lat_sample_config_ != NULL ? *lat_sample_config_
                         : *::jmc_auto::planning::LatSampleConfig::internal_default_instance();
}
inline ::jmc_auto::planning::LatSampleConfig* LatticeSamplingConfig::mutable_lat_sample_config() {
  set_has_lat_sample_config();
  if (lat_sample_config_ == NULL) {
    lat_sample_config_ = new ::jmc_auto::planning::LatSampleConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LatticeSamplingConfig.lat_sample_config)
  return lat_sample_config_;
}
inline ::jmc_auto::planning::LatSampleConfig* LatticeSamplingConfig::release_lat_sample_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LatticeSamplingConfig.lat_sample_config)
  clear_has_lat_sample_config();
  ::jmc_auto::planning::LatSampleConfig* temp = lat_sample_config_;
  lat_sample_config_ = NULL;
  return temp;
}
inline void LatticeSamplingConfig::set_allocated_lat_sample_config(::jmc_auto::planning::LatSampleConfig* lat_sample_config) {
  delete lat_sample_config_;
  lat_sample_config_ = lat_sample_config;
  if (lat_sample_config) {
    set_has_lat_sample_config();
  } else {
    clear_has_lat_sample_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LatticeSamplingConfig.lat_sample_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto__INCLUDED
