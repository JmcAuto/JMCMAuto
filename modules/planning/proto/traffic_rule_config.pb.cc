// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/traffic_rule_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/traffic_rule_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class BacksideVehicleConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BacksideVehicleConfig> {
} _BacksideVehicleConfig_default_instance_;
class CrosswalkConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CrosswalkConfig> {
} _CrosswalkConfig_default_instance_;
class DestinationConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestinationConfig> {
} _DestinationConfig_default_instance_;
class KeepClearConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeepClearConfig> {
} _KeepClearConfig_default_instance_;
class ReferenceLineEndConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineEndConfig> {
} _ReferenceLineEndConfig_default_instance_;
class ReroutingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReroutingConfig> {
} _ReroutingConfig_default_instance_;
class StopSignConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopSignConfig> {
} _StopSignConfig_default_instance_;
class TrafficLightConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightConfig> {
} _TrafficLightConfig_default_instance_;
class YieldSignConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YieldSignConfig> {
} _YieldSignConfig_default_instance_;
class TrafficRuleConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficRuleConfig> {
  public:
  const ::jmc_auto::planning::BacksideVehicleConfig* backside_vehicle_;
  const ::jmc_auto::planning::CrosswalkConfig* crosswalk_;
  const ::jmc_auto::planning::DestinationConfig* destination_;
  const ::jmc_auto::planning::KeepClearConfig* keep_clear_;
  const ::jmc_auto::planning::ReferenceLineEndConfig* reference_line_end_;
  const ::jmc_auto::planning::ReroutingConfig* rerouting_;
  const ::jmc_auto::planning::StopSignConfig* stop_sign_;
  const ::jmc_auto::planning::TrafficLightConfig* traffic_light_;
  const ::jmc_auto::planning::YieldSignConfig* yield_sign_;
} _TrafficRuleConfig_default_instance_;
class TrafficRuleConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficRuleConfigs> {
} _TrafficRuleConfigs_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacksideVehicleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacksideVehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacksideVehicleConfig, backside_lane_width_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, max_stop_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, expand_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_strict_l_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_loose_l_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrosswalkConfig, stop_timeout_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationConfig, stop_distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, enable_keep_clear_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, enable_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepClearConfig, align_with_traffic_sign_tolerance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceLineEndConfig, min_reference_line_remain_length_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, cooldown_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReroutingConfig, prepare_rerouting_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSignConfig, stop_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightConfig, max_stop_deceleration_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldSignConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldSignConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldSignConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldSignConfig, start_watch_distance_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, rule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), backside_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), destination_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), keep_clear_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), reference_line_end_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), rerouting_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TrafficRuleConfig_default_instance_), yield_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfig, config_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficRuleConfigs, config_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(BacksideVehicleConfig)},
  { 7, 20, sizeof(CrosswalkConfig)},
  { 28, 34, sizeof(DestinationConfig)},
  { 35, 44, sizeof(KeepClearConfig)},
  { 48, 55, sizeof(ReferenceLineEndConfig)},
  { 57, 64, sizeof(ReroutingConfig)},
  { 66, 73, sizeof(StopSignConfig)},
  { 75, 83, sizeof(TrafficLightConfig)},
  { 86, 94, sizeof(YieldSignConfig)},
  { 97, 114, sizeof(TrafficRuleConfig)},
  { 125, 131, sizeof(TrafficRuleConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BacksideVehicleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrosswalkConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestinationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeepClearConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReferenceLineEndConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReroutingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopSignConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YieldSignConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficRuleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficRuleConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/traffic_rule_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _BacksideVehicleConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CrosswalkConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DestinationConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _KeepClearConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ReferenceLineEndConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ReroutingConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _StopSignConfig_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TrafficLightConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _YieldSignConfig_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _TrafficRuleConfig_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TrafficRuleConfigs_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BacksideVehicleConfig_default_instance_.DefaultConstruct();
  _CrosswalkConfig_default_instance_.DefaultConstruct();
  _DestinationConfig_default_instance_.DefaultConstruct();
  _KeepClearConfig_default_instance_.DefaultConstruct();
  _ReferenceLineEndConfig_default_instance_.DefaultConstruct();
  _ReroutingConfig_default_instance_.DefaultConstruct();
  _StopSignConfig_default_instance_.DefaultConstruct();
  _TrafficLightConfig_default_instance_.DefaultConstruct();
  _YieldSignConfig_default_instance_.DefaultConstruct();
  _TrafficRuleConfig_default_instance_.DefaultConstruct();
  _TrafficRuleConfigs_default_instance_.DefaultConstruct();
  _TrafficRuleConfig_default_instance_.backside_vehicle_ = const_cast< ::jmc_auto::planning::BacksideVehicleConfig*>(
      ::jmc_auto::planning::BacksideVehicleConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.crosswalk_ = const_cast< ::jmc_auto::planning::CrosswalkConfig*>(
      ::jmc_auto::planning::CrosswalkConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.destination_ = const_cast< ::jmc_auto::planning::DestinationConfig*>(
      ::jmc_auto::planning::DestinationConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.keep_clear_ = const_cast< ::jmc_auto::planning::KeepClearConfig*>(
      ::jmc_auto::planning::KeepClearConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.reference_line_end_ = const_cast< ::jmc_auto::planning::ReferenceLineEndConfig*>(
      ::jmc_auto::planning::ReferenceLineEndConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.rerouting_ = const_cast< ::jmc_auto::planning::ReroutingConfig*>(
      ::jmc_auto::planning::ReroutingConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.stop_sign_ = const_cast< ::jmc_auto::planning::StopSignConfig*>(
      ::jmc_auto::planning::StopSignConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.traffic_light_ = const_cast< ::jmc_auto::planning::TrafficLightConfig*>(
      ::jmc_auto::planning::TrafficLightConfig::internal_default_instance());
  _TrafficRuleConfig_default_instance_.yield_sign_ = const_cast< ::jmc_auto::planning::YieldSignConfig*>(
      ::jmc_auto::planning::YieldSignConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n0modules/planning/proto/traffic_rule_co"
      "nfig.proto\022\021jmc_auto.planning\"7\n\025Backsid"
      "eVehicleConfig\022\036\n\023backside_lane_width\030\001 "
      "\001(\001:\0014\"\216\002\n\017CrosswalkConfig\022\030\n\rstop_dista"
      "nce\030\001 \001(\001:\0011\022 \n\025max_stop_deceleration\030\002 "
      "\001(\001:\0014\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0011\022\""
      "\n\027max_valid_stop_distance\030\004 \001(\001:\0013\022\034\n\021ex"
      "pand_s_distance\030\005 \001(\001:\0012\022!\n\026stop_strict_"
      "l_distance\030\006 \001(\001:\0014\022 \n\025stop_loose_l_dist"
      "ance\030\007 \001(\001:\0015\022\030\n\014stop_timeout\030\010 \001(\001:\00210\""
      "/\n\021DestinationConfig\022\032\n\rstop_distance\030\001 "
      "\001(\001:\0030.5\"\246\001\n\017KeepClearConfig\022$\n\026enable_k"
      "eep_clear_zone\030\001 \001(\010:\004true\022\035\n\017enable_jun"
      "ction\030\002 \001(\010:\004true\022\036\n\023min_pass_s_distance"
      "\030\003 \001(\001:\0012\022.\n!align_with_traffic_sign_tol"
      "erance\030\004 \001(\001:\0034.5\"b\n\026ReferenceLineEndCon"
      "fig\022\032\n\rstop_distance\030\001 \001(\001:\0030.5\022,\n min_r"
      "eference_line_remain_length\030\002 \001(\001:\00250\"N\n"
      "\017ReroutingConfig\022\030\n\rcooldown_time\030\001 \001(\001:"
      "\0013\022!\n\026prepare_rerouting_time\030\002 \001(\001:\0012\"A\n"
      "\016StopSignConfig\022\025\n\007enabled\030\001 \001(\010:\004true\022\030"
      "\n\rstop_distance\030\002 \001(\001:\0011\"g\n\022TrafficLight"
      "Config\022\025\n\007enabled\030\001 \001(\010:\004true\022\030\n\rstop_di"
      "stance\030\002 \001(\001:\0011\022 \n\025max_stop_deceleration"
      "\030\003 \001(\001:\0014\"c\n\017YieldSignConfig\022\025\n\007enabled\030"
      "\001 \001(\010:\004true\022\030\n\rstop_distance\030\002 \001(\001:\0011\022\037\n"
      "\024start_watch_distance\030\003 \001(\001:\0012\"\300\006\n\021Traff"
      "icRuleConfig\022<\n\007rule_id\030\001 \001(\0162+.jmc_auto"
      ".planning.TrafficRuleConfig.RuleId\022\017\n\007en"
      "abled\030\002 \001(\010\022D\n\020backside_vehicle\030\003 \001(\0132(."
      "jmc_auto.planning.BacksideVehicleConfigH"
      "\000\0227\n\tcrosswalk\030\004 \001(\0132\".jmc_auto.planning"
      ".CrosswalkConfigH\000\022;\n\013destination\030\005 \001(\0132"
      "$.jmc_auto.planning.DestinationConfigH\000\022"
      "8\n\nkeep_clear\030\006 \001(\0132\".jmc_auto.planning."
      "KeepClearConfigH\000\022G\n\022reference_line_end\030"
      "\007 \001(\0132).jmc_auto.planning.ReferenceLineE"
      "ndConfigH\000\0227\n\trerouting\030\010 \001(\0132\".jmc_auto"
      ".planning.ReroutingConfigH\000\0226\n\tstop_sign"
      "\030\t \001(\0132!.jmc_auto.planning.StopSignConfi"
      "gH\000\022>\n\rtraffic_light\030\n \001(\0132%.jmc_auto.pl"
      "anning.TrafficLightConfigH\000\0228\n\nyield_sig"
      "n\030\013 \001(\0132\".jmc_auto.planning.YieldSignCon"
      "figH\000\"\247\001\n\006RuleId\022\024\n\020BACKSIDE_VEHICLE\020\001\022\r"
      "\n\tCROSSWALK\020\002\022\017\n\013DESTINATION\020\003\022\016\n\nKEEP_C"
      "LEAR\020\004\022\026\n\022REFERENCE_LINE_END\020\005\022\r\n\tREROUT"
      "ING\020\006\022\r\n\tSTOP_SIGN\020\007\022\021\n\rTRAFFIC_LIGHT\020\010\022"
      "\016\n\nYIELD_SIGN\020\tB\010\n\006config\"J\n\022TrafficRule"
      "Configs\0224\n\006config\030\001 \003(\0132$.jmc_auto.plann"
      "ing.TrafficRuleConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1981);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/traffic_rule_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* TrafficRuleConfig_RuleId_descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool TrafficRuleConfig_RuleId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficRuleConfig_RuleId TrafficRuleConfig::BACKSIDE_VEHICLE;
const TrafficRuleConfig_RuleId TrafficRuleConfig::CROSSWALK;
const TrafficRuleConfig_RuleId TrafficRuleConfig::DESTINATION;
const TrafficRuleConfig_RuleId TrafficRuleConfig::KEEP_CLEAR;
const TrafficRuleConfig_RuleId TrafficRuleConfig::REFERENCE_LINE_END;
const TrafficRuleConfig_RuleId TrafficRuleConfig::REROUTING;
const TrafficRuleConfig_RuleId TrafficRuleConfig::STOP_SIGN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::TRAFFIC_LIGHT;
const TrafficRuleConfig_RuleId TrafficRuleConfig::YIELD_SIGN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MIN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MAX;
const int TrafficRuleConfig::RuleId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BacksideVehicleConfig::kBacksideLaneWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BacksideVehicleConfig::BacksideVehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.BacksideVehicleConfig)
}
BacksideVehicleConfig::BacksideVehicleConfig(const BacksideVehicleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backside_lane_width_ = from.backside_lane_width_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.BacksideVehicleConfig)
}

void BacksideVehicleConfig::SharedCtor() {
  _cached_size_ = 0;
  backside_lane_width_ = 4;
}

BacksideVehicleConfig::~BacksideVehicleConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.BacksideVehicleConfig)
  SharedDtor();
}

void BacksideVehicleConfig::SharedDtor() {
}

void BacksideVehicleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacksideVehicleConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BacksideVehicleConfig& BacksideVehicleConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

BacksideVehicleConfig* BacksideVehicleConfig::New(::google::protobuf::Arena* arena) const {
  BacksideVehicleConfig* n = new BacksideVehicleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BacksideVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.BacksideVehicleConfig)
  backside_lane_width_ = 4;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BacksideVehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.BacksideVehicleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double backside_lane_width = 1 [default = 4];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_backside_lane_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backside_lane_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.BacksideVehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.BacksideVehicleConfig)
  return false;
#undef DO_
}

void BacksideVehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.BacksideVehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double backside_lane_width = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->backside_lane_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.BacksideVehicleConfig)
}

::google::protobuf::uint8* BacksideVehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.BacksideVehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double backside_lane_width = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->backside_lane_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.BacksideVehicleConfig)
  return target;
}

size_t BacksideVehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.BacksideVehicleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional double backside_lane_width = 1 [default = 4];
  if (has_backside_lane_width()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacksideVehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BacksideVehicleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BacksideVehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.BacksideVehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.BacksideVehicleConfig)
    MergeFrom(*source);
  }
}

void BacksideVehicleConfig::MergeFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_backside_lane_width()) {
    set_backside_lane_width(from.backside_lane_width());
  }
}

void BacksideVehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacksideVehicleConfig::CopyFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacksideVehicleConfig::IsInitialized() const {
  return true;
}

void BacksideVehicleConfig::Swap(BacksideVehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BacksideVehicleConfig::InternalSwap(BacksideVehicleConfig* other) {
  std::swap(backside_lane_width_, other->backside_lane_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BacksideVehicleConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BacksideVehicleConfig

// optional double backside_lane_width = 1 [default = 4];
bool BacksideVehicleConfig::has_backside_lane_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BacksideVehicleConfig::set_has_backside_lane_width() {
  _has_bits_[0] |= 0x00000001u;
}
void BacksideVehicleConfig::clear_has_backside_lane_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void BacksideVehicleConfig::clear_backside_lane_width() {
  backside_lane_width_ = 4;
  clear_has_backside_lane_width();
}
double BacksideVehicleConfig::backside_lane_width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.BacksideVehicleConfig.backside_lane_width)
  return backside_lane_width_;
}
void BacksideVehicleConfig::set_backside_lane_width(double value) {
  set_has_backside_lane_width();
  backside_lane_width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.BacksideVehicleConfig.backside_lane_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkConfig::kStopDistanceFieldNumber;
const int CrosswalkConfig::kMaxStopDecelerationFieldNumber;
const int CrosswalkConfig::kMinPassSDistanceFieldNumber;
const int CrosswalkConfig::kMaxValidStopDistanceFieldNumber;
const int CrosswalkConfig::kExpandSDistanceFieldNumber;
const int CrosswalkConfig::kStopStrictLDistanceFieldNumber;
const int CrosswalkConfig::kStopLooseLDistanceFieldNumber;
const int CrosswalkConfig::kStopTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkConfig::CrosswalkConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.CrosswalkConfig)
}
CrosswalkConfig::CrosswalkConfig(const CrosswalkConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    reinterpret_cast<char*>(&stop_timeout_) -
    reinterpret_cast<char*>(&stop_distance_) + sizeof(stop_timeout_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.CrosswalkConfig)
}

void CrosswalkConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
  min_pass_s_distance_ = 1;
  max_valid_stop_distance_ = 3;
  expand_s_distance_ = 2;
  stop_strict_l_distance_ = 4;
  stop_loose_l_distance_ = 5;
  stop_timeout_ = 10;
}

CrosswalkConfig::~CrosswalkConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.CrosswalkConfig)
  SharedDtor();
}

void CrosswalkConfig::SharedDtor() {
}

void CrosswalkConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrosswalkConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrosswalkConfig& CrosswalkConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrosswalkConfig* CrosswalkConfig::New(::google::protobuf::Arena* arena) const {
  CrosswalkConfig* n = new CrosswalkConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrosswalkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.CrosswalkConfig)
  if (_has_bits_[0 / 32] & 255u) {
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
    min_pass_s_distance_ = 1;
    max_valid_stop_distance_ = 3;
    expand_s_distance_ = 2;
    stop_strict_l_distance_ = 4;
    stop_loose_l_distance_ = 5;
    stop_timeout_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrosswalkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.CrosswalkConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_stop_deceleration = 2 [default = 4];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_max_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 4 [default = 3];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double expand_s_distance = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_expand_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expand_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_strict_l_distance = 6 [default = 4];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_stop_strict_l_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_strict_l_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_loose_l_distance = 7 [default = 5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_stop_loose_l_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_loose_l_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_timeout = 8 [default = 10];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_stop_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.CrosswalkConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.CrosswalkConfig)
  return false;
#undef DO_
}

void CrosswalkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.CrosswalkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_stop_deceleration(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_valid_stop_distance(), output);
  }

  // optional double expand_s_distance = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->expand_s_distance(), output);
  }

  // optional double stop_strict_l_distance = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stop_strict_l_distance(), output);
  }

  // optional double stop_loose_l_distance = 7 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop_loose_l_distance(), output);
  }

  // optional double stop_timeout = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->stop_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.CrosswalkConfig)
}

::google::protobuf::uint8* CrosswalkConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.CrosswalkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_valid_stop_distance(), target);
  }

  // optional double expand_s_distance = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->expand_s_distance(), target);
  }

  // optional double stop_strict_l_distance = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stop_strict_l_distance(), target);
  }

  // optional double stop_loose_l_distance = 7 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stop_loose_l_distance(), target);
  }

  // optional double stop_timeout = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->stop_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.CrosswalkConfig)
  return target;
}

size_t CrosswalkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.CrosswalkConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double stop_distance = 1 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 2 [default = 4];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 1];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 4 [default = 3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double expand_s_distance = 5 [default = 2];
    if (has_expand_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_strict_l_distance = 6 [default = 4];
    if (has_stop_strict_l_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_loose_l_distance = 7 [default = 5];
    if (has_stop_loose_l_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_timeout = 8 [default = 10];
    if (has_stop_timeout()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrosswalkConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.CrosswalkConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.CrosswalkConfig)
    MergeFrom(*source);
  }
}

void CrosswalkConfig::MergeFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      expand_s_distance_ = from.expand_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_strict_l_distance_ = from.stop_strict_l_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_loose_l_distance_ = from.stop_loose_l_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      stop_timeout_ = from.stop_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrosswalkConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkConfig::CopyFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkConfig::IsInitialized() const {
  return true;
}

void CrosswalkConfig::Swap(CrosswalkConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkConfig::InternalSwap(CrosswalkConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(max_stop_deceleration_, other->max_stop_deceleration_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(expand_s_distance_, other->expand_s_distance_);
  std::swap(stop_strict_l_distance_, other->stop_strict_l_distance_);
  std::swap(stop_loose_l_distance_, other->stop_loose_l_distance_);
  std::swap(stop_timeout_, other->stop_timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrosswalkConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrosswalkConfig

// optional double stop_distance = 1 [default = 1];
bool CrosswalkConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CrosswalkConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void CrosswalkConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void CrosswalkConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
double CrosswalkConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.stop_distance)
  return stop_distance_;
}
void CrosswalkConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.stop_distance)
}

// optional double max_stop_deceleration = 2 [default = 4];
bool CrosswalkConfig::has_max_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CrosswalkConfig::set_has_max_stop_deceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void CrosswalkConfig::clear_has_max_stop_deceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CrosswalkConfig::clear_max_stop_deceleration() {
  max_stop_deceleration_ = 4;
  clear_has_max_stop_deceleration();
}
double CrosswalkConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.max_stop_deceleration)
  return max_stop_deceleration_;
}
void CrosswalkConfig::set_max_stop_deceleration(double value) {
  set_has_max_stop_deceleration();
  max_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.max_stop_deceleration)
}

// optional double min_pass_s_distance = 3 [default = 1];
bool CrosswalkConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CrosswalkConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void CrosswalkConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void CrosswalkConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 1;
  clear_has_min_pass_s_distance();
}
double CrosswalkConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
void CrosswalkConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.min_pass_s_distance)
}

// optional double max_valid_stop_distance = 4 [default = 3];
bool CrosswalkConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CrosswalkConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void CrosswalkConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void CrosswalkConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 3;
  clear_has_max_valid_stop_distance();
}
double CrosswalkConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
void CrosswalkConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.max_valid_stop_distance)
}

// optional double expand_s_distance = 5 [default = 2];
bool CrosswalkConfig::has_expand_s_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CrosswalkConfig::set_has_expand_s_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void CrosswalkConfig::clear_has_expand_s_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void CrosswalkConfig::clear_expand_s_distance() {
  expand_s_distance_ = 2;
  clear_has_expand_s_distance();
}
double CrosswalkConfig::expand_s_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.expand_s_distance)
  return expand_s_distance_;
}
void CrosswalkConfig::set_expand_s_distance(double value) {
  set_has_expand_s_distance();
  expand_s_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.expand_s_distance)
}

// optional double stop_strict_l_distance = 6 [default = 4];
bool CrosswalkConfig::has_stop_strict_l_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CrosswalkConfig::set_has_stop_strict_l_distance() {
  _has_bits_[0] |= 0x00000020u;
}
void CrosswalkConfig::clear_has_stop_strict_l_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
void CrosswalkConfig::clear_stop_strict_l_distance() {
  stop_strict_l_distance_ = 4;
  clear_has_stop_strict_l_distance();
}
double CrosswalkConfig::stop_strict_l_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.stop_strict_l_distance)
  return stop_strict_l_distance_;
}
void CrosswalkConfig::set_stop_strict_l_distance(double value) {
  set_has_stop_strict_l_distance();
  stop_strict_l_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.stop_strict_l_distance)
}

// optional double stop_loose_l_distance = 7 [default = 5];
bool CrosswalkConfig::has_stop_loose_l_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CrosswalkConfig::set_has_stop_loose_l_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void CrosswalkConfig::clear_has_stop_loose_l_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void CrosswalkConfig::clear_stop_loose_l_distance() {
  stop_loose_l_distance_ = 5;
  clear_has_stop_loose_l_distance();
}
double CrosswalkConfig::stop_loose_l_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.stop_loose_l_distance)
  return stop_loose_l_distance_;
}
void CrosswalkConfig::set_stop_loose_l_distance(double value) {
  set_has_stop_loose_l_distance();
  stop_loose_l_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.stop_loose_l_distance)
}

// optional double stop_timeout = 8 [default = 10];
bool CrosswalkConfig::has_stop_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CrosswalkConfig::set_has_stop_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
void CrosswalkConfig::clear_has_stop_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
void CrosswalkConfig::clear_stop_timeout() {
  stop_timeout_ = 10;
  clear_has_stop_timeout();
}
double CrosswalkConfig::stop_timeout() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CrosswalkConfig.stop_timeout)
  return stop_timeout_;
}
void CrosswalkConfig::set_stop_timeout(double value) {
  set_has_stop_timeout();
  stop_timeout_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CrosswalkConfig.stop_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestinationConfig::kStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestinationConfig::DestinationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DestinationConfig)
}
DestinationConfig::DestinationConfig(const DestinationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_distance_ = from.stop_distance_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DestinationConfig)
}

void DestinationConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 0.5;
}

DestinationConfig::~DestinationConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DestinationConfig)
  SharedDtor();
}

void DestinationConfig::SharedDtor() {
}

void DestinationConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestinationConfig& DestinationConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestinationConfig* DestinationConfig::New(::google::protobuf::Arena* arena) const {
  DestinationConfig* n = new DestinationConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestinationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DestinationConfig)
  stop_distance_ = 0.5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestinationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DestinationConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DestinationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DestinationConfig)
  return false;
#undef DO_
}

void DestinationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DestinationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DestinationConfig)
}

::google::protobuf::uint8* DestinationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DestinationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DestinationConfig)
  return target;
}

size_t DestinationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DestinationConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional double stop_distance = 1 [default = 0.5];
  if (has_stop_distance()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DestinationConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestinationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DestinationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DestinationConfig)
    MergeFrom(*source);
  }
}

void DestinationConfig::MergeFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stop_distance()) {
    set_stop_distance(from.stop_distance());
  }
}

void DestinationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationConfig::CopyFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationConfig::IsInitialized() const {
  return true;
}

void DestinationConfig::Swap(DestinationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestinationConfig::InternalSwap(DestinationConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestinationConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestinationConfig

// optional double stop_distance = 1 [default = 0.5];
bool DestinationConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestinationConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void DestinationConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestinationConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
double DestinationConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DestinationConfig.stop_distance)
  return stop_distance_;
}
void DestinationConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DestinationConfig.stop_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepClearConfig::kEnableKeepClearZoneFieldNumber;
const int KeepClearConfig::kEnableJunctionFieldNumber;
const int KeepClearConfig::kMinPassSDistanceFieldNumber;
const int KeepClearConfig::kAlignWithTrafficSignToleranceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepClearConfig::KeepClearConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.KeepClearConfig)
}
KeepClearConfig::KeepClearConfig(const KeepClearConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_keep_clear_zone_, &from.enable_keep_clear_zone_,
    reinterpret_cast<char*>(&align_with_traffic_sign_tolerance_) -
    reinterpret_cast<char*>(&enable_keep_clear_zone_) + sizeof(align_with_traffic_sign_tolerance_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.KeepClearConfig)
}

void KeepClearConfig::SharedCtor() {
  _cached_size_ = 0;
  enable_keep_clear_zone_ = true;
  enable_junction_ = true;
  min_pass_s_distance_ = 2;
  align_with_traffic_sign_tolerance_ = 4.5;
}

KeepClearConfig::~KeepClearConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.KeepClearConfig)
  SharedDtor();
}

void KeepClearConfig::SharedDtor() {
}

void KeepClearConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepClearConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepClearConfig& KeepClearConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeepClearConfig* KeepClearConfig::New(::google::protobuf::Arena* arena) const {
  KeepClearConfig* n = new KeepClearConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepClearConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.KeepClearConfig)
  if (_has_bits_[0 / 32] & 15u) {
    enable_keep_clear_zone_ = true;
    enable_junction_ = true;
    min_pass_s_distance_ = 2;
    align_with_traffic_sign_tolerance_ = 4.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepClearConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.KeepClearConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_keep_clear_zone = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enable_keep_clear_zone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_keep_clear_zone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_junction = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_enable_junction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_junction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_align_with_traffic_sign_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &align_with_traffic_sign_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.KeepClearConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.KeepClearConfig)
  return false;
#undef DO_
}

void KeepClearConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.KeepClearConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_keep_clear_zone(), output);
  }

  // optional bool enable_junction = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_junction(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->align_with_traffic_sign_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.KeepClearConfig)
}

::google::protobuf::uint8* KeepClearConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.KeepClearConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_keep_clear_zone(), target);
  }

  // optional bool enable_junction = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_junction(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->align_with_traffic_sign_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.KeepClearConfig)
  return target;
}

size_t KeepClearConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.KeepClearConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool enable_keep_clear_zone = 1 [default = true];
    if (has_enable_keep_clear_zone()) {
      total_size += 1 + 1;
    }

    // optional bool enable_junction = 2 [default = true];
    if (has_enable_junction()) {
      total_size += 1 + 1;
    }

    // optional double min_pass_s_distance = 3 [default = 2];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
    if (has_align_with_traffic_sign_tolerance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepClearConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepClearConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepClearConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.KeepClearConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.KeepClearConfig)
    MergeFrom(*source);
  }
}

void KeepClearConfig::MergeFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      enable_keep_clear_zone_ = from.enable_keep_clear_zone_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_junction_ = from.enable_junction_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      align_with_traffic_sign_tolerance_ = from.align_with_traffic_sign_tolerance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeepClearConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepClearConfig::CopyFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClearConfig::IsInitialized() const {
  return true;
}

void KeepClearConfig::Swap(KeepClearConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepClearConfig::InternalSwap(KeepClearConfig* other) {
  std::swap(enable_keep_clear_zone_, other->enable_keep_clear_zone_);
  std::swap(enable_junction_, other->enable_junction_);
  std::swap(min_pass_s_distance_, other->min_pass_s_distance_);
  std::swap(align_with_traffic_sign_tolerance_, other->align_with_traffic_sign_tolerance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepClearConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepClearConfig

// optional bool enable_keep_clear_zone = 1 [default = true];
bool KeepClearConfig::has_enable_keep_clear_zone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepClearConfig::set_has_enable_keep_clear_zone() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepClearConfig::clear_has_enable_keep_clear_zone() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepClearConfig::clear_enable_keep_clear_zone() {
  enable_keep_clear_zone_ = true;
  clear_has_enable_keep_clear_zone();
}
bool KeepClearConfig::enable_keep_clear_zone() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.KeepClearConfig.enable_keep_clear_zone)
  return enable_keep_clear_zone_;
}
void KeepClearConfig::set_enable_keep_clear_zone(bool value) {
  set_has_enable_keep_clear_zone();
  enable_keep_clear_zone_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.KeepClearConfig.enable_keep_clear_zone)
}

// optional bool enable_junction = 2 [default = true];
bool KeepClearConfig::has_enable_junction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepClearConfig::set_has_enable_junction() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepClearConfig::clear_has_enable_junction() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepClearConfig::clear_enable_junction() {
  enable_junction_ = true;
  clear_has_enable_junction();
}
bool KeepClearConfig::enable_junction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.KeepClearConfig.enable_junction)
  return enable_junction_;
}
void KeepClearConfig::set_enable_junction(bool value) {
  set_has_enable_junction();
  enable_junction_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.KeepClearConfig.enable_junction)
}

// optional double min_pass_s_distance = 3 [default = 2];
bool KeepClearConfig::has_min_pass_s_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeepClearConfig::set_has_min_pass_s_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void KeepClearConfig::clear_has_min_pass_s_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeepClearConfig::clear_min_pass_s_distance() {
  min_pass_s_distance_ = 2;
  clear_has_min_pass_s_distance();
}
double KeepClearConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.KeepClearConfig.min_pass_s_distance)
  return min_pass_s_distance_;
}
void KeepClearConfig::set_min_pass_s_distance(double value) {
  set_has_min_pass_s_distance();
  min_pass_s_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.KeepClearConfig.min_pass_s_distance)
}

// optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
bool KeepClearConfig::has_align_with_traffic_sign_tolerance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeepClearConfig::set_has_align_with_traffic_sign_tolerance() {
  _has_bits_[0] |= 0x00000008u;
}
void KeepClearConfig::clear_has_align_with_traffic_sign_tolerance() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeepClearConfig::clear_align_with_traffic_sign_tolerance() {
  align_with_traffic_sign_tolerance_ = 4.5;
  clear_has_align_with_traffic_sign_tolerance();
}
double KeepClearConfig::align_with_traffic_sign_tolerance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.KeepClearConfig.align_with_traffic_sign_tolerance)
  return align_with_traffic_sign_tolerance_;
}
void KeepClearConfig::set_align_with_traffic_sign_tolerance(double value) {
  set_has_align_with_traffic_sign_tolerance();
  align_with_traffic_sign_tolerance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.KeepClearConfig.align_with_traffic_sign_tolerance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineEndConfig::kStopDistanceFieldNumber;
const int ReferenceLineEndConfig::kMinReferenceLineRemainLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineEndConfig::ReferenceLineEndConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ReferenceLineEndConfig)
}
ReferenceLineEndConfig::ReferenceLineEndConfig(const ReferenceLineEndConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    reinterpret_cast<char*>(&min_reference_line_remain_length_) -
    reinterpret_cast<char*>(&stop_distance_) + sizeof(min_reference_line_remain_length_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ReferenceLineEndConfig)
}

void ReferenceLineEndConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 0.5;
  min_reference_line_remain_length_ = 50;
}

ReferenceLineEndConfig::~ReferenceLineEndConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ReferenceLineEndConfig)
  SharedDtor();
}

void ReferenceLineEndConfig::SharedDtor() {
}

void ReferenceLineEndConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineEndConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineEndConfig& ReferenceLineEndConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReferenceLineEndConfig* ReferenceLineEndConfig::New(::google::protobuf::Arena* arena) const {
  ReferenceLineEndConfig* n = new ReferenceLineEndConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineEndConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ReferenceLineEndConfig)
  if (_has_bits_[0 / 32] & 3u) {
    stop_distance_ = 0.5;
    min_reference_line_remain_length_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReferenceLineEndConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ReferenceLineEndConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_reference_line_remain_length = 2 [default = 50];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_min_reference_line_remain_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_reference_line_remain_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ReferenceLineEndConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ReferenceLineEndConfig)
  return false;
#undef DO_
}

void ReferenceLineEndConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ReferenceLineEndConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_reference_line_remain_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ReferenceLineEndConfig)
}

::google::protobuf::uint8* ReferenceLineEndConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ReferenceLineEndConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_reference_line_remain_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ReferenceLineEndConfig)
  return target;
}

size_t ReferenceLineEndConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ReferenceLineEndConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_reference_line_remain_length = 2 [default = 50];
    if (has_min_reference_line_remain_length()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineEndConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineEndConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineEndConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ReferenceLineEndConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ReferenceLineEndConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineEndConfig::MergeFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_reference_line_remain_length_ = from.min_reference_line_remain_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineEndConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineEndConfig::CopyFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineEndConfig::IsInitialized() const {
  return true;
}

void ReferenceLineEndConfig::Swap(ReferenceLineEndConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineEndConfig::InternalSwap(ReferenceLineEndConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(min_reference_line_remain_length_, other->min_reference_line_remain_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineEndConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceLineEndConfig

// optional double stop_distance = 1 [default = 0.5];
bool ReferenceLineEndConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReferenceLineEndConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void ReferenceLineEndConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceLineEndConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
double ReferenceLineEndConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ReferenceLineEndConfig.stop_distance)
  return stop_distance_;
}
void ReferenceLineEndConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ReferenceLineEndConfig.stop_distance)
}

// optional double min_reference_line_remain_length = 2 [default = 50];
bool ReferenceLineEndConfig::has_min_reference_line_remain_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReferenceLineEndConfig::set_has_min_reference_line_remain_length() {
  _has_bits_[0] |= 0x00000002u;
}
void ReferenceLineEndConfig::clear_has_min_reference_line_remain_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineEndConfig::clear_min_reference_line_remain_length() {
  min_reference_line_remain_length_ = 50;
  clear_has_min_reference_line_remain_length();
}
double ReferenceLineEndConfig::min_reference_line_remain_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ReferenceLineEndConfig.min_reference_line_remain_length)
  return min_reference_line_remain_length_;
}
void ReferenceLineEndConfig::set_min_reference_line_remain_length(double value) {
  set_has_min_reference_line_remain_length();
  min_reference_line_remain_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ReferenceLineEndConfig.min_reference_line_remain_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReroutingConfig::kCooldownTimeFieldNumber;
const int ReroutingConfig::kPrepareReroutingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReroutingConfig::ReroutingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ReroutingConfig)
}
ReroutingConfig::ReroutingConfig(const ReroutingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cooldown_time_, &from.cooldown_time_,
    reinterpret_cast<char*>(&prepare_rerouting_time_) -
    reinterpret_cast<char*>(&cooldown_time_) + sizeof(prepare_rerouting_time_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ReroutingConfig)
}

void ReroutingConfig::SharedCtor() {
  _cached_size_ = 0;
  cooldown_time_ = 3;
  prepare_rerouting_time_ = 2;
}

ReroutingConfig::~ReroutingConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ReroutingConfig)
  SharedDtor();
}

void ReroutingConfig::SharedDtor() {
}

void ReroutingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReroutingConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReroutingConfig& ReroutingConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReroutingConfig* ReroutingConfig::New(::google::protobuf::Arena* arena) const {
  ReroutingConfig* n = new ReroutingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReroutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ReroutingConfig)
  if (_has_bits_[0 / 32] & 3u) {
    cooldown_time_ = 3;
    prepare_rerouting_time_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReroutingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ReroutingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cooldown_time = 1 [default = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_cooldown_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cooldown_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double prepare_rerouting_time = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_prepare_rerouting_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prepare_rerouting_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ReroutingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ReroutingConfig)
  return false;
#undef DO_
}

void ReroutingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ReroutingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cooldown_time = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cooldown_time(), output);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prepare_rerouting_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ReroutingConfig)
}

::google::protobuf::uint8* ReroutingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ReroutingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cooldown_time = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cooldown_time(), target);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prepare_rerouting_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ReroutingConfig)
  return target;
}

size_t ReroutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ReroutingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double cooldown_time = 1 [default = 3];
    if (has_cooldown_time()) {
      total_size += 1 + 8;
    }

    // optional double prepare_rerouting_time = 2 [default = 2];
    if (has_prepare_rerouting_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReroutingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReroutingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReroutingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ReroutingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ReroutingConfig)
    MergeFrom(*source);
  }
}

void ReroutingConfig::MergeFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cooldown_time_ = from.cooldown_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      prepare_rerouting_time_ = from.prepare_rerouting_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReroutingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingConfig::CopyFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingConfig::IsInitialized() const {
  return true;
}

void ReroutingConfig::Swap(ReroutingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReroutingConfig::InternalSwap(ReroutingConfig* other) {
  std::swap(cooldown_time_, other->cooldown_time_);
  std::swap(prepare_rerouting_time_, other->prepare_rerouting_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReroutingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReroutingConfig

// optional double cooldown_time = 1 [default = 3];
bool ReroutingConfig::has_cooldown_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReroutingConfig::set_has_cooldown_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ReroutingConfig::clear_has_cooldown_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReroutingConfig::clear_cooldown_time() {
  cooldown_time_ = 3;
  clear_has_cooldown_time();
}
double ReroutingConfig::cooldown_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ReroutingConfig.cooldown_time)
  return cooldown_time_;
}
void ReroutingConfig::set_cooldown_time(double value) {
  set_has_cooldown_time();
  cooldown_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ReroutingConfig.cooldown_time)
}

// optional double prepare_rerouting_time = 2 [default = 2];
bool ReroutingConfig::has_prepare_rerouting_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReroutingConfig::set_has_prepare_rerouting_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ReroutingConfig::clear_has_prepare_rerouting_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReroutingConfig::clear_prepare_rerouting_time() {
  prepare_rerouting_time_ = 2;
  clear_has_prepare_rerouting_time();
}
double ReroutingConfig::prepare_rerouting_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ReroutingConfig.prepare_rerouting_time)
  return prepare_rerouting_time_;
}
void ReroutingConfig::set_prepare_rerouting_time(double value) {
  set_has_prepare_rerouting_time();
  prepare_rerouting_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ReroutingConfig.prepare_rerouting_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSignConfig::kEnabledFieldNumber;
const int StopSignConfig::kStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignConfig::StopSignConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.StopSignConfig)
}
StopSignConfig::StopSignConfig(const StopSignConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    reinterpret_cast<char*>(&stop_distance_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(stop_distance_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.StopSignConfig)
}

void StopSignConfig::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = true;
  stop_distance_ = 1;
}

StopSignConfig::~StopSignConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.StopSignConfig)
  SharedDtor();
}

void StopSignConfig::SharedDtor() {
}

void StopSignConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopSignConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSignConfig& StopSignConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopSignConfig* StopSignConfig::New(::google::protobuf::Arena* arena) const {
  StopSignConfig* n = new StopSignConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.StopSignConfig)
  if (_has_bits_[0 / 32] & 3u) {
    enabled_ = true;
    stop_distance_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.StopSignConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.StopSignConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.StopSignConfig)
  return false;
#undef DO_
}

void StopSignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.StopSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.StopSignConfig)
}

::google::protobuf::uint8* StopSignConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.StopSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.StopSignConfig)
  return target;
}

size_t StopSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.StopSignConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopSignConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.StopSignConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.StopSignConfig)
    MergeFrom(*source);
  }
}

void StopSignConfig::MergeFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopSignConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignConfig::CopyFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignConfig::IsInitialized() const {
  return true;
}

void StopSignConfig::Swap(StopSignConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignConfig::InternalSwap(StopSignConfig* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopSignConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopSignConfig

// optional bool enabled = 1 [default = true];
bool StopSignConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopSignConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void StopSignConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopSignConfig::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
bool StopSignConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.StopSignConfig.enabled)
  return enabled_;
}
void StopSignConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.StopSignConfig.enabled)
}

// optional double stop_distance = 2 [default = 1];
bool StopSignConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopSignConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void StopSignConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopSignConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
double StopSignConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.StopSignConfig.stop_distance)
  return stop_distance_;
}
void StopSignConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.StopSignConfig.stop_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightConfig::kEnabledFieldNumber;
const int TrafficLightConfig::kStopDistanceFieldNumber;
const int TrafficLightConfig::kMaxStopDecelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightConfig::TrafficLightConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrafficLightConfig)
}
TrafficLightConfig::TrafficLightConfig(const TrafficLightConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    reinterpret_cast<char*>(&max_stop_deceleration_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(max_stop_deceleration_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrafficLightConfig)
}

void TrafficLightConfig::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = true;
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
}

TrafficLightConfig::~TrafficLightConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrafficLightConfig)
  SharedDtor();
}

void TrafficLightConfig::SharedDtor() {
}

void TrafficLightConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightConfig& TrafficLightConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightConfig* TrafficLightConfig::New(::google::protobuf::Arena* arena) const {
  TrafficLightConfig* n = new TrafficLightConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrafficLightConfig)
  if (_has_bits_[0 / 32] & 7u) {
    enabled_ = true;
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrafficLightConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_stop_deceleration = 3 [default = 4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_max_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrafficLightConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrafficLightConfig)
  return false;
#undef DO_
}

void TrafficLightConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrafficLightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  // optional double max_stop_deceleration = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_stop_deceleration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrafficLightConfig)
}

::google::protobuf::uint8* TrafficLightConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrafficLightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  // optional double max_stop_deceleration = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_stop_deceleration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrafficLightConfig)
  return target;
}

size_t TrafficLightConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrafficLightConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 3 [default = 4];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrafficLightConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrafficLightConfig)
    MergeFrom(*source);
  }
}

void TrafficLightConfig::MergeFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightConfig::CopyFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightConfig::IsInitialized() const {
  return true;
}

void TrafficLightConfig::Swap(TrafficLightConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightConfig::InternalSwap(TrafficLightConfig* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(max_stop_deceleration_, other->max_stop_deceleration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightConfig

// optional bool enabled = 1 [default = true];
bool TrafficLightConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightConfig::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
bool TrafficLightConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightConfig.enabled)
  return enabled_;
}
void TrafficLightConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightConfig.enabled)
}

// optional double stop_distance = 2 [default = 1];
bool TrafficLightConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
double TrafficLightConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightConfig.stop_distance)
  return stop_distance_;
}
void TrafficLightConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightConfig.stop_distance)
}

// optional double max_stop_deceleration = 3 [default = 4];
bool TrafficLightConfig::has_max_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightConfig::set_has_max_stop_deceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightConfig::clear_has_max_stop_deceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightConfig::clear_max_stop_deceleration() {
  max_stop_deceleration_ = 4;
  clear_has_max_stop_deceleration();
}
double TrafficLightConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightConfig.max_stop_deceleration)
  return max_stop_deceleration_;
}
void TrafficLightConfig::set_max_stop_deceleration(double value) {
  set_has_max_stop_deceleration();
  max_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightConfig.max_stop_deceleration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YieldSignConfig::kEnabledFieldNumber;
const int YieldSignConfig::kStopDistanceFieldNumber;
const int YieldSignConfig::kStartWatchDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YieldSignConfig::YieldSignConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.YieldSignConfig)
}
YieldSignConfig::YieldSignConfig(const YieldSignConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    reinterpret_cast<char*>(&start_watch_distance_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(start_watch_distance_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.YieldSignConfig)
}

void YieldSignConfig::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = true;
  stop_distance_ = 1;
  start_watch_distance_ = 2;
}

YieldSignConfig::~YieldSignConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.YieldSignConfig)
  SharedDtor();
}

void YieldSignConfig::SharedDtor() {
}

void YieldSignConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YieldSignConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YieldSignConfig& YieldSignConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

YieldSignConfig* YieldSignConfig::New(::google::protobuf::Arena* arena) const {
  YieldSignConfig* n = new YieldSignConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YieldSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.YieldSignConfig)
  if (_has_bits_[0 / 32] & 7u) {
    enabled_ = true;
    stop_distance_ = 1;
    start_watch_distance_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YieldSignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.YieldSignConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_watch_distance = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_start_watch_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_watch_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.YieldSignConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.YieldSignConfig)
  return false;
#undef DO_
}

void YieldSignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.YieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  // optional double start_watch_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_watch_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.YieldSignConfig)
}

::google::protobuf::uint8* YieldSignConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.YieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  // optional double start_watch_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_watch_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.YieldSignConfig)
  return target;
}

size_t YieldSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.YieldSignConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double start_watch_distance = 3 [default = 2];
    if (has_start_watch_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YieldSignConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.YieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const YieldSignConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YieldSignConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.YieldSignConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.YieldSignConfig)
    MergeFrom(*source);
  }
}

void YieldSignConfig::MergeFrom(const YieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.YieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_watch_distance_ = from.start_watch_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YieldSignConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.YieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldSignConfig::CopyFrom(const YieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.YieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldSignConfig::IsInitialized() const {
  return true;
}

void YieldSignConfig::Swap(YieldSignConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YieldSignConfig::InternalSwap(YieldSignConfig* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(start_watch_distance_, other->start_watch_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YieldSignConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YieldSignConfig

// optional bool enabled = 1 [default = true];
bool YieldSignConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YieldSignConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void YieldSignConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void YieldSignConfig::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
bool YieldSignConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.YieldSignConfig.enabled)
  return enabled_;
}
void YieldSignConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.YieldSignConfig.enabled)
}

// optional double stop_distance = 2 [default = 1];
bool YieldSignConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YieldSignConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void YieldSignConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void YieldSignConfig::clear_stop_distance() {
  stop_distance_ = 1;
  clear_has_stop_distance();
}
double YieldSignConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.YieldSignConfig.stop_distance)
  return stop_distance_;
}
void YieldSignConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.YieldSignConfig.stop_distance)
}

// optional double start_watch_distance = 3 [default = 2];
bool YieldSignConfig::has_start_watch_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YieldSignConfig::set_has_start_watch_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void YieldSignConfig::clear_has_start_watch_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void YieldSignConfig::clear_start_watch_distance() {
  start_watch_distance_ = 2;
  clear_has_start_watch_distance();
}
double YieldSignConfig::start_watch_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.YieldSignConfig.start_watch_distance)
  return start_watch_distance_;
}
void YieldSignConfig::set_start_watch_distance(double value) {
  set_has_start_watch_distance();
  start_watch_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.YieldSignConfig.start_watch_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRuleConfig::kRuleIdFieldNumber;
const int TrafficRuleConfig::kEnabledFieldNumber;
const int TrafficRuleConfig::kBacksideVehicleFieldNumber;
const int TrafficRuleConfig::kCrosswalkFieldNumber;
const int TrafficRuleConfig::kDestinationFieldNumber;
const int TrafficRuleConfig::kKeepClearFieldNumber;
const int TrafficRuleConfig::kReferenceLineEndFieldNumber;
const int TrafficRuleConfig::kReroutingFieldNumber;
const int TrafficRuleConfig::kStopSignFieldNumber;
const int TrafficRuleConfig::kTrafficLightFieldNumber;
const int TrafficRuleConfig::kYieldSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRuleConfig::TrafficRuleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrafficRuleConfig)
}
TrafficRuleConfig::TrafficRuleConfig(const TrafficRuleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    reinterpret_cast<char*>(&rule_id_) -
    reinterpret_cast<char*>(&enabled_) + sizeof(rule_id_));
  clear_has_config();
  switch (from.config_case()) {
    case kBacksideVehicle: {
      mutable_backside_vehicle()->::jmc_auto::planning::BacksideVehicleConfig::MergeFrom(from.backside_vehicle());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::jmc_auto::planning::CrosswalkConfig::MergeFrom(from.crosswalk());
      break;
    }
    case kDestination: {
      mutable_destination()->::jmc_auto::planning::DestinationConfig::MergeFrom(from.destination());
      break;
    }
    case kKeepClear: {
      mutable_keep_clear()->::jmc_auto::planning::KeepClearConfig::MergeFrom(from.keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      mutable_reference_line_end()->::jmc_auto::planning::ReferenceLineEndConfig::MergeFrom(from.reference_line_end());
      break;
    }
    case kRerouting: {
      mutable_rerouting()->::jmc_auto::planning::ReroutingConfig::MergeFrom(from.rerouting());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::jmc_auto::planning::StopSignConfig::MergeFrom(from.stop_sign());
      break;
    }
    case kTrafficLight: {
      mutable_traffic_light()->::jmc_auto::planning::TrafficLightConfig::MergeFrom(from.traffic_light());
      break;
    }
    case kYieldSign: {
      mutable_yield_sign()->::jmc_auto::planning::YieldSignConfig::MergeFrom(from.yield_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrafficRuleConfig)
}

void TrafficRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
  rule_id_ = 1;
  clear_has_config();
}

TrafficRuleConfig::~TrafficRuleConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrafficRuleConfig)
  SharedDtor();
}

void TrafficRuleConfig::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
}

void TrafficRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficRuleConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficRuleConfig& TrafficRuleConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficRuleConfig* TrafficRuleConfig::New(::google::protobuf::Arena* arena) const {
  TrafficRuleConfig* n = new TrafficRuleConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficRuleConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.planning.TrafficRuleConfig)
  switch (config_case()) {
    case kBacksideVehicle: {
      delete config_.backside_vehicle_;
      break;
    }
    case kCrosswalk: {
      delete config_.crosswalk_;
      break;
    }
    case kDestination: {
      delete config_.destination_;
      break;
    }
    case kKeepClear: {
      delete config_.keep_clear_;
      break;
    }
    case kReferenceLineEnd: {
      delete config_.reference_line_end_;
      break;
    }
    case kRerouting: {
      delete config_.rerouting_;
      break;
    }
    case kStopSign: {
      delete config_.stop_sign_;
      break;
    }
    case kTrafficLight: {
      delete config_.traffic_light_;
      break;
    }
    case kYieldSign: {
      delete config_.yield_sign_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void TrafficRuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrafficRuleConfig)
  if (_has_bits_[0 / 32] & 3u) {
    enabled_ = false;
    rule_id_ = 1;
  }
  clear_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrafficRuleConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.TrafficRuleConfig.RuleId rule_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::TrafficRuleConfig_RuleId_IsValid(value)) {
            set_rule_id(static_cast< ::jmc_auto::planning::TrafficRuleConfig_RuleId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.BacksideVehicleConfig backside_vehicle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backside_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.CrosswalkConfig crosswalk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DestinationConfig destination = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.KeepClearConfig keep_clear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keep_clear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ReferenceLineEndConfig reference_line_end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_line_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ReroutingConfig rerouting = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rerouting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.StopSignConfig stop_sign = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.TrafficLightConfig traffic_light = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.YieldSignConfig yield_sign = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrafficRuleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrafficRuleConfig)
  return false;
#undef DO_
}

void TrafficRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrafficRuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rule_id(), output);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  switch (config_case()) {
    case kBacksideVehicle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *config_.backside_vehicle_, output);
      break;
    case kCrosswalk:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *config_.crosswalk_, output);
      break;
    case kDestination:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *config_.destination_, output);
      break;
    case kKeepClear:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *config_.keep_clear_, output);
      break;
    case kReferenceLineEnd:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *config_.reference_line_end_, output);
      break;
    case kRerouting:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *config_.rerouting_, output);
      break;
    case kStopSign:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *config_.stop_sign_, output);
      break;
    case kTrafficLight:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *config_.traffic_light_, output);
      break;
    case kYieldSign:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *config_.yield_sign_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrafficRuleConfig)
}

::google::protobuf::uint8* TrafficRuleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrafficRuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rule_id(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  switch (config_case()) {
    case kBacksideVehicle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *config_.backside_vehicle_, deterministic, target);
      break;
    case kCrosswalk:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *config_.crosswalk_, deterministic, target);
      break;
    case kDestination:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *config_.destination_, deterministic, target);
      break;
    case kKeepClear:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *config_.keep_clear_, deterministic, target);
      break;
    case kReferenceLineEnd:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *config_.reference_line_end_, deterministic, target);
      break;
    case kRerouting:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *config_.rerouting_, deterministic, target);
      break;
    case kStopSign:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *config_.stop_sign_, deterministic, target);
      break;
    case kTrafficLight:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *config_.traffic_light_, deterministic, target);
      break;
    case kYieldSign:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *config_.yield_sign_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrafficRuleConfig)
  return target;
}

size_t TrafficRuleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrafficRuleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.planning.TrafficRuleConfig.RuleId rule_id = 1;
    if (has_rule_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rule_id());
    }

  }
  switch (config_case()) {
    // optional .jmc_auto.planning.BacksideVehicleConfig backside_vehicle = 3;
    case kBacksideVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.backside_vehicle_);
      break;
    }
    // optional .jmc_auto.planning.CrosswalkConfig crosswalk = 4;
    case kCrosswalk: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.crosswalk_);
      break;
    }
    // optional .jmc_auto.planning.DestinationConfig destination = 5;
    case kDestination: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.destination_);
      break;
    }
    // optional .jmc_auto.planning.KeepClearConfig keep_clear = 6;
    case kKeepClear: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.keep_clear_);
      break;
    }
    // optional .jmc_auto.planning.ReferenceLineEndConfig reference_line_end = 7;
    case kReferenceLineEnd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.reference_line_end_);
      break;
    }
    // optional .jmc_auto.planning.ReroutingConfig rerouting = 8;
    case kRerouting: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.rerouting_);
      break;
    }
    // optional .jmc_auto.planning.StopSignConfig stop_sign = 9;
    case kStopSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.stop_sign_);
      break;
    }
    // optional .jmc_auto.planning.TrafficLightConfig traffic_light = 10;
    case kTrafficLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.traffic_light_);
      break;
    }
    // optional .jmc_auto.planning.YieldSignConfig yield_sign = 11;
    case kYieldSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.yield_sign_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRuleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRuleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrafficRuleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrafficRuleConfig)
    MergeFrom(*source);
  }
}

void TrafficRuleConfig::MergeFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      rule_id_ = from.rule_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.config_case()) {
    case kBacksideVehicle: {
      mutable_backside_vehicle()->::jmc_auto::planning::BacksideVehicleConfig::MergeFrom(from.backside_vehicle());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::jmc_auto::planning::CrosswalkConfig::MergeFrom(from.crosswalk());
      break;
    }
    case kDestination: {
      mutable_destination()->::jmc_auto::planning::DestinationConfig::MergeFrom(from.destination());
      break;
    }
    case kKeepClear: {
      mutable_keep_clear()->::jmc_auto::planning::KeepClearConfig::MergeFrom(from.keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      mutable_reference_line_end()->::jmc_auto::planning::ReferenceLineEndConfig::MergeFrom(from.reference_line_end());
      break;
    }
    case kRerouting: {
      mutable_rerouting()->::jmc_auto::planning::ReroutingConfig::MergeFrom(from.rerouting());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::jmc_auto::planning::StopSignConfig::MergeFrom(from.stop_sign());
      break;
    }
    case kTrafficLight: {
      mutable_traffic_light()->::jmc_auto::planning::TrafficLightConfig::MergeFrom(from.traffic_light());
      break;
    }
    case kYieldSign: {
      mutable_yield_sign()->::jmc_auto::planning::YieldSignConfig::MergeFrom(from.yield_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void TrafficRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfig::CopyFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfig::IsInitialized() const {
  return true;
}

void TrafficRuleConfig::Swap(TrafficRuleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficRuleConfig::InternalSwap(TrafficRuleConfig* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(rule_id_, other->rule_id_);
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficRuleConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficRuleConfig

// optional .jmc_auto.planning.TrafficRuleConfig.RuleId rule_id = 1;
bool TrafficRuleConfig::has_rule_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficRuleConfig::set_has_rule_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficRuleConfig::clear_has_rule_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficRuleConfig::clear_rule_id() {
  rule_id_ = 1;
  clear_has_rule_id();
}
::jmc_auto::planning::TrafficRuleConfig_RuleId TrafficRuleConfig::rule_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.rule_id)
  return static_cast< ::jmc_auto::planning::TrafficRuleConfig_RuleId >(rule_id_);
}
void TrafficRuleConfig::set_rule_id(::jmc_auto::planning::TrafficRuleConfig_RuleId value) {
  assert(::jmc_auto::planning::TrafficRuleConfig_RuleId_IsValid(value));
  set_has_rule_id();
  rule_id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficRuleConfig.rule_id)
}

// optional bool enabled = 2;
bool TrafficRuleConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficRuleConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficRuleConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficRuleConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool TrafficRuleConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.enabled)
  return enabled_;
}
void TrafficRuleConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficRuleConfig.enabled)
}

// optional .jmc_auto.planning.BacksideVehicleConfig backside_vehicle = 3;
bool TrafficRuleConfig::has_backside_vehicle() const {
  return config_case() == kBacksideVehicle;
}
void TrafficRuleConfig::set_has_backside_vehicle() {
  _oneof_case_[0] = kBacksideVehicle;
}
void TrafficRuleConfig::clear_backside_vehicle() {
  if (has_backside_vehicle()) {
    delete config_.backside_vehicle_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::BacksideVehicleConfig& TrafficRuleConfig::backside_vehicle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.backside_vehicle)
  return has_backside_vehicle()
      ? *config_.backside_vehicle_
      : ::jmc_auto::planning::BacksideVehicleConfig::default_instance();
}
::jmc_auto::planning::BacksideVehicleConfig* TrafficRuleConfig::mutable_backside_vehicle() {
  if (!has_backside_vehicle()) {
    clear_config();
    set_has_backside_vehicle();
    config_.backside_vehicle_ = new ::jmc_auto::planning::BacksideVehicleConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.backside_vehicle)
  return config_.backside_vehicle_;
}
::jmc_auto::planning::BacksideVehicleConfig* TrafficRuleConfig::release_backside_vehicle() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.backside_vehicle)
  if (has_backside_vehicle()) {
    clear_has_config();
    ::jmc_auto::planning::BacksideVehicleConfig* temp = config_.backside_vehicle_;
    config_.backside_vehicle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_backside_vehicle(::jmc_auto::planning::BacksideVehicleConfig* backside_vehicle) {
  clear_config();
  if (backside_vehicle) {
    set_has_backside_vehicle();
    config_.backside_vehicle_ = backside_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.backside_vehicle)
}

// optional .jmc_auto.planning.CrosswalkConfig crosswalk = 4;
bool TrafficRuleConfig::has_crosswalk() const {
  return config_case() == kCrosswalk;
}
void TrafficRuleConfig::set_has_crosswalk() {
  _oneof_case_[0] = kCrosswalk;
}
void TrafficRuleConfig::clear_crosswalk() {
  if (has_crosswalk()) {
    delete config_.crosswalk_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::CrosswalkConfig& TrafficRuleConfig::crosswalk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.crosswalk)
  return has_crosswalk()
      ? *config_.crosswalk_
      : ::jmc_auto::planning::CrosswalkConfig::default_instance();
}
::jmc_auto::planning::CrosswalkConfig* TrafficRuleConfig::mutable_crosswalk() {
  if (!has_crosswalk()) {
    clear_config();
    set_has_crosswalk();
    config_.crosswalk_ = new ::jmc_auto::planning::CrosswalkConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.crosswalk)
  return config_.crosswalk_;
}
::jmc_auto::planning::CrosswalkConfig* TrafficRuleConfig::release_crosswalk() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.crosswalk)
  if (has_crosswalk()) {
    clear_has_config();
    ::jmc_auto::planning::CrosswalkConfig* temp = config_.crosswalk_;
    config_.crosswalk_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_crosswalk(::jmc_auto::planning::CrosswalkConfig* crosswalk) {
  clear_config();
  if (crosswalk) {
    set_has_crosswalk();
    config_.crosswalk_ = crosswalk;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.crosswalk)
}

// optional .jmc_auto.planning.DestinationConfig destination = 5;
bool TrafficRuleConfig::has_destination() const {
  return config_case() == kDestination;
}
void TrafficRuleConfig::set_has_destination() {
  _oneof_case_[0] = kDestination;
}
void TrafficRuleConfig::clear_destination() {
  if (has_destination()) {
    delete config_.destination_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::DestinationConfig& TrafficRuleConfig::destination() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.destination)
  return has_destination()
      ? *config_.destination_
      : ::jmc_auto::planning::DestinationConfig::default_instance();
}
::jmc_auto::planning::DestinationConfig* TrafficRuleConfig::mutable_destination() {
  if (!has_destination()) {
    clear_config();
    set_has_destination();
    config_.destination_ = new ::jmc_auto::planning::DestinationConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.destination)
  return config_.destination_;
}
::jmc_auto::planning::DestinationConfig* TrafficRuleConfig::release_destination() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.destination)
  if (has_destination()) {
    clear_has_config();
    ::jmc_auto::planning::DestinationConfig* temp = config_.destination_;
    config_.destination_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_destination(::jmc_auto::planning::DestinationConfig* destination) {
  clear_config();
  if (destination) {
    set_has_destination();
    config_.destination_ = destination;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.destination)
}

// optional .jmc_auto.planning.KeepClearConfig keep_clear = 6;
bool TrafficRuleConfig::has_keep_clear() const {
  return config_case() == kKeepClear;
}
void TrafficRuleConfig::set_has_keep_clear() {
  _oneof_case_[0] = kKeepClear;
}
void TrafficRuleConfig::clear_keep_clear() {
  if (has_keep_clear()) {
    delete config_.keep_clear_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::KeepClearConfig& TrafficRuleConfig::keep_clear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.keep_clear)
  return has_keep_clear()
      ? *config_.keep_clear_
      : ::jmc_auto::planning::KeepClearConfig::default_instance();
}
::jmc_auto::planning::KeepClearConfig* TrafficRuleConfig::mutable_keep_clear() {
  if (!has_keep_clear()) {
    clear_config();
    set_has_keep_clear();
    config_.keep_clear_ = new ::jmc_auto::planning::KeepClearConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.keep_clear)
  return config_.keep_clear_;
}
::jmc_auto::planning::KeepClearConfig* TrafficRuleConfig::release_keep_clear() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.keep_clear)
  if (has_keep_clear()) {
    clear_has_config();
    ::jmc_auto::planning::KeepClearConfig* temp = config_.keep_clear_;
    config_.keep_clear_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_keep_clear(::jmc_auto::planning::KeepClearConfig* keep_clear) {
  clear_config();
  if (keep_clear) {
    set_has_keep_clear();
    config_.keep_clear_ = keep_clear;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.keep_clear)
}

// optional .jmc_auto.planning.ReferenceLineEndConfig reference_line_end = 7;
bool TrafficRuleConfig::has_reference_line_end() const {
  return config_case() == kReferenceLineEnd;
}
void TrafficRuleConfig::set_has_reference_line_end() {
  _oneof_case_[0] = kReferenceLineEnd;
}
void TrafficRuleConfig::clear_reference_line_end() {
  if (has_reference_line_end()) {
    delete config_.reference_line_end_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::ReferenceLineEndConfig& TrafficRuleConfig::reference_line_end() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.reference_line_end)
  return has_reference_line_end()
      ? *config_.reference_line_end_
      : ::jmc_auto::planning::ReferenceLineEndConfig::default_instance();
}
::jmc_auto::planning::ReferenceLineEndConfig* TrafficRuleConfig::mutable_reference_line_end() {
  if (!has_reference_line_end()) {
    clear_config();
    set_has_reference_line_end();
    config_.reference_line_end_ = new ::jmc_auto::planning::ReferenceLineEndConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.reference_line_end)
  return config_.reference_line_end_;
}
::jmc_auto::planning::ReferenceLineEndConfig* TrafficRuleConfig::release_reference_line_end() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.reference_line_end)
  if (has_reference_line_end()) {
    clear_has_config();
    ::jmc_auto::planning::ReferenceLineEndConfig* temp = config_.reference_line_end_;
    config_.reference_line_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_reference_line_end(::jmc_auto::planning::ReferenceLineEndConfig* reference_line_end) {
  clear_config();
  if (reference_line_end) {
    set_has_reference_line_end();
    config_.reference_line_end_ = reference_line_end;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.reference_line_end)
}

// optional .jmc_auto.planning.ReroutingConfig rerouting = 8;
bool TrafficRuleConfig::has_rerouting() const {
  return config_case() == kRerouting;
}
void TrafficRuleConfig::set_has_rerouting() {
  _oneof_case_[0] = kRerouting;
}
void TrafficRuleConfig::clear_rerouting() {
  if (has_rerouting()) {
    delete config_.rerouting_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::ReroutingConfig& TrafficRuleConfig::rerouting() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.rerouting)
  return has_rerouting()
      ? *config_.rerouting_
      : ::jmc_auto::planning::ReroutingConfig::default_instance();
}
::jmc_auto::planning::ReroutingConfig* TrafficRuleConfig::mutable_rerouting() {
  if (!has_rerouting()) {
    clear_config();
    set_has_rerouting();
    config_.rerouting_ = new ::jmc_auto::planning::ReroutingConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.rerouting)
  return config_.rerouting_;
}
::jmc_auto::planning::ReroutingConfig* TrafficRuleConfig::release_rerouting() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.rerouting)
  if (has_rerouting()) {
    clear_has_config();
    ::jmc_auto::planning::ReroutingConfig* temp = config_.rerouting_;
    config_.rerouting_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_rerouting(::jmc_auto::planning::ReroutingConfig* rerouting) {
  clear_config();
  if (rerouting) {
    set_has_rerouting();
    config_.rerouting_ = rerouting;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.rerouting)
}

// optional .jmc_auto.planning.StopSignConfig stop_sign = 9;
bool TrafficRuleConfig::has_stop_sign() const {
  return config_case() == kStopSign;
}
void TrafficRuleConfig::set_has_stop_sign() {
  _oneof_case_[0] = kStopSign;
}
void TrafficRuleConfig::clear_stop_sign() {
  if (has_stop_sign()) {
    delete config_.stop_sign_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::StopSignConfig& TrafficRuleConfig::stop_sign() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.stop_sign)
  return has_stop_sign()
      ? *config_.stop_sign_
      : ::jmc_auto::planning::StopSignConfig::default_instance();
}
::jmc_auto::planning::StopSignConfig* TrafficRuleConfig::mutable_stop_sign() {
  if (!has_stop_sign()) {
    clear_config();
    set_has_stop_sign();
    config_.stop_sign_ = new ::jmc_auto::planning::StopSignConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.stop_sign)
  return config_.stop_sign_;
}
::jmc_auto::planning::StopSignConfig* TrafficRuleConfig::release_stop_sign() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.stop_sign)
  if (has_stop_sign()) {
    clear_has_config();
    ::jmc_auto::planning::StopSignConfig* temp = config_.stop_sign_;
    config_.stop_sign_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_stop_sign(::jmc_auto::planning::StopSignConfig* stop_sign) {
  clear_config();
  if (stop_sign) {
    set_has_stop_sign();
    config_.stop_sign_ = stop_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.stop_sign)
}

// optional .jmc_auto.planning.TrafficLightConfig traffic_light = 10;
bool TrafficRuleConfig::has_traffic_light() const {
  return config_case() == kTrafficLight;
}
void TrafficRuleConfig::set_has_traffic_light() {
  _oneof_case_[0] = kTrafficLight;
}
void TrafficRuleConfig::clear_traffic_light() {
  if (has_traffic_light()) {
    delete config_.traffic_light_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::TrafficLightConfig& TrafficRuleConfig::traffic_light() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.traffic_light)
  return has_traffic_light()
      ? *config_.traffic_light_
      : ::jmc_auto::planning::TrafficLightConfig::default_instance();
}
::jmc_auto::planning::TrafficLightConfig* TrafficRuleConfig::mutable_traffic_light() {
  if (!has_traffic_light()) {
    clear_config();
    set_has_traffic_light();
    config_.traffic_light_ = new ::jmc_auto::planning::TrafficLightConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.traffic_light)
  return config_.traffic_light_;
}
::jmc_auto::planning::TrafficLightConfig* TrafficRuleConfig::release_traffic_light() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.traffic_light)
  if (has_traffic_light()) {
    clear_has_config();
    ::jmc_auto::planning::TrafficLightConfig* temp = config_.traffic_light_;
    config_.traffic_light_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_traffic_light(::jmc_auto::planning::TrafficLightConfig* traffic_light) {
  clear_config();
  if (traffic_light) {
    set_has_traffic_light();
    config_.traffic_light_ = traffic_light;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.traffic_light)
}

// optional .jmc_auto.planning.YieldSignConfig yield_sign = 11;
bool TrafficRuleConfig::has_yield_sign() const {
  return config_case() == kYieldSign;
}
void TrafficRuleConfig::set_has_yield_sign() {
  _oneof_case_[0] = kYieldSign;
}
void TrafficRuleConfig::clear_yield_sign() {
  if (has_yield_sign()) {
    delete config_.yield_sign_;
    clear_has_config();
  }
}
 const ::jmc_auto::planning::YieldSignConfig& TrafficRuleConfig::yield_sign() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfig.yield_sign)
  return has_yield_sign()
      ? *config_.yield_sign_
      : ::jmc_auto::planning::YieldSignConfig::default_instance();
}
::jmc_auto::planning::YieldSignConfig* TrafficRuleConfig::mutable_yield_sign() {
  if (!has_yield_sign()) {
    clear_config();
    set_has_yield_sign();
    config_.yield_sign_ = new ::jmc_auto::planning::YieldSignConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfig.yield_sign)
  return config_.yield_sign_;
}
::jmc_auto::planning::YieldSignConfig* TrafficRuleConfig::release_yield_sign() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficRuleConfig.yield_sign)
  if (has_yield_sign()) {
    clear_has_config();
    ::jmc_auto::planning::YieldSignConfig* temp = config_.yield_sign_;
    config_.yield_sign_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TrafficRuleConfig::set_allocated_yield_sign(::jmc_auto::planning::YieldSignConfig* yield_sign) {
  clear_config();
  if (yield_sign) {
    set_has_yield_sign();
    config_.yield_sign_ = yield_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficRuleConfig.yield_sign)
}

bool TrafficRuleConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void TrafficRuleConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
TrafficRuleConfig::ConfigCase TrafficRuleConfig::config_case() const {
  return TrafficRuleConfig::ConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRuleConfigs::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRuleConfigs::TrafficRuleConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrafficRuleConfigs)
}
TrafficRuleConfigs::TrafficRuleConfigs(const TrafficRuleConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrafficRuleConfigs)
}

void TrafficRuleConfigs::SharedCtor() {
  _cached_size_ = 0;
}

TrafficRuleConfigs::~TrafficRuleConfigs() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrafficRuleConfigs)
  SharedDtor();
}

void TrafficRuleConfigs::SharedDtor() {
}

void TrafficRuleConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficRuleConfigs::descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficRuleConfigs& TrafficRuleConfigs::default_instance() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficRuleConfigs* TrafficRuleConfigs::New(::google::protobuf::Arena* arena) const {
  TrafficRuleConfigs* n = new TrafficRuleConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficRuleConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrafficRuleConfigs)
  config_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficRuleConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrafficRuleConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.TrafficRuleConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrafficRuleConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrafficRuleConfigs)
  return false;
#undef DO_
}

void TrafficRuleConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrafficRuleConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrafficRuleConfigs)
}

::google::protobuf::uint8* TrafficRuleConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrafficRuleConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrafficRuleConfigs)
  return target;
}

size_t TrafficRuleConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrafficRuleConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.TrafficRuleConfig config = 1;
  {
    unsigned int count = this->config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficRuleConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRuleConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRuleConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrafficRuleConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrafficRuleConfigs)
    MergeFrom(*source);
  }
}

void TrafficRuleConfigs::MergeFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void TrafficRuleConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfigs::CopyFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfigs::IsInitialized() const {
  return true;
}

void TrafficRuleConfigs::Swap(TrafficRuleConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficRuleConfigs::InternalSwap(TrafficRuleConfigs* other) {
  config_.InternalSwap(&other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficRuleConfigs::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficRuleConfigs

// repeated .jmc_auto.planning.TrafficRuleConfig config = 1;
int TrafficRuleConfigs::config_size() const {
  return config_.size();
}
void TrafficRuleConfigs::clear_config() {
  config_.Clear();
}
const ::jmc_auto::planning::TrafficRuleConfig& TrafficRuleConfigs::config(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficRuleConfigs.config)
  return config_.Get(index);
}
::jmc_auto::planning::TrafficRuleConfig* TrafficRuleConfigs::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficRuleConfigs.config)
  return config_.Mutable(index);
}
::jmc_auto::planning::TrafficRuleConfig* TrafficRuleConfigs::add_config() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.TrafficRuleConfigs.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrafficRuleConfig >*
TrafficRuleConfigs::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.TrafficRuleConfigs.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrafficRuleConfig >&
TrafficRuleConfigs::config() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.TrafficRuleConfigs.config)
  return config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
