// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/rule_based_stop_decider_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class RuleBasedStopDeciderConfig;
class RuleBasedStopDeciderConfigDefaultTypeInternal;
extern RuleBasedStopDeciderConfigDefaultTypeInternal _RuleBasedStopDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto

// ===================================================================

class RuleBasedStopDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.RuleBasedStopDeciderConfig) */ {
 public:
  RuleBasedStopDeciderConfig();
  virtual ~RuleBasedStopDeciderConfig();

  RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from);

  inline RuleBasedStopDeciderConfig& operator=(const RuleBasedStopDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleBasedStopDeciderConfig& default_instance();

  static inline const RuleBasedStopDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const RuleBasedStopDeciderConfig*>(
               &_RuleBasedStopDeciderConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RuleBasedStopDeciderConfig* other);

  // implements Message ----------------------------------------------

  inline RuleBasedStopDeciderConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RuleBasedStopDeciderConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuleBasedStopDeciderConfig& from);
  void MergeFrom(const RuleBasedStopDeciderConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuleBasedStopDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_adc_stop_speed = 1 [default = 0.3];
  bool has_max_adc_stop_speed() const;
  void clear_max_adc_stop_speed();
  static const int kMaxAdcStopSpeedFieldNumber = 1;
  double max_adc_stop_speed() const;
  void set_max_adc_stop_speed(double value);

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  bool has_max_valid_stop_distance() const;
  void clear_max_valid_stop_distance();
  static const int kMaxValidStopDistanceFieldNumber = 2;
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);

  // optional double search_beam_length = 3 [default = 5];
  bool has_search_beam_length() const;
  void clear_search_beam_length();
  static const int kSearchBeamLengthFieldNumber = 3;
  double search_beam_length() const;
  void set_search_beam_length(double value);

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  bool has_search_beam_radius_intensity() const;
  void clear_search_beam_radius_intensity();
  static const int kSearchBeamRadiusIntensityFieldNumber = 4;
  double search_beam_radius_intensity() const;
  void set_search_beam_radius_intensity(double value);

  // optional double search_range = 5 [default = 3.14];
  bool has_search_range() const;
  void clear_search_range();
  static const int kSearchRangeFieldNumber = 5;
  double search_range() const;
  void set_search_range(double value);

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  bool has_is_block_angle_threshold() const;
  void clear_is_block_angle_threshold();
  static const int kIsBlockAngleThresholdFieldNumber = 6;
  double is_block_angle_threshold() const;
  void set_is_block_angle_threshold(double value);

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  bool has_approach_distance_for_lane_change() const;
  void clear_approach_distance_for_lane_change();
  static const int kApproachDistanceForLaneChangeFieldNumber = 10;
  double approach_distance_for_lane_change() const;
  void set_approach_distance_for_lane_change(double value);

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  bool has_urgent_distance_for_lane_change() const;
  void clear_urgent_distance_for_lane_change();
  static const int kUrgentDistanceForLaneChangeFieldNumber = 11;
  double urgent_distance_for_lane_change() const;
  void set_urgent_distance_for_lane_change(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.RuleBasedStopDeciderConfig)
 private:
  void set_has_max_adc_stop_speed();
  void clear_has_max_adc_stop_speed();
  void set_has_max_valid_stop_distance();
  void clear_has_max_valid_stop_distance();
  void set_has_search_beam_length();
  void clear_has_search_beam_length();
  void set_has_search_beam_radius_intensity();
  void clear_has_search_beam_radius_intensity();
  void set_has_search_range();
  void clear_has_search_range();
  void set_has_is_block_angle_threshold();
  void clear_has_is_block_angle_threshold();
  void set_has_approach_distance_for_lane_change();
  void clear_has_approach_distance_for_lane_change();
  void set_has_urgent_distance_for_lane_change();
  void clear_has_urgent_distance_for_lane_change();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double max_adc_stop_speed_;
  double max_valid_stop_distance_;
  double search_beam_length_;
  double search_beam_radius_intensity_;
  double search_range_;
  double is_block_angle_threshold_;
  double approach_distance_for_lane_change_;
  double urgent_distance_for_lane_change_;
  friend struct protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleBasedStopDeciderConfig

// optional double max_adc_stop_speed = 1 [default = 0.3];
inline bool RuleBasedStopDeciderConfig::has_max_adc_stop_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_max_adc_stop_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RuleBasedStopDeciderConfig::clear_has_max_adc_stop_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RuleBasedStopDeciderConfig::clear_max_adc_stop_speed() {
  max_adc_stop_speed_ = 0.3;
  clear_has_max_adc_stop_speed();
}
inline double RuleBasedStopDeciderConfig::max_adc_stop_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
  return max_adc_stop_speed_;
}
inline void RuleBasedStopDeciderConfig::set_max_adc_stop_speed(double value) {
  set_has_max_adc_stop_speed();
  max_adc_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
}

// optional double max_valid_stop_distance = 2 [default = 0.5];
inline bool RuleBasedStopDeciderConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RuleBasedStopDeciderConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RuleBasedStopDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.5;
  clear_has_max_valid_stop_distance();
}
inline double RuleBasedStopDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
inline void RuleBasedStopDeciderConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
}

// optional double search_beam_length = 3 [default = 5];
inline bool RuleBasedStopDeciderConfig::has_search_beam_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_search_beam_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RuleBasedStopDeciderConfig::clear_has_search_beam_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_length() {
  search_beam_length_ = 5;
  clear_has_search_beam_length();
}
inline double RuleBasedStopDeciderConfig::search_beam_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_length)
  return search_beam_length_;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_length(double value) {
  set_has_search_beam_length();
  search_beam_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_length)
}

// optional double search_beam_radius_intensity = 4 [default = 0.08];
inline bool RuleBasedStopDeciderConfig::has_search_beam_radius_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_search_beam_radius_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RuleBasedStopDeciderConfig::clear_has_search_beam_radius_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_radius_intensity() {
  search_beam_radius_intensity_ = 0.08;
  clear_has_search_beam_radius_intensity();
}
inline double RuleBasedStopDeciderConfig::search_beam_radius_intensity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
  return search_beam_radius_intensity_;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_radius_intensity(double value) {
  set_has_search_beam_radius_intensity();
  search_beam_radius_intensity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
}

// optional double search_range = 5 [default = 3.14];
inline bool RuleBasedStopDeciderConfig::has_search_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_search_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RuleBasedStopDeciderConfig::clear_has_search_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RuleBasedStopDeciderConfig::clear_search_range() {
  search_range_ = 3.14;
  clear_has_search_range();
}
inline double RuleBasedStopDeciderConfig::search_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.search_range)
  return search_range_;
}
inline void RuleBasedStopDeciderConfig::set_search_range(double value) {
  set_has_search_range();
  search_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.search_range)
}

// optional double is_block_angle_threshold = 6 [default = 1.57];
inline bool RuleBasedStopDeciderConfig::has_is_block_angle_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_is_block_angle_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RuleBasedStopDeciderConfig::clear_has_is_block_angle_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RuleBasedStopDeciderConfig::clear_is_block_angle_threshold() {
  is_block_angle_threshold_ = 1.57;
  clear_has_is_block_angle_threshold();
}
inline double RuleBasedStopDeciderConfig::is_block_angle_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
  return is_block_angle_threshold_;
}
inline void RuleBasedStopDeciderConfig::set_is_block_angle_threshold(double value) {
  set_has_is_block_angle_threshold();
  is_block_angle_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
}

// optional double approach_distance_for_lane_change = 10 [default = 80];
inline bool RuleBasedStopDeciderConfig::has_approach_distance_for_lane_change() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_approach_distance_for_lane_change() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RuleBasedStopDeciderConfig::clear_has_approach_distance_for_lane_change() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RuleBasedStopDeciderConfig::clear_approach_distance_for_lane_change() {
  approach_distance_for_lane_change_ = 80;
  clear_has_approach_distance_for_lane_change();
}
inline double RuleBasedStopDeciderConfig::approach_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
  return approach_distance_for_lane_change_;
}
inline void RuleBasedStopDeciderConfig::set_approach_distance_for_lane_change(double value) {
  set_has_approach_distance_for_lane_change();
  approach_distance_for_lane_change_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
}

// optional double urgent_distance_for_lane_change = 11 [default = 50];
inline bool RuleBasedStopDeciderConfig::has_urgent_distance_for_lane_change() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RuleBasedStopDeciderConfig::set_has_urgent_distance_for_lane_change() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RuleBasedStopDeciderConfig::clear_has_urgent_distance_for_lane_change() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RuleBasedStopDeciderConfig::clear_urgent_distance_for_lane_change() {
  urgent_distance_for_lane_change_ = 50;
  clear_has_urgent_distance_for_lane_change();
}
inline double RuleBasedStopDeciderConfig::urgent_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
  return urgent_distance_for_lane_change_;
}
inline void RuleBasedStopDeciderConfig::set_urgent_distance_for_lane_change(double value) {
  set_has_urgent_distance_for_lane_change();
  urgent_distance_for_lane_change_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto__INCLUDED
