// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class MoveDestLaneConfigTable;
class MoveDestLaneConfigTableDefaultTypeInternal;
extern MoveDestLaneConfigTableDefaultTypeInternal _MoveDestLaneConfigTable_default_instance_;
class NaviPathDeciderConfig;
class NaviPathDeciderConfigDefaultTypeInternal;
extern NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
class ShiftConfig;
class ShiftConfigDefaultTypeInternal;
extern ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto

// ===================================================================

class NaviPathDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.NaviPathDeciderConfig) */ {
 public:
  NaviPathDeciderConfig();
  virtual ~NaviPathDeciderConfig();

  NaviPathDeciderConfig(const NaviPathDeciderConfig& from);

  inline NaviPathDeciderConfig& operator=(const NaviPathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaviPathDeciderConfig& default_instance();

  static inline const NaviPathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviPathDeciderConfig*>(
               &_NaviPathDeciderConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NaviPathDeciderConfig* other);

  // implements Message ----------------------------------------------

  inline NaviPathDeciderConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  NaviPathDeciderConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NaviPathDeciderConfig& from);
  void MergeFrom(const NaviPathDeciderConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NaviPathDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  bool has_move_dest_lane_config_talbe() const;
  void clear_move_dest_lane_config_talbe();
  static const int kMoveDestLaneConfigTalbeFieldNumber = 7;
  const ::jmc_auto::planning::MoveDestLaneConfigTable& move_dest_lane_config_talbe() const;
  ::jmc_auto::planning::MoveDestLaneConfigTable* mutable_move_dest_lane_config_talbe();
  ::jmc_auto::planning::MoveDestLaneConfigTable* release_move_dest_lane_config_talbe();
  void set_allocated_move_dest_lane_config_talbe(::jmc_auto::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe);

  // optional double max_kappa_threshold = 9 [default = 0];
  bool has_max_kappa_threshold() const;
  void clear_max_kappa_threshold();
  static const int kMaxKappaThresholdFieldNumber = 9;
  double max_kappa_threshold() const;
  void set_max_kappa_threshold(double value);

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  bool has_kappa_move_dest_lane_compensation() const;
  void clear_kappa_move_dest_lane_compensation();
  static const int kKappaMoveDestLaneCompensationFieldNumber = 10;
  double kappa_move_dest_lane_compensation() const;
  void set_kappa_move_dest_lane_compensation(double value);

  // optional uint32 start_plan_point_from = 11 [default = 0];
  bool has_start_plan_point_from() const;
  void clear_start_plan_point_from();
  static const int kStartPlanPointFromFieldNumber = 11;
  ::google::protobuf::uint32 start_plan_point_from() const;
  void set_start_plan_point_from(::google::protobuf::uint32 value);

  // optional uint32 min_look_forward_time = 2 [default = 2];
  bool has_min_look_forward_time() const;
  void clear_min_look_forward_time();
  static const int kMinLookForwardTimeFieldNumber = 2;
  ::google::protobuf::uint32 min_look_forward_time() const;
  void set_min_look_forward_time(::google::protobuf::uint32 value);

  // optional double min_path_length = 1 [default = 5];
  bool has_min_path_length() const;
  void clear_min_path_length();
  static const int kMinPathLengthFieldNumber = 1;
  double min_path_length() const;
  void set_min_path_length(double value);

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  bool has_max_keep_lane_distance() const;
  void clear_max_keep_lane_distance();
  static const int kMaxKeepLaneDistanceFieldNumber = 3;
  double max_keep_lane_distance() const;
  void set_max_keep_lane_distance(double value);

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  bool has_max_keep_lane_shift_y() const;
  void clear_max_keep_lane_shift_y();
  static const int kMaxKeepLaneShiftYFieldNumber = 4;
  double max_keep_lane_shift_y() const;
  void set_max_keep_lane_shift_y(double value);

  // optional double min_keep_lane_offset = 5 [default = 15];
  bool has_min_keep_lane_offset() const;
  void clear_min_keep_lane_offset();
  static const int kMinKeepLaneOffsetFieldNumber = 5;
  double min_keep_lane_offset() const;
  void set_min_keep_lane_offset(double value);

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  bool has_keep_lane_shift_compensation() const;
  void clear_keep_lane_shift_compensation();
  static const int kKeepLaneShiftCompensationFieldNumber = 6;
  double keep_lane_shift_compensation() const;
  void set_keep_lane_shift_compensation(double value);

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  bool has_move_dest_lane_compensation() const;
  void clear_move_dest_lane_compensation();
  static const int kMoveDestLaneCompensationFieldNumber = 8;
  double move_dest_lane_compensation() const;
  void set_move_dest_lane_compensation(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.NaviPathDeciderConfig)
 private:
  void set_has_min_path_length();
  void clear_has_min_path_length();
  void set_has_min_look_forward_time();
  void clear_has_min_look_forward_time();
  void set_has_max_keep_lane_distance();
  void clear_has_max_keep_lane_distance();
  void set_has_max_keep_lane_shift_y();
  void clear_has_max_keep_lane_shift_y();
  void set_has_min_keep_lane_offset();
  void clear_has_min_keep_lane_offset();
  void set_has_keep_lane_shift_compensation();
  void clear_has_keep_lane_shift_compensation();
  void set_has_move_dest_lane_config_talbe();
  void clear_has_move_dest_lane_config_talbe();
  void set_has_move_dest_lane_compensation();
  void clear_has_move_dest_lane_compensation();
  void set_has_max_kappa_threshold();
  void clear_has_max_kappa_threshold();
  void set_has_kappa_move_dest_lane_compensation();
  void clear_has_kappa_move_dest_lane_compensation();
  void set_has_start_plan_point_from();
  void clear_has_start_plan_point_from();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe_;
  double max_kappa_threshold_;
  double kappa_move_dest_lane_compensation_;
  ::google::protobuf::uint32 start_plan_point_from_;
  ::google::protobuf::uint32 min_look_forward_time_;
  double min_path_length_;
  double max_keep_lane_distance_;
  double max_keep_lane_shift_y_;
  double min_keep_lane_offset_;
  double keep_lane_shift_compensation_;
  double move_dest_lane_compensation_;
  friend struct protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveDestLaneConfigTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.MoveDestLaneConfigTable) */ {
 public:
  MoveDestLaneConfigTable();
  virtual ~MoveDestLaneConfigTable();

  MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from);

  inline MoveDestLaneConfigTable& operator=(const MoveDestLaneConfigTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveDestLaneConfigTable& default_instance();

  static inline const MoveDestLaneConfigTable* internal_default_instance() {
    return reinterpret_cast<const MoveDestLaneConfigTable*>(
               &_MoveDestLaneConfigTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MoveDestLaneConfigTable* other);

  // implements Message ----------------------------------------------

  inline MoveDestLaneConfigTable* New() const PROTOBUF_FINAL { return New(NULL); }

  MoveDestLaneConfigTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MoveDestLaneConfigTable& from);
  void MergeFrom(const MoveDestLaneConfigTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MoveDestLaneConfigTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
  int lateral_shift_size() const;
  void clear_lateral_shift();
  static const int kLateralShiftFieldNumber = 1;
  const ::jmc_auto::planning::ShiftConfig& lateral_shift(int index) const;
  ::jmc_auto::planning::ShiftConfig* mutable_lateral_shift(int index);
  ::jmc_auto::planning::ShiftConfig* add_lateral_shift();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig >*
      mutable_lateral_shift();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig >&
      lateral_shift() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.MoveDestLaneConfigTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig > lateral_shift_;
  friend struct protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShiftConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.ShiftConfig) */ {
 public:
  ShiftConfig();
  virtual ~ShiftConfig();

  ShiftConfig(const ShiftConfig& from);

  inline ShiftConfig& operator=(const ShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShiftConfig& default_instance();

  static inline const ShiftConfig* internal_default_instance() {
    return reinterpret_cast<const ShiftConfig*>(
               &_ShiftConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ShiftConfig* other);

  // implements Message ----------------------------------------------

  inline ShiftConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ShiftConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShiftConfig& from);
  void MergeFrom(const ShiftConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShiftConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_speed = 1 [default = 4.16];
  bool has_max_speed() const;
  void clear_max_speed();
  static const int kMaxSpeedFieldNumber = 1;
  double max_speed() const;
  void set_max_speed(double value);

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  bool has_max_move_dest_lane_shift_y() const;
  void clear_max_move_dest_lane_shift_y();
  static const int kMaxMoveDestLaneShiftYFieldNumber = 3;
  double max_move_dest_lane_shift_y() const;
  void set_max_move_dest_lane_shift_y(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.ShiftConfig)
 private:
  void set_has_max_speed();
  void clear_has_max_speed();
  void set_has_max_move_dest_lane_shift_y();
  void clear_has_max_move_dest_lane_shift_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double max_speed_;
  double max_move_dest_lane_shift_y_;
  friend struct protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NaviPathDeciderConfig

// optional double min_path_length = 1 [default = 5];
inline bool NaviPathDeciderConfig::has_min_path_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NaviPathDeciderConfig::set_has_min_path_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NaviPathDeciderConfig::clear_has_min_path_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NaviPathDeciderConfig::clear_min_path_length() {
  min_path_length_ = 5;
  clear_has_min_path_length();
}
inline double NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.min_path_length)
  return min_path_length_;
}
inline void NaviPathDeciderConfig::set_min_path_length(double value) {
  set_has_min_path_length();
  min_path_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
inline bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NaviPathDeciderConfig::set_has_min_look_forward_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NaviPathDeciderConfig::clear_has_min_look_forward_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NaviPathDeciderConfig::clear_min_look_forward_time() {
  min_look_forward_time_ = 2u;
  clear_has_min_look_forward_time();
}
inline ::google::protobuf::uint32 NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.min_look_forward_time)
  return min_look_forward_time_;
}
inline void NaviPathDeciderConfig::set_min_look_forward_time(::google::protobuf::uint32 value) {
  set_has_min_look_forward_time();
  min_look_forward_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double max_keep_lane_distance = 3 [default = 0.8];
inline bool NaviPathDeciderConfig::has_max_keep_lane_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NaviPathDeciderConfig::set_has_max_keep_lane_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NaviPathDeciderConfig::clear_has_max_keep_lane_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_distance() {
  max_keep_lane_distance_ = 0.8;
  clear_has_max_keep_lane_distance();
}
inline double NaviPathDeciderConfig::max_keep_lane_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_distance)
  return max_keep_lane_distance_;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_distance(double value) {
  set_has_max_keep_lane_distance();
  max_keep_lane_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_distance)
}

// optional double max_keep_lane_shift_y = 4 [default = 20];
inline bool NaviPathDeciderConfig::has_max_keep_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NaviPathDeciderConfig::set_has_max_keep_lane_shift_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NaviPathDeciderConfig::clear_has_max_keep_lane_shift_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_shift_y() {
  max_keep_lane_shift_y_ = 20;
  clear_has_max_keep_lane_shift_y();
}
inline double NaviPathDeciderConfig::max_keep_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
  return max_keep_lane_shift_y_;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_shift_y(double value) {
  set_has_max_keep_lane_shift_y();
  max_keep_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
}

// optional double min_keep_lane_offset = 5 [default = 15];
inline bool NaviPathDeciderConfig::has_min_keep_lane_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NaviPathDeciderConfig::set_has_min_keep_lane_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NaviPathDeciderConfig::clear_has_min_keep_lane_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NaviPathDeciderConfig::clear_min_keep_lane_offset() {
  min_keep_lane_offset_ = 15;
  clear_has_min_keep_lane_offset();
}
inline double NaviPathDeciderConfig::min_keep_lane_offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.min_keep_lane_offset)
  return min_keep_lane_offset_;
}
inline void NaviPathDeciderConfig::set_min_keep_lane_offset(double value) {
  set_has_min_keep_lane_offset();
  min_keep_lane_offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.min_keep_lane_offset)
}

// optional double keep_lane_shift_compensation = 6 [default = 0.01];
inline bool NaviPathDeciderConfig::has_keep_lane_shift_compensation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NaviPathDeciderConfig::set_has_keep_lane_shift_compensation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NaviPathDeciderConfig::clear_has_keep_lane_shift_compensation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NaviPathDeciderConfig::clear_keep_lane_shift_compensation() {
  keep_lane_shift_compensation_ = 0.01;
  clear_has_keep_lane_shift_compensation();
}
inline double NaviPathDeciderConfig::keep_lane_shift_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
  return keep_lane_shift_compensation_;
}
inline void NaviPathDeciderConfig::set_keep_lane_shift_compensation(double value) {
  set_has_keep_lane_shift_compensation();
  keep_lane_shift_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
}

// optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
inline bool NaviPathDeciderConfig::has_move_dest_lane_config_talbe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NaviPathDeciderConfig::set_has_move_dest_lane_config_talbe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NaviPathDeciderConfig::clear_has_move_dest_lane_config_talbe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_config_talbe() {
  if (move_dest_lane_config_talbe_ != NULL) move_dest_lane_config_talbe_->::jmc_auto::planning::MoveDestLaneConfigTable::Clear();
  clear_has_move_dest_lane_config_talbe();
}
inline const ::jmc_auto::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::move_dest_lane_config_talbe() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_ != NULL ? *move_dest_lane_config_talbe_
                         : *::jmc_auto::planning::MoveDestLaneConfigTable::internal_default_instance();
}
inline ::jmc_auto::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::mutable_move_dest_lane_config_talbe() {
  set_has_move_dest_lane_config_talbe();
  if (move_dest_lane_config_talbe_ == NULL) {
    move_dest_lane_config_talbe_ = new ::jmc_auto::planning::MoveDestLaneConfigTable;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_;
}
inline ::jmc_auto::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::release_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  clear_has_move_dest_lane_config_talbe();
  ::jmc_auto::planning::MoveDestLaneConfigTable* temp = move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = NULL;
  return temp;
}
inline void NaviPathDeciderConfig::set_allocated_move_dest_lane_config_talbe(::jmc_auto::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  delete move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  if (move_dest_lane_config_talbe) {
    set_has_move_dest_lane_config_talbe();
  } else {
    clear_has_move_dest_lane_config_talbe();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}

// optional double move_dest_lane_compensation = 8 [default = 0.35];
inline bool NaviPathDeciderConfig::has_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NaviPathDeciderConfig::set_has_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NaviPathDeciderConfig::clear_has_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_compensation() {
  move_dest_lane_compensation_ = 0.35;
  clear_has_move_dest_lane_compensation();
}
inline double NaviPathDeciderConfig::move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
  return move_dest_lane_compensation_;
}
inline void NaviPathDeciderConfig::set_move_dest_lane_compensation(double value) {
  set_has_move_dest_lane_compensation();
  move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
}

// optional double max_kappa_threshold = 9 [default = 0];
inline bool NaviPathDeciderConfig::has_max_kappa_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NaviPathDeciderConfig::set_has_max_kappa_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NaviPathDeciderConfig::clear_has_max_kappa_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NaviPathDeciderConfig::clear_max_kappa_threshold() {
  max_kappa_threshold_ = 0;
  clear_has_max_kappa_threshold();
}
inline double NaviPathDeciderConfig::max_kappa_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.max_kappa_threshold)
  return max_kappa_threshold_;
}
inline void NaviPathDeciderConfig::set_max_kappa_threshold(double value) {
  set_has_max_kappa_threshold();
  max_kappa_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.max_kappa_threshold)
}

// optional double kappa_move_dest_lane_compensation = 10 [default = 0];
inline bool NaviPathDeciderConfig::has_kappa_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NaviPathDeciderConfig::set_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NaviPathDeciderConfig::clear_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NaviPathDeciderConfig::clear_kappa_move_dest_lane_compensation() {
  kappa_move_dest_lane_compensation_ = 0;
  clear_has_kappa_move_dest_lane_compensation();
}
inline double NaviPathDeciderConfig::kappa_move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
  return kappa_move_dest_lane_compensation_;
}
inline void NaviPathDeciderConfig::set_kappa_move_dest_lane_compensation(double value) {
  set_has_kappa_move_dest_lane_compensation();
  kappa_move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
}

// optional uint32 start_plan_point_from = 11 [default = 0];
inline bool NaviPathDeciderConfig::has_start_plan_point_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NaviPathDeciderConfig::set_has_start_plan_point_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NaviPathDeciderConfig::clear_has_start_plan_point_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NaviPathDeciderConfig::clear_start_plan_point_from() {
  start_plan_point_from_ = 0u;
  clear_has_start_plan_point_from();
}
inline ::google::protobuf::uint32 NaviPathDeciderConfig::start_plan_point_from() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.start_plan_point_from)
  return start_plan_point_from_;
}
inline void NaviPathDeciderConfig::set_start_plan_point_from(::google::protobuf::uint32 value) {
  set_has_start_plan_point_from();
  start_plan_point_from_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.start_plan_point_from)
}

// -------------------------------------------------------------------

// MoveDestLaneConfigTable

// repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
inline int MoveDestLaneConfigTable::lateral_shift_size() const {
  return lateral_shift_.size();
}
inline void MoveDestLaneConfigTable::clear_lateral_shift() {
  lateral_shift_.Clear();
}
inline const ::jmc_auto::planning::ShiftConfig& MoveDestLaneConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Get(index);
}
inline ::jmc_auto::planning::ShiftConfig* MoveDestLaneConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Mutable(index);
}
inline ::jmc_auto::planning::ShiftConfig* MoveDestLaneConfigTable::add_lateral_shift() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig >*
MoveDestLaneConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return &lateral_shift_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig >&
MoveDestLaneConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_;
}

// -------------------------------------------------------------------

// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
inline bool ShiftConfig::has_max_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShiftConfig::set_has_max_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShiftConfig::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShiftConfig::clear_max_speed() {
  max_speed_ = 4.16;
  clear_has_max_speed();
}
inline double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ShiftConfig.max_speed)
  return max_speed_;
}
inline void ShiftConfig::set_max_speed(double value) {
  set_has_max_speed();
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ShiftConfig.max_speed)
}

// optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
inline bool ShiftConfig::has_max_move_dest_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShiftConfig::set_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShiftConfig::clear_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShiftConfig::clear_max_move_dest_lane_shift_y() {
  max_move_dest_lane_shift_y_ = 0.4;
  clear_has_max_move_dest_lane_shift_y();
}
inline double ShiftConfig::max_move_dest_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ShiftConfig.max_move_dest_lane_shift_y)
  return max_move_dest_lane_shift_y_;
}
inline void ShiftConfig::set_max_move_dest_lane_shift_y(double value) {
  set_has_max_move_dest_lane_shift_y();
  max_move_dest_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ShiftConfig.max_move_dest_lane_shift_y)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto__INCLUDED
