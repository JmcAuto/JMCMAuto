// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_problem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/qp_problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class QuadraticProgrammingProblemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuadraticProgrammingProblem> {
} _QuadraticProgrammingProblem_default_instance_;
class QPMatrixDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QPMatrix> {
} _QPMatrix_default_instance_;
class QuadraticProgrammingProblemSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuadraticProgrammingProblemSet> {
} _QuadraticProgrammingProblemSet_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, param_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, quadratic_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, equality_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, equality_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, inequality_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, inequality_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, input_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblem, optimal_param_),
  3,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPMatrix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPMatrix, row_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPMatrix, col_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QPMatrix, element_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblemSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblemSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuadraticProgrammingProblemSet, problem_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(QuadraticProgrammingProblem)},
  { 23, 31, sizeof(QPMatrix)},
  { 34, 40, sizeof(QuadraticProgrammingProblemSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuadraticProgrammingProblem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QPMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuadraticProgrammingProblemSet_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/qp_problem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _QuadraticProgrammingProblem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _QPMatrix_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _QuadraticProgrammingProblemSet_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _QuadraticProgrammingProblem_default_instance_.DefaultConstruct();
  _QPMatrix_default_instance_.DefaultConstruct();
  _QuadraticProgrammingProblemSet_default_instance_.DefaultConstruct();
  _QuadraticProgrammingProblem_default_instance_.get_mutable()->quadratic_matrix_ = const_cast< ::jmc_auto::planning::QPMatrix*>(
      ::jmc_auto::planning::QPMatrix::internal_default_instance());
  _QuadraticProgrammingProblem_default_instance_.get_mutable()->equality_matrix_ = const_cast< ::jmc_auto::planning::QPMatrix*>(
      ::jmc_auto::planning::QPMatrix::internal_default_instance());
  _QuadraticProgrammingProblem_default_instance_.get_mutable()->inequality_matrix_ = const_cast< ::jmc_auto::planning::QPMatrix*>(
      ::jmc_auto::planning::QPMatrix::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'modules/planning/proto/qp_problem.prot"
      "o\022\021jmc_auto.planning\"\303\002\n\033QuadraticProgra"
      "mmingProblem\022\022\n\nparam_size\030\001 \001(\005\0225\n\020quad"
      "ratic_matrix\030\002 \001(\0132\033.jmc_auto.planning.Q"
      "PMatrix\022\014\n\004bias\030\003 \003(\001\0224\n\017equality_matrix"
      "\030\004 \001(\0132\033.jmc_auto.planning.QPMatrix\022\026\n\016e"
      "quality_value\030\005 \003(\001\0226\n\021inequality_matrix"
      "\030\006 \001(\0132\033.jmc_auto.planning.QPMatrix\022\030\n\020i"
      "nequality_value\030\007 \003(\001\022\024\n\014input_marker\030\010 "
      "\003(\001\022\025\n\roptimal_param\030\t \003(\001\"\?\n\010QPMatrix\022\020"
      "\n\010row_size\030\001 \001(\005\022\020\n\010col_size\030\002 \001(\005\022\017\n\007el"
      "ement\030\003 \003(\001\"a\n\036QuadraticProgrammingProbl"
      "emSet\022\?\n\007problem\030\001 \003(\0132..jmc_auto.planni"
      "ng.QuadraticProgrammingProblem"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/qp_problem.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuadraticProgrammingProblem::kParamSizeFieldNumber;
const int QuadraticProgrammingProblem::kQuadraticMatrixFieldNumber;
const int QuadraticProgrammingProblem::kBiasFieldNumber;
const int QuadraticProgrammingProblem::kEqualityMatrixFieldNumber;
const int QuadraticProgrammingProblem::kEqualityValueFieldNumber;
const int QuadraticProgrammingProblem::kInequalityMatrixFieldNumber;
const int QuadraticProgrammingProblem::kInequalityValueFieldNumber;
const int QuadraticProgrammingProblem::kInputMarkerFieldNumber;
const int QuadraticProgrammingProblem::kOptimalParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuadraticProgrammingProblem::QuadraticProgrammingProblem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.QuadraticProgrammingProblem)
}
QuadraticProgrammingProblem::QuadraticProgrammingProblem(const QuadraticProgrammingProblem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bias_(from.bias_),
      equality_value_(from.equality_value_),
      inequality_value_(from.inequality_value_),
      input_marker_(from.input_marker_),
      optimal_param_(from.optimal_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quadratic_matrix()) {
    quadratic_matrix_ = new ::jmc_auto::planning::QPMatrix(*from.quadratic_matrix_);
  } else {
    quadratic_matrix_ = NULL;
  }
  if (from.has_equality_matrix()) {
    equality_matrix_ = new ::jmc_auto::planning::QPMatrix(*from.equality_matrix_);
  } else {
    equality_matrix_ = NULL;
  }
  if (from.has_inequality_matrix()) {
    inequality_matrix_ = new ::jmc_auto::planning::QPMatrix(*from.inequality_matrix_);
  } else {
    inequality_matrix_ = NULL;
  }
  param_size_ = from.param_size_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.QuadraticProgrammingProblem)
}

void QuadraticProgrammingProblem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&quadratic_matrix_, 0, reinterpret_cast<char*>(&param_size_) -
    reinterpret_cast<char*>(&quadratic_matrix_) + sizeof(param_size_));
}

QuadraticProgrammingProblem::~QuadraticProgrammingProblem() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.QuadraticProgrammingProblem)
  SharedDtor();
}

void QuadraticProgrammingProblem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete quadratic_matrix_;
  }
  if (this != internal_default_instance()) {
    delete equality_matrix_;
  }
  if (this != internal_default_instance()) {
    delete inequality_matrix_;
  }
}

void QuadraticProgrammingProblem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadraticProgrammingProblem::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuadraticProgrammingProblem& QuadraticProgrammingProblem::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuadraticProgrammingProblem* QuadraticProgrammingProblem::New(::google::protobuf::Arena* arena) const {
  QuadraticProgrammingProblem* n = new QuadraticProgrammingProblem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuadraticProgrammingProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.QuadraticProgrammingProblem)
  bias_.Clear();
  equality_value_.Clear();
  inequality_value_.Clear();
  input_marker_.Clear();
  optimal_param_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_quadratic_matrix()) {
      GOOGLE_DCHECK(quadratic_matrix_ != NULL);
      quadratic_matrix_->::jmc_auto::planning::QPMatrix::Clear();
    }
    if (has_equality_matrix()) {
      GOOGLE_DCHECK(equality_matrix_ != NULL);
      equality_matrix_->::jmc_auto::planning::QPMatrix::Clear();
    }
    if (has_inequality_matrix()) {
      GOOGLE_DCHECK(inequality_matrix_ != NULL);
      inequality_matrix_->::jmc_auto::planning::QPMatrix::Clear();
    }
  }
  param_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuadraticProgrammingProblem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.QuadraticProgrammingProblem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_param_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.QPMatrix quadratic_matrix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quadratic_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double bias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_bias())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bias())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.QPMatrix equality_matrix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equality_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double equality_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_equality_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_equality_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.QPMatrix inequality_matrix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inequality_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double inequality_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_inequality_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_inequality_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double input_marker = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65u, input, this->mutable_input_marker())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_input_marker())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double optimal_param = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73u, input, this->mutable_optimal_param())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_optimal_param())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.QuadraticProgrammingProblem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.QuadraticProgrammingProblem)
  return false;
#undef DO_
}

void QuadraticProgrammingProblem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.QuadraticProgrammingProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 param_size = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param_size(), output);
  }

  // optional .jmc_auto.planning.QPMatrix quadratic_matrix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->quadratic_matrix_, output);
  }

  // repeated double bias = 3;
  for (int i = 0, n = this->bias_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->bias(i), output);
  }

  // optional .jmc_auto.planning.QPMatrix equality_matrix = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->equality_matrix_, output);
  }

  // repeated double equality_value = 5;
  for (int i = 0, n = this->equality_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->equality_value(i), output);
  }

  // optional .jmc_auto.planning.QPMatrix inequality_matrix = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->inequality_matrix_, output);
  }

  // repeated double inequality_value = 7;
  for (int i = 0, n = this->inequality_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->inequality_value(i), output);
  }

  // repeated double input_marker = 8;
  for (int i = 0, n = this->input_marker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->input_marker(i), output);
  }

  // repeated double optimal_param = 9;
  for (int i = 0, n = this->optimal_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->optimal_param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.QuadraticProgrammingProblem)
}

::google::protobuf::uint8* QuadraticProgrammingProblem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.QuadraticProgrammingProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 param_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param_size(), target);
  }

  // optional .jmc_auto.planning.QPMatrix quadratic_matrix = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->quadratic_matrix_, deterministic, target);
  }

  // repeated double bias = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->bias_, target);

  // optional .jmc_auto.planning.QPMatrix equality_matrix = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->equality_matrix_, deterministic, target);
  }

  // repeated double equality_value = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->equality_value_, target);

  // optional .jmc_auto.planning.QPMatrix inequality_matrix = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->inequality_matrix_, deterministic, target);
  }

  // repeated double inequality_value = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->inequality_value_, target);

  // repeated double input_marker = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(8, this->input_marker_, target);

  // repeated double optimal_param = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(9, this->optimal_param_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.QuadraticProgrammingProblem)
  return target;
}

size_t QuadraticProgrammingProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.QuadraticProgrammingProblem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double bias = 3;
  {
    unsigned int count = this->bias_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bias_size());
    total_size += data_size;
  }

  // repeated double equality_value = 5;
  {
    unsigned int count = this->equality_value_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->equality_value_size());
    total_size += data_size;
  }

  // repeated double inequality_value = 7;
  {
    unsigned int count = this->inequality_value_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->inequality_value_size());
    total_size += data_size;
  }

  // repeated double input_marker = 8;
  {
    unsigned int count = this->input_marker_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->input_marker_size());
    total_size += data_size;
  }

  // repeated double optimal_param = 9;
  {
    unsigned int count = this->optimal_param_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->optimal_param_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.planning.QPMatrix quadratic_matrix = 2;
    if (has_quadratic_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->quadratic_matrix_);
    }

    // optional .jmc_auto.planning.QPMatrix equality_matrix = 4;
    if (has_equality_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->equality_matrix_);
    }

    // optional .jmc_auto.planning.QPMatrix inequality_matrix = 6;
    if (has_inequality_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inequality_matrix_);
    }

    // optional int32 param_size = 1;
    if (has_param_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadraticProgrammingProblem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  const QuadraticProgrammingProblem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuadraticProgrammingProblem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.QuadraticProgrammingProblem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.QuadraticProgrammingProblem)
    MergeFrom(*source);
  }
}

void QuadraticProgrammingProblem::MergeFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bias_.MergeFrom(from.bias_);
  equality_value_.MergeFrom(from.equality_value_);
  inequality_value_.MergeFrom(from.inequality_value_);
  input_marker_.MergeFrom(from.input_marker_);
  optimal_param_.MergeFrom(from.optimal_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quadratic_matrix()->::jmc_auto::planning::QPMatrix::MergeFrom(from.quadratic_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_equality_matrix()->::jmc_auto::planning::QPMatrix::MergeFrom(from.equality_matrix());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_inequality_matrix()->::jmc_auto::planning::QPMatrix::MergeFrom(from.inequality_matrix());
    }
    if (cached_has_bits & 0x00000008u) {
      param_size_ = from.param_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuadraticProgrammingProblem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadraticProgrammingProblem::CopyFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblem::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblem::Swap(QuadraticProgrammingProblem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuadraticProgrammingProblem::InternalSwap(QuadraticProgrammingProblem* other) {
  bias_.InternalSwap(&other->bias_);
  equality_value_.InternalSwap(&other->equality_value_);
  inequality_value_.InternalSwap(&other->inequality_value_);
  input_marker_.InternalSwap(&other->input_marker_);
  optimal_param_.InternalSwap(&other->optimal_param_);
  std::swap(quadratic_matrix_, other->quadratic_matrix_);
  std::swap(equality_matrix_, other->equality_matrix_);
  std::swap(inequality_matrix_, other->inequality_matrix_);
  std::swap(param_size_, other->param_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuadraticProgrammingProblem::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuadraticProgrammingProblem

// optional int32 param_size = 1;
bool QuadraticProgrammingProblem::has_param_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QuadraticProgrammingProblem::set_has_param_size() {
  _has_bits_[0] |= 0x00000008u;
}
void QuadraticProgrammingProblem::clear_has_param_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void QuadraticProgrammingProblem::clear_param_size() {
  param_size_ = 0;
  clear_has_param_size();
}
::google::protobuf::int32 QuadraticProgrammingProblem::param_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.param_size)
  return param_size_;
}
void QuadraticProgrammingProblem::set_param_size(::google::protobuf::int32 value) {
  set_has_param_size();
  param_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QuadraticProgrammingProblem.param_size)
}

// optional .jmc_auto.planning.QPMatrix quadratic_matrix = 2;
bool QuadraticProgrammingProblem::has_quadratic_matrix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QuadraticProgrammingProblem::set_has_quadratic_matrix() {
  _has_bits_[0] |= 0x00000001u;
}
void QuadraticProgrammingProblem::clear_has_quadratic_matrix() {
  _has_bits_[0] &= ~0x00000001u;
}
void QuadraticProgrammingProblem::clear_quadratic_matrix() {
  if (quadratic_matrix_ != NULL) quadratic_matrix_->::jmc_auto::planning::QPMatrix::Clear();
  clear_has_quadratic_matrix();
}
const ::jmc_auto::planning::QPMatrix& QuadraticProgrammingProblem::quadratic_matrix() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.quadratic_matrix)
  return quadratic_matrix_ != NULL ? *quadratic_matrix_
                         : *::jmc_auto::planning::QPMatrix::internal_default_instance();
}
::jmc_auto::planning::QPMatrix* QuadraticProgrammingProblem::mutable_quadratic_matrix() {
  set_has_quadratic_matrix();
  if (quadratic_matrix_ == NULL) {
    quadratic_matrix_ = new ::jmc_auto::planning::QPMatrix;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.QuadraticProgrammingProblem.quadratic_matrix)
  return quadratic_matrix_;
}
::jmc_auto::planning::QPMatrix* QuadraticProgrammingProblem::release_quadratic_matrix() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.QuadraticProgrammingProblem.quadratic_matrix)
  clear_has_quadratic_matrix();
  ::jmc_auto::planning::QPMatrix* temp = quadratic_matrix_;
  quadratic_matrix_ = NULL;
  return temp;
}
void QuadraticProgrammingProblem::set_allocated_quadratic_matrix(::jmc_auto::planning::QPMatrix* quadratic_matrix) {
  delete quadratic_matrix_;
  quadratic_matrix_ = quadratic_matrix;
  if (quadratic_matrix) {
    set_has_quadratic_matrix();
  } else {
    clear_has_quadratic_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.QuadraticProgrammingProblem.quadratic_matrix)
}

// repeated double bias = 3;
int QuadraticProgrammingProblem::bias_size() const {
  return bias_.size();
}
void QuadraticProgrammingProblem::clear_bias() {
  bias_.Clear();
}
double QuadraticProgrammingProblem::bias(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.bias)
  return bias_.Get(index);
}
void QuadraticProgrammingProblem::set_bias(int index, double value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QuadraticProgrammingProblem.bias)
}
void QuadraticProgrammingProblem::add_bias(double value) {
  bias_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QuadraticProgrammingProblem.bias)
}
const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::bias() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QuadraticProgrammingProblem.bias)
  return bias_;
}
::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QuadraticProgrammingProblem.bias)
  return &bias_;
}

// optional .jmc_auto.planning.QPMatrix equality_matrix = 4;
bool QuadraticProgrammingProblem::has_equality_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QuadraticProgrammingProblem::set_has_equality_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
void QuadraticProgrammingProblem::clear_has_equality_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
void QuadraticProgrammingProblem::clear_equality_matrix() {
  if (equality_matrix_ != NULL) equality_matrix_->::jmc_auto::planning::QPMatrix::Clear();
  clear_has_equality_matrix();
}
const ::jmc_auto::planning::QPMatrix& QuadraticProgrammingProblem::equality_matrix() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.equality_matrix)
  return equality_matrix_ != NULL ? *equality_matrix_
                         : *::jmc_auto::planning::QPMatrix::internal_default_instance();
}
::jmc_auto::planning::QPMatrix* QuadraticProgrammingProblem::mutable_equality_matrix() {
  set_has_equality_matrix();
  if (equality_matrix_ == NULL) {
    equality_matrix_ = new ::jmc_auto::planning::QPMatrix;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.QuadraticProgrammingProblem.equality_matrix)
  return equality_matrix_;
}
::jmc_auto::planning::QPMatrix* QuadraticProgrammingProblem::release_equality_matrix() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.QuadraticProgrammingProblem.equality_matrix)
  clear_has_equality_matrix();
  ::jmc_auto::planning::QPMatrix* temp = equality_matrix_;
  equality_matrix_ = NULL;
  return temp;
}
void QuadraticProgrammingProblem::set_allocated_equality_matrix(::jmc_auto::planning::QPMatrix* equality_matrix) {
  delete equality_matrix_;
  equality_matrix_ = equality_matrix;
  if (equality_matrix) {
    set_has_equality_matrix();
  } else {
    clear_has_equality_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.QuadraticProgrammingProblem.equality_matrix)
}

// repeated double equality_value = 5;
int QuadraticProgrammingProblem::equality_value_size() const {
  return equality_value_.size();
}
void QuadraticProgrammingProblem::clear_equality_value() {
  equality_value_.Clear();
}
double QuadraticProgrammingProblem::equality_value(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.equality_value)
  return equality_value_.Get(index);
}
void QuadraticProgrammingProblem::set_equality_value(int index, double value) {
  equality_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QuadraticProgrammingProblem.equality_value)
}
void QuadraticProgrammingProblem::add_equality_value(double value) {
  equality_value_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QuadraticProgrammingProblem.equality_value)
}
const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::equality_value() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QuadraticProgrammingProblem.equality_value)
  return equality_value_;
}
::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_equality_value() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QuadraticProgrammingProblem.equality_value)
  return &equality_value_;
}

// optional .jmc_auto.planning.QPMatrix inequality_matrix = 6;
bool QuadraticProgrammingProblem::has_inequality_matrix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QuadraticProgrammingProblem::set_has_inequality_matrix() {
  _has_bits_[0] |= 0x00000004u;
}
void QuadraticProgrammingProblem::clear_has_inequality_matrix() {
  _has_bits_[0] &= ~0x00000004u;
}
void QuadraticProgrammingProblem::clear_inequality_matrix() {
  if (inequality_matrix_ != NULL) inequality_matrix_->::jmc_auto::planning::QPMatrix::Clear();
  clear_has_inequality_matrix();
}
const ::jmc_auto::planning::QPMatrix& QuadraticProgrammingProblem::inequality_matrix() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.inequality_matrix)
  return inequality_matrix_ != NULL ? *inequality_matrix_
                         : *::jmc_auto::planning::QPMatrix::internal_default_instance();
}
::jmc_auto::planning::QPMatrix* QuadraticProgrammingProblem::mutable_inequality_matrix() {
  set_has_inequality_matrix();
  if (inequality_matrix_ == NULL) {
    inequality_matrix_ = new ::jmc_auto::planning::QPMatrix;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.QuadraticProgrammingProblem.inequality_matrix)
  return inequality_matrix_;
}
::jmc_auto::planning::QPMatrix* QuadraticProgrammingProblem::release_inequality_matrix() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.QuadraticProgrammingProblem.inequality_matrix)
  clear_has_inequality_matrix();
  ::jmc_auto::planning::QPMatrix* temp = inequality_matrix_;
  inequality_matrix_ = NULL;
  return temp;
}
void QuadraticProgrammingProblem::set_allocated_inequality_matrix(::jmc_auto::planning::QPMatrix* inequality_matrix) {
  delete inequality_matrix_;
  inequality_matrix_ = inequality_matrix;
  if (inequality_matrix) {
    set_has_inequality_matrix();
  } else {
    clear_has_inequality_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.QuadraticProgrammingProblem.inequality_matrix)
}

// repeated double inequality_value = 7;
int QuadraticProgrammingProblem::inequality_value_size() const {
  return inequality_value_.size();
}
void QuadraticProgrammingProblem::clear_inequality_value() {
  inequality_value_.Clear();
}
double QuadraticProgrammingProblem::inequality_value(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.inequality_value)
  return inequality_value_.Get(index);
}
void QuadraticProgrammingProblem::set_inequality_value(int index, double value) {
  inequality_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QuadraticProgrammingProblem.inequality_value)
}
void QuadraticProgrammingProblem::add_inequality_value(double value) {
  inequality_value_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QuadraticProgrammingProblem.inequality_value)
}
const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::inequality_value() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QuadraticProgrammingProblem.inequality_value)
  return inequality_value_;
}
::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_inequality_value() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QuadraticProgrammingProblem.inequality_value)
  return &inequality_value_;
}

// repeated double input_marker = 8;
int QuadraticProgrammingProblem::input_marker_size() const {
  return input_marker_.size();
}
void QuadraticProgrammingProblem::clear_input_marker() {
  input_marker_.Clear();
}
double QuadraticProgrammingProblem::input_marker(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.input_marker)
  return input_marker_.Get(index);
}
void QuadraticProgrammingProblem::set_input_marker(int index, double value) {
  input_marker_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QuadraticProgrammingProblem.input_marker)
}
void QuadraticProgrammingProblem::add_input_marker(double value) {
  input_marker_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QuadraticProgrammingProblem.input_marker)
}
const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::input_marker() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QuadraticProgrammingProblem.input_marker)
  return input_marker_;
}
::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_input_marker() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QuadraticProgrammingProblem.input_marker)
  return &input_marker_;
}

// repeated double optimal_param = 9;
int QuadraticProgrammingProblem::optimal_param_size() const {
  return optimal_param_.size();
}
void QuadraticProgrammingProblem::clear_optimal_param() {
  optimal_param_.Clear();
}
double QuadraticProgrammingProblem::optimal_param(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblem.optimal_param)
  return optimal_param_.Get(index);
}
void QuadraticProgrammingProblem::set_optimal_param(int index, double value) {
  optimal_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QuadraticProgrammingProblem.optimal_param)
}
void QuadraticProgrammingProblem::add_optimal_param(double value) {
  optimal_param_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QuadraticProgrammingProblem.optimal_param)
}
const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::optimal_param() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QuadraticProgrammingProblem.optimal_param)
  return optimal_param_;
}
::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_optimal_param() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QuadraticProgrammingProblem.optimal_param)
  return &optimal_param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QPMatrix::kRowSizeFieldNumber;
const int QPMatrix::kColSizeFieldNumber;
const int QPMatrix::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QPMatrix::QPMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.QPMatrix)
}
QPMatrix::QPMatrix(const QPMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_size_, &from.row_size_,
    reinterpret_cast<char*>(&col_size_) -
    reinterpret_cast<char*>(&row_size_) + sizeof(col_size_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.QPMatrix)
}

void QPMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&row_size_, 0, reinterpret_cast<char*>(&col_size_) -
    reinterpret_cast<char*>(&row_size_) + sizeof(col_size_));
}

QPMatrix::~QPMatrix() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.QPMatrix)
  SharedDtor();
}

void QPMatrix::SharedDtor() {
}

void QPMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QPMatrix::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QPMatrix& QPMatrix::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::InitDefaults();
  return *internal_default_instance();
}

QPMatrix* QPMatrix::New(::google::protobuf::Arena* arena) const {
  QPMatrix* n = new QPMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QPMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.QPMatrix)
  element_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&row_size_, 0, reinterpret_cast<char*>(&col_size_) -
      reinterpret_cast<char*>(&row_size_) + sizeof(col_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QPMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.QPMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_row_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 col_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_col_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double element = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_element())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.QPMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.QPMatrix)
  return false;
#undef DO_
}

void QPMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.QPMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row_size(), output);
  }

  // optional int32 col_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_size(), output);
  }

  // repeated double element = 3;
  for (int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->element(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.QPMatrix)
}

::google::protobuf::uint8* QPMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.QPMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row_size(), target);
  }

  // optional int32 col_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_size(), target);
  }

  // repeated double element = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->element_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.QPMatrix)
  return target;
}

size_t QPMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.QPMatrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double element = 3;
  {
    unsigned int count = this->element_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->element_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 row_size = 1;
    if (has_row_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_size());
    }

    // optional int32 col_size = 2;
    if (has_col_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QPMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const QPMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QPMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.QPMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.QPMatrix)
    MergeFrom(*source);
  }
}

void QPMatrix::MergeFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      row_size_ = from.row_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      col_size_ = from.col_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QPMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QPMatrix::CopyFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPMatrix::IsInitialized() const {
  return true;
}

void QPMatrix::Swap(QPMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QPMatrix::InternalSwap(QPMatrix* other) {
  element_.InternalSwap(&other->element_);
  std::swap(row_size_, other->row_size_);
  std::swap(col_size_, other->col_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QPMatrix::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QPMatrix

// optional int32 row_size = 1;
bool QPMatrix::has_row_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QPMatrix::set_has_row_size() {
  _has_bits_[0] |= 0x00000001u;
}
void QPMatrix::clear_has_row_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void QPMatrix::clear_row_size() {
  row_size_ = 0;
  clear_has_row_size();
}
::google::protobuf::int32 QPMatrix::row_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QPMatrix.row_size)
  return row_size_;
}
void QPMatrix::set_row_size(::google::protobuf::int32 value) {
  set_has_row_size();
  row_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QPMatrix.row_size)
}

// optional int32 col_size = 2;
bool QPMatrix::has_col_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QPMatrix::set_has_col_size() {
  _has_bits_[0] |= 0x00000002u;
}
void QPMatrix::clear_has_col_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void QPMatrix::clear_col_size() {
  col_size_ = 0;
  clear_has_col_size();
}
::google::protobuf::int32 QPMatrix::col_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QPMatrix.col_size)
  return col_size_;
}
void QPMatrix::set_col_size(::google::protobuf::int32 value) {
  set_has_col_size();
  col_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QPMatrix.col_size)
}

// repeated double element = 3;
int QPMatrix::element_size() const {
  return element_.size();
}
void QPMatrix::clear_element() {
  element_.Clear();
}
double QPMatrix::element(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QPMatrix.element)
  return element_.Get(index);
}
void QPMatrix::set_element(int index, double value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.QPMatrix.element)
}
void QPMatrix::add_element(double value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QPMatrix.element)
}
const ::google::protobuf::RepeatedField< double >&
QPMatrix::element() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QPMatrix.element)
  return element_;
}
::google::protobuf::RepeatedField< double >*
QPMatrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QPMatrix.element)
  return &element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuadraticProgrammingProblemSet::kProblemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.QuadraticProgrammingProblemSet)
}
QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet(const QuadraticProgrammingProblemSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      problem_(from.problem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.QuadraticProgrammingProblemSet)
}

void QuadraticProgrammingProblemSet::SharedCtor() {
  _cached_size_ = 0;
}

QuadraticProgrammingProblemSet::~QuadraticProgrammingProblemSet() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.QuadraticProgrammingProblemSet)
  SharedDtor();
}

void QuadraticProgrammingProblemSet::SharedDtor() {
}

void QuadraticProgrammingProblemSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadraticProgrammingProblemSet::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuadraticProgrammingProblemSet& QuadraticProgrammingProblemSet::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuadraticProgrammingProblemSet* QuadraticProgrammingProblemSet::New(::google::protobuf::Arena* arena) const {
  QuadraticProgrammingProblemSet* n = new QuadraticProgrammingProblemSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuadraticProgrammingProblemSet::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  problem_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuadraticProgrammingProblemSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.QuadraticProgrammingProblem problem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_problem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.QuadraticProgrammingProblemSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.QuadraticProgrammingProblemSet)
  return false;
#undef DO_
}

void QuadraticProgrammingProblemSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.QuadraticProgrammingProblem problem = 1;
  for (unsigned int i = 0, n = this->problem_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->problem(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.QuadraticProgrammingProblemSet)
}

::google::protobuf::uint8* QuadraticProgrammingProblemSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.QuadraticProgrammingProblem problem = 1;
  for (unsigned int i = 0, n = this->problem_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->problem(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.QuadraticProgrammingProblemSet)
  return target;
}

size_t QuadraticProgrammingProblemSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.QuadraticProgrammingProblem problem = 1;
  {
    unsigned int count = this->problem_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->problem(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadraticProgrammingProblemSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  const QuadraticProgrammingProblemSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuadraticProgrammingProblemSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.QuadraticProgrammingProblemSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.QuadraticProgrammingProblemSet)
    MergeFrom(*source);
  }
}

void QuadraticProgrammingProblemSet::MergeFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  problem_.MergeFrom(from.problem_);
}

void QuadraticProgrammingProblemSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadraticProgrammingProblemSet::CopyFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblemSet::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblemSet::Swap(QuadraticProgrammingProblemSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuadraticProgrammingProblemSet::InternalSwap(QuadraticProgrammingProblemSet* other) {
  problem_.InternalSwap(&other->problem_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuadraticProgrammingProblemSet::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuadraticProgrammingProblemSet

// repeated .jmc_auto.planning.QuadraticProgrammingProblem problem = 1;
int QuadraticProgrammingProblemSet::problem_size() const {
  return problem_.size();
}
void QuadraticProgrammingProblemSet::clear_problem() {
  problem_.Clear();
}
const ::jmc_auto::planning::QuadraticProgrammingProblem& QuadraticProgrammingProblemSet::problem(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Get(index);
}
::jmc_auto::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::mutable_problem(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Mutable(index);
}
::jmc_auto::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::add_problem() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::QuadraticProgrammingProblem >*
QuadraticProgrammingProblemSet::mutable_problem() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.QuadraticProgrammingProblemSet.problem)
  return &problem_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::QuadraticProgrammingProblem >&
QuadraticProgrammingProblemSet::problem() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.QuadraticProgrammingProblemSet.problem)
  return problem_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
