// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/path_bounds_decider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/path_bounds_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class PathBoundsDeciderConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PathBoundsDeciderConfig> {
} _PathBoundsDeciderConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, is_lane_borrowing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, is_pull_over_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, pull_over_destination_to_adc_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, pull_over_destination_to_pathend_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, pull_over_road_edge_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathBoundsDeciderConfig, pull_over_approach_lon_distance_adjust_factor_),
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(PathBoundsDeciderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathBoundsDeciderConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/path_bounds_decider_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PathBoundsDeciderConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PathBoundsDeciderConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n7modules/planning/proto/path_bounds_dec"
      "ider_config.proto\022\021jmc_auto.planning\"\226\002\n"
      "\027PathBoundsDeciderConfig\022\031\n\021is_lane_borr"
      "owing\030\001 \001(\010\022\024\n\014is_pull_over\030\002 \001(\010\022/\n#pul"
      "l_over_destination_to_adc_buffer\030\003 \001(\001:\002"
      "25\0223\n\'pull_over_destination_to_pathend_b"
      "uffer\030\004 \001(\001:\00210\022(\n\032pull_over_road_edge_b"
      "uffer\030\005 \001(\001:\0040.15\022:\n-pull_over_approach_"
      "lon_distance_adjust_factor\030\006 \001(\001:\0031.5"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/path_bounds_decider_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathBoundsDeciderConfig::kIsLaneBorrowingFieldNumber;
const int PathBoundsDeciderConfig::kIsPullOverFieldNumber;
const int PathBoundsDeciderConfig::kPullOverDestinationToAdcBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverDestinationToPathendBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverRoadEdgeBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverApproachLonDistanceAdjustFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathBoundsDeciderConfig::PathBoundsDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PathBoundsDeciderConfig)
}
PathBoundsDeciderConfig::PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_lane_borrowing_, &from.is_lane_borrowing_,
    reinterpret_cast<char*>(&pull_over_approach_lon_distance_adjust_factor_) -
    reinterpret_cast<char*>(&is_lane_borrowing_) + sizeof(pull_over_approach_lon_distance_adjust_factor_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PathBoundsDeciderConfig)
}

void PathBoundsDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_lane_borrowing_, 0, reinterpret_cast<char*>(&is_pull_over_) -
    reinterpret_cast<char*>(&is_lane_borrowing_) + sizeof(is_pull_over_));
  pull_over_destination_to_adc_buffer_ = 25;
  pull_over_destination_to_pathend_buffer_ = 10;
  pull_over_road_edge_buffer_ = 0.15;
  pull_over_approach_lon_distance_adjust_factor_ = 1.5;
}

PathBoundsDeciderConfig::~PathBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PathBoundsDeciderConfig)
  SharedDtor();
}

void PathBoundsDeciderConfig::SharedDtor() {
}

void PathBoundsDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathBoundsDeciderConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathBoundsDeciderConfig& PathBoundsDeciderConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathBoundsDeciderConfig* PathBoundsDeciderConfig::New(::google::protobuf::Arena* arena) const {
  PathBoundsDeciderConfig* n = new PathBoundsDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PathBoundsDeciderConfig)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&is_lane_borrowing_, 0, reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_) + sizeof(is_pull_over_));
    pull_over_destination_to_adc_buffer_ = 25;
    pull_over_destination_to_pathend_buffer_ = 10;
    pull_over_road_edge_buffer_ = 0.15;
    pull_over_approach_lon_distance_adjust_factor_ = 1.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathBoundsDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PathBoundsDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_lane_borrowing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_lane_borrowing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lane_borrowing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pull_over = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_pull_over();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pull_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_pull_over_destination_to_adc_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_destination_to_adc_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_pull_over_destination_to_pathend_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_destination_to_pathend_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_pull_over_road_edge_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_road_edge_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_pull_over_approach_lon_distance_adjust_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_approach_lon_distance_adjust_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PathBoundsDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PathBoundsDeciderConfig)
  return false;
#undef DO_
}

void PathBoundsDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_lane_borrowing(), output);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pull_over(), output);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pull_over_destination_to_adc_buffer(), output);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pull_over_destination_to_pathend_buffer(), output);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pull_over_road_edge_buffer(), output);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pull_over_approach_lon_distance_adjust_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PathBoundsDeciderConfig)
}

::google::protobuf::uint8* PathBoundsDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_lane_borrowing(), target);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pull_over(), target);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pull_over_destination_to_adc_buffer(), target);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pull_over_destination_to_pathend_buffer(), target);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pull_over_road_edge_buffer(), target);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pull_over_approach_lon_distance_adjust_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PathBoundsDeciderConfig)
  return target;
}

size_t PathBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PathBoundsDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool is_lane_borrowing = 1;
    if (has_is_lane_borrowing()) {
      total_size += 1 + 1;
    }

    // optional bool is_pull_over = 2;
    if (has_is_pull_over()) {
      total_size += 1 + 1;
    }

    // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
    if (has_pull_over_destination_to_adc_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
    if (has_pull_over_destination_to_pathend_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
    if (has_pull_over_road_edge_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
    if (has_pull_over_approach_lon_distance_adjust_factor()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathBoundsDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathBoundsDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathBoundsDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PathBoundsDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PathBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void PathBoundsDeciderConfig::MergeFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      is_lane_borrowing_ = from.is_lane_borrowing_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pull_over_ = from.is_pull_over_;
    }
    if (cached_has_bits & 0x00000004u) {
      pull_over_destination_to_adc_buffer_ = from.pull_over_destination_to_adc_buffer_;
    }
    if (cached_has_bits & 0x00000008u) {
      pull_over_destination_to_pathend_buffer_ = from.pull_over_destination_to_pathend_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      pull_over_road_edge_buffer_ = from.pull_over_road_edge_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      pull_over_approach_lon_distance_adjust_factor_ = from.pull_over_approach_lon_distance_adjust_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathBoundsDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathBoundsDeciderConfig::CopyFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void PathBoundsDeciderConfig::Swap(PathBoundsDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathBoundsDeciderConfig::InternalSwap(PathBoundsDeciderConfig* other) {
  std::swap(is_lane_borrowing_, other->is_lane_borrowing_);
  std::swap(is_pull_over_, other->is_pull_over_);
  std::swap(pull_over_destination_to_adc_buffer_, other->pull_over_destination_to_adc_buffer_);
  std::swap(pull_over_destination_to_pathend_buffer_, other->pull_over_destination_to_pathend_buffer_);
  std::swap(pull_over_road_edge_buffer_, other->pull_over_road_edge_buffer_);
  std::swap(pull_over_approach_lon_distance_adjust_factor_, other->pull_over_approach_lon_distance_adjust_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathBoundsDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathBoundsDeciderConfig

// optional bool is_lane_borrowing = 1;
bool PathBoundsDeciderConfig::has_is_lane_borrowing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathBoundsDeciderConfig::set_has_is_lane_borrowing() {
  _has_bits_[0] |= 0x00000001u;
}
void PathBoundsDeciderConfig::clear_has_is_lane_borrowing() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathBoundsDeciderConfig::clear_is_lane_borrowing() {
  is_lane_borrowing_ = false;
  clear_has_is_lane_borrowing();
}
bool PathBoundsDeciderConfig::is_lane_borrowing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathBoundsDeciderConfig.is_lane_borrowing)
  return is_lane_borrowing_;
}
void PathBoundsDeciderConfig::set_is_lane_borrowing(bool value) {
  set_has_is_lane_borrowing();
  is_lane_borrowing_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathBoundsDeciderConfig.is_lane_borrowing)
}

// optional bool is_pull_over = 2;
bool PathBoundsDeciderConfig::has_is_pull_over() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathBoundsDeciderConfig::set_has_is_pull_over() {
  _has_bits_[0] |= 0x00000002u;
}
void PathBoundsDeciderConfig::clear_has_is_pull_over() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathBoundsDeciderConfig::clear_is_pull_over() {
  is_pull_over_ = false;
  clear_has_is_pull_over();
}
bool PathBoundsDeciderConfig::is_pull_over() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathBoundsDeciderConfig.is_pull_over)
  return is_pull_over_;
}
void PathBoundsDeciderConfig::set_is_pull_over(bool value) {
  set_has_is_pull_over();
  is_pull_over_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathBoundsDeciderConfig.is_pull_over)
}

// optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
bool PathBoundsDeciderConfig::has_pull_over_destination_to_adc_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathBoundsDeciderConfig::set_has_pull_over_destination_to_adc_buffer() {
  _has_bits_[0] |= 0x00000004u;
}
void PathBoundsDeciderConfig::clear_has_pull_over_destination_to_adc_buffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathBoundsDeciderConfig::clear_pull_over_destination_to_adc_buffer() {
  pull_over_destination_to_adc_buffer_ = 25;
  clear_has_pull_over_destination_to_adc_buffer();
}
double PathBoundsDeciderConfig::pull_over_destination_to_adc_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_destination_to_adc_buffer)
  return pull_over_destination_to_adc_buffer_;
}
void PathBoundsDeciderConfig::set_pull_over_destination_to_adc_buffer(double value) {
  set_has_pull_over_destination_to_adc_buffer();
  pull_over_destination_to_adc_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_destination_to_adc_buffer)
}

// optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
bool PathBoundsDeciderConfig::has_pull_over_destination_to_pathend_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathBoundsDeciderConfig::set_has_pull_over_destination_to_pathend_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void PathBoundsDeciderConfig::clear_has_pull_over_destination_to_pathend_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathBoundsDeciderConfig::clear_pull_over_destination_to_pathend_buffer() {
  pull_over_destination_to_pathend_buffer_ = 10;
  clear_has_pull_over_destination_to_pathend_buffer();
}
double PathBoundsDeciderConfig::pull_over_destination_to_pathend_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_destination_to_pathend_buffer)
  return pull_over_destination_to_pathend_buffer_;
}
void PathBoundsDeciderConfig::set_pull_over_destination_to_pathend_buffer(double value) {
  set_has_pull_over_destination_to_pathend_buffer();
  pull_over_destination_to_pathend_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_destination_to_pathend_buffer)
}

// optional double pull_over_road_edge_buffer = 5 [default = 0.15];
bool PathBoundsDeciderConfig::has_pull_over_road_edge_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PathBoundsDeciderConfig::set_has_pull_over_road_edge_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
void PathBoundsDeciderConfig::clear_has_pull_over_road_edge_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
void PathBoundsDeciderConfig::clear_pull_over_road_edge_buffer() {
  pull_over_road_edge_buffer_ = 0.15;
  clear_has_pull_over_road_edge_buffer();
}
double PathBoundsDeciderConfig::pull_over_road_edge_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_road_edge_buffer)
  return pull_over_road_edge_buffer_;
}
void PathBoundsDeciderConfig::set_pull_over_road_edge_buffer(double value) {
  set_has_pull_over_road_edge_buffer();
  pull_over_road_edge_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_road_edge_buffer)
}

// optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
bool PathBoundsDeciderConfig::has_pull_over_approach_lon_distance_adjust_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PathBoundsDeciderConfig::set_has_pull_over_approach_lon_distance_adjust_factor() {
  _has_bits_[0] |= 0x00000020u;
}
void PathBoundsDeciderConfig::clear_has_pull_over_approach_lon_distance_adjust_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
void PathBoundsDeciderConfig::clear_pull_over_approach_lon_distance_adjust_factor() {
  pull_over_approach_lon_distance_adjust_factor_ = 1.5;
  clear_has_pull_over_approach_lon_distance_adjust_factor();
}
double PathBoundsDeciderConfig::pull_over_approach_lon_distance_adjust_factor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_approach_lon_distance_adjust_factor)
  return pull_over_approach_lon_distance_adjust_factor_;
}
void PathBoundsDeciderConfig::set_pull_over_approach_lon_distance_adjust_factor(double value) {
  set_has_pull_over_approach_lon_distance_adjust_factor();
  pull_over_approach_lon_distance_adjust_factor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathBoundsDeciderConfig.pull_over_approach_lon_distance_adjust_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
