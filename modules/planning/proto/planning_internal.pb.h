// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/localization/proto/localization.pb.h"
#include "modules/dreamview/proto/chart.pb.h"
#include "modules/map/relative_map/proto/navigation.pb.h"
#include "modules/routing/proto/routing.pb.h"
#include "modules/perception/proto/traffic_light_detection.pb.h"
#include "modules/planning/proto/sl_boundary.pb.h"
#include "modules/planning/proto/decision.pb.h"
#include "modules/planning/proto/planning_config.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Sonar;
class SonarDefaultTypeInternal;
extern SonarDefaultTypeInternal _Sonar_default_instance_;
class Surround;
class SurroundDefaultTypeInternal;
extern SurroundDefaultTypeInternal _Surround_default_instance_;
class WheelSpeed;
class WheelSpeedDefaultTypeInternal;
extern WheelSpeedDefaultTypeInternal _WheelSpeed_default_instance_;
}  // namespace canbus
namespace common {
class FrenetFramePoint;
class FrenetFramePointDefaultTypeInternal;
extern FrenetFramePointDefaultTypeInternal _FrenetFramePoint_default_instance_;
class GaussianInfo;
class GaussianInfoDefaultTypeInternal;
extern GaussianInfoDefaultTypeInternal _GaussianInfo_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class SLPoint;
class SLPointDefaultTypeInternal;
extern SLPointDefaultTypeInternal _SLPoint_default_instance_;
class SpeedPoint;
class SpeedPointDefaultTypeInternal;
extern SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
class VehicleMotion;
class VehicleMotionDefaultTypeInternal;
extern VehicleMotionDefaultTypeInternal _VehicleMotion_default_instance_;
class VehicleMotionPoint;
class VehicleMotionPointDefaultTypeInternal;
extern VehicleMotionPointDefaultTypeInternal _VehicleMotionPoint_default_instance_;
}  // namespace common
namespace dreamview {
class Car;
class CarDefaultTypeInternal;
extern CarDefaultTypeInternal _Car_default_instance_;
class Chart;
class ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Line_PropertiesEntry;
class Line_PropertiesEntryDefaultTypeInternal;
extern Line_PropertiesEntryDefaultTypeInternal _Line_PropertiesEntry_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class Options_Axis;
class Options_AxisDefaultTypeInternal;
extern Options_AxisDefaultTypeInternal _Options_Axis_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Polygon_PropertiesEntry;
class Polygon_PropertiesEntryDefaultTypeInternal;
extern Polygon_PropertiesEntryDefaultTypeInternal _Polygon_PropertiesEntry_default_instance_;
}  // namespace dreamview
namespace localization {
class LocalizationEstimate;
class LocalizationEstimateDefaultTypeInternal;
extern LocalizationEstimateDefaultTypeInternal _LocalizationEstimate_default_instance_;
class LocalizationStatus;
class LocalizationStatusDefaultTypeInternal;
extern LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
class Uncertainty;
class UncertaintyDefaultTypeInternal;
extern UncertaintyDefaultTypeInternal _Uncertainty_default_instance_;
}  // namespace localization
namespace perception {
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficLightBox;
class TrafficLightBoxDefaultTypeInternal;
extern TrafficLightBoxDefaultTypeInternal _TrafficLightBox_default_instance_;
class TrafficLightDebug;
class TrafficLightDebugDefaultTypeInternal;
extern TrafficLightDebugDefaultTypeInternal _TrafficLightDebug_default_instance_;
class TrafficLightDetection;
class TrafficLightDetectionDefaultTypeInternal;
extern TrafficLightDetectionDefaultTypeInternal _TrafficLightDetection_default_instance_;
}  // namespace perception
namespace planning {
class DecisionResult;
class DecisionResultDefaultTypeInternal;
extern DecisionResultDefaultTypeInternal _DecisionResult_default_instance_;
class EmergencyStopCruiseToStop;
class EmergencyStopCruiseToStopDefaultTypeInternal;
extern EmergencyStopCruiseToStopDefaultTypeInternal _EmergencyStopCruiseToStop_default_instance_;
class EmergencyStopHardBrake;
class EmergencyStopHardBrakeDefaultTypeInternal;
extern EmergencyStopHardBrakeDefaultTypeInternal _EmergencyStopHardBrake_default_instance_;
class MainChangeLane;
class MainChangeLaneDefaultTypeInternal;
extern MainChangeLaneDefaultTypeInternal _MainChangeLane_default_instance_;
class MainCruise;
class MainCruiseDefaultTypeInternal;
extern MainCruiseDefaultTypeInternal _MainCruise_default_instance_;
class MainDecision;
class MainDecisionDefaultTypeInternal;
extern MainDecisionDefaultTypeInternal _MainDecision_default_instance_;
class MainEmergencyStop;
class MainEmergencyStopDefaultTypeInternal;
extern MainEmergencyStopDefaultTypeInternal _MainEmergencyStop_default_instance_;
class MainMissionComplete;
class MainMissionCompleteDefaultTypeInternal;
extern MainMissionCompleteDefaultTypeInternal _MainMissionComplete_default_instance_;
class MainNotReady;
class MainNotReadyDefaultTypeInternal;
extern MainNotReadyDefaultTypeInternal _MainNotReady_default_instance_;
class MainParking;
class MainParkingDefaultTypeInternal;
extern MainParkingDefaultTypeInternal _MainParking_default_instance_;
class MainStop;
class MainStopDefaultTypeInternal;
extern MainStopDefaultTypeInternal _MainStop_default_instance_;
class NavigationPlanningConfig;
class NavigationPlanningConfigDefaultTypeInternal;
extern NavigationPlanningConfigDefaultTypeInternal _NavigationPlanningConfig_default_instance_;
class ObjectAvoid;
class ObjectAvoidDefaultTypeInternal;
extern ObjectAvoidDefaultTypeInternal _ObjectAvoid_default_instance_;
class ObjectDecision;
class ObjectDecisionDefaultTypeInternal;
extern ObjectDecisionDefaultTypeInternal _ObjectDecision_default_instance_;
class ObjectDecisionType;
class ObjectDecisionTypeDefaultTypeInternal;
extern ObjectDecisionTypeDefaultTypeInternal _ObjectDecisionType_default_instance_;
class ObjectDecisions;
class ObjectDecisionsDefaultTypeInternal;
extern ObjectDecisionsDefaultTypeInternal _ObjectDecisions_default_instance_;
class ObjectDynamic;
class ObjectDynamicDefaultTypeInternal;
extern ObjectDynamicDefaultTypeInternal _ObjectDynamic_default_instance_;
class ObjectFollow;
class ObjectFollowDefaultTypeInternal;
extern ObjectFollowDefaultTypeInternal _ObjectFollow_default_instance_;
class ObjectIgnore;
class ObjectIgnoreDefaultTypeInternal;
extern ObjectIgnoreDefaultTypeInternal _ObjectIgnore_default_instance_;
class ObjectMotionType;
class ObjectMotionTypeDefaultTypeInternal;
extern ObjectMotionTypeDefaultTypeInternal _ObjectMotionType_default_instance_;
class ObjectNudge;
class ObjectNudgeDefaultTypeInternal;
extern ObjectNudgeDefaultTypeInternal _ObjectNudge_default_instance_;
class ObjectOvertake;
class ObjectOvertakeDefaultTypeInternal;
extern ObjectOvertakeDefaultTypeInternal _ObjectOvertake_default_instance_;
class ObjectSidePass;
class ObjectSidePassDefaultTypeInternal;
extern ObjectSidePassDefaultTypeInternal _ObjectSidePass_default_instance_;
class ObjectStatic;
class ObjectStaticDefaultTypeInternal;
extern ObjectStaticDefaultTypeInternal _ObjectStatic_default_instance_;
class ObjectStatus;
class ObjectStatusDefaultTypeInternal;
extern ObjectStatusDefaultTypeInternal _ObjectStatus_default_instance_;
class ObjectStop;
class ObjectStopDefaultTypeInternal;
extern ObjectStopDefaultTypeInternal _ObjectStop_default_instance_;
class ObjectYield;
class ObjectYieldDefaultTypeInternal;
extern ObjectYieldDefaultTypeInternal _ObjectYield_default_instance_;
class PlannerNaviConfig;
class PlannerNaviConfigDefaultTypeInternal;
extern PlannerNaviConfigDefaultTypeInternal _PlannerNaviConfig_default_instance_;
class PlannerPublicRoadConfig;
class PlannerPublicRoadConfigDefaultTypeInternal;
extern PlannerPublicRoadConfigDefaultTypeInternal _PlannerPublicRoadConfig_default_instance_;
class PlanningConfig;
class PlanningConfigDefaultTypeInternal;
extern PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
class RtkPlanningConfig;
class RtkPlanningConfigDefaultTypeInternal;
extern RtkPlanningConfigDefaultTypeInternal _RtkPlanningConfig_default_instance_;
class SLBoundary;
class SLBoundaryDefaultTypeInternal;
extern SLBoundaryDefaultTypeInternal _SLBoundary_default_instance_;
class ScenarioBareIntersectionUnprotectedConfig;
class ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal;
extern ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal _ScenarioBareIntersectionUnprotectedConfig_default_instance_;
class ScenarioConfig;
class ScenarioConfigDefaultTypeInternal;
extern ScenarioConfigDefaultTypeInternal _ScenarioConfig_default_instance_;
class ScenarioConfig_StageConfig;
class ScenarioConfig_StageConfigDefaultTypeInternal;
extern ScenarioConfig_StageConfigDefaultTypeInternal _ScenarioConfig_StageConfig_default_instance_;
class ScenarioEmergencyPullOverConfig;
class ScenarioEmergencyPullOverConfigDefaultTypeInternal;
extern ScenarioEmergencyPullOverConfigDefaultTypeInternal _ScenarioEmergencyPullOverConfig_default_instance_;
class ScenarioEmergencyStopConfig;
class ScenarioEmergencyStopConfigDefaultTypeInternal;
extern ScenarioEmergencyStopConfigDefaultTypeInternal _ScenarioEmergencyStopConfig_default_instance_;
class ScenarioLaneFollowConfig;
class ScenarioLaneFollowConfigDefaultTypeInternal;
extern ScenarioLaneFollowConfigDefaultTypeInternal _ScenarioLaneFollowConfig_default_instance_;
class ScenarioNarrowStreetUTurnConfig;
class ScenarioNarrowStreetUTurnConfigDefaultTypeInternal;
extern ScenarioNarrowStreetUTurnConfigDefaultTypeInternal _ScenarioNarrowStreetUTurnConfig_default_instance_;
class ScenarioParkAndGoConfig;
class ScenarioParkAndGoConfigDefaultTypeInternal;
extern ScenarioParkAndGoConfigDefaultTypeInternal _ScenarioParkAndGoConfig_default_instance_;
class ScenarioPullOverConfig;
class ScenarioPullOverConfigDefaultTypeInternal;
extern ScenarioPullOverConfigDefaultTypeInternal _ScenarioPullOverConfig_default_instance_;
class ScenarioStopSignUnprotectedConfig;
class ScenarioStopSignUnprotectedConfigDefaultTypeInternal;
extern ScenarioStopSignUnprotectedConfigDefaultTypeInternal _ScenarioStopSignUnprotectedConfig_default_instance_;
class ScenarioTestLearningModelConfig;
class ScenarioTestLearningModelConfigDefaultTypeInternal;
extern ScenarioTestLearningModelConfigDefaultTypeInternal _ScenarioTestLearningModelConfig_default_instance_;
class ScenarioTrafficLightProtectedConfig;
class ScenarioTrafficLightProtectedConfigDefaultTypeInternal;
extern ScenarioTrafficLightProtectedConfigDefaultTypeInternal _ScenarioTrafficLightProtectedConfig_default_instance_;
class ScenarioTrafficLightUnprotectedLeftTurnConfig;
class ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal;
extern ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal _ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
class ScenarioTrafficLightUnprotectedRightTurnConfig;
class ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal;
extern ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal _ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
class ScenarioValetParkingConfig;
class ScenarioValetParkingConfigDefaultTypeInternal;
extern ScenarioValetParkingConfigDefaultTypeInternal _ScenarioValetParkingConfig_default_instance_;
class ScenarioYieldSignConfig;
class ScenarioYieldSignConfigDefaultTypeInternal;
extern ScenarioYieldSignConfigDefaultTypeInternal _ScenarioYieldSignConfig_default_instance_;
class StandardPlanningConfig;
class StandardPlanningConfigDefaultTypeInternal;
extern StandardPlanningConfigDefaultTypeInternal _StandardPlanningConfig_default_instance_;
class TargetLane;
class TargetLaneDefaultTypeInternal;
extern TargetLaneDefaultTypeInternal _TargetLane_default_instance_;
class TaskConfig;
class TaskConfigDefaultTypeInternal;
extern TaskConfigDefaultTypeInternal _TaskConfig_default_instance_;
}  // namespace planning
namespace planning_internal {
class AutoTuningTrainingData;
class AutoTuningTrainingDataDefaultTypeInternal;
extern AutoTuningTrainingDataDefaultTypeInternal _AutoTuningTrainingData_default_instance_;
class CloudReferenceLineRequest;
class CloudReferenceLineRequestDefaultTypeInternal;
extern CloudReferenceLineRequestDefaultTypeInternal _CloudReferenceLineRequest_default_instance_;
class CloudReferenceLineResponse;
class CloudReferenceLineResponseDefaultTypeInternal;
extern CloudReferenceLineResponseDefaultTypeInternal _CloudReferenceLineResponse_default_instance_;
class CloudReferenceLineRoutingRequest;
class CloudReferenceLineRoutingRequestDefaultTypeInternal;
extern CloudReferenceLineRoutingRequestDefaultTypeInternal _CloudReferenceLineRoutingRequest_default_instance_;
class CostComponents;
class CostComponentsDefaultTypeInternal;
extern CostComponentsDefaultTypeInternal _CostComponents_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class DecisionTag;
class DecisionTagDefaultTypeInternal;
extern DecisionTagDefaultTypeInternal _DecisionTag_default_instance_;
class DpPolyGraphDebug;
class DpPolyGraphDebugDefaultTypeInternal;
extern DpPolyGraphDebugDefaultTypeInternal _DpPolyGraphDebug_default_instance_;
class LatticeStPixel;
class LatticeStPixelDefaultTypeInternal;
extern LatticeStPixelDefaultTypeInternal _LatticeStPixel_default_instance_;
class LatticeStTraining;
class LatticeStTrainingDefaultTypeInternal;
extern LatticeStTrainingDefaultTypeInternal _LatticeStTraining_default_instance_;
class ObstacleDebug;
class ObstacleDebugDefaultTypeInternal;
extern ObstacleDebugDefaultTypeInternal _ObstacleDebug_default_instance_;
class OpenSpaceDebug;
class OpenSpaceDebugDefaultTypeInternal;
extern OpenSpaceDebugDefaultTypeInternal _OpenSpaceDebug_default_instance_;
class PlanningData;
class PlanningDataDefaultTypeInternal;
extern PlanningDataDefaultTypeInternal _PlanningData_default_instance_;
class PullOverDebug;
class PullOverDebugDefaultTypeInternal;
extern PullOverDebugDefaultTypeInternal _PullOverDebug_default_instance_;
class ReferenceLineDebug;
class ReferenceLineDebugDefaultTypeInternal;
extern ReferenceLineDebugDefaultTypeInternal _ReferenceLineDebug_default_instance_;
class SLFrameDebug;
class SLFrameDebugDefaultTypeInternal;
extern SLFrameDebugDefaultTypeInternal _SLFrameDebug_default_instance_;
class STGraphDebug;
class STGraphDebugDefaultTypeInternal;
extern STGraphDebugDefaultTypeInternal _STGraphDebug_default_instance_;
class STGraphDebug_STGraphKernelCuiseRef;
class STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal;
extern STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
class STGraphDebug_STGraphKernelFollowRef;
class STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal;
extern STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal _STGraphDebug_STGraphKernelFollowRef_default_instance_;
class STGraphDebug_STGraphSpeedConstraint;
class STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal;
extern STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal _STGraphDebug_STGraphSpeedConstraint_default_instance_;
class SampleLayerDebug;
class SampleLayerDebugDefaultTypeInternal;
extern SampleLayerDebugDefaultTypeInternal _SampleLayerDebug_default_instance_;
class ScenarioDebug;
class ScenarioDebugDefaultTypeInternal;
extern ScenarioDebugDefaultTypeInternal _ScenarioDebug_default_instance_;
class SignalLightDebug;
class SignalLightDebugDefaultTypeInternal;
extern SignalLightDebugDefaultTypeInternal _SignalLightDebug_default_instance_;
class SignalLightDebug_SignalDebug;
class SignalLightDebug_SignalDebugDefaultTypeInternal;
extern SignalLightDebug_SignalDebugDefaultTypeInternal _SignalLightDebug_SignalDebug_default_instance_;
class SmootherDebug;
class SmootherDebugDefaultTypeInternal;
extern SmootherDebugDefaultTypeInternal _SmootherDebug_default_instance_;
class SpeedPlan;
class SpeedPlanDefaultTypeInternal;
extern SpeedPlanDefaultTypeInternal _SpeedPlan_default_instance_;
class StGraphBoundaryDebug;
class StGraphBoundaryDebugDefaultTypeInternal;
extern StGraphBoundaryDebugDefaultTypeInternal _StGraphBoundaryDebug_default_instance_;
class Trajectories;
class TrajectoriesDefaultTypeInternal;
extern TrajectoriesDefaultTypeInternal _Trajectories_default_instance_;
}  // namespace planning_internal
namespace relative_map {
class MapMsg;
class MapMsgDefaultTypeInternal;
extern MapMsgDefaultTypeInternal _MapMsg_default_instance_;
class MapMsg_NavigationPathEntry;
class MapMsg_NavigationPathEntryDefaultTypeInternal;
extern MapMsg_NavigationPathEntryDefaultTypeInternal _MapMsg_NavigationPathEntry_default_instance_;
class NavigationInfo;
class NavigationInfoDefaultTypeInternal;
extern NavigationInfoDefaultTypeInternal _NavigationInfo_default_instance_;
class NavigationPath;
class NavigationPathDefaultTypeInternal;
extern NavigationPathDefaultTypeInternal _NavigationPath_default_instance_;
}  // namespace relative_map
namespace routing {
class LaneSegment;
class LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneWaypoint;
class LaneWaypointDefaultTypeInternal;
extern LaneWaypointDefaultTypeInternal _LaneWaypoint_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class ParkingInfo;
class ParkingInfoDefaultTypeInternal;
extern ParkingInfoDefaultTypeInternal _ParkingInfo_default_instance_;
class Passage;
class PassageDefaultTypeInternal;
extern PassageDefaultTypeInternal _Passage_default_instance_;
class RoadSegment;
class RoadSegmentDefaultTypeInternal;
extern RoadSegmentDefaultTypeInternal _RoadSegment_default_instance_;
class RoutingRequest;
class RoutingRequestDefaultTypeInternal;
extern RoutingRequestDefaultTypeInternal _RoutingRequest_default_instance_;
class RoutingResponse;
class RoutingResponseDefaultTypeInternal;
extern RoutingResponseDefaultTypeInternal _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning_internal {

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto

enum StGraphBoundaryDebug_StBoundaryType {
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN = 1,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_STOP = 2,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_FOLLOW = 3,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_YIELD = 4,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_OVERTAKE = 5,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR = 6,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_DRIVABLE_REGION = 7
};
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value);
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MIN = StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN;
const StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX = StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_DRIVABLE_REGION;
const int StGraphBoundaryDebug_StBoundaryType_StBoundaryType_ARRAYSIZE = StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor();
inline const ::std::string& StGraphBoundaryDebug_StBoundaryType_Name(StGraphBoundaryDebug_StBoundaryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StGraphBoundaryDebug_StBoundaryType_descriptor(), value);
}
inline bool StGraphBoundaryDebug_StBoundaryType_Parse(
    const ::std::string& name, StGraphBoundaryDebug_StBoundaryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StGraphBoundaryDebug_StBoundaryType>(
    StGraphBoundaryDebug_StBoundaryType_descriptor(), name, value);
}
enum SmootherDebug_SmootherType {
  SmootherDebug_SmootherType_SMOOTHER_NONE = 1,
  SmootherDebug_SmootherType_SMOOTHER_CLOSE_STOP = 2
};
bool SmootherDebug_SmootherType_IsValid(int value);
const SmootherDebug_SmootherType SmootherDebug_SmootherType_SmootherType_MIN = SmootherDebug_SmootherType_SMOOTHER_NONE;
const SmootherDebug_SmootherType SmootherDebug_SmootherType_SmootherType_MAX = SmootherDebug_SmootherType_SMOOTHER_CLOSE_STOP;
const int SmootherDebug_SmootherType_SmootherType_ARRAYSIZE = SmootherDebug_SmootherType_SmootherType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmootherDebug_SmootherType_descriptor();
inline const ::std::string& SmootherDebug_SmootherType_Name(SmootherDebug_SmootherType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmootherDebug_SmootherType_descriptor(), value);
}
inline bool SmootherDebug_SmootherType_Parse(
    const ::std::string& name, SmootherDebug_SmootherType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmootherDebug_SmootherType>(
    SmootherDebug_SmootherType_descriptor(), name, value);
}
// ===================================================================

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Debug* other);

  // implements Message ----------------------------------------------

  inline Debug* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
  bool has_planning_data() const;
  void clear_planning_data();
  static const int kPlanningDataFieldNumber = 2;
  const ::jmc_auto::planning_internal::PlanningData& planning_data() const;
  ::jmc_auto::planning_internal::PlanningData* mutable_planning_data();
  ::jmc_auto::planning_internal::PlanningData* release_planning_data();
  void set_allocated_planning_data(::jmc_auto::planning_internal::PlanningData* planning_data);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.Debug)
 private:
  void set_has_planning_data();
  void clear_has_planning_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning_internal::PlanningData* planning_data_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPlan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.SpeedPlan) */ {
 public:
  SpeedPlan();
  virtual ~SpeedPlan();

  SpeedPlan(const SpeedPlan& from);

  inline SpeedPlan& operator=(const SpeedPlan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPlan& default_instance();

  static inline const SpeedPlan* internal_default_instance() {
    return reinterpret_cast<const SpeedPlan*>(
               &_SpeedPlan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SpeedPlan* other);

  // implements Message ----------------------------------------------

  inline SpeedPlan* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedPlan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedPlan& from);
  void MergeFrom(const SpeedPlan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedPlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.SpeedPoint speed_point = 2;
  int speed_point_size() const;
  void clear_speed_point();
  static const int kSpeedPointFieldNumber = 2;
  const ::jmc_auto::common::SpeedPoint& speed_point(int index) const;
  ::jmc_auto::common::SpeedPoint* mutable_speed_point(int index);
  ::jmc_auto::common::SpeedPoint* add_speed_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
      mutable_speed_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
      speed_point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.SpeedPlan)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint > speed_point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StGraphBoundaryDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.StGraphBoundaryDebug) */ {
 public:
  StGraphBoundaryDebug();
  virtual ~StGraphBoundaryDebug();

  StGraphBoundaryDebug(const StGraphBoundaryDebug& from);

  inline StGraphBoundaryDebug& operator=(const StGraphBoundaryDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StGraphBoundaryDebug& default_instance();

  static inline const StGraphBoundaryDebug* internal_default_instance() {
    return reinterpret_cast<const StGraphBoundaryDebug*>(
               &_StGraphBoundaryDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StGraphBoundaryDebug* other);

  // implements Message ----------------------------------------------

  inline StGraphBoundaryDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  StGraphBoundaryDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StGraphBoundaryDebug& from);
  void MergeFrom(const StGraphBoundaryDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StGraphBoundaryDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StGraphBoundaryDebug_StBoundaryType StBoundaryType;
  static const StBoundaryType ST_BOUNDARY_TYPE_UNKNOWN =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN;
  static const StBoundaryType ST_BOUNDARY_TYPE_STOP =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_STOP;
  static const StBoundaryType ST_BOUNDARY_TYPE_FOLLOW =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_FOLLOW;
  static const StBoundaryType ST_BOUNDARY_TYPE_YIELD =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_YIELD;
  static const StBoundaryType ST_BOUNDARY_TYPE_OVERTAKE =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_OVERTAKE;
  static const StBoundaryType ST_BOUNDARY_TYPE_KEEP_CLEAR =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR;
  static const StBoundaryType ST_BOUNDARY_TYPE_DRIVABLE_REGION =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_DRIVABLE_REGION;
  static inline bool StBoundaryType_IsValid(int value) {
    return StGraphBoundaryDebug_StBoundaryType_IsValid(value);
  }
  static const StBoundaryType StBoundaryType_MIN =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MIN;
  static const StBoundaryType StBoundaryType_MAX =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX;
  static const int StBoundaryType_ARRAYSIZE =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StBoundaryType_descriptor() {
    return StGraphBoundaryDebug_StBoundaryType_descriptor();
  }
  static inline const ::std::string& StBoundaryType_Name(StBoundaryType value) {
    return StGraphBoundaryDebug_StBoundaryType_Name(value);
  }
  static inline bool StBoundaryType_Parse(const ::std::string& name,
      StBoundaryType* value) {
    return StGraphBoundaryDebug_StBoundaryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.SpeedPoint point = 2;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::jmc_auto::common::SpeedPoint& point(int index) const;
  ::jmc_auto::common::SpeedPoint* mutable_point(int index);
  ::jmc_auto::common::SpeedPoint* add_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
      point() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType type() const;
  void set_type(::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.StGraphBoundaryDebug)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint > point_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLFrameDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.SLFrameDebug) */ {
 public:
  SLFrameDebug();
  virtual ~SLFrameDebug();

  SLFrameDebug(const SLFrameDebug& from);

  inline SLFrameDebug& operator=(const SLFrameDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SLFrameDebug& default_instance();

  static inline const SLFrameDebug* internal_default_instance() {
    return reinterpret_cast<const SLFrameDebug*>(
               &_SLFrameDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SLFrameDebug* other);

  // implements Message ----------------------------------------------

  inline SLFrameDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SLFrameDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLFrameDebug& from);
  void MergeFrom(const SLFrameDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLFrameDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double sampled_s = 2;
  int sampled_s_size() const;
  void clear_sampled_s();
  static const int kSampledSFieldNumber = 2;
  double sampled_s(int index) const;
  void set_sampled_s(int index, double value);
  void add_sampled_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      sampled_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_sampled_s();

  // repeated double static_obstacle_lower_bound = 3;
  int static_obstacle_lower_bound_size() const;
  void clear_static_obstacle_lower_bound();
  static const int kStaticObstacleLowerBoundFieldNumber = 3;
  double static_obstacle_lower_bound(int index) const;
  void set_static_obstacle_lower_bound(int index, double value);
  void add_static_obstacle_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      static_obstacle_lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_static_obstacle_lower_bound();

  // repeated double dynamic_obstacle_lower_bound = 4;
  int dynamic_obstacle_lower_bound_size() const;
  void clear_dynamic_obstacle_lower_bound();
  static const int kDynamicObstacleLowerBoundFieldNumber = 4;
  double dynamic_obstacle_lower_bound(int index) const;
  void set_dynamic_obstacle_lower_bound(int index, double value);
  void add_dynamic_obstacle_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      dynamic_obstacle_lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dynamic_obstacle_lower_bound();

  // repeated double static_obstacle_upper_bound = 5;
  int static_obstacle_upper_bound_size() const;
  void clear_static_obstacle_upper_bound();
  static const int kStaticObstacleUpperBoundFieldNumber = 5;
  double static_obstacle_upper_bound(int index) const;
  void set_static_obstacle_upper_bound(int index, double value);
  void add_static_obstacle_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      static_obstacle_upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_static_obstacle_upper_bound();

  // repeated double dynamic_obstacle_upper_bound = 6;
  int dynamic_obstacle_upper_bound_size() const;
  void clear_dynamic_obstacle_upper_bound();
  static const int kDynamicObstacleUpperBoundFieldNumber = 6;
  double dynamic_obstacle_upper_bound(int index) const;
  void set_dynamic_obstacle_upper_bound(int index, double value);
  void add_dynamic_obstacle_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      dynamic_obstacle_upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dynamic_obstacle_upper_bound();

  // repeated double map_lower_bound = 7;
  int map_lower_bound_size() const;
  void clear_map_lower_bound();
  static const int kMapLowerBoundFieldNumber = 7;
  double map_lower_bound(int index) const;
  void set_map_lower_bound(int index, double value);
  void add_map_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      map_lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_map_lower_bound();

  // repeated double map_upper_bound = 8;
  int map_upper_bound_size() const;
  void clear_map_upper_bound();
  static const int kMapUpperBoundFieldNumber = 8;
  double map_upper_bound(int index) const;
  void set_map_upper_bound(int index, double value);
  void add_map_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      map_upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_map_upper_bound();

  // repeated .jmc_auto.common.SLPoint sl_path = 9;
  int sl_path_size() const;
  void clear_sl_path();
  static const int kSlPathFieldNumber = 9;
  const ::jmc_auto::common::SLPoint& sl_path(int index) const;
  ::jmc_auto::common::SLPoint* mutable_sl_path(int index);
  ::jmc_auto::common::SLPoint* add_sl_path();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
      mutable_sl_path();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
      sl_path() const;

  // repeated double aggregated_boundary_s = 10;
  int aggregated_boundary_s_size() const;
  void clear_aggregated_boundary_s();
  static const int kAggregatedBoundarySFieldNumber = 10;
  double aggregated_boundary_s(int index) const;
  void set_aggregated_boundary_s(int index, double value);
  void add_aggregated_boundary_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      aggregated_boundary_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_aggregated_boundary_s();

  // repeated double aggregated_boundary_low = 11;
  int aggregated_boundary_low_size() const;
  void clear_aggregated_boundary_low();
  static const int kAggregatedBoundaryLowFieldNumber = 11;
  double aggregated_boundary_low(int index) const;
  void set_aggregated_boundary_low(int index, double value);
  void add_aggregated_boundary_low(double value);
  const ::google::protobuf::RepeatedField< double >&
      aggregated_boundary_low() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_aggregated_boundary_low();

  // repeated double aggregated_boundary_high = 12;
  int aggregated_boundary_high_size() const;
  void clear_aggregated_boundary_high();
  static const int kAggregatedBoundaryHighFieldNumber = 12;
  double aggregated_boundary_high(int index) const;
  void set_aggregated_boundary_high(int index, double value);
  void add_aggregated_boundary_high(double value);
  const ::google::protobuf::RepeatedField< double >&
      aggregated_boundary_high() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_aggregated_boundary_high();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.SLFrameDebug)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > sampled_s_;
  ::google::protobuf::RepeatedField< double > static_obstacle_lower_bound_;
  ::google::protobuf::RepeatedField< double > dynamic_obstacle_lower_bound_;
  ::google::protobuf::RepeatedField< double > static_obstacle_upper_bound_;
  ::google::protobuf::RepeatedField< double > dynamic_obstacle_upper_bound_;
  ::google::protobuf::RepeatedField< double > map_lower_bound_;
  ::google::protobuf::RepeatedField< double > map_upper_bound_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint > sl_path_;
  ::google::protobuf::RepeatedField< double > aggregated_boundary_s_;
  ::google::protobuf::RepeatedField< double > aggregated_boundary_low_;
  ::google::protobuf::RepeatedField< double > aggregated_boundary_high_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphSpeedConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint) */ {
 public:
  STGraphDebug_STGraphSpeedConstraint();
  virtual ~STGraphDebug_STGraphSpeedConstraint();

  STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from);

  inline STGraphDebug_STGraphSpeedConstraint& operator=(const STGraphDebug_STGraphSpeedConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug_STGraphSpeedConstraint& default_instance();

  static inline const STGraphDebug_STGraphSpeedConstraint* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphSpeedConstraint*>(
               &_STGraphDebug_STGraphSpeedConstraint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(STGraphDebug_STGraphSpeedConstraint* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug_STGraphSpeedConstraint* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug_STGraphSpeedConstraint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from);
  void MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug_STGraphSpeedConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t = 1;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::google::protobuf::RepeatedField< double >&
      t() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t();

  // repeated double lower_bound = 2;
  int lower_bound_size() const;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 2;
  double lower_bound(int index) const;
  void set_lower_bound(int index, double value);
  void add_lower_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      lower_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_lower_bound();

  // repeated double upper_bound = 3;
  int upper_bound_size() const;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 3;
  double upper_bound(int index) const;
  void set_upper_bound(int index, double value);
  void add_upper_bound(double value);
  const ::google::protobuf::RepeatedField< double >&
      upper_bound() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_upper_bound();

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_;
  ::google::protobuf::RepeatedField< double > lower_bound_;
  ::google::protobuf::RepeatedField< double > upper_bound_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphKernelCuiseRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef) */ {
 public:
  STGraphDebug_STGraphKernelCuiseRef();
  virtual ~STGraphDebug_STGraphKernelCuiseRef();

  STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from);

  inline STGraphDebug_STGraphKernelCuiseRef& operator=(const STGraphDebug_STGraphKernelCuiseRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug_STGraphKernelCuiseRef& default_instance();

  static inline const STGraphDebug_STGraphKernelCuiseRef* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphKernelCuiseRef*>(
               &_STGraphDebug_STGraphKernelCuiseRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(STGraphDebug_STGraphKernelCuiseRef* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug_STGraphKernelCuiseRef* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug_STGraphKernelCuiseRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from);
  void MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t = 1;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::google::protobuf::RepeatedField< double >&
      t() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t();

  // repeated double cruise_line_s = 2;
  int cruise_line_s_size() const;
  void clear_cruise_line_s();
  static const int kCruiseLineSFieldNumber = 2;
  double cruise_line_s(int index) const;
  void set_cruise_line_s(int index, double value);
  void add_cruise_line_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      cruise_line_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cruise_line_s();

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_;
  ::google::protobuf::RepeatedField< double > cruise_line_s_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphKernelFollowRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef) */ {
 public:
  STGraphDebug_STGraphKernelFollowRef();
  virtual ~STGraphDebug_STGraphKernelFollowRef();

  STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from);

  inline STGraphDebug_STGraphKernelFollowRef& operator=(const STGraphDebug_STGraphKernelFollowRef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug_STGraphKernelFollowRef& default_instance();

  static inline const STGraphDebug_STGraphKernelFollowRef* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphKernelFollowRef*>(
               &_STGraphDebug_STGraphKernelFollowRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(STGraphDebug_STGraphKernelFollowRef* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug_STGraphKernelFollowRef* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug_STGraphKernelFollowRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from);
  void MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug_STGraphKernelFollowRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double t = 1;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::google::protobuf::RepeatedField< double >&
      t() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_t();

  // repeated double follow_line_s = 2;
  int follow_line_s_size() const;
  void clear_follow_line_s();
  static const int kFollowLineSFieldNumber = 2;
  double follow_line_s(int index) const;
  void set_follow_line_s(int index, double value);
  void add_follow_line_s(double value);
  const ::google::protobuf::RepeatedField< double >&
      follow_line_s() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_follow_line_s();

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > t_;
  ::google::protobuf::RepeatedField< double > follow_line_s_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STGraphDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.STGraphDebug) */ {
 public:
  STGraphDebug();
  virtual ~STGraphDebug();

  STGraphDebug(const STGraphDebug& from);

  inline STGraphDebug& operator=(const STGraphDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraphDebug& default_instance();

  static inline const STGraphDebug* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug*>(
               &_STGraphDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(STGraphDebug* other);

  // implements Message ----------------------------------------------

  inline STGraphDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraphDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraphDebug& from);
  void MergeFrom(const STGraphDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraphDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef STGraphDebug_STGraphSpeedConstraint STGraphSpeedConstraint;
  typedef STGraphDebug_STGraphKernelCuiseRef STGraphKernelCuiseRef;
  typedef STGraphDebug_STGraphKernelFollowRef STGraphKernelFollowRef;

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
  int boundary_size() const;
  void clear_boundary();
  static const int kBoundaryFieldNumber = 2;
  const ::jmc_auto::planning_internal::StGraphBoundaryDebug& boundary(int index) const;
  ::jmc_auto::planning_internal::StGraphBoundaryDebug* mutable_boundary(int index);
  ::jmc_auto::planning_internal::StGraphBoundaryDebug* add_boundary();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug >*
      mutable_boundary();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug >&
      boundary() const;

  // repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
  int speed_limit_size() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 3;
  const ::jmc_auto::common::SpeedPoint& speed_limit(int index) const;
  ::jmc_auto::common::SpeedPoint* mutable_speed_limit(int index);
  ::jmc_auto::common::SpeedPoint* add_speed_limit();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
      mutable_speed_limit();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
      speed_limit() const;

  // repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
  int speed_profile_size() const;
  void clear_speed_profile();
  static const int kSpeedProfileFieldNumber = 4;
  const ::jmc_auto::common::SpeedPoint& speed_profile(int index) const;
  ::jmc_auto::common::SpeedPoint* mutable_speed_profile(int index);
  ::jmc_auto::common::SpeedPoint* add_speed_profile();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
      mutable_speed_profile();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
      speed_profile() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  bool has_speed_constraint() const;
  void clear_speed_constraint();
  static const int kSpeedConstraintFieldNumber = 5;
  const ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint& speed_constraint() const;
  ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* mutable_speed_constraint();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* release_speed_constraint();
  void set_allocated_speed_constraint(::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint);

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  bool has_kernel_cruise_ref() const;
  void clear_kernel_cruise_ref();
  static const int kKernelCruiseRefFieldNumber = 6;
  const ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef& kernel_cruise_ref() const;
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* mutable_kernel_cruise_ref();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* release_kernel_cruise_ref();
  void set_allocated_kernel_cruise_ref(::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref);

  // optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  bool has_kernel_follow_ref() const;
  void clear_kernel_follow_ref();
  static const int kKernelFollowRefFieldNumber = 7;
  const ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef& kernel_follow_ref() const;
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* mutable_kernel_follow_ref();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* release_kernel_follow_ref();
  void set_allocated_kernel_follow_ref(::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.STGraphDebug)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_speed_constraint();
  void clear_has_speed_constraint();
  void set_has_kernel_cruise_ref();
  void clear_has_kernel_cruise_ref();
  void set_has_kernel_follow_ref();
  void clear_has_kernel_follow_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug > boundary_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint > speed_limit_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint > speed_profile_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint_;
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref_;
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalLightDebug_SignalDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.SignalLightDebug.SignalDebug) */ {
 public:
  SignalLightDebug_SignalDebug();
  virtual ~SignalLightDebug_SignalDebug();

  SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from);

  inline SignalLightDebug_SignalDebug& operator=(const SignalLightDebug_SignalDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalLightDebug_SignalDebug& default_instance();

  static inline const SignalLightDebug_SignalDebug* internal_default_instance() {
    return reinterpret_cast<const SignalLightDebug_SignalDebug*>(
               &_SignalLightDebug_SignalDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SignalLightDebug_SignalDebug* other);

  // implements Message ----------------------------------------------

  inline SignalLightDebug_SignalDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SignalLightDebug_SignalDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignalLightDebug_SignalDebug& from);
  void MergeFrom(const SignalLightDebug_SignalDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignalLightDebug_SignalDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string light_id = 1;
  bool has_light_id() const;
  void clear_light_id();
  static const int kLightIdFieldNumber = 1;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // optional double light_stop_s = 3;
  bool has_light_stop_s() const;
  void clear_light_stop_s();
  static const int kLightStopSFieldNumber = 3;
  double light_stop_s() const;
  void set_light_stop_s(double value);

  // optional .jmc_auto.perception.TrafficLight.Color color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::jmc_auto::perception::TrafficLight_Color color() const;
  void set_color(::jmc_auto::perception::TrafficLight_Color value);

  // optional bool is_stop_wall_created = 5;
  bool has_is_stop_wall_created() const;
  void clear_is_stop_wall_created();
  static const int kIsStopWallCreatedFieldNumber = 5;
  bool is_stop_wall_created() const;
  void set_is_stop_wall_created(bool value);

  // optional double adc_stop_deceleration = 4;
  bool has_adc_stop_deceleration() const;
  void clear_adc_stop_deceleration();
  static const int kAdcStopDecelerationFieldNumber = 4;
  double adc_stop_deceleration() const;
  void set_adc_stop_deceleration(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.SignalLightDebug.SignalDebug)
 private:
  void set_has_light_id();
  void clear_has_light_id();
  void set_has_color();
  void clear_has_color();
  void set_has_light_stop_s();
  void clear_has_light_stop_s();
  void set_has_adc_stop_deceleration();
  void clear_has_adc_stop_deceleration();
  void set_has_is_stop_wall_created();
  void clear_has_is_stop_wall_created();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  double light_stop_s_;
  int color_;
  bool is_stop_wall_created_;
  double adc_stop_deceleration_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignalLightDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.SignalLightDebug) */ {
 public:
  SignalLightDebug();
  virtual ~SignalLightDebug();

  SignalLightDebug(const SignalLightDebug& from);

  inline SignalLightDebug& operator=(const SignalLightDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalLightDebug& default_instance();

  static inline const SignalLightDebug* internal_default_instance() {
    return reinterpret_cast<const SignalLightDebug*>(
               &_SignalLightDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SignalLightDebug* other);

  // implements Message ----------------------------------------------

  inline SignalLightDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SignalLightDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignalLightDebug& from);
  void MergeFrom(const SignalLightDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignalLightDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SignalLightDebug_SignalDebug SignalDebug;

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  int signal_size() const;
  void clear_signal();
  static const int kSignalFieldNumber = 3;
  const ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug& signal(int index) const;
  ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug* mutable_signal(int index);
  ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug* add_signal();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug >*
      mutable_signal();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug >&
      signal() const;

  // optional double adc_speed = 1;
  bool has_adc_speed() const;
  void clear_adc_speed();
  static const int kAdcSpeedFieldNumber = 1;
  double adc_speed() const;
  void set_adc_speed(double value);

  // optional double adc_front_s = 2;
  bool has_adc_front_s() const;
  void clear_adc_front_s();
  static const int kAdcFrontSFieldNumber = 2;
  double adc_front_s() const;
  void set_adc_front_s(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.SignalLightDebug)
 private:
  void set_has_adc_speed();
  void clear_has_adc_speed();
  void set_has_adc_front_s();
  void clear_has_adc_front_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug > signal_;
  double adc_speed_;
  double adc_front_s_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecisionTag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.DecisionTag) */ {
 public:
  DecisionTag();
  virtual ~DecisionTag();

  DecisionTag(const DecisionTag& from);

  inline DecisionTag& operator=(const DecisionTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionTag& default_instance();

  static inline const DecisionTag* internal_default_instance() {
    return reinterpret_cast<const DecisionTag*>(
               &_DecisionTag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DecisionTag* other);

  // implements Message ----------------------------------------------

  inline DecisionTag* New() const PROTOBUF_FINAL { return New(NULL); }

  DecisionTag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecisionTag& from);
  void MergeFrom(const DecisionTag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecisionTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string decider_tag = 1;
  bool has_decider_tag() const;
  void clear_decider_tag();
  static const int kDeciderTagFieldNumber = 1;
  const ::std::string& decider_tag() const;
  void set_decider_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_decider_tag(::std::string&& value);
  #endif
  void set_decider_tag(const char* value);
  void set_decider_tag(const char* value, size_t size);
  ::std::string* mutable_decider_tag();
  ::std::string* release_decider_tag();
  void set_allocated_decider_tag(::std::string* decider_tag);

  // optional .jmc_auto.planning.ObjectDecisionType decision = 2;
  bool has_decision() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 2;
  const ::jmc_auto::planning::ObjectDecisionType& decision() const;
  ::jmc_auto::planning::ObjectDecisionType* mutable_decision();
  ::jmc_auto::planning::ObjectDecisionType* release_decision();
  void set_allocated_decision(::jmc_auto::planning::ObjectDecisionType* decision);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.DecisionTag)
 private:
  void set_has_decider_tag();
  void clear_has_decider_tag();
  void set_has_decision();
  void clear_has_decision();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr decider_tag_;
  ::jmc_auto::planning::ObjectDecisionType* decision_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObstacleDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.ObstacleDebug) */ {
 public:
  ObstacleDebug();
  virtual ~ObstacleDebug();

  ObstacleDebug(const ObstacleDebug& from);

  inline ObstacleDebug& operator=(const ObstacleDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleDebug& default_instance();

  static inline const ObstacleDebug* internal_default_instance() {
    return reinterpret_cast<const ObstacleDebug*>(
               &_ObstacleDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ObstacleDebug* other);

  // implements Message ----------------------------------------------

  inline ObstacleDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  ObstacleDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObstacleDebug& from);
  void MergeFrom(const ObstacleDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObstacleDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
  int decision_tag_size() const;
  void clear_decision_tag();
  static const int kDecisionTagFieldNumber = 3;
  const ::jmc_auto::planning_internal::DecisionTag& decision_tag(int index) const;
  ::jmc_auto::planning_internal::DecisionTag* mutable_decision_tag(int index);
  ::jmc_auto::planning_internal::DecisionTag* add_decision_tag();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag >*
      mutable_decision_tag();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag >&
      decision_tag() const;

  // repeated double vertices_x_coords = 4;
  int vertices_x_coords_size() const;
  void clear_vertices_x_coords();
  static const int kVerticesXCoordsFieldNumber = 4;
  double vertices_x_coords(int index) const;
  void set_vertices_x_coords(int index, double value);
  void add_vertices_x_coords(double value);
  const ::google::protobuf::RepeatedField< double >&
      vertices_x_coords() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vertices_x_coords();

  // repeated double vertices_y_coords = 5;
  int vertices_y_coords_size() const;
  void clear_vertices_y_coords();
  static const int kVerticesYCoordsFieldNumber = 5;
  double vertices_y_coords(int index) const;
  void set_vertices_y_coords(int index, double value);
  void add_vertices_y_coords(double value);
  const ::google::protobuf::RepeatedField< double >&
      vertices_y_coords() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_vertices_y_coords();

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
  bool has_sl_boundary() const;
  void clear_sl_boundary();
  static const int kSlBoundaryFieldNumber = 2;
  const ::jmc_auto::planning::SLBoundary& sl_boundary() const;
  ::jmc_auto::planning::SLBoundary* mutable_sl_boundary();
  ::jmc_auto::planning::SLBoundary* release_sl_boundary();
  void set_allocated_sl_boundary(::jmc_auto::planning::SLBoundary* sl_boundary);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.ObstacleDebug)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_sl_boundary();
  void clear_has_sl_boundary();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag > decision_tag_;
  ::google::protobuf::RepeatedField< double > vertices_x_coords_;
  ::google::protobuf::RepeatedField< double > vertices_y_coords_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::jmc_auto::planning::SLBoundary* sl_boundary_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceLineDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.ReferenceLineDebug) */ {
 public:
  ReferenceLineDebug();
  virtual ~ReferenceLineDebug();

  ReferenceLineDebug(const ReferenceLineDebug& from);

  inline ReferenceLineDebug& operator=(const ReferenceLineDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceLineDebug& default_instance();

  static inline const ReferenceLineDebug* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineDebug*>(
               &_ReferenceLineDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ReferenceLineDebug* other);

  // implements Message ----------------------------------------------

  inline ReferenceLineDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  ReferenceLineDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReferenceLineDebug& from);
  void MergeFrom(const ReferenceLineDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReferenceLineDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // optional double cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  double cost() const;
  void set_cost(double value);

  // optional double minimum_boundary = 8;
  bool has_minimum_boundary() const;
  void clear_minimum_boundary();
  static const int kMinimumBoundaryFieldNumber = 8;
  double minimum_boundary() const;
  void set_minimum_boundary(double value);

  // optional double average_kappa = 9 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_average_kappa() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_average_kappa();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAverageKappaFieldNumber = 9;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double average_kappa() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_average_kappa(double value);

  // optional double average_dkappa = 10 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_average_dkappa() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_average_dkappa();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kAverageDkappaFieldNumber = 10;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR double average_dkappa() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_average_dkappa(double value);

  // optional double kappa_rms = 11;
  bool has_kappa_rms() const;
  void clear_kappa_rms();
  static const int kKappaRmsFieldNumber = 11;
  double kappa_rms() const;
  void set_kappa_rms(double value);

  // optional double dkappa_rms = 12;
  bool has_dkappa_rms() const;
  void clear_dkappa_rms();
  static const int kDkappaRmsFieldNumber = 12;
  double dkappa_rms() const;
  void set_dkappa_rms(double value);

  // optional double kappa_max_abs = 13;
  bool has_kappa_max_abs() const;
  void clear_kappa_max_abs();
  static const int kKappaMaxAbsFieldNumber = 13;
  double kappa_max_abs() const;
  void set_kappa_max_abs(double value);

  // optional double dkappa_max_abs = 14;
  bool has_dkappa_max_abs() const;
  void clear_dkappa_max_abs();
  static const int kDkappaMaxAbsFieldNumber = 14;
  double dkappa_max_abs() const;
  void set_dkappa_max_abs(double value);

  // optional double average_offset = 15;
  bool has_average_offset() const;
  void clear_average_offset();
  static const int kAverageOffsetFieldNumber = 15;
  double average_offset() const;
  void set_average_offset(double value);

  // optional bool is_change_lane_path = 4;
  bool has_is_change_lane_path() const;
  void clear_is_change_lane_path();
  static const int kIsChangeLanePathFieldNumber = 4;
  bool is_change_lane_path() const;
  void set_is_change_lane_path(bool value);

  // optional bool is_drivable = 5;
  bool has_is_drivable() const;
  void clear_is_drivable();
  static const int kIsDrivableFieldNumber = 5;
  bool is_drivable() const;
  void set_is_drivable(bool value);

  // optional bool is_protected = 6;
  bool has_is_protected() const;
  void clear_is_protected();
  static const int kIsProtectedFieldNumber = 6;
  bool is_protected() const;
  void set_is_protected(bool value);

  // optional bool is_offroad = 7;
  bool has_is_offroad() const;
  void clear_is_offroad();
  static const int kIsOffroadFieldNumber = 7;
  bool is_offroad() const;
  void set_is_offroad(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.ReferenceLineDebug)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_length();
  void clear_has_length();
  void set_has_cost();
  void clear_has_cost();
  void set_has_is_change_lane_path();
  void clear_has_is_change_lane_path();
  void set_has_is_drivable();
  void clear_has_is_drivable();
  void set_has_is_protected();
  void clear_has_is_protected();
  void set_has_is_offroad();
  void clear_has_is_offroad();
  void set_has_minimum_boundary();
  void clear_has_minimum_boundary();
  void set_has_average_kappa();
  void clear_has_average_kappa();
  void set_has_average_dkappa();
  void clear_has_average_dkappa();
  void set_has_kappa_rms();
  void clear_has_kappa_rms();
  void set_has_dkappa_rms();
  void clear_has_dkappa_rms();
  void set_has_kappa_max_abs();
  void clear_has_kappa_max_abs();
  void set_has_dkappa_max_abs();
  void clear_has_dkappa_max_abs();
  void set_has_average_offset();
  void clear_has_average_offset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double length_;
  double cost_;
  double minimum_boundary_;
  double average_kappa_;
  double average_dkappa_;
  double kappa_rms_;
  double dkappa_rms_;
  double kappa_max_abs_;
  double dkappa_max_abs_;
  double average_offset_;
  bool is_change_lane_path_;
  bool is_drivable_;
  bool is_protected_;
  bool is_offroad_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampleLayerDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.SampleLayerDebug) */ {
 public:
  SampleLayerDebug();
  virtual ~SampleLayerDebug();

  SampleLayerDebug(const SampleLayerDebug& from);

  inline SampleLayerDebug& operator=(const SampleLayerDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleLayerDebug& default_instance();

  static inline const SampleLayerDebug* internal_default_instance() {
    return reinterpret_cast<const SampleLayerDebug*>(
               &_SampleLayerDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SampleLayerDebug* other);

  // implements Message ----------------------------------------------

  inline SampleLayerDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleLayerDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleLayerDebug& from);
  void MergeFrom(const SampleLayerDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleLayerDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.SLPoint sl_point = 1;
  int sl_point_size() const;
  void clear_sl_point();
  static const int kSlPointFieldNumber = 1;
  const ::jmc_auto::common::SLPoint& sl_point(int index) const;
  ::jmc_auto::common::SLPoint* mutable_sl_point(int index);
  ::jmc_auto::common::SLPoint* add_sl_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
      mutable_sl_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
      sl_point() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.SampleLayerDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint > sl_point_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DpPolyGraphDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.DpPolyGraphDebug) */ {
 public:
  DpPolyGraphDebug();
  virtual ~DpPolyGraphDebug();

  DpPolyGraphDebug(const DpPolyGraphDebug& from);

  inline DpPolyGraphDebug& operator=(const DpPolyGraphDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DpPolyGraphDebug& default_instance();

  static inline const DpPolyGraphDebug* internal_default_instance() {
    return reinterpret_cast<const DpPolyGraphDebug*>(
               &_DpPolyGraphDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DpPolyGraphDebug* other);

  // implements Message ----------------------------------------------

  inline DpPolyGraphDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  DpPolyGraphDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DpPolyGraphDebug& from);
  void MergeFrom(const DpPolyGraphDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DpPolyGraphDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
  int sample_layer_size() const;
  void clear_sample_layer();
  static const int kSampleLayerFieldNumber = 1;
  const ::jmc_auto::planning_internal::SampleLayerDebug& sample_layer(int index) const;
  ::jmc_auto::planning_internal::SampleLayerDebug* mutable_sample_layer(int index);
  ::jmc_auto::planning_internal::SampleLayerDebug* add_sample_layer();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug >*
      mutable_sample_layer();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug >&
      sample_layer() const;

  // repeated .jmc_auto.common.SLPoint min_cost_point = 2;
  int min_cost_point_size() const;
  void clear_min_cost_point();
  static const int kMinCostPointFieldNumber = 2;
  const ::jmc_auto::common::SLPoint& min_cost_point(int index) const;
  ::jmc_auto::common::SLPoint* mutable_min_cost_point(int index);
  ::jmc_auto::common::SLPoint* add_min_cost_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
      mutable_min_cost_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
      min_cost_point() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.DpPolyGraphDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug > sample_layer_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint > min_cost_point_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenarioDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.ScenarioDebug) */ {
 public:
  ScenarioDebug();
  virtual ~ScenarioDebug();

  ScenarioDebug(const ScenarioDebug& from);

  inline ScenarioDebug& operator=(const ScenarioDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenarioDebug& default_instance();

  static inline const ScenarioDebug* internal_default_instance() {
    return reinterpret_cast<const ScenarioDebug*>(
               &_ScenarioDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ScenarioDebug* other);

  // implements Message ----------------------------------------------

  inline ScenarioDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenarioDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenarioDebug& from);
  void MergeFrom(const ScenarioDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenarioDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  bool has_scenario_type() const;
  void clear_scenario_type();
  static const int kScenarioTypeFieldNumber = 1;
  ::jmc_auto::planning::ScenarioConfig_ScenarioType scenario_type() const;
  void set_scenario_type(::jmc_auto::planning::ScenarioConfig_ScenarioType value);

  // optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
  bool has_stage_type() const;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 2;
  ::jmc_auto::planning::ScenarioConfig_StageType stage_type() const;
  void set_stage_type(::jmc_auto::planning::ScenarioConfig_StageType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.ScenarioDebug)
 private:
  void set_has_scenario_type();
  void clear_has_scenario_type();
  void set_has_stage_type();
  void clear_has_stage_type();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int scenario_type_;
  int stage_type_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectories : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.Trajectories) */ {
 public:
  Trajectories();
  virtual ~Trajectories();

  Trajectories(const Trajectories& from);

  inline Trajectories& operator=(const Trajectories& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectories& default_instance();

  static inline const Trajectories* internal_default_instance() {
    return reinterpret_cast<const Trajectories*>(
               &_Trajectories_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Trajectories* other);

  // implements Message ----------------------------------------------

  inline Trajectories* New() const PROTOBUF_FINAL { return New(NULL); }

  Trajectories* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Trajectories& from);
  void MergeFrom(const Trajectories& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Trajectories* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Trajectory trajectory = 1;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 1;
  const ::jmc_auto::common::Trajectory& trajectory(int index) const;
  ::jmc_auto::common::Trajectory* mutable_trajectory(int index);
  ::jmc_auto::common::Trajectory* add_trajectory();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory >*
      mutable_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory >&
      trajectory() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.Trajectories)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory > trajectory_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpaceDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.OpenSpaceDebug) */ {
 public:
  OpenSpaceDebug();
  virtual ~OpenSpaceDebug();

  OpenSpaceDebug(const OpenSpaceDebug& from);

  inline OpenSpaceDebug& operator=(const OpenSpaceDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceDebug& default_instance();

  static inline const OpenSpaceDebug* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceDebug*>(
               &_OpenSpaceDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(OpenSpaceDebug* other);

  // implements Message ----------------------------------------------

  inline OpenSpaceDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenSpaceDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenSpaceDebug& from);
  void MergeFrom(const OpenSpaceDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenSpaceDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double warm_start_dual_lambda = 4;
  int warm_start_dual_lambda_size() const;
  void clear_warm_start_dual_lambda();
  static const int kWarmStartDualLambdaFieldNumber = 4;
  double warm_start_dual_lambda(int index) const;
  void set_warm_start_dual_lambda(int index, double value);
  void add_warm_start_dual_lambda(double value);
  const ::google::protobuf::RepeatedField< double >&
      warm_start_dual_lambda() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_warm_start_dual_lambda();

  // repeated double warm_start_dual_miu = 5;
  int warm_start_dual_miu_size() const;
  void clear_warm_start_dual_miu();
  static const int kWarmStartDualMiuFieldNumber = 5;
  double warm_start_dual_miu(int index) const;
  void set_warm_start_dual_miu(int index, double value);
  void add_warm_start_dual_miu(double value);
  const ::google::protobuf::RepeatedField< double >&
      warm_start_dual_miu() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_warm_start_dual_miu();

  // repeated double optimized_dual_lambda = 6;
  int optimized_dual_lambda_size() const;
  void clear_optimized_dual_lambda();
  static const int kOptimizedDualLambdaFieldNumber = 6;
  double optimized_dual_lambda(int index) const;
  void set_optimized_dual_lambda(int index, double value);
  void add_optimized_dual_lambda(double value);
  const ::google::protobuf::RepeatedField< double >&
      optimized_dual_lambda() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_optimized_dual_lambda();

  // repeated double optimized_dual_miu = 7;
  int optimized_dual_miu_size() const;
  void clear_optimized_dual_miu();
  static const int kOptimizedDualMiuFieldNumber = 7;
  double optimized_dual_miu(int index) const;
  void set_optimized_dual_miu(int index, double value);
  void add_optimized_dual_miu(double value);
  const ::google::protobuf::RepeatedField< double >&
      optimized_dual_miu() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_optimized_dual_miu();

  // repeated double xy_boundary = 8;
  int xy_boundary_size() const;
  void clear_xy_boundary();
  static const int kXyBoundaryFieldNumber = 8;
  double xy_boundary(int index) const;
  void set_xy_boundary(int index, double value);
  void add_xy_boundary(double value);
  const ::google::protobuf::RepeatedField< double >&
      xy_boundary() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_xy_boundary();

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
  int obstacles_size() const;
  void clear_obstacles();
  static const int kObstaclesFieldNumber = 9;
  const ::jmc_auto::planning_internal::ObstacleDebug& obstacles(int index) const;
  ::jmc_auto::planning_internal::ObstacleDebug* mutable_obstacles(int index);
  ::jmc_auto::planning_internal::ObstacleDebug* add_obstacles();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >*
      mutable_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >&
      obstacles() const;

  // optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
  bool has_trajectories() const;
  void clear_trajectories();
  static const int kTrajectoriesFieldNumber = 1;
  const ::jmc_auto::planning_internal::Trajectories& trajectories() const;
  ::jmc_auto::planning_internal::Trajectories* mutable_trajectories();
  ::jmc_auto::planning_internal::Trajectories* release_trajectories();
  void set_allocated_trajectories(::jmc_auto::planning_internal::Trajectories* trajectories);

  // optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
  bool has_warm_start_trajectory() const;
  void clear_warm_start_trajectory();
  static const int kWarmStartTrajectoryFieldNumber = 2;
  const ::jmc_auto::common::VehicleMotion& warm_start_trajectory() const;
  ::jmc_auto::common::VehicleMotion* mutable_warm_start_trajectory();
  ::jmc_auto::common::VehicleMotion* release_warm_start_trajectory();
  void set_allocated_warm_start_trajectory(::jmc_auto::common::VehicleMotion* warm_start_trajectory);

  // optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
  bool has_smoothed_trajectory() const;
  void clear_smoothed_trajectory();
  static const int kSmoothedTrajectoryFieldNumber = 3;
  const ::jmc_auto::common::VehicleMotion& smoothed_trajectory() const;
  ::jmc_auto::common::VehicleMotion* mutable_smoothed_trajectory();
  ::jmc_auto::common::VehicleMotion* release_smoothed_trajectory();
  void set_allocated_smoothed_trajectory(::jmc_auto::common::VehicleMotion* smoothed_trajectory);

  // optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
  bool has_roi_shift_point() const;
  void clear_roi_shift_point();
  static const int kRoiShiftPointFieldNumber = 10;
  const ::jmc_auto::common::TrajectoryPoint& roi_shift_point() const;
  ::jmc_auto::common::TrajectoryPoint* mutable_roi_shift_point();
  ::jmc_auto::common::TrajectoryPoint* release_roi_shift_point();
  void set_allocated_roi_shift_point(::jmc_auto::common::TrajectoryPoint* roi_shift_point);

  // optional .jmc_auto.common.TrajectoryPoint end_point = 11;
  bool has_end_point() const;
  void clear_end_point();
  static const int kEndPointFieldNumber = 11;
  const ::jmc_auto::common::TrajectoryPoint& end_point() const;
  ::jmc_auto::common::TrajectoryPoint* mutable_end_point();
  ::jmc_auto::common::TrajectoryPoint* release_end_point();
  void set_allocated_end_point(::jmc_auto::common::TrajectoryPoint* end_point);

  // optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
  bool has_partitioned_trajectories() const;
  void clear_partitioned_trajectories();
  static const int kPartitionedTrajectoriesFieldNumber = 12;
  const ::jmc_auto::planning_internal::Trajectories& partitioned_trajectories() const;
  ::jmc_auto::planning_internal::Trajectories* mutable_partitioned_trajectories();
  ::jmc_auto::planning_internal::Trajectories* release_partitioned_trajectories();
  void set_allocated_partitioned_trajectories(::jmc_auto::planning_internal::Trajectories* partitioned_trajectories);

  // optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
  bool has_chosen_trajectory() const;
  void clear_chosen_trajectory();
  static const int kChosenTrajectoryFieldNumber = 13;
  const ::jmc_auto::planning_internal::Trajectories& chosen_trajectory() const;
  ::jmc_auto::planning_internal::Trajectories* mutable_chosen_trajectory();
  ::jmc_auto::planning_internal::Trajectories* release_chosen_trajectory();
  void set_allocated_chosen_trajectory(::jmc_auto::planning_internal::Trajectories* chosen_trajectory);

  // optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
  bool has_fallback_trajectory() const;
  void clear_fallback_trajectory();
  static const int kFallbackTrajectoryFieldNumber = 15;
  const ::jmc_auto::planning_internal::Trajectories& fallback_trajectory() const;
  ::jmc_auto::planning_internal::Trajectories* mutable_fallback_trajectory();
  ::jmc_auto::planning_internal::Trajectories* release_fallback_trajectory();
  void set_allocated_fallback_trajectory(::jmc_auto::planning_internal::Trajectories* fallback_trajectory);

  // optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
  bool has_trajectory_stitching_point() const;
  void clear_trajectory_stitching_point();
  static const int kTrajectoryStitchingPointFieldNumber = 16;
  const ::jmc_auto::common::TrajectoryPoint& trajectory_stitching_point() const;
  ::jmc_auto::common::TrajectoryPoint* mutable_trajectory_stitching_point();
  ::jmc_auto::common::TrajectoryPoint* release_trajectory_stitching_point();
  void set_allocated_trajectory_stitching_point(::jmc_auto::common::TrajectoryPoint* trajectory_stitching_point);

  // optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
  bool has_future_collision_point() const;
  void clear_future_collision_point();
  static const int kFutureCollisionPointFieldNumber = 17;
  const ::jmc_auto::common::TrajectoryPoint& future_collision_point() const;
  ::jmc_auto::common::TrajectoryPoint* mutable_future_collision_point();
  ::jmc_auto::common::TrajectoryPoint* release_future_collision_point();
  void set_allocated_future_collision_point(::jmc_auto::common::TrajectoryPoint* future_collision_point);

  // optional .jmc_auto.common.PointENU origin_point = 19;
  bool has_origin_point() const;
  void clear_origin_point();
  static const int kOriginPointFieldNumber = 19;
  const ::jmc_auto::common::PointENU& origin_point() const;
  ::jmc_auto::common::PointENU* mutable_origin_point();
  ::jmc_auto::common::PointENU* release_origin_point();
  void set_allocated_origin_point(::jmc_auto::common::PointENU* origin_point);

  // optional double time_latency = 18 [default = 0];
  bool has_time_latency() const;
  void clear_time_latency();
  static const int kTimeLatencyFieldNumber = 18;
  double time_latency() const;
  void set_time_latency(double value);

  // optional double origin_heading_rad = 20;
  bool has_origin_heading_rad() const;
  void clear_origin_heading_rad();
  static const int kOriginHeadingRadFieldNumber = 20;
  double origin_heading_rad() const;
  void set_origin_heading_rad(double value);

  // optional bool is_fallback_trajectory = 14;
  bool has_is_fallback_trajectory() const;
  void clear_is_fallback_trajectory();
  static const int kIsFallbackTrajectoryFieldNumber = 14;
  bool is_fallback_trajectory() const;
  void set_is_fallback_trajectory(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.OpenSpaceDebug)
 private:
  void set_has_trajectories();
  void clear_has_trajectories();
  void set_has_warm_start_trajectory();
  void clear_has_warm_start_trajectory();
  void set_has_smoothed_trajectory();
  void clear_has_smoothed_trajectory();
  void set_has_roi_shift_point();
  void clear_has_roi_shift_point();
  void set_has_end_point();
  void clear_has_end_point();
  void set_has_partitioned_trajectories();
  void clear_has_partitioned_trajectories();
  void set_has_chosen_trajectory();
  void clear_has_chosen_trajectory();
  void set_has_is_fallback_trajectory();
  void clear_has_is_fallback_trajectory();
  void set_has_fallback_trajectory();
  void clear_has_fallback_trajectory();
  void set_has_trajectory_stitching_point();
  void clear_has_trajectory_stitching_point();
  void set_has_future_collision_point();
  void clear_has_future_collision_point();
  void set_has_time_latency();
  void clear_has_time_latency();
  void set_has_origin_point();
  void clear_has_origin_point();
  void set_has_origin_heading_rad();
  void clear_has_origin_heading_rad();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > warm_start_dual_lambda_;
  ::google::protobuf::RepeatedField< double > warm_start_dual_miu_;
  ::google::protobuf::RepeatedField< double > optimized_dual_lambda_;
  ::google::protobuf::RepeatedField< double > optimized_dual_miu_;
  ::google::protobuf::RepeatedField< double > xy_boundary_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug > obstacles_;
  ::jmc_auto::planning_internal::Trajectories* trajectories_;
  ::jmc_auto::common::VehicleMotion* warm_start_trajectory_;
  ::jmc_auto::common::VehicleMotion* smoothed_trajectory_;
  ::jmc_auto::common::TrajectoryPoint* roi_shift_point_;
  ::jmc_auto::common::TrajectoryPoint* end_point_;
  ::jmc_auto::planning_internal::Trajectories* partitioned_trajectories_;
  ::jmc_auto::planning_internal::Trajectories* chosen_trajectory_;
  ::jmc_auto::planning_internal::Trajectories* fallback_trajectory_;
  ::jmc_auto::common::TrajectoryPoint* trajectory_stitching_point_;
  ::jmc_auto::common::TrajectoryPoint* future_collision_point_;
  ::jmc_auto::common::PointENU* origin_point_;
  double time_latency_;
  double origin_heading_rad_;
  bool is_fallback_trajectory_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmootherDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.SmootherDebug) */ {
 public:
  SmootherDebug();
  virtual ~SmootherDebug();

  SmootherDebug(const SmootherDebug& from);

  inline SmootherDebug& operator=(const SmootherDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmootherDebug& default_instance();

  static inline const SmootherDebug* internal_default_instance() {
    return reinterpret_cast<const SmootherDebug*>(
               &_SmootherDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(SmootherDebug* other);

  // implements Message ----------------------------------------------

  inline SmootherDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  SmootherDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmootherDebug& from);
  void MergeFrom(const SmootherDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmootherDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SmootherDebug_SmootherType SmootherType;
  static const SmootherType SMOOTHER_NONE =
    SmootherDebug_SmootherType_SMOOTHER_NONE;
  static const SmootherType SMOOTHER_CLOSE_STOP =
    SmootherDebug_SmootherType_SMOOTHER_CLOSE_STOP;
  static inline bool SmootherType_IsValid(int value) {
    return SmootherDebug_SmootherType_IsValid(value);
  }
  static const SmootherType SmootherType_MIN =
    SmootherDebug_SmootherType_SmootherType_MIN;
  static const SmootherType SmootherType_MAX =
    SmootherDebug_SmootherType_SmootherType_MAX;
  static const int SmootherType_ARRAYSIZE =
    SmootherDebug_SmootherType_SmootherType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SmootherType_descriptor() {
    return SmootherDebug_SmootherType_descriptor();
  }
  static inline const ::std::string& SmootherType_Name(SmootherType value) {
    return SmootherDebug_SmootherType_Name(value);
  }
  static inline bool SmootherType_Parse(const ::std::string& name,
      SmootherType* value) {
    return SmootherDebug_SmootherType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string reason = 3;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional bool is_smoothed = 1;
  bool has_is_smoothed() const;
  void clear_is_smoothed();
  static const int kIsSmoothedFieldNumber = 1;
  bool is_smoothed() const;
  void set_is_smoothed(bool value);

  // optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::jmc_auto::planning_internal::SmootherDebug_SmootherType type() const;
  void set_type(::jmc_auto::planning_internal::SmootherDebug_SmootherType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.SmootherDebug)
 private:
  void set_has_is_smoothed();
  void clear_has_is_smoothed();
  void set_has_type();
  void clear_has_type();
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool is_smoothed_;
  int type_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PullOverDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.PullOverDebug) */ {
 public:
  PullOverDebug();
  virtual ~PullOverDebug();

  PullOverDebug(const PullOverDebug& from);

  inline PullOverDebug& operator=(const PullOverDebug& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PullOverDebug& default_instance();

  static inline const PullOverDebug* internal_default_instance() {
    return reinterpret_cast<const PullOverDebug*>(
               &_PullOverDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(PullOverDebug* other);

  // implements Message ----------------------------------------------

  inline PullOverDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  PullOverDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullOverDebug& from);
  void MergeFrom(const PullOverDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullOverDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.common.PointENU position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::jmc_auto::common::PointENU& position() const;
  ::jmc_auto::common::PointENU* mutable_position();
  ::jmc_auto::common::PointENU* release_position();
  void set_allocated_position(::jmc_auto::common::PointENU* position);

  // optional double theta = 2;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 2;
  double theta() const;
  void set_theta(double value);

  // optional double length_front = 3;
  bool has_length_front() const;
  void clear_length_front();
  static const int kLengthFrontFieldNumber = 3;
  double length_front() const;
  void set_length_front(double value);

  // optional double length_back = 4;
  bool has_length_back() const;
  void clear_length_back();
  static const int kLengthBackFieldNumber = 4;
  double length_back() const;
  void set_length_back(double value);

  // optional double width_left = 5;
  bool has_width_left() const;
  void clear_width_left();
  static const int kWidthLeftFieldNumber = 5;
  double width_left() const;
  void set_width_left(double value);

  // optional double width_right = 6;
  bool has_width_right() const;
  void clear_width_right();
  static const int kWidthRightFieldNumber = 6;
  double width_right() const;
  void set_width_right(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.PullOverDebug)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_theta();
  void clear_has_theta();
  void set_has_length_front();
  void clear_has_length_front();
  void set_has_length_back();
  void clear_has_length_back();
  void set_has_width_left();
  void clear_has_width_left();
  void set_has_width_right();
  void clear_has_width_right();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::common::PointENU* position_;
  double theta_;
  double length_front_;
  double length_back_;
  double width_left_;
  double width_right_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanningData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.PlanningData) */ {
 public:
  PlanningData();
  virtual ~PlanningData();

  PlanningData(const PlanningData& from);

  inline PlanningData& operator=(const PlanningData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningData& default_instance();

  static inline const PlanningData* internal_default_instance() {
    return reinterpret_cast<const PlanningData*>(
               &_PlanningData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(PlanningData* other);

  // implements Message ----------------------------------------------

  inline PlanningData* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanningData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanningData& from);
  void MergeFrom(const PlanningData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanningData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Path path = 6;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 6;
  const ::jmc_auto::common::Path& path(int index) const;
  ::jmc_auto::common::Path* mutable_path(int index);
  ::jmc_auto::common::Path* add_path();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >*
      mutable_path();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >&
      path() const;

  // repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
  int speed_plan_size() const;
  void clear_speed_plan();
  static const int kSpeedPlanFieldNumber = 13;
  const ::jmc_auto::planning_internal::SpeedPlan& speed_plan(int index) const;
  ::jmc_auto::planning_internal::SpeedPlan* mutable_speed_plan(int index);
  ::jmc_auto::planning_internal::SpeedPlan* add_speed_plan();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan >*
      mutable_speed_plan();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan >&
      speed_plan() const;

  // repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
  int st_graph_size() const;
  void clear_st_graph();
  static const int kStGraphFieldNumber = 14;
  const ::jmc_auto::planning_internal::STGraphDebug& st_graph(int index) const;
  ::jmc_auto::planning_internal::STGraphDebug* mutable_st_graph(int index);
  ::jmc_auto::planning_internal::STGraphDebug* add_st_graph();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug >*
      mutable_st_graph();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug >&
      st_graph() const;

  // repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
  int sl_frame_size() const;
  void clear_sl_frame();
  static const int kSlFrameFieldNumber = 15;
  const ::jmc_auto::planning_internal::SLFrameDebug& sl_frame(int index) const;
  ::jmc_auto::planning_internal::SLFrameDebug* mutable_sl_frame(int index);
  ::jmc_auto::planning_internal::SLFrameDebug* add_sl_frame();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug >*
      mutable_sl_frame();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug >&
      sl_frame() const;

  // repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
  int obstacle_size() const;
  void clear_obstacle();
  static const int kObstacleFieldNumber = 18;
  const ::jmc_auto::planning_internal::ObstacleDebug& obstacle(int index) const;
  ::jmc_auto::planning_internal::ObstacleDebug* mutable_obstacle(int index);
  ::jmc_auto::planning_internal::ObstacleDebug* add_obstacle();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >*
      mutable_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >&
      obstacle() const;

  // repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
  int reference_line_size() const;
  void clear_reference_line();
  static const int kReferenceLineFieldNumber = 19;
  const ::jmc_auto::planning_internal::ReferenceLineDebug& reference_line(int index) const;
  ::jmc_auto::planning_internal::ReferenceLineDebug* mutable_reference_line(int index);
  ::jmc_auto::planning_internal::ReferenceLineDebug* add_reference_line();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug >*
      mutable_reference_line();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug >&
      reference_line() const;

  // repeated .jmc_auto.dreamview.Chart chart = 25;
  int chart_size() const;
  void clear_chart();
  static const int kChartFieldNumber = 25;
  const ::jmc_auto::dreamview::Chart& chart(int index) const;
  ::jmc_auto::dreamview::Chart* mutable_chart(int index);
  ::jmc_auto::dreamview::Chart* add_chart();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart >*
      mutable_chart();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart >&
      chart() const;

  // optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
  bool has_adc_position() const;
  void clear_adc_position();
  static const int kAdcPositionFieldNumber = 7;
  const ::jmc_auto::localization::LocalizationEstimate& adc_position() const;
  ::jmc_auto::localization::LocalizationEstimate* mutable_adc_position();
  ::jmc_auto::localization::LocalizationEstimate* release_adc_position();
  void set_allocated_adc_position(::jmc_auto::localization::LocalizationEstimate* adc_position);

  // optional .jmc_auto.canbus.Chassis chassis = 8;
  bool has_chassis() const;
  void clear_chassis();
  static const int kChassisFieldNumber = 8;
  const ::jmc_auto::canbus::Chassis& chassis() const;
  ::jmc_auto::canbus::Chassis* mutable_chassis();
  ::jmc_auto::canbus::Chassis* release_chassis();
  void set_allocated_chassis(::jmc_auto::canbus::Chassis* chassis);

  // optional .jmc_auto.routing.RoutingResponse routing = 9;
  bool has_routing() const;
  void clear_routing();
  static const int kRoutingFieldNumber = 9;
  const ::jmc_auto::routing::RoutingResponse& routing() const;
  ::jmc_auto::routing::RoutingResponse* mutable_routing();
  ::jmc_auto::routing::RoutingResponse* release_routing();
  void set_allocated_routing(::jmc_auto::routing::RoutingResponse* routing);

  // optional .jmc_auto.common.TrajectoryPoint init_point = 10;
  bool has_init_point() const;
  void clear_init_point();
  static const int kInitPointFieldNumber = 10;
  const ::jmc_auto::common::TrajectoryPoint& init_point() const;
  ::jmc_auto::common::TrajectoryPoint* mutable_init_point();
  ::jmc_auto::common::TrajectoryPoint* release_init_point();
  void set_allocated_init_point(::jmc_auto::common::TrajectoryPoint* init_point);

  // optional .jmc_auto.common.Header prediction_header = 16;
  bool has_prediction_header() const;
  void clear_prediction_header();
  static const int kPredictionHeaderFieldNumber = 16;
  const ::jmc_auto::common::Header& prediction_header() const;
  ::jmc_auto::common::Header* mutable_prediction_header();
  ::jmc_auto::common::Header* release_prediction_header();
  void set_allocated_prediction_header(::jmc_auto::common::Header* prediction_header);

  // optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
  bool has_signal_light() const;
  void clear_signal_light();
  static const int kSignalLightFieldNumber = 17;
  const ::jmc_auto::planning_internal::SignalLightDebug& signal_light() const;
  ::jmc_auto::planning_internal::SignalLightDebug* mutable_signal_light();
  ::jmc_auto::planning_internal::SignalLightDebug* release_signal_light();
  void set_allocated_signal_light(::jmc_auto::planning_internal::SignalLightDebug* signal_light);

  // optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  bool has_dp_poly_graph() const;
  void clear_dp_poly_graph();
  static const int kDpPolyGraphFieldNumber = 20;
  const ::jmc_auto::planning_internal::DpPolyGraphDebug& dp_poly_graph() const;
  ::jmc_auto::planning_internal::DpPolyGraphDebug* mutable_dp_poly_graph();
  ::jmc_auto::planning_internal::DpPolyGraphDebug* release_dp_poly_graph();
  void set_allocated_dp_poly_graph(::jmc_auto::planning_internal::DpPolyGraphDebug* dp_poly_graph);

  // optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
  bool has_lattice_st_image() const;
  void clear_lattice_st_image();
  static const int kLatticeStImageFieldNumber = 21;
  const ::jmc_auto::planning_internal::LatticeStTraining& lattice_st_image() const;
  ::jmc_auto::planning_internal::LatticeStTraining* mutable_lattice_st_image();
  ::jmc_auto::planning_internal::LatticeStTraining* release_lattice_st_image();
  void set_allocated_lattice_st_image(::jmc_auto::planning_internal::LatticeStTraining* lattice_st_image);

  // optional .jmc_auto.relative_map.MapMsg relative_map = 22;
  bool has_relative_map() const;
  void clear_relative_map();
  static const int kRelativeMapFieldNumber = 22;
  const ::jmc_auto::relative_map::MapMsg& relative_map() const;
  ::jmc_auto::relative_map::MapMsg* mutable_relative_map();
  ::jmc_auto::relative_map::MapMsg* release_relative_map();
  void set_allocated_relative_map(::jmc_auto::relative_map::MapMsg* relative_map);

  // optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  bool has_auto_tuning_training_data() const;
  void clear_auto_tuning_training_data();
  static const int kAutoTuningTrainingDataFieldNumber = 23;
  const ::jmc_auto::planning_internal::AutoTuningTrainingData& auto_tuning_training_data() const;
  ::jmc_auto::planning_internal::AutoTuningTrainingData* mutable_auto_tuning_training_data();
  ::jmc_auto::planning_internal::AutoTuningTrainingData* release_auto_tuning_training_data();
  void set_allocated_auto_tuning_training_data(::jmc_auto::planning_internal::AutoTuningTrainingData* auto_tuning_training_data);

  // optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 26;
  const ::jmc_auto::planning_internal::ScenarioDebug& scenario() const;
  ::jmc_auto::planning_internal::ScenarioDebug* mutable_scenario();
  ::jmc_auto::planning_internal::ScenarioDebug* release_scenario();
  void set_allocated_scenario(::jmc_auto::planning_internal::ScenarioDebug* scenario);

  // optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
  bool has_open_space() const;
  void clear_open_space();
  static const int kOpenSpaceFieldNumber = 27;
  const ::jmc_auto::planning_internal::OpenSpaceDebug& open_space() const;
  ::jmc_auto::planning_internal::OpenSpaceDebug* mutable_open_space();
  ::jmc_auto::planning_internal::OpenSpaceDebug* release_open_space();
  void set_allocated_open_space(::jmc_auto::planning_internal::OpenSpaceDebug* open_space);

  // optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
  bool has_smoother() const;
  void clear_smoother();
  static const int kSmootherFieldNumber = 28;
  const ::jmc_auto::planning_internal::SmootherDebug& smoother() const;
  ::jmc_auto::planning_internal::SmootherDebug* mutable_smoother();
  ::jmc_auto::planning_internal::SmootherDebug* release_smoother();
  void set_allocated_smoother(::jmc_auto::planning_internal::SmootherDebug* smoother);

  // optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
  bool has_pull_over() const;
  void clear_pull_over();
  static const int kPullOverFieldNumber = 29;
  const ::jmc_auto::planning_internal::PullOverDebug& pull_over() const;
  ::jmc_auto::planning_internal::PullOverDebug* mutable_pull_over();
  ::jmc_auto::planning_internal::PullOverDebug* release_pull_over();
  void set_allocated_pull_over(::jmc_auto::planning_internal::PullOverDebug* pull_over);

  // optional double front_clear_distance = 24;
  bool has_front_clear_distance() const;
  void clear_front_clear_distance();
  static const int kFrontClearDistanceFieldNumber = 24;
  double front_clear_distance() const;
  void set_front_clear_distance(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.PlanningData)
 private:
  void set_has_adc_position();
  void clear_has_adc_position();
  void set_has_chassis();
  void clear_has_chassis();
  void set_has_routing();
  void clear_has_routing();
  void set_has_init_point();
  void clear_has_init_point();
  void set_has_prediction_header();
  void clear_has_prediction_header();
  void set_has_signal_light();
  void clear_has_signal_light();
  void set_has_dp_poly_graph();
  void clear_has_dp_poly_graph();
  void set_has_lattice_st_image();
  void clear_has_lattice_st_image();
  void set_has_relative_map();
  void clear_has_relative_map();
  void set_has_auto_tuning_training_data();
  void clear_has_auto_tuning_training_data();
  void set_has_front_clear_distance();
  void clear_has_front_clear_distance();
  void set_has_scenario();
  void clear_has_scenario();
  void set_has_open_space();
  void clear_has_open_space();
  void set_has_smoother();
  void clear_has_smoother();
  void set_has_pull_over();
  void clear_has_pull_over();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path > path_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan > speed_plan_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug > st_graph_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug > sl_frame_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug > obstacle_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug > reference_line_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart > chart_;
  ::jmc_auto::localization::LocalizationEstimate* adc_position_;
  ::jmc_auto::canbus::Chassis* chassis_;
  ::jmc_auto::routing::RoutingResponse* routing_;
  ::jmc_auto::common::TrajectoryPoint* init_point_;
  ::jmc_auto::common::Header* prediction_header_;
  ::jmc_auto::planning_internal::SignalLightDebug* signal_light_;
  ::jmc_auto::planning_internal::DpPolyGraphDebug* dp_poly_graph_;
  ::jmc_auto::planning_internal::LatticeStTraining* lattice_st_image_;
  ::jmc_auto::relative_map::MapMsg* relative_map_;
  ::jmc_auto::planning_internal::AutoTuningTrainingData* auto_tuning_training_data_;
  ::jmc_auto::planning_internal::ScenarioDebug* scenario_;
  ::jmc_auto::planning_internal::OpenSpaceDebug* open_space_;
  ::jmc_auto::planning_internal::SmootherDebug* smoother_;
  ::jmc_auto::planning_internal::PullOverDebug* pull_over_;
  double front_clear_distance_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatticeStPixel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.LatticeStPixel) */ {
 public:
  LatticeStPixel();
  virtual ~LatticeStPixel();

  LatticeStPixel(const LatticeStPixel& from);

  inline LatticeStPixel& operator=(const LatticeStPixel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatticeStPixel& default_instance();

  static inline const LatticeStPixel* internal_default_instance() {
    return reinterpret_cast<const LatticeStPixel*>(
               &_LatticeStPixel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(LatticeStPixel* other);

  // implements Message ----------------------------------------------

  inline LatticeStPixel* New() const PROTOBUF_FINAL { return New(NULL); }

  LatticeStPixel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatticeStPixel& from);
  void MergeFrom(const LatticeStPixel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatticeStPixel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  ::google::protobuf::int32 s() const;
  void set_s(::google::protobuf::int32 value);

  // optional int32 t = 2;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 2;
  ::google::protobuf::int32 t() const;
  void set_t(::google::protobuf::int32 value);

  // optional uint32 r = 3;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 3;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // optional uint32 g = 4;
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 4;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // optional uint32 b = 5;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 5;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.LatticeStPixel)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_t();
  void clear_has_t();
  void set_has_r();
  void clear_has_r();
  void set_has_g();
  void clear_has_g();
  void set_has_b();
  void clear_has_b();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 s_;
  ::google::protobuf::int32 t_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LatticeStTraining : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.LatticeStTraining) */ {
 public:
  LatticeStTraining();
  virtual ~LatticeStTraining();

  LatticeStTraining(const LatticeStTraining& from);

  inline LatticeStTraining& operator=(const LatticeStTraining& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatticeStTraining& default_instance();

  static inline const LatticeStTraining* internal_default_instance() {
    return reinterpret_cast<const LatticeStTraining*>(
               &_LatticeStTraining_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(LatticeStTraining* other);

  // implements Message ----------------------------------------------

  inline LatticeStTraining* New() const PROTOBUF_FINAL { return New(NULL); }

  LatticeStTraining* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatticeStTraining& from);
  void MergeFrom(const LatticeStTraining& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatticeStTraining* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
  int pixel_size() const;
  void clear_pixel();
  static const int kPixelFieldNumber = 1;
  const ::jmc_auto::planning_internal::LatticeStPixel& pixel(int index) const;
  ::jmc_auto::planning_internal::LatticeStPixel* mutable_pixel(int index);
  ::jmc_auto::planning_internal::LatticeStPixel* add_pixel();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel >*
      mutable_pixel();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel >&
      pixel() const;

  // optional string annotation = 3;
  bool has_annotation() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 3;
  const ::std::string& annotation() const;
  void set_annotation(const ::std::string& value);
  #if LANG_CXX11
  void set_annotation(::std::string&& value);
  #endif
  void set_annotation(const char* value);
  void set_annotation(const char* value, size_t size);
  ::std::string* mutable_annotation();
  ::std::string* release_annotation();
  void set_allocated_annotation(::std::string* annotation);

  // optional double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // optional uint32 num_s_grids = 4;
  bool has_num_s_grids() const;
  void clear_num_s_grids();
  static const int kNumSGridsFieldNumber = 4;
  ::google::protobuf::uint32 num_s_grids() const;
  void set_num_s_grids(::google::protobuf::uint32 value);

  // optional uint32 num_t_grids = 5;
  bool has_num_t_grids() const;
  void clear_num_t_grids();
  static const int kNumTGridsFieldNumber = 5;
  ::google::protobuf::uint32 num_t_grids() const;
  void set_num_t_grids(::google::protobuf::uint32 value);

  // optional double s_resolution = 6;
  bool has_s_resolution() const;
  void clear_s_resolution();
  static const int kSResolutionFieldNumber = 6;
  double s_resolution() const;
  void set_s_resolution(double value);

  // optional double t_resolution = 7;
  bool has_t_resolution() const;
  void clear_t_resolution();
  static const int kTResolutionFieldNumber = 7;
  double t_resolution() const;
  void set_t_resolution(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.LatticeStTraining)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_annotation();
  void clear_has_annotation();
  void set_has_num_s_grids();
  void clear_has_num_s_grids();
  void set_has_num_t_grids();
  void clear_has_num_t_grids();
  void set_has_s_resolution();
  void clear_has_s_resolution();
  void set_has_t_resolution();
  void clear_has_t_resolution();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel > pixel_;
  ::google::protobuf::internal::ArenaStringPtr annotation_;
  double timestamp_;
  ::google::protobuf::uint32 num_s_grids_;
  ::google::protobuf::uint32 num_t_grids_;
  double s_resolution_;
  double t_resolution_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CostComponents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.CostComponents) */ {
 public:
  CostComponents();
  virtual ~CostComponents();

  CostComponents(const CostComponents& from);

  inline CostComponents& operator=(const CostComponents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CostComponents& default_instance();

  static inline const CostComponents* internal_default_instance() {
    return reinterpret_cast<const CostComponents*>(
               &_CostComponents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CostComponents* other);

  // implements Message ----------------------------------------------

  inline CostComponents* New() const PROTOBUF_FINAL { return New(NULL); }

  CostComponents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CostComponents& from);
  void MergeFrom(const CostComponents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CostComponents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double cost_component = 1;
  int cost_component_size() const;
  void clear_cost_component();
  static const int kCostComponentFieldNumber = 1;
  double cost_component(int index) const;
  void set_cost_component(int index, double value);
  void add_cost_component(double value);
  const ::google::protobuf::RepeatedField< double >&
      cost_component() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_cost_component();

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.CostComponents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > cost_component_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AutoTuningTrainingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.AutoTuningTrainingData) */ {
 public:
  AutoTuningTrainingData();
  virtual ~AutoTuningTrainingData();

  AutoTuningTrainingData(const AutoTuningTrainingData& from);

  inline AutoTuningTrainingData& operator=(const AutoTuningTrainingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoTuningTrainingData& default_instance();

  static inline const AutoTuningTrainingData* internal_default_instance() {
    return reinterpret_cast<const AutoTuningTrainingData*>(
               &_AutoTuningTrainingData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(AutoTuningTrainingData* other);

  // implements Message ----------------------------------------------

  inline AutoTuningTrainingData* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoTuningTrainingData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoTuningTrainingData& from);
  void MergeFrom(const AutoTuningTrainingData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoTuningTrainingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
  bool has_teacher_component() const;
  void clear_teacher_component();
  static const int kTeacherComponentFieldNumber = 1;
  const ::jmc_auto::planning_internal::CostComponents& teacher_component() const;
  ::jmc_auto::planning_internal::CostComponents* mutable_teacher_component();
  ::jmc_auto::planning_internal::CostComponents* release_teacher_component();
  void set_allocated_teacher_component(::jmc_auto::planning_internal::CostComponents* teacher_component);

  // optional .jmc_auto.planning_internal.CostComponents student_component = 2;
  bool has_student_component() const;
  void clear_student_component();
  static const int kStudentComponentFieldNumber = 2;
  const ::jmc_auto::planning_internal::CostComponents& student_component() const;
  ::jmc_auto::planning_internal::CostComponents* mutable_student_component();
  ::jmc_auto::planning_internal::CostComponents* release_student_component();
  void set_allocated_student_component(::jmc_auto::planning_internal::CostComponents* student_component);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.AutoTuningTrainingData)
 private:
  void set_has_teacher_component();
  void clear_has_teacher_component();
  void set_has_student_component();
  void clear_has_student_component();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning_internal::CostComponents* teacher_component_;
  ::jmc_auto::planning_internal::CostComponents* student_component_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudReferenceLineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.CloudReferenceLineRequest) */ {
 public:
  CloudReferenceLineRequest();
  virtual ~CloudReferenceLineRequest();

  CloudReferenceLineRequest(const CloudReferenceLineRequest& from);

  inline CloudReferenceLineRequest& operator=(const CloudReferenceLineRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudReferenceLineRequest& default_instance();

  static inline const CloudReferenceLineRequest* internal_default_instance() {
    return reinterpret_cast<const CloudReferenceLineRequest*>(
               &_CloudReferenceLineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CloudReferenceLineRequest* other);

  // implements Message ----------------------------------------------

  inline CloudReferenceLineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudReferenceLineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudReferenceLineRequest& from);
  void MergeFrom(const CloudReferenceLineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudReferenceLineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
  int lane_segment_size() const;
  void clear_lane_segment();
  static const int kLaneSegmentFieldNumber = 1;
  const ::jmc_auto::routing::LaneSegment& lane_segment(int index) const;
  ::jmc_auto::routing::LaneSegment* mutable_lane_segment(int index);
  ::jmc_auto::routing::LaneSegment* add_lane_segment();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >*
      mutable_lane_segment();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >&
      lane_segment() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.CloudReferenceLineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment > lane_segment_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudReferenceLineRoutingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest) */ {
 public:
  CloudReferenceLineRoutingRequest();
  virtual ~CloudReferenceLineRoutingRequest();

  CloudReferenceLineRoutingRequest(const CloudReferenceLineRoutingRequest& from);

  inline CloudReferenceLineRoutingRequest& operator=(const CloudReferenceLineRoutingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudReferenceLineRoutingRequest& default_instance();

  static inline const CloudReferenceLineRoutingRequest* internal_default_instance() {
    return reinterpret_cast<const CloudReferenceLineRoutingRequest*>(
               &_CloudReferenceLineRoutingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(CloudReferenceLineRoutingRequest* other);

  // implements Message ----------------------------------------------

  inline CloudReferenceLineRoutingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudReferenceLineRoutingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudReferenceLineRoutingRequest& from);
  void MergeFrom(const CloudReferenceLineRoutingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudReferenceLineRoutingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.routing.RoutingResponse routing = 1;
  bool has_routing() const;
  void clear_routing();
  static const int kRoutingFieldNumber = 1;
  const ::jmc_auto::routing::RoutingResponse& routing() const;
  ::jmc_auto::routing::RoutingResponse* mutable_routing();
  ::jmc_auto::routing::RoutingResponse* release_routing();
  void set_allocated_routing(::jmc_auto::routing::RoutingResponse* routing);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest)
 private:
  void set_has_routing();
  void clear_has_routing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::routing::RoutingResponse* routing_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CloudReferenceLineResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning_internal.CloudReferenceLineResponse) */ {
 public:
  CloudReferenceLineResponse();
  virtual ~CloudReferenceLineResponse();

  CloudReferenceLineResponse(const CloudReferenceLineResponse& from);

  inline CloudReferenceLineResponse& operator=(const CloudReferenceLineResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudReferenceLineResponse& default_instance();

  static inline const CloudReferenceLineResponse* internal_default_instance() {
    return reinterpret_cast<const CloudReferenceLineResponse*>(
               &_CloudReferenceLineResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(CloudReferenceLineResponse* other);

  // implements Message ----------------------------------------------

  inline CloudReferenceLineResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CloudReferenceLineResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CloudReferenceLineResponse& from);
  void MergeFrom(const CloudReferenceLineResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CloudReferenceLineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Path segment = 1;
  int segment_size() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 1;
  const ::jmc_auto::common::Path& segment(int index) const;
  ::jmc_auto::common::Path* mutable_segment(int index);
  ::jmc_auto::common::Path* add_segment();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >*
      mutable_segment();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >&
      segment() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.planning_internal.CloudReferenceLineResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path > segment_;
  friend struct protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug

// optional .jmc_auto.planning_internal.PlanningData planning_data = 2;
inline bool Debug::has_planning_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug::set_has_planning_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug::clear_has_planning_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->::jmc_auto::planning_internal::PlanningData::Clear();
  clear_has_planning_data();
}
inline const ::jmc_auto::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.Debug.planning_data)
  return planning_data_ != NULL ? *planning_data_
                         : *::jmc_auto::planning_internal::PlanningData::internal_default_instance();
}
inline ::jmc_auto::planning_internal::PlanningData* Debug::mutable_planning_data() {
  set_has_planning_data();
  if (planning_data_ == NULL) {
    planning_data_ = new ::jmc_auto::planning_internal::PlanningData;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.Debug.planning_data)
  return planning_data_;
}
inline ::jmc_auto::planning_internal::PlanningData* Debug::release_planning_data() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.Debug.planning_data)
  clear_has_planning_data();
  ::jmc_auto::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = NULL;
  return temp;
}
inline void Debug::set_allocated_planning_data(::jmc_auto::planning_internal::PlanningData* planning_data) {
  delete planning_data_;
  planning_data_ = planning_data;
  if (planning_data) {
    set_has_planning_data();
  } else {
    clear_has_planning_data();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.Debug.planning_data)
}

// -------------------------------------------------------------------

// SpeedPlan

// optional string name = 1;
inline bool SpeedPlan::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPlan::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPlan::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPlan::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SpeedPlan::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SpeedPlan.name)
  return name_.GetNoArena();
}
inline void SpeedPlan::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SpeedPlan.name)
}
#if LANG_CXX11
inline void SpeedPlan::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SpeedPlan.name)
}
#endif
inline void SpeedPlan::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SpeedPlan.name)
}
inline void SpeedPlan::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SpeedPlan.name)
}
inline ::std::string* SpeedPlan::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SpeedPlan.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpeedPlan::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SpeedPlan.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpeedPlan::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SpeedPlan.name)
}

// repeated .jmc_auto.common.SpeedPoint speed_point = 2;
inline int SpeedPlan::speed_point_size() const {
  return speed_point_.size();
}
inline void SpeedPlan::clear_speed_point() {
  speed_point_.Clear();
}
inline const ::jmc_auto::common::SpeedPoint& SpeedPlan::speed_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Get(index);
}
inline ::jmc_auto::common::SpeedPoint* SpeedPlan::mutable_speed_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Mutable(index);
}
inline ::jmc_auto::common::SpeedPoint* SpeedPlan::add_speed_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
SpeedPlan::mutable_speed_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return &speed_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
SpeedPlan::speed_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SpeedPlan.speed_point)
  return speed_point_;
}

// -------------------------------------------------------------------

// StGraphBoundaryDebug

// optional string name = 1;
inline bool StGraphBoundaryDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StGraphBoundaryDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StGraphBoundaryDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StGraphBoundaryDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StGraphBoundaryDebug::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
  return name_.GetNoArena();
}
inline void StGraphBoundaryDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
#if LANG_CXX11
inline void StGraphBoundaryDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
#endif
inline void StGraphBoundaryDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
inline void StGraphBoundaryDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}
inline ::std::string* StGraphBoundaryDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StGraphBoundaryDebug::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StGraphBoundaryDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.StGraphBoundaryDebug.name)
}

// repeated .jmc_auto.common.SpeedPoint point = 2;
inline int StGraphBoundaryDebug::point_size() const {
  return point_.size();
}
inline void StGraphBoundaryDebug::clear_point() {
  point_.Clear();
}
inline const ::jmc_auto::common::SpeedPoint& StGraphBoundaryDebug::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_.Get(index);
}
inline ::jmc_auto::common::SpeedPoint* StGraphBoundaryDebug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_.Mutable(index);
}
inline ::jmc_auto::common::SpeedPoint* StGraphBoundaryDebug::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
StGraphBoundaryDebug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
StGraphBoundaryDebug::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.StGraphBoundaryDebug.point)
  return point_;
}

// optional .jmc_auto.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
inline bool StGraphBoundaryDebug::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StGraphBoundaryDebug::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StGraphBoundaryDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StGraphBoundaryDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.StGraphBoundaryDebug.type)
  return static_cast< ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType >(type_);
}
inline void StGraphBoundaryDebug::set_type(::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  assert(::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.StGraphBoundaryDebug.type)
}

// -------------------------------------------------------------------

// SLFrameDebug

// optional string name = 1;
inline bool SLFrameDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SLFrameDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SLFrameDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SLFrameDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SLFrameDebug::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.name)
  return name_.GetNoArena();
}
inline void SLFrameDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.name)
}
#if LANG_CXX11
inline void SLFrameDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SLFrameDebug.name)
}
#endif
inline void SLFrameDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SLFrameDebug.name)
}
inline void SLFrameDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SLFrameDebug.name)
}
inline ::std::string* SLFrameDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SLFrameDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SLFrameDebug::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SLFrameDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SLFrameDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SLFrameDebug.name)
}

// repeated double sampled_s = 2;
inline int SLFrameDebug::sampled_s_size() const {
  return sampled_s_.size();
}
inline void SLFrameDebug::clear_sampled_s() {
  sampled_s_.Clear();
}
inline double SLFrameDebug::sampled_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_.Get(index);
}
inline void SLFrameDebug::set_sampled_s(int index, double value) {
  sampled_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
}
inline void SLFrameDebug::add_sampled_s(double value) {
  sampled_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::sampled_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
  return sampled_s_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_sampled_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.sampled_s)
  return &sampled_s_;
}

// repeated double static_obstacle_lower_bound = 3;
inline int SLFrameDebug::static_obstacle_lower_bound_size() const {
  return static_obstacle_lower_bound_.size();
}
inline void SLFrameDebug::clear_static_obstacle_lower_bound() {
  static_obstacle_lower_bound_.Clear();
}
inline double SLFrameDebug::static_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_.Get(index);
}
inline void SLFrameDebug::set_static_obstacle_lower_bound(int index, double value) {
  static_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
inline void SLFrameDebug::add_static_obstacle_lower_bound(double value) {
  static_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return static_obstacle_lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return &static_obstacle_lower_bound_;
}

// repeated double dynamic_obstacle_lower_bound = 4;
inline int SLFrameDebug::dynamic_obstacle_lower_bound_size() const {
  return dynamic_obstacle_lower_bound_.size();
}
inline void SLFrameDebug::clear_dynamic_obstacle_lower_bound() {
  dynamic_obstacle_lower_bound_.Clear();
}
inline double SLFrameDebug::dynamic_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_.Get(index);
}
inline void SLFrameDebug::set_dynamic_obstacle_lower_bound(int index, double value) {
  dynamic_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
inline void SLFrameDebug::add_dynamic_obstacle_lower_bound(double value) {
  dynamic_obstacle_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return dynamic_obstacle_lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return &dynamic_obstacle_lower_bound_;
}

// repeated double static_obstacle_upper_bound = 5;
inline int SLFrameDebug::static_obstacle_upper_bound_size() const {
  return static_obstacle_upper_bound_.size();
}
inline void SLFrameDebug::clear_static_obstacle_upper_bound() {
  static_obstacle_upper_bound_.Clear();
}
inline double SLFrameDebug::static_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_.Get(index);
}
inline void SLFrameDebug::set_static_obstacle_upper_bound(int index, double value) {
  static_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
inline void SLFrameDebug::add_static_obstacle_upper_bound(double value) {
  static_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::static_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return static_obstacle_upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return &static_obstacle_upper_bound_;
}

// repeated double dynamic_obstacle_upper_bound = 6;
inline int SLFrameDebug::dynamic_obstacle_upper_bound_size() const {
  return dynamic_obstacle_upper_bound_.size();
}
inline void SLFrameDebug::clear_dynamic_obstacle_upper_bound() {
  dynamic_obstacle_upper_bound_.Clear();
}
inline double SLFrameDebug::dynamic_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_.Get(index);
}
inline void SLFrameDebug::set_dynamic_obstacle_upper_bound(int index, double value) {
  dynamic_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
inline void SLFrameDebug::add_dynamic_obstacle_upper_bound(double value) {
  dynamic_obstacle_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return dynamic_obstacle_upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return &dynamic_obstacle_upper_bound_;
}

// repeated double map_lower_bound = 7;
inline int SLFrameDebug::map_lower_bound_size() const {
  return map_lower_bound_.size();
}
inline void SLFrameDebug::clear_map_lower_bound() {
  map_lower_bound_.Clear();
}
inline double SLFrameDebug::map_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_.Get(index);
}
inline void SLFrameDebug::set_map_lower_bound(int index, double value) {
  map_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
}
inline void SLFrameDebug::add_map_lower_bound(double value) {
  map_lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
  return map_lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.map_lower_bound)
  return &map_lower_bound_;
}

// repeated double map_upper_bound = 8;
inline int SLFrameDebug::map_upper_bound_size() const {
  return map_upper_bound_.size();
}
inline void SLFrameDebug::clear_map_upper_bound() {
  map_upper_bound_.Clear();
}
inline double SLFrameDebug::map_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_.Get(index);
}
inline void SLFrameDebug::set_map_upper_bound(int index, double value) {
  map_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
}
inline void SLFrameDebug::add_map_upper_bound(double value) {
  map_upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::map_upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
  return map_upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_map_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.map_upper_bound)
  return &map_upper_bound_;
}

// repeated .jmc_auto.common.SLPoint sl_path = 9;
inline int SLFrameDebug::sl_path_size() const {
  return sl_path_.size();
}
inline void SLFrameDebug::clear_sl_path() {
  sl_path_.Clear();
}
inline const ::jmc_auto::common::SLPoint& SLFrameDebug::sl_path(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Get(index);
}
inline ::jmc_auto::common::SLPoint* SLFrameDebug::mutable_sl_path(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Mutable(index);
}
inline ::jmc_auto::common::SLPoint* SLFrameDebug::add_sl_path() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
SLFrameDebug::mutable_sl_path() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return &sl_path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
SLFrameDebug::sl_path() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.sl_path)
  return sl_path_;
}

// repeated double aggregated_boundary_s = 10;
inline int SLFrameDebug::aggregated_boundary_s_size() const {
  return aggregated_boundary_s_.size();
}
inline void SLFrameDebug::clear_aggregated_boundary_s() {
  aggregated_boundary_s_.Clear();
}
inline double SLFrameDebug::aggregated_boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_.Get(index);
}
inline void SLFrameDebug::set_aggregated_boundary_s(int index, double value) {
  aggregated_boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
inline void SLFrameDebug::add_aggregated_boundary_s(double value) {
  aggregated_boundary_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return aggregated_boundary_s_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return &aggregated_boundary_s_;
}

// repeated double aggregated_boundary_low = 11;
inline int SLFrameDebug::aggregated_boundary_low_size() const {
  return aggregated_boundary_low_.size();
}
inline void SLFrameDebug::clear_aggregated_boundary_low() {
  aggregated_boundary_low_.Clear();
}
inline double SLFrameDebug::aggregated_boundary_low(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_.Get(index);
}
inline void SLFrameDebug::set_aggregated_boundary_low(int index, double value) {
  aggregated_boundary_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
inline void SLFrameDebug::add_aggregated_boundary_low(double value) {
  aggregated_boundary_low_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_low() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return aggregated_boundary_low_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_low() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return &aggregated_boundary_low_;
}

// repeated double aggregated_boundary_high = 12;
inline int SLFrameDebug::aggregated_boundary_high_size() const {
  return aggregated_boundary_high_.size();
}
inline void SLFrameDebug::clear_aggregated_boundary_high() {
  aggregated_boundary_high_.Clear();
}
inline double SLFrameDebug::aggregated_boundary_high(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_.Get(index);
}
inline void SLFrameDebug::set_aggregated_boundary_high(int index, double value) {
  aggregated_boundary_high_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
inline void SLFrameDebug::add_aggregated_boundary_high(double value) {
  aggregated_boundary_high_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
inline const ::google::protobuf::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_high() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return aggregated_boundary_high_;
}
inline ::google::protobuf::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_high() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return &aggregated_boundary_high_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphSpeedConstraint

// repeated double t = 1;
inline int STGraphDebug_STGraphSpeedConstraint::t_size() const {
  return t_.size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_t() {
  t_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::t(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_.Get(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
inline void STGraphDebug_STGraphSpeedConstraint::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::t() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return &t_;
}

// repeated double lower_bound = 2;
inline int STGraphDebug_STGraphSpeedConstraint::lower_bound_size() const {
  return lower_bound_.size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_lower_bound() {
  lower_bound_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_.Get(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_lower_bound(int index, double value) {
  lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
inline void STGraphDebug_STGraphSpeedConstraint::add_lower_bound(double value) {
  lower_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return lower_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return &lower_bound_;
}

// repeated double upper_bound = 3;
inline int STGraphDebug_STGraphSpeedConstraint::upper_bound_size() const {
  return upper_bound_.size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_upper_bound() {
  upper_bound_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_.Get(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_upper_bound(int index, double value) {
  upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
inline void STGraphDebug_STGraphSpeedConstraint::add_upper_bound(double value) {
  upper_bound_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return upper_bound_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return &upper_bound_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelCuiseRef

// repeated double t = 1;
inline int STGraphDebug_STGraphKernelCuiseRef::t_size() const {
  return t_.size();
}
inline void STGraphDebug_STGraphKernelCuiseRef::clear_t() {
  t_.Clear();
}
inline double STGraphDebug_STGraphKernelCuiseRef::t(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_.Get(index);
}
inline void STGraphDebug_STGraphKernelCuiseRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
inline void STGraphDebug_STGraphKernelCuiseRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::t() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return &t_;
}

// repeated double cruise_line_s = 2;
inline int STGraphDebug_STGraphKernelCuiseRef::cruise_line_s_size() const {
  return cruise_line_s_.size();
}
inline void STGraphDebug_STGraphKernelCuiseRef::clear_cruise_line_s() {
  cruise_line_s_.Clear();
}
inline double STGraphDebug_STGraphKernelCuiseRef::cruise_line_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_.Get(index);
}
inline void STGraphDebug_STGraphKernelCuiseRef::set_cruise_line_s(int index, double value) {
  cruise_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
inline void STGraphDebug_STGraphKernelCuiseRef::add_cruise_line_s(double value) {
  cruise_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::cruise_line_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return cruise_line_s_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_cruise_line_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return &cruise_line_s_;
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelFollowRef

// repeated double t = 1;
inline int STGraphDebug_STGraphKernelFollowRef::t_size() const {
  return t_.size();
}
inline void STGraphDebug_STGraphKernelFollowRef::clear_t() {
  t_.Clear();
}
inline double STGraphDebug_STGraphKernelFollowRef::t(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_.Get(index);
}
inline void STGraphDebug_STGraphKernelFollowRef::set_t(int index, double value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
inline void STGraphDebug_STGraphKernelFollowRef::add_t(double value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::t() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return &t_;
}

// repeated double follow_line_s = 2;
inline int STGraphDebug_STGraphKernelFollowRef::follow_line_s_size() const {
  return follow_line_s_.size();
}
inline void STGraphDebug_STGraphKernelFollowRef::clear_follow_line_s() {
  follow_line_s_.Clear();
}
inline double STGraphDebug_STGraphKernelFollowRef::follow_line_s(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_.Get(index);
}
inline void STGraphDebug_STGraphKernelFollowRef::set_follow_line_s(int index, double value) {
  follow_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
inline void STGraphDebug_STGraphKernelFollowRef::add_follow_line_s(double value) {
  follow_line_s_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
inline const ::google::protobuf::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::follow_line_s() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return follow_line_s_;
}
inline ::google::protobuf::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_follow_line_s() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return &follow_line_s_;
}

// -------------------------------------------------------------------

// STGraphDebug

// optional string name = 1;
inline bool STGraphDebug::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STGraphDebug::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STGraphDebug::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STGraphDebug::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& STGraphDebug::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.name)
  return name_.GetNoArena();
}
inline void STGraphDebug::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.STGraphDebug.name)
}
#if LANG_CXX11
inline void STGraphDebug::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.STGraphDebug.name)
}
#endif
inline void STGraphDebug::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.STGraphDebug.name)
}
inline void STGraphDebug::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.STGraphDebug.name)
}
inline ::std::string* STGraphDebug::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STGraphDebug::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STGraphDebug::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.name)
}

// repeated .jmc_auto.planning_internal.StGraphBoundaryDebug boundary = 2;
inline int STGraphDebug::boundary_size() const {
  return boundary_.size();
}
inline void STGraphDebug::clear_boundary() {
  boundary_.Clear();
}
inline const ::jmc_auto::planning_internal::StGraphBoundaryDebug& STGraphDebug::boundary(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_.Get(index);
}
inline ::jmc_auto::planning_internal::StGraphBoundaryDebug* STGraphDebug::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_.Mutable(index);
}
inline ::jmc_auto::planning_internal::StGraphBoundaryDebug* STGraphDebug::add_boundary() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug >*
STGraphDebug::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.boundary)
  return &boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::StGraphBoundaryDebug >&
STGraphDebug::boundary() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.boundary)
  return boundary_;
}

// repeated .jmc_auto.common.SpeedPoint speed_limit = 3;
inline int STGraphDebug::speed_limit_size() const {
  return speed_limit_.size();
}
inline void STGraphDebug::clear_speed_limit() {
  speed_limit_.Clear();
}
inline const ::jmc_auto::common::SpeedPoint& STGraphDebug::speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Get(index);
}
inline ::jmc_auto::common::SpeedPoint* STGraphDebug::mutable_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Mutable(index);
}
inline ::jmc_auto::common::SpeedPoint* STGraphDebug::add_speed_limit() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
STGraphDebug::mutable_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return &speed_limit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
STGraphDebug::speed_limit() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.speed_limit)
  return speed_limit_;
}

// repeated .jmc_auto.common.SpeedPoint speed_profile = 4;
inline int STGraphDebug::speed_profile_size() const {
  return speed_profile_.size();
}
inline void STGraphDebug::clear_speed_profile() {
  speed_profile_.Clear();
}
inline const ::jmc_auto::common::SpeedPoint& STGraphDebug::speed_profile(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Get(index);
}
inline ::jmc_auto::common::SpeedPoint* STGraphDebug::mutable_speed_profile(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Mutable(index);
}
inline ::jmc_auto::common::SpeedPoint* STGraphDebug::add_speed_profile() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >*
STGraphDebug::mutable_speed_profile() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return &speed_profile_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SpeedPoint >&
STGraphDebug::speed_profile() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.STGraphDebug.speed_profile)
  return speed_profile_;
}

// optional .jmc_auto.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
inline bool STGraphDebug::has_speed_constraint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STGraphDebug::set_has_speed_constraint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STGraphDebug::clear_has_speed_constraint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STGraphDebug::clear_speed_constraint() {
  if (speed_constraint_ != NULL) speed_constraint_->::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::Clear();
  clear_has_speed_constraint();
}
inline const ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::speed_constraint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_ != NULL ? *speed_constraint_
                         : *::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance();
}
inline ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::mutable_speed_constraint() {
  set_has_speed_constraint();
  if (speed_constraint_ == NULL) {
    speed_constraint_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
  return speed_constraint_;
}
inline ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::release_speed_constraint() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
  clear_has_speed_constraint();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = speed_constraint_;
  speed_constraint_ = NULL;
  return temp;
}
inline void STGraphDebug::set_allocated_speed_constraint(::jmc_auto::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  delete speed_constraint_;
  speed_constraint_ = speed_constraint;
  if (speed_constraint) {
    set_has_speed_constraint();
  } else {
    clear_has_speed_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.speed_constraint)
}

// optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
inline bool STGraphDebug::has_kernel_cruise_ref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STGraphDebug::set_has_kernel_cruise_ref() {
  _has_bits_[0] |= 0x00000004u;
}
inline void STGraphDebug::clear_has_kernel_cruise_ref() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void STGraphDebug::clear_kernel_cruise_ref() {
  if (kernel_cruise_ref_ != NULL) kernel_cruise_ref_->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::Clear();
  clear_has_kernel_cruise_ref();
}
inline const ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::kernel_cruise_ref() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_ != NULL ? *kernel_cruise_ref_
                         : *::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance();
}
inline ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::mutable_kernel_cruise_ref() {
  set_has_kernel_cruise_ref();
  if (kernel_cruise_ref_ == NULL) {
    kernel_cruise_ref_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
  return kernel_cruise_ref_;
}
inline ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::release_kernel_cruise_ref() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
  clear_has_kernel_cruise_ref();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = kernel_cruise_ref_;
  kernel_cruise_ref_ = NULL;
  return temp;
}
inline void STGraphDebug::set_allocated_kernel_cruise_ref(::jmc_auto::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  delete kernel_cruise_ref_;
  kernel_cruise_ref_ = kernel_cruise_ref;
  if (kernel_cruise_ref) {
    set_has_kernel_cruise_ref();
  } else {
    clear_has_kernel_cruise_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.kernel_cruise_ref)
}

// optional .jmc_auto.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
inline bool STGraphDebug::has_kernel_follow_ref() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STGraphDebug::set_has_kernel_follow_ref() {
  _has_bits_[0] |= 0x00000008u;
}
inline void STGraphDebug::clear_has_kernel_follow_ref() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STGraphDebug::clear_kernel_follow_ref() {
  if (kernel_follow_ref_ != NULL) kernel_follow_ref_->::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::Clear();
  clear_has_kernel_follow_ref();
}
inline const ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::kernel_follow_ref() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_ != NULL ? *kernel_follow_ref_
                         : *::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance();
}
inline ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::mutable_kernel_follow_ref() {
  set_has_kernel_follow_ref();
  if (kernel_follow_ref_ == NULL) {
    kernel_follow_ref_ = new ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
  return kernel_follow_ref_;
}
inline ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::release_kernel_follow_ref() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
  clear_has_kernel_follow_ref();
  ::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = kernel_follow_ref_;
  kernel_follow_ref_ = NULL;
  return temp;
}
inline void STGraphDebug::set_allocated_kernel_follow_ref(::jmc_auto::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  delete kernel_follow_ref_;
  kernel_follow_ref_ = kernel_follow_ref;
  if (kernel_follow_ref) {
    set_has_kernel_follow_ref();
  } else {
    clear_has_kernel_follow_ref();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.STGraphDebug.kernel_follow_ref)
}

// -------------------------------------------------------------------

// SignalLightDebug_SignalDebug

// optional string light_id = 1;
inline bool SignalLightDebug_SignalDebug::has_light_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_light_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalLightDebug_SignalDebug::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalLightDebug_SignalDebug::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
inline const ::std::string& SignalLightDebug_SignalDebug::light_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.GetNoArena();
}
inline void SignalLightDebug_SignalDebug::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#if LANG_CXX11
inline void SignalLightDebug_SignalDebug::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
#endif
inline void SignalLightDebug_SignalDebug::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
inline void SignalLightDebug_SignalDebug::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
inline ::std::string* SignalLightDebug_SignalDebug::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalLightDebug_SignalDebug::release_light_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalLightDebug_SignalDebug::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_id)
}

// optional .jmc_auto.perception.TrafficLight.Color color = 2;
inline bool SignalLightDebug_SignalDebug::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignalLightDebug_SignalDebug::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignalLightDebug_SignalDebug::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::jmc_auto::perception::TrafficLight_Color SignalLightDebug_SignalDebug::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.color)
  return static_cast< ::jmc_auto::perception::TrafficLight_Color >(color_);
}
inline void SignalLightDebug_SignalDebug::set_color(::jmc_auto::perception::TrafficLight_Color value) {
  assert(::jmc_auto::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.color)
}

// optional double light_stop_s = 3;
inline bool SignalLightDebug_SignalDebug::has_light_stop_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_light_stop_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalLightDebug_SignalDebug::clear_has_light_stop_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalLightDebug_SignalDebug::clear_light_stop_s() {
  light_stop_s_ = 0;
  clear_has_light_stop_s();
}
inline double SignalLightDebug_SignalDebug::light_stop_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
  return light_stop_s_;
}
inline void SignalLightDebug_SignalDebug::set_light_stop_s(double value) {
  set_has_light_stop_s();
  light_stop_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
}

// optional double adc_stop_deceleration = 4;
inline bool SignalLightDebug_SignalDebug::has_adc_stop_deceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_adc_stop_deceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignalLightDebug_SignalDebug::clear_has_adc_stop_deceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignalLightDebug_SignalDebug::clear_adc_stop_deceleration() {
  adc_stop_deceleration_ = 0;
  clear_has_adc_stop_deceleration();
}
inline double SignalLightDebug_SignalDebug::adc_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deceleration)
  return adc_stop_deceleration_;
}
inline void SignalLightDebug_SignalDebug::set_adc_stop_deceleration(double value) {
  set_has_adc_stop_deceleration();
  adc_stop_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deceleration)
}

// optional bool is_stop_wall_created = 5;
inline bool SignalLightDebug_SignalDebug::has_is_stop_wall_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignalLightDebug_SignalDebug::set_has_is_stop_wall_created() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignalLightDebug_SignalDebug::clear_has_is_stop_wall_created() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignalLightDebug_SignalDebug::clear_is_stop_wall_created() {
  is_stop_wall_created_ = false;
  clear_has_is_stop_wall_created();
}
inline bool SignalLightDebug_SignalDebug::is_stop_wall_created() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
  return is_stop_wall_created_;
}
inline void SignalLightDebug_SignalDebug::set_is_stop_wall_created(bool value) {
  set_has_is_stop_wall_created();
  is_stop_wall_created_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
}

// -------------------------------------------------------------------

// SignalLightDebug

// optional double adc_speed = 1;
inline bool SignalLightDebug::has_adc_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalLightDebug::set_has_adc_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalLightDebug::clear_has_adc_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalLightDebug::clear_adc_speed() {
  adc_speed_ = 0;
  clear_has_adc_speed();
}
inline double SignalLightDebug::adc_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.adc_speed)
  return adc_speed_;
}
inline void SignalLightDebug::set_adc_speed(double value) {
  set_has_adc_speed();
  adc_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.adc_speed)
}

// optional double adc_front_s = 2;
inline bool SignalLightDebug::has_adc_front_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalLightDebug::set_has_adc_front_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalLightDebug::clear_has_adc_front_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalLightDebug::clear_adc_front_s() {
  adc_front_s_ = 0;
  clear_has_adc_front_s();
}
inline double SignalLightDebug::adc_front_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.adc_front_s)
  return adc_front_s_;
}
inline void SignalLightDebug::set_adc_front_s(double value) {
  set_has_adc_front_s();
  adc_front_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SignalLightDebug.adc_front_s)
}

// repeated .jmc_auto.planning_internal.SignalLightDebug.SignalDebug signal = 3;
inline int SignalLightDebug::signal_size() const {
  return signal_.size();
}
inline void SignalLightDebug::clear_signal() {
  signal_.Clear();
}
inline const ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::signal(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_.Get(index);
}
inline ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_.Mutable(index);
}
inline ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::add_signal() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug >*
SignalLightDebug::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SignalLightDebug.signal)
  return &signal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SignalLightDebug_SignalDebug >&
SignalLightDebug::signal() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SignalLightDebug.signal)
  return signal_;
}

// -------------------------------------------------------------------

// DecisionTag

// optional string decider_tag = 1;
inline bool DecisionTag::has_decider_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecisionTag::set_has_decider_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecisionTag::clear_has_decider_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecisionTag::clear_decider_tag() {
  decider_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_decider_tag();
}
inline const ::std::string& DecisionTag::decider_tag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.GetNoArena();
}
inline void DecisionTag::set_decider_tag(const ::std::string& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
#if LANG_CXX11
inline void DecisionTag::set_decider_tag(::std::string&& value) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
#endif
inline void DecisionTag::set_decider_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
inline void DecisionTag::set_decider_tag(const char* value, size_t size) {
  set_has_decider_tag();
  decider_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.DecisionTag.decider_tag)
}
inline ::std::string* DecisionTag::mutable_decider_tag() {
  set_has_decider_tag();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DecisionTag.decider_tag)
  return decider_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecisionTag::release_decider_tag() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.DecisionTag.decider_tag)
  clear_has_decider_tag();
  return decider_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecisionTag::set_allocated_decider_tag(::std::string* decider_tag) {
  if (decider_tag != NULL) {
    set_has_decider_tag();
  } else {
    clear_has_decider_tag();
  }
  decider_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decider_tag);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.DecisionTag.decider_tag)
}

// optional .jmc_auto.planning.ObjectDecisionType decision = 2;
inline bool DecisionTag::has_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecisionTag::set_has_decision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecisionTag::clear_has_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecisionTag::clear_decision() {
  if (decision_ != NULL) decision_->::jmc_auto::planning::ObjectDecisionType::Clear();
  clear_has_decision();
}
inline const ::jmc_auto::planning::ObjectDecisionType& DecisionTag::decision() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DecisionTag.decision)
  return decision_ != NULL ? *decision_
                         : *::jmc_auto::planning::ObjectDecisionType::internal_default_instance();
}
inline ::jmc_auto::planning::ObjectDecisionType* DecisionTag::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::jmc_auto::planning::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DecisionTag.decision)
  return decision_;
}
inline ::jmc_auto::planning::ObjectDecisionType* DecisionTag::release_decision() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.DecisionTag.decision)
  clear_has_decision();
  ::jmc_auto::planning::ObjectDecisionType* temp = decision_;
  decision_ = NULL;
  return temp;
}
inline void DecisionTag::set_allocated_decision(::jmc_auto::planning::ObjectDecisionType* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.DecisionTag.decision)
}

// -------------------------------------------------------------------

// ObstacleDebug

// optional string id = 1;
inline bool ObstacleDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ObstacleDebug::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.id)
  return id_.GetNoArena();
}
inline void ObstacleDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ObstacleDebug.id)
}
#if LANG_CXX11
inline void ObstacleDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.ObstacleDebug.id)
}
#endif
inline void ObstacleDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.ObstacleDebug.id)
}
inline void ObstacleDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.ObstacleDebug.id)
}
inline ::std::string* ObstacleDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ObstacleDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObstacleDebug::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ObstacleDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObstacleDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ObstacleDebug.id)
}

// optional .jmc_auto.planning.SLBoundary sl_boundary = 2;
inline bool ObstacleDebug::has_sl_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleDebug::set_has_sl_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleDebug::clear_has_sl_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleDebug::clear_sl_boundary() {
  if (sl_boundary_ != NULL) sl_boundary_->::jmc_auto::planning::SLBoundary::Clear();
  clear_has_sl_boundary();
}
inline const ::jmc_auto::planning::SLBoundary& ObstacleDebug::sl_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_ != NULL ? *sl_boundary_
                         : *::jmc_auto::planning::SLBoundary::internal_default_instance();
}
inline ::jmc_auto::planning::SLBoundary* ObstacleDebug::mutable_sl_boundary() {
  set_has_sl_boundary();
  if (sl_boundary_ == NULL) {
    sl_boundary_ = new ::jmc_auto::planning::SLBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
  return sl_boundary_;
}
inline ::jmc_auto::planning::SLBoundary* ObstacleDebug::release_sl_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
  clear_has_sl_boundary();
  ::jmc_auto::planning::SLBoundary* temp = sl_boundary_;
  sl_boundary_ = NULL;
  return temp;
}
inline void ObstacleDebug::set_allocated_sl_boundary(::jmc_auto::planning::SLBoundary* sl_boundary) {
  delete sl_boundary_;
  sl_boundary_ = sl_boundary;
  if (sl_boundary) {
    set_has_sl_boundary();
  } else {
    clear_has_sl_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ObstacleDebug.sl_boundary)
}

// repeated .jmc_auto.planning_internal.DecisionTag decision_tag = 3;
inline int ObstacleDebug::decision_tag_size() const {
  return decision_tag_.size();
}
inline void ObstacleDebug::clear_decision_tag() {
  decision_tag_.Clear();
}
inline const ::jmc_auto::planning_internal::DecisionTag& ObstacleDebug::decision_tag(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Get(index);
}
inline ::jmc_auto::planning_internal::DecisionTag* ObstacleDebug::mutable_decision_tag(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Mutable(index);
}
inline ::jmc_auto::planning_internal::DecisionTag* ObstacleDebug::add_decision_tag() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag >*
ObstacleDebug::mutable_decision_tag() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return &decision_tag_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::DecisionTag >&
ObstacleDebug::decision_tag() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.ObstacleDebug.decision_tag)
  return decision_tag_;
}

// repeated double vertices_x_coords = 4;
inline int ObstacleDebug::vertices_x_coords_size() const {
  return vertices_x_coords_.size();
}
inline void ObstacleDebug::clear_vertices_x_coords() {
  vertices_x_coords_.Clear();
}
inline double ObstacleDebug::vertices_x_coords(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
  return vertices_x_coords_.Get(index);
}
inline void ObstacleDebug::set_vertices_x_coords(int index, double value) {
  vertices_x_coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
}
inline void ObstacleDebug::add_vertices_x_coords(double value) {
  vertices_x_coords_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
}
inline const ::google::protobuf::RepeatedField< double >&
ObstacleDebug::vertices_x_coords() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
  return vertices_x_coords_;
}
inline ::google::protobuf::RepeatedField< double >*
ObstacleDebug::mutable_vertices_x_coords() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.ObstacleDebug.vertices_x_coords)
  return &vertices_x_coords_;
}

// repeated double vertices_y_coords = 5;
inline int ObstacleDebug::vertices_y_coords_size() const {
  return vertices_y_coords_.size();
}
inline void ObstacleDebug::clear_vertices_y_coords() {
  vertices_y_coords_.Clear();
}
inline double ObstacleDebug::vertices_y_coords(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
  return vertices_y_coords_.Get(index);
}
inline void ObstacleDebug::set_vertices_y_coords(int index, double value) {
  vertices_y_coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
}
inline void ObstacleDebug::add_vertices_y_coords(double value) {
  vertices_y_coords_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
}
inline const ::google::protobuf::RepeatedField< double >&
ObstacleDebug::vertices_y_coords() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
  return vertices_y_coords_;
}
inline ::google::protobuf::RepeatedField< double >*
ObstacleDebug::mutable_vertices_y_coords() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.ObstacleDebug.vertices_y_coords)
  return &vertices_y_coords_;
}

// -------------------------------------------------------------------

// ReferenceLineDebug

// optional string id = 1;
inline bool ReferenceLineDebug::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferenceLineDebug::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferenceLineDebug::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferenceLineDebug::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ReferenceLineDebug::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.id)
  return id_.GetNoArena();
}
inline void ReferenceLineDebug::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
#if LANG_CXX11
inline void ReferenceLineDebug::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
#endif
inline void ReferenceLineDebug::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
inline void ReferenceLineDebug::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.ReferenceLineDebug.id)
}
inline ::std::string* ReferenceLineDebug::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ReferenceLineDebug.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceLineDebug::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ReferenceLineDebug.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceLineDebug::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ReferenceLineDebug.id)
}

// optional double length = 2;
inline bool ReferenceLineDebug::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceLineDebug::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceLineDebug::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceLineDebug::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double ReferenceLineDebug::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.length)
  return length_;
}
inline void ReferenceLineDebug::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.length)
}

// optional double cost = 3;
inline bool ReferenceLineDebug::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferenceLineDebug::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferenceLineDebug::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferenceLineDebug::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline double ReferenceLineDebug::cost() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.cost)
  return cost_;
}
inline void ReferenceLineDebug::set_cost(double value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.cost)
}

// optional bool is_change_lane_path = 4;
inline bool ReferenceLineDebug::has_is_change_lane_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReferenceLineDebug::set_has_is_change_lane_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReferenceLineDebug::clear_has_is_change_lane_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReferenceLineDebug::clear_is_change_lane_path() {
  is_change_lane_path_ = false;
  clear_has_is_change_lane_path();
}
inline bool ReferenceLineDebug::is_change_lane_path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_change_lane_path)
  return is_change_lane_path_;
}
inline void ReferenceLineDebug::set_is_change_lane_path(bool value) {
  set_has_is_change_lane_path();
  is_change_lane_path_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_change_lane_path)
}

// optional bool is_drivable = 5;
inline bool ReferenceLineDebug::has_is_drivable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReferenceLineDebug::set_has_is_drivable() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReferenceLineDebug::clear_has_is_drivable() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReferenceLineDebug::clear_is_drivable() {
  is_drivable_ = false;
  clear_has_is_drivable();
}
inline bool ReferenceLineDebug::is_drivable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_drivable)
  return is_drivable_;
}
inline void ReferenceLineDebug::set_is_drivable(bool value) {
  set_has_is_drivable();
  is_drivable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_drivable)
}

// optional bool is_protected = 6;
inline bool ReferenceLineDebug::has_is_protected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReferenceLineDebug::set_has_is_protected() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReferenceLineDebug::clear_has_is_protected() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReferenceLineDebug::clear_is_protected() {
  is_protected_ = false;
  clear_has_is_protected();
}
inline bool ReferenceLineDebug::is_protected() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_protected)
  return is_protected_;
}
inline void ReferenceLineDebug::set_is_protected(bool value) {
  set_has_is_protected();
  is_protected_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_protected)
}

// optional bool is_offroad = 7;
inline bool ReferenceLineDebug::has_is_offroad() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReferenceLineDebug::set_has_is_offroad() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReferenceLineDebug::clear_has_is_offroad() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReferenceLineDebug::clear_is_offroad() {
  is_offroad_ = false;
  clear_has_is_offroad();
}
inline bool ReferenceLineDebug::is_offroad() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.is_offroad)
  return is_offroad_;
}
inline void ReferenceLineDebug::set_is_offroad(bool value) {
  set_has_is_offroad();
  is_offroad_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.is_offroad)
}

// optional double minimum_boundary = 8;
inline bool ReferenceLineDebug::has_minimum_boundary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferenceLineDebug::set_has_minimum_boundary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferenceLineDebug::clear_has_minimum_boundary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferenceLineDebug::clear_minimum_boundary() {
  minimum_boundary_ = 0;
  clear_has_minimum_boundary();
}
inline double ReferenceLineDebug::minimum_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.minimum_boundary)
  return minimum_boundary_;
}
inline void ReferenceLineDebug::set_minimum_boundary(double value) {
  set_has_minimum_boundary();
  minimum_boundary_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.minimum_boundary)
}

// optional double average_kappa = 9 [deprecated = true];
inline bool ReferenceLineDebug::has_average_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReferenceLineDebug::set_has_average_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReferenceLineDebug::clear_has_average_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReferenceLineDebug::clear_average_kappa() {
  average_kappa_ = 0;
  clear_has_average_kappa();
}
inline double ReferenceLineDebug::average_kappa() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.average_kappa)
  return average_kappa_;
}
inline void ReferenceLineDebug::set_average_kappa(double value) {
  set_has_average_kappa();
  average_kappa_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.average_kappa)
}

// optional double average_dkappa = 10 [deprecated = true];
inline bool ReferenceLineDebug::has_average_dkappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReferenceLineDebug::set_has_average_dkappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReferenceLineDebug::clear_has_average_dkappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReferenceLineDebug::clear_average_dkappa() {
  average_dkappa_ = 0;
  clear_has_average_dkappa();
}
inline double ReferenceLineDebug::average_dkappa() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.average_dkappa)
  return average_dkappa_;
}
inline void ReferenceLineDebug::set_average_dkappa(double value) {
  set_has_average_dkappa();
  average_dkappa_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.average_dkappa)
}

// optional double kappa_rms = 11;
inline bool ReferenceLineDebug::has_kappa_rms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReferenceLineDebug::set_has_kappa_rms() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReferenceLineDebug::clear_has_kappa_rms() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReferenceLineDebug::clear_kappa_rms() {
  kappa_rms_ = 0;
  clear_has_kappa_rms();
}
inline double ReferenceLineDebug::kappa_rms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.kappa_rms)
  return kappa_rms_;
}
inline void ReferenceLineDebug::set_kappa_rms(double value) {
  set_has_kappa_rms();
  kappa_rms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.kappa_rms)
}

// optional double dkappa_rms = 12;
inline bool ReferenceLineDebug::has_dkappa_rms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReferenceLineDebug::set_has_dkappa_rms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReferenceLineDebug::clear_has_dkappa_rms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReferenceLineDebug::clear_dkappa_rms() {
  dkappa_rms_ = 0;
  clear_has_dkappa_rms();
}
inline double ReferenceLineDebug::dkappa_rms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_rms)
  return dkappa_rms_;
}
inline void ReferenceLineDebug::set_dkappa_rms(double value) {
  set_has_dkappa_rms();
  dkappa_rms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_rms)
}

// optional double kappa_max_abs = 13;
inline bool ReferenceLineDebug::has_kappa_max_abs() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReferenceLineDebug::set_has_kappa_max_abs() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReferenceLineDebug::clear_has_kappa_max_abs() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReferenceLineDebug::clear_kappa_max_abs() {
  kappa_max_abs_ = 0;
  clear_has_kappa_max_abs();
}
inline double ReferenceLineDebug::kappa_max_abs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.kappa_max_abs)
  return kappa_max_abs_;
}
inline void ReferenceLineDebug::set_kappa_max_abs(double value) {
  set_has_kappa_max_abs();
  kappa_max_abs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.kappa_max_abs)
}

// optional double dkappa_max_abs = 14;
inline bool ReferenceLineDebug::has_dkappa_max_abs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReferenceLineDebug::set_has_dkappa_max_abs() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReferenceLineDebug::clear_has_dkappa_max_abs() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReferenceLineDebug::clear_dkappa_max_abs() {
  dkappa_max_abs_ = 0;
  clear_has_dkappa_max_abs();
}
inline double ReferenceLineDebug::dkappa_max_abs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_max_abs)
  return dkappa_max_abs_;
}
inline void ReferenceLineDebug::set_dkappa_max_abs(double value) {
  set_has_dkappa_max_abs();
  dkappa_max_abs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.dkappa_max_abs)
}

// optional double average_offset = 15;
inline bool ReferenceLineDebug::has_average_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReferenceLineDebug::set_has_average_offset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReferenceLineDebug::clear_has_average_offset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReferenceLineDebug::clear_average_offset() {
  average_offset_ = 0;
  clear_has_average_offset();
}
inline double ReferenceLineDebug::average_offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ReferenceLineDebug.average_offset)
  return average_offset_;
}
inline void ReferenceLineDebug::set_average_offset(double value) {
  set_has_average_offset();
  average_offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ReferenceLineDebug.average_offset)
}

// -------------------------------------------------------------------

// SampleLayerDebug

// repeated .jmc_auto.common.SLPoint sl_point = 1;
inline int SampleLayerDebug::sl_point_size() const {
  return sl_point_.size();
}
inline void SampleLayerDebug::clear_sl_point() {
  sl_point_.Clear();
}
inline const ::jmc_auto::common::SLPoint& SampleLayerDebug::sl_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Get(index);
}
inline ::jmc_auto::common::SLPoint* SampleLayerDebug::mutable_sl_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Mutable(index);
}
inline ::jmc_auto::common::SLPoint* SampleLayerDebug::add_sl_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
SampleLayerDebug::mutable_sl_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return &sl_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
SampleLayerDebug::sl_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.SampleLayerDebug.sl_point)
  return sl_point_;
}

// -------------------------------------------------------------------

// DpPolyGraphDebug

// repeated .jmc_auto.planning_internal.SampleLayerDebug sample_layer = 1;
inline int DpPolyGraphDebug::sample_layer_size() const {
  return sample_layer_.size();
}
inline void DpPolyGraphDebug::clear_sample_layer() {
  sample_layer_.Clear();
}
inline const ::jmc_auto::planning_internal::SampleLayerDebug& DpPolyGraphDebug::sample_layer(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Get(index);
}
inline ::jmc_auto::planning_internal::SampleLayerDebug* DpPolyGraphDebug::mutable_sample_layer(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Mutable(index);
}
inline ::jmc_auto::planning_internal::SampleLayerDebug* DpPolyGraphDebug::add_sample_layer() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug >*
DpPolyGraphDebug::mutable_sample_layer() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return &sample_layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SampleLayerDebug >&
DpPolyGraphDebug::sample_layer() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.DpPolyGraphDebug.sample_layer)
  return sample_layer_;
}

// repeated .jmc_auto.common.SLPoint min_cost_point = 2;
inline int DpPolyGraphDebug::min_cost_point_size() const {
  return min_cost_point_.size();
}
inline void DpPolyGraphDebug::clear_min_cost_point() {
  min_cost_point_.Clear();
}
inline const ::jmc_auto::common::SLPoint& DpPolyGraphDebug::min_cost_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Get(index);
}
inline ::jmc_auto::common::SLPoint* DpPolyGraphDebug::mutable_min_cost_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Mutable(index);
}
inline ::jmc_auto::common::SLPoint* DpPolyGraphDebug::add_min_cost_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >*
DpPolyGraphDebug::mutable_min_cost_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return &min_cost_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::SLPoint >&
DpPolyGraphDebug::min_cost_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.DpPolyGraphDebug.min_cost_point)
  return min_cost_point_;
}

// -------------------------------------------------------------------

// ScenarioDebug

// optional .jmc_auto.planning.ScenarioConfig.ScenarioType scenario_type = 1;
inline bool ScenarioDebug::has_scenario_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScenarioDebug::set_has_scenario_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScenarioDebug::clear_has_scenario_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScenarioDebug::clear_scenario_type() {
  scenario_type_ = 0;
  clear_has_scenario_type();
}
inline ::jmc_auto::planning::ScenarioConfig_ScenarioType ScenarioDebug::scenario_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ScenarioDebug.scenario_type)
  return static_cast< ::jmc_auto::planning::ScenarioConfig_ScenarioType >(scenario_type_);
}
inline void ScenarioDebug::set_scenario_type(::jmc_auto::planning::ScenarioConfig_ScenarioType value) {
  assert(::jmc_auto::planning::ScenarioConfig_ScenarioType_IsValid(value));
  set_has_scenario_type();
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ScenarioDebug.scenario_type)
}

// optional .jmc_auto.planning.ScenarioConfig.StageType stage_type = 2;
inline bool ScenarioDebug::has_stage_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScenarioDebug::set_has_stage_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScenarioDebug::clear_has_stage_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScenarioDebug::clear_stage_type() {
  stage_type_ = 0;
  clear_has_stage_type();
}
inline ::jmc_auto::planning::ScenarioConfig_StageType ScenarioDebug::stage_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ScenarioDebug.stage_type)
  return static_cast< ::jmc_auto::planning::ScenarioConfig_StageType >(stage_type_);
}
inline void ScenarioDebug::set_stage_type(::jmc_auto::planning::ScenarioConfig_StageType value) {
  assert(::jmc_auto::planning::ScenarioConfig_StageType_IsValid(value));
  set_has_stage_type();
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ScenarioDebug.stage_type)
}

// optional string msg = 3;
inline bool ScenarioDebug::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenarioDebug::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenarioDebug::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenarioDebug::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ScenarioDebug::msg() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.ScenarioDebug.msg)
  return msg_.GetNoArena();
}
inline void ScenarioDebug::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.ScenarioDebug.msg)
}
#if LANG_CXX11
inline void ScenarioDebug::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.ScenarioDebug.msg)
}
#endif
inline void ScenarioDebug::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.ScenarioDebug.msg)
}
inline void ScenarioDebug::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.ScenarioDebug.msg)
}
inline ::std::string* ScenarioDebug::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.ScenarioDebug.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenarioDebug::release_msg() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.ScenarioDebug.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioDebug::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.ScenarioDebug.msg)
}

// -------------------------------------------------------------------

// Trajectories

// repeated .jmc_auto.common.Trajectory trajectory = 1;
inline int Trajectories::trajectory_size() const {
  return trajectory_.size();
}
inline void Trajectories::clear_trajectory() {
  trajectory_.Clear();
}
inline const ::jmc_auto::common::Trajectory& Trajectories::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_.Get(index);
}
inline ::jmc_auto::common::Trajectory* Trajectories::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_.Mutable(index);
}
inline ::jmc_auto::common::Trajectory* Trajectories::add_trajectory() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory >*
Trajectories::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.Trajectories.trajectory)
  return &trajectory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Trajectory >&
Trajectories::trajectory() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.Trajectories.trajectory)
  return trajectory_;
}

// -------------------------------------------------------------------

// OpenSpaceDebug

// optional .jmc_auto.planning_internal.Trajectories trajectories = 1;
inline bool OpenSpaceDebug::has_trajectories() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceDebug::set_has_trajectories() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceDebug::clear_has_trajectories() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceDebug::clear_trajectories() {
  if (trajectories_ != NULL) trajectories_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_trajectories();
}
inline const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::trajectories() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
  return trajectories_ != NULL ? *trajectories_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_trajectories() {
  set_has_trajectories();
  if (trajectories_ == NULL) {
    trajectories_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
  return trajectories_;
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_trajectories() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
  clear_has_trajectories();
  ::jmc_auto::planning_internal::Trajectories* temp = trajectories_;
  trajectories_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_trajectories(::jmc_auto::planning_internal::Trajectories* trajectories) {
  delete trajectories_;
  trajectories_ = trajectories;
  if (trajectories) {
    set_has_trajectories();
  } else {
    clear_has_trajectories();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.trajectories)
}

// optional .jmc_auto.common.VehicleMotion warm_start_trajectory = 2;
inline bool OpenSpaceDebug::has_warm_start_trajectory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceDebug::set_has_warm_start_trajectory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceDebug::clear_has_warm_start_trajectory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceDebug::clear_warm_start_trajectory() {
  if (warm_start_trajectory_ != NULL) warm_start_trajectory_->::jmc_auto::common::VehicleMotion::Clear();
  clear_has_warm_start_trajectory();
}
inline const ::jmc_auto::common::VehicleMotion& OpenSpaceDebug::warm_start_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
  return warm_start_trajectory_ != NULL ? *warm_start_trajectory_
                         : *::jmc_auto::common::VehicleMotion::internal_default_instance();
}
inline ::jmc_auto::common::VehicleMotion* OpenSpaceDebug::mutable_warm_start_trajectory() {
  set_has_warm_start_trajectory();
  if (warm_start_trajectory_ == NULL) {
    warm_start_trajectory_ = new ::jmc_auto::common::VehicleMotion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
  return warm_start_trajectory_;
}
inline ::jmc_auto::common::VehicleMotion* OpenSpaceDebug::release_warm_start_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
  clear_has_warm_start_trajectory();
  ::jmc_auto::common::VehicleMotion* temp = warm_start_trajectory_;
  warm_start_trajectory_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_warm_start_trajectory(::jmc_auto::common::VehicleMotion* warm_start_trajectory) {
  delete warm_start_trajectory_;
  warm_start_trajectory_ = warm_start_trajectory;
  if (warm_start_trajectory) {
    set_has_warm_start_trajectory();
  } else {
    clear_has_warm_start_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_trajectory)
}

// optional .jmc_auto.common.VehicleMotion smoothed_trajectory = 3;
inline bool OpenSpaceDebug::has_smoothed_trajectory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceDebug::set_has_smoothed_trajectory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceDebug::clear_has_smoothed_trajectory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceDebug::clear_smoothed_trajectory() {
  if (smoothed_trajectory_ != NULL) smoothed_trajectory_->::jmc_auto::common::VehicleMotion::Clear();
  clear_has_smoothed_trajectory();
}
inline const ::jmc_auto::common::VehicleMotion& OpenSpaceDebug::smoothed_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
  return smoothed_trajectory_ != NULL ? *smoothed_trajectory_
                         : *::jmc_auto::common::VehicleMotion::internal_default_instance();
}
inline ::jmc_auto::common::VehicleMotion* OpenSpaceDebug::mutable_smoothed_trajectory() {
  set_has_smoothed_trajectory();
  if (smoothed_trajectory_ == NULL) {
    smoothed_trajectory_ = new ::jmc_auto::common::VehicleMotion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
  return smoothed_trajectory_;
}
inline ::jmc_auto::common::VehicleMotion* OpenSpaceDebug::release_smoothed_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
  clear_has_smoothed_trajectory();
  ::jmc_auto::common::VehicleMotion* temp = smoothed_trajectory_;
  smoothed_trajectory_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_smoothed_trajectory(::jmc_auto::common::VehicleMotion* smoothed_trajectory) {
  delete smoothed_trajectory_;
  smoothed_trajectory_ = smoothed_trajectory;
  if (smoothed_trajectory) {
    set_has_smoothed_trajectory();
  } else {
    clear_has_smoothed_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.smoothed_trajectory)
}

// repeated double warm_start_dual_lambda = 4;
inline int OpenSpaceDebug::warm_start_dual_lambda_size() const {
  return warm_start_dual_lambda_.size();
}
inline void OpenSpaceDebug::clear_warm_start_dual_lambda() {
  warm_start_dual_lambda_.Clear();
}
inline double OpenSpaceDebug::warm_start_dual_lambda(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
  return warm_start_dual_lambda_.Get(index);
}
inline void OpenSpaceDebug::set_warm_start_dual_lambda(int index, double value) {
  warm_start_dual_lambda_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
}
inline void OpenSpaceDebug::add_warm_start_dual_lambda(double value) {
  warm_start_dual_lambda_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
}
inline const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::warm_start_dual_lambda() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
  return warm_start_dual_lambda_;
}
inline ::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_warm_start_dual_lambda() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_lambda)
  return &warm_start_dual_lambda_;
}

// repeated double warm_start_dual_miu = 5;
inline int OpenSpaceDebug::warm_start_dual_miu_size() const {
  return warm_start_dual_miu_.size();
}
inline void OpenSpaceDebug::clear_warm_start_dual_miu() {
  warm_start_dual_miu_.Clear();
}
inline double OpenSpaceDebug::warm_start_dual_miu(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
  return warm_start_dual_miu_.Get(index);
}
inline void OpenSpaceDebug::set_warm_start_dual_miu(int index, double value) {
  warm_start_dual_miu_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
}
inline void OpenSpaceDebug::add_warm_start_dual_miu(double value) {
  warm_start_dual_miu_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
}
inline const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::warm_start_dual_miu() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
  return warm_start_dual_miu_;
}
inline ::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_warm_start_dual_miu() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.warm_start_dual_miu)
  return &warm_start_dual_miu_;
}

// repeated double optimized_dual_lambda = 6;
inline int OpenSpaceDebug::optimized_dual_lambda_size() const {
  return optimized_dual_lambda_.size();
}
inline void OpenSpaceDebug::clear_optimized_dual_lambda() {
  optimized_dual_lambda_.Clear();
}
inline double OpenSpaceDebug::optimized_dual_lambda(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
  return optimized_dual_lambda_.Get(index);
}
inline void OpenSpaceDebug::set_optimized_dual_lambda(int index, double value) {
  optimized_dual_lambda_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
}
inline void OpenSpaceDebug::add_optimized_dual_lambda(double value) {
  optimized_dual_lambda_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
}
inline const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::optimized_dual_lambda() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
  return optimized_dual_lambda_;
}
inline ::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_optimized_dual_lambda() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_lambda)
  return &optimized_dual_lambda_;
}

// repeated double optimized_dual_miu = 7;
inline int OpenSpaceDebug::optimized_dual_miu_size() const {
  return optimized_dual_miu_.size();
}
inline void OpenSpaceDebug::clear_optimized_dual_miu() {
  optimized_dual_miu_.Clear();
}
inline double OpenSpaceDebug::optimized_dual_miu(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
  return optimized_dual_miu_.Get(index);
}
inline void OpenSpaceDebug::set_optimized_dual_miu(int index, double value) {
  optimized_dual_miu_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
}
inline void OpenSpaceDebug::add_optimized_dual_miu(double value) {
  optimized_dual_miu_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
}
inline const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::optimized_dual_miu() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
  return optimized_dual_miu_;
}
inline ::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_optimized_dual_miu() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.optimized_dual_miu)
  return &optimized_dual_miu_;
}

// repeated double xy_boundary = 8;
inline int OpenSpaceDebug::xy_boundary_size() const {
  return xy_boundary_.size();
}
inline void OpenSpaceDebug::clear_xy_boundary() {
  xy_boundary_.Clear();
}
inline double OpenSpaceDebug::xy_boundary(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
  return xy_boundary_.Get(index);
}
inline void OpenSpaceDebug::set_xy_boundary(int index, double value) {
  xy_boundary_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
}
inline void OpenSpaceDebug::add_xy_boundary(double value) {
  xy_boundary_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
}
inline const ::google::protobuf::RepeatedField< double >&
OpenSpaceDebug::xy_boundary() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
  return xy_boundary_;
}
inline ::google::protobuf::RepeatedField< double >*
OpenSpaceDebug::mutable_xy_boundary() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.xy_boundary)
  return &xy_boundary_;
}

// repeated .jmc_auto.planning_internal.ObstacleDebug obstacles = 9;
inline int OpenSpaceDebug::obstacles_size() const {
  return obstacles_.size();
}
inline void OpenSpaceDebug::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::jmc_auto::planning_internal::ObstacleDebug& OpenSpaceDebug::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_.Get(index);
}
inline ::jmc_auto::planning_internal::ObstacleDebug* OpenSpaceDebug::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_.Mutable(index);
}
inline ::jmc_auto::planning_internal::ObstacleDebug* OpenSpaceDebug::add_obstacles() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >*
OpenSpaceDebug::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return &obstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >&
OpenSpaceDebug::obstacles() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.OpenSpaceDebug.obstacles)
  return obstacles_;
}

// optional .jmc_auto.common.TrajectoryPoint roi_shift_point = 10;
inline bool OpenSpaceDebug::has_roi_shift_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceDebug::set_has_roi_shift_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceDebug::clear_has_roi_shift_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceDebug::clear_roi_shift_point() {
  if (roi_shift_point_ != NULL) roi_shift_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_roi_shift_point();
}
inline const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::roi_shift_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
  return roi_shift_point_ != NULL ? *roi_shift_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_roi_shift_point() {
  set_has_roi_shift_point();
  if (roi_shift_point_ == NULL) {
    roi_shift_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
  return roi_shift_point_;
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_roi_shift_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
  clear_has_roi_shift_point();
  ::jmc_auto::common::TrajectoryPoint* temp = roi_shift_point_;
  roi_shift_point_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_roi_shift_point(::jmc_auto::common::TrajectoryPoint* roi_shift_point) {
  delete roi_shift_point_;
  roi_shift_point_ = roi_shift_point;
  if (roi_shift_point) {
    set_has_roi_shift_point();
  } else {
    clear_has_roi_shift_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.roi_shift_point)
}

// optional .jmc_auto.common.TrajectoryPoint end_point = 11;
inline bool OpenSpaceDebug::has_end_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceDebug::set_has_end_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceDebug::clear_has_end_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceDebug::clear_end_point() {
  if (end_point_ != NULL) end_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_end_point();
}
inline const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::end_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
  return end_point_ != NULL ? *end_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_end_point() {
  set_has_end_point();
  if (end_point_ == NULL) {
    end_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
  return end_point_;
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_end_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
  clear_has_end_point();
  ::jmc_auto::common::TrajectoryPoint* temp = end_point_;
  end_point_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_end_point(::jmc_auto::common::TrajectoryPoint* end_point) {
  delete end_point_;
  end_point_ = end_point;
  if (end_point) {
    set_has_end_point();
  } else {
    clear_has_end_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.end_point)
}

// optional .jmc_auto.planning_internal.Trajectories partitioned_trajectories = 12;
inline bool OpenSpaceDebug::has_partitioned_trajectories() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceDebug::set_has_partitioned_trajectories() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceDebug::clear_has_partitioned_trajectories() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceDebug::clear_partitioned_trajectories() {
  if (partitioned_trajectories_ != NULL) partitioned_trajectories_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_partitioned_trajectories();
}
inline const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::partitioned_trajectories() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
  return partitioned_trajectories_ != NULL ? *partitioned_trajectories_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_partitioned_trajectories() {
  set_has_partitioned_trajectories();
  if (partitioned_trajectories_ == NULL) {
    partitioned_trajectories_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
  return partitioned_trajectories_;
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_partitioned_trajectories() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
  clear_has_partitioned_trajectories();
  ::jmc_auto::planning_internal::Trajectories* temp = partitioned_trajectories_;
  partitioned_trajectories_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_partitioned_trajectories(::jmc_auto::planning_internal::Trajectories* partitioned_trajectories) {
  delete partitioned_trajectories_;
  partitioned_trajectories_ = partitioned_trajectories;
  if (partitioned_trajectories) {
    set_has_partitioned_trajectories();
  } else {
    clear_has_partitioned_trajectories();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.partitioned_trajectories)
}

// optional .jmc_auto.planning_internal.Trajectories chosen_trajectory = 13;
inline bool OpenSpaceDebug::has_chosen_trajectory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpenSpaceDebug::set_has_chosen_trajectory() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpenSpaceDebug::clear_has_chosen_trajectory() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpenSpaceDebug::clear_chosen_trajectory() {
  if (chosen_trajectory_ != NULL) chosen_trajectory_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_chosen_trajectory();
}
inline const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::chosen_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
  return chosen_trajectory_ != NULL ? *chosen_trajectory_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_chosen_trajectory() {
  set_has_chosen_trajectory();
  if (chosen_trajectory_ == NULL) {
    chosen_trajectory_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
  return chosen_trajectory_;
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_chosen_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
  clear_has_chosen_trajectory();
  ::jmc_auto::planning_internal::Trajectories* temp = chosen_trajectory_;
  chosen_trajectory_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_chosen_trajectory(::jmc_auto::planning_internal::Trajectories* chosen_trajectory) {
  delete chosen_trajectory_;
  chosen_trajectory_ = chosen_trajectory;
  if (chosen_trajectory) {
    set_has_chosen_trajectory();
  } else {
    clear_has_chosen_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.chosen_trajectory)
}

// optional bool is_fallback_trajectory = 14;
inline bool OpenSpaceDebug::has_is_fallback_trajectory() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OpenSpaceDebug::set_has_is_fallback_trajectory() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OpenSpaceDebug::clear_has_is_fallback_trajectory() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OpenSpaceDebug::clear_is_fallback_trajectory() {
  is_fallback_trajectory_ = false;
  clear_has_is_fallback_trajectory();
}
inline bool OpenSpaceDebug::is_fallback_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.is_fallback_trajectory)
  return is_fallback_trajectory_;
}
inline void OpenSpaceDebug::set_is_fallback_trajectory(bool value) {
  set_has_is_fallback_trajectory();
  is_fallback_trajectory_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.is_fallback_trajectory)
}

// optional .jmc_auto.planning_internal.Trajectories fallback_trajectory = 15;
inline bool OpenSpaceDebug::has_fallback_trajectory() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpenSpaceDebug::set_has_fallback_trajectory() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpenSpaceDebug::clear_has_fallback_trajectory() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpenSpaceDebug::clear_fallback_trajectory() {
  if (fallback_trajectory_ != NULL) fallback_trajectory_->::jmc_auto::planning_internal::Trajectories::Clear();
  clear_has_fallback_trajectory();
}
inline const ::jmc_auto::planning_internal::Trajectories& OpenSpaceDebug::fallback_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
  return fallback_trajectory_ != NULL ? *fallback_trajectory_
                         : *::jmc_auto::planning_internal::Trajectories::internal_default_instance();
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::mutable_fallback_trajectory() {
  set_has_fallback_trajectory();
  if (fallback_trajectory_ == NULL) {
    fallback_trajectory_ = new ::jmc_auto::planning_internal::Trajectories;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
  return fallback_trajectory_;
}
inline ::jmc_auto::planning_internal::Trajectories* OpenSpaceDebug::release_fallback_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
  clear_has_fallback_trajectory();
  ::jmc_auto::planning_internal::Trajectories* temp = fallback_trajectory_;
  fallback_trajectory_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_fallback_trajectory(::jmc_auto::planning_internal::Trajectories* fallback_trajectory) {
  delete fallback_trajectory_;
  fallback_trajectory_ = fallback_trajectory;
  if (fallback_trajectory) {
    set_has_fallback_trajectory();
  } else {
    clear_has_fallback_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.fallback_trajectory)
}

// optional .jmc_auto.common.TrajectoryPoint trajectory_stitching_point = 16;
inline bool OpenSpaceDebug::has_trajectory_stitching_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpenSpaceDebug::set_has_trajectory_stitching_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpenSpaceDebug::clear_has_trajectory_stitching_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpenSpaceDebug::clear_trajectory_stitching_point() {
  if (trajectory_stitching_point_ != NULL) trajectory_stitching_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_trajectory_stitching_point();
}
inline const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::trajectory_stitching_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
  return trajectory_stitching_point_ != NULL ? *trajectory_stitching_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_trajectory_stitching_point() {
  set_has_trajectory_stitching_point();
  if (trajectory_stitching_point_ == NULL) {
    trajectory_stitching_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
  return trajectory_stitching_point_;
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_trajectory_stitching_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
  clear_has_trajectory_stitching_point();
  ::jmc_auto::common::TrajectoryPoint* temp = trajectory_stitching_point_;
  trajectory_stitching_point_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_trajectory_stitching_point(::jmc_auto::common::TrajectoryPoint* trajectory_stitching_point) {
  delete trajectory_stitching_point_;
  trajectory_stitching_point_ = trajectory_stitching_point;
  if (trajectory_stitching_point) {
    set_has_trajectory_stitching_point();
  } else {
    clear_has_trajectory_stitching_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.trajectory_stitching_point)
}

// optional .jmc_auto.common.TrajectoryPoint future_collision_point = 17;
inline bool OpenSpaceDebug::has_future_collision_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpenSpaceDebug::set_has_future_collision_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpenSpaceDebug::clear_has_future_collision_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpenSpaceDebug::clear_future_collision_point() {
  if (future_collision_point_ != NULL) future_collision_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_future_collision_point();
}
inline const ::jmc_auto::common::TrajectoryPoint& OpenSpaceDebug::future_collision_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
  return future_collision_point_ != NULL ? *future_collision_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::mutable_future_collision_point() {
  set_has_future_collision_point();
  if (future_collision_point_ == NULL) {
    future_collision_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
  return future_collision_point_;
}
inline ::jmc_auto::common::TrajectoryPoint* OpenSpaceDebug::release_future_collision_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
  clear_has_future_collision_point();
  ::jmc_auto::common::TrajectoryPoint* temp = future_collision_point_;
  future_collision_point_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_future_collision_point(::jmc_auto::common::TrajectoryPoint* future_collision_point) {
  delete future_collision_point_;
  future_collision_point_ = future_collision_point;
  if (future_collision_point) {
    set_has_future_collision_point();
  } else {
    clear_has_future_collision_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.future_collision_point)
}

// optional double time_latency = 18 [default = 0];
inline bool OpenSpaceDebug::has_time_latency() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpenSpaceDebug::set_has_time_latency() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpenSpaceDebug::clear_has_time_latency() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpenSpaceDebug::clear_time_latency() {
  time_latency_ = 0;
  clear_has_time_latency();
}
inline double OpenSpaceDebug::time_latency() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.time_latency)
  return time_latency_;
}
inline void OpenSpaceDebug::set_time_latency(double value) {
  set_has_time_latency();
  time_latency_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.time_latency)
}

// optional .jmc_auto.common.PointENU origin_point = 19;
inline bool OpenSpaceDebug::has_origin_point() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpenSpaceDebug::set_has_origin_point() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpenSpaceDebug::clear_has_origin_point() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpenSpaceDebug::clear_origin_point() {
  if (origin_point_ != NULL) origin_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_origin_point();
}
inline const ::jmc_auto::common::PointENU& OpenSpaceDebug::origin_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
  return origin_point_ != NULL ? *origin_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
inline ::jmc_auto::common::PointENU* OpenSpaceDebug::mutable_origin_point() {
  set_has_origin_point();
  if (origin_point_ == NULL) {
    origin_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
  return origin_point_;
}
inline ::jmc_auto::common::PointENU* OpenSpaceDebug::release_origin_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
  clear_has_origin_point();
  ::jmc_auto::common::PointENU* temp = origin_point_;
  origin_point_ = NULL;
  return temp;
}
inline void OpenSpaceDebug::set_allocated_origin_point(::jmc_auto::common::PointENU* origin_point) {
  delete origin_point_;
  origin_point_ = origin_point;
  if (origin_point) {
    set_has_origin_point();
  } else {
    clear_has_origin_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.OpenSpaceDebug.origin_point)
}

// optional double origin_heading_rad = 20;
inline bool OpenSpaceDebug::has_origin_heading_rad() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpenSpaceDebug::set_has_origin_heading_rad() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpenSpaceDebug::clear_has_origin_heading_rad() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpenSpaceDebug::clear_origin_heading_rad() {
  origin_heading_rad_ = 0;
  clear_has_origin_heading_rad();
}
inline double OpenSpaceDebug::origin_heading_rad() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.OpenSpaceDebug.origin_heading_rad)
  return origin_heading_rad_;
}
inline void OpenSpaceDebug::set_origin_heading_rad(double value) {
  set_has_origin_heading_rad();
  origin_heading_rad_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.OpenSpaceDebug.origin_heading_rad)
}

// -------------------------------------------------------------------

// SmootherDebug

// optional bool is_smoothed = 1;
inline bool SmootherDebug::has_is_smoothed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmootherDebug::set_has_is_smoothed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmootherDebug::clear_has_is_smoothed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmootherDebug::clear_is_smoothed() {
  is_smoothed_ = false;
  clear_has_is_smoothed();
}
inline bool SmootherDebug::is_smoothed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SmootherDebug.is_smoothed)
  return is_smoothed_;
}
inline void SmootherDebug::set_is_smoothed(bool value) {
  set_has_is_smoothed();
  is_smoothed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SmootherDebug.is_smoothed)
}

// optional .jmc_auto.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
inline bool SmootherDebug::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmootherDebug::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmootherDebug::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmootherDebug::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::jmc_auto::planning_internal::SmootherDebug_SmootherType SmootherDebug::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SmootherDebug.type)
  return static_cast< ::jmc_auto::planning_internal::SmootherDebug_SmootherType >(type_);
}
inline void SmootherDebug::set_type(::jmc_auto::planning_internal::SmootherDebug_SmootherType value) {
  assert(::jmc_auto::planning_internal::SmootherDebug_SmootherType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SmootherDebug.type)
}

// optional string reason = 3;
inline bool SmootherDebug::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmootherDebug::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmootherDebug::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmootherDebug::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& SmootherDebug::reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.SmootherDebug.reason)
  return reason_.GetNoArena();
}
inline void SmootherDebug::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.SmootherDebug.reason)
}
#if LANG_CXX11
inline void SmootherDebug::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.SmootherDebug.reason)
}
#endif
inline void SmootherDebug::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.SmootherDebug.reason)
}
inline void SmootherDebug::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.SmootherDebug.reason)
}
inline ::std::string* SmootherDebug::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.SmootherDebug.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SmootherDebug::release_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.SmootherDebug.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmootherDebug::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.SmootherDebug.reason)
}

// -------------------------------------------------------------------

// PullOverDebug

// optional .jmc_auto.common.PointENU position = 1;
inline bool PullOverDebug::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullOverDebug::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullOverDebug::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullOverDebug::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::PointENU::Clear();
  clear_has_position();
}
inline const ::jmc_auto::common::PointENU& PullOverDebug::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
inline ::jmc_auto::common::PointENU* PullOverDebug::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PullOverDebug.position)
  return position_;
}
inline ::jmc_auto::common::PointENU* PullOverDebug::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PullOverDebug.position)
  clear_has_position();
  ::jmc_auto::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PullOverDebug::set_allocated_position(::jmc_auto::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PullOverDebug.position)
}

// optional double theta = 2;
inline bool PullOverDebug::has_theta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PullOverDebug::set_has_theta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PullOverDebug::clear_has_theta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PullOverDebug::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double PullOverDebug::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.theta)
  return theta_;
}
inline void PullOverDebug::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.theta)
}

// optional double length_front = 3;
inline bool PullOverDebug::has_length_front() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PullOverDebug::set_has_length_front() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PullOverDebug::clear_has_length_front() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PullOverDebug::clear_length_front() {
  length_front_ = 0;
  clear_has_length_front();
}
inline double PullOverDebug::length_front() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.length_front)
  return length_front_;
}
inline void PullOverDebug::set_length_front(double value) {
  set_has_length_front();
  length_front_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.length_front)
}

// optional double length_back = 4;
inline bool PullOverDebug::has_length_back() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PullOverDebug::set_has_length_back() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PullOverDebug::clear_has_length_back() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PullOverDebug::clear_length_back() {
  length_back_ = 0;
  clear_has_length_back();
}
inline double PullOverDebug::length_back() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.length_back)
  return length_back_;
}
inline void PullOverDebug::set_length_back(double value) {
  set_has_length_back();
  length_back_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.length_back)
}

// optional double width_left = 5;
inline bool PullOverDebug::has_width_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PullOverDebug::set_has_width_left() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PullOverDebug::clear_has_width_left() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PullOverDebug::clear_width_left() {
  width_left_ = 0;
  clear_has_width_left();
}
inline double PullOverDebug::width_left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.width_left)
  return width_left_;
}
inline void PullOverDebug::set_width_left(double value) {
  set_has_width_left();
  width_left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.width_left)
}

// optional double width_right = 6;
inline bool PullOverDebug::has_width_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PullOverDebug::set_has_width_right() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PullOverDebug::clear_has_width_right() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PullOverDebug::clear_width_right() {
  width_right_ = 0;
  clear_has_width_right();
}
inline double PullOverDebug::width_right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PullOverDebug.width_right)
  return width_right_;
}
inline void PullOverDebug::set_width_right(double value) {
  set_has_width_right();
  width_right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PullOverDebug.width_right)
}

// -------------------------------------------------------------------

// PlanningData

// optional .jmc_auto.localization.LocalizationEstimate adc_position = 7;
inline bool PlanningData::has_adc_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningData::set_has_adc_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningData::clear_has_adc_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningData::clear_adc_position() {
  if (adc_position_ != NULL) adc_position_->::jmc_auto::localization::LocalizationEstimate::Clear();
  clear_has_adc_position();
}
inline const ::jmc_auto::localization::LocalizationEstimate& PlanningData::adc_position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.adc_position)
  return adc_position_ != NULL ? *adc_position_
                         : *::jmc_auto::localization::LocalizationEstimate::internal_default_instance();
}
inline ::jmc_auto::localization::LocalizationEstimate* PlanningData::mutable_adc_position() {
  set_has_adc_position();
  if (adc_position_ == NULL) {
    adc_position_ = new ::jmc_auto::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.adc_position)
  return adc_position_;
}
inline ::jmc_auto::localization::LocalizationEstimate* PlanningData::release_adc_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.adc_position)
  clear_has_adc_position();
  ::jmc_auto::localization::LocalizationEstimate* temp = adc_position_;
  adc_position_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_adc_position(::jmc_auto::localization::LocalizationEstimate* adc_position) {
  delete adc_position_;
  adc_position_ = adc_position;
  if (adc_position) {
    set_has_adc_position();
  } else {
    clear_has_adc_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.adc_position)
}

// optional .jmc_auto.canbus.Chassis chassis = 8;
inline bool PlanningData::has_chassis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningData::set_has_chassis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningData::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningData::clear_chassis() {
  if (chassis_ != NULL) chassis_->::jmc_auto::canbus::Chassis::Clear();
  clear_has_chassis();
}
inline const ::jmc_auto::canbus::Chassis& PlanningData::chassis() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.chassis)
  return chassis_ != NULL ? *chassis_
                         : *::jmc_auto::canbus::Chassis::internal_default_instance();
}
inline ::jmc_auto::canbus::Chassis* PlanningData::mutable_chassis() {
  set_has_chassis();
  if (chassis_ == NULL) {
    chassis_ = new ::jmc_auto::canbus::Chassis;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.chassis)
  return chassis_;
}
inline ::jmc_auto::canbus::Chassis* PlanningData::release_chassis() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.chassis)
  clear_has_chassis();
  ::jmc_auto::canbus::Chassis* temp = chassis_;
  chassis_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_chassis(::jmc_auto::canbus::Chassis* chassis) {
  delete chassis_;
  chassis_ = chassis;
  if (chassis) {
    set_has_chassis();
  } else {
    clear_has_chassis();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.chassis)
}

// optional .jmc_auto.routing.RoutingResponse routing = 9;
inline bool PlanningData::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningData::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanningData::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanningData::clear_routing() {
  if (routing_ != NULL) routing_->::jmc_auto::routing::RoutingResponse::Clear();
  clear_has_routing();
}
inline const ::jmc_auto::routing::RoutingResponse& PlanningData::routing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.routing)
  return routing_ != NULL ? *routing_
                         : *::jmc_auto::routing::RoutingResponse::internal_default_instance();
}
inline ::jmc_auto::routing::RoutingResponse* PlanningData::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::jmc_auto::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.routing)
  return routing_;
}
inline ::jmc_auto::routing::RoutingResponse* PlanningData::release_routing() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.routing)
  clear_has_routing();
  ::jmc_auto::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_routing(::jmc_auto::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.routing)
}

// optional .jmc_auto.common.TrajectoryPoint init_point = 10;
inline bool PlanningData::has_init_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningData::set_has_init_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanningData::clear_has_init_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanningData::clear_init_point() {
  if (init_point_ != NULL) init_point_->::jmc_auto::common::TrajectoryPoint::Clear();
  clear_has_init_point();
}
inline const ::jmc_auto::common::TrajectoryPoint& PlanningData::init_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.init_point)
  return init_point_ != NULL ? *init_point_
                         : *::jmc_auto::common::TrajectoryPoint::internal_default_instance();
}
inline ::jmc_auto::common::TrajectoryPoint* PlanningData::mutable_init_point() {
  set_has_init_point();
  if (init_point_ == NULL) {
    init_point_ = new ::jmc_auto::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.init_point)
  return init_point_;
}
inline ::jmc_auto::common::TrajectoryPoint* PlanningData::release_init_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.init_point)
  clear_has_init_point();
  ::jmc_auto::common::TrajectoryPoint* temp = init_point_;
  init_point_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_init_point(::jmc_auto::common::TrajectoryPoint* init_point) {
  delete init_point_;
  init_point_ = init_point;
  if (init_point) {
    set_has_init_point();
  } else {
    clear_has_init_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.init_point)
}

// repeated .jmc_auto.common.Path path = 6;
inline int PlanningData::path_size() const {
  return path_.size();
}
inline void PlanningData::clear_path() {
  path_.Clear();
}
inline const ::jmc_auto::common::Path& PlanningData::path(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.path)
  return path_.Get(index);
}
inline ::jmc_auto::common::Path* PlanningData::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.path)
  return path_.Mutable(index);
}
inline ::jmc_auto::common::Path* PlanningData::add_path() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.path)
  return path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >*
PlanningData::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.path)
  return &path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >&
PlanningData::path() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.path)
  return path_;
}

// repeated .jmc_auto.planning_internal.SpeedPlan speed_plan = 13;
inline int PlanningData::speed_plan_size() const {
  return speed_plan_.size();
}
inline void PlanningData::clear_speed_plan() {
  speed_plan_.Clear();
}
inline const ::jmc_auto::planning_internal::SpeedPlan& PlanningData::speed_plan(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Get(index);
}
inline ::jmc_auto::planning_internal::SpeedPlan* PlanningData::mutable_speed_plan(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Mutable(index);
}
inline ::jmc_auto::planning_internal::SpeedPlan* PlanningData::add_speed_plan() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan >*
PlanningData::mutable_speed_plan() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.speed_plan)
  return &speed_plan_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SpeedPlan >&
PlanningData::speed_plan() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.speed_plan)
  return speed_plan_;
}

// repeated .jmc_auto.planning_internal.STGraphDebug st_graph = 14;
inline int PlanningData::st_graph_size() const {
  return st_graph_.size();
}
inline void PlanningData::clear_st_graph() {
  st_graph_.Clear();
}
inline const ::jmc_auto::planning_internal::STGraphDebug& PlanningData::st_graph(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_.Get(index);
}
inline ::jmc_auto::planning_internal::STGraphDebug* PlanningData::mutable_st_graph(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_.Mutable(index);
}
inline ::jmc_auto::planning_internal::STGraphDebug* PlanningData::add_st_graph() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug >*
PlanningData::mutable_st_graph() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.st_graph)
  return &st_graph_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::STGraphDebug >&
PlanningData::st_graph() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.st_graph)
  return st_graph_;
}

// repeated .jmc_auto.planning_internal.SLFrameDebug sl_frame = 15;
inline int PlanningData::sl_frame_size() const {
  return sl_frame_.size();
}
inline void PlanningData::clear_sl_frame() {
  sl_frame_.Clear();
}
inline const ::jmc_auto::planning_internal::SLFrameDebug& PlanningData::sl_frame(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Get(index);
}
inline ::jmc_auto::planning_internal::SLFrameDebug* PlanningData::mutable_sl_frame(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Mutable(index);
}
inline ::jmc_auto::planning_internal::SLFrameDebug* PlanningData::add_sl_frame() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug >*
PlanningData::mutable_sl_frame() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.sl_frame)
  return &sl_frame_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::SLFrameDebug >&
PlanningData::sl_frame() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.sl_frame)
  return sl_frame_;
}

// optional .jmc_auto.common.Header prediction_header = 16;
inline bool PlanningData::has_prediction_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningData::set_has_prediction_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanningData::clear_has_prediction_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanningData::clear_prediction_header() {
  if (prediction_header_ != NULL) prediction_header_->::jmc_auto::common::Header::Clear();
  clear_has_prediction_header();
}
inline const ::jmc_auto::common::Header& PlanningData::prediction_header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.prediction_header)
  return prediction_header_ != NULL ? *prediction_header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
inline ::jmc_auto::common::Header* PlanningData::mutable_prediction_header() {
  set_has_prediction_header();
  if (prediction_header_ == NULL) {
    prediction_header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.prediction_header)
  return prediction_header_;
}
inline ::jmc_auto::common::Header* PlanningData::release_prediction_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.prediction_header)
  clear_has_prediction_header();
  ::jmc_auto::common::Header* temp = prediction_header_;
  prediction_header_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_prediction_header(::jmc_auto::common::Header* prediction_header) {
  delete prediction_header_;
  prediction_header_ = prediction_header;
  if (prediction_header) {
    set_has_prediction_header();
  } else {
    clear_has_prediction_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.prediction_header)
}

// optional .jmc_auto.planning_internal.SignalLightDebug signal_light = 17;
inline bool PlanningData::has_signal_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningData::set_has_signal_light() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanningData::clear_has_signal_light() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanningData::clear_signal_light() {
  if (signal_light_ != NULL) signal_light_->::jmc_auto::planning_internal::SignalLightDebug::Clear();
  clear_has_signal_light();
}
inline const ::jmc_auto::planning_internal::SignalLightDebug& PlanningData::signal_light() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.signal_light)
  return signal_light_ != NULL ? *signal_light_
                         : *::jmc_auto::planning_internal::SignalLightDebug::internal_default_instance();
}
inline ::jmc_auto::planning_internal::SignalLightDebug* PlanningData::mutable_signal_light() {
  set_has_signal_light();
  if (signal_light_ == NULL) {
    signal_light_ = new ::jmc_auto::planning_internal::SignalLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.signal_light)
  return signal_light_;
}
inline ::jmc_auto::planning_internal::SignalLightDebug* PlanningData::release_signal_light() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.signal_light)
  clear_has_signal_light();
  ::jmc_auto::planning_internal::SignalLightDebug* temp = signal_light_;
  signal_light_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_signal_light(::jmc_auto::planning_internal::SignalLightDebug* signal_light) {
  delete signal_light_;
  signal_light_ = signal_light;
  if (signal_light) {
    set_has_signal_light();
  } else {
    clear_has_signal_light();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.signal_light)
}

// repeated .jmc_auto.planning_internal.ObstacleDebug obstacle = 18;
inline int PlanningData::obstacle_size() const {
  return obstacle_.size();
}
inline void PlanningData::clear_obstacle() {
  obstacle_.Clear();
}
inline const ::jmc_auto::planning_internal::ObstacleDebug& PlanningData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_.Get(index);
}
inline ::jmc_auto::planning_internal::ObstacleDebug* PlanningData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_.Mutable(index);
}
inline ::jmc_auto::planning_internal::ObstacleDebug* PlanningData::add_obstacle() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >*
PlanningData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.obstacle)
  return &obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ObstacleDebug >&
PlanningData::obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.obstacle)
  return obstacle_;
}

// repeated .jmc_auto.planning_internal.ReferenceLineDebug reference_line = 19;
inline int PlanningData::reference_line_size() const {
  return reference_line_.size();
}
inline void PlanningData::clear_reference_line() {
  reference_line_.Clear();
}
inline const ::jmc_auto::planning_internal::ReferenceLineDebug& PlanningData::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_.Get(index);
}
inline ::jmc_auto::planning_internal::ReferenceLineDebug* PlanningData::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_.Mutable(index);
}
inline ::jmc_auto::planning_internal::ReferenceLineDebug* PlanningData::add_reference_line() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug >*
PlanningData::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.reference_line)
  return &reference_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::ReferenceLineDebug >&
PlanningData::reference_line() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.reference_line)
  return reference_line_;
}

// optional .jmc_auto.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
inline bool PlanningData::has_dp_poly_graph() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanningData::set_has_dp_poly_graph() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanningData::clear_has_dp_poly_graph() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanningData::clear_dp_poly_graph() {
  if (dp_poly_graph_ != NULL) dp_poly_graph_->::jmc_auto::planning_internal::DpPolyGraphDebug::Clear();
  clear_has_dp_poly_graph();
}
inline const ::jmc_auto::planning_internal::DpPolyGraphDebug& PlanningData::dp_poly_graph() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_ != NULL ? *dp_poly_graph_
                         : *::jmc_auto::planning_internal::DpPolyGraphDebug::internal_default_instance();
}
inline ::jmc_auto::planning_internal::DpPolyGraphDebug* PlanningData::mutable_dp_poly_graph() {
  set_has_dp_poly_graph();
  if (dp_poly_graph_ == NULL) {
    dp_poly_graph_ = new ::jmc_auto::planning_internal::DpPolyGraphDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
  return dp_poly_graph_;
}
inline ::jmc_auto::planning_internal::DpPolyGraphDebug* PlanningData::release_dp_poly_graph() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
  clear_has_dp_poly_graph();
  ::jmc_auto::planning_internal::DpPolyGraphDebug* temp = dp_poly_graph_;
  dp_poly_graph_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_dp_poly_graph(::jmc_auto::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  delete dp_poly_graph_;
  dp_poly_graph_ = dp_poly_graph;
  if (dp_poly_graph) {
    set_has_dp_poly_graph();
  } else {
    clear_has_dp_poly_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.dp_poly_graph)
}

// optional .jmc_auto.planning_internal.LatticeStTraining lattice_st_image = 21;
inline bool PlanningData::has_lattice_st_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanningData::set_has_lattice_st_image() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanningData::clear_has_lattice_st_image() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanningData::clear_lattice_st_image() {
  if (lattice_st_image_ != NULL) lattice_st_image_->::jmc_auto::planning_internal::LatticeStTraining::Clear();
  clear_has_lattice_st_image();
}
inline const ::jmc_auto::planning_internal::LatticeStTraining& PlanningData::lattice_st_image() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.lattice_st_image)
  return lattice_st_image_ != NULL ? *lattice_st_image_
                         : *::jmc_auto::planning_internal::LatticeStTraining::internal_default_instance();
}
inline ::jmc_auto::planning_internal::LatticeStTraining* PlanningData::mutable_lattice_st_image() {
  set_has_lattice_st_image();
  if (lattice_st_image_ == NULL) {
    lattice_st_image_ = new ::jmc_auto::planning_internal::LatticeStTraining;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.lattice_st_image)
  return lattice_st_image_;
}
inline ::jmc_auto::planning_internal::LatticeStTraining* PlanningData::release_lattice_st_image() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.lattice_st_image)
  clear_has_lattice_st_image();
  ::jmc_auto::planning_internal::LatticeStTraining* temp = lattice_st_image_;
  lattice_st_image_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_lattice_st_image(::jmc_auto::planning_internal::LatticeStTraining* lattice_st_image) {
  delete lattice_st_image_;
  lattice_st_image_ = lattice_st_image;
  if (lattice_st_image) {
    set_has_lattice_st_image();
  } else {
    clear_has_lattice_st_image();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.lattice_st_image)
}

// optional .jmc_auto.relative_map.MapMsg relative_map = 22;
inline bool PlanningData::has_relative_map() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanningData::set_has_relative_map() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlanningData::clear_has_relative_map() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlanningData::clear_relative_map() {
  if (relative_map_ != NULL) relative_map_->::jmc_auto::relative_map::MapMsg::Clear();
  clear_has_relative_map();
}
inline const ::jmc_auto::relative_map::MapMsg& PlanningData::relative_map() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.relative_map)
  return relative_map_ != NULL ? *relative_map_
                         : *::jmc_auto::relative_map::MapMsg::internal_default_instance();
}
inline ::jmc_auto::relative_map::MapMsg* PlanningData::mutable_relative_map() {
  set_has_relative_map();
  if (relative_map_ == NULL) {
    relative_map_ = new ::jmc_auto::relative_map::MapMsg;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.relative_map)
  return relative_map_;
}
inline ::jmc_auto::relative_map::MapMsg* PlanningData::release_relative_map() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.relative_map)
  clear_has_relative_map();
  ::jmc_auto::relative_map::MapMsg* temp = relative_map_;
  relative_map_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_relative_map(::jmc_auto::relative_map::MapMsg* relative_map) {
  delete relative_map_;
  relative_map_ = relative_map;
  if (relative_map) {
    set_has_relative_map();
  } else {
    clear_has_relative_map();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.relative_map)
}

// optional .jmc_auto.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
inline bool PlanningData::has_auto_tuning_training_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanningData::set_has_auto_tuning_training_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlanningData::clear_has_auto_tuning_training_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlanningData::clear_auto_tuning_training_data() {
  if (auto_tuning_training_data_ != NULL) auto_tuning_training_data_->::jmc_auto::planning_internal::AutoTuningTrainingData::Clear();
  clear_has_auto_tuning_training_data();
}
inline const ::jmc_auto::planning_internal::AutoTuningTrainingData& PlanningData::auto_tuning_training_data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
  return auto_tuning_training_data_ != NULL ? *auto_tuning_training_data_
                         : *::jmc_auto::planning_internal::AutoTuningTrainingData::internal_default_instance();
}
inline ::jmc_auto::planning_internal::AutoTuningTrainingData* PlanningData::mutable_auto_tuning_training_data() {
  set_has_auto_tuning_training_data();
  if (auto_tuning_training_data_ == NULL) {
    auto_tuning_training_data_ = new ::jmc_auto::planning_internal::AutoTuningTrainingData;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
  return auto_tuning_training_data_;
}
inline ::jmc_auto::planning_internal::AutoTuningTrainingData* PlanningData::release_auto_tuning_training_data() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
  clear_has_auto_tuning_training_data();
  ::jmc_auto::planning_internal::AutoTuningTrainingData* temp = auto_tuning_training_data_;
  auto_tuning_training_data_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_auto_tuning_training_data(::jmc_auto::planning_internal::AutoTuningTrainingData* auto_tuning_training_data) {
  delete auto_tuning_training_data_;
  auto_tuning_training_data_ = auto_tuning_training_data;
  if (auto_tuning_training_data) {
    set_has_auto_tuning_training_data();
  } else {
    clear_has_auto_tuning_training_data();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.auto_tuning_training_data)
}

// optional double front_clear_distance = 24;
inline bool PlanningData::has_front_clear_distance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlanningData::set_has_front_clear_distance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlanningData::clear_has_front_clear_distance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlanningData::clear_front_clear_distance() {
  front_clear_distance_ = 0;
  clear_has_front_clear_distance();
}
inline double PlanningData::front_clear_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.front_clear_distance)
  return front_clear_distance_;
}
inline void PlanningData::set_front_clear_distance(double value) {
  set_has_front_clear_distance();
  front_clear_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.PlanningData.front_clear_distance)
}

// repeated .jmc_auto.dreamview.Chart chart = 25;
inline int PlanningData::chart_size() const {
  return chart_.size();
}
inline void PlanningData::clear_chart() {
  chart_.Clear();
}
inline const ::jmc_auto::dreamview::Chart& PlanningData::chart(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.chart)
  return chart_.Get(index);
}
inline ::jmc_auto::dreamview::Chart* PlanningData::mutable_chart(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.chart)
  return chart_.Mutable(index);
}
inline ::jmc_auto::dreamview::Chart* PlanningData::add_chart() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.PlanningData.chart)
  return chart_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart >*
PlanningData::mutable_chart() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.PlanningData.chart)
  return &chart_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Chart >&
PlanningData::chart() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.PlanningData.chart)
  return chart_;
}

// optional .jmc_auto.planning_internal.ScenarioDebug scenario = 26;
inline bool PlanningData::has_scenario() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlanningData::set_has_scenario() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlanningData::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlanningData::clear_scenario() {
  if (scenario_ != NULL) scenario_->::jmc_auto::planning_internal::ScenarioDebug::Clear();
  clear_has_scenario();
}
inline const ::jmc_auto::planning_internal::ScenarioDebug& PlanningData::scenario() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.scenario)
  return scenario_ != NULL ? *scenario_
                         : *::jmc_auto::planning_internal::ScenarioDebug::internal_default_instance();
}
inline ::jmc_auto::planning_internal::ScenarioDebug* PlanningData::mutable_scenario() {
  set_has_scenario();
  if (scenario_ == NULL) {
    scenario_ = new ::jmc_auto::planning_internal::ScenarioDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.scenario)
  return scenario_;
}
inline ::jmc_auto::planning_internal::ScenarioDebug* PlanningData::release_scenario() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.scenario)
  clear_has_scenario();
  ::jmc_auto::planning_internal::ScenarioDebug* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_scenario(::jmc_auto::planning_internal::ScenarioDebug* scenario) {
  delete scenario_;
  scenario_ = scenario;
  if (scenario) {
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.scenario)
}

// optional .jmc_auto.planning_internal.OpenSpaceDebug open_space = 27;
inline bool PlanningData::has_open_space() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlanningData::set_has_open_space() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlanningData::clear_has_open_space() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlanningData::clear_open_space() {
  if (open_space_ != NULL) open_space_->::jmc_auto::planning_internal::OpenSpaceDebug::Clear();
  clear_has_open_space();
}
inline const ::jmc_auto::planning_internal::OpenSpaceDebug& PlanningData::open_space() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.open_space)
  return open_space_ != NULL ? *open_space_
                         : *::jmc_auto::planning_internal::OpenSpaceDebug::internal_default_instance();
}
inline ::jmc_auto::planning_internal::OpenSpaceDebug* PlanningData::mutable_open_space() {
  set_has_open_space();
  if (open_space_ == NULL) {
    open_space_ = new ::jmc_auto::planning_internal::OpenSpaceDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.open_space)
  return open_space_;
}
inline ::jmc_auto::planning_internal::OpenSpaceDebug* PlanningData::release_open_space() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.open_space)
  clear_has_open_space();
  ::jmc_auto::planning_internal::OpenSpaceDebug* temp = open_space_;
  open_space_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_open_space(::jmc_auto::planning_internal::OpenSpaceDebug* open_space) {
  delete open_space_;
  open_space_ = open_space;
  if (open_space) {
    set_has_open_space();
  } else {
    clear_has_open_space();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.open_space)
}

// optional .jmc_auto.planning_internal.SmootherDebug smoother = 28;
inline bool PlanningData::has_smoother() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlanningData::set_has_smoother() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlanningData::clear_has_smoother() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlanningData::clear_smoother() {
  if (smoother_ != NULL) smoother_->::jmc_auto::planning_internal::SmootherDebug::Clear();
  clear_has_smoother();
}
inline const ::jmc_auto::planning_internal::SmootherDebug& PlanningData::smoother() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.smoother)
  return smoother_ != NULL ? *smoother_
                         : *::jmc_auto::planning_internal::SmootherDebug::internal_default_instance();
}
inline ::jmc_auto::planning_internal::SmootherDebug* PlanningData::mutable_smoother() {
  set_has_smoother();
  if (smoother_ == NULL) {
    smoother_ = new ::jmc_auto::planning_internal::SmootherDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.smoother)
  return smoother_;
}
inline ::jmc_auto::planning_internal::SmootherDebug* PlanningData::release_smoother() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.smoother)
  clear_has_smoother();
  ::jmc_auto::planning_internal::SmootherDebug* temp = smoother_;
  smoother_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_smoother(::jmc_auto::planning_internal::SmootherDebug* smoother) {
  delete smoother_;
  smoother_ = smoother;
  if (smoother) {
    set_has_smoother();
  } else {
    clear_has_smoother();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.smoother)
}

// optional .jmc_auto.planning_internal.PullOverDebug pull_over = 29;
inline bool PlanningData::has_pull_over() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlanningData::set_has_pull_over() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlanningData::clear_has_pull_over() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlanningData::clear_pull_over() {
  if (pull_over_ != NULL) pull_over_->::jmc_auto::planning_internal::PullOverDebug::Clear();
  clear_has_pull_over();
}
inline const ::jmc_auto::planning_internal::PullOverDebug& PlanningData::pull_over() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.PlanningData.pull_over)
  return pull_over_ != NULL ? *pull_over_
                         : *::jmc_auto::planning_internal::PullOverDebug::internal_default_instance();
}
inline ::jmc_auto::planning_internal::PullOverDebug* PlanningData::mutable_pull_over() {
  set_has_pull_over();
  if (pull_over_ == NULL) {
    pull_over_ = new ::jmc_auto::planning_internal::PullOverDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.PlanningData.pull_over)
  return pull_over_;
}
inline ::jmc_auto::planning_internal::PullOverDebug* PlanningData::release_pull_over() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.PlanningData.pull_over)
  clear_has_pull_over();
  ::jmc_auto::planning_internal::PullOverDebug* temp = pull_over_;
  pull_over_ = NULL;
  return temp;
}
inline void PlanningData::set_allocated_pull_over(::jmc_auto::planning_internal::PullOverDebug* pull_over) {
  delete pull_over_;
  pull_over_ = pull_over;
  if (pull_over) {
    set_has_pull_over();
  } else {
    clear_has_pull_over();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.PlanningData.pull_over)
}

// -------------------------------------------------------------------

// LatticeStPixel

// optional int32 s = 1;
inline bool LatticeStPixel::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatticeStPixel::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatticeStPixel::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatticeStPixel::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline ::google::protobuf::int32 LatticeStPixel::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.s)
  return s_;
}
inline void LatticeStPixel::set_s(::google::protobuf::int32 value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.s)
}

// optional int32 t = 2;
inline bool LatticeStPixel::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatticeStPixel::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatticeStPixel::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatticeStPixel::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline ::google::protobuf::int32 LatticeStPixel::t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.t)
  return t_;
}
inline void LatticeStPixel::set_t(::google::protobuf::int32 value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.t)
}

// optional uint32 r = 3;
inline bool LatticeStPixel::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatticeStPixel::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatticeStPixel::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatticeStPixel::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 LatticeStPixel::r() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.r)
  return r_;
}
inline void LatticeStPixel::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.r)
}

// optional uint32 g = 4;
inline bool LatticeStPixel::has_g() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LatticeStPixel::set_has_g() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LatticeStPixel::clear_has_g() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LatticeStPixel::clear_g() {
  g_ = 0u;
  clear_has_g();
}
inline ::google::protobuf::uint32 LatticeStPixel::g() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.g)
  return g_;
}
inline void LatticeStPixel::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.g)
}

// optional uint32 b = 5;
inline bool LatticeStPixel::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LatticeStPixel::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LatticeStPixel::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LatticeStPixel::clear_b() {
  b_ = 0u;
  clear_has_b();
}
inline ::google::protobuf::uint32 LatticeStPixel::b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStPixel.b)
  return b_;
}
inline void LatticeStPixel::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStPixel.b)
}

// -------------------------------------------------------------------

// LatticeStTraining

// repeated .jmc_auto.planning_internal.LatticeStPixel pixel = 1;
inline int LatticeStTraining::pixel_size() const {
  return pixel_.size();
}
inline void LatticeStTraining::clear_pixel() {
  pixel_.Clear();
}
inline const ::jmc_auto::planning_internal::LatticeStPixel& LatticeStTraining::pixel(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_.Get(index);
}
inline ::jmc_auto::planning_internal::LatticeStPixel* LatticeStTraining::mutable_pixel(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_.Mutable(index);
}
inline ::jmc_auto::planning_internal::LatticeStPixel* LatticeStTraining::add_pixel() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel >*
LatticeStTraining::mutable_pixel() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return &pixel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning_internal::LatticeStPixel >&
LatticeStTraining::pixel() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.LatticeStTraining.pixel)
  return pixel_;
}

// optional double timestamp = 2;
inline bool LatticeStTraining::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatticeStTraining::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatticeStTraining::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatticeStTraining::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double LatticeStTraining::timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.timestamp)
  return timestamp_;
}
inline void LatticeStTraining::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.timestamp)
}

// optional string annotation = 3;
inline bool LatticeStTraining::has_annotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatticeStTraining::set_has_annotation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatticeStTraining::clear_has_annotation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatticeStTraining::clear_annotation() {
  annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_annotation();
}
inline const ::std::string& LatticeStTraining::annotation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.annotation)
  return annotation_.GetNoArena();
}
inline void LatticeStTraining::set_annotation(const ::std::string& value) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
#if LANG_CXX11
inline void LatticeStTraining::set_annotation(::std::string&& value) {
  set_has_annotation();
  annotation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
#endif
inline void LatticeStTraining::set_annotation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
inline void LatticeStTraining::set_annotation(const char* value, size_t size) {
  set_has_annotation();
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning_internal.LatticeStTraining.annotation)
}
inline ::std::string* LatticeStTraining::mutable_annotation() {
  set_has_annotation();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.LatticeStTraining.annotation)
  return annotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LatticeStTraining::release_annotation() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.LatticeStTraining.annotation)
  clear_has_annotation();
  return annotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LatticeStTraining::set_allocated_annotation(::std::string* annotation) {
  if (annotation != NULL) {
    set_has_annotation();
  } else {
    clear_has_annotation();
  }
  annotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.LatticeStTraining.annotation)
}

// optional uint32 num_s_grids = 4;
inline bool LatticeStTraining::has_num_s_grids() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LatticeStTraining::set_has_num_s_grids() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LatticeStTraining::clear_has_num_s_grids() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LatticeStTraining::clear_num_s_grids() {
  num_s_grids_ = 0u;
  clear_has_num_s_grids();
}
inline ::google::protobuf::uint32 LatticeStTraining::num_s_grids() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.num_s_grids)
  return num_s_grids_;
}
inline void LatticeStTraining::set_num_s_grids(::google::protobuf::uint32 value) {
  set_has_num_s_grids();
  num_s_grids_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.num_s_grids)
}

// optional uint32 num_t_grids = 5;
inline bool LatticeStTraining::has_num_t_grids() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LatticeStTraining::set_has_num_t_grids() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LatticeStTraining::clear_has_num_t_grids() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LatticeStTraining::clear_num_t_grids() {
  num_t_grids_ = 0u;
  clear_has_num_t_grids();
}
inline ::google::protobuf::uint32 LatticeStTraining::num_t_grids() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.num_t_grids)
  return num_t_grids_;
}
inline void LatticeStTraining::set_num_t_grids(::google::protobuf::uint32 value) {
  set_has_num_t_grids();
  num_t_grids_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.num_t_grids)
}

// optional double s_resolution = 6;
inline bool LatticeStTraining::has_s_resolution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LatticeStTraining::set_has_s_resolution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LatticeStTraining::clear_has_s_resolution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LatticeStTraining::clear_s_resolution() {
  s_resolution_ = 0;
  clear_has_s_resolution();
}
inline double LatticeStTraining::s_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.s_resolution)
  return s_resolution_;
}
inline void LatticeStTraining::set_s_resolution(double value) {
  set_has_s_resolution();
  s_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.s_resolution)
}

// optional double t_resolution = 7;
inline bool LatticeStTraining::has_t_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LatticeStTraining::set_has_t_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LatticeStTraining::clear_has_t_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LatticeStTraining::clear_t_resolution() {
  t_resolution_ = 0;
  clear_has_t_resolution();
}
inline double LatticeStTraining::t_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.LatticeStTraining.t_resolution)
  return t_resolution_;
}
inline void LatticeStTraining::set_t_resolution(double value) {
  set_has_t_resolution();
  t_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.LatticeStTraining.t_resolution)
}

// -------------------------------------------------------------------

// CostComponents

// repeated double cost_component = 1;
inline int CostComponents::cost_component_size() const {
  return cost_component_.size();
}
inline void CostComponents::clear_cost_component() {
  cost_component_.Clear();
}
inline double CostComponents::cost_component(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CostComponents.cost_component)
  return cost_component_.Get(index);
}
inline void CostComponents::set_cost_component(int index, double value) {
  cost_component_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning_internal.CostComponents.cost_component)
}
inline void CostComponents::add_cost_component(double value) {
  cost_component_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.CostComponents.cost_component)
}
inline const ::google::protobuf::RepeatedField< double >&
CostComponents::cost_component() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.CostComponents.cost_component)
  return cost_component_;
}
inline ::google::protobuf::RepeatedField< double >*
CostComponents::mutable_cost_component() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.CostComponents.cost_component)
  return &cost_component_;
}

// -------------------------------------------------------------------

// AutoTuningTrainingData

// optional .jmc_auto.planning_internal.CostComponents teacher_component = 1;
inline bool AutoTuningTrainingData::has_teacher_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoTuningTrainingData::set_has_teacher_component() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoTuningTrainingData::clear_has_teacher_component() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoTuningTrainingData::clear_teacher_component() {
  if (teacher_component_ != NULL) teacher_component_->::jmc_auto::planning_internal::CostComponents::Clear();
  clear_has_teacher_component();
}
inline const ::jmc_auto::planning_internal::CostComponents& AutoTuningTrainingData::teacher_component() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
  return teacher_component_ != NULL ? *teacher_component_
                         : *::jmc_auto::planning_internal::CostComponents::internal_default_instance();
}
inline ::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::mutable_teacher_component() {
  set_has_teacher_component();
  if (teacher_component_ == NULL) {
    teacher_component_ = new ::jmc_auto::planning_internal::CostComponents;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
  return teacher_component_;
}
inline ::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::release_teacher_component() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
  clear_has_teacher_component();
  ::jmc_auto::planning_internal::CostComponents* temp = teacher_component_;
  teacher_component_ = NULL;
  return temp;
}
inline void AutoTuningTrainingData::set_allocated_teacher_component(::jmc_auto::planning_internal::CostComponents* teacher_component) {
  delete teacher_component_;
  teacher_component_ = teacher_component;
  if (teacher_component) {
    set_has_teacher_component();
  } else {
    clear_has_teacher_component();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.AutoTuningTrainingData.teacher_component)
}

// optional .jmc_auto.planning_internal.CostComponents student_component = 2;
inline bool AutoTuningTrainingData::has_student_component() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoTuningTrainingData::set_has_student_component() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoTuningTrainingData::clear_has_student_component() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoTuningTrainingData::clear_student_component() {
  if (student_component_ != NULL) student_component_->::jmc_auto::planning_internal::CostComponents::Clear();
  clear_has_student_component();
}
inline const ::jmc_auto::planning_internal::CostComponents& AutoTuningTrainingData::student_component() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
  return student_component_ != NULL ? *student_component_
                         : *::jmc_auto::planning_internal::CostComponents::internal_default_instance();
}
inline ::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::mutable_student_component() {
  set_has_student_component();
  if (student_component_ == NULL) {
    student_component_ = new ::jmc_auto::planning_internal::CostComponents;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
  return student_component_;
}
inline ::jmc_auto::planning_internal::CostComponents* AutoTuningTrainingData::release_student_component() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
  clear_has_student_component();
  ::jmc_auto::planning_internal::CostComponents* temp = student_component_;
  student_component_ = NULL;
  return temp;
}
inline void AutoTuningTrainingData::set_allocated_student_component(::jmc_auto::planning_internal::CostComponents* student_component) {
  delete student_component_;
  student_component_ = student_component;
  if (student_component) {
    set_has_student_component();
  } else {
    clear_has_student_component();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.AutoTuningTrainingData.student_component)
}

// -------------------------------------------------------------------

// CloudReferenceLineRequest

// repeated .jmc_auto.routing.LaneSegment lane_segment = 1;
inline int CloudReferenceLineRequest::lane_segment_size() const {
  return lane_segment_.size();
}
inline void CloudReferenceLineRequest::clear_lane_segment() {
  lane_segment_.Clear();
}
inline const ::jmc_auto::routing::LaneSegment& CloudReferenceLineRequest::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Get(index);
}
inline ::jmc_auto::routing::LaneSegment* CloudReferenceLineRequest::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Mutable(index);
}
inline ::jmc_auto::routing::LaneSegment* CloudReferenceLineRequest::add_lane_segment() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >*
CloudReferenceLineRequest::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return &lane_segment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >&
CloudReferenceLineRequest::lane_segment() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.CloudReferenceLineRequest.lane_segment)
  return lane_segment_;
}

// -------------------------------------------------------------------

// CloudReferenceLineRoutingRequest

// optional .jmc_auto.routing.RoutingResponse routing = 1;
inline bool CloudReferenceLineRoutingRequest::has_routing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloudReferenceLineRoutingRequest::set_has_routing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloudReferenceLineRoutingRequest::clear_has_routing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloudReferenceLineRoutingRequest::clear_routing() {
  if (routing_ != NULL) routing_->::jmc_auto::routing::RoutingResponse::Clear();
  clear_has_routing();
}
inline const ::jmc_auto::routing::RoutingResponse& CloudReferenceLineRoutingRequest::routing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return routing_ != NULL ? *routing_
                         : *::jmc_auto::routing::RoutingResponse::internal_default_instance();
}
inline ::jmc_auto::routing::RoutingResponse* CloudReferenceLineRoutingRequest::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::jmc_auto::routing::RoutingResponse;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return routing_;
}
inline ::jmc_auto::routing::RoutingResponse* CloudReferenceLineRoutingRequest::release_routing() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
  clear_has_routing();
  ::jmc_auto::routing::RoutingResponse* temp = routing_;
  routing_ = NULL;
  return temp;
}
inline void CloudReferenceLineRoutingRequest::set_allocated_routing(::jmc_auto::routing::RoutingResponse* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning_internal.CloudReferenceLineRoutingRequest.routing)
}

// -------------------------------------------------------------------

// CloudReferenceLineResponse

// repeated .jmc_auto.common.Path segment = 1;
inline int CloudReferenceLineResponse::segment_size() const {
  return segment_.size();
}
inline void CloudReferenceLineResponse::clear_segment() {
  segment_.Clear();
}
inline const ::jmc_auto::common::Path& CloudReferenceLineResponse::segment(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Get(index);
}
inline ::jmc_auto::common::Path* CloudReferenceLineResponse::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Mutable(index);
}
inline ::jmc_auto::common::Path* CloudReferenceLineResponse::add_segment() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >*
CloudReferenceLineResponse::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return &segment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Path >&
CloudReferenceLineResponse::segment() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning_internal.CloudReferenceLineResponse.segment)
  return segment_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning_internal
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType>() {
  return ::jmc_auto::planning_internal::StGraphBoundaryDebug_StBoundaryType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::planning_internal::SmootherDebug_SmootherType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::planning_internal::SmootherDebug_SmootherType>() {
  return ::jmc_auto::planning_internal::SmootherDebug_SmootherType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto__INCLUDED
