// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/creep_decider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/creep_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class CreepDeciderConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreepDeciderConfig> {
} _CreepDeciderConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, min_boundary_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, ignore_max_st_min_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreepDeciderConfig, ignore_min_st_min_s_),
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(CreepDeciderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreepDeciderConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/creep_decider_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _CreepDeciderConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CreepDeciderConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n1modules/planning/proto/creep_decider_c"
      "onfig.proto\022\021jmc_auto.planning\"\314\001\n\022Creep"
      "DeciderConfig\022\032\n\rstop_distance\030\001 \001(\001:\0030."
      "5\022\026\n\013speed_limit\030\002 \001(\001:\0011\022$\n\027max_valid_s"
      "top_distance\030\003 \001(\001:\0030.3\022\031\n\016min_boundary_"
      "t\030\004 \001(\001:\0016\022 \n\023ignore_max_st_min_t\030\005 \001(\001:"
      "\0030.1\022\037\n\023ignore_min_st_min_s\030\006 \001(\001:\00215"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/creep_decider_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreepDeciderConfig::kStopDistanceFieldNumber;
const int CreepDeciderConfig::kSpeedLimitFieldNumber;
const int CreepDeciderConfig::kMaxValidStopDistanceFieldNumber;
const int CreepDeciderConfig::kMinBoundaryTFieldNumber;
const int CreepDeciderConfig::kIgnoreMaxStMinTFieldNumber;
const int CreepDeciderConfig::kIgnoreMinStMinSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreepDeciderConfig::CreepDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.CreepDeciderConfig)
}
CreepDeciderConfig::CreepDeciderConfig(const CreepDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    reinterpret_cast<char*>(&ignore_min_st_min_s_) -
    reinterpret_cast<char*>(&stop_distance_) + sizeof(ignore_min_st_min_s_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.CreepDeciderConfig)
}

void CreepDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  stop_distance_ = 0.5;
  speed_limit_ = 1;
  max_valid_stop_distance_ = 0.3;
  min_boundary_t_ = 6;
  ignore_max_st_min_t_ = 0.1;
  ignore_min_st_min_s_ = 15;
}

CreepDeciderConfig::~CreepDeciderConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.CreepDeciderConfig)
  SharedDtor();
}

void CreepDeciderConfig::SharedDtor() {
}

void CreepDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreepDeciderConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreepDeciderConfig& CreepDeciderConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreepDeciderConfig* CreepDeciderConfig::New(::google::protobuf::Arena* arena) const {
  CreepDeciderConfig* n = new CreepDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreepDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.CreepDeciderConfig)
  if (_has_bits_[0 / 32] & 63u) {
    stop_distance_ = 0.5;
    speed_limit_ = 1;
    max_valid_stop_distance_ = 0.3;
    min_boundary_t_ = 6;
    ignore_max_st_min_t_ = 0.1;
    ignore_min_st_min_s_ = 15;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreepDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.CreepDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 3 [default = 0.3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_boundary_t = 4 [default = 6];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_min_boundary_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_boundary_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ignore_max_st_min_t = 5 [default = 0.1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ignore_max_st_min_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ignore_max_st_min_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ignore_min_st_min_s = 6 [default = 15];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_ignore_min_st_min_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ignore_min_st_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.CreepDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.CreepDeciderConfig)
  return false;
#undef DO_
}

void CreepDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.CreepDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double speed_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed_limit(), output);
  }

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_valid_stop_distance(), output);
  }

  // optional double min_boundary_t = 4 [default = 6];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_boundary_t(), output);
  }

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ignore_max_st_min_t(), output);
  }

  // optional double ignore_min_st_min_s = 6 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ignore_min_st_min_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.CreepDeciderConfig)
}

::google::protobuf::uint8* CreepDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.CreepDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double speed_limit = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed_limit(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_valid_stop_distance(), target);
  }

  // optional double min_boundary_t = 4 [default = 6];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_boundary_t(), target);
  }

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ignore_max_st_min_t(), target);
  }

  // optional double ignore_min_st_min_s = 6 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ignore_min_st_min_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.CreepDeciderConfig)
  return target;
}

size_t CreepDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.CreepDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 2 [default = 1];
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 0.3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_t = 4 [default = 6];
    if (has_min_boundary_t()) {
      total_size += 1 + 8;
    }

    // optional double ignore_max_st_min_t = 5 [default = 0.1];
    if (has_ignore_max_st_min_t()) {
      total_size += 1 + 8;
    }

    // optional double ignore_min_st_min_s = 6 [default = 15];
    if (has_ignore_min_st_min_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreepDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.CreepDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CreepDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreepDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.CreepDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.CreepDeciderConfig)
    MergeFrom(*source);
  }
}

void CreepDeciderConfig::MergeFrom(const CreepDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.CreepDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_boundary_t_ = from.min_boundary_t_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_max_st_min_t_ = from.ignore_max_st_min_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      ignore_min_st_min_s_ = from.ignore_min_st_min_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreepDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.CreepDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreepDeciderConfig::CopyFrom(const CreepDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.CreepDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreepDeciderConfig::IsInitialized() const {
  return true;
}

void CreepDeciderConfig::Swap(CreepDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreepDeciderConfig::InternalSwap(CreepDeciderConfig* other) {
  std::swap(stop_distance_, other->stop_distance_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(min_boundary_t_, other->min_boundary_t_);
  std::swap(ignore_max_st_min_t_, other->ignore_max_st_min_t_);
  std::swap(ignore_min_st_min_s_, other->ignore_min_st_min_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreepDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fcreep_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreepDeciderConfig

// optional double stop_distance = 1 [default = 0.5];
bool CreepDeciderConfig::has_stop_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreepDeciderConfig::set_has_stop_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void CreepDeciderConfig::clear_has_stop_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreepDeciderConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  clear_has_stop_distance();
}
double CreepDeciderConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CreepDeciderConfig.stop_distance)
  return stop_distance_;
}
void CreepDeciderConfig::set_stop_distance(double value) {
  set_has_stop_distance();
  stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CreepDeciderConfig.stop_distance)
}

// optional double speed_limit = 2 [default = 1];
bool CreepDeciderConfig::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreepDeciderConfig::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void CreepDeciderConfig::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreepDeciderConfig::clear_speed_limit() {
  speed_limit_ = 1;
  clear_has_speed_limit();
}
double CreepDeciderConfig::speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CreepDeciderConfig.speed_limit)
  return speed_limit_;
}
void CreepDeciderConfig::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CreepDeciderConfig.speed_limit)
}

// optional double max_valid_stop_distance = 3 [default = 0.3];
bool CreepDeciderConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreepDeciderConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void CreepDeciderConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreepDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.3;
  clear_has_max_valid_stop_distance();
}
double CreepDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CreepDeciderConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
void CreepDeciderConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CreepDeciderConfig.max_valid_stop_distance)
}

// optional double min_boundary_t = 4 [default = 6];
bool CreepDeciderConfig::has_min_boundary_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreepDeciderConfig::set_has_min_boundary_t() {
  _has_bits_[0] |= 0x00000008u;
}
void CreepDeciderConfig::clear_has_min_boundary_t() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreepDeciderConfig::clear_min_boundary_t() {
  min_boundary_t_ = 6;
  clear_has_min_boundary_t();
}
double CreepDeciderConfig::min_boundary_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CreepDeciderConfig.min_boundary_t)
  return min_boundary_t_;
}
void CreepDeciderConfig::set_min_boundary_t(double value) {
  set_has_min_boundary_t();
  min_boundary_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CreepDeciderConfig.min_boundary_t)
}

// optional double ignore_max_st_min_t = 5 [default = 0.1];
bool CreepDeciderConfig::has_ignore_max_st_min_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreepDeciderConfig::set_has_ignore_max_st_min_t() {
  _has_bits_[0] |= 0x00000010u;
}
void CreepDeciderConfig::clear_has_ignore_max_st_min_t() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreepDeciderConfig::clear_ignore_max_st_min_t() {
  ignore_max_st_min_t_ = 0.1;
  clear_has_ignore_max_st_min_t();
}
double CreepDeciderConfig::ignore_max_st_min_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CreepDeciderConfig.ignore_max_st_min_t)
  return ignore_max_st_min_t_;
}
void CreepDeciderConfig::set_ignore_max_st_min_t(double value) {
  set_has_ignore_max_st_min_t();
  ignore_max_st_min_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CreepDeciderConfig.ignore_max_st_min_t)
}

// optional double ignore_min_st_min_s = 6 [default = 15];
bool CreepDeciderConfig::has_ignore_min_st_min_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CreepDeciderConfig::set_has_ignore_min_st_min_s() {
  _has_bits_[0] |= 0x00000020u;
}
void CreepDeciderConfig::clear_has_ignore_min_st_min_s() {
  _has_bits_[0] &= ~0x00000020u;
}
void CreepDeciderConfig::clear_ignore_min_st_min_s() {
  ignore_min_st_min_s_ = 15;
  clear_has_ignore_min_st_min_s();
}
double CreepDeciderConfig::ignore_min_st_min_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CreepDeciderConfig.ignore_min_st_min_s)
  return ignore_min_st_min_s_;
}
void CreepDeciderConfig::set_ignore_min_st_min_s(double value) {
  set_has_ignore_min_st_min_s();
  ignore_min_st_min_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CreepDeciderConfig.ignore_min_st_min_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
