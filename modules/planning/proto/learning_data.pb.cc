// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/learning_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/learning_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class OverlapFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OverlapFeature> {
} _OverlapFeature_default_instance_;
class PlanningTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningTag> {
} _PlanningTag_default_instance_;
class ChassisFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChassisFeature> {
} _ChassisFeature_default_instance_;
class LocalizationFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationFeature> {
} _LocalizationFeature_default_instance_;
class PathPointFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PathPointFeature> {
} _PathPointFeature_default_instance_;
class TrajectoryPointFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPointFeature> {
} _TrajectoryPointFeature_default_instance_;
class TrajectoryPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPoint> {
} _TrajectoryPoint_default_instance_;
class PerceptionObstacleFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacleFeature> {
} _PerceptionObstacleFeature_default_instance_;
class ObstacleTrajectoryFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleTrajectoryFeature> {
} _ObstacleTrajectoryFeature_default_instance_;
class PredictionTrajectoryFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PredictionTrajectoryFeature> {
} _PredictionTrajectoryFeature_default_instance_;
class PredictionObstacleFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PredictionObstacleFeature> {
} _PredictionObstacleFeature_default_instance_;
class ObstacleFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleFeature> {
} _ObstacleFeature_default_instance_;
class RoutingFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoutingFeature> {
} _RoutingFeature_default_instance_;
class TrafficLightFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightFeature> {
} _TrafficLightFeature_default_instance_;
class TrafficLightDetectionFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDetectionFeature> {
} _TrafficLightDetectionFeature_default_instance_;
class ADCTrajectoryPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectoryPoint> {
} _ADCTrajectoryPoint_default_instance_;
class LearningOutputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningOutput> {
} _LearningOutput_default_instance_;
class LearningDataFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningDataFrame> {
} _LearningDataFrame_default_instance_;
class LearningDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LearningData> {
} _LearningData_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[19];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlapFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlapFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlapFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlapFeature, distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, lane_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, clear_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, pnc_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTag, yield_sign_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, speed_mps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, throttle_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, brake_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, steering_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeature, gear_location_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationFeature, angular_velocity_),
  4,
  0,
  5,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPointFeature, lane_id_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, relative_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPointFeature, gaussian_info_),
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, trajectory_point_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacleFeature, polygon_point_),
  3,
  0,
  4,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTrajectoryFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTrajectoryFeature, perception_obstacle_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleTrajectoryFeature, evaluated_trajectory_point_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionTrajectoryFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionTrajectoryFeature, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionTrajectoryFeature, trajectory_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, predicted_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, intent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacleFeature, trajectory_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, obstacle_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleFeature, obstacle_prediction_),
  4,
  2,
  3,
  6,
  5,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingFeature, routing_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingFeature, local_routing_lane_id_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, blink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightFeature, remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetectionFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetectionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetectionFeature, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetectionFeature, traffic_light_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, planning_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectoryPoint, trajectory_point_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningOutput, adc_future_trajectory_point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, frame_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, planning_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, chassis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, routing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, traffic_light_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, adc_trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningDataFrame, output_),
  7,
  8,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningData, learning_data_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(OverlapFeature)},
  { 9, 21, sizeof(PlanningTag)},
  { 28, 39, sizeof(ChassisFeature)},
  { 45, 56, sizeof(LocalizationFeature)},
  { 62, 73, sizeof(PathPointFeature)},
  { 79, 89, sizeof(TrajectoryPointFeature)},
  { 94, 101, sizeof(TrajectoryPoint)},
  { 103, 114, sizeof(PerceptionObstacleFeature)},
  { 120, 127, sizeof(ObstacleTrajectoryFeature)},
  { 129, 136, sizeof(PredictionTrajectoryFeature)},
  { 138, 149, sizeof(PredictionObstacleFeature)},
  { 155, 167, sizeof(ObstacleFeature)},
  { 174, 181, sizeof(RoutingFeature)},
  { 183, 194, sizeof(TrafficLightFeature)},
  { 200, 207, sizeof(TrafficLightDetectionFeature)},
  { 209, 217, sizeof(ADCTrajectoryPoint)},
  { 220, 226, sizeof(LearningOutput)},
  { 227, 243, sizeof(LearningDataFrame)},
  { 254, 260, sizeof(LearningData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OverlapFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChassisFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalizationFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathPointFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryPointFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleTrajectoryFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictionTrajectoryFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictionObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoutingFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightDetectionFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCTrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningDataFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LearningData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/learning_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

}  // namespace

void TableStruct::Shutdown() {
  _OverlapFeature_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlanningTag_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChassisFeature_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LocalizationFeature_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PathPointFeature_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TrajectoryPointFeature_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _TrajectoryPoint_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _PerceptionObstacleFeature_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ObstacleTrajectoryFeature_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PredictionTrajectoryFeature_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PredictionObstacleFeature_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ObstacleFeature_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RoutingFeature_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _TrafficLightFeature_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _TrafficLightDetectionFeature_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ADCTrajectoryPoint_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _LearningOutput_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _LearningDataFrame_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _LearningData_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::InitDefaults();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  _OverlapFeature_default_instance_.DefaultConstruct();
  _PlanningTag_default_instance_.DefaultConstruct();
  _ChassisFeature_default_instance_.DefaultConstruct();
  _LocalizationFeature_default_instance_.DefaultConstruct();
  _PathPointFeature_default_instance_.DefaultConstruct();
  _TrajectoryPointFeature_default_instance_.DefaultConstruct();
  _TrajectoryPoint_default_instance_.DefaultConstruct();
  _PerceptionObstacleFeature_default_instance_.DefaultConstruct();
  _ObstacleTrajectoryFeature_default_instance_.DefaultConstruct();
  _PredictionTrajectoryFeature_default_instance_.DefaultConstruct();
  _PredictionObstacleFeature_default_instance_.DefaultConstruct();
  _ObstacleFeature_default_instance_.DefaultConstruct();
  _RoutingFeature_default_instance_.DefaultConstruct();
  _TrafficLightFeature_default_instance_.DefaultConstruct();
  _TrafficLightDetectionFeature_default_instance_.DefaultConstruct();
  _ADCTrajectoryPoint_default_instance_.DefaultConstruct();
  _LearningOutput_default_instance_.DefaultConstruct();
  _LearningDataFrame_default_instance_.DefaultConstruct();
  _LearningData_default_instance_.DefaultConstruct();
  _PlanningTag_default_instance_.get_mutable()->clear_area_ = const_cast< ::jmc_auto::planning::OverlapFeature*>(
      ::jmc_auto::planning::OverlapFeature::internal_default_instance());
  _PlanningTag_default_instance_.get_mutable()->crosswalk_ = const_cast< ::jmc_auto::planning::OverlapFeature*>(
      ::jmc_auto::planning::OverlapFeature::internal_default_instance());
  _PlanningTag_default_instance_.get_mutable()->pnc_junction_ = const_cast< ::jmc_auto::planning::OverlapFeature*>(
      ::jmc_auto::planning::OverlapFeature::internal_default_instance());
  _PlanningTag_default_instance_.get_mutable()->signal_ = const_cast< ::jmc_auto::planning::OverlapFeature*>(
      ::jmc_auto::planning::OverlapFeature::internal_default_instance());
  _PlanningTag_default_instance_.get_mutable()->stop_sign_ = const_cast< ::jmc_auto::planning::OverlapFeature*>(
      ::jmc_auto::planning::OverlapFeature::internal_default_instance());
  _PlanningTag_default_instance_.get_mutable()->yield_sign_ = const_cast< ::jmc_auto::planning::OverlapFeature*>(
      ::jmc_auto::planning::OverlapFeature::internal_default_instance());
  _LocalizationFeature_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _LocalizationFeature_default_instance_.get_mutable()->linear_velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _LocalizationFeature_default_instance_.get_mutable()->linear_acceleration_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _LocalizationFeature_default_instance_.get_mutable()->angular_velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _TrajectoryPointFeature_default_instance_.get_mutable()->path_point_ = const_cast< ::jmc_auto::planning::PathPointFeature*>(
      ::jmc_auto::planning::PathPointFeature::internal_default_instance());
  _TrajectoryPointFeature_default_instance_.get_mutable()->gaussian_info_ = const_cast< ::jmc_auto::common::GaussianInfo*>(
      ::jmc_auto::common::GaussianInfo::internal_default_instance());
  _TrajectoryPoint_default_instance_.get_mutable()->trajectory_point_ = const_cast< ::jmc_auto::planning::TrajectoryPointFeature*>(
      ::jmc_auto::planning::TrajectoryPointFeature::internal_default_instance());
  _PerceptionObstacleFeature_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _PerceptionObstacleFeature_default_instance_.get_mutable()->velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _PerceptionObstacleFeature_default_instance_.get_mutable()->acceleration_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _PredictionObstacleFeature_default_instance_.get_mutable()->intent_ = const_cast< ::jmc_auto::prediction::ObstacleIntent*>(
      ::jmc_auto::prediction::ObstacleIntent::internal_default_instance());
  _PredictionObstacleFeature_default_instance_.get_mutable()->priority_ = const_cast< ::jmc_auto::prediction::ObstaclePriority*>(
      ::jmc_auto::prediction::ObstaclePriority::internal_default_instance());
  _ObstacleFeature_default_instance_.get_mutable()->obstacle_trajectory_ = const_cast< ::jmc_auto::planning::ObstacleTrajectoryFeature*>(
      ::jmc_auto::planning::ObstacleTrajectoryFeature::internal_default_instance());
  _ObstacleFeature_default_instance_.get_mutable()->obstacle_prediction_ = const_cast< ::jmc_auto::planning::PredictionObstacleFeature*>(
      ::jmc_auto::planning::PredictionObstacleFeature::internal_default_instance());
  _ADCTrajectoryPoint_default_instance_.get_mutable()->planning_tag_ = const_cast< ::jmc_auto::planning::PlanningTag*>(
      ::jmc_auto::planning::PlanningTag::internal_default_instance());
  _ADCTrajectoryPoint_default_instance_.get_mutable()->trajectory_point_ = const_cast< ::jmc_auto::planning::TrajectoryPointFeature*>(
      ::jmc_auto::planning::TrajectoryPointFeature::internal_default_instance());
  _LearningDataFrame_default_instance_.get_mutable()->planning_tag_ = const_cast< ::jmc_auto::planning::PlanningTag*>(
      ::jmc_auto::planning::PlanningTag::internal_default_instance());
  _LearningDataFrame_default_instance_.get_mutable()->chassis_ = const_cast< ::jmc_auto::planning::ChassisFeature*>(
      ::jmc_auto::planning::ChassisFeature::internal_default_instance());
  _LearningDataFrame_default_instance_.get_mutable()->localization_ = const_cast< ::jmc_auto::planning::LocalizationFeature*>(
      ::jmc_auto::planning::LocalizationFeature::internal_default_instance());
  _LearningDataFrame_default_instance_.get_mutable()->routing_ = const_cast< ::jmc_auto::planning::RoutingFeature*>(
      ::jmc_auto::planning::RoutingFeature::internal_default_instance());
  _LearningDataFrame_default_instance_.get_mutable()->traffic_light_detection_ = const_cast< ::jmc_auto::planning::TrafficLightDetectionFeature*>(
      ::jmc_auto::planning::TrafficLightDetectionFeature::internal_default_instance());
  _LearningDataFrame_default_instance_.get_mutable()->output_ = const_cast< ::jmc_auto::planning::LearningOutput*>(
      ::jmc_auto::planning::LearningOutput::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*modules/planning/proto/learning_data.p"
      "roto\022\021jmc_auto.planning\032\"modules/canbus/"
      "proto/chassis.proto\032#modules/common/prot"
      "o/geometry.proto\032$modules/common/proto/p"
      "nc_point.proto\032 modules/map/proto/map_la"
      "ne.proto\0322modules/perception/proto/perce"
      "ption_obstacle.proto\032&modules/prediction"
      "/proto/feature.proto\0322modules/prediction"
      "/proto/prediction_obstacle.proto\0326module"
      "s/perception/proto/traffic_light_detecti"
      "on.proto\".\n\016OverlapFeature\022\n\n\002id\030\001 \001(\t\022\020"
      "\n\010distance\030\002 \001(\001\"\205\003\n\013PlanningTag\0220\n\tlane"
      "_turn\030\001 \001(\0162\035.jmc_auto.hdmap.Lane.LaneTu"
      "rn\0225\n\nclear_area\030\002 \001(\0132!.jmc_auto.planni"
      "ng.OverlapFeature\0224\n\tcrosswalk\030\003 \001(\0132!.j"
      "mc_auto.planning.OverlapFeature\0227\n\014pnc_j"
      "unction\030\004 \001(\0132!.jmc_auto.planning.Overla"
      "pFeature\0221\n\006signal\030\005 \001(\0132!.jmc_auto.plan"
      "ning.OverlapFeature\0224\n\tstop_sign\030\006 \001(\0132!"
      ".jmc_auto.planning.OverlapFeature\0225\n\nyie"
      "ld_sign\030\007 \001(\0132!.jmc_auto.planning.Overla"
      "pFeature\"\324\001\n\016ChassisFeature\022\035\n\025message_t"
      "imestamp_sec\030\001 \001(\001\022\021\n\tspeed_mps\030\002 \001(\002\022\033\n"
      "\023throttle_percentage\030\003 \001(\002\022\030\n\020brake_perc"
      "entage\030\004 \001(\002\022\033\n\023steering_percentage\030\005 \001("
      "\002\022<\n\rgear_location\030\006 \001(\0162%.jmc_auto.canb"
      "us.Chassis.GearPosition\"\220\002\n\023Localization"
      "Feature\022\035\n\025message_timestamp_sec\030\001 \001(\001\022+"
      "\n\010position\030\002 \001(\0132\031.jmc_auto.common.Point"
      "ENU\022\017\n\007heading\030\003 \001(\001\0221\n\017linear_velocity\030"
      "\004 \001(\0132\030.jmc_auto.common.Point3D\0225\n\023linea"
      "r_acceleration\030\005 \001(\0132\030.jmc_auto.common.P"
      "oint3D\0222\n\020angular_velocity\030\006 \001(\0132\030.jmc_a"
      "uto.common.Point3D\"^\n\020PathPointFeature\022\t"
      "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\r\n\005theta"
      "\030\004 \001(\001\022\t\n\001s\030\005 \001(\001\022\017\n\007lane_id\030\006 \001(\t\"\264\001\n\026T"
      "rajectoryPointFeature\0227\n\npath_point\030\001 \001("
      "\0132#.jmc_auto.planning.PathPointFeature\022\t"
      "\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001(\001\022\025\n\rrelative_time\030\004 "
      "\001(\001\0224\n\rgaussian_info\030\005 \001(\0132\035.jmc_auto.co"
      "mmon.GaussianInfo\"m\n\017TrajectoryPoint\022\025\n\r"
      "timestamp_sec\030\001 \001(\001\022C\n\020trajectory_point\030"
      "\002 \001(\0132).jmc_auto.planning.TrajectoryPoin"
      "tFeature\"\372\001\n\031PerceptionObstacleFeature\022\025"
      "\n\rtimestamp_sec\030\001 \001(\001\022*\n\010position\030\002 \001(\0132"
      "\030.jmc_auto.common.Point3D\022\r\n\005theta\030\003 \001(\001"
      "\022*\n\010velocity\030\004 \001(\0132\030.jmc_auto.common.Poi"
      "nt3D\022.\n\014acceleration\030\005 \001(\0132\030.jmc_auto.co"
      "mmon.Point3D\022/\n\rpolygon_point\030\006 \003(\0132\030.jm"
      "c_auto.common.Point3D\"\266\001\n\031ObstacleTrajec"
      "toryFeature\022Q\n\033perception_obstacle_histo"
      "ry\030\001 \003(\0132,.jmc_auto.planning.PerceptionO"
      "bstacleFeature\022F\n\032evaluated_trajectory_p"
      "oint\030\002 \003(\0132\".jmc_auto.planning.Trajector"
      "yPoint\"p\n\033PredictionTrajectoryFeature\022\023\n"
      "\013probability\030\001 \001(\001\022<\n\020trajectory_point\030\002"
      " \003(\0132\".jmc_auto.planning.TrajectoryPoint"
      "\"\230\002\n\031PredictionObstacleFeature\022\025\n\rtimest"
      "amp_sec\030\001 \001(\001\022\030\n\020predicted_period\030\002 \001(\001\022"
      "3\n\006intent\030\003 \001(\0132#.jmc_auto.prediction.Ob"
      "stacleIntent\0227\n\010priority\030\004 \001(\0132%.jmc_aut"
      "o.prediction.ObstaclePriority\022\030\n\tis_stat"
      "ic\030\005 \001(\010:\005false\022B\n\ntrajectory\030\006 \003(\0132..jm"
      "c_auto.planning.PredictionTrajectoryFeat"
      "ure\"\236\002\n\017ObstacleFeature\022\n\n\002id\030\001 \001(\005\022\016\n\006l"
      "ength\030\002 \001(\001\022\r\n\005width\030\003 \001(\001\022\016\n\006height\030\004 \001"
      "(\001\022:\n\004type\030\005 \001(\0162,.jmc_auto.perception.P"
      "erceptionObstacle.Type\022I\n\023obstacle_traje"
      "ctory\030\006 \001(\0132,.jmc_auto.planning.Obstacle"
      "TrajectoryFeature\022I\n\023obstacle_prediction"
      "\030\007 \001(\0132,.jmc_auto.planning.PredictionObs"
      "tacleFeature\"H\n\016RoutingFeature\022\027\n\017routin"
      "g_lane_id\030\001 \003(\t\022\035\n\025local_routing_lane_id"
      "\030\002 \003(\t\"\256\001\n\023TrafficLightFeature\0226\n\005color\030"
      "\001 \001(\0162\'.jmc_auto.perception.TrafficLight"
      ".Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfidence\030\003 \001(\001:\001"
      "1\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005blink\030\005 \001(\010\022"
      "\026\n\016remaining_time\030\006 \001(\001\"|\n\034TrafficLightD"
      "etectionFeature\022\035\n\025message_timestamp_sec"
      "\030\001 \001(\001\022=\n\rtraffic_light\030\002 \003(\0132&.jmc_auto"
      ".planning.TrafficLightFeature\"\246\001\n\022ADCTra"
      "jectoryPoint\022\025\n\rtimestamp_sec\030\001 \001(\001\0224\n\014p"
      "lanning_tag\030\002 \001(\0132\036.jmc_auto.planning.Pl"
      "anningTag\022C\n\020trajectory_point\030\003 \001(\0132).jm"
      "c_auto.planning.TrajectoryPointFeature\"\\"
      "\n\016LearningOutput\022J\n\033adc_future_trajector"
      "y_point\030\001 \003(\0132%.jmc_auto.planning.ADCTra"
      "jectoryPoint\"\263\004\n\021LearningDataFrame\022\035\n\025me"
      "ssage_timestamp_sec\030\001 \001(\001\022\021\n\tframe_num\030\002"
      " \001(\r\022\020\n\010map_name\030\003 \001(\t\0224\n\014planning_tag\030\004"
      " \001(\0132\036.jmc_auto.planning.PlanningTag\0222\n\007"
      "chassis\030\005 \001(\0132!.jmc_auto.planning.Chassi"
      "sFeature\022<\n\014localization\030\006 \001(\0132&.jmc_aut"
      "o.planning.LocalizationFeature\0224\n\010obstac"
      "le\030\007 \003(\0132\".jmc_auto.planning.ObstacleFea"
      "ture\0222\n\007routing\030\010 \001(\0132!.jmc_auto.plannin"
      "g.RoutingFeature\022P\n\027traffic_light_detect"
      "ion\030\t \001(\0132/.jmc_auto.planning.TrafficLig"
      "htDetectionFeature\022C\n\024adc_trajectory_poi"
      "nt\030\n \003(\0132%.jmc_auto.planning.ADCTrajecto"
      "ryPoint\0221\n\006output\030\013 \001(\0132!.jmc_auto.plann"
      "ing.LearningOutput\"K\n\014LearningData\022;\n\rle"
      "arning_data\030\001 \003(\0132$.jmc_auto.planning.Le"
      "arningDataFrame"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/learning_data.proto", &protobuf_RegisterTypes);
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::AddDescriptors();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::AddDescriptors();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::AddDescriptors();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverlapFeature::kIdFieldNumber;
const int OverlapFeature::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverlapFeature::OverlapFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.OverlapFeature)
}
OverlapFeature::OverlapFeature(const OverlapFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.OverlapFeature)
}

void OverlapFeature::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
}

OverlapFeature::~OverlapFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.OverlapFeature)
  SharedDtor();
}

void OverlapFeature::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OverlapFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverlapFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OverlapFeature& OverlapFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OverlapFeature* OverlapFeature::New(::google::protobuf::Arena* arena) const {
  OverlapFeature* n = new OverlapFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OverlapFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.OverlapFeature)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OverlapFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.OverlapFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.OverlapFeature.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.OverlapFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.OverlapFeature)
  return false;
#undef DO_
}

void OverlapFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.OverlapFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.OverlapFeature.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.OverlapFeature)
}

::google::protobuf::uint8* OverlapFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.OverlapFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.OverlapFeature.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.OverlapFeature)
  return target;
}

size_t OverlapFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.OverlapFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double distance = 2;
    if (has_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverlapFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.OverlapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const OverlapFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OverlapFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.OverlapFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.OverlapFeature)
    MergeFrom(*source);
  }
}

void OverlapFeature::MergeFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.OverlapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OverlapFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.OverlapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverlapFeature::CopyFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.OverlapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlapFeature::IsInitialized() const {
  return true;
}

void OverlapFeature::Swap(OverlapFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverlapFeature::InternalSwap(OverlapFeature* other) {
  id_.Swap(&other->id_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OverlapFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OverlapFeature

// optional string id = 1;
bool OverlapFeature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OverlapFeature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OverlapFeature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OverlapFeature::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& OverlapFeature::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OverlapFeature.id)
  return id_.GetNoArena();
}
void OverlapFeature::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OverlapFeature.id)
}
#if LANG_CXX11
void OverlapFeature::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.OverlapFeature.id)
}
#endif
void OverlapFeature::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.OverlapFeature.id)
}
void OverlapFeature::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.OverlapFeature.id)
}
::std::string* OverlapFeature::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OverlapFeature.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OverlapFeature::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OverlapFeature.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OverlapFeature::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OverlapFeature.id)
}

// optional double distance = 2;
bool OverlapFeature::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OverlapFeature::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void OverlapFeature::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void OverlapFeature::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
double OverlapFeature::distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OverlapFeature.distance)
  return distance_;
}
void OverlapFeature::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OverlapFeature.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningTag::kLaneTurnFieldNumber;
const int PlanningTag::kClearAreaFieldNumber;
const int PlanningTag::kCrosswalkFieldNumber;
const int PlanningTag::kPncJunctionFieldNumber;
const int PlanningTag::kSignalFieldNumber;
const int PlanningTag::kStopSignFieldNumber;
const int PlanningTag::kYieldSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningTag::PlanningTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PlanningTag)
}
PlanningTag::PlanningTag(const PlanningTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clear_area()) {
    clear_area_ = new ::jmc_auto::planning::OverlapFeature(*from.clear_area_);
  } else {
    clear_area_ = NULL;
  }
  if (from.has_crosswalk()) {
    crosswalk_ = new ::jmc_auto::planning::OverlapFeature(*from.crosswalk_);
  } else {
    crosswalk_ = NULL;
  }
  if (from.has_pnc_junction()) {
    pnc_junction_ = new ::jmc_auto::planning::OverlapFeature(*from.pnc_junction_);
  } else {
    pnc_junction_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::jmc_auto::planning::OverlapFeature(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_stop_sign()) {
    stop_sign_ = new ::jmc_auto::planning::OverlapFeature(*from.stop_sign_);
  } else {
    stop_sign_ = NULL;
  }
  if (from.has_yield_sign()) {
    yield_sign_ = new ::jmc_auto::planning::OverlapFeature(*from.yield_sign_);
  } else {
    yield_sign_ = NULL;
  }
  lane_turn_ = from.lane_turn_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PlanningTag)
}

void PlanningTag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clear_area_, 0, reinterpret_cast<char*>(&yield_sign_) -
    reinterpret_cast<char*>(&clear_area_) + sizeof(yield_sign_));
  lane_turn_ = 1;
}

PlanningTag::~PlanningTag() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PlanningTag)
  SharedDtor();
}

void PlanningTag::SharedDtor() {
  if (this != internal_default_instance()) {
    delete clear_area_;
  }
  if (this != internal_default_instance()) {
    delete crosswalk_;
  }
  if (this != internal_default_instance()) {
    delete pnc_junction_;
  }
  if (this != internal_default_instance()) {
    delete signal_;
  }
  if (this != internal_default_instance()) {
    delete stop_sign_;
  }
  if (this != internal_default_instance()) {
    delete yield_sign_;
  }
}

void PlanningTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningTag::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningTag& PlanningTag::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningTag* PlanningTag::New(::google::protobuf::Arena* arena) const {
  PlanningTag* n = new PlanningTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningTag::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PlanningTag)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_clear_area()) {
      GOOGLE_DCHECK(clear_area_ != NULL);
      clear_area_->::jmc_auto::planning::OverlapFeature::Clear();
    }
    if (has_crosswalk()) {
      GOOGLE_DCHECK(crosswalk_ != NULL);
      crosswalk_->::jmc_auto::planning::OverlapFeature::Clear();
    }
    if (has_pnc_junction()) {
      GOOGLE_DCHECK(pnc_junction_ != NULL);
      pnc_junction_->::jmc_auto::planning::OverlapFeature::Clear();
    }
    if (has_signal()) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->::jmc_auto::planning::OverlapFeature::Clear();
    }
    if (has_stop_sign()) {
      GOOGLE_DCHECK(stop_sign_ != NULL);
      stop_sign_->::jmc_auto::planning::OverlapFeature::Clear();
    }
    if (has_yield_sign()) {
      GOOGLE_DCHECK(yield_sign_ != NULL);
      yield_sign_->::jmc_auto::planning::OverlapFeature::Clear();
    }
    lane_turn_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PlanningTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Lane.LaneTurn lane_turn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Lane_LaneTurn_IsValid(value)) {
            set_lane_turn(static_cast< ::jmc_auto::hdmap::Lane_LaneTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OverlapFeature clear_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OverlapFeature crosswalk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OverlapFeature pnc_junction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pnc_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OverlapFeature signal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OverlapFeature stop_sign = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OverlapFeature yield_sign = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PlanningTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PlanningTag)
  return false;
#undef DO_
}

void PlanningTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PlanningTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Lane.LaneTurn lane_turn = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lane_turn(), output);
  }

  // optional .jmc_auto.planning.OverlapFeature clear_area = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clear_area_, output);
  }

  // optional .jmc_auto.planning.OverlapFeature crosswalk = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->crosswalk_, output);
  }

  // optional .jmc_auto.planning.OverlapFeature pnc_junction = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pnc_junction_, output);
  }

  // optional .jmc_auto.planning.OverlapFeature signal = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->signal_, output);
  }

  // optional .jmc_auto.planning.OverlapFeature stop_sign = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stop_sign_, output);
  }

  // optional .jmc_auto.planning.OverlapFeature yield_sign = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->yield_sign_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PlanningTag)
}

::google::protobuf::uint8* PlanningTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PlanningTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Lane.LaneTurn lane_turn = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lane_turn(), target);
  }

  // optional .jmc_auto.planning.OverlapFeature clear_area = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clear_area_, deterministic, target);
  }

  // optional .jmc_auto.planning.OverlapFeature crosswalk = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->crosswalk_, deterministic, target);
  }

  // optional .jmc_auto.planning.OverlapFeature pnc_junction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pnc_junction_, deterministic, target);
  }

  // optional .jmc_auto.planning.OverlapFeature signal = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->signal_, deterministic, target);
  }

  // optional .jmc_auto.planning.OverlapFeature stop_sign = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stop_sign_, deterministic, target);
  }

  // optional .jmc_auto.planning.OverlapFeature yield_sign = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->yield_sign_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PlanningTag)
  return target;
}

size_t PlanningTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PlanningTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .jmc_auto.planning.OverlapFeature clear_area = 2;
    if (has_clear_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clear_area_);
    }

    // optional .jmc_auto.planning.OverlapFeature crosswalk = 3;
    if (has_crosswalk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->crosswalk_);
    }

    // optional .jmc_auto.planning.OverlapFeature pnc_junction = 4;
    if (has_pnc_junction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pnc_junction_);
    }

    // optional .jmc_auto.planning.OverlapFeature signal = 5;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .jmc_auto.planning.OverlapFeature stop_sign = 6;
    if (has_stop_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_sign_);
    }

    // optional .jmc_auto.planning.OverlapFeature yield_sign = 7;
    if (has_yield_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->yield_sign_);
    }

    // optional .jmc_auto.hdmap.Lane.LaneTurn lane_turn = 1;
    if (has_lane_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_turn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PlanningTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PlanningTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PlanningTag)
    MergeFrom(*source);
  }
}

void PlanningTag::MergeFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PlanningTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_clear_area()->::jmc_auto::planning::OverlapFeature::MergeFrom(from.clear_area());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_crosswalk()->::jmc_auto::planning::OverlapFeature::MergeFrom(from.crosswalk());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pnc_junction()->::jmc_auto::planning::OverlapFeature::MergeFrom(from.pnc_junction());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_signal()->::jmc_auto::planning::OverlapFeature::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stop_sign()->::jmc_auto::planning::OverlapFeature::MergeFrom(from.stop_sign());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_yield_sign()->::jmc_auto::planning::OverlapFeature::MergeFrom(from.yield_sign());
    }
    if (cached_has_bits & 0x00000040u) {
      lane_turn_ = from.lane_turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PlanningTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningTag::CopyFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PlanningTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTag::IsInitialized() const {
  return true;
}

void PlanningTag::Swap(PlanningTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningTag::InternalSwap(PlanningTag* other) {
  std::swap(clear_area_, other->clear_area_);
  std::swap(crosswalk_, other->crosswalk_);
  std::swap(pnc_junction_, other->pnc_junction_);
  std::swap(signal_, other->signal_);
  std::swap(stop_sign_, other->stop_sign_);
  std::swap(yield_sign_, other->yield_sign_);
  std::swap(lane_turn_, other->lane_turn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningTag::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningTag

// optional .jmc_auto.hdmap.Lane.LaneTurn lane_turn = 1;
bool PlanningTag::has_lane_turn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlanningTag::set_has_lane_turn() {
  _has_bits_[0] |= 0x00000040u;
}
void PlanningTag::clear_has_lane_turn() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlanningTag::clear_lane_turn() {
  lane_turn_ = 1;
  clear_has_lane_turn();
}
::jmc_auto::hdmap::Lane_LaneTurn PlanningTag::lane_turn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.lane_turn)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneTurn >(lane_turn_);
}
void PlanningTag::set_lane_turn(::jmc_auto::hdmap::Lane_LaneTurn value) {
  assert(::jmc_auto::hdmap::Lane_LaneTurn_IsValid(value));
  set_has_lane_turn();
  lane_turn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlanningTag.lane_turn)
}

// optional .jmc_auto.planning.OverlapFeature clear_area = 2;
bool PlanningTag::has_clear_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningTag::set_has_clear_area() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningTag::clear_has_clear_area() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningTag::clear_clear_area() {
  if (clear_area_ != NULL) clear_area_->::jmc_auto::planning::OverlapFeature::Clear();
  clear_has_clear_area();
}
const ::jmc_auto::planning::OverlapFeature& PlanningTag::clear_area() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.clear_area)
  return clear_area_ != NULL ? *clear_area_
                         : *::jmc_auto::planning::OverlapFeature::internal_default_instance();
}
::jmc_auto::planning::OverlapFeature* PlanningTag::mutable_clear_area() {
  set_has_clear_area();
  if (clear_area_ == NULL) {
    clear_area_ = new ::jmc_auto::planning::OverlapFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTag.clear_area)
  return clear_area_;
}
::jmc_auto::planning::OverlapFeature* PlanningTag::release_clear_area() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTag.clear_area)
  clear_has_clear_area();
  ::jmc_auto::planning::OverlapFeature* temp = clear_area_;
  clear_area_ = NULL;
  return temp;
}
void PlanningTag::set_allocated_clear_area(::jmc_auto::planning::OverlapFeature* clear_area) {
  delete clear_area_;
  clear_area_ = clear_area;
  if (clear_area) {
    set_has_clear_area();
  } else {
    clear_has_clear_area();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTag.clear_area)
}

// optional .jmc_auto.planning.OverlapFeature crosswalk = 3;
bool PlanningTag::has_crosswalk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningTag::set_has_crosswalk() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningTag::clear_has_crosswalk() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningTag::clear_crosswalk() {
  if (crosswalk_ != NULL) crosswalk_->::jmc_auto::planning::OverlapFeature::Clear();
  clear_has_crosswalk();
}
const ::jmc_auto::planning::OverlapFeature& PlanningTag::crosswalk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.crosswalk)
  return crosswalk_ != NULL ? *crosswalk_
                         : *::jmc_auto::planning::OverlapFeature::internal_default_instance();
}
::jmc_auto::planning::OverlapFeature* PlanningTag::mutable_crosswalk() {
  set_has_crosswalk();
  if (crosswalk_ == NULL) {
    crosswalk_ = new ::jmc_auto::planning::OverlapFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTag.crosswalk)
  return crosswalk_;
}
::jmc_auto::planning::OverlapFeature* PlanningTag::release_crosswalk() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTag.crosswalk)
  clear_has_crosswalk();
  ::jmc_auto::planning::OverlapFeature* temp = crosswalk_;
  crosswalk_ = NULL;
  return temp;
}
void PlanningTag::set_allocated_crosswalk(::jmc_auto::planning::OverlapFeature* crosswalk) {
  delete crosswalk_;
  crosswalk_ = crosswalk;
  if (crosswalk) {
    set_has_crosswalk();
  } else {
    clear_has_crosswalk();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTag.crosswalk)
}

// optional .jmc_auto.planning.OverlapFeature pnc_junction = 4;
bool PlanningTag::has_pnc_junction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlanningTag::set_has_pnc_junction() {
  _has_bits_[0] |= 0x00000004u;
}
void PlanningTag::clear_has_pnc_junction() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningTag::clear_pnc_junction() {
  if (pnc_junction_ != NULL) pnc_junction_->::jmc_auto::planning::OverlapFeature::Clear();
  clear_has_pnc_junction();
}
const ::jmc_auto::planning::OverlapFeature& PlanningTag::pnc_junction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.pnc_junction)
  return pnc_junction_ != NULL ? *pnc_junction_
                         : *::jmc_auto::planning::OverlapFeature::internal_default_instance();
}
::jmc_auto::planning::OverlapFeature* PlanningTag::mutable_pnc_junction() {
  set_has_pnc_junction();
  if (pnc_junction_ == NULL) {
    pnc_junction_ = new ::jmc_auto::planning::OverlapFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTag.pnc_junction)
  return pnc_junction_;
}
::jmc_auto::planning::OverlapFeature* PlanningTag::release_pnc_junction() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTag.pnc_junction)
  clear_has_pnc_junction();
  ::jmc_auto::planning::OverlapFeature* temp = pnc_junction_;
  pnc_junction_ = NULL;
  return temp;
}
void PlanningTag::set_allocated_pnc_junction(::jmc_auto::planning::OverlapFeature* pnc_junction) {
  delete pnc_junction_;
  pnc_junction_ = pnc_junction;
  if (pnc_junction) {
    set_has_pnc_junction();
  } else {
    clear_has_pnc_junction();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTag.pnc_junction)
}

// optional .jmc_auto.planning.OverlapFeature signal = 5;
bool PlanningTag::has_signal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlanningTag::set_has_signal() {
  _has_bits_[0] |= 0x00000008u;
}
void PlanningTag::clear_has_signal() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningTag::clear_signal() {
  if (signal_ != NULL) signal_->::jmc_auto::planning::OverlapFeature::Clear();
  clear_has_signal();
}
const ::jmc_auto::planning::OverlapFeature& PlanningTag::signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.signal)
  return signal_ != NULL ? *signal_
                         : *::jmc_auto::planning::OverlapFeature::internal_default_instance();
}
::jmc_auto::planning::OverlapFeature* PlanningTag::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::jmc_auto::planning::OverlapFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTag.signal)
  return signal_;
}
::jmc_auto::planning::OverlapFeature* PlanningTag::release_signal() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTag.signal)
  clear_has_signal();
  ::jmc_auto::planning::OverlapFeature* temp = signal_;
  signal_ = NULL;
  return temp;
}
void PlanningTag::set_allocated_signal(::jmc_auto::planning::OverlapFeature* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTag.signal)
}

// optional .jmc_auto.planning.OverlapFeature stop_sign = 6;
bool PlanningTag::has_stop_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlanningTag::set_has_stop_sign() {
  _has_bits_[0] |= 0x00000010u;
}
void PlanningTag::clear_has_stop_sign() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlanningTag::clear_stop_sign() {
  if (stop_sign_ != NULL) stop_sign_->::jmc_auto::planning::OverlapFeature::Clear();
  clear_has_stop_sign();
}
const ::jmc_auto::planning::OverlapFeature& PlanningTag::stop_sign() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.stop_sign)
  return stop_sign_ != NULL ? *stop_sign_
                         : *::jmc_auto::planning::OverlapFeature::internal_default_instance();
}
::jmc_auto::planning::OverlapFeature* PlanningTag::mutable_stop_sign() {
  set_has_stop_sign();
  if (stop_sign_ == NULL) {
    stop_sign_ = new ::jmc_auto::planning::OverlapFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTag.stop_sign)
  return stop_sign_;
}
::jmc_auto::planning::OverlapFeature* PlanningTag::release_stop_sign() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTag.stop_sign)
  clear_has_stop_sign();
  ::jmc_auto::planning::OverlapFeature* temp = stop_sign_;
  stop_sign_ = NULL;
  return temp;
}
void PlanningTag::set_allocated_stop_sign(::jmc_auto::planning::OverlapFeature* stop_sign) {
  delete stop_sign_;
  stop_sign_ = stop_sign;
  if (stop_sign) {
    set_has_stop_sign();
  } else {
    clear_has_stop_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTag.stop_sign)
}

// optional .jmc_auto.planning.OverlapFeature yield_sign = 7;
bool PlanningTag::has_yield_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlanningTag::set_has_yield_sign() {
  _has_bits_[0] |= 0x00000020u;
}
void PlanningTag::clear_has_yield_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlanningTag::clear_yield_sign() {
  if (yield_sign_ != NULL) yield_sign_->::jmc_auto::planning::OverlapFeature::Clear();
  clear_has_yield_sign();
}
const ::jmc_auto::planning::OverlapFeature& PlanningTag::yield_sign() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTag.yield_sign)
  return yield_sign_ != NULL ? *yield_sign_
                         : *::jmc_auto::planning::OverlapFeature::internal_default_instance();
}
::jmc_auto::planning::OverlapFeature* PlanningTag::mutable_yield_sign() {
  set_has_yield_sign();
  if (yield_sign_ == NULL) {
    yield_sign_ = new ::jmc_auto::planning::OverlapFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTag.yield_sign)
  return yield_sign_;
}
::jmc_auto::planning::OverlapFeature* PlanningTag::release_yield_sign() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTag.yield_sign)
  clear_has_yield_sign();
  ::jmc_auto::planning::OverlapFeature* temp = yield_sign_;
  yield_sign_ = NULL;
  return temp;
}
void PlanningTag::set_allocated_yield_sign(::jmc_auto::planning::OverlapFeature* yield_sign) {
  delete yield_sign_;
  yield_sign_ = yield_sign;
  if (yield_sign) {
    set_has_yield_sign();
  } else {
    clear_has_yield_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTag.yield_sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisFeature::kMessageTimestampSecFieldNumber;
const int ChassisFeature::kSpeedMpsFieldNumber;
const int ChassisFeature::kThrottlePercentageFieldNumber;
const int ChassisFeature::kBrakePercentageFieldNumber;
const int ChassisFeature::kSteeringPercentageFieldNumber;
const int ChassisFeature::kGearLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisFeature::ChassisFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ChassisFeature)
}
ChassisFeature::ChassisFeature(const ChassisFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    reinterpret_cast<char*>(&gear_location_) -
    reinterpret_cast<char*>(&message_timestamp_sec_) + sizeof(gear_location_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ChassisFeature)
}

void ChassisFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&message_timestamp_sec_, 0, reinterpret_cast<char*>(&gear_location_) -
    reinterpret_cast<char*>(&message_timestamp_sec_) + sizeof(gear_location_));
}

ChassisFeature::~ChassisFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ChassisFeature)
  SharedDtor();
}

void ChassisFeature::SharedDtor() {
}

void ChassisFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisFeature& ChassisFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChassisFeature* ChassisFeature::New(::google::protobuf::Arena* arena) const {
  ChassisFeature* n = new ChassisFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ChassisFeature)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&message_timestamp_sec_, 0, reinterpret_cast<char*>(&gear_location_) -
      reinterpret_cast<char*>(&message_timestamp_sec_) + sizeof(gear_location_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ChassisFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_speed_mps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ChassisFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ChassisFeature)
  return false;
#undef DO_
}

void ChassisFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ChassisFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // optional float speed_mps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_mps(), output);
  }

  // optional float throttle_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->steering_percentage(), output);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gear_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ChassisFeature)
}

::google::protobuf::uint8* ChassisFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ChassisFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // optional float speed_mps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_mps(), target);
  }

  // optional float throttle_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->steering_percentage(), target);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gear_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ChassisFeature)
  return target;
}

size_t ChassisFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ChassisFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double message_timestamp_sec = 1;
    if (has_message_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional float speed_mps = 2;
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 3;
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 4;
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 5;
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

    // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 6;
    if (has_gear_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ChassisFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ChassisFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ChassisFeature)
    MergeFrom(*source);
  }
}

void ChassisFeature::MergeFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ChassisFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00000004u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ChassisFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisFeature::CopyFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ChassisFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisFeature::IsInitialized() const {
  return true;
}

void ChassisFeature::Swap(ChassisFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisFeature::InternalSwap(ChassisFeature* other) {
  std::swap(message_timestamp_sec_, other->message_timestamp_sec_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisFeature

// optional double message_timestamp_sec = 1;
bool ChassisFeature::has_message_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChassisFeature::set_has_message_timestamp_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void ChassisFeature::clear_has_message_timestamp_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChassisFeature::clear_message_timestamp_sec() {
  message_timestamp_sec_ = 0;
  clear_has_message_timestamp_sec();
}
double ChassisFeature::message_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ChassisFeature.message_timestamp_sec)
  return message_timestamp_sec_;
}
void ChassisFeature::set_message_timestamp_sec(double value) {
  set_has_message_timestamp_sec();
  message_timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ChassisFeature.message_timestamp_sec)
}

// optional float speed_mps = 2;
bool ChassisFeature::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChassisFeature::set_has_speed_mps() {
  _has_bits_[0] |= 0x00000002u;
}
void ChassisFeature::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChassisFeature::clear_speed_mps() {
  speed_mps_ = 0;
  clear_has_speed_mps();
}
float ChassisFeature::speed_mps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ChassisFeature.speed_mps)
  return speed_mps_;
}
void ChassisFeature::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ChassisFeature.speed_mps)
}

// optional float throttle_percentage = 3;
bool ChassisFeature::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChassisFeature::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00000004u;
}
void ChassisFeature::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChassisFeature::clear_throttle_percentage() {
  throttle_percentage_ = 0;
  clear_has_throttle_percentage();
}
float ChassisFeature::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ChassisFeature.throttle_percentage)
  return throttle_percentage_;
}
void ChassisFeature::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ChassisFeature.throttle_percentage)
}

// optional float brake_percentage = 4;
bool ChassisFeature::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChassisFeature::set_has_brake_percentage() {
  _has_bits_[0] |= 0x00000008u;
}
void ChassisFeature::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChassisFeature::clear_brake_percentage() {
  brake_percentage_ = 0;
  clear_has_brake_percentage();
}
float ChassisFeature::brake_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ChassisFeature.brake_percentage)
  return brake_percentage_;
}
void ChassisFeature::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ChassisFeature.brake_percentage)
}

// optional float steering_percentage = 5;
bool ChassisFeature::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChassisFeature::set_has_steering_percentage() {
  _has_bits_[0] |= 0x00000010u;
}
void ChassisFeature::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChassisFeature::clear_steering_percentage() {
  steering_percentage_ = 0;
  clear_has_steering_percentage();
}
float ChassisFeature::steering_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ChassisFeature.steering_percentage)
  return steering_percentage_;
}
void ChassisFeature::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ChassisFeature.steering_percentage)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 6;
bool ChassisFeature::has_gear_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChassisFeature::set_has_gear_location() {
  _has_bits_[0] |= 0x00000020u;
}
void ChassisFeature::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChassisFeature::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
::jmc_auto::canbus::Chassis_GearPosition ChassisFeature::gear_location() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ChassisFeature.gear_location)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_location_);
}
void ChassisFeature::set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ChassisFeature.gear_location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationFeature::kMessageTimestampSecFieldNumber;
const int LocalizationFeature::kPositionFieldNumber;
const int LocalizationFeature::kHeadingFieldNumber;
const int LocalizationFeature::kLinearVelocityFieldNumber;
const int LocalizationFeature::kLinearAccelerationFieldNumber;
const int LocalizationFeature::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationFeature::LocalizationFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.LocalizationFeature)
}
LocalizationFeature::LocalizationFeature(const LocalizationFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::PointENU(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::jmc_auto::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::jmc_auto::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::jmc_auto::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&message_timestamp_sec_) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.LocalizationFeature)
}

void LocalizationFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&position_) + sizeof(heading_));
}

LocalizationFeature::~LocalizationFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.LocalizationFeature)
  SharedDtor();
}

void LocalizationFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete linear_velocity_;
  }
  if (this != internal_default_instance()) {
    delete linear_acceleration_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_;
  }
}

void LocalizationFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationFeature& LocalizationFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationFeature* LocalizationFeature::New(::google::protobuf::Arena* arena) const {
  LocalizationFeature* n = new LocalizationFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.LocalizationFeature)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::jmc_auto::common::PointENU::Clear();
    }
    if (has_linear_velocity()) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_linear_acceleration()) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_angular_velocity()) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->::jmc_auto::common::Point3D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&message_timestamp_sec_, 0, reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&message_timestamp_sec_) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.LocalizationFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D linear_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D linear_acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D angular_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.LocalizationFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.LocalizationFeature)
  return false;
#undef DO_
}

void LocalizationFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.LocalizationFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // optional .jmc_auto.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional .jmc_auto.common.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->linear_velocity_, output);
  }

  // optional .jmc_auto.common.Point3D linear_acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->linear_acceleration_, output);
  }

  // optional .jmc_auto.common.Point3D angular_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->angular_velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.LocalizationFeature)
}

::google::protobuf::uint8* LocalizationFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.LocalizationFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // optional .jmc_auto.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional .jmc_auto.common.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->linear_velocity_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D linear_acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->linear_acceleration_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D angular_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->angular_velocity_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.LocalizationFeature)
  return target;
}

size_t LocalizationFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.LocalizationFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.common.PointENU position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .jmc_auto.common.Point3D linear_velocity = 4;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_);
    }

    // optional .jmc_auto.common.Point3D linear_acceleration = 5;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_);
    }

    // optional .jmc_auto.common.Point3D angular_velocity = 6;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_);
    }

    // optional double message_timestamp_sec = 1;
    if (has_message_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.LocalizationFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.LocalizationFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.LocalizationFeature)
    MergeFrom(*source);
  }
}

void LocalizationFeature::MergeFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.LocalizationFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::jmc_auto::common::PointENU::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_linear_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_acceleration()->::jmc_auto::common::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angular_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.LocalizationFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationFeature::CopyFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.LocalizationFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationFeature::IsInitialized() const {
  return true;
}

void LocalizationFeature::Swap(LocalizationFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationFeature::InternalSwap(LocalizationFeature* other) {
  std::swap(position_, other->position_);
  std::swap(linear_velocity_, other->linear_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(message_timestamp_sec_, other->message_timestamp_sec_);
  std::swap(heading_, other->heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationFeature

// optional double message_timestamp_sec = 1;
bool LocalizationFeature::has_message_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalizationFeature::set_has_message_timestamp_sec() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalizationFeature::clear_has_message_timestamp_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalizationFeature::clear_message_timestamp_sec() {
  message_timestamp_sec_ = 0;
  clear_has_message_timestamp_sec();
}
double LocalizationFeature::message_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LocalizationFeature.message_timestamp_sec)
  return message_timestamp_sec_;
}
void LocalizationFeature::set_message_timestamp_sec(double value) {
  set_has_message_timestamp_sec();
  message_timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LocalizationFeature.message_timestamp_sec)
}

// optional .jmc_auto.common.PointENU position = 2;
bool LocalizationFeature::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationFeature::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationFeature::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationFeature::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::PointENU::Clear();
  clear_has_position();
}
const ::jmc_auto::common::PointENU& LocalizationFeature::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LocalizationFeature.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* LocalizationFeature::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LocalizationFeature.position)
  return position_;
}
::jmc_auto::common::PointENU* LocalizationFeature::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LocalizationFeature.position)
  clear_has_position();
  ::jmc_auto::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
void LocalizationFeature::set_allocated_position(::jmc_auto::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LocalizationFeature.position)
}

// optional double heading = 3;
bool LocalizationFeature::has_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LocalizationFeature::set_has_heading() {
  _has_bits_[0] |= 0x00000020u;
}
void LocalizationFeature::clear_has_heading() {
  _has_bits_[0] &= ~0x00000020u;
}
void LocalizationFeature::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double LocalizationFeature::heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LocalizationFeature.heading)
  return heading_;
}
void LocalizationFeature::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LocalizationFeature.heading)
}

// optional .jmc_auto.common.Point3D linear_velocity = 4;
bool LocalizationFeature::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationFeature::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationFeature::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationFeature::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_velocity();
}
const ::jmc_auto::common::Point3D& LocalizationFeature::linear_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LocalizationFeature.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* LocalizationFeature::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LocalizationFeature.linear_velocity)
  return linear_velocity_;
}
::jmc_auto::common::Point3D* LocalizationFeature::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LocalizationFeature.linear_velocity)
  clear_has_linear_velocity();
  ::jmc_auto::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
void LocalizationFeature::set_allocated_linear_velocity(::jmc_auto::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LocalizationFeature.linear_velocity)
}

// optional .jmc_auto.common.Point3D linear_acceleration = 5;
bool LocalizationFeature::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationFeature::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationFeature::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationFeature::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_acceleration();
}
const ::jmc_auto::common::Point3D& LocalizationFeature::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LocalizationFeature.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* LocalizationFeature::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LocalizationFeature.linear_acceleration)
  return linear_acceleration_;
}
::jmc_auto::common::Point3D* LocalizationFeature::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LocalizationFeature.linear_acceleration)
  clear_has_linear_acceleration();
  ::jmc_auto::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void LocalizationFeature::set_allocated_linear_acceleration(::jmc_auto::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LocalizationFeature.linear_acceleration)
}

// optional .jmc_auto.common.Point3D angular_velocity = 6;
bool LocalizationFeature::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationFeature::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationFeature::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationFeature::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_angular_velocity();
}
const ::jmc_auto::common::Point3D& LocalizationFeature::angular_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LocalizationFeature.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* LocalizationFeature::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LocalizationFeature.angular_velocity)
  return angular_velocity_;
}
::jmc_auto::common::Point3D* LocalizationFeature::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LocalizationFeature.angular_velocity)
  clear_has_angular_velocity();
  ::jmc_auto::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void LocalizationFeature::set_allocated_angular_velocity(::jmc_auto::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LocalizationFeature.angular_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointFeature::kXFieldNumber;
const int PathPointFeature::kYFieldNumber;
const int PathPointFeature::kZFieldNumber;
const int PathPointFeature::kThetaFieldNumber;
const int PathPointFeature::kSFieldNumber;
const int PathPointFeature::kLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointFeature::PathPointFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PathPointFeature)
}
PathPointFeature::PathPointFeature(const PathPointFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PathPointFeature)
}

void PathPointFeature::SharedCtor() {
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_) + sizeof(s_));
}

PathPointFeature::~PathPointFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PathPointFeature)
  SharedDtor();
}

void PathPointFeature::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PathPointFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPointFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPointFeature& PathPointFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathPointFeature* PathPointFeature::New(::google::protobuf::Arena* arena) const {
  PathPointFeature* n = new PathPointFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PathPointFeature)
  if (has_lane_id()) {
    GOOGLE_DCHECK(!lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lane_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_) + sizeof(s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPointFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PathPointFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.PathPointFeature.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PathPointFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PathPointFeature)
  return false;
#undef DO_
}

void PathPointFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PathPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double s = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->s(), output);
  }

  // optional string lane_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.PathPointFeature.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lane_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PathPointFeature)
}

::google::protobuf::uint8* PathPointFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PathPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double s = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->s(), target);
  }

  // optional string lane_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.PathPointFeature.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lane_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PathPointFeature)
  return target;
}

size_t PathPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PathPointFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string lane_id = 6;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double s = 5;
    if (has_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPointFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PathPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PathPointFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PathPointFeature)
    MergeFrom(*source);
  }
}

void PathPointFeature::MergeFrom(const PathPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PathPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPointFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PathPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointFeature::CopyFrom(const PathPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PathPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointFeature::IsInitialized() const {
  return true;
}

void PathPointFeature::Swap(PathPointFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointFeature::InternalSwap(PathPointFeature* other) {
  lane_id_.Swap(&other->lane_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(theta_, other->theta_);
  std::swap(s_, other->s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPointFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPointFeature

// optional double x = 1;
bool PathPointFeature::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPointFeature::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPointFeature::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPointFeature::clear_x() {
  x_ = 0;
  clear_has_x();
}
double PathPointFeature::x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathPointFeature.x)
  return x_;
}
void PathPointFeature::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathPointFeature.x)
}

// optional double y = 2;
bool PathPointFeature::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathPointFeature::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void PathPointFeature::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathPointFeature::clear_y() {
  y_ = 0;
  clear_has_y();
}
double PathPointFeature::y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathPointFeature.y)
  return y_;
}
void PathPointFeature::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathPointFeature.y)
}

// optional double z = 3;
bool PathPointFeature::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathPointFeature::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
void PathPointFeature::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathPointFeature::clear_z() {
  z_ = 0;
  clear_has_z();
}
double PathPointFeature::z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathPointFeature.z)
  return z_;
}
void PathPointFeature::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathPointFeature.z)
}

// optional double theta = 4;
bool PathPointFeature::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PathPointFeature::set_has_theta() {
  _has_bits_[0] |= 0x00000010u;
}
void PathPointFeature::clear_has_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
void PathPointFeature::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PathPointFeature::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathPointFeature.theta)
  return theta_;
}
void PathPointFeature::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathPointFeature.theta)
}

// optional double s = 5;
bool PathPointFeature::has_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PathPointFeature::set_has_s() {
  _has_bits_[0] |= 0x00000020u;
}
void PathPointFeature::clear_has_s() {
  _has_bits_[0] &= ~0x00000020u;
}
void PathPointFeature::clear_s() {
  s_ = 0;
  clear_has_s();
}
double PathPointFeature::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathPointFeature.s)
  return s_;
}
void PathPointFeature::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathPointFeature.s)
}

// optional string lane_id = 6;
bool PathPointFeature::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPointFeature::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPointFeature::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointFeature::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
const ::std::string& PathPointFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PathPointFeature.lane_id)
  return lane_id_.GetNoArena();
}
void PathPointFeature::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PathPointFeature.lane_id)
}
#if LANG_CXX11
void PathPointFeature::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.PathPointFeature.lane_id)
}
#endif
void PathPointFeature::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.PathPointFeature.lane_id)
}
void PathPointFeature::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.PathPointFeature.lane_id)
}
::std::string* PathPointFeature::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PathPointFeature.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PathPointFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PathPointFeature.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PathPointFeature::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PathPointFeature.lane_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointFeature::kPathPointFieldNumber;
const int TrajectoryPointFeature::kVFieldNumber;
const int TrajectoryPointFeature::kAFieldNumber;
const int TrajectoryPointFeature::kRelativeTimeFieldNumber;
const int TrajectoryPointFeature::kGaussianInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointFeature::TrajectoryPointFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrajectoryPointFeature)
}
TrajectoryPointFeature::TrajectoryPointFeature(const TrajectoryPointFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_point()) {
    path_point_ = new ::jmc_auto::planning::PathPointFeature(*from.path_point_);
  } else {
    path_point_ = NULL;
  }
  if (from.has_gaussian_info()) {
    gaussian_info_ = new ::jmc_auto::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = NULL;
  }
  ::memcpy(&v_, &from.v_,
    reinterpret_cast<char*>(&relative_time_) -
    reinterpret_cast<char*>(&v_) + sizeof(relative_time_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrajectoryPointFeature)
}

void TrajectoryPointFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_point_, 0, reinterpret_cast<char*>(&relative_time_) -
    reinterpret_cast<char*>(&path_point_) + sizeof(relative_time_));
}

TrajectoryPointFeature::~TrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrajectoryPointFeature)
  SharedDtor();
}

void TrajectoryPointFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete path_point_;
  }
  if (this != internal_default_instance()) {
    delete gaussian_info_;
  }
}

void TrajectoryPointFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPointFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPointFeature& TrajectoryPointFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryPointFeature* TrajectoryPointFeature::New(::google::protobuf::Arena* arena) const {
  TrajectoryPointFeature* n = new TrajectoryPointFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrajectoryPointFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path_point()) {
      GOOGLE_DCHECK(path_point_ != NULL);
      path_point_->::jmc_auto::planning::PathPointFeature::Clear();
    }
    if (has_gaussian_info()) {
      GOOGLE_DCHECK(gaussian_info_ != NULL);
      gaussian_info_->::jmc_auto::common::GaussianInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&v_, 0, reinterpret_cast<char*>(&relative_time_) -
      reinterpret_cast<char*>(&v_) + sizeof(relative_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPointFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrajectoryPointFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.PathPointFeature path_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_relative_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.GaussianInfo gaussian_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaussian_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrajectoryPointFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrajectoryPointFeature)
  return false;
#undef DO_
}

void TrajectoryPointFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.PathPointFeature path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_point_, output);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  // optional .jmc_auto.common.GaussianInfo gaussian_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gaussian_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrajectoryPointFeature)
}

::google::protobuf::uint8* TrajectoryPointFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.PathPointFeature path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_point_, deterministic, target);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  // optional .jmc_auto.common.GaussianInfo gaussian_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gaussian_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrajectoryPointFeature)
  return target;
}

size_t TrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrajectoryPointFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.planning.PathPointFeature path_point = 1;
    if (has_path_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_point_);
    }

    // optional .jmc_auto.common.GaussianInfo gaussian_info = 5;
    if (has_gaussian_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaussian_info_);
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPointFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrajectoryPointFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrajectoryPointFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointFeature::MergeFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_point()->::jmc_auto::planning::PathPointFeature::MergeFrom(from.path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gaussian_info()->::jmc_auto::common::GaussianInfo::MergeFrom(from.gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_time_ = from.relative_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPointFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointFeature::CopyFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointFeature::Swap(TrajectoryPointFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointFeature::InternalSwap(TrajectoryPointFeature* other) {
  std::swap(path_point_, other->path_point_);
  std::swap(gaussian_info_, other->gaussian_info_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPointFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPointFeature

// optional .jmc_auto.planning.PathPointFeature path_point = 1;
bool TrajectoryPointFeature::has_path_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPointFeature::set_has_path_point() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPointFeature::clear_has_path_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPointFeature::clear_path_point() {
  if (path_point_ != NULL) path_point_->::jmc_auto::planning::PathPointFeature::Clear();
  clear_has_path_point();
}
const ::jmc_auto::planning::PathPointFeature& TrajectoryPointFeature::path_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPointFeature.path_point)
  return path_point_ != NULL ? *path_point_
                         : *::jmc_auto::planning::PathPointFeature::internal_default_instance();
}
::jmc_auto::planning::PathPointFeature* TrajectoryPointFeature::mutable_path_point() {
  set_has_path_point();
  if (path_point_ == NULL) {
    path_point_ = new ::jmc_auto::planning::PathPointFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrajectoryPointFeature.path_point)
  return path_point_;
}
::jmc_auto::planning::PathPointFeature* TrajectoryPointFeature::release_path_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrajectoryPointFeature.path_point)
  clear_has_path_point();
  ::jmc_auto::planning::PathPointFeature* temp = path_point_;
  path_point_ = NULL;
  return temp;
}
void TrajectoryPointFeature::set_allocated_path_point(::jmc_auto::planning::PathPointFeature* path_point) {
  delete path_point_;
  path_point_ = path_point;
  if (path_point) {
    set_has_path_point();
  } else {
    clear_has_path_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrajectoryPointFeature.path_point)
}

// optional double v = 2;
bool TrajectoryPointFeature::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryPointFeature::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryPointFeature::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryPointFeature::clear_v() {
  v_ = 0;
  clear_has_v();
}
double TrajectoryPointFeature::v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPointFeature.v)
  return v_;
}
void TrajectoryPointFeature::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPointFeature.v)
}

// optional double a = 3;
bool TrajectoryPointFeature::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrajectoryPointFeature::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void TrajectoryPointFeature::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrajectoryPointFeature::clear_a() {
  a_ = 0;
  clear_has_a();
}
double TrajectoryPointFeature::a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPointFeature.a)
  return a_;
}
void TrajectoryPointFeature::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPointFeature.a)
}

// optional double relative_time = 4;
bool TrajectoryPointFeature::has_relative_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrajectoryPointFeature::set_has_relative_time() {
  _has_bits_[0] |= 0x00000010u;
}
void TrajectoryPointFeature::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrajectoryPointFeature::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
double TrajectoryPointFeature::relative_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPointFeature.relative_time)
  return relative_time_;
}
void TrajectoryPointFeature::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPointFeature.relative_time)
}

// optional .jmc_auto.common.GaussianInfo gaussian_info = 5;
bool TrajectoryPointFeature::has_gaussian_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPointFeature::set_has_gaussian_info() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPointFeature::clear_has_gaussian_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPointFeature::clear_gaussian_info() {
  if (gaussian_info_ != NULL) gaussian_info_->::jmc_auto::common::GaussianInfo::Clear();
  clear_has_gaussian_info();
}
const ::jmc_auto::common::GaussianInfo& TrajectoryPointFeature::gaussian_info() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPointFeature.gaussian_info)
  return gaussian_info_ != NULL ? *gaussian_info_
                         : *::jmc_auto::common::GaussianInfo::internal_default_instance();
}
::jmc_auto::common::GaussianInfo* TrajectoryPointFeature::mutable_gaussian_info() {
  set_has_gaussian_info();
  if (gaussian_info_ == NULL) {
    gaussian_info_ = new ::jmc_auto::common::GaussianInfo;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrajectoryPointFeature.gaussian_info)
  return gaussian_info_;
}
::jmc_auto::common::GaussianInfo* TrajectoryPointFeature::release_gaussian_info() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrajectoryPointFeature.gaussian_info)
  clear_has_gaussian_info();
  ::jmc_auto::common::GaussianInfo* temp = gaussian_info_;
  gaussian_info_ = NULL;
  return temp;
}
void TrajectoryPointFeature::set_allocated_gaussian_info(::jmc_auto::common::GaussianInfo* gaussian_info) {
  delete gaussian_info_;
  gaussian_info_ = gaussian_info;
  if (gaussian_info) {
    set_has_gaussian_info();
  } else {
    clear_has_gaussian_info();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrajectoryPointFeature.gaussian_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPoint::kTimestampSecFieldNumber;
const int TrajectoryPoint::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_point()) {
    trajectory_point_ = new ::jmc_auto::planning::TrajectoryPointFeature(*from.trajectory_point_);
  } else {
    trajectory_point_ = NULL;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trajectory_point_, 0, reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&trajectory_point_) + sizeof(timestamp_sec_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete trajectory_point_;
  }
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryPoint* TrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  TrajectoryPoint* n = new TrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrajectoryPoint)
  if (has_trajectory_point()) {
    GOOGLE_DCHECK(trajectory_point_ != NULL);
    trajectory_point_->::jmc_auto::planning::TrajectoryPointFeature::Clear();
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_point_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_point_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 2;
    if (has_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory_point()->::jmc_auto::planning::TrajectoryPointFeature::MergeFrom(from.trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  std::swap(trajectory_point_, other->trajectory_point_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPoint

// optional double timestamp_sec = 1;
bool TrajectoryPoint::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPoint::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPoint::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPoint::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
double TrajectoryPoint::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPoint.timestamp_sec)
  return timestamp_sec_;
}
void TrajectoryPoint::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPoint.timestamp_sec)
}

// optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 2;
bool TrajectoryPoint::has_trajectory_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPoint::set_has_trajectory_point() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPoint::clear_has_trajectory_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPoint::clear_trajectory_point() {
  if (trajectory_point_ != NULL) trajectory_point_->::jmc_auto::planning::TrajectoryPointFeature::Clear();
  clear_has_trajectory_point();
}
const ::jmc_auto::planning::TrajectoryPointFeature& TrajectoryPoint::trajectory_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPoint.trajectory_point)
  return trajectory_point_ != NULL ? *trajectory_point_
                         : *::jmc_auto::planning::TrajectoryPointFeature::internal_default_instance();
}
::jmc_auto::planning::TrajectoryPointFeature* TrajectoryPoint::mutable_trajectory_point() {
  set_has_trajectory_point();
  if (trajectory_point_ == NULL) {
    trajectory_point_ = new ::jmc_auto::planning::TrajectoryPointFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrajectoryPoint.trajectory_point)
  return trajectory_point_;
}
::jmc_auto::planning::TrajectoryPointFeature* TrajectoryPoint::release_trajectory_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrajectoryPoint.trajectory_point)
  clear_has_trajectory_point();
  ::jmc_auto::planning::TrajectoryPointFeature* temp = trajectory_point_;
  trajectory_point_ = NULL;
  return temp;
}
void TrajectoryPoint::set_allocated_trajectory_point(::jmc_auto::planning::TrajectoryPointFeature* trajectory_point) {
  delete trajectory_point_;
  trajectory_point_ = trajectory_point;
  if (trajectory_point) {
    set_has_trajectory_point();
  } else {
    clear_has_trajectory_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrajectoryPoint.trajectory_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacleFeature::kTimestampSecFieldNumber;
const int PerceptionObstacleFeature::kPositionFieldNumber;
const int PerceptionObstacleFeature::kThetaFieldNumber;
const int PerceptionObstacleFeature::kVelocityFieldNumber;
const int PerceptionObstacleFeature::kAccelerationFieldNumber;
const int PerceptionObstacleFeature::kPolygonPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacleFeature::PerceptionObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PerceptionObstacleFeature)
}
PerceptionObstacleFeature::PerceptionObstacleFeature(const PerceptionObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::jmc_auto::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::jmc_auto::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&timestamp_sec_) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PerceptionObstacleFeature)
}

void PerceptionObstacleFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&position_) + sizeof(theta_));
}

PerceptionObstacleFeature::~PerceptionObstacleFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PerceptionObstacleFeature)
  SharedDtor();
}

void PerceptionObstacleFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
}

void PerceptionObstacleFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacleFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacleFeature& PerceptionObstacleFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacleFeature* PerceptionObstacleFeature::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacleFeature* n = new PerceptionObstacleFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PerceptionObstacleFeature)
  polygon_point_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_acceleration()) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->::jmc_auto::common::Point3D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&timestamp_sec_, 0, reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&timestamp_sec_) + sizeof(theta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PerceptionObstacleFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.Point3D polygon_point = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PerceptionObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PerceptionObstacleFeature)
  return false;
#undef DO_
}

void PerceptionObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PerceptionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .jmc_auto.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .jmc_auto.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional .jmc_auto.common.Point3D acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->acceleration_, output);
  }

  // repeated .jmc_auto.common.Point3D polygon_point = 6;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->polygon_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PerceptionObstacleFeature)
}

::google::protobuf::uint8* PerceptionObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PerceptionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .jmc_auto.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .jmc_auto.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->acceleration_, deterministic, target);
  }

  // repeated .jmc_auto.common.Point3D polygon_point = 6;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->polygon_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PerceptionObstacleFeature)
  return target;
}

size_t PerceptionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PerceptionObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Point3D polygon_point = 6;
  {
    unsigned int count = this->polygon_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon_point(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.common.Point3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .jmc_auto.common.Point3D velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .jmc_auto.common.Point3D acceleration = 5;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acceleration_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PerceptionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PerceptionObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PerceptionObstacleFeature)
    MergeFrom(*source);
  }
}

void PerceptionObstacleFeature::MergeFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PerceptionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::jmc_auto::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::jmc_auto::common::Point3D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PerceptionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacleFeature::CopyFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PerceptionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacleFeature::IsInitialized() const {
  return true;
}

void PerceptionObstacleFeature::Swap(PerceptionObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacleFeature::InternalSwap(PerceptionObstacleFeature* other) {
  polygon_point_.InternalSwap(&other->polygon_point_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(theta_, other->theta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacleFeature

// optional double timestamp_sec = 1;
bool PerceptionObstacleFeature::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacleFeature::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacleFeature::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacleFeature::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
double PerceptionObstacleFeature::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PerceptionObstacleFeature.timestamp_sec)
  return timestamp_sec_;
}
void PerceptionObstacleFeature::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PerceptionObstacleFeature.timestamp_sec)
}

// optional .jmc_auto.common.Point3D position = 2;
bool PerceptionObstacleFeature::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacleFeature::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacleFeature::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacleFeature::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::Point3D::Clear();
  clear_has_position();
}
const ::jmc_auto::common::Point3D& PerceptionObstacleFeature::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PerceptionObstacleFeature.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PerceptionObstacleFeature.position)
  return position_;
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PerceptionObstacleFeature.position)
  clear_has_position();
  ::jmc_auto::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void PerceptionObstacleFeature::set_allocated_position(::jmc_auto::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PerceptionObstacleFeature.position)
}

// optional double theta = 3;
bool PerceptionObstacleFeature::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerceptionObstacleFeature::set_has_theta() {
  _has_bits_[0] |= 0x00000010u;
}
void PerceptionObstacleFeature::clear_has_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
void PerceptionObstacleFeature::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PerceptionObstacleFeature::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PerceptionObstacleFeature.theta)
  return theta_;
}
void PerceptionObstacleFeature::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PerceptionObstacleFeature.theta)
}

// optional .jmc_auto.common.Point3D velocity = 4;
bool PerceptionObstacleFeature::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacleFeature::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacleFeature::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacleFeature::clear_velocity() {
  if (velocity_ != NULL) velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_velocity();
}
const ::jmc_auto::common::Point3D& PerceptionObstacleFeature::velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PerceptionObstacleFeature.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PerceptionObstacleFeature.velocity)
  return velocity_;
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::release_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PerceptionObstacleFeature.velocity)
  clear_has_velocity();
  ::jmc_auto::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PerceptionObstacleFeature::set_allocated_velocity(::jmc_auto::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PerceptionObstacleFeature.velocity)
}

// optional .jmc_auto.common.Point3D acceleration = 5;
bool PerceptionObstacleFeature::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacleFeature::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacleFeature::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacleFeature::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::jmc_auto::common::Point3D::Clear();
  clear_has_acceleration();
}
const ::jmc_auto::common::Point3D& PerceptionObstacleFeature::acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PerceptionObstacleFeature.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PerceptionObstacleFeature.acceleration)
  return acceleration_;
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::release_acceleration() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PerceptionObstacleFeature.acceleration)
  clear_has_acceleration();
  ::jmc_auto::common::Point3D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void PerceptionObstacleFeature::set_allocated_acceleration(::jmc_auto::common::Point3D* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PerceptionObstacleFeature.acceleration)
}

// repeated .jmc_auto.common.Point3D polygon_point = 6;
int PerceptionObstacleFeature::polygon_point_size() const {
  return polygon_point_.size();
}
void PerceptionObstacleFeature::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::jmc_auto::common::Point3D& PerceptionObstacleFeature::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PerceptionObstacleFeature.polygon_point)
  return polygon_point_.Get(index);
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PerceptionObstacleFeature.polygon_point)
  return polygon_point_.Mutable(index);
}
::jmc_auto::common::Point3D* PerceptionObstacleFeature::add_polygon_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.PerceptionObstacleFeature.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
PerceptionObstacleFeature::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.PerceptionObstacleFeature.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
PerceptionObstacleFeature::polygon_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.PerceptionObstacleFeature.polygon_point)
  return polygon_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleTrajectoryFeature::kPerceptionObstacleHistoryFieldNumber;
const int ObstacleTrajectoryFeature::kEvaluatedTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleTrajectoryFeature::ObstacleTrajectoryFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObstacleTrajectoryFeature)
}
ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(const ObstacleTrajectoryFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      perception_obstacle_history_(from.perception_obstacle_history_),
      evaluated_trajectory_point_(from.evaluated_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObstacleTrajectoryFeature)
}

void ObstacleTrajectoryFeature::SharedCtor() {
  _cached_size_ = 0;
}

ObstacleTrajectoryFeature::~ObstacleTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObstacleTrajectoryFeature)
  SharedDtor();
}

void ObstacleTrajectoryFeature::SharedDtor() {
}

void ObstacleTrajectoryFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleTrajectoryFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleTrajectoryFeature& ObstacleTrajectoryFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleTrajectoryFeature* ObstacleTrajectoryFeature::New(::google::protobuf::Arena* arena) const {
  ObstacleTrajectoryFeature* n = new ObstacleTrajectoryFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  perception_obstacle_history_.Clear();
  evaluated_trajectory_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleTrajectoryFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perception_obstacle_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.TrajectoryPoint evaluated_trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evaluated_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObstacleTrajectoryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObstacleTrajectoryFeature)
  return false;
#undef DO_
}

void ObstacleTrajectoryFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_obstacle_history(i), output);
  }

  // repeated .jmc_auto.planning.TrajectoryPoint evaluated_trajectory_point = 2;
  for (unsigned int i = 0, n = this->evaluated_trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->evaluated_trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObstacleTrajectoryFeature)
}

::google::protobuf::uint8* ObstacleTrajectoryFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_history_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perception_obstacle_history(i), deterministic, target);
  }

  // repeated .jmc_auto.planning.TrajectoryPoint evaluated_trajectory_point = 2;
  for (unsigned int i = 0, n = this->evaluated_trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->evaluated_trajectory_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObstacleTrajectoryFeature)
  return target;
}

size_t ObstacleTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  {
    unsigned int count = this->perception_obstacle_history_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perception_obstacle_history(i));
    }
  }

  // repeated .jmc_auto.planning.TrajectoryPoint evaluated_trajectory_point = 2;
  {
    unsigned int count = this->evaluated_trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->evaluated_trajectory_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleTrajectoryFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleTrajectoryFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleTrajectoryFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObstacleTrajectoryFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObstacleTrajectoryFeature)
    MergeFrom(*source);
  }
}

void ObstacleTrajectoryFeature::MergeFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_history_.MergeFrom(from.perception_obstacle_history_);
  evaluated_trajectory_point_.MergeFrom(from.evaluated_trajectory_point_);
}

void ObstacleTrajectoryFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleTrajectoryFeature::CopyFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObstacleTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleTrajectoryFeature::IsInitialized() const {
  return true;
}

void ObstacleTrajectoryFeature::Swap(ObstacleTrajectoryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleTrajectoryFeature::InternalSwap(ObstacleTrajectoryFeature* other) {
  perception_obstacle_history_.InternalSwap(&other->perception_obstacle_history_);
  evaluated_trajectory_point_.InternalSwap(&other->evaluated_trajectory_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleTrajectoryFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleTrajectoryFeature

// repeated .jmc_auto.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
int ObstacleTrajectoryFeature::perception_obstacle_history_size() const {
  return perception_obstacle_history_.size();
}
void ObstacleTrajectoryFeature::clear_perception_obstacle_history() {
  perception_obstacle_history_.Clear();
}
const ::jmc_auto::planning::PerceptionObstacleFeature& ObstacleTrajectoryFeature::perception_obstacle_history(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleTrajectoryFeature.perception_obstacle_history)
  return perception_obstacle_history_.Get(index);
}
::jmc_auto::planning::PerceptionObstacleFeature* ObstacleTrajectoryFeature::mutable_perception_obstacle_history(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObstacleTrajectoryFeature.perception_obstacle_history)
  return perception_obstacle_history_.Mutable(index);
}
::jmc_auto::planning::PerceptionObstacleFeature* ObstacleTrajectoryFeature::add_perception_obstacle_history() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ObstacleTrajectoryFeature.perception_obstacle_history)
  return perception_obstacle_history_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::PerceptionObstacleFeature >*
ObstacleTrajectoryFeature::mutable_perception_obstacle_history() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ObstacleTrajectoryFeature.perception_obstacle_history)
  return &perception_obstacle_history_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::PerceptionObstacleFeature >&
ObstacleTrajectoryFeature::perception_obstacle_history() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ObstacleTrajectoryFeature.perception_obstacle_history)
  return perception_obstacle_history_;
}

// repeated .jmc_auto.planning.TrajectoryPoint evaluated_trajectory_point = 2;
int ObstacleTrajectoryFeature::evaluated_trajectory_point_size() const {
  return evaluated_trajectory_point_.size();
}
void ObstacleTrajectoryFeature::clear_evaluated_trajectory_point() {
  evaluated_trajectory_point_.Clear();
}
const ::jmc_auto::planning::TrajectoryPoint& ObstacleTrajectoryFeature::evaluated_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleTrajectoryFeature.evaluated_trajectory_point)
  return evaluated_trajectory_point_.Get(index);
}
::jmc_auto::planning::TrajectoryPoint* ObstacleTrajectoryFeature::mutable_evaluated_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObstacleTrajectoryFeature.evaluated_trajectory_point)
  return evaluated_trajectory_point_.Mutable(index);
}
::jmc_auto::planning::TrajectoryPoint* ObstacleTrajectoryFeature::add_evaluated_trajectory_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ObstacleTrajectoryFeature.evaluated_trajectory_point)
  return evaluated_trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrajectoryPoint >*
ObstacleTrajectoryFeature::mutable_evaluated_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ObstacleTrajectoryFeature.evaluated_trajectory_point)
  return &evaluated_trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrajectoryPoint >&
ObstacleTrajectoryFeature::evaluated_trajectory_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ObstacleTrajectoryFeature.evaluated_trajectory_point)
  return evaluated_trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionTrajectoryFeature::kProbabilityFieldNumber;
const int PredictionTrajectoryFeature::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionTrajectoryFeature::PredictionTrajectoryFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PredictionTrajectoryFeature)
}
PredictionTrajectoryFeature::PredictionTrajectoryFeature(const PredictionTrajectoryFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PredictionTrajectoryFeature)
}

void PredictionTrajectoryFeature::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
}

PredictionTrajectoryFeature::~PredictionTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PredictionTrajectoryFeature)
  SharedDtor();
}

void PredictionTrajectoryFeature::SharedDtor() {
}

void PredictionTrajectoryFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionTrajectoryFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionTrajectoryFeature& PredictionTrajectoryFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictionTrajectoryFeature* PredictionTrajectoryFeature::New(::google::protobuf::Arena* arena) const {
  PredictionTrajectoryFeature* n = new PredictionTrajectoryFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PredictionTrajectoryFeature)
  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionTrajectoryFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PredictionTrajectoryFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PredictionTrajectoryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PredictionTrajectoryFeature)
  return false;
#undef DO_
}

void PredictionTrajectoryFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PredictionTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .jmc_auto.planning.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PredictionTrajectoryFeature)
}

::google::protobuf::uint8* PredictionTrajectoryFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PredictionTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .jmc_auto.planning.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PredictionTrajectoryFeature)
  return target;
}

size_t PredictionTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PredictionTrajectoryFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = this->trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(i));
    }
  }

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionTrajectoryFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PredictionTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionTrajectoryFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionTrajectoryFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PredictionTrajectoryFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PredictionTrajectoryFeature)
    MergeFrom(*source);
  }
}

void PredictionTrajectoryFeature::MergeFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PredictionTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void PredictionTrajectoryFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PredictionTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionTrajectoryFeature::CopyFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PredictionTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionTrajectoryFeature::IsInitialized() const {
  return true;
}

void PredictionTrajectoryFeature::Swap(PredictionTrajectoryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionTrajectoryFeature::InternalSwap(PredictionTrajectoryFeature* other) {
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  std::swap(probability_, other->probability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionTrajectoryFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionTrajectoryFeature

// optional double probability = 1;
bool PredictionTrajectoryFeature::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictionTrajectoryFeature::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictionTrajectoryFeature::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionTrajectoryFeature::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
double PredictionTrajectoryFeature::probability() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionTrajectoryFeature.probability)
  return probability_;
}
void PredictionTrajectoryFeature::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PredictionTrajectoryFeature.probability)
}

// repeated .jmc_auto.planning.TrajectoryPoint trajectory_point = 2;
int PredictionTrajectoryFeature::trajectory_point_size() const {
  return trajectory_point_.size();
}
void PredictionTrajectoryFeature::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::jmc_auto::planning::TrajectoryPoint& PredictionTrajectoryFeature::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionTrajectoryFeature.trajectory_point)
  return trajectory_point_.Get(index);
}
::jmc_auto::planning::TrajectoryPoint* PredictionTrajectoryFeature::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PredictionTrajectoryFeature.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::jmc_auto::planning::TrajectoryPoint* PredictionTrajectoryFeature::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.PredictionTrajectoryFeature.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrajectoryPoint >*
PredictionTrajectoryFeature::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.PredictionTrajectoryFeature.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrajectoryPoint >&
PredictionTrajectoryFeature::trajectory_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.PredictionTrajectoryFeature.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacleFeature::kTimestampSecFieldNumber;
const int PredictionObstacleFeature::kPredictedPeriodFieldNumber;
const int PredictionObstacleFeature::kIntentFieldNumber;
const int PredictionObstacleFeature::kPriorityFieldNumber;
const int PredictionObstacleFeature::kIsStaticFieldNumber;
const int PredictionObstacleFeature::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacleFeature::PredictionObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PredictionObstacleFeature)
}
PredictionObstacleFeature::PredictionObstacleFeature(const PredictionObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intent()) {
    intent_ = new ::jmc_auto::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  if (from.has_priority()) {
    priority_ = new ::jmc_auto::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = NULL;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_sec_) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PredictionObstacleFeature)
}

void PredictionObstacleFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&intent_, 0, reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&intent_) + sizeof(is_static_));
}

PredictionObstacleFeature::~PredictionObstacleFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PredictionObstacleFeature)
  SharedDtor();
}

void PredictionObstacleFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete intent_;
  }
  if (this != internal_default_instance()) {
    delete priority_;
  }
}

void PredictionObstacleFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionObstacleFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionObstacleFeature& PredictionObstacleFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictionObstacleFeature* PredictionObstacleFeature::New(::google::protobuf::Arena* arena) const {
  PredictionObstacleFeature* n = new PredictionObstacleFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PredictionObstacleFeature)
  trajectory_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_intent()) {
      GOOGLE_DCHECK(intent_ != NULL);
      intent_->::jmc_auto::prediction::ObstacleIntent::Clear();
    }
    if (has_priority()) {
      GOOGLE_DCHECK(priority_ != NULL);
      priority_->::jmc_auto::prediction::ObstaclePriority::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&timestamp_sec_, 0, reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&timestamp_sec_) + sizeof(is_static_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PredictionObstacleFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double predicted_period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_predicted_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predicted_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstacleIntent intent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstaclePriority priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_static = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_static();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.PredictionTrajectoryFeature trajectory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PredictionObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PredictionObstacleFeature)
  return false;
#undef DO_
}

void PredictionObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PredictionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional double predicted_period = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->predicted_period(), output);
  }

  // optional .jmc_auto.prediction.ObstacleIntent intent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->intent_, output);
  }

  // optional .jmc_auto.prediction.ObstaclePriority priority = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->priority_, output);
  }

  // optional bool is_static = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_static(), output);
  }

  // repeated .jmc_auto.planning.PredictionTrajectoryFeature trajectory = 6;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trajectory(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PredictionObstacleFeature)
}

::google::protobuf::uint8* PredictionObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PredictionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional double predicted_period = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->predicted_period(), target);
  }

  // optional .jmc_auto.prediction.ObstacleIntent intent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->intent_, deterministic, target);
  }

  // optional .jmc_auto.prediction.ObstaclePriority priority = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->priority_, deterministic, target);
  }

  // optional bool is_static = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_static(), target);
  }

  // repeated .jmc_auto.planning.PredictionTrajectoryFeature trajectory = 6;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->trajectory(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PredictionObstacleFeature)
  return target;
}

size_t PredictionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PredictionObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.PredictionTrajectoryFeature trajectory = 6;
  {
    unsigned int count = this->trajectory_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.prediction.ObstacleIntent intent = 3;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->intent_);
    }

    // optional .jmc_auto.prediction.ObstaclePriority priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->priority_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 2;
    if (has_predicted_period()) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 5 [default = false];
    if (has_is_static()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PredictionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PredictionObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PredictionObstacleFeature)
    MergeFrom(*source);
  }
}

void PredictionObstacleFeature::MergeFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PredictionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intent()->::jmc_auto::prediction::ObstacleIntent::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_priority()->::jmc_auto::prediction::ObstaclePriority::MergeFrom(from.priority());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      predicted_period_ = from.predicted_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_static_ = from.is_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PredictionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacleFeature::CopyFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PredictionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacleFeature::IsInitialized() const {
  return true;
}

void PredictionObstacleFeature::Swap(PredictionObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacleFeature::InternalSwap(PredictionObstacleFeature* other) {
  trajectory_.InternalSwap(&other->trajectory_);
  std::swap(intent_, other->intent_);
  std::swap(priority_, other->priority_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(predicted_period_, other->predicted_period_);
  std::swap(is_static_, other->is_static_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionObstacleFeature

// optional double timestamp_sec = 1;
bool PredictionObstacleFeature::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictionObstacleFeature::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictionObstacleFeature::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictionObstacleFeature::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
double PredictionObstacleFeature::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionObstacleFeature.timestamp_sec)
  return timestamp_sec_;
}
void PredictionObstacleFeature::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PredictionObstacleFeature.timestamp_sec)
}

// optional double predicted_period = 2;
bool PredictionObstacleFeature::has_predicted_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictionObstacleFeature::set_has_predicted_period() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictionObstacleFeature::clear_has_predicted_period() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictionObstacleFeature::clear_predicted_period() {
  predicted_period_ = 0;
  clear_has_predicted_period();
}
double PredictionObstacleFeature::predicted_period() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionObstacleFeature.predicted_period)
  return predicted_period_;
}
void PredictionObstacleFeature::set_predicted_period(double value) {
  set_has_predicted_period();
  predicted_period_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PredictionObstacleFeature.predicted_period)
}

// optional .jmc_auto.prediction.ObstacleIntent intent = 3;
bool PredictionObstacleFeature::has_intent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictionObstacleFeature::set_has_intent() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictionObstacleFeature::clear_has_intent() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacleFeature::clear_intent() {
  if (intent_ != NULL) intent_->::jmc_auto::prediction::ObstacleIntent::Clear();
  clear_has_intent();
}
const ::jmc_auto::prediction::ObstacleIntent& PredictionObstacleFeature::intent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionObstacleFeature.intent)
  return intent_ != NULL ? *intent_
                         : *::jmc_auto::prediction::ObstacleIntent::internal_default_instance();
}
::jmc_auto::prediction::ObstacleIntent* PredictionObstacleFeature::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    intent_ = new ::jmc_auto::prediction::ObstacleIntent;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PredictionObstacleFeature.intent)
  return intent_;
}
::jmc_auto::prediction::ObstacleIntent* PredictionObstacleFeature::release_intent() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PredictionObstacleFeature.intent)
  clear_has_intent();
  ::jmc_auto::prediction::ObstacleIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void PredictionObstacleFeature::set_allocated_intent(::jmc_auto::prediction::ObstacleIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PredictionObstacleFeature.intent)
}

// optional .jmc_auto.prediction.ObstaclePriority priority = 4;
bool PredictionObstacleFeature::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictionObstacleFeature::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictionObstacleFeature::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictionObstacleFeature::clear_priority() {
  if (priority_ != NULL) priority_->::jmc_auto::prediction::ObstaclePriority::Clear();
  clear_has_priority();
}
const ::jmc_auto::prediction::ObstaclePriority& PredictionObstacleFeature::priority() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionObstacleFeature.priority)
  return priority_ != NULL ? *priority_
                         : *::jmc_auto::prediction::ObstaclePriority::internal_default_instance();
}
::jmc_auto::prediction::ObstaclePriority* PredictionObstacleFeature::mutable_priority() {
  set_has_priority();
  if (priority_ == NULL) {
    priority_ = new ::jmc_auto::prediction::ObstaclePriority;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PredictionObstacleFeature.priority)
  return priority_;
}
::jmc_auto::prediction::ObstaclePriority* PredictionObstacleFeature::release_priority() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PredictionObstacleFeature.priority)
  clear_has_priority();
  ::jmc_auto::prediction::ObstaclePriority* temp = priority_;
  priority_ = NULL;
  return temp;
}
void PredictionObstacleFeature::set_allocated_priority(::jmc_auto::prediction::ObstaclePriority* priority) {
  delete priority_;
  priority_ = priority;
  if (priority) {
    set_has_priority();
  } else {
    clear_has_priority();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PredictionObstacleFeature.priority)
}

// optional bool is_static = 5 [default = false];
bool PredictionObstacleFeature::has_is_static() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictionObstacleFeature::set_has_is_static() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictionObstacleFeature::clear_has_is_static() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictionObstacleFeature::clear_is_static() {
  is_static_ = false;
  clear_has_is_static();
}
bool PredictionObstacleFeature::is_static() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionObstacleFeature.is_static)
  return is_static_;
}
void PredictionObstacleFeature::set_is_static(bool value) {
  set_has_is_static();
  is_static_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PredictionObstacleFeature.is_static)
}

// repeated .jmc_auto.planning.PredictionTrajectoryFeature trajectory = 6;
int PredictionObstacleFeature::trajectory_size() const {
  return trajectory_.size();
}
void PredictionObstacleFeature::clear_trajectory() {
  trajectory_.Clear();
}
const ::jmc_auto::planning::PredictionTrajectoryFeature& PredictionObstacleFeature::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PredictionObstacleFeature.trajectory)
  return trajectory_.Get(index);
}
::jmc_auto::planning::PredictionTrajectoryFeature* PredictionObstacleFeature::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PredictionObstacleFeature.trajectory)
  return trajectory_.Mutable(index);
}
::jmc_auto::planning::PredictionTrajectoryFeature* PredictionObstacleFeature::add_trajectory() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.PredictionObstacleFeature.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::PredictionTrajectoryFeature >*
PredictionObstacleFeature::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.PredictionObstacleFeature.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::PredictionTrajectoryFeature >&
PredictionObstacleFeature::trajectory() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.PredictionObstacleFeature.trajectory)
  return trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleFeature::kIdFieldNumber;
const int ObstacleFeature::kLengthFieldNumber;
const int ObstacleFeature::kWidthFieldNumber;
const int ObstacleFeature::kHeightFieldNumber;
const int ObstacleFeature::kTypeFieldNumber;
const int ObstacleFeature::kObstacleTrajectoryFieldNumber;
const int ObstacleFeature::kObstaclePredictionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleFeature::ObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObstacleFeature)
}
ObstacleFeature::ObstacleFeature(const ObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obstacle_trajectory()) {
    obstacle_trajectory_ = new ::jmc_auto::planning::ObstacleTrajectoryFeature(*from.obstacle_trajectory_);
  } else {
    obstacle_trajectory_ = NULL;
  }
  if (from.has_obstacle_prediction()) {
    obstacle_prediction_ = new ::jmc_auto::planning::PredictionObstacleFeature(*from.obstacle_prediction_);
  } else {
    obstacle_prediction_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObstacleFeature)
}

void ObstacleFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&obstacle_trajectory_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&obstacle_trajectory_) + sizeof(height_));
}

ObstacleFeature::~ObstacleFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObstacleFeature)
  SharedDtor();
}

void ObstacleFeature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete obstacle_trajectory_;
  }
  if (this != internal_default_instance()) {
    delete obstacle_prediction_;
  }
}

void ObstacleFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleFeature& ObstacleFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleFeature* ObstacleFeature::New(::google::protobuf::Arena* arena) const {
  ObstacleFeature* n = new ObstacleFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObstacleFeature)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_obstacle_trajectory()) {
      GOOGLE_DCHECK(obstacle_trajectory_ != NULL);
      obstacle_trajectory_->::jmc_auto::planning::ObstacleTrajectoryFeature::Clear();
    }
    if (has_obstacle_prediction()) {
      GOOGLE_DCHECK(obstacle_prediction_ != NULL);
      obstacle_prediction_->::jmc_auto::planning::PredictionObstacleFeature::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&length_) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObstacleFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.PerceptionObstacle.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obstacle_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PredictionObstacleFeature obstacle_prediction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obstacle_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObstacleFeature)
  return false;
#undef DO_
}

void ObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // optional double height = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
  }

  // optional .jmc_auto.perception.PerceptionObstacle.Type type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .jmc_auto.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->obstacle_trajectory_, output);
  }

  // optional .jmc_auto.planning.PredictionObstacleFeature obstacle_prediction = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->obstacle_prediction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObstacleFeature)
}

::google::protobuf::uint8* ObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // optional double height = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
  }

  // optional .jmc_auto.perception.PerceptionObstacle.Type type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .jmc_auto.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->obstacle_trajectory_, deterministic, target);
  }

  // optional .jmc_auto.planning.PredictionObstacleFeature obstacle_prediction = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->obstacle_prediction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObstacleFeature)
  return target;
}

size_t ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .jmc_auto.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
    if (has_obstacle_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obstacle_trajectory_);
    }

    // optional .jmc_auto.planning.PredictionObstacleFeature obstacle_prediction = 7;
    if (has_obstacle_prediction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obstacle_prediction_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 3;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .jmc_auto.perception.PerceptionObstacle.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double height = 4;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObstacleFeature)
    MergeFrom(*source);
  }
}

void ObstacleFeature::MergeFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_obstacle_trajectory()->::jmc_auto::planning::ObstacleTrajectoryFeature::MergeFrom(from.obstacle_trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_obstacle_prediction()->::jmc_auto::planning::PredictionObstacleFeature::MergeFrom(from.obstacle_prediction());
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleFeature::CopyFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleFeature::IsInitialized() const {
  return true;
}

void ObstacleFeature::Swap(ObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleFeature::InternalSwap(ObstacleFeature* other) {
  std::swap(obstacle_trajectory_, other->obstacle_trajectory_);
  std::swap(obstacle_prediction_, other->obstacle_prediction_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleFeature

// optional int32 id = 1;
bool ObstacleFeature::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ObstacleFeature::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ObstacleFeature::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ObstacleFeature::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 ObstacleFeature::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.id)
  return id_;
}
void ObstacleFeature::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObstacleFeature.id)
}

// optional double length = 2;
bool ObstacleFeature::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleFeature::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleFeature::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleFeature::clear_length() {
  length_ = 0;
  clear_has_length();
}
double ObstacleFeature::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.length)
  return length_;
}
void ObstacleFeature::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObstacleFeature.length)
}

// optional double width = 3;
bool ObstacleFeature::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleFeature::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleFeature::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleFeature::clear_width() {
  width_ = 0;
  clear_has_width();
}
double ObstacleFeature::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.width)
  return width_;
}
void ObstacleFeature::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObstacleFeature.width)
}

// optional double height = 4;
bool ObstacleFeature::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ObstacleFeature::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
void ObstacleFeature::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void ObstacleFeature::clear_height() {
  height_ = 0;
  clear_has_height();
}
double ObstacleFeature::height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.height)
  return height_;
}
void ObstacleFeature::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObstacleFeature.height)
}

// optional .jmc_auto.perception.PerceptionObstacle.Type type = 5;
bool ObstacleFeature::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ObstacleFeature::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void ObstacleFeature::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void ObstacleFeature::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::perception::PerceptionObstacle_Type ObstacleFeature::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.type)
  return static_cast< ::jmc_auto::perception::PerceptionObstacle_Type >(type_);
}
void ObstacleFeature::set_type(::jmc_auto::perception::PerceptionObstacle_Type value) {
  assert(::jmc_auto::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObstacleFeature.type)
}

// optional .jmc_auto.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
bool ObstacleFeature::has_obstacle_trajectory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleFeature::set_has_obstacle_trajectory() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleFeature::clear_has_obstacle_trajectory() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleFeature::clear_obstacle_trajectory() {
  if (obstacle_trajectory_ != NULL) obstacle_trajectory_->::jmc_auto::planning::ObstacleTrajectoryFeature::Clear();
  clear_has_obstacle_trajectory();
}
const ::jmc_auto::planning::ObstacleTrajectoryFeature& ObstacleFeature::obstacle_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.obstacle_trajectory)
  return obstacle_trajectory_ != NULL ? *obstacle_trajectory_
                         : *::jmc_auto::planning::ObstacleTrajectoryFeature::internal_default_instance();
}
::jmc_auto::planning::ObstacleTrajectoryFeature* ObstacleFeature::mutable_obstacle_trajectory() {
  set_has_obstacle_trajectory();
  if (obstacle_trajectory_ == NULL) {
    obstacle_trajectory_ = new ::jmc_auto::planning::ObstacleTrajectoryFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObstacleFeature.obstacle_trajectory)
  return obstacle_trajectory_;
}
::jmc_auto::planning::ObstacleTrajectoryFeature* ObstacleFeature::release_obstacle_trajectory() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObstacleFeature.obstacle_trajectory)
  clear_has_obstacle_trajectory();
  ::jmc_auto::planning::ObstacleTrajectoryFeature* temp = obstacle_trajectory_;
  obstacle_trajectory_ = NULL;
  return temp;
}
void ObstacleFeature::set_allocated_obstacle_trajectory(::jmc_auto::planning::ObstacleTrajectoryFeature* obstacle_trajectory) {
  delete obstacle_trajectory_;
  obstacle_trajectory_ = obstacle_trajectory;
  if (obstacle_trajectory) {
    set_has_obstacle_trajectory();
  } else {
    clear_has_obstacle_trajectory();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObstacleFeature.obstacle_trajectory)
}

// optional .jmc_auto.planning.PredictionObstacleFeature obstacle_prediction = 7;
bool ObstacleFeature::has_obstacle_prediction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleFeature::set_has_obstacle_prediction() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleFeature::clear_has_obstacle_prediction() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleFeature::clear_obstacle_prediction() {
  if (obstacle_prediction_ != NULL) obstacle_prediction_->::jmc_auto::planning::PredictionObstacleFeature::Clear();
  clear_has_obstacle_prediction();
}
const ::jmc_auto::planning::PredictionObstacleFeature& ObstacleFeature::obstacle_prediction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObstacleFeature.obstacle_prediction)
  return obstacle_prediction_ != NULL ? *obstacle_prediction_
                         : *::jmc_auto::planning::PredictionObstacleFeature::internal_default_instance();
}
::jmc_auto::planning::PredictionObstacleFeature* ObstacleFeature::mutable_obstacle_prediction() {
  set_has_obstacle_prediction();
  if (obstacle_prediction_ == NULL) {
    obstacle_prediction_ = new ::jmc_auto::planning::PredictionObstacleFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObstacleFeature.obstacle_prediction)
  return obstacle_prediction_;
}
::jmc_auto::planning::PredictionObstacleFeature* ObstacleFeature::release_obstacle_prediction() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObstacleFeature.obstacle_prediction)
  clear_has_obstacle_prediction();
  ::jmc_auto::planning::PredictionObstacleFeature* temp = obstacle_prediction_;
  obstacle_prediction_ = NULL;
  return temp;
}
void ObstacleFeature::set_allocated_obstacle_prediction(::jmc_auto::planning::PredictionObstacleFeature* obstacle_prediction) {
  delete obstacle_prediction_;
  obstacle_prediction_ = obstacle_prediction;
  if (obstacle_prediction) {
    set_has_obstacle_prediction();
  } else {
    clear_has_obstacle_prediction();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObstacleFeature.obstacle_prediction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingFeature::kRoutingLaneIdFieldNumber;
const int RoutingFeature::kLocalRoutingLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingFeature::RoutingFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.RoutingFeature)
}
RoutingFeature::RoutingFeature(const RoutingFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      routing_lane_id_(from.routing_lane_id_),
      local_routing_lane_id_(from.local_routing_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.RoutingFeature)
}

void RoutingFeature::SharedCtor() {
  _cached_size_ = 0;
}

RoutingFeature::~RoutingFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.RoutingFeature)
  SharedDtor();
}

void RoutingFeature::SharedDtor() {
}

void RoutingFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingFeature& RoutingFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoutingFeature* RoutingFeature::New(::google::protobuf::Arena* arena) const {
  RoutingFeature* n = new RoutingFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.RoutingFeature)
  routing_lane_id_.Clear();
  local_routing_lane_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.RoutingFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string routing_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_routing_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routing_lane_id(this->routing_lane_id_size() - 1).data(),
            this->routing_lane_id(this->routing_lane_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.RoutingFeature.routing_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string local_routing_lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_local_routing_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_routing_lane_id(this->local_routing_lane_id_size() - 1).data(),
            this->local_routing_lane_id(this->local_routing_lane_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.RoutingFeature.local_routing_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.RoutingFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.RoutingFeature)
  return false;
#undef DO_
}

void RoutingFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.RoutingFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string routing_lane_id = 1;
  for (int i = 0, n = this->routing_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_lane_id(i).data(), this->routing_lane_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.RoutingFeature.routing_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->routing_lane_id(i), output);
  }

  // repeated string local_routing_lane_id = 2;
  for (int i = 0, n = this->local_routing_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_routing_lane_id(i).data(), this->local_routing_lane_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.RoutingFeature.local_routing_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->local_routing_lane_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.RoutingFeature)
}

::google::protobuf::uint8* RoutingFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.RoutingFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string routing_lane_id = 1;
  for (int i = 0, n = this->routing_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_lane_id(i).data(), this->routing_lane_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.RoutingFeature.routing_lane_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->routing_lane_id(i), target);
  }

  // repeated string local_routing_lane_id = 2;
  for (int i = 0, n = this->local_routing_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_routing_lane_id(i).data(), this->local_routing_lane_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.RoutingFeature.local_routing_lane_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->local_routing_lane_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.RoutingFeature)
  return target;
}

size_t RoutingFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.RoutingFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string routing_lane_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->routing_lane_id_size());
  for (int i = 0, n = this->routing_lane_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->routing_lane_id(i));
  }

  // repeated string local_routing_lane_id = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->local_routing_lane_id_size());
  for (int i = 0, n = this->local_routing_lane_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->local_routing_lane_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.RoutingFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.RoutingFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.RoutingFeature)
    MergeFrom(*source);
  }
}

void RoutingFeature::MergeFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.RoutingFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routing_lane_id_.MergeFrom(from.routing_lane_id_);
  local_routing_lane_id_.MergeFrom(from.local_routing_lane_id_);
}

void RoutingFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.RoutingFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingFeature::CopyFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.RoutingFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingFeature::IsInitialized() const {
  return true;
}

void RoutingFeature::Swap(RoutingFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingFeature::InternalSwap(RoutingFeature* other) {
  routing_lane_id_.InternalSwap(&other->routing_lane_id_);
  local_routing_lane_id_.InternalSwap(&other->local_routing_lane_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingFeature

// repeated string routing_lane_id = 1;
int RoutingFeature::routing_lane_id_size() const {
  return routing_lane_id_.size();
}
void RoutingFeature::clear_routing_lane_id() {
  routing_lane_id_.Clear();
}
const ::std::string& RoutingFeature::routing_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RoutingFeature.routing_lane_id)
  return routing_lane_id_.Get(index);
}
::std::string* RoutingFeature::mutable_routing_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.RoutingFeature.routing_lane_id)
  return routing_lane_id_.Mutable(index);
}
void RoutingFeature::set_routing_lane_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RoutingFeature.routing_lane_id)
  routing_lane_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RoutingFeature::set_routing_lane_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RoutingFeature.routing_lane_id)
  routing_lane_id_.Mutable(index)->assign(std::move(value));
}
#endif
void RoutingFeature::set_routing_lane_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  routing_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.RoutingFeature.routing_lane_id)
}
void RoutingFeature::set_routing_lane_id(int index, const char* value, size_t size) {
  routing_lane_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.RoutingFeature.routing_lane_id)
}
::std::string* RoutingFeature::add_routing_lane_id() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.planning.RoutingFeature.routing_lane_id)
  return routing_lane_id_.Add();
}
void RoutingFeature::add_routing_lane_id(const ::std::string& value) {
  routing_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.RoutingFeature.routing_lane_id)
}
#if LANG_CXX11
void RoutingFeature::add_routing_lane_id(::std::string&& value) {
  routing_lane_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.planning.RoutingFeature.routing_lane_id)
}
#endif
void RoutingFeature::add_routing_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  routing_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.planning.RoutingFeature.routing_lane_id)
}
void RoutingFeature::add_routing_lane_id(const char* value, size_t size) {
  routing_lane_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.planning.RoutingFeature.routing_lane_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoutingFeature::routing_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.RoutingFeature.routing_lane_id)
  return routing_lane_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RoutingFeature::mutable_routing_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.RoutingFeature.routing_lane_id)
  return &routing_lane_id_;
}

// repeated string local_routing_lane_id = 2;
int RoutingFeature::local_routing_lane_id_size() const {
  return local_routing_lane_id_.size();
}
void RoutingFeature::clear_local_routing_lane_id() {
  local_routing_lane_id_.Clear();
}
const ::std::string& RoutingFeature::local_routing_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  return local_routing_lane_id_.Get(index);
}
::std::string* RoutingFeature::mutable_local_routing_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  return local_routing_lane_id_.Mutable(index);
}
void RoutingFeature::set_local_routing_lane_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  local_routing_lane_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RoutingFeature::set_local_routing_lane_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  local_routing_lane_id_.Mutable(index)->assign(std::move(value));
}
#endif
void RoutingFeature::set_local_routing_lane_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  local_routing_lane_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
}
void RoutingFeature::set_local_routing_lane_id(int index, const char* value, size_t size) {
  local_routing_lane_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
}
::std::string* RoutingFeature::add_local_routing_lane_id() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  return local_routing_lane_id_.Add();
}
void RoutingFeature::add_local_routing_lane_id(const ::std::string& value) {
  local_routing_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
}
#if LANG_CXX11
void RoutingFeature::add_local_routing_lane_id(::std::string&& value) {
  local_routing_lane_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
}
#endif
void RoutingFeature::add_local_routing_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  local_routing_lane_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
}
void RoutingFeature::add_local_routing_lane_id(const char* value, size_t size) {
  local_routing_lane_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoutingFeature::local_routing_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  return local_routing_lane_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RoutingFeature::mutable_local_routing_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.RoutingFeature.local_routing_lane_id)
  return &local_routing_lane_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightFeature::kColorFieldNumber;
const int TrafficLightFeature::kIdFieldNumber;
const int TrafficLightFeature::kConfidenceFieldNumber;
const int TrafficLightFeature::kTrackingTimeFieldNumber;
const int TrafficLightFeature::kBlinkFieldNumber;
const int TrafficLightFeature::kRemainingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightFeature::TrafficLightFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrafficLightFeature)
}
TrafficLightFeature::TrafficLightFeature(const TrafficLightFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrafficLightFeature)
}

void TrafficLightFeature::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&remaining_time_) -
    reinterpret_cast<char*>(&color_) + sizeof(remaining_time_));
  confidence_ = 1;
}

TrafficLightFeature::~TrafficLightFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrafficLightFeature)
  SharedDtor();
}

void TrafficLightFeature::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightFeature& TrafficLightFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightFeature* TrafficLightFeature::New(::google::protobuf::Arena* arena) const {
  TrafficLightFeature* n = new TrafficLightFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrafficLightFeature)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&color_, 0, reinterpret_cast<char*>(&remaining_time_) -
      reinterpret_cast<char*>(&color_) + sizeof(remaining_time_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrafficLightFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.TrafficLight.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::jmc_auto::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.TrafficLightFeature.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_blink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double remaining_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_remaining_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remaining_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrafficLightFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrafficLightFeature)
  return false;
#undef DO_
}

void TrafficLightFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.TrafficLightFeature.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blink(), output);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->remaining_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrafficLightFeature)
}

::google::protobuf::uint8* TrafficLightFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.TrafficLightFeature.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->remaining_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrafficLightFeature)
  return target;
}

size_t TrafficLightFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrafficLightFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .jmc_auto.perception.TrafficLight.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool blink = 5;
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (has_remaining_time()) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrafficLightFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrafficLightFeature)
    MergeFrom(*source);
  }
}

void TrafficLightFeature::MergeFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_time_ = from.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightFeature::CopyFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightFeature::IsInitialized() const {
  return true;
}

void TrafficLightFeature::Swap(TrafficLightFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightFeature::InternalSwap(TrafficLightFeature* other) {
  id_.Swap(&other->id_);
  std::swap(color_, other->color_);
  std::swap(blink_, other->blink_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(remaining_time_, other->remaining_time_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightFeature

// optional .jmc_auto.perception.TrafficLight.Color color = 1;
bool TrafficLightFeature::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightFeature::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightFeature::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightFeature::clear_color() {
  color_ = 0;
  clear_has_color();
}
::jmc_auto::perception::TrafficLight_Color TrafficLightFeature::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightFeature.color)
  return static_cast< ::jmc_auto::perception::TrafficLight_Color >(color_);
}
void TrafficLightFeature::set_color(::jmc_auto::perception::TrafficLight_Color value) {
  assert(::jmc_auto::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightFeature.color)
}

// optional string id = 2;
bool TrafficLightFeature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightFeature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightFeature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightFeature::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& TrafficLightFeature::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightFeature.id)
  return id_.GetNoArena();
}
void TrafficLightFeature::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightFeature.id)
}
#if LANG_CXX11
void TrafficLightFeature::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.TrafficLightFeature.id)
}
#endif
void TrafficLightFeature::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.TrafficLightFeature.id)
}
void TrafficLightFeature::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.TrafficLightFeature.id)
}
::std::string* TrafficLightFeature::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficLightFeature.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLightFeature::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TrafficLightFeature.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLightFeature::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TrafficLightFeature.id)
}

// optional double confidence = 3 [default = 1];
bool TrafficLightFeature::has_confidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLightFeature::set_has_confidence() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLightFeature::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLightFeature::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
double TrafficLightFeature::confidence() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightFeature.confidence)
  return confidence_;
}
void TrafficLightFeature::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightFeature.confidence)
}

// optional double tracking_time = 4;
bool TrafficLightFeature::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightFeature::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightFeature::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightFeature::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double TrafficLightFeature::tracking_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightFeature.tracking_time)
  return tracking_time_;
}
void TrafficLightFeature::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightFeature.tracking_time)
}

// optional bool blink = 5;
bool TrafficLightFeature::has_blink() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightFeature::set_has_blink() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightFeature::clear_has_blink() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightFeature::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
bool TrafficLightFeature::blink() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightFeature.blink)
  return blink_;
}
void TrafficLightFeature::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightFeature.blink)
}

// optional double remaining_time = 6;
bool TrafficLightFeature::has_remaining_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightFeature::set_has_remaining_time() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightFeature::clear_has_remaining_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightFeature::clear_remaining_time() {
  remaining_time_ = 0;
  clear_has_remaining_time();
}
double TrafficLightFeature::remaining_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightFeature.remaining_time)
  return remaining_time_;
}
void TrafficLightFeature::set_remaining_time(double value) {
  set_has_remaining_time();
  remaining_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightFeature.remaining_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetectionFeature::kMessageTimestampSecFieldNumber;
const int TrafficLightDetectionFeature::kTrafficLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetectionFeature::TrafficLightDetectionFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrafficLightDetectionFeature)
}
TrafficLightDetectionFeature::TrafficLightDetectionFeature(const TrafficLightDetectionFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      traffic_light_(from.traffic_light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_timestamp_sec_ = from.message_timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrafficLightDetectionFeature)
}

void TrafficLightDetectionFeature::SharedCtor() {
  _cached_size_ = 0;
  message_timestamp_sec_ = 0;
}

TrafficLightDetectionFeature::~TrafficLightDetectionFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrafficLightDetectionFeature)
  SharedDtor();
}

void TrafficLightDetectionFeature::SharedDtor() {
}

void TrafficLightDetectionFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDetectionFeature::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDetectionFeature& TrafficLightDetectionFeature::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightDetectionFeature* TrafficLightDetectionFeature::New(::google::protobuf::Arena* arena) const {
  TrafficLightDetectionFeature* n = new TrafficLightDetectionFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDetectionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrafficLightDetectionFeature)
  traffic_light_.Clear();
  message_timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDetectionFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrafficLightDetectionFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.TrafficLightFeature traffic_light = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrafficLightDetectionFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrafficLightDetectionFeature)
  return false;
#undef DO_
}

void TrafficLightDetectionFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrafficLightDetectionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // repeated .jmc_auto.planning.TrafficLightFeature traffic_light = 2;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traffic_light(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrafficLightDetectionFeature)
}

::google::protobuf::uint8* TrafficLightDetectionFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrafficLightDetectionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // repeated .jmc_auto.planning.TrafficLightFeature traffic_light = 2;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->traffic_light(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrafficLightDetectionFeature)
  return target;
}

size_t TrafficLightDetectionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrafficLightDetectionFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.TrafficLightFeature traffic_light = 2;
  {
    unsigned int count = this->traffic_light_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_light(i));
    }
  }

  // optional double message_timestamp_sec = 1;
  if (has_message_timestamp_sec()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDetectionFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrafficLightDetectionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetectionFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetectionFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrafficLightDetectionFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrafficLightDetectionFeature)
    MergeFrom(*source);
  }
}

void TrafficLightDetectionFeature::MergeFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrafficLightDetectionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  if (from.has_message_timestamp_sec()) {
    set_message_timestamp_sec(from.message_timestamp_sec());
  }
}

void TrafficLightDetectionFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrafficLightDetectionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetectionFeature::CopyFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrafficLightDetectionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetectionFeature::IsInitialized() const {
  return true;
}

void TrafficLightDetectionFeature::Swap(TrafficLightDetectionFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetectionFeature::InternalSwap(TrafficLightDetectionFeature* other) {
  traffic_light_.InternalSwap(&other->traffic_light_);
  std::swap(message_timestamp_sec_, other->message_timestamp_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDetectionFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDetectionFeature

// optional double message_timestamp_sec = 1;
bool TrafficLightDetectionFeature::has_message_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightDetectionFeature::set_has_message_timestamp_sec() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightDetectionFeature::clear_has_message_timestamp_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightDetectionFeature::clear_message_timestamp_sec() {
  message_timestamp_sec_ = 0;
  clear_has_message_timestamp_sec();
}
double TrafficLightDetectionFeature::message_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightDetectionFeature.message_timestamp_sec)
  return message_timestamp_sec_;
}
void TrafficLightDetectionFeature::set_message_timestamp_sec(double value) {
  set_has_message_timestamp_sec();
  message_timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrafficLightDetectionFeature.message_timestamp_sec)
}

// repeated .jmc_auto.planning.TrafficLightFeature traffic_light = 2;
int TrafficLightDetectionFeature::traffic_light_size() const {
  return traffic_light_.size();
}
void TrafficLightDetectionFeature::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::jmc_auto::planning::TrafficLightFeature& TrafficLightDetectionFeature::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrafficLightDetectionFeature.traffic_light)
  return traffic_light_.Get(index);
}
::jmc_auto::planning::TrafficLightFeature* TrafficLightDetectionFeature::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TrafficLightDetectionFeature.traffic_light)
  return traffic_light_.Mutable(index);
}
::jmc_auto::planning::TrafficLightFeature* TrafficLightDetectionFeature::add_traffic_light() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.TrafficLightDetectionFeature.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrafficLightFeature >*
TrafficLightDetectionFeature::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.TrafficLightDetectionFeature.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TrafficLightFeature >&
TrafficLightDetectionFeature::traffic_light() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.TrafficLightDetectionFeature.traffic_light)
  return traffic_light_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectoryPoint::kTimestampSecFieldNumber;
const int ADCTrajectoryPoint::kPlanningTagFieldNumber;
const int ADCTrajectoryPoint::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectoryPoint::ADCTrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ADCTrajectoryPoint)
}
ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planning_tag()) {
    planning_tag_ = new ::jmc_auto::planning::PlanningTag(*from.planning_tag_);
  } else {
    planning_tag_ = NULL;
  }
  if (from.has_trajectory_point()) {
    trajectory_point_ = new ::jmc_auto::planning::TrajectoryPointFeature(*from.trajectory_point_);
  } else {
    trajectory_point_ = NULL;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&planning_tag_, 0, reinterpret_cast<char*>(&timestamp_sec_) -
    reinterpret_cast<char*>(&planning_tag_) + sizeof(timestamp_sec_));
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ADCTrajectoryPoint)
  SharedDtor();
}

void ADCTrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete planning_tag_;
  }
  if (this != internal_default_instance()) {
    delete trajectory_point_;
  }
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectoryPoint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectoryPoint& ADCTrajectoryPoint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCTrajectoryPoint* ADCTrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  ADCTrajectoryPoint* n = new ADCTrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ADCTrajectoryPoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_planning_tag()) {
      GOOGLE_DCHECK(planning_tag_ != NULL);
      planning_tag_->::jmc_auto::planning::PlanningTag::Clear();
    }
    if (has_trajectory_point()) {
      GOOGLE_DCHECK(trajectory_point_ != NULL);
      trajectory_point_->::jmc_auto::planning::TrajectoryPointFeature::Clear();
    }
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ADCTrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PlanningTag planning_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ADCTrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ADCTrajectoryPoint)
  return false;
#undef DO_
}

void ADCTrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .jmc_auto.planning.PlanningTag planning_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planning_tag_, output);
  }

  // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trajectory_point_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ADCTrajectoryPoint)
}

::google::protobuf::uint8* ADCTrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .jmc_auto.planning.PlanningTag planning_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planning_tag_, deterministic, target);
  }

  // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trajectory_point_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ADCTrajectoryPoint)
  return target;
}

size_t ADCTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ADCTrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.planning.PlanningTag planning_tag = 2;
    if (has_planning_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planning_tag_);
    }

    // optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 3;
    if (has_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ADCTrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ADCTrajectoryPoint)
    MergeFrom(*source);
  }
}

void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_planning_tag()->::jmc_auto::planning::PlanningTag::MergeFrom(from.planning_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trajectory_point()->::jmc_auto::planning::TrajectoryPointFeature::MergeFrom(from.trajectory_point());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {
  return true;
}

void ADCTrajectoryPoint::Swap(ADCTrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  std::swap(planning_tag_, other->planning_tag_);
  std::swap(trajectory_point_, other->trajectory_point_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectoryPoint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectoryPoint

// optional double timestamp_sec = 1;
bool ADCTrajectoryPoint::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCTrajectoryPoint::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCTrajectoryPoint::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectoryPoint::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
double ADCTrajectoryPoint::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectoryPoint.timestamp_sec)
  return timestamp_sec_;
}
void ADCTrajectoryPoint::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectoryPoint.timestamp_sec)
}

// optional .jmc_auto.planning.PlanningTag planning_tag = 2;
bool ADCTrajectoryPoint::has_planning_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCTrajectoryPoint::set_has_planning_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCTrajectoryPoint::clear_has_planning_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectoryPoint::clear_planning_tag() {
  if (planning_tag_ != NULL) planning_tag_->::jmc_auto::planning::PlanningTag::Clear();
  clear_has_planning_tag();
}
const ::jmc_auto::planning::PlanningTag& ADCTrajectoryPoint::planning_tag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectoryPoint.planning_tag)
  return planning_tag_ != NULL ? *planning_tag_
                         : *::jmc_auto::planning::PlanningTag::internal_default_instance();
}
::jmc_auto::planning::PlanningTag* ADCTrajectoryPoint::mutable_planning_tag() {
  set_has_planning_tag();
  if (planning_tag_ == NULL) {
    planning_tag_ = new ::jmc_auto::planning::PlanningTag;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectoryPoint.planning_tag)
  return planning_tag_;
}
::jmc_auto::planning::PlanningTag* ADCTrajectoryPoint::release_planning_tag() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectoryPoint.planning_tag)
  clear_has_planning_tag();
  ::jmc_auto::planning::PlanningTag* temp = planning_tag_;
  planning_tag_ = NULL;
  return temp;
}
void ADCTrajectoryPoint::set_allocated_planning_tag(::jmc_auto::planning::PlanningTag* planning_tag) {
  delete planning_tag_;
  planning_tag_ = planning_tag;
  if (planning_tag) {
    set_has_planning_tag();
  } else {
    clear_has_planning_tag();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectoryPoint.planning_tag)
}

// optional .jmc_auto.planning.TrajectoryPointFeature trajectory_point = 3;
bool ADCTrajectoryPoint::has_trajectory_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCTrajectoryPoint::set_has_trajectory_point() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCTrajectoryPoint::clear_has_trajectory_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectoryPoint::clear_trajectory_point() {
  if (trajectory_point_ != NULL) trajectory_point_->::jmc_auto::planning::TrajectoryPointFeature::Clear();
  clear_has_trajectory_point();
}
const ::jmc_auto::planning::TrajectoryPointFeature& ADCTrajectoryPoint::trajectory_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectoryPoint.trajectory_point)
  return trajectory_point_ != NULL ? *trajectory_point_
                         : *::jmc_auto::planning::TrajectoryPointFeature::internal_default_instance();
}
::jmc_auto::planning::TrajectoryPointFeature* ADCTrajectoryPoint::mutable_trajectory_point() {
  set_has_trajectory_point();
  if (trajectory_point_ == NULL) {
    trajectory_point_ = new ::jmc_auto::planning::TrajectoryPointFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectoryPoint.trajectory_point)
  return trajectory_point_;
}
::jmc_auto::planning::TrajectoryPointFeature* ADCTrajectoryPoint::release_trajectory_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectoryPoint.trajectory_point)
  clear_has_trajectory_point();
  ::jmc_auto::planning::TrajectoryPointFeature* temp = trajectory_point_;
  trajectory_point_ = NULL;
  return temp;
}
void ADCTrajectoryPoint::set_allocated_trajectory_point(::jmc_auto::planning::TrajectoryPointFeature* trajectory_point) {
  delete trajectory_point_;
  trajectory_point_ = trajectory_point;
  if (trajectory_point) {
    set_has_trajectory_point();
  } else {
    clear_has_trajectory_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectoryPoint.trajectory_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningOutput::kAdcFutureTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningOutput::LearningOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.LearningOutput)
}
LearningOutput::LearningOutput(const LearningOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      adc_future_trajectory_point_(from.adc_future_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.LearningOutput)
}

void LearningOutput::SharedCtor() {
  _cached_size_ = 0;
}

LearningOutput::~LearningOutput() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.LearningOutput)
  SharedDtor();
}

void LearningOutput::SharedDtor() {
}

void LearningOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningOutput::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningOutput& LearningOutput::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningOutput* LearningOutput::New(::google::protobuf::Arena* arena) const {
  LearningOutput* n = new LearningOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LearningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.LearningOutput)
  adc_future_trajectory_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.LearningOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_future_trajectory_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adc_future_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.LearningOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.LearningOutput)
  return false;
#undef DO_
}

void LearningOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.LearningOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_future_trajectory_point = 1;
  for (unsigned int i = 0, n = this->adc_future_trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adc_future_trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.LearningOutput)
}

::google::protobuf::uint8* LearningOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.LearningOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_future_trajectory_point = 1;
  for (unsigned int i = 0, n = this->adc_future_trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->adc_future_trajectory_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.LearningOutput)
  return target;
}

size_t LearningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.LearningOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_future_trajectory_point = 1;
  {
    unsigned int count = this->adc_future_trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adc_future_trajectory_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.LearningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.LearningOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.LearningOutput)
    MergeFrom(*source);
  }
}

void LearningOutput::MergeFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.LearningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adc_future_trajectory_point_.MergeFrom(from.adc_future_trajectory_point_);
}

void LearningOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.LearningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningOutput::CopyFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.LearningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningOutput::IsInitialized() const {
  return true;
}

void LearningOutput::Swap(LearningOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningOutput::InternalSwap(LearningOutput* other) {
  adc_future_trajectory_point_.InternalSwap(&other->adc_future_trajectory_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningOutput::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningOutput

// repeated .jmc_auto.planning.ADCTrajectoryPoint adc_future_trajectory_point = 1;
int LearningOutput::adc_future_trajectory_point_size() const {
  return adc_future_trajectory_point_.size();
}
void LearningOutput::clear_adc_future_trajectory_point() {
  adc_future_trajectory_point_.Clear();
}
const ::jmc_auto::planning::ADCTrajectoryPoint& LearningOutput::adc_future_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningOutput.adc_future_trajectory_point)
  return adc_future_trajectory_point_.Get(index);
}
::jmc_auto::planning::ADCTrajectoryPoint* LearningOutput::mutable_adc_future_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningOutput.adc_future_trajectory_point)
  return adc_future_trajectory_point_.Mutable(index);
}
::jmc_auto::planning::ADCTrajectoryPoint* LearningOutput::add_adc_future_trajectory_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.LearningOutput.adc_future_trajectory_point)
  return adc_future_trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ADCTrajectoryPoint >*
LearningOutput::mutable_adc_future_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.LearningOutput.adc_future_trajectory_point)
  return &adc_future_trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ADCTrajectoryPoint >&
LearningOutput::adc_future_trajectory_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.LearningOutput.adc_future_trajectory_point)
  return adc_future_trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningDataFrame::kMessageTimestampSecFieldNumber;
const int LearningDataFrame::kFrameNumFieldNumber;
const int LearningDataFrame::kMapNameFieldNumber;
const int LearningDataFrame::kPlanningTagFieldNumber;
const int LearningDataFrame::kChassisFieldNumber;
const int LearningDataFrame::kLocalizationFieldNumber;
const int LearningDataFrame::kObstacleFieldNumber;
const int LearningDataFrame::kRoutingFieldNumber;
const int LearningDataFrame::kTrafficLightDetectionFieldNumber;
const int LearningDataFrame::kAdcTrajectoryPointFieldNumber;
const int LearningDataFrame::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningDataFrame::LearningDataFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.LearningDataFrame)
}
LearningDataFrame::LearningDataFrame(const LearningDataFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      obstacle_(from.obstacle_),
      adc_trajectory_point_(from.adc_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.has_planning_tag()) {
    planning_tag_ = new ::jmc_auto::planning::PlanningTag(*from.planning_tag_);
  } else {
    planning_tag_ = NULL;
  }
  if (from.has_chassis()) {
    chassis_ = new ::jmc_auto::planning::ChassisFeature(*from.chassis_);
  } else {
    chassis_ = NULL;
  }
  if (from.has_localization()) {
    localization_ = new ::jmc_auto::planning::LocalizationFeature(*from.localization_);
  } else {
    localization_ = NULL;
  }
  if (from.has_routing()) {
    routing_ = new ::jmc_auto::planning::RoutingFeature(*from.routing_);
  } else {
    routing_ = NULL;
  }
  if (from.has_traffic_light_detection()) {
    traffic_light_detection_ = new ::jmc_auto::planning::TrafficLightDetectionFeature(*from.traffic_light_detection_);
  } else {
    traffic_light_detection_ = NULL;
  }
  if (from.has_output()) {
    output_ = new ::jmc_auto::planning::LearningOutput(*from.output_);
  } else {
    output_ = NULL;
  }
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    reinterpret_cast<char*>(&frame_num_) -
    reinterpret_cast<char*>(&message_timestamp_sec_) + sizeof(frame_num_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.LearningDataFrame)
}

void LearningDataFrame::SharedCtor() {
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&planning_tag_, 0, reinterpret_cast<char*>(&frame_num_) -
    reinterpret_cast<char*>(&planning_tag_) + sizeof(frame_num_));
}

LearningDataFrame::~LearningDataFrame() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.LearningDataFrame)
  SharedDtor();
}

void LearningDataFrame::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete planning_tag_;
  }
  if (this != internal_default_instance()) {
    delete chassis_;
  }
  if (this != internal_default_instance()) {
    delete localization_;
  }
  if (this != internal_default_instance()) {
    delete routing_;
  }
  if (this != internal_default_instance()) {
    delete traffic_light_detection_;
  }
  if (this != internal_default_instance()) {
    delete output_;
  }
}

void LearningDataFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningDataFrame::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningDataFrame& LearningDataFrame::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningDataFrame* LearningDataFrame::New(::google::protobuf::Arena* arena) const {
  LearningDataFrame* n = new LearningDataFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LearningDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.LearningDataFrame)
  obstacle_.Clear();
  adc_trajectory_point_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_map_name()) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_planning_tag()) {
      GOOGLE_DCHECK(planning_tag_ != NULL);
      planning_tag_->::jmc_auto::planning::PlanningTag::Clear();
    }
    if (has_chassis()) {
      GOOGLE_DCHECK(chassis_ != NULL);
      chassis_->::jmc_auto::planning::ChassisFeature::Clear();
    }
    if (has_localization()) {
      GOOGLE_DCHECK(localization_ != NULL);
      localization_->::jmc_auto::planning::LocalizationFeature::Clear();
    }
    if (has_routing()) {
      GOOGLE_DCHECK(routing_ != NULL);
      routing_->::jmc_auto::planning::RoutingFeature::Clear();
    }
    if (has_traffic_light_detection()) {
      GOOGLE_DCHECK(traffic_light_detection_ != NULL);
      traffic_light_detection_->::jmc_auto::planning::TrafficLightDetectionFeature::Clear();
    }
    if (has_output()) {
      GOOGLE_DCHECK(output_ != NULL);
      output_->::jmc_auto::planning::LearningOutput::Clear();
    }
  }
  message_timestamp_sec_ = 0;
  frame_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningDataFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.LearningDataFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 frame_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_frame_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.LearningDataFrame.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PlanningTag planning_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ChassisFeature chassis = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.LocalizationFeature localization = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.ObstacleFeature obstacle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.RoutingFeature routing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_light_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adc_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.LearningOutput output = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.LearningDataFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.LearningDataFrame)
  return false;
#undef DO_
}

void LearningDataFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.LearningDataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frame_num(), output);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.LearningDataFrame.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map_name(), output);
  }

  // optional .jmc_auto.planning.PlanningTag planning_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->planning_tag_, output);
  }

  // optional .jmc_auto.planning.ChassisFeature chassis = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->chassis_, output);
  }

  // optional .jmc_auto.planning.LocalizationFeature localization = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->localization_, output);
  }

  // repeated .jmc_auto.planning.ObstacleFeature obstacle = 7;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obstacle(i), output);
  }

  // optional .jmc_auto.planning.RoutingFeature routing = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->routing_, output);
  }

  // optional .jmc_auto.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->traffic_light_detection_, output);
  }

  // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->adc_trajectory_point(i), output);
  }

  // optional .jmc_auto.planning.LearningOutput output = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->output_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.LearningDataFrame)
}

::google::protobuf::uint8* LearningDataFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.LearningDataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frame_num(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.LearningDataFrame.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map_name(), target);
  }

  // optional .jmc_auto.planning.PlanningTag planning_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->planning_tag_, deterministic, target);
  }

  // optional .jmc_auto.planning.ChassisFeature chassis = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->chassis_, deterministic, target);
  }

  // optional .jmc_auto.planning.LocalizationFeature localization = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->localization_, deterministic, target);
  }

  // repeated .jmc_auto.planning.ObstacleFeature obstacle = 7;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->obstacle(i), deterministic, target);
  }

  // optional .jmc_auto.planning.RoutingFeature routing = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->routing_, deterministic, target);
  }

  // optional .jmc_auto.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->traffic_light_detection_, deterministic, target);
  }

  // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  for (unsigned int i = 0, n = this->adc_trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->adc_trajectory_point(i), deterministic, target);
  }

  // optional .jmc_auto.planning.LearningOutput output = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->output_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.LearningDataFrame)
  return target;
}

size_t LearningDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.LearningDataFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.ObstacleFeature obstacle = 7;
  {
    unsigned int count = this->obstacle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle(i));
    }
  }

  // repeated .jmc_auto.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  {
    unsigned int count = this->adc_trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adc_trajectory_point(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string map_name = 3;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional .jmc_auto.planning.PlanningTag planning_tag = 4;
    if (has_planning_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planning_tag_);
    }

    // optional .jmc_auto.planning.ChassisFeature chassis = 5;
    if (has_chassis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_);
    }

    // optional .jmc_auto.planning.LocalizationFeature localization = 6;
    if (has_localization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_);
    }

    // optional .jmc_auto.planning.RoutingFeature routing = 8;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_);
    }

    // optional .jmc_auto.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
    if (has_traffic_light_detection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_light_detection_);
    }

    // optional .jmc_auto.planning.LearningOutput output = 11;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->output_);
    }

    // optional double message_timestamp_sec = 1;
    if (has_message_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 frame_num = 2;
  if (has_frame_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningDataFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.LearningDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningDataFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningDataFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.LearningDataFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.LearningDataFrame)
    MergeFrom(*source);
  }
}

void LearningDataFrame::MergeFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.LearningDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_planning_tag()->::jmc_auto::planning::PlanningTag::MergeFrom(from.planning_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chassis()->::jmc_auto::planning::ChassisFeature::MergeFrom(from.chassis());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_localization()->::jmc_auto::planning::LocalizationFeature::MergeFrom(from.localization());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_routing()->::jmc_auto::planning::RoutingFeature::MergeFrom(from.routing());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_traffic_light_detection()->::jmc_auto::planning::TrafficLightDetectionFeature::MergeFrom(from.traffic_light_detection());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_output()->::jmc_auto::planning::LearningOutput::MergeFrom(from.output());
    }
    if (cached_has_bits & 0x00000080u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_frame_num(from.frame_num());
  }
}

void LearningDataFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.LearningDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningDataFrame::CopyFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.LearningDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningDataFrame::IsInitialized() const {
  return true;
}

void LearningDataFrame::Swap(LearningDataFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningDataFrame::InternalSwap(LearningDataFrame* other) {
  obstacle_.InternalSwap(&other->obstacle_);
  adc_trajectory_point_.InternalSwap(&other->adc_trajectory_point_);
  map_name_.Swap(&other->map_name_);
  std::swap(planning_tag_, other->planning_tag_);
  std::swap(chassis_, other->chassis_);
  std::swap(localization_, other->localization_);
  std::swap(routing_, other->routing_);
  std::swap(traffic_light_detection_, other->traffic_light_detection_);
  std::swap(output_, other->output_);
  std::swap(message_timestamp_sec_, other->message_timestamp_sec_);
  std::swap(frame_num_, other->frame_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningDataFrame::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningDataFrame

// optional double message_timestamp_sec = 1;
bool LearningDataFrame::has_message_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LearningDataFrame::set_has_message_timestamp_sec() {
  _has_bits_[0] |= 0x00000080u;
}
void LearningDataFrame::clear_has_message_timestamp_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
void LearningDataFrame::clear_message_timestamp_sec() {
  message_timestamp_sec_ = 0;
  clear_has_message_timestamp_sec();
}
double LearningDataFrame::message_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.message_timestamp_sec)
  return message_timestamp_sec_;
}
void LearningDataFrame::set_message_timestamp_sec(double value) {
  set_has_message_timestamp_sec();
  message_timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LearningDataFrame.message_timestamp_sec)
}

// optional uint32 frame_num = 2;
bool LearningDataFrame::has_frame_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LearningDataFrame::set_has_frame_num() {
  _has_bits_[0] |= 0x00000100u;
}
void LearningDataFrame::clear_has_frame_num() {
  _has_bits_[0] &= ~0x00000100u;
}
void LearningDataFrame::clear_frame_num() {
  frame_num_ = 0u;
  clear_has_frame_num();
}
::google::protobuf::uint32 LearningDataFrame::frame_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.frame_num)
  return frame_num_;
}
void LearningDataFrame::set_frame_num(::google::protobuf::uint32 value) {
  set_has_frame_num();
  frame_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LearningDataFrame.frame_num)
}

// optional string map_name = 3;
bool LearningDataFrame::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LearningDataFrame::set_has_map_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LearningDataFrame::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LearningDataFrame::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& LearningDataFrame::map_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.map_name)
  return map_name_.GetNoArena();
}
void LearningDataFrame::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LearningDataFrame.map_name)
}
#if LANG_CXX11
void LearningDataFrame::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.LearningDataFrame.map_name)
}
#endif
void LearningDataFrame::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.LearningDataFrame.map_name)
}
void LearningDataFrame::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.LearningDataFrame.map_name)
}
::std::string* LearningDataFrame::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LearningDataFrame::release_map_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LearningDataFrame::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.map_name)
}

// optional .jmc_auto.planning.PlanningTag planning_tag = 4;
bool LearningDataFrame::has_planning_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LearningDataFrame::set_has_planning_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void LearningDataFrame::clear_has_planning_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void LearningDataFrame::clear_planning_tag() {
  if (planning_tag_ != NULL) planning_tag_->::jmc_auto::planning::PlanningTag::Clear();
  clear_has_planning_tag();
}
const ::jmc_auto::planning::PlanningTag& LearningDataFrame::planning_tag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.planning_tag)
  return planning_tag_ != NULL ? *planning_tag_
                         : *::jmc_auto::planning::PlanningTag::internal_default_instance();
}
::jmc_auto::planning::PlanningTag* LearningDataFrame::mutable_planning_tag() {
  set_has_planning_tag();
  if (planning_tag_ == NULL) {
    planning_tag_ = new ::jmc_auto::planning::PlanningTag;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.planning_tag)
  return planning_tag_;
}
::jmc_auto::planning::PlanningTag* LearningDataFrame::release_planning_tag() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.planning_tag)
  clear_has_planning_tag();
  ::jmc_auto::planning::PlanningTag* temp = planning_tag_;
  planning_tag_ = NULL;
  return temp;
}
void LearningDataFrame::set_allocated_planning_tag(::jmc_auto::planning::PlanningTag* planning_tag) {
  delete planning_tag_;
  planning_tag_ = planning_tag;
  if (planning_tag) {
    set_has_planning_tag();
  } else {
    clear_has_planning_tag();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.planning_tag)
}

// optional .jmc_auto.planning.ChassisFeature chassis = 5;
bool LearningDataFrame::has_chassis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LearningDataFrame::set_has_chassis() {
  _has_bits_[0] |= 0x00000004u;
}
void LearningDataFrame::clear_has_chassis() {
  _has_bits_[0] &= ~0x00000004u;
}
void LearningDataFrame::clear_chassis() {
  if (chassis_ != NULL) chassis_->::jmc_auto::planning::ChassisFeature::Clear();
  clear_has_chassis();
}
const ::jmc_auto::planning::ChassisFeature& LearningDataFrame::chassis() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.chassis)
  return chassis_ != NULL ? *chassis_
                         : *::jmc_auto::planning::ChassisFeature::internal_default_instance();
}
::jmc_auto::planning::ChassisFeature* LearningDataFrame::mutable_chassis() {
  set_has_chassis();
  if (chassis_ == NULL) {
    chassis_ = new ::jmc_auto::planning::ChassisFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.chassis)
  return chassis_;
}
::jmc_auto::planning::ChassisFeature* LearningDataFrame::release_chassis() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.chassis)
  clear_has_chassis();
  ::jmc_auto::planning::ChassisFeature* temp = chassis_;
  chassis_ = NULL;
  return temp;
}
void LearningDataFrame::set_allocated_chassis(::jmc_auto::planning::ChassisFeature* chassis) {
  delete chassis_;
  chassis_ = chassis;
  if (chassis) {
    set_has_chassis();
  } else {
    clear_has_chassis();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.chassis)
}

// optional .jmc_auto.planning.LocalizationFeature localization = 6;
bool LearningDataFrame::has_localization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LearningDataFrame::set_has_localization() {
  _has_bits_[0] |= 0x00000008u;
}
void LearningDataFrame::clear_has_localization() {
  _has_bits_[0] &= ~0x00000008u;
}
void LearningDataFrame::clear_localization() {
  if (localization_ != NULL) localization_->::jmc_auto::planning::LocalizationFeature::Clear();
  clear_has_localization();
}
const ::jmc_auto::planning::LocalizationFeature& LearningDataFrame::localization() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.localization)
  return localization_ != NULL ? *localization_
                         : *::jmc_auto::planning::LocalizationFeature::internal_default_instance();
}
::jmc_auto::planning::LocalizationFeature* LearningDataFrame::mutable_localization() {
  set_has_localization();
  if (localization_ == NULL) {
    localization_ = new ::jmc_auto::planning::LocalizationFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.localization)
  return localization_;
}
::jmc_auto::planning::LocalizationFeature* LearningDataFrame::release_localization() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.localization)
  clear_has_localization();
  ::jmc_auto::planning::LocalizationFeature* temp = localization_;
  localization_ = NULL;
  return temp;
}
void LearningDataFrame::set_allocated_localization(::jmc_auto::planning::LocalizationFeature* localization) {
  delete localization_;
  localization_ = localization;
  if (localization) {
    set_has_localization();
  } else {
    clear_has_localization();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.localization)
}

// repeated .jmc_auto.planning.ObstacleFeature obstacle = 7;
int LearningDataFrame::obstacle_size() const {
  return obstacle_.size();
}
void LearningDataFrame::clear_obstacle() {
  obstacle_.Clear();
}
const ::jmc_auto::planning::ObstacleFeature& LearningDataFrame::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.obstacle)
  return obstacle_.Get(index);
}
::jmc_auto::planning::ObstacleFeature* LearningDataFrame::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.obstacle)
  return obstacle_.Mutable(index);
}
::jmc_auto::planning::ObstacleFeature* LearningDataFrame::add_obstacle() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.LearningDataFrame.obstacle)
  return obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ObstacleFeature >*
LearningDataFrame::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.LearningDataFrame.obstacle)
  return &obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ObstacleFeature >&
LearningDataFrame::obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.LearningDataFrame.obstacle)
  return obstacle_;
}

// optional .jmc_auto.planning.RoutingFeature routing = 8;
bool LearningDataFrame::has_routing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LearningDataFrame::set_has_routing() {
  _has_bits_[0] |= 0x00000010u;
}
void LearningDataFrame::clear_has_routing() {
  _has_bits_[0] &= ~0x00000010u;
}
void LearningDataFrame::clear_routing() {
  if (routing_ != NULL) routing_->::jmc_auto::planning::RoutingFeature::Clear();
  clear_has_routing();
}
const ::jmc_auto::planning::RoutingFeature& LearningDataFrame::routing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.routing)
  return routing_ != NULL ? *routing_
                         : *::jmc_auto::planning::RoutingFeature::internal_default_instance();
}
::jmc_auto::planning::RoutingFeature* LearningDataFrame::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::jmc_auto::planning::RoutingFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.routing)
  return routing_;
}
::jmc_auto::planning::RoutingFeature* LearningDataFrame::release_routing() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.routing)
  clear_has_routing();
  ::jmc_auto::planning::RoutingFeature* temp = routing_;
  routing_ = NULL;
  return temp;
}
void LearningDataFrame::set_allocated_routing(::jmc_auto::planning::RoutingFeature* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.routing)
}

// optional .jmc_auto.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
bool LearningDataFrame::has_traffic_light_detection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LearningDataFrame::set_has_traffic_light_detection() {
  _has_bits_[0] |= 0x00000020u;
}
void LearningDataFrame::clear_has_traffic_light_detection() {
  _has_bits_[0] &= ~0x00000020u;
}
void LearningDataFrame::clear_traffic_light_detection() {
  if (traffic_light_detection_ != NULL) traffic_light_detection_->::jmc_auto::planning::TrafficLightDetectionFeature::Clear();
  clear_has_traffic_light_detection();
}
const ::jmc_auto::planning::TrafficLightDetectionFeature& LearningDataFrame::traffic_light_detection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.traffic_light_detection)
  return traffic_light_detection_ != NULL ? *traffic_light_detection_
                         : *::jmc_auto::planning::TrafficLightDetectionFeature::internal_default_instance();
}
::jmc_auto::planning::TrafficLightDetectionFeature* LearningDataFrame::mutable_traffic_light_detection() {
  set_has_traffic_light_detection();
  if (traffic_light_detection_ == NULL) {
    traffic_light_detection_ = new ::jmc_auto::planning::TrafficLightDetectionFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.traffic_light_detection)
  return traffic_light_detection_;
}
::jmc_auto::planning::TrafficLightDetectionFeature* LearningDataFrame::release_traffic_light_detection() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.traffic_light_detection)
  clear_has_traffic_light_detection();
  ::jmc_auto::planning::TrafficLightDetectionFeature* temp = traffic_light_detection_;
  traffic_light_detection_ = NULL;
  return temp;
}
void LearningDataFrame::set_allocated_traffic_light_detection(::jmc_auto::planning::TrafficLightDetectionFeature* traffic_light_detection) {
  delete traffic_light_detection_;
  traffic_light_detection_ = traffic_light_detection;
  if (traffic_light_detection) {
    set_has_traffic_light_detection();
  } else {
    clear_has_traffic_light_detection();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.traffic_light_detection)
}

// repeated .jmc_auto.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
int LearningDataFrame::adc_trajectory_point_size() const {
  return adc_trajectory_point_.size();
}
void LearningDataFrame::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
const ::jmc_auto::planning::ADCTrajectoryPoint& LearningDataFrame::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.adc_trajectory_point)
  return adc_trajectory_point_.Get(index);
}
::jmc_auto::planning::ADCTrajectoryPoint* LearningDataFrame::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.adc_trajectory_point)
  return adc_trajectory_point_.Mutable(index);
}
::jmc_auto::planning::ADCTrajectoryPoint* LearningDataFrame::add_adc_trajectory_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.LearningDataFrame.adc_trajectory_point)
  return adc_trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ADCTrajectoryPoint >*
LearningDataFrame::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.LearningDataFrame.adc_trajectory_point)
  return &adc_trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ADCTrajectoryPoint >&
LearningDataFrame::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.LearningDataFrame.adc_trajectory_point)
  return adc_trajectory_point_;
}

// optional .jmc_auto.planning.LearningOutput output = 11;
bool LearningDataFrame::has_output() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LearningDataFrame::set_has_output() {
  _has_bits_[0] |= 0x00000040u;
}
void LearningDataFrame::clear_has_output() {
  _has_bits_[0] &= ~0x00000040u;
}
void LearningDataFrame::clear_output() {
  if (output_ != NULL) output_->::jmc_auto::planning::LearningOutput::Clear();
  clear_has_output();
}
const ::jmc_auto::planning::LearningOutput& LearningDataFrame::output() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningDataFrame.output)
  return output_ != NULL ? *output_
                         : *::jmc_auto::planning::LearningOutput::internal_default_instance();
}
::jmc_auto::planning::LearningOutput* LearningDataFrame::mutable_output() {
  set_has_output();
  if (output_ == NULL) {
    output_ = new ::jmc_auto::planning::LearningOutput;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningDataFrame.output)
  return output_;
}
::jmc_auto::planning::LearningOutput* LearningDataFrame::release_output() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.LearningDataFrame.output)
  clear_has_output();
  ::jmc_auto::planning::LearningOutput* temp = output_;
  output_ = NULL;
  return temp;
}
void LearningDataFrame::set_allocated_output(::jmc_auto::planning::LearningOutput* output) {
  delete output_;
  output_ = output;
  if (output) {
    set_has_output();
  } else {
    clear_has_output();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.LearningDataFrame.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningData::kLearningDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningData::LearningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.LearningData)
}
LearningData::LearningData(const LearningData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      learning_data_(from.learning_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.LearningData)
}

void LearningData::SharedCtor() {
  _cached_size_ = 0;
}

LearningData::~LearningData() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.LearningData)
  SharedDtor();
}

void LearningData::SharedDtor() {
}

void LearningData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningData::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningData& LearningData::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LearningData* LearningData::New(::google::protobuf::Arena* arena) const {
  LearningData* n = new LearningData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.LearningData)
  learning_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.LearningData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.LearningDataFrame learning_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_learning_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.LearningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.LearningData)
  return false;
#undef DO_
}

void LearningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.LearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.LearningDataFrame learning_data = 1;
  for (unsigned int i = 0, n = this->learning_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->learning_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.LearningData)
}

::google::protobuf::uint8* LearningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.LearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.LearningDataFrame learning_data = 1;
  for (unsigned int i = 0, n = this->learning_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->learning_data(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.LearningData)
  return target;
}

size_t LearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.LearningData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.LearningDataFrame learning_data = 1;
  {
    unsigned int count = this->learning_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->learning_data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.LearningData)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.LearningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.LearningData)
    MergeFrom(*source);
  }
}

void LearningData::MergeFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.LearningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  learning_data_.MergeFrom(from.learning_data_);
}

void LearningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.LearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningData::CopyFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.LearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningData::IsInitialized() const {
  return true;
}

void LearningData::Swap(LearningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningData::InternalSwap(LearningData* other) {
  learning_data_.InternalSwap(&other->learning_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LearningData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LearningData

// repeated .jmc_auto.planning.LearningDataFrame learning_data = 1;
int LearningData::learning_data_size() const {
  return learning_data_.size();
}
void LearningData::clear_learning_data() {
  learning_data_.Clear();
}
const ::jmc_auto::planning::LearningDataFrame& LearningData::learning_data(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LearningData.learning_data)
  return learning_data_.Get(index);
}
::jmc_auto::planning::LearningDataFrame* LearningData::mutable_learning_data(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LearningData.learning_data)
  return learning_data_.Mutable(index);
}
::jmc_auto::planning::LearningDataFrame* LearningData::add_learning_data() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.LearningData.learning_data)
  return learning_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::LearningDataFrame >*
LearningData::mutable_learning_data() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.LearningData.learning_data)
  return &learning_data_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::LearningDataFrame >&
LearningData::learning_data() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.LearningData.learning_data)
  return learning_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
