// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_partition_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class OpenSpaceTrajectoryPartitionConfig;
class OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal _OpenSpaceTrajectoryPartitionConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto

// ===================================================================

class OpenSpaceTrajectoryPartitionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig) */ {
 public:
  OpenSpaceTrajectoryPartitionConfig();
  virtual ~OpenSpaceTrajectoryPartitionConfig();

  OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from);

  inline OpenSpaceTrajectoryPartitionConfig& operator=(const OpenSpaceTrajectoryPartitionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceTrajectoryPartitionConfig& default_instance();

  static inline const OpenSpaceTrajectoryPartitionConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryPartitionConfig*>(
               &_OpenSpaceTrajectoryPartitionConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OpenSpaceTrajectoryPartitionConfig* other);

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryPartitionConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenSpaceTrajectoryPartitionConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenSpaceTrajectoryPartitionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double gear_shift_max_t = 1;
  bool has_gear_shift_max_t() const;
  void clear_gear_shift_max_t();
  static const int kGearShiftMaxTFieldNumber = 1;
  double gear_shift_max_t() const;
  void set_gear_shift_max_t(double value);

  // optional double gear_shift_unit_t = 2;
  bool has_gear_shift_unit_t() const;
  void clear_gear_shift_unit_t();
  static const int kGearShiftUnitTFieldNumber = 2;
  double gear_shift_unit_t() const;
  void set_gear_shift_unit_t(double value);

  // optional double gear_shift_period_duration = 3;
  bool has_gear_shift_period_duration() const;
  void clear_gear_shift_period_duration();
  static const int kGearShiftPeriodDurationFieldNumber = 3;
  double gear_shift_period_duration() const;
  void set_gear_shift_period_duration(double value);

  // optional uint64 interpolated_pieces_num = 4;
  bool has_interpolated_pieces_num() const;
  void clear_interpolated_pieces_num();
  static const int kInterpolatedPiecesNumFieldNumber = 4;
  ::google::protobuf::uint64 interpolated_pieces_num() const;
  void set_interpolated_pieces_num(::google::protobuf::uint64 value);

  // optional uint64 initial_gear_check_horizon = 5;
  bool has_initial_gear_check_horizon() const;
  void clear_initial_gear_check_horizon();
  static const int kInitialGearCheckHorizonFieldNumber = 5;
  ::google::protobuf::uint64 initial_gear_check_horizon() const;
  void set_initial_gear_check_horizon(::google::protobuf::uint64 value);

  // optional double heading_search_range = 6;
  bool has_heading_search_range() const;
  void clear_heading_search_range();
  static const int kHeadingSearchRangeFieldNumber = 6;
  double heading_search_range() const;
  void set_heading_search_range(double value);

  // optional double heading_track_range = 7;
  bool has_heading_track_range() const;
  void clear_heading_track_range();
  static const int kHeadingTrackRangeFieldNumber = 7;
  double heading_track_range() const;
  void set_heading_track_range(double value);

  // optional double heading_offset_to_midpoint = 9;
  bool has_heading_offset_to_midpoint() const;
  void clear_heading_offset_to_midpoint();
  static const int kHeadingOffsetToMidpointFieldNumber = 9;
  double heading_offset_to_midpoint() const;
  void set_heading_offset_to_midpoint(double value);

  // optional double distance_search_range = 8 [default = 1e-06];
  bool has_distance_search_range() const;
  void clear_distance_search_range();
  static const int kDistanceSearchRangeFieldNumber = 8;
  double distance_search_range() const;
  void set_distance_search_range(double value);

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  bool has_lateral_offset_to_midpoint() const;
  void clear_lateral_offset_to_midpoint();
  static const int kLateralOffsetToMidpointFieldNumber = 10;
  double lateral_offset_to_midpoint() const;
  void set_lateral_offset_to_midpoint(double value);

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  bool has_longitudinal_offset_to_midpoint() const;
  void clear_longitudinal_offset_to_midpoint();
  static const int kLongitudinalOffsetToMidpointFieldNumber = 11;
  double longitudinal_offset_to_midpoint() const;
  void set_longitudinal_offset_to_midpoint(double value);

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  bool has_vehicle_box_iou_threshold_to_midpoint() const;
  void clear_vehicle_box_iou_threshold_to_midpoint();
  static const int kVehicleBoxIouThresholdToMidpointFieldNumber = 12;
  double vehicle_box_iou_threshold_to_midpoint() const;
  void set_vehicle_box_iou_threshold_to_midpoint(double value);

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  bool has_linear_velocity_threshold_on_ego() const;
  void clear_linear_velocity_threshold_on_ego();
  static const int kLinearVelocityThresholdOnEgoFieldNumber = 13;
  double linear_velocity_threshold_on_ego() const;
  void set_linear_velocity_threshold_on_ego(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
 private:
  void set_has_gear_shift_max_t();
  void clear_has_gear_shift_max_t();
  void set_has_gear_shift_unit_t();
  void clear_has_gear_shift_unit_t();
  void set_has_gear_shift_period_duration();
  void clear_has_gear_shift_period_duration();
  void set_has_interpolated_pieces_num();
  void clear_has_interpolated_pieces_num();
  void set_has_initial_gear_check_horizon();
  void clear_has_initial_gear_check_horizon();
  void set_has_heading_search_range();
  void clear_has_heading_search_range();
  void set_has_heading_track_range();
  void clear_has_heading_track_range();
  void set_has_distance_search_range();
  void clear_has_distance_search_range();
  void set_has_heading_offset_to_midpoint();
  void clear_has_heading_offset_to_midpoint();
  void set_has_lateral_offset_to_midpoint();
  void clear_has_lateral_offset_to_midpoint();
  void set_has_longitudinal_offset_to_midpoint();
  void clear_has_longitudinal_offset_to_midpoint();
  void set_has_vehicle_box_iou_threshold_to_midpoint();
  void clear_has_vehicle_box_iou_threshold_to_midpoint();
  void set_has_linear_velocity_threshold_on_ego();
  void clear_has_linear_velocity_threshold_on_ego();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double gear_shift_max_t_;
  double gear_shift_unit_t_;
  double gear_shift_period_duration_;
  ::google::protobuf::uint64 interpolated_pieces_num_;
  ::google::protobuf::uint64 initial_gear_check_horizon_;
  double heading_search_range_;
  double heading_track_range_;
  double heading_offset_to_midpoint_;
  double distance_search_range_;
  double lateral_offset_to_midpoint_;
  double longitudinal_offset_to_midpoint_;
  double vehicle_box_iou_threshold_to_midpoint_;
  double linear_velocity_threshold_on_ego_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceTrajectoryPartitionConfig

// optional double gear_shift_max_t = 1;
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_max_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_max_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 0;
  clear_has_gear_shift_max_t();
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
  return gear_shift_max_t_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  set_has_gear_shift_max_t();
  gear_shift_max_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 2;
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_unit_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_unit_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0;
  clear_has_gear_shift_unit_t();
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
  return gear_shift_unit_t_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  set_has_gear_shift_unit_t();
  gear_shift_unit_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
}

// optional double gear_shift_period_duration = 3;
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_period_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_period_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 0;
  clear_has_gear_shift_period_duration();
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
  return gear_shift_period_duration_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  set_has_gear_shift_period_duration();
  gear_shift_period_duration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional uint64 interpolated_pieces_num = 4;
inline bool OpenSpaceTrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_interpolated_pieces_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_interpolated_pieces_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(0);
  clear_has_interpolated_pieces_num();
}
inline ::google::protobuf::uint64 OpenSpaceTrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
  return interpolated_pieces_num_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_interpolated_pieces_num(::google::protobuf::uint64 value) {
  set_has_interpolated_pieces_num();
  interpolated_pieces_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 5;
inline bool OpenSpaceTrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_initial_gear_check_horizon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_initial_gear_check_horizon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(0);
  clear_has_initial_gear_check_horizon();
}
inline ::google::protobuf::uint64 OpenSpaceTrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
  return initial_gear_check_horizon_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_initial_gear_check_horizon(::google::protobuf::uint64 value) {
  set_has_initial_gear_check_horizon();
  initial_gear_check_horizon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_search_range = 6;
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_search_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_heading_search_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_search_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_search_range() {
  heading_search_range_ = 0;
  clear_has_heading_search_range();
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_search_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
  return heading_search_range_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_search_range(double value) {
  set_has_heading_search_range();
  heading_search_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
}

// optional double heading_track_range = 7;
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_track_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_heading_track_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_track_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_track_range() {
  heading_track_range_ = 0;
  clear_has_heading_track_range();
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_track_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
  return heading_track_range_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_track_range(double value) {
  set_has_heading_track_range();
  heading_track_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
}

// optional double distance_search_range = 8 [default = 1e-06];
inline bool OpenSpaceTrajectoryPartitionConfig::has_distance_search_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_distance_search_range() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_distance_search_range() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_distance_search_range() {
  distance_search_range_ = 1e-06;
  clear_has_distance_search_range();
}
inline double OpenSpaceTrajectoryPartitionConfig::distance_search_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
  return distance_search_range_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_distance_search_range(double value) {
  set_has_distance_search_range();
  distance_search_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
}

// optional double heading_offset_to_midpoint = 9;
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_heading_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_offset_to_midpoint() {
  heading_offset_to_midpoint_ = 0;
  clear_has_heading_offset_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
  return heading_offset_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_offset_to_midpoint(double value) {
  set_has_heading_offset_to_midpoint();
  heading_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
}

// optional double lateral_offset_to_midpoint = 10 [default = 0.1];
inline bool OpenSpaceTrajectoryPartitionConfig::has_lateral_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_lateral_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_lateral_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_lateral_offset_to_midpoint() {
  lateral_offset_to_midpoint_ = 0.1;
  clear_has_lateral_offset_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::lateral_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
  return lateral_offset_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_lateral_offset_to_midpoint(double value) {
  set_has_lateral_offset_to_midpoint();
  lateral_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
}

// optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
inline bool OpenSpaceTrajectoryPartitionConfig::has_longitudinal_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_longitudinal_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_longitudinal_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_longitudinal_offset_to_midpoint() {
  longitudinal_offset_to_midpoint_ = 0.1;
  clear_has_longitudinal_offset_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::longitudinal_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
  return longitudinal_offset_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_longitudinal_offset_to_midpoint(double value) {
  set_has_longitudinal_offset_to_midpoint();
  longitudinal_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
}

// optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
inline bool OpenSpaceTrajectoryPartitionConfig::has_vehicle_box_iou_threshold_to_midpoint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_vehicle_box_iou_threshold_to_midpoint() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_vehicle_box_iou_threshold_to_midpoint() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_vehicle_box_iou_threshold_to_midpoint() {
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  clear_has_vehicle_box_iou_threshold_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::vehicle_box_iou_threshold_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
  return vehicle_box_iou_threshold_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_vehicle_box_iou_threshold_to_midpoint(double value) {
  set_has_vehicle_box_iou_threshold_to_midpoint();
  vehicle_box_iou_threshold_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
}

// optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
inline bool OpenSpaceTrajectoryPartitionConfig::has_linear_velocity_threshold_on_ego() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_linear_velocity_threshold_on_ego() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_linear_velocity_threshold_on_ego() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_linear_velocity_threshold_on_ego() {
  linear_velocity_threshold_on_ego_ = 0.2;
  clear_has_linear_velocity_threshold_on_ego();
}
inline double OpenSpaceTrajectoryPartitionConfig::linear_velocity_threshold_on_ego() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.linear_velocity_threshold_on_ego)
  return linear_velocity_threshold_on_ego_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_linear_velocity_threshold_on_ego(double value) {
  set_has_linear_velocity_threshold_on_ego();
  linear_velocity_threshold_on_ego_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.linear_velocity_threshold_on_ego)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto__INCLUDED
