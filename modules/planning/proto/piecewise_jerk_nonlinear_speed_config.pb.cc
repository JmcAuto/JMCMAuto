// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/piecewise_jerk_nonlinear_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/piecewise_jerk_nonlinear_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class PiecewiseJerkNonlinearSpeedConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkNonlinearSpeedConfig> {
} _PiecewiseJerkNonlinearSpeedConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, lat_acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, s_potential_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, ref_v_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, ref_s_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, end_s_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, end_v_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, end_a_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, soft_s_bound_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkNonlinearSpeedConfig, use_warm_start_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(PiecewiseJerkNonlinearSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PiecewiseJerkNonlinearSpeedConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/piecewise_jerk_nonlinear_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PiecewiseJerkNonlinearSpeedConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PiecewiseJerkNonlinearSpeedConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nBmodules/planning/proto/piecewise_jerk_"
      "nonlinear_speed_config.proto\022\021jmc_auto.p"
      "lanning\"\324\002\n!PiecewiseJerkNonlinearSpeedC"
      "onfig\022\027\n\nacc_weight\030\001 \001(\001:\003500\022\030\n\013jerk_w"
      "eight\030\002 \001(\001:\003100\022\033\n\016lat_acc_weight\030\003 \001(\001"
      ":\003500\022\036\n\022s_potential_weight\030\004 \001(\001:\00210\022\030\n"
      "\014ref_v_weight\030\005 \001(\001:\00210\022\030\n\014ref_s_weight\030"
      "\006 \001(\001:\00210\022\030\n\014end_s_weight\030\007 \001(\001:\00210\022\030\n\014e"
      "nd_v_weight\030\010 \001(\001:\00210\022\030\n\014end_a_weight\030\t "
      "\001(\001:\00210\022\037\n\023soft_s_bound_weight\030\n \001(\001:\00210"
      "\022\034\n\016use_warm_start\030d \001(\010:\004true"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/piecewise_jerk_nonlinear_speed_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkNonlinearSpeedConfig::kAccWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kJerkWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kLatAccWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kSPotentialWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kRefVWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kRefSWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kEndSWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kEndVWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kEndAWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kSoftSBoundWeightFieldNumber;
const int PiecewiseJerkNonlinearSpeedConfig::kUseWarmStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkNonlinearSpeedConfig::PiecewiseJerkNonlinearSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
}
PiecewiseJerkNonlinearSpeedConfig::PiecewiseJerkNonlinearSpeedConfig(const PiecewiseJerkNonlinearSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_warm_start_, &from.use_warm_start_,
    reinterpret_cast<char*>(&soft_s_bound_weight_) -
    reinterpret_cast<char*>(&use_warm_start_) + sizeof(soft_s_bound_weight_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
}

void PiecewiseJerkNonlinearSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  use_warm_start_ = true;
  acc_weight_ = 500;
  jerk_weight_ = 100;
  lat_acc_weight_ = 500;
  s_potential_weight_ = 10;
  ref_v_weight_ = 10;
  ref_s_weight_ = 10;
  end_s_weight_ = 10;
  end_v_weight_ = 10;
  end_a_weight_ = 10;
  soft_s_bound_weight_ = 10;
}

PiecewiseJerkNonlinearSpeedConfig::~PiecewiseJerkNonlinearSpeedConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  SharedDtor();
}

void PiecewiseJerkNonlinearSpeedConfig::SharedDtor() {
}

void PiecewiseJerkNonlinearSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseJerkNonlinearSpeedConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkNonlinearSpeedConfig& PiecewiseJerkNonlinearSpeedConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PiecewiseJerkNonlinearSpeedConfig* PiecewiseJerkNonlinearSpeedConfig::New(::google::protobuf::Arena* arena) const {
  PiecewiseJerkNonlinearSpeedConfig* n = new PiecewiseJerkNonlinearSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiecewiseJerkNonlinearSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  if (_has_bits_[0 / 32] & 255u) {
    use_warm_start_ = true;
    acc_weight_ = 500;
    jerk_weight_ = 100;
    lat_acc_weight_ = 500;
    s_potential_weight_ = 10;
    ref_v_weight_ = 10;
    ref_s_weight_ = 10;
    end_s_weight_ = 10;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    end_v_weight_ = 10;
    end_a_weight_ = 10;
    soft_s_bound_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkNonlinearSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_weight = 1 [default = 500];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_acc_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 2 [default = 100];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat_acc_weight = 3 [default = 500];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_lat_acc_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s_potential_weight = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_s_potential_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_potential_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_v_weight = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ref_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_s_weight = 6 [default = 10];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_ref_s_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s_weight = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_end_s_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_v_weight = 8 [default = 10];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_end_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_a_weight = 9 [default = 10];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_end_a_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_a_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_s_bound_weight = 10 [default = 10];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_soft_s_bound_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_s_bound_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_warm_start = 100 [default = true];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_use_warm_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_warm_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  return false;
#undef DO_
}

void PiecewiseJerkNonlinearSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 500];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_weight(), output);
  }

  // optional double jerk_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jerk_weight(), output);
  }

  // optional double lat_acc_weight = 3 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat_acc_weight(), output);
  }

  // optional double s_potential_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->s_potential_weight(), output);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ref_v_weight(), output);
  }

  // optional double ref_s_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ref_s_weight(), output);
  }

  // optional double end_s_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->end_s_weight(), output);
  }

  // optional double end_v_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->end_v_weight(), output);
  }

  // optional double end_a_weight = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->end_a_weight(), output);
  }

  // optional double soft_s_bound_weight = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->soft_s_bound_weight(), output);
  }

  // optional bool use_warm_start = 100 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->use_warm_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
}

::google::protobuf::uint8* PiecewiseJerkNonlinearSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 500];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jerk_weight(), target);
  }

  // optional double lat_acc_weight = 3 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat_acc_weight(), target);
  }

  // optional double s_potential_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->s_potential_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ref_v_weight(), target);
  }

  // optional double ref_s_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ref_s_weight(), target);
  }

  // optional double end_s_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->end_s_weight(), target);
  }

  // optional double end_v_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->end_v_weight(), target);
  }

  // optional double end_a_weight = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->end_a_weight(), target);
  }

  // optional double soft_s_bound_weight = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->soft_s_bound_weight(), target);
  }

  // optional bool use_warm_start = 100 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->use_warm_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  return target;
}

size_t PiecewiseJerkNonlinearSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool use_warm_start = 100 [default = true];
    if (has_use_warm_start()) {
      total_size += 2 + 1;
    }

    // optional double acc_weight = 1 [default = 500];
    if (has_acc_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 100];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double lat_acc_weight = 3 [default = 500];
    if (has_lat_acc_weight()) {
      total_size += 1 + 8;
    }

    // optional double s_potential_weight = 4 [default = 10];
    if (has_s_potential_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (has_ref_v_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 6 [default = 10];
    if (has_ref_s_weight()) {
      total_size += 1 + 8;
    }

    // optional double end_s_weight = 7 [default = 10];
    if (has_end_s_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double end_v_weight = 8 [default = 10];
    if (has_end_v_weight()) {
      total_size += 1 + 8;
    }

    // optional double end_a_weight = 9 [default = 10];
    if (has_end_a_weight()) {
      total_size += 1 + 8;
    }

    // optional double soft_s_bound_weight = 10 [default = 10];
    if (has_soft_s_bound_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseJerkNonlinearSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkNonlinearSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkNonlinearSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkNonlinearSpeedConfig::MergeFrom(const PiecewiseJerkNonlinearSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_warm_start_ = from.use_warm_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      lat_acc_weight_ = from.lat_acc_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_potential_weight_ = from.s_potential_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      end_s_weight_ = from.end_s_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      end_v_weight_ = from.end_v_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      end_a_weight_ = from.end_a_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      soft_s_bound_weight_ = from.soft_s_bound_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkNonlinearSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkNonlinearSpeedConfig::CopyFrom(const PiecewiseJerkNonlinearSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkNonlinearSpeedConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkNonlinearSpeedConfig::Swap(PiecewiseJerkNonlinearSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkNonlinearSpeedConfig::InternalSwap(PiecewiseJerkNonlinearSpeedConfig* other) {
  std::swap(use_warm_start_, other->use_warm_start_);
  std::swap(acc_weight_, other->acc_weight_);
  std::swap(jerk_weight_, other->jerk_weight_);
  std::swap(lat_acc_weight_, other->lat_acc_weight_);
  std::swap(s_potential_weight_, other->s_potential_weight_);
  std::swap(ref_v_weight_, other->ref_v_weight_);
  std::swap(ref_s_weight_, other->ref_s_weight_);
  std::swap(end_s_weight_, other->end_s_weight_);
  std::swap(end_v_weight_, other->end_v_weight_);
  std::swap(end_a_weight_, other->end_a_weight_);
  std::swap(soft_s_bound_weight_, other->soft_s_bound_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiecewiseJerkNonlinearSpeedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PiecewiseJerkNonlinearSpeedConfig

// optional double acc_weight = 1 [default = 500];
bool PiecewiseJerkNonlinearSpeedConfig::has_acc_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_acc_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_acc_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_acc_weight() {
  acc_weight_ = 500;
  clear_has_acc_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.acc_weight)
  return acc_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_acc_weight(double value) {
  set_has_acc_weight();
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 100];
bool PiecewiseJerkNonlinearSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 100;
  clear_has_jerk_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.jerk_weight)
  return jerk_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.jerk_weight)
}

// optional double lat_acc_weight = 3 [default = 500];
bool PiecewiseJerkNonlinearSpeedConfig::has_lat_acc_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_lat_acc_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_lat_acc_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_lat_acc_weight() {
  lat_acc_weight_ = 500;
  clear_has_lat_acc_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::lat_acc_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.lat_acc_weight)
  return lat_acc_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_lat_acc_weight(double value) {
  set_has_lat_acc_weight();
  lat_acc_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.lat_acc_weight)
}

// optional double s_potential_weight = 4 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_s_potential_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_s_potential_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_s_potential_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_s_potential_weight() {
  s_potential_weight_ = 10;
  clear_has_s_potential_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::s_potential_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.s_potential_weight)
  return s_potential_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_s_potential_weight(double value) {
  set_has_s_potential_weight();
  s_potential_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.s_potential_weight)
}

// optional double ref_v_weight = 5 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_ref_v_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_ref_v_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_ref_v_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  clear_has_ref_v_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_v_weight)
  return ref_v_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_ref_v_weight(double value) {
  set_has_ref_v_weight();
  ref_v_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_v_weight)
}

// optional double ref_s_weight = 6 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_ref_s_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_ref_s_weight() {
  _has_bits_[0] |= 0x00000040u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_ref_s_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  clear_has_ref_s_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_s_weight)
  return ref_s_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_ref_s_weight(double value) {
  set_has_ref_s_weight();
  ref_s_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_s_weight)
}

// optional double end_s_weight = 7 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_end_s_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_end_s_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_end_s_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_end_s_weight() {
  end_s_weight_ = 10;
  clear_has_end_s_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::end_s_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_s_weight)
  return end_s_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_end_s_weight(double value) {
  set_has_end_s_weight();
  end_s_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_s_weight)
}

// optional double end_v_weight = 8 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_end_v_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_end_v_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_end_v_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_end_v_weight() {
  end_v_weight_ = 10;
  clear_has_end_v_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::end_v_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_v_weight)
  return end_v_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_end_v_weight(double value) {
  set_has_end_v_weight();
  end_v_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_v_weight)
}

// optional double end_a_weight = 9 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_end_a_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_end_a_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_end_a_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_end_a_weight() {
  end_a_weight_ = 10;
  clear_has_end_a_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::end_a_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_a_weight)
  return end_a_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_end_a_weight(double value) {
  set_has_end_a_weight();
  end_a_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_a_weight)
}

// optional double soft_s_bound_weight = 10 [default = 10];
bool PiecewiseJerkNonlinearSpeedConfig::has_soft_s_bound_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_soft_s_bound_weight() {
  _has_bits_[0] |= 0x00000400u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_soft_s_bound_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_soft_s_bound_weight() {
  soft_s_bound_weight_ = 10;
  clear_has_soft_s_bound_weight();
}
double PiecewiseJerkNonlinearSpeedConfig::soft_s_bound_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.soft_s_bound_weight)
  return soft_s_bound_weight_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_soft_s_bound_weight(double value) {
  set_has_soft_s_bound_weight();
  soft_s_bound_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.soft_s_bound_weight)
}

// optional bool use_warm_start = 100 [default = true];
bool PiecewiseJerkNonlinearSpeedConfig::has_use_warm_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PiecewiseJerkNonlinearSpeedConfig::set_has_use_warm_start() {
  _has_bits_[0] |= 0x00000001u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_has_use_warm_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void PiecewiseJerkNonlinearSpeedConfig::clear_use_warm_start() {
  use_warm_start_ = true;
  clear_has_use_warm_start();
}
bool PiecewiseJerkNonlinearSpeedConfig::use_warm_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.use_warm_start)
  return use_warm_start_;
}
void PiecewiseJerkNonlinearSpeedConfig::set_use_warm_start(bool value) {
  set_has_use_warm_start();
  use_warm_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.use_warm_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
