// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/rule_based_stop_decider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/rule_based_stop_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class RuleBasedStopDeciderConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuleBasedStopDeciderConfig> {
} _RuleBasedStopDeciderConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, max_adc_stop_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, search_beam_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, search_beam_radius_intensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, search_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, is_block_angle_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, approach_distance_for_lane_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleBasedStopDeciderConfig, urgent_distance_for_lane_change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(RuleBasedStopDeciderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuleBasedStopDeciderConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/rule_based_stop_decider_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _RuleBasedStopDeciderConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RuleBasedStopDeciderConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n;modules/planning/proto/rule_based_stop"
      "_decider_config.proto\022\021jmc_auto.planning"
      "\"\316\002\n\032RuleBasedStopDeciderConfig\022\037\n\022max_a"
      "dc_stop_speed\030\001 \001(\001:\0030.3\022$\n\027max_valid_st"
      "op_distance\030\002 \001(\001:\0030.5\022\035\n\022search_beam_le"
      "ngth\030\003 \001(\001:\0015\022*\n\034search_beam_radius_inte"
      "nsity\030\004 \001(\001:\0040.08\022\032\n\014search_range\030\005 \001(\001:"
      "\0043.14\022&\n\030is_block_angle_threshold\030\006 \001(\001:"
      "\0041.57\022-\n!approach_distance_for_lane_chan"
      "ge\030\n \001(\001:\00280\022+\n\037urgent_distance_for_lane"
      "_change\030\013 \001(\001:\00250"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/rule_based_stop_decider_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleBasedStopDeciderConfig::kMaxAdcStopSpeedFieldNumber;
const int RuleBasedStopDeciderConfig::kMaxValidStopDistanceFieldNumber;
const int RuleBasedStopDeciderConfig::kSearchBeamLengthFieldNumber;
const int RuleBasedStopDeciderConfig::kSearchBeamRadiusIntensityFieldNumber;
const int RuleBasedStopDeciderConfig::kSearchRangeFieldNumber;
const int RuleBasedStopDeciderConfig::kIsBlockAngleThresholdFieldNumber;
const int RuleBasedStopDeciderConfig::kApproachDistanceForLaneChangeFieldNumber;
const int RuleBasedStopDeciderConfig::kUrgentDistanceForLaneChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.RuleBasedStopDeciderConfig)
}
RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_adc_stop_speed_, &from.max_adc_stop_speed_,
    reinterpret_cast<char*>(&urgent_distance_for_lane_change_) -
    reinterpret_cast<char*>(&max_adc_stop_speed_) + sizeof(urgent_distance_for_lane_change_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.RuleBasedStopDeciderConfig)
}

void RuleBasedStopDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  max_adc_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 0.5;
  search_beam_length_ = 5;
  search_beam_radius_intensity_ = 0.08;
  search_range_ = 3.14;
  is_block_angle_threshold_ = 1.57;
  approach_distance_for_lane_change_ = 80;
  urgent_distance_for_lane_change_ = 50;
}

RuleBasedStopDeciderConfig::~RuleBasedStopDeciderConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.RuleBasedStopDeciderConfig)
  SharedDtor();
}

void RuleBasedStopDeciderConfig::SharedDtor() {
}

void RuleBasedStopDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleBasedStopDeciderConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuleBasedStopDeciderConfig& RuleBasedStopDeciderConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuleBasedStopDeciderConfig* RuleBasedStopDeciderConfig::New(::google::protobuf::Arena* arena) const {
  RuleBasedStopDeciderConfig* n = new RuleBasedStopDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuleBasedStopDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  if (_has_bits_[0 / 32] & 255u) {
    max_adc_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 0.5;
    search_beam_length_ = 5;
    search_beam_radius_intensity_ = 0.08;
    search_range_ = 3.14;
    is_block_angle_threshold_ = 1.57;
    approach_distance_for_lane_change_ = 80;
    urgent_distance_for_lane_change_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RuleBasedStopDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_adc_stop_speed = 1 [default = 0.3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_max_adc_stop_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_adc_stop_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double search_beam_length = 3 [default = 5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_search_beam_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_beam_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double search_beam_radius_intensity = 4 [default = 0.08];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_search_beam_radius_intensity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_beam_radius_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double search_range = 5 [default = 3.14];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_search_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_block_angle_threshold = 6 [default = 1.57];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_is_block_angle_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_block_angle_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double approach_distance_for_lane_change = 10 [default = 80];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_approach_distance_for_lane_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &approach_distance_for_lane_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double urgent_distance_for_lane_change = 11 [default = 50];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_urgent_distance_for_lane_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &urgent_distance_for_lane_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.RuleBasedStopDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.RuleBasedStopDeciderConfig)
  return false;
#undef DO_
}

void RuleBasedStopDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_adc_stop_speed(), output);
  }

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_valid_stop_distance(), output);
  }

  // optional double search_beam_length = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->search_beam_length(), output);
  }

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->search_beam_radius_intensity(), output);
  }

  // optional double search_range = 5 [default = 3.14];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->search_range(), output);
  }

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->is_block_angle_threshold(), output);
  }

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->approach_distance_for_lane_change(), output);
  }

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->urgent_distance_for_lane_change(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.RuleBasedStopDeciderConfig)
}

::google::protobuf::uint8* RuleBasedStopDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_adc_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_valid_stop_distance(), target);
  }

  // optional double search_beam_length = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->search_beam_length(), target);
  }

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->search_beam_radius_intensity(), target);
  }

  // optional double search_range = 5 [default = 3.14];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->search_range(), target);
  }

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->is_block_angle_threshold(), target);
  }

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->approach_distance_for_lane_change(), target);
  }

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->urgent_distance_for_lane_change(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.RuleBasedStopDeciderConfig)
  return target;
}

size_t RuleBasedStopDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_adc_stop_speed = 1 [default = 0.3];
    if (has_max_adc_stop_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 0.5];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double search_beam_length = 3 [default = 5];
    if (has_search_beam_length()) {
      total_size += 1 + 8;
    }

    // optional double search_beam_radius_intensity = 4 [default = 0.08];
    if (has_search_beam_radius_intensity()) {
      total_size += 1 + 8;
    }

    // optional double search_range = 5 [default = 3.14];
    if (has_search_range()) {
      total_size += 1 + 8;
    }

    // optional double is_block_angle_threshold = 6 [default = 1.57];
    if (has_is_block_angle_threshold()) {
      total_size += 1 + 8;
    }

    // optional double approach_distance_for_lane_change = 10 [default = 80];
    if (has_approach_distance_for_lane_change()) {
      total_size += 1 + 8;
    }

    // optional double urgent_distance_for_lane_change = 11 [default = 50];
    if (has_urgent_distance_for_lane_change()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleBasedStopDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleBasedStopDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleBasedStopDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.RuleBasedStopDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.RuleBasedStopDeciderConfig)
    MergeFrom(*source);
  }
}

void RuleBasedStopDeciderConfig::MergeFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_beam_length_ = from.search_beam_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      search_beam_radius_intensity_ = from.search_beam_radius_intensity_;
    }
    if (cached_has_bits & 0x00000010u) {
      search_range_ = from.search_range_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_block_angle_threshold_ = from.is_block_angle_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      approach_distance_for_lane_change_ = from.approach_distance_for_lane_change_;
    }
    if (cached_has_bits & 0x00000080u) {
      urgent_distance_for_lane_change_ = from.urgent_distance_for_lane_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuleBasedStopDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleBasedStopDeciderConfig::CopyFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleBasedStopDeciderConfig::IsInitialized() const {
  return true;
}

void RuleBasedStopDeciderConfig::Swap(RuleBasedStopDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuleBasedStopDeciderConfig::InternalSwap(RuleBasedStopDeciderConfig* other) {
  std::swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  std::swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  std::swap(search_beam_length_, other->search_beam_length_);
  std::swap(search_beam_radius_intensity_, other->search_beam_radius_intensity_);
  std::swap(search_range_, other->search_range_);
  std::swap(is_block_angle_threshold_, other->is_block_angle_threshold_);
  std::swap(approach_distance_for_lane_change_, other->approach_distance_for_lane_change_);
  std::swap(urgent_distance_for_lane_change_, other->urgent_distance_for_lane_change_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleBasedStopDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleBasedStopDeciderConfig

// optional double max_adc_stop_speed = 1 [default = 0.3];
bool RuleBasedStopDeciderConfig::has_max_adc_stop_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_max_adc_stop_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void RuleBasedStopDeciderConfig::clear_has_max_adc_stop_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void RuleBasedStopDeciderConfig::clear_max_adc_stop_speed() {
  max_adc_stop_speed_ = 0.3;
  clear_has_max_adc_stop_speed();
}
double RuleBasedStopDeciderConfig::max_adc_stop_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
  return max_adc_stop_speed_;
}
void RuleBasedStopDeciderConfig::set_max_adc_stop_speed(double value) {
  set_has_max_adc_stop_speed();
  max_adc_stop_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
}

// optional double max_valid_stop_distance = 2 [default = 0.5];
bool RuleBasedStopDeciderConfig::has_max_valid_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_max_valid_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void RuleBasedStopDeciderConfig::clear_has_max_valid_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void RuleBasedStopDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.5;
  clear_has_max_valid_stop_distance();
}
double RuleBasedStopDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
  return max_valid_stop_distance_;
}
void RuleBasedStopDeciderConfig::set_max_valid_stop_distance(double value) {
  set_has_max_valid_stop_distance();
  max_valid_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
}

// optional double search_beam_length = 3 [default = 5];
bool RuleBasedStopDeciderConfig::has_search_beam_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_search_beam_length() {
  _has_bits_[0] |= 0x00000004u;
}
void RuleBasedStopDeciderConfig::clear_has_search_beam_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void RuleBasedStopDeciderConfig::clear_search_beam_length() {
  search_beam_length_ = 5;
  clear_has_search_beam_length();
}
double RuleBasedStopDeciderConfig::search_beam_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_length)
  return search_beam_length_;
}
void RuleBasedStopDeciderConfig::set_search_beam_length(double value) {
  set_has_search_beam_length();
  search_beam_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_length)
}

// optional double search_beam_radius_intensity = 4 [default = 0.08];
bool RuleBasedStopDeciderConfig::has_search_beam_radius_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_search_beam_radius_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
void RuleBasedStopDeciderConfig::clear_has_search_beam_radius_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
void RuleBasedStopDeciderConfig::clear_search_beam_radius_intensity() {
  search_beam_radius_intensity_ = 0.08;
  clear_has_search_beam_radius_intensity();
}
double RuleBasedStopDeciderConfig::search_beam_radius_intensity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
  return search_beam_radius_intensity_;
}
void RuleBasedStopDeciderConfig::set_search_beam_radius_intensity(double value) {
  set_has_search_beam_radius_intensity();
  search_beam_radius_intensity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
}

// optional double search_range = 5 [default = 3.14];
bool RuleBasedStopDeciderConfig::has_search_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_search_range() {
  _has_bits_[0] |= 0x00000010u;
}
void RuleBasedStopDeciderConfig::clear_has_search_range() {
  _has_bits_[0] &= ~0x00000010u;
}
void RuleBasedStopDeciderConfig::clear_search_range() {
  search_range_ = 3.14;
  clear_has_search_range();
}
double RuleBasedStopDeciderConfig::search_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.search_range)
  return search_range_;
}
void RuleBasedStopDeciderConfig::set_search_range(double value) {
  set_has_search_range();
  search_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.search_range)
}

// optional double is_block_angle_threshold = 6 [default = 1.57];
bool RuleBasedStopDeciderConfig::has_is_block_angle_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_is_block_angle_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void RuleBasedStopDeciderConfig::clear_has_is_block_angle_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void RuleBasedStopDeciderConfig::clear_is_block_angle_threshold() {
  is_block_angle_threshold_ = 1.57;
  clear_has_is_block_angle_threshold();
}
double RuleBasedStopDeciderConfig::is_block_angle_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
  return is_block_angle_threshold_;
}
void RuleBasedStopDeciderConfig::set_is_block_angle_threshold(double value) {
  set_has_is_block_angle_threshold();
  is_block_angle_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
}

// optional double approach_distance_for_lane_change = 10 [default = 80];
bool RuleBasedStopDeciderConfig::has_approach_distance_for_lane_change() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_approach_distance_for_lane_change() {
  _has_bits_[0] |= 0x00000040u;
}
void RuleBasedStopDeciderConfig::clear_has_approach_distance_for_lane_change() {
  _has_bits_[0] &= ~0x00000040u;
}
void RuleBasedStopDeciderConfig::clear_approach_distance_for_lane_change() {
  approach_distance_for_lane_change_ = 80;
  clear_has_approach_distance_for_lane_change();
}
double RuleBasedStopDeciderConfig::approach_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
  return approach_distance_for_lane_change_;
}
void RuleBasedStopDeciderConfig::set_approach_distance_for_lane_change(double value) {
  set_has_approach_distance_for_lane_change();
  approach_distance_for_lane_change_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
}

// optional double urgent_distance_for_lane_change = 11 [default = 50];
bool RuleBasedStopDeciderConfig::has_urgent_distance_for_lane_change() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RuleBasedStopDeciderConfig::set_has_urgent_distance_for_lane_change() {
  _has_bits_[0] |= 0x00000080u;
}
void RuleBasedStopDeciderConfig::clear_has_urgent_distance_for_lane_change() {
  _has_bits_[0] &= ~0x00000080u;
}
void RuleBasedStopDeciderConfig::clear_urgent_distance_for_lane_change() {
  urgent_distance_for_lane_change_ = 50;
  clear_has_urgent_distance_for_lane_change();
}
double RuleBasedStopDeciderConfig::urgent_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
  return urgent_distance_for_lane_change_;
}
void RuleBasedStopDeciderConfig::set_urgent_distance_for_lane_change(double value) {
  set_has_urgent_distance_for_lane_change();
  urgent_distance_for_lane_change_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
