// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/lattice_structure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class StopPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopPoint> {
} _StopPoint_default_instance_;
class PlanningTargetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningTarget> {
} _PlanningTarget_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningTarget, cruise_speed_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(StopPoint)},
  { 9, 16, sizeof(PlanningTarget)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningTarget_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/lattice_structure.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _StopPoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PlanningTarget_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StopPoint_default_instance_.DefaultConstruct();
  _PlanningTarget_default_instance_.DefaultConstruct();
  _PlanningTarget_default_instance_.get_mutable()->stop_point_ = const_cast< ::jmc_auto::planning::StopPoint*>(
      ::jmc_auto::planning::StopPoint::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n.modules/planning/proto/lattice_structu"
      "re.proto\022\021jmc_auto.planning\"i\n\tStopPoint"
      "\022\t\n\001s\030\001 \001(\001\0225\n\004type\030\002 \001(\0162!.jmc_auto.pla"
      "nning.StopPoint.Type:\004HARD\"\032\n\004Type\022\010\n\004HA"
      "RD\020\000\022\010\n\004SOFT\020\001\"X\n\016PlanningTarget\0220\n\nstop"
      "_point\030\001 \001(\0132\034.jmc_auto.planning.StopPoi"
      "nt\022\024\n\014cruise_speed\030\002 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/lattice_structure.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto

const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor() {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::file_level_enum_descriptors[0];
}
bool StopPoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StopPoint_Type StopPoint::HARD;
const StopPoint_Type StopPoint::SOFT;
const StopPoint_Type StopPoint::Type_MIN;
const StopPoint_Type StopPoint::Type_MAX;
const int StopPoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopPoint::kSFieldNumber;
const int StopPoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopPoint::StopPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.StopPoint)
}
StopPoint::StopPoint(const StopPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&s_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.StopPoint)
}

void StopPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&s_) + sizeof(type_));
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.StopPoint)
  SharedDtor();
}

void StopPoint::SharedDtor() {
}

void StopPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopPoint::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopPoint& StopPoint::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopPoint* StopPoint::New(::google::protobuf::Arena* arena) const {
  StopPoint* n = new StopPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.StopPoint)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&s_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.StopPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::StopPoint_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::planning::StopPoint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.StopPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.StopPoint)
  return false;
#undef DO_
}

void StopPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.StopPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.StopPoint)
}

::google::protobuf::uint8* StopPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.StopPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.StopPoint)
  return target;
}

size_t StopPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.StopPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.StopPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.StopPoint)
    MergeFrom(*source);
  }
}

void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {
  return true;
}

void StopPoint::Swap(StopPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopPoint::InternalSwap(StopPoint* other) {
  std::swap(s_, other->s_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopPoint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopPoint

// optional double s = 1;
bool StopPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void StopPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double StopPoint::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.StopPoint.s)
  return s_;
}
void StopPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.StopPoint.s)
}

// optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
bool StopPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopPoint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StopPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopPoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::planning::StopPoint_Type StopPoint::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.StopPoint.type)
  return static_cast< ::jmc_auto::planning::StopPoint_Type >(type_);
}
void StopPoint::set_type(::jmc_auto::planning::StopPoint_Type value) {
  assert(::jmc_auto::planning::StopPoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.StopPoint.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningTarget::kStopPointFieldNumber;
const int PlanningTarget::kCruiseSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningTarget::PlanningTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PlanningTarget)
}
PlanningTarget::PlanningTarget(const PlanningTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::jmc_auto::planning::StopPoint(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  cruise_speed_ = from.cruise_speed_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PlanningTarget)
}

void PlanningTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stop_point_, 0, reinterpret_cast<char*>(&cruise_speed_) -
    reinterpret_cast<char*>(&stop_point_) + sizeof(cruise_speed_));
}

PlanningTarget::~PlanningTarget() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PlanningTarget)
  SharedDtor();
}

void PlanningTarget::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stop_point_;
  }
}

void PlanningTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningTarget::descriptor() {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningTarget& PlanningTarget::default_instance() {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningTarget* PlanningTarget::New(::google::protobuf::Arena* arena) const {
  PlanningTarget* n = new PlanningTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PlanningTarget)
  if (has_stop_point()) {
    GOOGLE_DCHECK(stop_point_ != NULL);
    stop_point_->::jmc_auto::planning::StopPoint::Clear();
  }
  cruise_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PlanningTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.StopPoint stop_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cruise_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cruise_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PlanningTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PlanningTarget)
  return false;
#undef DO_
}

void PlanningTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PlanningTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cruise_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PlanningTarget)
}

::google::protobuf::uint8* PlanningTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PlanningTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, deterministic, target);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cruise_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PlanningTarget)
  return target;
}

size_t PlanningTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PlanningTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.StopPoint stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double cruise_speed = 2;
    if (has_cruise_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningTarget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PlanningTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PlanningTarget)
    MergeFrom(*source);
  }
}

void PlanningTarget::MergeFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::jmc_auto::planning::StopPoint::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      cruise_speed_ = from.cruise_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningTarget::CopyFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTarget::IsInitialized() const {
  return true;
}

void PlanningTarget::Swap(PlanningTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningTarget::InternalSwap(PlanningTarget* other) {
  std::swap(stop_point_, other->stop_point_);
  std::swap(cruise_speed_, other->cruise_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningTarget::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningTarget

// optional .jmc_auto.planning.StopPoint stop_point = 1;
bool PlanningTarget::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningTarget::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningTarget::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningTarget::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::jmc_auto::planning::StopPoint::Clear();
  clear_has_stop_point();
}
const ::jmc_auto::planning::StopPoint& PlanningTarget::stop_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTarget.stop_point)
  return stop_point_ != NULL ? *stop_point_
                         : *::jmc_auto::planning::StopPoint::internal_default_instance();
}
::jmc_auto::planning::StopPoint* PlanningTarget::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::jmc_auto::planning::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTarget.stop_point)
  return stop_point_;
}
::jmc_auto::planning::StopPoint* PlanningTarget::release_stop_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTarget.stop_point)
  clear_has_stop_point();
  ::jmc_auto::planning::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void PlanningTarget::set_allocated_stop_point(::jmc_auto::planning::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTarget.stop_point)
}

// optional double cruise_speed = 2;
bool PlanningTarget::has_cruise_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningTarget::set_has_cruise_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningTarget::clear_has_cruise_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningTarget::clear_cruise_speed() {
  cruise_speed_ = 0;
  clear_has_cruise_speed();
}
double PlanningTarget::cruise_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTarget.cruise_speed)
  return cruise_speed_;
}
void PlanningTarget::set_cruise_speed(double value) {
  set_has_cruise_speed();
  cruise_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlanningTarget.cruise_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
