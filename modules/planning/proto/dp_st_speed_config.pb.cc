// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_st_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/dp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class SpeedHeuristicConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedHeuristicConfig> {
} _SpeedHeuristicConfig_default_instance_;
class DpStSpeedConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DpStSpeedConfig> {
} _DpStSpeedConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedHeuristicConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedHeuristicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedHeuristicConfig, default_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedHeuristicConfig, lane_change_speed_config_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, unit_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, dense_dimension_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, dense_unit_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, sparse_unit_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, speed_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, accel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, reference_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, go_down_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, go_up_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, default_obstacle_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, default_speed_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, exceed_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, reference_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, keep_clear_low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, accel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, decel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, positive_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, negative_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, safe_time_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, safe_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, spatial_potential_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DpStSpeedConfig, is_lane_changing_),
  4,
  3,
  5,
  6,
  0,
  7,
  8,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(SpeedHeuristicConfig)},
  { 9, 41, sizeof(DpStSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedHeuristicConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DpStSpeedConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/dp_st_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SpeedHeuristicConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DpStSpeedConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SpeedHeuristicConfig_default_instance_.DefaultConstruct();
  _DpStSpeedConfig_default_instance_.DefaultConstruct();
  _SpeedHeuristicConfig_default_instance_.get_mutable()->default_speed_config_ = const_cast< ::jmc_auto::planning::DpStSpeedConfig*>(
      ::jmc_auto::planning::DpStSpeedConfig::internal_default_instance());
  _SpeedHeuristicConfig_default_instance_.get_mutable()->lane_change_speed_config_ = const_cast< ::jmc_auto::planning::DpStSpeedConfig*>(
      ::jmc_auto::planning::DpStSpeedConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n/modules/planning/proto/dp_st_speed_con"
      "fig.proto\022\021jmc_auto.planning\"\236\001\n\024SpeedHe"
      "uristicConfig\022@\n\024default_speed_config\030\001 "
      "\001(\0132\".jmc_auto.planning.DpStSpeedConfig\022"
      "D\n\030lane_change_speed_config\030\002 \001(\0132\".jmc_"
      "auto.planning.DpStSpeedConfig\"\301\006\n\017DpStSp"
      "eedConfig\022\021\n\006unit_t\030\001 \001(\001:\0011\022\035\n\021dense_di"
      "mension_s\030\002 \001(\005:\00241\022\032\n\014dense_unit_s\030\003 \001("
      "\001:\0040.25\022\030\n\rsparse_unit_s\030\004 \001(\001:\0011\022\027\n\014spe"
      "ed_weight\030\n \001(\001:\0010\022\030\n\014accel_weight\030\013 \001(\001"
      ":\00210\022\027\n\013jerk_weight\030\014 \001(\001:\00210\022\032\n\017obstacl"
      "e_weight\030\r \001(\001:\0011\022\033\n\020reference_weight\030\016 "
      "\001(\001:\0010\022\031\n\016go_down_buffer\030\017 \001(\001:\0015\022\027\n\014go_"
      "up_buffer\030\020 \001(\001:\0015\022*\n\025default_obstacle_c"
      "ost\030\024 \001(\001:\01310000000000\022\035\n\022default_speed_"
      "cost\030\037 \001(\001:\0011\022 \n\024exceed_speed_penalty\030  "
      "\001(\001:\00210\022\036\n\021low_speed_penalty\030! \001(\001:\0032.5\022"
      "\"\n\027reference_speed_penalty\030\" \001(\001:\0011\022(\n\034k"
      "eep_clear_low_speed_penalty\030# \001(\001:\00210\022\030\n"
      "\raccel_penalty\030( \001(\001:\0013\022\030\n\rdecel_penalty"
      "\030) \001(\001:\0012\022\036\n\023positive_jerk_coeff\0302 \001(\001:\001"
      "1\022 \n\023negative_jerk_coeff\0303 \001(\001:\003300\022\035\n\020m"
      "ax_acceleration\030< \001(\001:\0034.5\022\036\n\020max_decele"
      "ration\030= \001(\001:\004-4.5\022\033\n\020safe_time_buffer\030F"
      " \001(\001:\0013\022\031\n\rsafe_distance\030G \001(\001:\00220\022$\n\031sp"
      "atial_potential_penalty\030P \001(\001:\0011\022\037\n\020is_l"
      "ane_changing\030Q \001(\010:\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1065);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/dp_st_speed_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedHeuristicConfig::kDefaultSpeedConfigFieldNumber;
const int SpeedHeuristicConfig::kLaneChangeSpeedConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedHeuristicConfig::SpeedHeuristicConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.SpeedHeuristicConfig)
}
SpeedHeuristicConfig::SpeedHeuristicConfig(const SpeedHeuristicConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_speed_config()) {
    default_speed_config_ = new ::jmc_auto::planning::DpStSpeedConfig(*from.default_speed_config_);
  } else {
    default_speed_config_ = NULL;
  }
  if (from.has_lane_change_speed_config()) {
    lane_change_speed_config_ = new ::jmc_auto::planning::DpStSpeedConfig(*from.lane_change_speed_config_);
  } else {
    lane_change_speed_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.SpeedHeuristicConfig)
}

void SpeedHeuristicConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_speed_config_, 0, reinterpret_cast<char*>(&lane_change_speed_config_) -
    reinterpret_cast<char*>(&default_speed_config_) + sizeof(lane_change_speed_config_));
}

SpeedHeuristicConfig::~SpeedHeuristicConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.SpeedHeuristicConfig)
  SharedDtor();
}

void SpeedHeuristicConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete default_speed_config_;
  }
  if (this != internal_default_instance()) {
    delete lane_change_speed_config_;
  }
}

void SpeedHeuristicConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedHeuristicConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedHeuristicConfig& SpeedHeuristicConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedHeuristicConfig* SpeedHeuristicConfig::New(::google::protobuf::Arena* arena) const {
  SpeedHeuristicConfig* n = new SpeedHeuristicConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedHeuristicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.SpeedHeuristicConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_default_speed_config()) {
      GOOGLE_DCHECK(default_speed_config_ != NULL);
      default_speed_config_->::jmc_auto::planning::DpStSpeedConfig::Clear();
    }
    if (has_lane_change_speed_config()) {
      GOOGLE_DCHECK(lane_change_speed_config_ != NULL);
      lane_change_speed_config_->::jmc_auto::planning::DpStSpeedConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedHeuristicConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.SpeedHeuristicConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_change_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.SpeedHeuristicConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.SpeedHeuristicConfig)
  return false;
#undef DO_
}

void SpeedHeuristicConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.SpeedHeuristicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->default_speed_config_, output);
  }

  // optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lane_change_speed_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.SpeedHeuristicConfig)
}

::google::protobuf::uint8* SpeedHeuristicConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.SpeedHeuristicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->default_speed_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lane_change_speed_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.SpeedHeuristicConfig)
  return target;
}

size_t SpeedHeuristicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.SpeedHeuristicConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
    if (has_default_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->default_speed_config_);
    }

    // optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
    if (has_lane_change_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_change_speed_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedHeuristicConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.SpeedHeuristicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedHeuristicConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedHeuristicConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.SpeedHeuristicConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.SpeedHeuristicConfig)
    MergeFrom(*source);
  }
}

void SpeedHeuristicConfig::MergeFrom(const SpeedHeuristicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.SpeedHeuristicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_speed_config()->::jmc_auto::planning::DpStSpeedConfig::MergeFrom(from.default_speed_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_change_speed_config()->::jmc_auto::planning::DpStSpeedConfig::MergeFrom(from.lane_change_speed_config());
    }
  }
}

void SpeedHeuristicConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.SpeedHeuristicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedHeuristicConfig::CopyFrom(const SpeedHeuristicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.SpeedHeuristicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedHeuristicConfig::IsInitialized() const {
  return true;
}

void SpeedHeuristicConfig::Swap(SpeedHeuristicConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedHeuristicConfig::InternalSwap(SpeedHeuristicConfig* other) {
  std::swap(default_speed_config_, other->default_speed_config_);
  std::swap(lane_change_speed_config_, other->lane_change_speed_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedHeuristicConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedHeuristicConfig

// optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
bool SpeedHeuristicConfig::has_default_speed_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedHeuristicConfig::set_has_default_speed_config() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedHeuristicConfig::clear_has_default_speed_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedHeuristicConfig::clear_default_speed_config() {
  if (default_speed_config_ != NULL) default_speed_config_->::jmc_auto::planning::DpStSpeedConfig::Clear();
  clear_has_default_speed_config();
}
const ::jmc_auto::planning::DpStSpeedConfig& SpeedHeuristicConfig::default_speed_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
  return default_speed_config_ != NULL ? *default_speed_config_
                         : *::jmc_auto::planning::DpStSpeedConfig::internal_default_instance();
}
::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::mutable_default_speed_config() {
  set_has_default_speed_config();
  if (default_speed_config_ == NULL) {
    default_speed_config_ = new ::jmc_auto::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
  return default_speed_config_;
}
::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::release_default_speed_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
  clear_has_default_speed_config();
  ::jmc_auto::planning::DpStSpeedConfig* temp = default_speed_config_;
  default_speed_config_ = NULL;
  return temp;
}
void SpeedHeuristicConfig::set_allocated_default_speed_config(::jmc_auto::planning::DpStSpeedConfig* default_speed_config) {
  delete default_speed_config_;
  default_speed_config_ = default_speed_config;
  if (default_speed_config) {
    set_has_default_speed_config();
  } else {
    clear_has_default_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
}

// optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
bool SpeedHeuristicConfig::has_lane_change_speed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedHeuristicConfig::set_has_lane_change_speed_config() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedHeuristicConfig::clear_has_lane_change_speed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedHeuristicConfig::clear_lane_change_speed_config() {
  if (lane_change_speed_config_ != NULL) lane_change_speed_config_->::jmc_auto::planning::DpStSpeedConfig::Clear();
  clear_has_lane_change_speed_config();
}
const ::jmc_auto::planning::DpStSpeedConfig& SpeedHeuristicConfig::lane_change_speed_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
  return lane_change_speed_config_ != NULL ? *lane_change_speed_config_
                         : *::jmc_auto::planning::DpStSpeedConfig::internal_default_instance();
}
::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::mutable_lane_change_speed_config() {
  set_has_lane_change_speed_config();
  if (lane_change_speed_config_ == NULL) {
    lane_change_speed_config_ = new ::jmc_auto::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
  return lane_change_speed_config_;
}
::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::release_lane_change_speed_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
  clear_has_lane_change_speed_config();
  ::jmc_auto::planning::DpStSpeedConfig* temp = lane_change_speed_config_;
  lane_change_speed_config_ = NULL;
  return temp;
}
void SpeedHeuristicConfig::set_allocated_lane_change_speed_config(::jmc_auto::planning::DpStSpeedConfig* lane_change_speed_config) {
  delete lane_change_speed_config_;
  lane_change_speed_config_ = lane_change_speed_config;
  if (lane_change_speed_config) {
    set_has_lane_change_speed_config();
  } else {
    clear_has_lane_change_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpStSpeedConfig::kUnitTFieldNumber;
const int DpStSpeedConfig::kDenseDimensionSFieldNumber;
const int DpStSpeedConfig::kDenseUnitSFieldNumber;
const int DpStSpeedConfig::kSparseUnitSFieldNumber;
const int DpStSpeedConfig::kSpeedWeightFieldNumber;
const int DpStSpeedConfig::kAccelWeightFieldNumber;
const int DpStSpeedConfig::kJerkWeightFieldNumber;
const int DpStSpeedConfig::kObstacleWeightFieldNumber;
const int DpStSpeedConfig::kReferenceWeightFieldNumber;
const int DpStSpeedConfig::kGoDownBufferFieldNumber;
const int DpStSpeedConfig::kGoUpBufferFieldNumber;
const int DpStSpeedConfig::kDefaultObstacleCostFieldNumber;
const int DpStSpeedConfig::kDefaultSpeedCostFieldNumber;
const int DpStSpeedConfig::kExceedSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kLowSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kReferenceSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kKeepClearLowSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kAccelPenaltyFieldNumber;
const int DpStSpeedConfig::kDecelPenaltyFieldNumber;
const int DpStSpeedConfig::kPositiveJerkCoeffFieldNumber;
const int DpStSpeedConfig::kNegativeJerkCoeffFieldNumber;
const int DpStSpeedConfig::kMaxAccelerationFieldNumber;
const int DpStSpeedConfig::kMaxDecelerationFieldNumber;
const int DpStSpeedConfig::kSafeTimeBufferFieldNumber;
const int DpStSpeedConfig::kSafeDistanceFieldNumber;
const int DpStSpeedConfig::kSpatialPotentialPenaltyFieldNumber;
const int DpStSpeedConfig::kIsLaneChangingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpStSpeedConfig::DpStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DpStSpeedConfig)
}
DpStSpeedConfig::DpStSpeedConfig(const DpStSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_weight_, &from.speed_weight_,
    reinterpret_cast<char*>(&spatial_potential_penalty_) -
    reinterpret_cast<char*>(&speed_weight_) + sizeof(spatial_potential_penalty_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DpStSpeedConfig)
}

void DpStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&speed_weight_, 0, reinterpret_cast<char*>(&is_lane_changing_) -
    reinterpret_cast<char*>(&speed_weight_) + sizeof(is_lane_changing_));
  dense_dimension_s_ = 41;
  unit_t_ = 1;
  dense_unit_s_ = 0.25;
  sparse_unit_s_ = 1;
  accel_weight_ = 10;
  jerk_weight_ = 10;
  obstacle_weight_ = 1;
  go_down_buffer_ = 5;
  go_up_buffer_ = 5;
  default_obstacle_cost_ = 10000000000;
  default_speed_cost_ = 1;
  exceed_speed_penalty_ = 10;
  low_speed_penalty_ = 2.5;
  reference_speed_penalty_ = 1;
  keep_clear_low_speed_penalty_ = 10;
  accel_penalty_ = 3;
  decel_penalty_ = 2;
  positive_jerk_coeff_ = 1;
  negative_jerk_coeff_ = 300;
  max_acceleration_ = 4.5;
  max_deceleration_ = -4.5;
  safe_time_buffer_ = 3;
  safe_distance_ = 20;
  spatial_potential_penalty_ = 1;
}

DpStSpeedConfig::~DpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DpStSpeedConfig)
  SharedDtor();
}

void DpStSpeedConfig::SharedDtor() {
}

void DpStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpStSpeedConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpStSpeedConfig& DpStSpeedConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DpStSpeedConfig* DpStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  DpStSpeedConfig* n = new DpStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DpStSpeedConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&speed_weight_, 0, reinterpret_cast<char*>(&is_lane_changing_) -
      reinterpret_cast<char*>(&speed_weight_) + sizeof(is_lane_changing_));
    dense_dimension_s_ = 41;
    unit_t_ = 1;
    dense_unit_s_ = 0.25;
    sparse_unit_s_ = 1;
    accel_weight_ = 10;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    jerk_weight_ = 10;
    obstacle_weight_ = 1;
    go_down_buffer_ = 5;
    go_up_buffer_ = 5;
    default_obstacle_cost_ = 10000000000;
    default_speed_cost_ = 1;
    exceed_speed_penalty_ = 10;
    low_speed_penalty_ = 2.5;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    reference_speed_penalty_ = 1;
    keep_clear_low_speed_penalty_ = 10;
    accel_penalty_ = 3;
    decel_penalty_ = 2;
    positive_jerk_coeff_ = 1;
    negative_jerk_coeff_ = 300;
    max_acceleration_ = 4.5;
    max_deceleration_ = -4.5;
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    safe_time_buffer_ = 3;
    safe_distance_ = 20;
    spatial_potential_penalty_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DpStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double unit_t = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_unit_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unit_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dense_dimension_s = 2 [default = 41];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_dense_dimension_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dense_dimension_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dense_unit_s = 3 [default = 0.25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_dense_unit_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dense_unit_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sparse_unit_s = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_sparse_unit_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sparse_unit_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_weight = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_speed_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_weight = 11 [default = 10];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_accel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 12 [default = 10];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_weight = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_reference_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double go_down_buffer = 15 [default = 5];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_go_down_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_down_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double go_up_buffer = 16 [default = 5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_go_up_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_up_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_obstacle_cost = 20 [default = 10000000000];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_default_obstacle_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_obstacle_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_speed_cost = 31 [default = 1];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u)) {
          set_has_default_speed_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exceed_speed_penalty = 32 [default = 10];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(257u)) {
          set_has_exceed_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exceed_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_speed_penalty = 33 [default = 2.5];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(265u)) {
          set_has_low_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_speed_penalty = 34 [default = 1];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(273u)) {
          set_has_reference_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double keep_clear_low_speed_penalty = 35 [default = 10];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(281u)) {
          set_has_keep_clear_low_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_clear_low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_penalty = 40 [default = 3];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(321u)) {
          set_has_accel_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double decel_penalty = 41 [default = 2];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(329u)) {
          set_has_decel_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double positive_jerk_coeff = 50 [default = 1];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(401u)) {
          set_has_positive_jerk_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positive_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double negative_jerk_coeff = 51 [default = 300];
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(409u)) {
          set_has_negative_jerk_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &negative_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 60 [default = 4.5];
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(481u)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 61 [default = -4.5];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(489u)) {
          set_has_max_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_time_buffer = 70 [default = 3];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(561u)) {
          set_has_safe_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance = 71 [default = 20];
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(569u)) {
          set_has_safe_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double spatial_potential_penalty = 80 [default = 1];
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(641u)) {
          set_has_spatial_potential_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spatial_potential_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_lane_changing = 81 [default = false];
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(648u)) {
          set_has_is_lane_changing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lane_changing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DpStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DpStSpeedConfig)
  return false;
#undef DO_
}

void DpStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double unit_t = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->unit_t(), output);
  }

  // optional int32 dense_dimension_s = 2 [default = 41];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dense_dimension_s(), output);
  }

  // optional double dense_unit_s = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dense_unit_s(), output);
  }

  // optional double sparse_unit_s = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sparse_unit_s(), output);
  }

  // optional double speed_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->speed_weight(), output);
  }

  // optional double accel_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->accel_weight(), output);
  }

  // optional double jerk_weight = 12 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 13 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->obstacle_weight(), output);
  }

  // optional double reference_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->reference_weight(), output);
  }

  // optional double go_down_buffer = 15 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->go_down_buffer(), output);
  }

  // optional double go_up_buffer = 16 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->go_up_buffer(), output);
  }

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->default_obstacle_cost(), output);
  }

  // optional double default_speed_cost = 31 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->default_speed_cost(), output);
  }

  // optional double exceed_speed_penalty = 32 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->exceed_speed_penalty(), output);
  }

  // optional double low_speed_penalty = 33 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->low_speed_penalty(), output);
  }

  // optional double reference_speed_penalty = 34 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->reference_speed_penalty(), output);
  }

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->keep_clear_low_speed_penalty(), output);
  }

  // optional double accel_penalty = 40 [default = 3];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->accel_penalty(), output);
  }

  // optional double decel_penalty = 41 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->decel_penalty(), output);
  }

  // optional double positive_jerk_coeff = 50 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->positive_jerk_coeff(), output);
  }

  // optional double negative_jerk_coeff = 51 [default = 300];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->negative_jerk_coeff(), output);
  }

  // optional double max_acceleration = 60 [default = 4.5];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 61 [default = -4.5];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->max_deceleration(), output);
  }

  // optional double safe_time_buffer = 70 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(70, this->safe_time_buffer(), output);
  }

  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(71, this->safe_distance(), output);
  }

  // optional double spatial_potential_penalty = 80 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(80, this->spatial_potential_penalty(), output);
  }

  // optional bool is_lane_changing = 81 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->is_lane_changing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DpStSpeedConfig)
}

::google::protobuf::uint8* DpStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double unit_t = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->unit_t(), target);
  }

  // optional int32 dense_dimension_s = 2 [default = 41];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dense_dimension_s(), target);
  }

  // optional double dense_unit_s = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dense_unit_s(), target);
  }

  // optional double sparse_unit_s = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sparse_unit_s(), target);
  }

  // optional double speed_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->speed_weight(), target);
  }

  // optional double accel_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->accel_weight(), target);
  }

  // optional double jerk_weight = 12 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 13 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->obstacle_weight(), target);
  }

  // optional double reference_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->reference_weight(), target);
  }

  // optional double go_down_buffer = 15 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->go_down_buffer(), target);
  }

  // optional double go_up_buffer = 16 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 31 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 32 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 33 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->low_speed_penalty(), target);
  }

  // optional double reference_speed_penalty = 34 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->reference_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 40 [default = 3];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->accel_penalty(), target);
  }

  // optional double decel_penalty = 41 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 50 [default = 1];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 51 [default = 300];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 60 [default = 4.5];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 61 [default = -4.5];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->max_deceleration(), target);
  }

  // optional double safe_time_buffer = 70 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(70, this->safe_time_buffer(), target);
  }

  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(71, this->safe_distance(), target);
  }

  // optional double spatial_potential_penalty = 80 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(80, this->spatial_potential_penalty(), target);
  }

  // optional bool is_lane_changing = 81 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->is_lane_changing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DpStSpeedConfig)
  return target;
}

size_t DpStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DpStSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double speed_weight = 10 [default = 0];
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

    // optional double reference_weight = 14 [default = 0];
    if (has_reference_weight()) {
      total_size += 1 + 8;
    }

    // optional bool is_lane_changing = 81 [default = false];
    if (has_is_lane_changing()) {
      total_size += 2 + 1;
    }

    // optional int32 dense_dimension_s = 2 [default = 41];
    if (has_dense_dimension_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dense_dimension_s());
    }

    // optional double unit_t = 1 [default = 1];
    if (has_unit_t()) {
      total_size += 1 + 8;
    }

    // optional double dense_unit_s = 3 [default = 0.25];
    if (has_dense_unit_s()) {
      total_size += 1 + 8;
    }

    // optional double sparse_unit_s = 4 [default = 1];
    if (has_sparse_unit_s()) {
      total_size += 1 + 8;
    }

    // optional double accel_weight = 11 [default = 10];
    if (has_accel_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double jerk_weight = 12 [default = 10];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 13 [default = 1];
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 15 [default = 5];
    if (has_go_down_buffer()) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 16 [default = 5];
    if (has_go_up_buffer()) {
      total_size += 2 + 8;
    }

    // optional double default_obstacle_cost = 20 [default = 10000000000];
    if (has_default_obstacle_cost()) {
      total_size += 2 + 8;
    }

    // optional double default_speed_cost = 31 [default = 1];
    if (has_default_speed_cost()) {
      total_size += 2 + 8;
    }

    // optional double exceed_speed_penalty = 32 [default = 10];
    if (has_exceed_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double low_speed_penalty = 33 [default = 2.5];
    if (has_low_speed_penalty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double reference_speed_penalty = 34 [default = 1];
    if (has_reference_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double keep_clear_low_speed_penalty = 35 [default = 10];
    if (has_keep_clear_low_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double accel_penalty = 40 [default = 3];
    if (has_accel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 41 [default = 2];
    if (has_decel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 50 [default = 1];
    if (has_positive_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 51 [default = 300];
    if (has_negative_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 60 [default = 4.5];
    if (has_max_acceleration()) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 61 [default = -4.5];
    if (has_max_deceleration()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional double safe_time_buffer = 70 [default = 3];
    if (has_safe_time_buffer()) {
      total_size += 2 + 8;
    }

    // optional double safe_distance = 71 [default = 20];
    if (has_safe_distance()) {
      total_size += 2 + 8;
    }

    // optional double spatial_potential_penalty = 80 [default = 1];
    if (has_spatial_potential_penalty()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DpStSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DpStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DpStSpeedConfig)
    MergeFrom(*source);
  }
}

void DpStSpeedConfig::MergeFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      reference_weight_ = from.reference_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_lane_changing_ = from.is_lane_changing_;
    }
    if (cached_has_bits & 0x00000008u) {
      dense_dimension_s_ = from.dense_dimension_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      unit_t_ = from.unit_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      dense_unit_s_ = from.dense_unit_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      sparse_unit_s_ = from.sparse_unit_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      accel_weight_ = from.accel_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      go_down_buffer_ = from.go_down_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      go_up_buffer_ = from.go_up_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_obstacle_cost_ = from.default_obstacle_cost_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_speed_cost_ = from.default_speed_cost_;
    }
    if (cached_has_bits & 0x00004000u) {
      exceed_speed_penalty_ = from.exceed_speed_penalty_;
    }
    if (cached_has_bits & 0x00008000u) {
      low_speed_penalty_ = from.low_speed_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      reference_speed_penalty_ = from.reference_speed_penalty_;
    }
    if (cached_has_bits & 0x00020000u) {
      keep_clear_low_speed_penalty_ = from.keep_clear_low_speed_penalty_;
    }
    if (cached_has_bits & 0x00040000u) {
      accel_penalty_ = from.accel_penalty_;
    }
    if (cached_has_bits & 0x00080000u) {
      decel_penalty_ = from.decel_penalty_;
    }
    if (cached_has_bits & 0x00100000u) {
      positive_jerk_coeff_ = from.positive_jerk_coeff_;
    }
    if (cached_has_bits & 0x00200000u) {
      negative_jerk_coeff_ = from.negative_jerk_coeff_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      safe_time_buffer_ = from.safe_time_buffer_;
    }
    if (cached_has_bits & 0x02000000u) {
      safe_distance_ = from.safe_distance_;
    }
    if (cached_has_bits & 0x04000000u) {
      spatial_potential_penalty_ = from.spatial_potential_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DpStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpStSpeedConfig::CopyFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedConfig::IsInitialized() const {
  return true;
}

void DpStSpeedConfig::Swap(DpStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpStSpeedConfig::InternalSwap(DpStSpeedConfig* other) {
  std::swap(speed_weight_, other->speed_weight_);
  std::swap(reference_weight_, other->reference_weight_);
  std::swap(is_lane_changing_, other->is_lane_changing_);
  std::swap(dense_dimension_s_, other->dense_dimension_s_);
  std::swap(unit_t_, other->unit_t_);
  std::swap(dense_unit_s_, other->dense_unit_s_);
  std::swap(sparse_unit_s_, other->sparse_unit_s_);
  std::swap(accel_weight_, other->accel_weight_);
  std::swap(jerk_weight_, other->jerk_weight_);
  std::swap(obstacle_weight_, other->obstacle_weight_);
  std::swap(go_down_buffer_, other->go_down_buffer_);
  std::swap(go_up_buffer_, other->go_up_buffer_);
  std::swap(default_obstacle_cost_, other->default_obstacle_cost_);
  std::swap(default_speed_cost_, other->default_speed_cost_);
  std::swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  std::swap(low_speed_penalty_, other->low_speed_penalty_);
  std::swap(reference_speed_penalty_, other->reference_speed_penalty_);
  std::swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  std::swap(accel_penalty_, other->accel_penalty_);
  std::swap(decel_penalty_, other->decel_penalty_);
  std::swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  std::swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  std::swap(max_acceleration_, other->max_acceleration_);
  std::swap(max_deceleration_, other->max_deceleration_);
  std::swap(safe_time_buffer_, other->safe_time_buffer_);
  std::swap(safe_distance_, other->safe_distance_);
  std::swap(spatial_potential_penalty_, other->spatial_potential_penalty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpStSpeedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DpStSpeedConfig

// optional double unit_t = 1 [default = 1];
bool DpStSpeedConfig::has_unit_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DpStSpeedConfig::set_has_unit_t() {
  _has_bits_[0] |= 0x00000010u;
}
void DpStSpeedConfig::clear_has_unit_t() {
  _has_bits_[0] &= ~0x00000010u;
}
void DpStSpeedConfig::clear_unit_t() {
  unit_t_ = 1;
  clear_has_unit_t();
}
double DpStSpeedConfig::unit_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.unit_t)
  return unit_t_;
}
void DpStSpeedConfig::set_unit_t(double value) {
  set_has_unit_t();
  unit_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.unit_t)
}

// optional int32 dense_dimension_s = 2 [default = 41];
bool DpStSpeedConfig::has_dense_dimension_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DpStSpeedConfig::set_has_dense_dimension_s() {
  _has_bits_[0] |= 0x00000008u;
}
void DpStSpeedConfig::clear_has_dense_dimension_s() {
  _has_bits_[0] &= ~0x00000008u;
}
void DpStSpeedConfig::clear_dense_dimension_s() {
  dense_dimension_s_ = 41;
  clear_has_dense_dimension_s();
}
::google::protobuf::int32 DpStSpeedConfig::dense_dimension_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.dense_dimension_s)
  return dense_dimension_s_;
}
void DpStSpeedConfig::set_dense_dimension_s(::google::protobuf::int32 value) {
  set_has_dense_dimension_s();
  dense_dimension_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.dense_dimension_s)
}

// optional double dense_unit_s = 3 [default = 0.25];
bool DpStSpeedConfig::has_dense_unit_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DpStSpeedConfig::set_has_dense_unit_s() {
  _has_bits_[0] |= 0x00000020u;
}
void DpStSpeedConfig::clear_has_dense_unit_s() {
  _has_bits_[0] &= ~0x00000020u;
}
void DpStSpeedConfig::clear_dense_unit_s() {
  dense_unit_s_ = 0.25;
  clear_has_dense_unit_s();
}
double DpStSpeedConfig::dense_unit_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.dense_unit_s)
  return dense_unit_s_;
}
void DpStSpeedConfig::set_dense_unit_s(double value) {
  set_has_dense_unit_s();
  dense_unit_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.dense_unit_s)
}

// optional double sparse_unit_s = 4 [default = 1];
bool DpStSpeedConfig::has_sparse_unit_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DpStSpeedConfig::set_has_sparse_unit_s() {
  _has_bits_[0] |= 0x00000040u;
}
void DpStSpeedConfig::clear_has_sparse_unit_s() {
  _has_bits_[0] &= ~0x00000040u;
}
void DpStSpeedConfig::clear_sparse_unit_s() {
  sparse_unit_s_ = 1;
  clear_has_sparse_unit_s();
}
double DpStSpeedConfig::sparse_unit_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.sparse_unit_s)
  return sparse_unit_s_;
}
void DpStSpeedConfig::set_sparse_unit_s(double value) {
  set_has_sparse_unit_s();
  sparse_unit_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.sparse_unit_s)
}

// optional double speed_weight = 10 [default = 0];
bool DpStSpeedConfig::has_speed_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DpStSpeedConfig::set_has_speed_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void DpStSpeedConfig::clear_has_speed_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void DpStSpeedConfig::clear_speed_weight() {
  speed_weight_ = 0;
  clear_has_speed_weight();
}
double DpStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.speed_weight)
  return speed_weight_;
}
void DpStSpeedConfig::set_speed_weight(double value) {
  set_has_speed_weight();
  speed_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.speed_weight)
}

// optional double accel_weight = 11 [default = 10];
bool DpStSpeedConfig::has_accel_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DpStSpeedConfig::set_has_accel_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void DpStSpeedConfig::clear_has_accel_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void DpStSpeedConfig::clear_accel_weight() {
  accel_weight_ = 10;
  clear_has_accel_weight();
}
double DpStSpeedConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.accel_weight)
  return accel_weight_;
}
void DpStSpeedConfig::set_accel_weight(double value) {
  set_has_accel_weight();
  accel_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.accel_weight)
}

// optional double jerk_weight = 12 [default = 10];
bool DpStSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DpStSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void DpStSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void DpStSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
double DpStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.jerk_weight)
  return jerk_weight_;
}
void DpStSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 13 [default = 1];
bool DpStSpeedConfig::has_obstacle_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DpStSpeedConfig::set_has_obstacle_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void DpStSpeedConfig::clear_has_obstacle_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void DpStSpeedConfig::clear_obstacle_weight() {
  obstacle_weight_ = 1;
  clear_has_obstacle_weight();
}
double DpStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.obstacle_weight)
  return obstacle_weight_;
}
void DpStSpeedConfig::set_obstacle_weight(double value) {
  set_has_obstacle_weight();
  obstacle_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.obstacle_weight)
}

// optional double reference_weight = 14 [default = 0];
bool DpStSpeedConfig::has_reference_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DpStSpeedConfig::set_has_reference_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void DpStSpeedConfig::clear_has_reference_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void DpStSpeedConfig::clear_reference_weight() {
  reference_weight_ = 0;
  clear_has_reference_weight();
}
double DpStSpeedConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.reference_weight)
  return reference_weight_;
}
void DpStSpeedConfig::set_reference_weight(double value) {
  set_has_reference_weight();
  reference_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.reference_weight)
}

// optional double go_down_buffer = 15 [default = 5];
bool DpStSpeedConfig::has_go_down_buffer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DpStSpeedConfig::set_has_go_down_buffer() {
  _has_bits_[0] |= 0x00000400u;
}
void DpStSpeedConfig::clear_has_go_down_buffer() {
  _has_bits_[0] &= ~0x00000400u;
}
void DpStSpeedConfig::clear_go_down_buffer() {
  go_down_buffer_ = 5;
  clear_has_go_down_buffer();
}
double DpStSpeedConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.go_down_buffer)
  return go_down_buffer_;
}
void DpStSpeedConfig::set_go_down_buffer(double value) {
  set_has_go_down_buffer();
  go_down_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.go_down_buffer)
}

// optional double go_up_buffer = 16 [default = 5];
bool DpStSpeedConfig::has_go_up_buffer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DpStSpeedConfig::set_has_go_up_buffer() {
  _has_bits_[0] |= 0x00000800u;
}
void DpStSpeedConfig::clear_has_go_up_buffer() {
  _has_bits_[0] &= ~0x00000800u;
}
void DpStSpeedConfig::clear_go_up_buffer() {
  go_up_buffer_ = 5;
  clear_has_go_up_buffer();
}
double DpStSpeedConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.go_up_buffer)
  return go_up_buffer_;
}
void DpStSpeedConfig::set_go_up_buffer(double value) {
  set_has_go_up_buffer();
  go_up_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 20 [default = 10000000000];
bool DpStSpeedConfig::has_default_obstacle_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DpStSpeedConfig::set_has_default_obstacle_cost() {
  _has_bits_[0] |= 0x00001000u;
}
void DpStSpeedConfig::clear_has_default_obstacle_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
void DpStSpeedConfig::clear_default_obstacle_cost() {
  default_obstacle_cost_ = 10000000000;
  clear_has_default_obstacle_cost();
}
double DpStSpeedConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.default_obstacle_cost)
  return default_obstacle_cost_;
}
void DpStSpeedConfig::set_default_obstacle_cost(double value) {
  set_has_default_obstacle_cost();
  default_obstacle_cost_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 31 [default = 1];
bool DpStSpeedConfig::has_default_speed_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DpStSpeedConfig::set_has_default_speed_cost() {
  _has_bits_[0] |= 0x00002000u;
}
void DpStSpeedConfig::clear_has_default_speed_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
void DpStSpeedConfig::clear_default_speed_cost() {
  default_speed_cost_ = 1;
  clear_has_default_speed_cost();
}
double DpStSpeedConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.default_speed_cost)
  return default_speed_cost_;
}
void DpStSpeedConfig::set_default_speed_cost(double value) {
  set_has_default_speed_cost();
  default_speed_cost_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 32 [default = 10];
bool DpStSpeedConfig::has_exceed_speed_penalty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DpStSpeedConfig::set_has_exceed_speed_penalty() {
  _has_bits_[0] |= 0x00004000u;
}
void DpStSpeedConfig::clear_has_exceed_speed_penalty() {
  _has_bits_[0] &= ~0x00004000u;
}
void DpStSpeedConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 10;
  clear_has_exceed_speed_penalty();
}
double DpStSpeedConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.exceed_speed_penalty)
  return exceed_speed_penalty_;
}
void DpStSpeedConfig::set_exceed_speed_penalty(double value) {
  set_has_exceed_speed_penalty();
  exceed_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 33 [default = 2.5];
bool DpStSpeedConfig::has_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DpStSpeedConfig::set_has_low_speed_penalty() {
  _has_bits_[0] |= 0x00008000u;
}
void DpStSpeedConfig::clear_has_low_speed_penalty() {
  _has_bits_[0] &= ~0x00008000u;
}
void DpStSpeedConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 2.5;
  clear_has_low_speed_penalty();
}
double DpStSpeedConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.low_speed_penalty)
  return low_speed_penalty_;
}
void DpStSpeedConfig::set_low_speed_penalty(double value) {
  set_has_low_speed_penalty();
  low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.low_speed_penalty)
}

// optional double reference_speed_penalty = 34 [default = 1];
bool DpStSpeedConfig::has_reference_speed_penalty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DpStSpeedConfig::set_has_reference_speed_penalty() {
  _has_bits_[0] |= 0x00010000u;
}
void DpStSpeedConfig::clear_has_reference_speed_penalty() {
  _has_bits_[0] &= ~0x00010000u;
}
void DpStSpeedConfig::clear_reference_speed_penalty() {
  reference_speed_penalty_ = 1;
  clear_has_reference_speed_penalty();
}
double DpStSpeedConfig::reference_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.reference_speed_penalty)
  return reference_speed_penalty_;
}
void DpStSpeedConfig::set_reference_speed_penalty(double value) {
  set_has_reference_speed_penalty();
  reference_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.reference_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 35 [default = 10];
bool DpStSpeedConfig::has_keep_clear_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DpStSpeedConfig::set_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] |= 0x00020000u;
}
void DpStSpeedConfig::clear_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] &= ~0x00020000u;
}
void DpStSpeedConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 10;
  clear_has_keep_clear_low_speed_penalty();
}
double DpStSpeedConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
  return keep_clear_low_speed_penalty_;
}
void DpStSpeedConfig::set_keep_clear_low_speed_penalty(double value) {
  set_has_keep_clear_low_speed_penalty();
  keep_clear_low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 40 [default = 3];
bool DpStSpeedConfig::has_accel_penalty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DpStSpeedConfig::set_has_accel_penalty() {
  _has_bits_[0] |= 0x00040000u;
}
void DpStSpeedConfig::clear_has_accel_penalty() {
  _has_bits_[0] &= ~0x00040000u;
}
void DpStSpeedConfig::clear_accel_penalty() {
  accel_penalty_ = 3;
  clear_has_accel_penalty();
}
double DpStSpeedConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.accel_penalty)
  return accel_penalty_;
}
void DpStSpeedConfig::set_accel_penalty(double value) {
  set_has_accel_penalty();
  accel_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.accel_penalty)
}

// optional double decel_penalty = 41 [default = 2];
bool DpStSpeedConfig::has_decel_penalty() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DpStSpeedConfig::set_has_decel_penalty() {
  _has_bits_[0] |= 0x00080000u;
}
void DpStSpeedConfig::clear_has_decel_penalty() {
  _has_bits_[0] &= ~0x00080000u;
}
void DpStSpeedConfig::clear_decel_penalty() {
  decel_penalty_ = 2;
  clear_has_decel_penalty();
}
double DpStSpeedConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.decel_penalty)
  return decel_penalty_;
}
void DpStSpeedConfig::set_decel_penalty(double value) {
  set_has_decel_penalty();
  decel_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 50 [default = 1];
bool DpStSpeedConfig::has_positive_jerk_coeff() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DpStSpeedConfig::set_has_positive_jerk_coeff() {
  _has_bits_[0] |= 0x00100000u;
}
void DpStSpeedConfig::clear_has_positive_jerk_coeff() {
  _has_bits_[0] &= ~0x00100000u;
}
void DpStSpeedConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 1;
  clear_has_positive_jerk_coeff();
}
double DpStSpeedConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.positive_jerk_coeff)
  return positive_jerk_coeff_;
}
void DpStSpeedConfig::set_positive_jerk_coeff(double value) {
  set_has_positive_jerk_coeff();
  positive_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 51 [default = 300];
bool DpStSpeedConfig::has_negative_jerk_coeff() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DpStSpeedConfig::set_has_negative_jerk_coeff() {
  _has_bits_[0] |= 0x00200000u;
}
void DpStSpeedConfig::clear_has_negative_jerk_coeff() {
  _has_bits_[0] &= ~0x00200000u;
}
void DpStSpeedConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 300;
  clear_has_negative_jerk_coeff();
}
double DpStSpeedConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.negative_jerk_coeff)
  return negative_jerk_coeff_;
}
void DpStSpeedConfig::set_negative_jerk_coeff(double value) {
  set_has_negative_jerk_coeff();
  negative_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 60 [default = 4.5];
bool DpStSpeedConfig::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DpStSpeedConfig::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00400000u;
}
void DpStSpeedConfig::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00400000u;
}
void DpStSpeedConfig::clear_max_acceleration() {
  max_acceleration_ = 4.5;
  clear_has_max_acceleration();
}
double DpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.max_acceleration)
  return max_acceleration_;
}
void DpStSpeedConfig::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.max_acceleration)
}

// optional double max_deceleration = 61 [default = -4.5];
bool DpStSpeedConfig::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DpStSpeedConfig::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00800000u;
}
void DpStSpeedConfig::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00800000u;
}
void DpStSpeedConfig::clear_max_deceleration() {
  max_deceleration_ = -4.5;
  clear_has_max_deceleration();
}
double DpStSpeedConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.max_deceleration)
  return max_deceleration_;
}
void DpStSpeedConfig::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.max_deceleration)
}

// optional double safe_time_buffer = 70 [default = 3];
bool DpStSpeedConfig::has_safe_time_buffer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DpStSpeedConfig::set_has_safe_time_buffer() {
  _has_bits_[0] |= 0x01000000u;
}
void DpStSpeedConfig::clear_has_safe_time_buffer() {
  _has_bits_[0] &= ~0x01000000u;
}
void DpStSpeedConfig::clear_safe_time_buffer() {
  safe_time_buffer_ = 3;
  clear_has_safe_time_buffer();
}
double DpStSpeedConfig::safe_time_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.safe_time_buffer)
  return safe_time_buffer_;
}
void DpStSpeedConfig::set_safe_time_buffer(double value) {
  set_has_safe_time_buffer();
  safe_time_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.safe_time_buffer)
}

// optional double safe_distance = 71 [default = 20];
bool DpStSpeedConfig::has_safe_distance() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DpStSpeedConfig::set_has_safe_distance() {
  _has_bits_[0] |= 0x02000000u;
}
void DpStSpeedConfig::clear_has_safe_distance() {
  _has_bits_[0] &= ~0x02000000u;
}
void DpStSpeedConfig::clear_safe_distance() {
  safe_distance_ = 20;
  clear_has_safe_distance();
}
double DpStSpeedConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.safe_distance)
  return safe_distance_;
}
void DpStSpeedConfig::set_safe_distance(double value) {
  set_has_safe_distance();
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.safe_distance)
}

// optional double spatial_potential_penalty = 80 [default = 1];
bool DpStSpeedConfig::has_spatial_potential_penalty() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DpStSpeedConfig::set_has_spatial_potential_penalty() {
  _has_bits_[0] |= 0x04000000u;
}
void DpStSpeedConfig::clear_has_spatial_potential_penalty() {
  _has_bits_[0] &= ~0x04000000u;
}
void DpStSpeedConfig::clear_spatial_potential_penalty() {
  spatial_potential_penalty_ = 1;
  clear_has_spatial_potential_penalty();
}
double DpStSpeedConfig::spatial_potential_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.spatial_potential_penalty)
  return spatial_potential_penalty_;
}
void DpStSpeedConfig::set_spatial_potential_penalty(double value) {
  set_has_spatial_potential_penalty();
  spatial_potential_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.spatial_potential_penalty)
}

// optional bool is_lane_changing = 81 [default = false];
bool DpStSpeedConfig::has_is_lane_changing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DpStSpeedConfig::set_has_is_lane_changing() {
  _has_bits_[0] |= 0x00000004u;
}
void DpStSpeedConfig::clear_has_is_lane_changing() {
  _has_bits_[0] &= ~0x00000004u;
}
void DpStSpeedConfig::clear_is_lane_changing() {
  is_lane_changing_ = false;
  clear_has_is_lane_changing();
}
bool DpStSpeedConfig::is_lane_changing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.is_lane_changing)
  return is_lane_changing_;
}
void DpStSpeedConfig::set_is_lane_changing(bool value) {
  set_has_is_lane_changing();
  is_lane_changing_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.is_lane_changing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
