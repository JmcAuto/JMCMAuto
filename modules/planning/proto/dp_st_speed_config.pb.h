// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_st_speed_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class DpStSpeedConfig;
class DpStSpeedConfigDefaultTypeInternal;
extern DpStSpeedConfigDefaultTypeInternal _DpStSpeedConfig_default_instance_;
class SpeedHeuristicConfig;
class SpeedHeuristicConfigDefaultTypeInternal;
extern SpeedHeuristicConfigDefaultTypeInternal _SpeedHeuristicConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto

// ===================================================================

class SpeedHeuristicConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.SpeedHeuristicConfig) */ {
 public:
  SpeedHeuristicConfig();
  virtual ~SpeedHeuristicConfig();

  SpeedHeuristicConfig(const SpeedHeuristicConfig& from);

  inline SpeedHeuristicConfig& operator=(const SpeedHeuristicConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedHeuristicConfig& default_instance();

  static inline const SpeedHeuristicConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedHeuristicConfig*>(
               &_SpeedHeuristicConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SpeedHeuristicConfig* other);

  // implements Message ----------------------------------------------

  inline SpeedHeuristicConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedHeuristicConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedHeuristicConfig& from);
  void MergeFrom(const SpeedHeuristicConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedHeuristicConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
  bool has_default_speed_config() const;
  void clear_default_speed_config();
  static const int kDefaultSpeedConfigFieldNumber = 1;
  const ::jmc_auto::planning::DpStSpeedConfig& default_speed_config() const;
  ::jmc_auto::planning::DpStSpeedConfig* mutable_default_speed_config();
  ::jmc_auto::planning::DpStSpeedConfig* release_default_speed_config();
  void set_allocated_default_speed_config(::jmc_auto::planning::DpStSpeedConfig* default_speed_config);

  // optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
  bool has_lane_change_speed_config() const;
  void clear_lane_change_speed_config();
  static const int kLaneChangeSpeedConfigFieldNumber = 2;
  const ::jmc_auto::planning::DpStSpeedConfig& lane_change_speed_config() const;
  ::jmc_auto::planning::DpStSpeedConfig* mutable_lane_change_speed_config();
  ::jmc_auto::planning::DpStSpeedConfig* release_lane_change_speed_config();
  void set_allocated_lane_change_speed_config(::jmc_auto::planning::DpStSpeedConfig* lane_change_speed_config);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.SpeedHeuristicConfig)
 private:
  void set_has_default_speed_config();
  void clear_has_default_speed_config();
  void set_has_lane_change_speed_config();
  void clear_has_lane_change_speed_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::DpStSpeedConfig* default_speed_config_;
  ::jmc_auto::planning::DpStSpeedConfig* lane_change_speed_config_;
  friend struct protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DpStSpeedConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.DpStSpeedConfig) */ {
 public:
  DpStSpeedConfig();
  virtual ~DpStSpeedConfig();

  DpStSpeedConfig(const DpStSpeedConfig& from);

  inline DpStSpeedConfig& operator=(const DpStSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DpStSpeedConfig& default_instance();

  static inline const DpStSpeedConfig* internal_default_instance() {
    return reinterpret_cast<const DpStSpeedConfig*>(
               &_DpStSpeedConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DpStSpeedConfig* other);

  // implements Message ----------------------------------------------

  inline DpStSpeedConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DpStSpeedConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DpStSpeedConfig& from);
  void MergeFrom(const DpStSpeedConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DpStSpeedConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double speed_weight = 10 [default = 0];
  bool has_speed_weight() const;
  void clear_speed_weight();
  static const int kSpeedWeightFieldNumber = 10;
  double speed_weight() const;
  void set_speed_weight(double value);

  // optional double reference_weight = 14 [default = 0];
  bool has_reference_weight() const;
  void clear_reference_weight();
  static const int kReferenceWeightFieldNumber = 14;
  double reference_weight() const;
  void set_reference_weight(double value);

  // optional bool is_lane_changing = 81 [default = false];
  bool has_is_lane_changing() const;
  void clear_is_lane_changing();
  static const int kIsLaneChangingFieldNumber = 81;
  bool is_lane_changing() const;
  void set_is_lane_changing(bool value);

  // optional int32 dense_dimension_s = 2 [default = 41];
  bool has_dense_dimension_s() const;
  void clear_dense_dimension_s();
  static const int kDenseDimensionSFieldNumber = 2;
  ::google::protobuf::int32 dense_dimension_s() const;
  void set_dense_dimension_s(::google::protobuf::int32 value);

  // optional double unit_t = 1 [default = 1];
  bool has_unit_t() const;
  void clear_unit_t();
  static const int kUnitTFieldNumber = 1;
  double unit_t() const;
  void set_unit_t(double value);

  // optional double dense_unit_s = 3 [default = 0.25];
  bool has_dense_unit_s() const;
  void clear_dense_unit_s();
  static const int kDenseUnitSFieldNumber = 3;
  double dense_unit_s() const;
  void set_dense_unit_s(double value);

  // optional double sparse_unit_s = 4 [default = 1];
  bool has_sparse_unit_s() const;
  void clear_sparse_unit_s();
  static const int kSparseUnitSFieldNumber = 4;
  double sparse_unit_s() const;
  void set_sparse_unit_s(double value);

  // optional double accel_weight = 11 [default = 10];
  bool has_accel_weight() const;
  void clear_accel_weight();
  static const int kAccelWeightFieldNumber = 11;
  double accel_weight() const;
  void set_accel_weight(double value);

  // optional double jerk_weight = 12 [default = 10];
  bool has_jerk_weight() const;
  void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 12;
  double jerk_weight() const;
  void set_jerk_weight(double value);

  // optional double obstacle_weight = 13 [default = 1];
  bool has_obstacle_weight() const;
  void clear_obstacle_weight();
  static const int kObstacleWeightFieldNumber = 13;
  double obstacle_weight() const;
  void set_obstacle_weight(double value);

  // optional double go_down_buffer = 15 [default = 5];
  bool has_go_down_buffer() const;
  void clear_go_down_buffer();
  static const int kGoDownBufferFieldNumber = 15;
  double go_down_buffer() const;
  void set_go_down_buffer(double value);

  // optional double go_up_buffer = 16 [default = 5];
  bool has_go_up_buffer() const;
  void clear_go_up_buffer();
  static const int kGoUpBufferFieldNumber = 16;
  double go_up_buffer() const;
  void set_go_up_buffer(double value);

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  bool has_default_obstacle_cost() const;
  void clear_default_obstacle_cost();
  static const int kDefaultObstacleCostFieldNumber = 20;
  double default_obstacle_cost() const;
  void set_default_obstacle_cost(double value);

  // optional double default_speed_cost = 31 [default = 1];
  bool has_default_speed_cost() const;
  void clear_default_speed_cost();
  static const int kDefaultSpeedCostFieldNumber = 31;
  double default_speed_cost() const;
  void set_default_speed_cost(double value);

  // optional double exceed_speed_penalty = 32 [default = 10];
  bool has_exceed_speed_penalty() const;
  void clear_exceed_speed_penalty();
  static const int kExceedSpeedPenaltyFieldNumber = 32;
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);

  // optional double low_speed_penalty = 33 [default = 2.5];
  bool has_low_speed_penalty() const;
  void clear_low_speed_penalty();
  static const int kLowSpeedPenaltyFieldNumber = 33;
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);

  // optional double reference_speed_penalty = 34 [default = 1];
  bool has_reference_speed_penalty() const;
  void clear_reference_speed_penalty();
  static const int kReferenceSpeedPenaltyFieldNumber = 34;
  double reference_speed_penalty() const;
  void set_reference_speed_penalty(double value);

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  bool has_keep_clear_low_speed_penalty() const;
  void clear_keep_clear_low_speed_penalty();
  static const int kKeepClearLowSpeedPenaltyFieldNumber = 35;
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);

  // optional double accel_penalty = 40 [default = 3];
  bool has_accel_penalty() const;
  void clear_accel_penalty();
  static const int kAccelPenaltyFieldNumber = 40;
  double accel_penalty() const;
  void set_accel_penalty(double value);

  // optional double decel_penalty = 41 [default = 2];
  bool has_decel_penalty() const;
  void clear_decel_penalty();
  static const int kDecelPenaltyFieldNumber = 41;
  double decel_penalty() const;
  void set_decel_penalty(double value);

  // optional double positive_jerk_coeff = 50 [default = 1];
  bool has_positive_jerk_coeff() const;
  void clear_positive_jerk_coeff();
  static const int kPositiveJerkCoeffFieldNumber = 50;
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);

  // optional double negative_jerk_coeff = 51 [default = 300];
  bool has_negative_jerk_coeff() const;
  void clear_negative_jerk_coeff();
  static const int kNegativeJerkCoeffFieldNumber = 51;
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);

  // optional double max_acceleration = 60 [default = 4.5];
  bool has_max_acceleration() const;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 60;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // optional double max_deceleration = 61 [default = -4.5];
  bool has_max_deceleration() const;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 61;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // optional double safe_time_buffer = 70 [default = 3];
  bool has_safe_time_buffer() const;
  void clear_safe_time_buffer();
  static const int kSafeTimeBufferFieldNumber = 70;
  double safe_time_buffer() const;
  void set_safe_time_buffer(double value);

  // optional double safe_distance = 71 [default = 20];
  bool has_safe_distance() const;
  void clear_safe_distance();
  static const int kSafeDistanceFieldNumber = 71;
  double safe_distance() const;
  void set_safe_distance(double value);

  // optional double spatial_potential_penalty = 80 [default = 1];
  bool has_spatial_potential_penalty() const;
  void clear_spatial_potential_penalty();
  static const int kSpatialPotentialPenaltyFieldNumber = 80;
  double spatial_potential_penalty() const;
  void set_spatial_potential_penalty(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.DpStSpeedConfig)
 private:
  void set_has_unit_t();
  void clear_has_unit_t();
  void set_has_dense_dimension_s();
  void clear_has_dense_dimension_s();
  void set_has_dense_unit_s();
  void clear_has_dense_unit_s();
  void set_has_sparse_unit_s();
  void clear_has_sparse_unit_s();
  void set_has_speed_weight();
  void clear_has_speed_weight();
  void set_has_accel_weight();
  void clear_has_accel_weight();
  void set_has_jerk_weight();
  void clear_has_jerk_weight();
  void set_has_obstacle_weight();
  void clear_has_obstacle_weight();
  void set_has_reference_weight();
  void clear_has_reference_weight();
  void set_has_go_down_buffer();
  void clear_has_go_down_buffer();
  void set_has_go_up_buffer();
  void clear_has_go_up_buffer();
  void set_has_default_obstacle_cost();
  void clear_has_default_obstacle_cost();
  void set_has_default_speed_cost();
  void clear_has_default_speed_cost();
  void set_has_exceed_speed_penalty();
  void clear_has_exceed_speed_penalty();
  void set_has_low_speed_penalty();
  void clear_has_low_speed_penalty();
  void set_has_reference_speed_penalty();
  void clear_has_reference_speed_penalty();
  void set_has_keep_clear_low_speed_penalty();
  void clear_has_keep_clear_low_speed_penalty();
  void set_has_accel_penalty();
  void clear_has_accel_penalty();
  void set_has_decel_penalty();
  void clear_has_decel_penalty();
  void set_has_positive_jerk_coeff();
  void clear_has_positive_jerk_coeff();
  void set_has_negative_jerk_coeff();
  void clear_has_negative_jerk_coeff();
  void set_has_max_acceleration();
  void clear_has_max_acceleration();
  void set_has_max_deceleration();
  void clear_has_max_deceleration();
  void set_has_safe_time_buffer();
  void clear_has_safe_time_buffer();
  void set_has_safe_distance();
  void clear_has_safe_distance();
  void set_has_spatial_potential_penalty();
  void clear_has_spatial_potential_penalty();
  void set_has_is_lane_changing();
  void clear_has_is_lane_changing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double speed_weight_;
  double reference_weight_;
  bool is_lane_changing_;
  ::google::protobuf::int32 dense_dimension_s_;
  double unit_t_;
  double dense_unit_s_;
  double sparse_unit_s_;
  double accel_weight_;
  double jerk_weight_;
  double obstacle_weight_;
  double go_down_buffer_;
  double go_up_buffer_;
  double default_obstacle_cost_;
  double default_speed_cost_;
  double exceed_speed_penalty_;
  double low_speed_penalty_;
  double reference_speed_penalty_;
  double keep_clear_low_speed_penalty_;
  double accel_penalty_;
  double decel_penalty_;
  double positive_jerk_coeff_;
  double negative_jerk_coeff_;
  double max_acceleration_;
  double max_deceleration_;
  double safe_time_buffer_;
  double safe_distance_;
  double spatial_potential_penalty_;
  friend struct protobuf_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedHeuristicConfig

// optional .jmc_auto.planning.DpStSpeedConfig default_speed_config = 1;
inline bool SpeedHeuristicConfig::has_default_speed_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedHeuristicConfig::set_has_default_speed_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedHeuristicConfig::clear_has_default_speed_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedHeuristicConfig::clear_default_speed_config() {
  if (default_speed_config_ != NULL) default_speed_config_->::jmc_auto::planning::DpStSpeedConfig::Clear();
  clear_has_default_speed_config();
}
inline const ::jmc_auto::planning::DpStSpeedConfig& SpeedHeuristicConfig::default_speed_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
  return default_speed_config_ != NULL ? *default_speed_config_
                         : *::jmc_auto::planning::DpStSpeedConfig::internal_default_instance();
}
inline ::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::mutable_default_speed_config() {
  set_has_default_speed_config();
  if (default_speed_config_ == NULL) {
    default_speed_config_ = new ::jmc_auto::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
  return default_speed_config_;
}
inline ::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::release_default_speed_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
  clear_has_default_speed_config();
  ::jmc_auto::planning::DpStSpeedConfig* temp = default_speed_config_;
  default_speed_config_ = NULL;
  return temp;
}
inline void SpeedHeuristicConfig::set_allocated_default_speed_config(::jmc_auto::planning::DpStSpeedConfig* default_speed_config) {
  delete default_speed_config_;
  default_speed_config_ = default_speed_config;
  if (default_speed_config) {
    set_has_default_speed_config();
  } else {
    clear_has_default_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.SpeedHeuristicConfig.default_speed_config)
}

// optional .jmc_auto.planning.DpStSpeedConfig lane_change_speed_config = 2;
inline bool SpeedHeuristicConfig::has_lane_change_speed_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedHeuristicConfig::set_has_lane_change_speed_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedHeuristicConfig::clear_has_lane_change_speed_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedHeuristicConfig::clear_lane_change_speed_config() {
  if (lane_change_speed_config_ != NULL) lane_change_speed_config_->::jmc_auto::planning::DpStSpeedConfig::Clear();
  clear_has_lane_change_speed_config();
}
inline const ::jmc_auto::planning::DpStSpeedConfig& SpeedHeuristicConfig::lane_change_speed_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
  return lane_change_speed_config_ != NULL ? *lane_change_speed_config_
                         : *::jmc_auto::planning::DpStSpeedConfig::internal_default_instance();
}
inline ::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::mutable_lane_change_speed_config() {
  set_has_lane_change_speed_config();
  if (lane_change_speed_config_ == NULL) {
    lane_change_speed_config_ = new ::jmc_auto::planning::DpStSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
  return lane_change_speed_config_;
}
inline ::jmc_auto::planning::DpStSpeedConfig* SpeedHeuristicConfig::release_lane_change_speed_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
  clear_has_lane_change_speed_config();
  ::jmc_auto::planning::DpStSpeedConfig* temp = lane_change_speed_config_;
  lane_change_speed_config_ = NULL;
  return temp;
}
inline void SpeedHeuristicConfig::set_allocated_lane_change_speed_config(::jmc_auto::planning::DpStSpeedConfig* lane_change_speed_config) {
  delete lane_change_speed_config_;
  lane_change_speed_config_ = lane_change_speed_config;
  if (lane_change_speed_config) {
    set_has_lane_change_speed_config();
  } else {
    clear_has_lane_change_speed_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.SpeedHeuristicConfig.lane_change_speed_config)
}

// -------------------------------------------------------------------

// DpStSpeedConfig

// optional double unit_t = 1 [default = 1];
inline bool DpStSpeedConfig::has_unit_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DpStSpeedConfig::set_has_unit_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DpStSpeedConfig::clear_has_unit_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DpStSpeedConfig::clear_unit_t() {
  unit_t_ = 1;
  clear_has_unit_t();
}
inline double DpStSpeedConfig::unit_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.unit_t)
  return unit_t_;
}
inline void DpStSpeedConfig::set_unit_t(double value) {
  set_has_unit_t();
  unit_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.unit_t)
}

// optional int32 dense_dimension_s = 2 [default = 41];
inline bool DpStSpeedConfig::has_dense_dimension_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DpStSpeedConfig::set_has_dense_dimension_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DpStSpeedConfig::clear_has_dense_dimension_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DpStSpeedConfig::clear_dense_dimension_s() {
  dense_dimension_s_ = 41;
  clear_has_dense_dimension_s();
}
inline ::google::protobuf::int32 DpStSpeedConfig::dense_dimension_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.dense_dimension_s)
  return dense_dimension_s_;
}
inline void DpStSpeedConfig::set_dense_dimension_s(::google::protobuf::int32 value) {
  set_has_dense_dimension_s();
  dense_dimension_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.dense_dimension_s)
}

// optional double dense_unit_s = 3 [default = 0.25];
inline bool DpStSpeedConfig::has_dense_unit_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DpStSpeedConfig::set_has_dense_unit_s() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DpStSpeedConfig::clear_has_dense_unit_s() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DpStSpeedConfig::clear_dense_unit_s() {
  dense_unit_s_ = 0.25;
  clear_has_dense_unit_s();
}
inline double DpStSpeedConfig::dense_unit_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.dense_unit_s)
  return dense_unit_s_;
}
inline void DpStSpeedConfig::set_dense_unit_s(double value) {
  set_has_dense_unit_s();
  dense_unit_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.dense_unit_s)
}

// optional double sparse_unit_s = 4 [default = 1];
inline bool DpStSpeedConfig::has_sparse_unit_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DpStSpeedConfig::set_has_sparse_unit_s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DpStSpeedConfig::clear_has_sparse_unit_s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DpStSpeedConfig::clear_sparse_unit_s() {
  sparse_unit_s_ = 1;
  clear_has_sparse_unit_s();
}
inline double DpStSpeedConfig::sparse_unit_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.sparse_unit_s)
  return sparse_unit_s_;
}
inline void DpStSpeedConfig::set_sparse_unit_s(double value) {
  set_has_sparse_unit_s();
  sparse_unit_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.sparse_unit_s)
}

// optional double speed_weight = 10 [default = 0];
inline bool DpStSpeedConfig::has_speed_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DpStSpeedConfig::set_has_speed_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DpStSpeedConfig::clear_has_speed_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DpStSpeedConfig::clear_speed_weight() {
  speed_weight_ = 0;
  clear_has_speed_weight();
}
inline double DpStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.speed_weight)
  return speed_weight_;
}
inline void DpStSpeedConfig::set_speed_weight(double value) {
  set_has_speed_weight();
  speed_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.speed_weight)
}

// optional double accel_weight = 11 [default = 10];
inline bool DpStSpeedConfig::has_accel_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DpStSpeedConfig::set_has_accel_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DpStSpeedConfig::clear_has_accel_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DpStSpeedConfig::clear_accel_weight() {
  accel_weight_ = 10;
  clear_has_accel_weight();
}
inline double DpStSpeedConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.accel_weight)
  return accel_weight_;
}
inline void DpStSpeedConfig::set_accel_weight(double value) {
  set_has_accel_weight();
  accel_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.accel_weight)
}

// optional double jerk_weight = 12 [default = 10];
inline bool DpStSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DpStSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DpStSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DpStSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
inline double DpStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.jerk_weight)
  return jerk_weight_;
}
inline void DpStSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 13 [default = 1];
inline bool DpStSpeedConfig::has_obstacle_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DpStSpeedConfig::set_has_obstacle_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DpStSpeedConfig::clear_has_obstacle_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DpStSpeedConfig::clear_obstacle_weight() {
  obstacle_weight_ = 1;
  clear_has_obstacle_weight();
}
inline double DpStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.obstacle_weight)
  return obstacle_weight_;
}
inline void DpStSpeedConfig::set_obstacle_weight(double value) {
  set_has_obstacle_weight();
  obstacle_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.obstacle_weight)
}

// optional double reference_weight = 14 [default = 0];
inline bool DpStSpeedConfig::has_reference_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DpStSpeedConfig::set_has_reference_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DpStSpeedConfig::clear_has_reference_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DpStSpeedConfig::clear_reference_weight() {
  reference_weight_ = 0;
  clear_has_reference_weight();
}
inline double DpStSpeedConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.reference_weight)
  return reference_weight_;
}
inline void DpStSpeedConfig::set_reference_weight(double value) {
  set_has_reference_weight();
  reference_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.reference_weight)
}

// optional double go_down_buffer = 15 [default = 5];
inline bool DpStSpeedConfig::has_go_down_buffer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DpStSpeedConfig::set_has_go_down_buffer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DpStSpeedConfig::clear_has_go_down_buffer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DpStSpeedConfig::clear_go_down_buffer() {
  go_down_buffer_ = 5;
  clear_has_go_down_buffer();
}
inline double DpStSpeedConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.go_down_buffer)
  return go_down_buffer_;
}
inline void DpStSpeedConfig::set_go_down_buffer(double value) {
  set_has_go_down_buffer();
  go_down_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.go_down_buffer)
}

// optional double go_up_buffer = 16 [default = 5];
inline bool DpStSpeedConfig::has_go_up_buffer() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DpStSpeedConfig::set_has_go_up_buffer() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DpStSpeedConfig::clear_has_go_up_buffer() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DpStSpeedConfig::clear_go_up_buffer() {
  go_up_buffer_ = 5;
  clear_has_go_up_buffer();
}
inline double DpStSpeedConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.go_up_buffer)
  return go_up_buffer_;
}
inline void DpStSpeedConfig::set_go_up_buffer(double value) {
  set_has_go_up_buffer();
  go_up_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 20 [default = 10000000000];
inline bool DpStSpeedConfig::has_default_obstacle_cost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DpStSpeedConfig::set_has_default_obstacle_cost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DpStSpeedConfig::clear_has_default_obstacle_cost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DpStSpeedConfig::clear_default_obstacle_cost() {
  default_obstacle_cost_ = 10000000000;
  clear_has_default_obstacle_cost();
}
inline double DpStSpeedConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.default_obstacle_cost)
  return default_obstacle_cost_;
}
inline void DpStSpeedConfig::set_default_obstacle_cost(double value) {
  set_has_default_obstacle_cost();
  default_obstacle_cost_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 31 [default = 1];
inline bool DpStSpeedConfig::has_default_speed_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DpStSpeedConfig::set_has_default_speed_cost() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DpStSpeedConfig::clear_has_default_speed_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DpStSpeedConfig::clear_default_speed_cost() {
  default_speed_cost_ = 1;
  clear_has_default_speed_cost();
}
inline double DpStSpeedConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.default_speed_cost)
  return default_speed_cost_;
}
inline void DpStSpeedConfig::set_default_speed_cost(double value) {
  set_has_default_speed_cost();
  default_speed_cost_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 32 [default = 10];
inline bool DpStSpeedConfig::has_exceed_speed_penalty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DpStSpeedConfig::set_has_exceed_speed_penalty() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DpStSpeedConfig::clear_has_exceed_speed_penalty() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DpStSpeedConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 10;
  clear_has_exceed_speed_penalty();
}
inline double DpStSpeedConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.exceed_speed_penalty)
  return exceed_speed_penalty_;
}
inline void DpStSpeedConfig::set_exceed_speed_penalty(double value) {
  set_has_exceed_speed_penalty();
  exceed_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 33 [default = 2.5];
inline bool DpStSpeedConfig::has_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DpStSpeedConfig::set_has_low_speed_penalty() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DpStSpeedConfig::clear_has_low_speed_penalty() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DpStSpeedConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 2.5;
  clear_has_low_speed_penalty();
}
inline double DpStSpeedConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.low_speed_penalty)
  return low_speed_penalty_;
}
inline void DpStSpeedConfig::set_low_speed_penalty(double value) {
  set_has_low_speed_penalty();
  low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.low_speed_penalty)
}

// optional double reference_speed_penalty = 34 [default = 1];
inline bool DpStSpeedConfig::has_reference_speed_penalty() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DpStSpeedConfig::set_has_reference_speed_penalty() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DpStSpeedConfig::clear_has_reference_speed_penalty() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DpStSpeedConfig::clear_reference_speed_penalty() {
  reference_speed_penalty_ = 1;
  clear_has_reference_speed_penalty();
}
inline double DpStSpeedConfig::reference_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.reference_speed_penalty)
  return reference_speed_penalty_;
}
inline void DpStSpeedConfig::set_reference_speed_penalty(double value) {
  set_has_reference_speed_penalty();
  reference_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.reference_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 35 [default = 10];
inline bool DpStSpeedConfig::has_keep_clear_low_speed_penalty() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DpStSpeedConfig::set_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DpStSpeedConfig::clear_has_keep_clear_low_speed_penalty() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DpStSpeedConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 10;
  clear_has_keep_clear_low_speed_penalty();
}
inline double DpStSpeedConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
  return keep_clear_low_speed_penalty_;
}
inline void DpStSpeedConfig::set_keep_clear_low_speed_penalty(double value) {
  set_has_keep_clear_low_speed_penalty();
  keep_clear_low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 40 [default = 3];
inline bool DpStSpeedConfig::has_accel_penalty() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DpStSpeedConfig::set_has_accel_penalty() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DpStSpeedConfig::clear_has_accel_penalty() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DpStSpeedConfig::clear_accel_penalty() {
  accel_penalty_ = 3;
  clear_has_accel_penalty();
}
inline double DpStSpeedConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.accel_penalty)
  return accel_penalty_;
}
inline void DpStSpeedConfig::set_accel_penalty(double value) {
  set_has_accel_penalty();
  accel_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.accel_penalty)
}

// optional double decel_penalty = 41 [default = 2];
inline bool DpStSpeedConfig::has_decel_penalty() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DpStSpeedConfig::set_has_decel_penalty() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DpStSpeedConfig::clear_has_decel_penalty() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DpStSpeedConfig::clear_decel_penalty() {
  decel_penalty_ = 2;
  clear_has_decel_penalty();
}
inline double DpStSpeedConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.decel_penalty)
  return decel_penalty_;
}
inline void DpStSpeedConfig::set_decel_penalty(double value) {
  set_has_decel_penalty();
  decel_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 50 [default = 1];
inline bool DpStSpeedConfig::has_positive_jerk_coeff() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DpStSpeedConfig::set_has_positive_jerk_coeff() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DpStSpeedConfig::clear_has_positive_jerk_coeff() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DpStSpeedConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 1;
  clear_has_positive_jerk_coeff();
}
inline double DpStSpeedConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.positive_jerk_coeff)
  return positive_jerk_coeff_;
}
inline void DpStSpeedConfig::set_positive_jerk_coeff(double value) {
  set_has_positive_jerk_coeff();
  positive_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 51 [default = 300];
inline bool DpStSpeedConfig::has_negative_jerk_coeff() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DpStSpeedConfig::set_has_negative_jerk_coeff() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DpStSpeedConfig::clear_has_negative_jerk_coeff() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DpStSpeedConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 300;
  clear_has_negative_jerk_coeff();
}
inline double DpStSpeedConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.negative_jerk_coeff)
  return negative_jerk_coeff_;
}
inline void DpStSpeedConfig::set_negative_jerk_coeff(double value) {
  set_has_negative_jerk_coeff();
  negative_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 60 [default = 4.5];
inline bool DpStSpeedConfig::has_max_acceleration() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DpStSpeedConfig::set_has_max_acceleration() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DpStSpeedConfig::clear_has_max_acceleration() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DpStSpeedConfig::clear_max_acceleration() {
  max_acceleration_ = 4.5;
  clear_has_max_acceleration();
}
inline double DpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.max_acceleration)
  return max_acceleration_;
}
inline void DpStSpeedConfig::set_max_acceleration(double value) {
  set_has_max_acceleration();
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.max_acceleration)
}

// optional double max_deceleration = 61 [default = -4.5];
inline bool DpStSpeedConfig::has_max_deceleration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DpStSpeedConfig::set_has_max_deceleration() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DpStSpeedConfig::clear_has_max_deceleration() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DpStSpeedConfig::clear_max_deceleration() {
  max_deceleration_ = -4.5;
  clear_has_max_deceleration();
}
inline double DpStSpeedConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.max_deceleration)
  return max_deceleration_;
}
inline void DpStSpeedConfig::set_max_deceleration(double value) {
  set_has_max_deceleration();
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.max_deceleration)
}

// optional double safe_time_buffer = 70 [default = 3];
inline bool DpStSpeedConfig::has_safe_time_buffer() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DpStSpeedConfig::set_has_safe_time_buffer() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DpStSpeedConfig::clear_has_safe_time_buffer() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DpStSpeedConfig::clear_safe_time_buffer() {
  safe_time_buffer_ = 3;
  clear_has_safe_time_buffer();
}
inline double DpStSpeedConfig::safe_time_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.safe_time_buffer)
  return safe_time_buffer_;
}
inline void DpStSpeedConfig::set_safe_time_buffer(double value) {
  set_has_safe_time_buffer();
  safe_time_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.safe_time_buffer)
}

// optional double safe_distance = 71 [default = 20];
inline bool DpStSpeedConfig::has_safe_distance() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DpStSpeedConfig::set_has_safe_distance() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DpStSpeedConfig::clear_has_safe_distance() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DpStSpeedConfig::clear_safe_distance() {
  safe_distance_ = 20;
  clear_has_safe_distance();
}
inline double DpStSpeedConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.safe_distance)
  return safe_distance_;
}
inline void DpStSpeedConfig::set_safe_distance(double value) {
  set_has_safe_distance();
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.safe_distance)
}

// optional double spatial_potential_penalty = 80 [default = 1];
inline bool DpStSpeedConfig::has_spatial_potential_penalty() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DpStSpeedConfig::set_has_spatial_potential_penalty() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DpStSpeedConfig::clear_has_spatial_potential_penalty() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DpStSpeedConfig::clear_spatial_potential_penalty() {
  spatial_potential_penalty_ = 1;
  clear_has_spatial_potential_penalty();
}
inline double DpStSpeedConfig::spatial_potential_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.spatial_potential_penalty)
  return spatial_potential_penalty_;
}
inline void DpStSpeedConfig::set_spatial_potential_penalty(double value) {
  set_has_spatial_potential_penalty();
  spatial_potential_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.spatial_potential_penalty)
}

// optional bool is_lane_changing = 81 [default = false];
inline bool DpStSpeedConfig::has_is_lane_changing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DpStSpeedConfig::set_has_is_lane_changing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DpStSpeedConfig::clear_has_is_lane_changing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DpStSpeedConfig::clear_is_lane_changing() {
  is_lane_changing_ = false;
  clear_has_is_lane_changing();
}
inline bool DpStSpeedConfig::is_lane_changing() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DpStSpeedConfig.is_lane_changing)
  return is_lane_changing_;
}
inline void DpStSpeedConfig::set_is_lane_changing(bool value) {
  set_has_is_lane_changing();
  is_lane_changing_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DpStSpeedConfig.is_lane_changing)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto__INCLUDED
