// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/piecewise_jerk_path_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/piecewise_jerk_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class PiecewiseJerkPathConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkPathConfig> {
} _PiecewiseJerkPathConfig_default_instance_;
class PiecewiseJerkPathWeightsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkPathWeights> {
} _PiecewiseJerkPathWeights_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathConfig, default_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathConfig, lane_change_path_config_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathWeights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathWeights, l_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathWeights, dl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathWeights, ddl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkPathWeights, dddl_weight_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(PiecewiseJerkPathConfig)},
  { 9, 18, sizeof(PiecewiseJerkPathWeights)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PiecewiseJerkPathConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PiecewiseJerkPathWeights_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/piecewise_jerk_path_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _PiecewiseJerkPathConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PiecewiseJerkPathWeights_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PiecewiseJerkPathConfig_default_instance_.DefaultConstruct();
  _PiecewiseJerkPathWeights_default_instance_.DefaultConstruct();
  _PiecewiseJerkPathConfig_default_instance_.get_mutable()->default_path_config_ = const_cast< ::jmc_auto::planning::PiecewiseJerkPathWeights*>(
      ::jmc_auto::planning::PiecewiseJerkPathWeights::internal_default_instance());
  _PiecewiseJerkPathConfig_default_instance_.get_mutable()->lane_change_path_config_ = const_cast< ::jmc_auto::planning::PiecewiseJerkPathWeights*>(
      ::jmc_auto::planning::PiecewiseJerkPathWeights::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n7modules/planning/proto/piecewise_jerk_"
      "path_config.proto\022\021jmc_auto.planning\"\261\001\n"
      "\027PiecewiseJerkPathConfig\022H\n\023default_path"
      "_config\030\001 \001(\0132+.jmc_auto.planning.Piecew"
      "iseJerkPathWeights\022L\n\027lane_change_path_c"
      "onfig\030\002 \001(\0132+.jmc_auto.planning.Piecewis"
      "eJerkPathWeights\"}\n\030PiecewiseJerkPathWei"
      "ghts\022\023\n\010l_weight\030\001 \001(\001:\0011\022\026\n\tdl_weight\030\002"
      " \001(\001:\003100\022\030\n\nddl_weight\030\003 \001(\001:\0041000\022\032\n\013d"
      "ddl_weight\030\004 \001(\001:\00510000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/piecewise_jerk_path_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkPathConfig::kDefaultPathConfigFieldNumber;
const int PiecewiseJerkPathConfig::kLaneChangePathConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkPathConfig::PiecewiseJerkPathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PiecewiseJerkPathConfig)
}
PiecewiseJerkPathConfig::PiecewiseJerkPathConfig(const PiecewiseJerkPathConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_path_config()) {
    default_path_config_ = new ::jmc_auto::planning::PiecewiseJerkPathWeights(*from.default_path_config_);
  } else {
    default_path_config_ = NULL;
  }
  if (from.has_lane_change_path_config()) {
    lane_change_path_config_ = new ::jmc_auto::planning::PiecewiseJerkPathWeights(*from.lane_change_path_config_);
  } else {
    lane_change_path_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PiecewiseJerkPathConfig)
}

void PiecewiseJerkPathConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_path_config_, 0, reinterpret_cast<char*>(&lane_change_path_config_) -
    reinterpret_cast<char*>(&default_path_config_) + sizeof(lane_change_path_config_));
}

PiecewiseJerkPathConfig::~PiecewiseJerkPathConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PiecewiseJerkPathConfig)
  SharedDtor();
}

void PiecewiseJerkPathConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete default_path_config_;
  }
  if (this != internal_default_instance()) {
    delete lane_change_path_config_;
  }
}

void PiecewiseJerkPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseJerkPathConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkPathConfig& PiecewiseJerkPathConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PiecewiseJerkPathConfig* PiecewiseJerkPathConfig::New(::google::protobuf::Arena* arena) const {
  PiecewiseJerkPathConfig* n = new PiecewiseJerkPathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiecewiseJerkPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_default_path_config()) {
      GOOGLE_DCHECK(default_path_config_ != NULL);
      default_path_config_->::jmc_auto::planning::PiecewiseJerkPathWeights::Clear();
    }
    if (has_lane_change_path_config()) {
      GOOGLE_DCHECK(lane_change_path_config_ != NULL);
      lane_change_path_config_->::jmc_auto::planning::PiecewiseJerkPathWeights::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_change_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PiecewiseJerkPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PiecewiseJerkPathConfig)
  return false;
#undef DO_
}

void PiecewiseJerkPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->default_path_config_, output);
  }

  // optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lane_change_path_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PiecewiseJerkPathConfig)
}

::google::protobuf::uint8* PiecewiseJerkPathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->default_path_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lane_change_path_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PiecewiseJerkPathConfig)
  return target;
}

size_t PiecewiseJerkPathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
    if (has_default_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->default_path_config_);
    }

    // optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
    if (has_lane_change_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_change_path_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseJerkPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkPathConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkPathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PiecewiseJerkPathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PiecewiseJerkPathConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkPathConfig::MergeFrom(const PiecewiseJerkPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_path_config()->::jmc_auto::planning::PiecewiseJerkPathWeights::MergeFrom(from.default_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_change_path_config()->::jmc_auto::planning::PiecewiseJerkPathWeights::MergeFrom(from.lane_change_path_config());
    }
  }
}

void PiecewiseJerkPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkPathConfig::CopyFrom(const PiecewiseJerkPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PiecewiseJerkPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathConfig::Swap(PiecewiseJerkPathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkPathConfig::InternalSwap(PiecewiseJerkPathConfig* other) {
  std::swap(default_path_config_, other->default_path_config_);
  std::swap(lane_change_path_config_, other->lane_change_path_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiecewiseJerkPathConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PiecewiseJerkPathConfig

// optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
bool PiecewiseJerkPathConfig::has_default_path_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PiecewiseJerkPathConfig::set_has_default_path_config() {
  _has_bits_[0] |= 0x00000001u;
}
void PiecewiseJerkPathConfig::clear_has_default_path_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void PiecewiseJerkPathConfig::clear_default_path_config() {
  if (default_path_config_ != NULL) default_path_config_->::jmc_auto::planning::PiecewiseJerkPathWeights::Clear();
  clear_has_default_path_config();
}
const ::jmc_auto::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::default_path_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
  return default_path_config_ != NULL ? *default_path_config_
                         : *::jmc_auto::planning::PiecewiseJerkPathWeights::internal_default_instance();
}
::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::mutable_default_path_config() {
  set_has_default_path_config();
  if (default_path_config_ == NULL) {
    default_path_config_ = new ::jmc_auto::planning::PiecewiseJerkPathWeights;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
  return default_path_config_;
}
::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::release_default_path_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
  clear_has_default_path_config();
  ::jmc_auto::planning::PiecewiseJerkPathWeights* temp = default_path_config_;
  default_path_config_ = NULL;
  return temp;
}
void PiecewiseJerkPathConfig::set_allocated_default_path_config(::jmc_auto::planning::PiecewiseJerkPathWeights* default_path_config) {
  delete default_path_config_;
  default_path_config_ = default_path_config;
  if (default_path_config) {
    set_has_default_path_config();
  } else {
    clear_has_default_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
}

// optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
bool PiecewiseJerkPathConfig::has_lane_change_path_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PiecewiseJerkPathConfig::set_has_lane_change_path_config() {
  _has_bits_[0] |= 0x00000002u;
}
void PiecewiseJerkPathConfig::clear_has_lane_change_path_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void PiecewiseJerkPathConfig::clear_lane_change_path_config() {
  if (lane_change_path_config_ != NULL) lane_change_path_config_->::jmc_auto::planning::PiecewiseJerkPathWeights::Clear();
  clear_has_lane_change_path_config();
}
const ::jmc_auto::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::lane_change_path_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  return lane_change_path_config_ != NULL ? *lane_change_path_config_
                         : *::jmc_auto::planning::PiecewiseJerkPathWeights::internal_default_instance();
}
::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::mutable_lane_change_path_config() {
  set_has_lane_change_path_config();
  if (lane_change_path_config_ == NULL) {
    lane_change_path_config_ = new ::jmc_auto::planning::PiecewiseJerkPathWeights;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  return lane_change_path_config_;
}
::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::release_lane_change_path_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  clear_has_lane_change_path_config();
  ::jmc_auto::planning::PiecewiseJerkPathWeights* temp = lane_change_path_config_;
  lane_change_path_config_ = NULL;
  return temp;
}
void PiecewiseJerkPathConfig::set_allocated_lane_change_path_config(::jmc_auto::planning::PiecewiseJerkPathWeights* lane_change_path_config) {
  delete lane_change_path_config_;
  lane_change_path_config_ = lane_change_path_config;
  if (lane_change_path_config) {
    set_has_lane_change_path_config();
  } else {
    clear_has_lane_change_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkPathWeights::kLWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDdlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDddlWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkPathWeights::PiecewiseJerkPathWeights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PiecewiseJerkPathWeights)
}
PiecewiseJerkPathWeights::PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_weight_, &from.l_weight_,
    reinterpret_cast<char*>(&dddl_weight_) -
    reinterpret_cast<char*>(&l_weight_) + sizeof(dddl_weight_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PiecewiseJerkPathWeights)
}

void PiecewiseJerkPathWeights::SharedCtor() {
  _cached_size_ = 0;
  l_weight_ = 1;
  dl_weight_ = 100;
  ddl_weight_ = 1000;
  dddl_weight_ = 10000;
}

PiecewiseJerkPathWeights::~PiecewiseJerkPathWeights() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PiecewiseJerkPathWeights)
  SharedDtor();
}

void PiecewiseJerkPathWeights::SharedDtor() {
}

void PiecewiseJerkPathWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseJerkPathWeights::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkPathWeights& PiecewiseJerkPathWeights::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PiecewiseJerkPathWeights* PiecewiseJerkPathWeights::New(::google::protobuf::Arena* arena) const {
  PiecewiseJerkPathWeights* n = new PiecewiseJerkPathWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiecewiseJerkPathWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  if (_has_bits_[0 / 32] & 15u) {
    l_weight_ = 1;
    dl_weight_ = 100;
    ddl_weight_ = 1000;
    dddl_weight_ = 10000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkPathWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double l_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_l_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl_weight = 2 [default = 100];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_dl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dddl_weight = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_dddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PiecewiseJerkPathWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PiecewiseJerkPathWeights)
  return false;
#undef DO_
}

void PiecewiseJerkPathWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->l_weight(), output);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dl_weight(), output);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ddl_weight(), output);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dddl_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PiecewiseJerkPathWeights)
}

::google::protobuf::uint8* PiecewiseJerkPathWeights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->l_weight(), target);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dl_weight(), target);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ddl_weight(), target);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dddl_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PiecewiseJerkPathWeights)
  return target;
}

size_t PiecewiseJerkPathWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double l_weight = 1 [default = 1];
    if (has_l_weight()) {
      total_size += 1 + 8;
    }

    // optional double dl_weight = 2 [default = 100];
    if (has_dl_weight()) {
      total_size += 1 + 8;
    }

    // optional double ddl_weight = 3 [default = 1000];
    if (has_ddl_weight()) {
      total_size += 1 + 8;
    }

    // optional double dddl_weight = 4 [default = 10000];
    if (has_dddl_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseJerkPathWeights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkPathWeights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkPathWeights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PiecewiseJerkPathWeights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PiecewiseJerkPathWeights)
    MergeFrom(*source);
  }
}

void PiecewiseJerkPathWeights::MergeFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      l_weight_ = from.l_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_weight_ = from.dl_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      ddl_weight_ = from.ddl_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      dddl_weight_ = from.dddl_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkPathWeights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkPathWeights::CopyFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathWeights::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathWeights::Swap(PiecewiseJerkPathWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkPathWeights::InternalSwap(PiecewiseJerkPathWeights* other) {
  std::swap(l_weight_, other->l_weight_);
  std::swap(dl_weight_, other->dl_weight_);
  std::swap(ddl_weight_, other->ddl_weight_);
  std::swap(dddl_weight_, other->dddl_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiecewiseJerkPathWeights::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PiecewiseJerkPathWeights

// optional double l_weight = 1 [default = 1];
bool PiecewiseJerkPathWeights::has_l_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PiecewiseJerkPathWeights::set_has_l_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void PiecewiseJerkPathWeights::clear_has_l_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void PiecewiseJerkPathWeights::clear_l_weight() {
  l_weight_ = 1;
  clear_has_l_weight();
}
double PiecewiseJerkPathWeights::l_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.l_weight)
  return l_weight_;
}
void PiecewiseJerkPathWeights::set_l_weight(double value) {
  set_has_l_weight();
  l_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.l_weight)
}

// optional double dl_weight = 2 [default = 100];
bool PiecewiseJerkPathWeights::has_dl_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PiecewiseJerkPathWeights::set_has_dl_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void PiecewiseJerkPathWeights::clear_has_dl_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void PiecewiseJerkPathWeights::clear_dl_weight() {
  dl_weight_ = 100;
  clear_has_dl_weight();
}
double PiecewiseJerkPathWeights::dl_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.dl_weight)
  return dl_weight_;
}
void PiecewiseJerkPathWeights::set_dl_weight(double value) {
  set_has_dl_weight();
  dl_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.dl_weight)
}

// optional double ddl_weight = 3 [default = 1000];
bool PiecewiseJerkPathWeights::has_ddl_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PiecewiseJerkPathWeights::set_has_ddl_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void PiecewiseJerkPathWeights::clear_has_ddl_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void PiecewiseJerkPathWeights::clear_ddl_weight() {
  ddl_weight_ = 1000;
  clear_has_ddl_weight();
}
double PiecewiseJerkPathWeights::ddl_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.ddl_weight)
  return ddl_weight_;
}
void PiecewiseJerkPathWeights::set_ddl_weight(double value) {
  set_has_ddl_weight();
  ddl_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.ddl_weight)
}

// optional double dddl_weight = 4 [default = 10000];
bool PiecewiseJerkPathWeights::has_dddl_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PiecewiseJerkPathWeights::set_has_dddl_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void PiecewiseJerkPathWeights::clear_has_dddl_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void PiecewiseJerkPathWeights::clear_dddl_weight() {
  dddl_weight_ = 10000;
  clear_has_dddl_weight();
}
double PiecewiseJerkPathWeights::dddl_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.dddl_weight)
  return dddl_weight_;
}
void PiecewiseJerkPathWeights::set_dddl_weight(double value) {
  set_has_dddl_weight();
  dddl_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.dddl_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
