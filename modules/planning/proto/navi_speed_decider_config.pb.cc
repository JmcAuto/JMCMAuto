// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_speed_decider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/navi_speed_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class NaviSpeedDeciderConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NaviSpeedDeciderConfig> {
} _NaviSpeedDeciderConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, preferred_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, preferred_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, preferred_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, max_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, max_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, obstacle_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, safe_distance_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, safe_distance_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, following_accel_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, soft_centric_accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, hard_centric_accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, hard_speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, hard_accel_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, enable_safe_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, enable_planning_start_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, enable_accel_auto_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, kappa_preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviSpeedDeciderConfig, kappa_threshold_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  2,
  3,
  4,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 23, sizeof(NaviSpeedDeciderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NaviSpeedDeciderConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/navi_speed_decider_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _NaviSpeedDeciderConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NaviSpeedDeciderConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n6modules/planning/proto/navi_speed_deci"
      "der_config.proto\022\021jmc_auto.planning\"\322\004\n\026"
      "NaviSpeedDeciderConfig\022\032\n\017preferred_acce"
      "l\030\001 \001(\001:\0012\022\032\n\017preferred_decel\030\002 \001(\001:\0012\022\031"
      "\n\016preferred_jerk\030\003 \001(\001:\0012\022\024\n\tmax_accel\030\004"
      " \001(\001:\0014\022\024\n\tmax_decel\030\005 \001(\001:\0015\022\034\n\017obstacl"
      "e_buffer\030\006 \001(\001:\0030.5\022\035\n\022safe_distance_bas"
      "e\030\007 \001(\001:\0012\022\036\n\023safe_distance_ratio\030\010 \001(\001:"
      "\0011\022\"\n\025following_accel_ratio\030\t \001(\001:\0030.5\022%"
      "\n\030soft_centric_accel_limit\030\n \001(\001:\0031.2\022%\n"
      "\030hard_centric_accel_limit\030\013 \001(\001:\0031.5\022\035\n\020"
      "hard_speed_limit\030\014 \001(\001:\003100\022\034\n\020hard_acce"
      "l_limit\030\r \001(\001:\00210\022\036\n\020enable_safe_path\030\016 "
      "\001(\010:\004true\022)\n\033enable_planning_start_point"
      "\030\017 \001(\010:\004true\022,\n\036enable_accel_auto_compen"
      "sation\030\020 \001(\010:\004true\022\030\n\rkappa_preview\030\021 \001("
      "\001:\0010\022\032\n\017kappa_threshold\030\022 \001(\001:\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/navi_speed_decider_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaviSpeedDeciderConfig::kPreferredAccelFieldNumber;
const int NaviSpeedDeciderConfig::kPreferredDecelFieldNumber;
const int NaviSpeedDeciderConfig::kPreferredJerkFieldNumber;
const int NaviSpeedDeciderConfig::kMaxAccelFieldNumber;
const int NaviSpeedDeciderConfig::kMaxDecelFieldNumber;
const int NaviSpeedDeciderConfig::kObstacleBufferFieldNumber;
const int NaviSpeedDeciderConfig::kSafeDistanceBaseFieldNumber;
const int NaviSpeedDeciderConfig::kSafeDistanceRatioFieldNumber;
const int NaviSpeedDeciderConfig::kFollowingAccelRatioFieldNumber;
const int NaviSpeedDeciderConfig::kSoftCentricAccelLimitFieldNumber;
const int NaviSpeedDeciderConfig::kHardCentricAccelLimitFieldNumber;
const int NaviSpeedDeciderConfig::kHardSpeedLimitFieldNumber;
const int NaviSpeedDeciderConfig::kHardAccelLimitFieldNumber;
const int NaviSpeedDeciderConfig::kEnableSafePathFieldNumber;
const int NaviSpeedDeciderConfig::kEnablePlanningStartPointFieldNumber;
const int NaviSpeedDeciderConfig::kEnableAccelAutoCompensationFieldNumber;
const int NaviSpeedDeciderConfig::kKappaPreviewFieldNumber;
const int NaviSpeedDeciderConfig::kKappaThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaviSpeedDeciderConfig::NaviSpeedDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.NaviSpeedDeciderConfig)
}
NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kappa_preview_, &from.kappa_preview_,
    reinterpret_cast<char*>(&hard_accel_limit_) -
    reinterpret_cast<char*>(&kappa_preview_) + sizeof(hard_accel_limit_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.NaviSpeedDeciderConfig)
}

void NaviSpeedDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&kappa_preview_, 0, reinterpret_cast<char*>(&kappa_threshold_) -
    reinterpret_cast<char*>(&kappa_preview_) + sizeof(kappa_threshold_));
  enable_safe_path_ = true;
  enable_planning_start_point_ = true;
  enable_accel_auto_compensation_ = true;
  preferred_accel_ = 2;
  preferred_decel_ = 2;
  preferred_jerk_ = 2;
  max_accel_ = 4;
  max_decel_ = 5;
  obstacle_buffer_ = 0.5;
  safe_distance_base_ = 2;
  safe_distance_ratio_ = 1;
  following_accel_ratio_ = 0.5;
  soft_centric_accel_limit_ = 1.2;
  hard_centric_accel_limit_ = 1.5;
  hard_speed_limit_ = 100;
  hard_accel_limit_ = 10;
}

NaviSpeedDeciderConfig::~NaviSpeedDeciderConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.NaviSpeedDeciderConfig)
  SharedDtor();
}

void NaviSpeedDeciderConfig::SharedDtor() {
}

void NaviSpeedDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NaviSpeedDeciderConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaviSpeedDeciderConfig& NaviSpeedDeciderConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NaviSpeedDeciderConfig* NaviSpeedDeciderConfig::New(::google::protobuf::Arena* arena) const {
  NaviSpeedDeciderConfig* n = new NaviSpeedDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NaviSpeedDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&kappa_preview_, 0, reinterpret_cast<char*>(&kappa_threshold_) -
      reinterpret_cast<char*>(&kappa_preview_) + sizeof(kappa_threshold_));
    enable_safe_path_ = true;
    enable_planning_start_point_ = true;
    enable_accel_auto_compensation_ = true;
    preferred_accel_ = 2;
    preferred_decel_ = 2;
    preferred_jerk_ = 2;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    max_accel_ = 4;
    max_decel_ = 5;
    obstacle_buffer_ = 0.5;
    safe_distance_base_ = 2;
    safe_distance_ratio_ = 1;
    following_accel_ratio_ = 0.5;
    soft_centric_accel_limit_ = 1.2;
    hard_centric_accel_limit_ = 1.5;
  }
  if (_has_bits_[16 / 32] & 196608u) {
    hard_speed_limit_ = 100;
    hard_accel_limit_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NaviSpeedDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double preferred_accel = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_preferred_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_decel = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_preferred_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_jerk = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_preferred_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_accel = 4 [default = 4];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_max_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_decel = 5 [default = 5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_max_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_buffer = 6 [default = 0.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_obstacle_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance_base = 7 [default = 2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_safe_distance_base();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double safe_distance_ratio = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_safe_distance_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double following_accel_ratio = 9 [default = 0.5];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_following_accel_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_accel_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double soft_centric_accel_limit = 10 [default = 1.2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_soft_centric_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &soft_centric_accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hard_centric_accel_limit = 11 [default = 1.5];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_hard_centric_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hard_centric_accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hard_speed_limit = 12 [default = 100];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_hard_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hard_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hard_accel_limit = 13 [default = 10];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_hard_accel_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hard_accel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_safe_path = 14 [default = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_enable_safe_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_safe_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_planning_start_point = 15 [default = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_enable_planning_start_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_planning_start_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_accel_auto_compensation = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_enable_accel_auto_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_accel_auto_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_preview = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_kappa_preview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_preview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_threshold = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_kappa_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.NaviSpeedDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.NaviSpeedDeciderConfig)
  return false;
#undef DO_
}

void NaviSpeedDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->preferred_accel(), output);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->preferred_decel(), output);
  }

  // optional double preferred_jerk = 3 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preferred_jerk(), output);
  }

  // optional double max_accel = 4 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_accel(), output);
  }

  // optional double max_decel = 5 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_decel(), output);
  }

  // optional double obstacle_buffer = 6 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->obstacle_buffer(), output);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->safe_distance_base(), output);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->safe_distance_ratio(), output);
  }

  // optional double following_accel_ratio = 9 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->following_accel_ratio(), output);
  }

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->soft_centric_accel_limit(), output);
  }

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->hard_centric_accel_limit(), output);
  }

  // optional double hard_speed_limit = 12 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->hard_speed_limit(), output);
  }

  // optional double hard_accel_limit = 13 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->hard_accel_limit(), output);
  }

  // optional bool enable_safe_path = 14 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_safe_path(), output);
  }

  // optional bool enable_planning_start_point = 15 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_planning_start_point(), output);
  }

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->enable_accel_auto_compensation(), output);
  }

  // optional double kappa_preview = 17 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->kappa_preview(), output);
  }

  // optional double kappa_threshold = 18 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->kappa_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.NaviSpeedDeciderConfig)
}

::google::protobuf::uint8* NaviSpeedDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->preferred_accel(), target);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->preferred_decel(), target);
  }

  // optional double preferred_jerk = 3 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preferred_jerk(), target);
  }

  // optional double max_accel = 4 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_accel(), target);
  }

  // optional double max_decel = 5 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_decel(), target);
  }

  // optional double obstacle_buffer = 6 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->obstacle_buffer(), target);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->safe_distance_base(), target);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->safe_distance_ratio(), target);
  }

  // optional double following_accel_ratio = 9 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->following_accel_ratio(), target);
  }

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->soft_centric_accel_limit(), target);
  }

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->hard_centric_accel_limit(), target);
  }

  // optional double hard_speed_limit = 12 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->hard_speed_limit(), target);
  }

  // optional double hard_accel_limit = 13 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->hard_accel_limit(), target);
  }

  // optional bool enable_safe_path = 14 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_safe_path(), target);
  }

  // optional bool enable_planning_start_point = 15 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_planning_start_point(), target);
  }

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->enable_accel_auto_compensation(), target);
  }

  // optional double kappa_preview = 17 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->kappa_preview(), target);
  }

  // optional double kappa_threshold = 18 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->kappa_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.NaviSpeedDeciderConfig)
  return target;
}

size_t NaviSpeedDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double kappa_preview = 17 [default = 0];
    if (has_kappa_preview()) {
      total_size += 2 + 8;
    }

    // optional double kappa_threshold = 18 [default = 0];
    if (has_kappa_threshold()) {
      total_size += 2 + 8;
    }

    // optional bool enable_safe_path = 14 [default = true];
    if (has_enable_safe_path()) {
      total_size += 1 + 1;
    }

    // optional bool enable_planning_start_point = 15 [default = true];
    if (has_enable_planning_start_point()) {
      total_size += 1 + 1;
    }

    // optional bool enable_accel_auto_compensation = 16 [default = true];
    if (has_enable_accel_auto_compensation()) {
      total_size += 2 + 1;
    }

    // optional double preferred_accel = 1 [default = 2];
    if (has_preferred_accel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 2 [default = 2];
    if (has_preferred_decel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_jerk = 3 [default = 2];
    if (has_preferred_jerk()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double max_accel = 4 [default = 4];
    if (has_max_accel()) {
      total_size += 1 + 8;
    }

    // optional double max_decel = 5 [default = 5];
    if (has_max_decel()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_buffer = 6 [default = 0.5];
    if (has_obstacle_buffer()) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_base = 7 [default = 2];
    if (has_safe_distance_base()) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_ratio = 8 [default = 1];
    if (has_safe_distance_ratio()) {
      total_size += 1 + 8;
    }

    // optional double following_accel_ratio = 9 [default = 0.5];
    if (has_following_accel_ratio()) {
      total_size += 1 + 8;
    }

    // optional double soft_centric_accel_limit = 10 [default = 1.2];
    if (has_soft_centric_accel_limit()) {
      total_size += 1 + 8;
    }

    // optional double hard_centric_accel_limit = 11 [default = 1.5];
    if (has_hard_centric_accel_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double hard_speed_limit = 12 [default = 100];
    if (has_hard_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double hard_accel_limit = 13 [default = 10];
    if (has_hard_accel_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NaviSpeedDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviSpeedDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaviSpeedDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.NaviSpeedDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.NaviSpeedDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviSpeedDeciderConfig::MergeFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      kappa_preview_ = from.kappa_preview_;
    }
    if (cached_has_bits & 0x00000002u) {
      kappa_threshold_ = from.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_safe_path_ = from.enable_safe_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_planning_start_point_ = from.enable_planning_start_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_accel_auto_compensation_ = from.enable_accel_auto_compensation_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_accel_ = from.preferred_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      preferred_decel_ = from.preferred_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      preferred_jerk_ = from.preferred_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      max_accel_ = from.max_accel_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_decel_ = from.max_decel_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_buffer_ = from.obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      safe_distance_base_ = from.safe_distance_base_;
    }
    if (cached_has_bits & 0x00001000u) {
      safe_distance_ratio_ = from.safe_distance_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      following_accel_ratio_ = from.following_accel_ratio_;
    }
    if (cached_has_bits & 0x00004000u) {
      soft_centric_accel_limit_ = from.soft_centric_accel_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      hard_centric_accel_limit_ = from.hard_centric_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      hard_speed_limit_ = from.hard_speed_limit_;
    }
    if (cached_has_bits & 0x00020000u) {
      hard_accel_limit_ = from.hard_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviSpeedDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviSpeedDeciderConfig::CopyFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviSpeedDeciderConfig::IsInitialized() const {
  return true;
}

void NaviSpeedDeciderConfig::Swap(NaviSpeedDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaviSpeedDeciderConfig::InternalSwap(NaviSpeedDeciderConfig* other) {
  std::swap(kappa_preview_, other->kappa_preview_);
  std::swap(kappa_threshold_, other->kappa_threshold_);
  std::swap(enable_safe_path_, other->enable_safe_path_);
  std::swap(enable_planning_start_point_, other->enable_planning_start_point_);
  std::swap(enable_accel_auto_compensation_, other->enable_accel_auto_compensation_);
  std::swap(preferred_accel_, other->preferred_accel_);
  std::swap(preferred_decel_, other->preferred_decel_);
  std::swap(preferred_jerk_, other->preferred_jerk_);
  std::swap(max_accel_, other->max_accel_);
  std::swap(max_decel_, other->max_decel_);
  std::swap(obstacle_buffer_, other->obstacle_buffer_);
  std::swap(safe_distance_base_, other->safe_distance_base_);
  std::swap(safe_distance_ratio_, other->safe_distance_ratio_);
  std::swap(following_accel_ratio_, other->following_accel_ratio_);
  std::swap(soft_centric_accel_limit_, other->soft_centric_accel_limit_);
  std::swap(hard_centric_accel_limit_, other->hard_centric_accel_limit_);
  std::swap(hard_speed_limit_, other->hard_speed_limit_);
  std::swap(hard_accel_limit_, other->hard_accel_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NaviSpeedDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NaviSpeedDeciderConfig

// optional double preferred_accel = 1 [default = 2];
bool NaviSpeedDeciderConfig::has_preferred_accel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NaviSpeedDeciderConfig::set_has_preferred_accel() {
  _has_bits_[0] |= 0x00000020u;
}
void NaviSpeedDeciderConfig::clear_has_preferred_accel() {
  _has_bits_[0] &= ~0x00000020u;
}
void NaviSpeedDeciderConfig::clear_preferred_accel() {
  preferred_accel_ = 2;
  clear_has_preferred_accel();
}
double NaviSpeedDeciderConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.preferred_accel)
  return preferred_accel_;
}
void NaviSpeedDeciderConfig::set_preferred_accel(double value) {
  set_has_preferred_accel();
  preferred_accel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.preferred_accel)
}

// optional double preferred_decel = 2 [default = 2];
bool NaviSpeedDeciderConfig::has_preferred_decel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NaviSpeedDeciderConfig::set_has_preferred_decel() {
  _has_bits_[0] |= 0x00000040u;
}
void NaviSpeedDeciderConfig::clear_has_preferred_decel() {
  _has_bits_[0] &= ~0x00000040u;
}
void NaviSpeedDeciderConfig::clear_preferred_decel() {
  preferred_decel_ = 2;
  clear_has_preferred_decel();
}
double NaviSpeedDeciderConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.preferred_decel)
  return preferred_decel_;
}
void NaviSpeedDeciderConfig::set_preferred_decel(double value) {
  set_has_preferred_decel();
  preferred_decel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.preferred_decel)
}

// optional double preferred_jerk = 3 [default = 2];
bool NaviSpeedDeciderConfig::has_preferred_jerk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NaviSpeedDeciderConfig::set_has_preferred_jerk() {
  _has_bits_[0] |= 0x00000080u;
}
void NaviSpeedDeciderConfig::clear_has_preferred_jerk() {
  _has_bits_[0] &= ~0x00000080u;
}
void NaviSpeedDeciderConfig::clear_preferred_jerk() {
  preferred_jerk_ = 2;
  clear_has_preferred_jerk();
}
double NaviSpeedDeciderConfig::preferred_jerk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.preferred_jerk)
  return preferred_jerk_;
}
void NaviSpeedDeciderConfig::set_preferred_jerk(double value) {
  set_has_preferred_jerk();
  preferred_jerk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.preferred_jerk)
}

// optional double max_accel = 4 [default = 4];
bool NaviSpeedDeciderConfig::has_max_accel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NaviSpeedDeciderConfig::set_has_max_accel() {
  _has_bits_[0] |= 0x00000100u;
}
void NaviSpeedDeciderConfig::clear_has_max_accel() {
  _has_bits_[0] &= ~0x00000100u;
}
void NaviSpeedDeciderConfig::clear_max_accel() {
  max_accel_ = 4;
  clear_has_max_accel();
}
double NaviSpeedDeciderConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.max_accel)
  return max_accel_;
}
void NaviSpeedDeciderConfig::set_max_accel(double value) {
  set_has_max_accel();
  max_accel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.max_accel)
}

// optional double max_decel = 5 [default = 5];
bool NaviSpeedDeciderConfig::has_max_decel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NaviSpeedDeciderConfig::set_has_max_decel() {
  _has_bits_[0] |= 0x00000200u;
}
void NaviSpeedDeciderConfig::clear_has_max_decel() {
  _has_bits_[0] &= ~0x00000200u;
}
void NaviSpeedDeciderConfig::clear_max_decel() {
  max_decel_ = 5;
  clear_has_max_decel();
}
double NaviSpeedDeciderConfig::max_decel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.max_decel)
  return max_decel_;
}
void NaviSpeedDeciderConfig::set_max_decel(double value) {
  set_has_max_decel();
  max_decel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.max_decel)
}

// optional double obstacle_buffer = 6 [default = 0.5];
bool NaviSpeedDeciderConfig::has_obstacle_buffer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NaviSpeedDeciderConfig::set_has_obstacle_buffer() {
  _has_bits_[0] |= 0x00000400u;
}
void NaviSpeedDeciderConfig::clear_has_obstacle_buffer() {
  _has_bits_[0] &= ~0x00000400u;
}
void NaviSpeedDeciderConfig::clear_obstacle_buffer() {
  obstacle_buffer_ = 0.5;
  clear_has_obstacle_buffer();
}
double NaviSpeedDeciderConfig::obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.obstacle_buffer)
  return obstacle_buffer_;
}
void NaviSpeedDeciderConfig::set_obstacle_buffer(double value) {
  set_has_obstacle_buffer();
  obstacle_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.obstacle_buffer)
}

// optional double safe_distance_base = 7 [default = 2];
bool NaviSpeedDeciderConfig::has_safe_distance_base() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NaviSpeedDeciderConfig::set_has_safe_distance_base() {
  _has_bits_[0] |= 0x00000800u;
}
void NaviSpeedDeciderConfig::clear_has_safe_distance_base() {
  _has_bits_[0] &= ~0x00000800u;
}
void NaviSpeedDeciderConfig::clear_safe_distance_base() {
  safe_distance_base_ = 2;
  clear_has_safe_distance_base();
}
double NaviSpeedDeciderConfig::safe_distance_base() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.safe_distance_base)
  return safe_distance_base_;
}
void NaviSpeedDeciderConfig::set_safe_distance_base(double value) {
  set_has_safe_distance_base();
  safe_distance_base_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.safe_distance_base)
}

// optional double safe_distance_ratio = 8 [default = 1];
bool NaviSpeedDeciderConfig::has_safe_distance_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NaviSpeedDeciderConfig::set_has_safe_distance_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
void NaviSpeedDeciderConfig::clear_has_safe_distance_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
void NaviSpeedDeciderConfig::clear_safe_distance_ratio() {
  safe_distance_ratio_ = 1;
  clear_has_safe_distance_ratio();
}
double NaviSpeedDeciderConfig::safe_distance_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
  return safe_distance_ratio_;
}
void NaviSpeedDeciderConfig::set_safe_distance_ratio(double value) {
  set_has_safe_distance_ratio();
  safe_distance_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
}

// optional double following_accel_ratio = 9 [default = 0.5];
bool NaviSpeedDeciderConfig::has_following_accel_ratio() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NaviSpeedDeciderConfig::set_has_following_accel_ratio() {
  _has_bits_[0] |= 0x00002000u;
}
void NaviSpeedDeciderConfig::clear_has_following_accel_ratio() {
  _has_bits_[0] &= ~0x00002000u;
}
void NaviSpeedDeciderConfig::clear_following_accel_ratio() {
  following_accel_ratio_ = 0.5;
  clear_has_following_accel_ratio();
}
double NaviSpeedDeciderConfig::following_accel_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.following_accel_ratio)
  return following_accel_ratio_;
}
void NaviSpeedDeciderConfig::set_following_accel_ratio(double value) {
  set_has_following_accel_ratio();
  following_accel_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.following_accel_ratio)
}

// optional double soft_centric_accel_limit = 10 [default = 1.2];
bool NaviSpeedDeciderConfig::has_soft_centric_accel_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NaviSpeedDeciderConfig::set_has_soft_centric_accel_limit() {
  _has_bits_[0] |= 0x00004000u;
}
void NaviSpeedDeciderConfig::clear_has_soft_centric_accel_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
void NaviSpeedDeciderConfig::clear_soft_centric_accel_limit() {
  soft_centric_accel_limit_ = 1.2;
  clear_has_soft_centric_accel_limit();
}
double NaviSpeedDeciderConfig::soft_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
  return soft_centric_accel_limit_;
}
void NaviSpeedDeciderConfig::set_soft_centric_accel_limit(double value) {
  set_has_soft_centric_accel_limit();
  soft_centric_accel_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
}

// optional double hard_centric_accel_limit = 11 [default = 1.5];
bool NaviSpeedDeciderConfig::has_hard_centric_accel_limit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NaviSpeedDeciderConfig::set_has_hard_centric_accel_limit() {
  _has_bits_[0] |= 0x00008000u;
}
void NaviSpeedDeciderConfig::clear_has_hard_centric_accel_limit() {
  _has_bits_[0] &= ~0x00008000u;
}
void NaviSpeedDeciderConfig::clear_hard_centric_accel_limit() {
  hard_centric_accel_limit_ = 1.5;
  clear_has_hard_centric_accel_limit();
}
double NaviSpeedDeciderConfig::hard_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
  return hard_centric_accel_limit_;
}
void NaviSpeedDeciderConfig::set_hard_centric_accel_limit(double value) {
  set_has_hard_centric_accel_limit();
  hard_centric_accel_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
}

// optional double hard_speed_limit = 12 [default = 100];
bool NaviSpeedDeciderConfig::has_hard_speed_limit() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NaviSpeedDeciderConfig::set_has_hard_speed_limit() {
  _has_bits_[0] |= 0x00010000u;
}
void NaviSpeedDeciderConfig::clear_has_hard_speed_limit() {
  _has_bits_[0] &= ~0x00010000u;
}
void NaviSpeedDeciderConfig::clear_hard_speed_limit() {
  hard_speed_limit_ = 100;
  clear_has_hard_speed_limit();
}
double NaviSpeedDeciderConfig::hard_speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.hard_speed_limit)
  return hard_speed_limit_;
}
void NaviSpeedDeciderConfig::set_hard_speed_limit(double value) {
  set_has_hard_speed_limit();
  hard_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.hard_speed_limit)
}

// optional double hard_accel_limit = 13 [default = 10];
bool NaviSpeedDeciderConfig::has_hard_accel_limit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NaviSpeedDeciderConfig::set_has_hard_accel_limit() {
  _has_bits_[0] |= 0x00020000u;
}
void NaviSpeedDeciderConfig::clear_has_hard_accel_limit() {
  _has_bits_[0] &= ~0x00020000u;
}
void NaviSpeedDeciderConfig::clear_hard_accel_limit() {
  hard_accel_limit_ = 10;
  clear_has_hard_accel_limit();
}
double NaviSpeedDeciderConfig::hard_accel_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.hard_accel_limit)
  return hard_accel_limit_;
}
void NaviSpeedDeciderConfig::set_hard_accel_limit(double value) {
  set_has_hard_accel_limit();
  hard_accel_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.hard_accel_limit)
}

// optional bool enable_safe_path = 14 [default = true];
bool NaviSpeedDeciderConfig::has_enable_safe_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NaviSpeedDeciderConfig::set_has_enable_safe_path() {
  _has_bits_[0] |= 0x00000004u;
}
void NaviSpeedDeciderConfig::clear_has_enable_safe_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void NaviSpeedDeciderConfig::clear_enable_safe_path() {
  enable_safe_path_ = true;
  clear_has_enable_safe_path();
}
bool NaviSpeedDeciderConfig::enable_safe_path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.enable_safe_path)
  return enable_safe_path_;
}
void NaviSpeedDeciderConfig::set_enable_safe_path(bool value) {
  set_has_enable_safe_path();
  enable_safe_path_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.enable_safe_path)
}

// optional bool enable_planning_start_point = 15 [default = true];
bool NaviSpeedDeciderConfig::has_enable_planning_start_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NaviSpeedDeciderConfig::set_has_enable_planning_start_point() {
  _has_bits_[0] |= 0x00000008u;
}
void NaviSpeedDeciderConfig::clear_has_enable_planning_start_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void NaviSpeedDeciderConfig::clear_enable_planning_start_point() {
  enable_planning_start_point_ = true;
  clear_has_enable_planning_start_point();
}
bool NaviSpeedDeciderConfig::enable_planning_start_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
  return enable_planning_start_point_;
}
void NaviSpeedDeciderConfig::set_enable_planning_start_point(bool value) {
  set_has_enable_planning_start_point();
  enable_planning_start_point_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
}

// optional bool enable_accel_auto_compensation = 16 [default = true];
bool NaviSpeedDeciderConfig::has_enable_accel_auto_compensation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NaviSpeedDeciderConfig::set_has_enable_accel_auto_compensation() {
  _has_bits_[0] |= 0x00000010u;
}
void NaviSpeedDeciderConfig::clear_has_enable_accel_auto_compensation() {
  _has_bits_[0] &= ~0x00000010u;
}
void NaviSpeedDeciderConfig::clear_enable_accel_auto_compensation() {
  enable_accel_auto_compensation_ = true;
  clear_has_enable_accel_auto_compensation();
}
bool NaviSpeedDeciderConfig::enable_accel_auto_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
  return enable_accel_auto_compensation_;
}
void NaviSpeedDeciderConfig::set_enable_accel_auto_compensation(bool value) {
  set_has_enable_accel_auto_compensation();
  enable_accel_auto_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
}

// optional double kappa_preview = 17 [default = 0];
bool NaviSpeedDeciderConfig::has_kappa_preview() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NaviSpeedDeciderConfig::set_has_kappa_preview() {
  _has_bits_[0] |= 0x00000001u;
}
void NaviSpeedDeciderConfig::clear_has_kappa_preview() {
  _has_bits_[0] &= ~0x00000001u;
}
void NaviSpeedDeciderConfig::clear_kappa_preview() {
  kappa_preview_ = 0;
  clear_has_kappa_preview();
}
double NaviSpeedDeciderConfig::kappa_preview() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.kappa_preview)
  return kappa_preview_;
}
void NaviSpeedDeciderConfig::set_kappa_preview(double value) {
  set_has_kappa_preview();
  kappa_preview_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.kappa_preview)
}

// optional double kappa_threshold = 18 [default = 0];
bool NaviSpeedDeciderConfig::has_kappa_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NaviSpeedDeciderConfig::set_has_kappa_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void NaviSpeedDeciderConfig::clear_has_kappa_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void NaviSpeedDeciderConfig::clear_kappa_threshold() {
  kappa_threshold_ = 0;
  clear_has_kappa_threshold();
}
double NaviSpeedDeciderConfig::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviSpeedDeciderConfig.kappa_threshold)
  return kappa_threshold_;
}
void NaviSpeedDeciderConfig::set_kappa_threshold(double value) {
  set_has_kappa_threshold();
  kappa_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviSpeedDeciderConfig.kappa_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
