// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_obstacle_decider_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class NaviObstacleDeciderConfig;
class NaviObstacleDeciderConfigDefaultTypeInternal;
extern NaviObstacleDeciderConfigDefaultTypeInternal _NaviObstacleDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto

// ===================================================================

class NaviObstacleDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.NaviObstacleDeciderConfig) */ {
 public:
  NaviObstacleDeciderConfig();
  virtual ~NaviObstacleDeciderConfig();

  NaviObstacleDeciderConfig(const NaviObstacleDeciderConfig& from);

  inline NaviObstacleDeciderConfig& operator=(const NaviObstacleDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NaviObstacleDeciderConfig& default_instance();

  static inline const NaviObstacleDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviObstacleDeciderConfig*>(
               &_NaviObstacleDeciderConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NaviObstacleDeciderConfig* other);

  // implements Message ----------------------------------------------

  inline NaviObstacleDeciderConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  NaviObstacleDeciderConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NaviObstacleDeciderConfig& from);
  void MergeFrom(const NaviObstacleDeciderConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NaviObstacleDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min_nudge_distance = 1 [default = 0.2];
  bool has_min_nudge_distance() const;
  void clear_min_nudge_distance();
  static const int kMinNudgeDistanceFieldNumber = 1;
  double min_nudge_distance() const;
  void set_min_nudge_distance(double value);

  // optional double max_nudge_distance = 2 [default = 1.2];
  bool has_max_nudge_distance() const;
  void clear_max_nudge_distance();
  static const int kMaxNudgeDistanceFieldNumber = 2;
  double max_nudge_distance() const;
  void set_max_nudge_distance(double value);

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  bool has_max_allow_nudge_speed() const;
  void clear_max_allow_nudge_speed();
  static const int kMaxAllowNudgeSpeedFieldNumber = 3;
  double max_allow_nudge_speed() const;
  void set_max_allow_nudge_speed(double value);

  // optional double safe_distance = 4 [default = 0.2];
  bool has_safe_distance() const;
  void clear_safe_distance();
  static const int kSafeDistanceFieldNumber = 4;
  double safe_distance() const;
  void set_safe_distance(double value);

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  bool has_nudge_allow_tolerance() const;
  void clear_nudge_allow_tolerance();
  static const int kNudgeAllowToleranceFieldNumber = 5;
  double nudge_allow_tolerance() const;
  void set_nudge_allow_tolerance(double value);

  // optional double judge_dis_coeff = 7 [default = 2];
  bool has_judge_dis_coeff() const;
  void clear_judge_dis_coeff();
  static const int kJudgeDisCoeffFieldNumber = 7;
  double judge_dis_coeff() const;
  void set_judge_dis_coeff(double value);

  // optional double basis_dis_value = 8 [default = 30];
  bool has_basis_dis_value() const;
  void clear_basis_dis_value();
  static const int kBasisDisValueFieldNumber = 8;
  double basis_dis_value() const;
  void set_basis_dis_value(double value);

  // optional uint32 cycles_number = 6 [default = 3];
  bool has_cycles_number() const;
  void clear_cycles_number();
  static const int kCyclesNumberFieldNumber = 6;
  ::google::protobuf::uint32 cycles_number() const;
  void set_cycles_number(::google::protobuf::uint32 value);

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  bool has_max_keep_nudge_cycles() const;
  void clear_max_keep_nudge_cycles();
  static const int kMaxKeepNudgeCyclesFieldNumber = 11;
  ::google::protobuf::uint32 max_keep_nudge_cycles() const;
  void set_max_keep_nudge_cycles(::google::protobuf::uint32 value);

  // optional double lateral_velocity_value = 9 [default = 0.5];
  bool has_lateral_velocity_value() const;
  void clear_lateral_velocity_value();
  static const int kLateralVelocityValueFieldNumber = 9;
  double lateral_velocity_value() const;
  void set_lateral_velocity_value(double value);

  // optional double speed_decider_detect_range = 10 [default = 1];
  bool has_speed_decider_detect_range() const;
  void clear_speed_decider_detect_range();
  static const int kSpeedDeciderDetectRangeFieldNumber = 10;
  double speed_decider_detect_range() const;
  void set_speed_decider_detect_range(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.NaviObstacleDeciderConfig)
 private:
  void set_has_min_nudge_distance();
  void clear_has_min_nudge_distance();
  void set_has_max_nudge_distance();
  void clear_has_max_nudge_distance();
  void set_has_max_allow_nudge_speed();
  void clear_has_max_allow_nudge_speed();
  void set_has_safe_distance();
  void clear_has_safe_distance();
  void set_has_nudge_allow_tolerance();
  void clear_has_nudge_allow_tolerance();
  void set_has_cycles_number();
  void clear_has_cycles_number();
  void set_has_judge_dis_coeff();
  void clear_has_judge_dis_coeff();
  void set_has_basis_dis_value();
  void clear_has_basis_dis_value();
  void set_has_lateral_velocity_value();
  void clear_has_lateral_velocity_value();
  void set_has_speed_decider_detect_range();
  void clear_has_speed_decider_detect_range();
  void set_has_max_keep_nudge_cycles();
  void clear_has_max_keep_nudge_cycles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double min_nudge_distance_;
  double max_nudge_distance_;
  double max_allow_nudge_speed_;
  double safe_distance_;
  double nudge_allow_tolerance_;
  double judge_dis_coeff_;
  double basis_dis_value_;
  ::google::protobuf::uint32 cycles_number_;
  ::google::protobuf::uint32 max_keep_nudge_cycles_;
  double lateral_velocity_value_;
  double speed_decider_detect_range_;
  friend struct protobuf_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NaviObstacleDeciderConfig

// optional double min_nudge_distance = 1 [default = 0.2];
inline bool NaviObstacleDeciderConfig::has_min_nudge_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_min_nudge_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NaviObstacleDeciderConfig::clear_has_min_nudge_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NaviObstacleDeciderConfig::clear_min_nudge_distance() {
  min_nudge_distance_ = 0.2;
  clear_has_min_nudge_distance();
}
inline double NaviObstacleDeciderConfig::min_nudge_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.min_nudge_distance)
  return min_nudge_distance_;
}
inline void NaviObstacleDeciderConfig::set_min_nudge_distance(double value) {
  set_has_min_nudge_distance();
  min_nudge_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.min_nudge_distance)
}

// optional double max_nudge_distance = 2 [default = 1.2];
inline bool NaviObstacleDeciderConfig::has_max_nudge_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_max_nudge_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NaviObstacleDeciderConfig::clear_has_max_nudge_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NaviObstacleDeciderConfig::clear_max_nudge_distance() {
  max_nudge_distance_ = 1.2;
  clear_has_max_nudge_distance();
}
inline double NaviObstacleDeciderConfig::max_nudge_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.max_nudge_distance)
  return max_nudge_distance_;
}
inline void NaviObstacleDeciderConfig::set_max_nudge_distance(double value) {
  set_has_max_nudge_distance();
  max_nudge_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.max_nudge_distance)
}

// optional double max_allow_nudge_speed = 3 [default = 16.667];
inline bool NaviObstacleDeciderConfig::has_max_allow_nudge_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_max_allow_nudge_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NaviObstacleDeciderConfig::clear_has_max_allow_nudge_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NaviObstacleDeciderConfig::clear_max_allow_nudge_speed() {
  max_allow_nudge_speed_ = 16.667;
  clear_has_max_allow_nudge_speed();
}
inline double NaviObstacleDeciderConfig::max_allow_nudge_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.max_allow_nudge_speed)
  return max_allow_nudge_speed_;
}
inline void NaviObstacleDeciderConfig::set_max_allow_nudge_speed(double value) {
  set_has_max_allow_nudge_speed();
  max_allow_nudge_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.max_allow_nudge_speed)
}

// optional double safe_distance = 4 [default = 0.2];
inline bool NaviObstacleDeciderConfig::has_safe_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_safe_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NaviObstacleDeciderConfig::clear_has_safe_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NaviObstacleDeciderConfig::clear_safe_distance() {
  safe_distance_ = 0.2;
  clear_has_safe_distance();
}
inline double NaviObstacleDeciderConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.safe_distance)
  return safe_distance_;
}
inline void NaviObstacleDeciderConfig::set_safe_distance(double value) {
  set_has_safe_distance();
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.safe_distance)
}

// optional double nudge_allow_tolerance = 5 [default = 0.05];
inline bool NaviObstacleDeciderConfig::has_nudge_allow_tolerance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_nudge_allow_tolerance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NaviObstacleDeciderConfig::clear_has_nudge_allow_tolerance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NaviObstacleDeciderConfig::clear_nudge_allow_tolerance() {
  nudge_allow_tolerance_ = 0.05;
  clear_has_nudge_allow_tolerance();
}
inline double NaviObstacleDeciderConfig::nudge_allow_tolerance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.nudge_allow_tolerance)
  return nudge_allow_tolerance_;
}
inline void NaviObstacleDeciderConfig::set_nudge_allow_tolerance(double value) {
  set_has_nudge_allow_tolerance();
  nudge_allow_tolerance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.nudge_allow_tolerance)
}

// optional uint32 cycles_number = 6 [default = 3];
inline bool NaviObstacleDeciderConfig::has_cycles_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_cycles_number() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NaviObstacleDeciderConfig::clear_has_cycles_number() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NaviObstacleDeciderConfig::clear_cycles_number() {
  cycles_number_ = 3u;
  clear_has_cycles_number();
}
inline ::google::protobuf::uint32 NaviObstacleDeciderConfig::cycles_number() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.cycles_number)
  return cycles_number_;
}
inline void NaviObstacleDeciderConfig::set_cycles_number(::google::protobuf::uint32 value) {
  set_has_cycles_number();
  cycles_number_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.cycles_number)
}

// optional double judge_dis_coeff = 7 [default = 2];
inline bool NaviObstacleDeciderConfig::has_judge_dis_coeff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_judge_dis_coeff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NaviObstacleDeciderConfig::clear_has_judge_dis_coeff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NaviObstacleDeciderConfig::clear_judge_dis_coeff() {
  judge_dis_coeff_ = 2;
  clear_has_judge_dis_coeff();
}
inline double NaviObstacleDeciderConfig::judge_dis_coeff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.judge_dis_coeff)
  return judge_dis_coeff_;
}
inline void NaviObstacleDeciderConfig::set_judge_dis_coeff(double value) {
  set_has_judge_dis_coeff();
  judge_dis_coeff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.judge_dis_coeff)
}

// optional double basis_dis_value = 8 [default = 30];
inline bool NaviObstacleDeciderConfig::has_basis_dis_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_basis_dis_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NaviObstacleDeciderConfig::clear_has_basis_dis_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NaviObstacleDeciderConfig::clear_basis_dis_value() {
  basis_dis_value_ = 30;
  clear_has_basis_dis_value();
}
inline double NaviObstacleDeciderConfig::basis_dis_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.basis_dis_value)
  return basis_dis_value_;
}
inline void NaviObstacleDeciderConfig::set_basis_dis_value(double value) {
  set_has_basis_dis_value();
  basis_dis_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.basis_dis_value)
}

// optional double lateral_velocity_value = 9 [default = 0.5];
inline bool NaviObstacleDeciderConfig::has_lateral_velocity_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_lateral_velocity_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NaviObstacleDeciderConfig::clear_has_lateral_velocity_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NaviObstacleDeciderConfig::clear_lateral_velocity_value() {
  lateral_velocity_value_ = 0.5;
  clear_has_lateral_velocity_value();
}
inline double NaviObstacleDeciderConfig::lateral_velocity_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.lateral_velocity_value)
  return lateral_velocity_value_;
}
inline void NaviObstacleDeciderConfig::set_lateral_velocity_value(double value) {
  set_has_lateral_velocity_value();
  lateral_velocity_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.lateral_velocity_value)
}

// optional double speed_decider_detect_range = 10 [default = 1];
inline bool NaviObstacleDeciderConfig::has_speed_decider_detect_range() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_speed_decider_detect_range() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NaviObstacleDeciderConfig::clear_has_speed_decider_detect_range() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NaviObstacleDeciderConfig::clear_speed_decider_detect_range() {
  speed_decider_detect_range_ = 1;
  clear_has_speed_decider_detect_range();
}
inline double NaviObstacleDeciderConfig::speed_decider_detect_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.speed_decider_detect_range)
  return speed_decider_detect_range_;
}
inline void NaviObstacleDeciderConfig::set_speed_decider_detect_range(double value) {
  set_has_speed_decider_detect_range();
  speed_decider_detect_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.speed_decider_detect_range)
}

// optional uint32 max_keep_nudge_cycles = 11 [default = 100];
inline bool NaviObstacleDeciderConfig::has_max_keep_nudge_cycles() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NaviObstacleDeciderConfig::set_has_max_keep_nudge_cycles() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NaviObstacleDeciderConfig::clear_has_max_keep_nudge_cycles() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NaviObstacleDeciderConfig::clear_max_keep_nudge_cycles() {
  max_keep_nudge_cycles_ = 100u;
  clear_has_max_keep_nudge_cycles();
}
inline ::google::protobuf::uint32 NaviObstacleDeciderConfig::max_keep_nudge_cycles() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviObstacleDeciderConfig.max_keep_nudge_cycles)
  return max_keep_nudge_cycles_;
}
inline void NaviObstacleDeciderConfig::set_max_keep_nudge_cycles(::google::protobuf::uint32 value) {
  set_has_max_keep_nudge_cycles();
  max_keep_nudge_cycles_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviObstacleDeciderConfig.max_keep_nudge_cycles)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto__INCLUDED
