// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planner_open_space_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planner_open_space_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class PlannerOpenSpaceConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlannerOpenSpaceConfig> {
} _PlannerOpenSpaceConfig_default_instance_;
class ROIConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROIConfig> {
} _ROIConfig_default_instance_;
class WarmStartConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WarmStartConfig> {
} _WarmStartConfig_default_instance_;
class DualVariableWarmStartConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DualVariableWarmStartConfig> {
} _DualVariableWarmStartConfig_default_instance_;
class DistanceApproachConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistanceApproachConfig> {
} _DistanceApproachConfig_default_instance_;
class IpoptConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IpoptConfig> {
} _IpoptConfig_default_instance_;
class OSQPConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OSQPConfig> {
} _OSQPConfig_default_instance_;
class IterativeAnchoringConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IterativeAnchoringConfig> {
} _IterativeAnchoringConfig_default_instance_;
class TrajectoryPartitionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPartitionConfig> {
} _TrajectoryPartitionConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, roi_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, warm_start_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, dual_variable_warm_start_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, distance_approach_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, iterative_anchoring_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, trajectory_partition_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, is_near_destination_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, enable_check_parallel_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, enable_linear_interpolation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlannerOpenSpaceConfig, is_near_destination_theta_threshold_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  6,
  7,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIConfig, roi_longitudinal_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIConfig, roi_longitudinal_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIConfig, parking_start_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIConfig, parking_inwards_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, xy_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, phi_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, next_node_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, traj_forward_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, traj_back_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, traj_gear_switch_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, traj_steer_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, traj_steer_change_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, grid_a_star_xy_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, node_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarmStartConfig, s_curve_config_),
  3,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, weight_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, qp_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, debug_osqp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableWarmStartConfig, osqp_config_),
  5,
  0,
  3,
  2,
  4,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_steer_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_a_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_steer_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_a_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_first_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_second_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, max_speed_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, max_speed_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, max_acceleration_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, max_acceleration_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, min_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, max_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, use_fix_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, enable_constraint_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, enable_hand_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, enable_derivative_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, enable_initial_final_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, distance_approach_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, enable_jacobian_ad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, enable_check_initial_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_end_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachConfig, weight_slack_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  24,
  25,
  26,
  27,
  28,
  29,
  14,
  0,
  15,
  16,
  17,
  21,
  18,
  22,
  23,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_print_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, mumps_mem_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, mumps_pivtol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_acceptable_constr_viol_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_min_hessian_perturbation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_jacobian_regularization_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_print_timing_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_alpha_for_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_recalc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, eps_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, eps_rel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, polish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OSQPConfig, osqp_debug_log_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, interpolated_delta_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, reanchoring_trails_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, reanchoring_pos_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, reanchoring_length_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, estimate_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, default_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, vehicle_shortest_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, fem_pos_deviation_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, collision_decrease_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, max_forward_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, max_reverse_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, max_forward_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, max_reverse_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, max_acc_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterativeAnchoringConfig, s_curve_config_),
  4,
  3,
  5,
  6,
  2,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, interpolated_pieces_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, initial_gear_check_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, heading_searching_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, gear_shift_period_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, gear_shift_max_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPartitionConfig, gear_shift_unit_t_),
  0,
  1,
  2,
  3,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(PlannerOpenSpaceConfig)},
  { 27, 36, sizeof(ROIConfig)},
  { 40, 57, sizeof(WarmStartConfig)},
  { 69, 81, sizeof(DualVariableWarmStartConfig)},
  { 88, 123, sizeof(DistanceApproachConfig)},
  { 153, 170, sizeof(IpoptConfig)},
  { 182, 193, sizeof(OSQPConfig)},
  { 199, 220, sizeof(IterativeAnchoringConfig)},
  { 236, 247, sizeof(TrajectoryPartitionConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlannerOpenSpaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROIConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WarmStartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DualVariableWarmStartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DistanceApproachConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IpoptConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OSQPConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IterativeAnchoringConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryPartitionConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planner_open_space_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _PlannerOpenSpaceConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ROIConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _WarmStartConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DualVariableWarmStartConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DistanceApproachConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _IpoptConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _OSQPConfig_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _IterativeAnchoringConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TrajectoryPartitionConfig_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::InitDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::InitDefaults();
  _PlannerOpenSpaceConfig_default_instance_.DefaultConstruct();
  _ROIConfig_default_instance_.DefaultConstruct();
  _WarmStartConfig_default_instance_.DefaultConstruct();
  _DualVariableWarmStartConfig_default_instance_.DefaultConstruct();
  _DistanceApproachConfig_default_instance_.DefaultConstruct();
  _IpoptConfig_default_instance_.DefaultConstruct();
  _OSQPConfig_default_instance_.DefaultConstruct();
  _IterativeAnchoringConfig_default_instance_.DefaultConstruct();
  _TrajectoryPartitionConfig_default_instance_.DefaultConstruct();
  _PlannerOpenSpaceConfig_default_instance_.get_mutable()->roi_config_ = const_cast< ::jmc_auto::planning::ROIConfig*>(
      ::jmc_auto::planning::ROIConfig::internal_default_instance());
  _PlannerOpenSpaceConfig_default_instance_.get_mutable()->warm_start_config_ = const_cast< ::jmc_auto::planning::WarmStartConfig*>(
      ::jmc_auto::planning::WarmStartConfig::internal_default_instance());
  _PlannerOpenSpaceConfig_default_instance_.get_mutable()->dual_variable_warm_start_config_ = const_cast< ::jmc_auto::planning::DualVariableWarmStartConfig*>(
      ::jmc_auto::planning::DualVariableWarmStartConfig::internal_default_instance());
  _PlannerOpenSpaceConfig_default_instance_.get_mutable()->distance_approach_config_ = const_cast< ::jmc_auto::planning::DistanceApproachConfig*>(
      ::jmc_auto::planning::DistanceApproachConfig::internal_default_instance());
  _PlannerOpenSpaceConfig_default_instance_.get_mutable()->iterative_anchoring_smoother_config_ = const_cast< ::jmc_auto::planning::IterativeAnchoringConfig*>(
      ::jmc_auto::planning::IterativeAnchoringConfig::internal_default_instance());
  _PlannerOpenSpaceConfig_default_instance_.get_mutable()->trajectory_partition_config_ = const_cast< ::jmc_auto::planning::TrajectoryPartitionConfig*>(
      ::jmc_auto::planning::TrajectoryPartitionConfig::internal_default_instance());
  _WarmStartConfig_default_instance_.get_mutable()->s_curve_config_ = const_cast< ::jmc_auto::planning::PiecewiseJerkSpeedConfig*>(
      ::jmc_auto::planning::PiecewiseJerkSpeedConfig::internal_default_instance());
  _DualVariableWarmStartConfig_default_instance_.get_mutable()->ipopt_config_ = const_cast< ::jmc_auto::planning::IpoptConfig*>(
      ::jmc_auto::planning::IpoptConfig::internal_default_instance());
  _DualVariableWarmStartConfig_default_instance_.get_mutable()->osqp_config_ = const_cast< ::jmc_auto::planning::OSQPConfig*>(
      ::jmc_auto::planning::OSQPConfig::internal_default_instance());
  _DistanceApproachConfig_default_instance_.get_mutable()->ipopt_config_ = const_cast< ::jmc_auto::planning::IpoptConfig*>(
      ::jmc_auto::planning::IpoptConfig::internal_default_instance());
  _IterativeAnchoringConfig_default_instance_.get_mutable()->fem_pos_deviation_smoother_config_ = const_cast< ::jmc_auto::planning::FemPosDeviationSmootherConfig*>(
      ::jmc_auto::planning::FemPosDeviationSmootherConfig::internal_default_instance());
  _IterativeAnchoringConfig_default_instance_.get_mutable()->s_curve_config_ = const_cast< ::jmc_auto::planning::PiecewiseJerkSpeedConfig*>(
      ::jmc_auto::planning::PiecewiseJerkSpeedConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n6modules/planning/proto/planner_open_sp"
      "ace_config.proto\022\021jmc_auto.planning\0328mod"
      "ules/planning/proto/piecewise_jerk_speed"
      "_config.proto\032>modules/planning/proto/fe"
      "m_pos_deviation_smoother_config.proto\"\256\005"
      "\n\026PlannerOpenSpaceConfig\0220\n\nroi_config\030\001"
      " \001(\0132\034.jmc_auto.planning.ROIConfig\022=\n\021wa"
      "rm_start_config\030\002 \001(\0132\".jmc_auto.plannin"
      "g.WarmStartConfig\022W\n\037dual_variable_warm_"
      "start_config\030\003 \001(\0132..jmc_auto.planning.D"
      "ualVariableWarmStartConfig\022K\n\030distance_a"
      "pproach_config\030\004 \001(\0132).jmc_auto.planning"
      ".DistanceApproachConfig\022X\n#iterative_anc"
      "horing_smoother_config\030\005 \001(\0132+.jmc_auto."
      "planning.IterativeAnchoringConfig\022Q\n\033tra"
      "jectory_partition_config\030\006 \001(\0132,.jmc_aut"
      "o.planning.TrajectoryPartitionConfig\022\022\n\007"
      "delta_t\030\007 \001(\002:\0011\022,\n\035is_near_destination_"
      "threshold\030\010 \001(\001:\0050.001\022/\n enable_check_p"
      "arallel_trajectory\030\t \001(\010:\005false\022*\n\033enabl"
      "e_linear_interpolation\030\n \001(\010:\005false\0221\n#i"
      "s_near_destination_theta_threshold\030\013 \001(\001"
      ":\0040.05\"\235\001\n\tROIConfig\022(\n\034roi_longitudinal"
      "_range_start\030\001 \001(\001:\00210\022&\n\032roi_longitudin"
      "al_range_end\030\002 \001(\001:\00210\022\036\n\023parking_start_"
      "range\030\003 \001(\001:\0017\022\036\n\017parking_inwards\030\004 \001(\010:"
      "\005false\"\274\003\n\017WarmStartConfig\022\037\n\022xy_grid_re"
      "solution\030\001 \001(\001:\0030.2\022!\n\023phi_grid_resoluti"
      "on\030\002 \001(\001:\0040.05\022\031\n\rnext_node_num\030\003 \001(\004:\0021"
      "0\022\026\n\tstep_size\030\004 \001(\001:\0030.5\022\037\n\024traj_forwar"
      "d_penalty\030\005 \001(\001:\0010\022\034\n\021traj_back_penalty\030"
      "\006 \001(\001:\0010\022$\n\030traj_gear_switch_penalty\030\007 \001"
      "(\001:\00210\022\037\n\022traj_steer_penalty\030\010 \001(\001:\003100\022"
      "%\n\031traj_steer_change_penalty\030\t \001(\001:\00210\022&"
      "\n\031grid_a_star_xy_resolution\030\017 \001(\001:\0030.1\022\030"
      "\n\013node_radius\030\020 \001(\001:\0030.5\022C\n\016s_curve_conf"
      "ig\030\021 \001(\0132+.jmc_auto.planning.PiecewiseJe"
      "rkSpeedConfig\"\236\002\n\033DualVariableWarmStartC"
      "onfig\022\023\n\010weight_d\030\001 \001(\001:\0011\0224\n\014ipopt_conf"
      "ig\030\002 \001(\0132\036.jmc_auto.planning.IpoptConfig"
      "\0224\n\tqp_format\030\003 \001(\0162!.jmc_auto.planning."
      "DualWarmUpMode\022\036\n\023min_safety_distance\030\004 "
      "\001(\001:\0010\022\031\n\ndebug_osqp\030\005 \001(\010:\005false\022\017\n\004bet"
      "a\030\006 \001(\001:\0011\0222\n\013osqp_config\030\007 \001(\0132\035.jmc_au"
      "to.planning.OSQPConfig\"\331\007\n\026DistanceAppro"
      "achConfig\022\024\n\014weight_steer\030\001 \001(\001\022\020\n\010weigh"
      "t_a\030\002 \001(\001\022\031\n\021weight_steer_rate\030\003 \001(\001\022\025\n\r"
      "weight_a_rate\030\004 \001(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n"
      "\010weight_y\030\006 \001(\001\022\022\n\nweight_phi\030\007 \001(\001\022\020\n\010w"
      "eight_v\030\010 \001(\001\022\036\n\026weight_steer_stitching\030"
      "\t \001(\001\022\032\n\022weight_a_stitching\030\n \001(\001\022\037\n\027wei"
      "ght_first_order_time\030\013 \001(\001\022 \n\030weight_sec"
      "ond_order_time\030\014 \001(\001\022\036\n\023min_safety_dista"
      "nce\030\r \001(\001:\0010\022\034\n\021max_speed_forward\030\016 \001(\001:"
      "\0013\022\034\n\021max_speed_reverse\030\017 \001(\001:\0012\022#\n\030max_"
      "acceleration_forward\030\020 \001(\001:\0012\022#\n\030max_acc"
      "eleration_reverse\030\021 \001(\001:\0012\022$\n\027min_time_s"
      "ample_scaling\030\022 \001(\001:\0030.1\022#\n\027max_time_sam"
      "ple_scaling\030\023 \001(\001:\00210\022\033\n\014use_fix_time\030\024 "
      "\001(\010:\005false\0224\n\014ipopt_config\030\025 \001(\0132\036.jmc_a"
      "uto.planning.IpoptConfig\022\037\n\027enable_const"
      "raint_check\030\026 \001(\010\022\036\n\026enable_hand_derivat"
      "ive\030\027 \001(\010\022\037\n\027enable_derivative_check\030\030 \001"
      "(\010\022)\n\032enable_initial_final_check\030\031 \001(\010:\005"
      "false\022G\n\026distance_approach_mode\030\032 \001(\0162\'."
      "jmc_auto.planning.DistanceApproachMode\022!"
      "\n\022enable_jacobian_ad\030\033 \001(\010:\005false\022)\n\032ena"
      "ble_check_initial_state\030\034 \001(\010:\005false\022\033\n\020"
      "weight_end_state\030\035 \001(\001:\0010\022\027\n\014weight_slac"
      "k\030\036 \001(\001:\0010\"\371\002\n\013IpoptConfig\022\031\n\021ipopt_prin"
      "t_level\030\001 \001(\005\022\031\n\021mumps_mem_percent\030\002 \001(\005"
      "\022\024\n\014mumps_pivtol\030\003 \001(\001\022\026\n\016ipopt_max_iter"
      "\030\004 \001(\005\022\021\n\tipopt_tol\030\005 \001(\001\022(\n ipopt_accep"
      "table_constr_viol_tol\030\006 \001(\001\022&\n\036ipopt_min"
      "_hessian_perturbation\030\007 \001(\001\022+\n#ipopt_jac"
      "obian_regularization_value\030\010 \001(\001\022%\n\035ipop"
      "t_print_timing_statistics\030\t \001(\t\022\031\n\021ipopt"
      "_alpha_for_y\030\n \001(\t\022\026\n\016ipopt_recalc_y\030\013 \001"
      "(\t\022\032\n\ripopt_mu_init\030\014 \001(\001:\0030.1\"\234\001\n\nOSQPC"
      "onfig\022\020\n\005alpha\030\001 \001(\001:\0011\022\026\n\007eps_abs\030\002 \001(\001"
      ":\0050.001\022\026\n\007eps_rel\030\003 \001(\001:\0050.001\022\027\n\010max_i"
      "ter\030\004 \001(\005:\00510000\022\024\n\006polish\030\005 \001(\010:\004true\022\035"
      "\n\016osqp_debug_log\030\006 \001(\010:\005false\"\364\004\n\030Iterat"
      "iveAnchoringConfig\022!\n\024interpolated_delta"
      "_s\030\001 \001(\001:\0030.1\022\"\n\026reanchoring_trails_num\030"
      "\002 \001(\005:\00250\022$\n\026reanchoring_pos_stddev\030\003 \001("
      "\001:\0040.25\022$\n\031reanchoring_length_stddev\030\004 \001"
      "(\001:\0011\022\035\n\016estimate_bound\030\005 \001(\010:\005false\022\030\n\r"
      "default_bound\030\006 \001(\001:\0012\022(\n\032vehicle_shorte"
      "st_dimension\030\007 \001(\001:\0041.04\022[\n!fem_pos_devi"
      "ation_smoother_config\030\010 \001(\01320.jmc_auto.p"
      "lanning.FemPosDeviationSmootherConfig\022%\n"
      "\030collision_decrease_ratio\030\t \001(\001:\0030.9\022\030\n\r"
      "max_forward_v\030\n \001(\001:\0012\022\030\n\rmax_reverse_v\030"
      "\013 \001(\001:\0012\022\032\n\017max_forward_acc\030\014 \001(\001:\0013\022\032\n\017"
      "max_reverse_acc\030\r \001(\001:\0012\022\027\n\014max_acc_jerk"
      "\030\016 \001(\001:\0014\022\024\n\007delta_t\030\017 \001(\001:\0030.2\022C\n\016s_cur"
      "ve_config\030\020 \001(\0132+.jmc_auto.planning.Piec"
      "ewiseJerkSpeedConfig\"\362\001\n\031TrajectoryParti"
      "tionConfig\022#\n\027interpolated_pieces_num\030\001 "
      "\001(\004:\00250\022%\n\032initial_gear_check_horizon\030\002 "
      "\001(\004:\0013\022$\n\027heading_searching_range\030\003 \001(\001:"
      "\0030.3\022%\n\032gear_shift_period_duration\030\004 \001(\001"
      ":\0012\022\033\n\020gear_shift_max_t\030\005 \001(\001:\0013\022\037\n\021gear"
      "_shift_unit_t\030\006 \001(\001:\0040.02*J\n\016DualWarmUpM"
      "ode\022\t\n\005IPOPT\020\000\022\013\n\007IPOPTQP\020\001\022\010\n\004OSQP\020\002\022\t\n"
      "\005DEBUG\020\003\022\013\n\007SLACKQP\020\004*\367\001\n\024DistanceApproa"
      "chMode\022\033\n\027DISTANCE_APPROACH_IPOPT\020\000\022 \n\034D"
      "ISTANCE_APPROACH_IPOPT_CUDA\020\001\022$\n DISTANC"
      "E_APPROACH_IPOPT_FIXED_TS\020\002\022&\n\"DISTANCE_"
      "APPROACH_IPOPT_FIXED_DUAL\020\003\022%\n!DISTANCE_"
      "APPROACH_IPOPT_RELAX_END\020\004\022+\n\'DISTANCE_A"
      "PPROACH_IPOPT_RELAX_END_SLACK\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planner_open_space_config.proto", &protobuf_RegisterTypes);
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::AddDescriptors();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* DualWarmUpMode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool DualWarmUpMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DistanceApproachMode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool DistanceApproachMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerOpenSpaceConfig::kRoiConfigFieldNumber;
const int PlannerOpenSpaceConfig::kWarmStartConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDualVariableWarmStartConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDistanceApproachConfigFieldNumber;
const int PlannerOpenSpaceConfig::kIterativeAnchoringSmootherConfigFieldNumber;
const int PlannerOpenSpaceConfig::kTrajectoryPartitionConfigFieldNumber;
const int PlannerOpenSpaceConfig::kDeltaTFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThresholdFieldNumber;
const int PlannerOpenSpaceConfig::kEnableCheckParallelTrajectoryFieldNumber;
const int PlannerOpenSpaceConfig::kEnableLinearInterpolationFieldNumber;
const int PlannerOpenSpaceConfig::kIsNearDestinationThetaThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerOpenSpaceConfig::PlannerOpenSpaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roi_config()) {
    roi_config_ = new ::jmc_auto::planning::ROIConfig(*from.roi_config_);
  } else {
    roi_config_ = NULL;
  }
  if (from.has_warm_start_config()) {
    warm_start_config_ = new ::jmc_auto::planning::WarmStartConfig(*from.warm_start_config_);
  } else {
    warm_start_config_ = NULL;
  }
  if (from.has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::jmc_auto::planning::DualVariableWarmStartConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = NULL;
  }
  if (from.has_distance_approach_config()) {
    distance_approach_config_ = new ::jmc_auto::planning::DistanceApproachConfig(*from.distance_approach_config_);
  } else {
    distance_approach_config_ = NULL;
  }
  if (from.has_iterative_anchoring_smoother_config()) {
    iterative_anchoring_smoother_config_ = new ::jmc_auto::planning::IterativeAnchoringConfig(*from.iterative_anchoring_smoother_config_);
  } else {
    iterative_anchoring_smoother_config_ = NULL;
  }
  if (from.has_trajectory_partition_config()) {
    trajectory_partition_config_ = new ::jmc_auto::planning::TrajectoryPartitionConfig(*from.trajectory_partition_config_);
  } else {
    trajectory_partition_config_ = NULL;
  }
  ::memcpy(&enable_check_parallel_trajectory_, &from.enable_check_parallel_trajectory_,
    reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&enable_check_parallel_trajectory_) + sizeof(is_near_destination_theta_threshold_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PlannerOpenSpaceConfig)
}

void PlannerOpenSpaceConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&roi_config_, 0, reinterpret_cast<char*>(&enable_linear_interpolation_) -
    reinterpret_cast<char*>(&roi_config_) + sizeof(enable_linear_interpolation_));
  delta_t_ = 1;
  is_near_destination_threshold_ = 0.001;
  is_near_destination_theta_threshold_ = 0.05;
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PlannerOpenSpaceConfig)
  SharedDtor();
}

void PlannerOpenSpaceConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete roi_config_;
  }
  if (this != internal_default_instance()) {
    delete warm_start_config_;
  }
  if (this != internal_default_instance()) {
    delete dual_variable_warm_start_config_;
  }
  if (this != internal_default_instance()) {
    delete distance_approach_config_;
  }
  if (this != internal_default_instance()) {
    delete iterative_anchoring_smoother_config_;
  }
  if (this != internal_default_instance()) {
    delete trajectory_partition_config_;
  }
}

void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerOpenSpaceConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlannerOpenSpaceConfig& PlannerOpenSpaceConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlannerOpenSpaceConfig* PlannerOpenSpaceConfig::New(::google::protobuf::Arena* arena) const {
  PlannerOpenSpaceConfig* n = new PlannerOpenSpaceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_roi_config()) {
      GOOGLE_DCHECK(roi_config_ != NULL);
      roi_config_->::jmc_auto::planning::ROIConfig::Clear();
    }
    if (has_warm_start_config()) {
      GOOGLE_DCHECK(warm_start_config_ != NULL);
      warm_start_config_->::jmc_auto::planning::WarmStartConfig::Clear();
    }
    if (has_dual_variable_warm_start_config()) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != NULL);
      dual_variable_warm_start_config_->::jmc_auto::planning::DualVariableWarmStartConfig::Clear();
    }
    if (has_distance_approach_config()) {
      GOOGLE_DCHECK(distance_approach_config_ != NULL);
      distance_approach_config_->::jmc_auto::planning::DistanceApproachConfig::Clear();
    }
    if (has_iterative_anchoring_smoother_config()) {
      GOOGLE_DCHECK(iterative_anchoring_smoother_config_ != NULL);
      iterative_anchoring_smoother_config_->::jmc_auto::planning::IterativeAnchoringConfig::Clear();
    }
    if (has_trajectory_partition_config()) {
      GOOGLE_DCHECK(trajectory_partition_config_ != NULL);
      trajectory_partition_config_->::jmc_auto::planning::TrajectoryPartitionConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&enable_check_parallel_trajectory_, 0, reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&enable_check_parallel_trajectory_) + sizeof(enable_linear_interpolation_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    delta_t_ = 1;
    is_near_destination_threshold_ = 0.001;
    is_near_destination_theta_threshold_ = 0.05;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlannerOpenSpaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ROIConfig roi_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.WarmStartConfig warm_start_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dual_variable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DistanceApproachConfig distance_approach_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distance_approach_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iterative_anchoring_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_partition_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_t = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_threshold = 8 [default = 0.001];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_is_near_destination_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_enable_check_parallel_trajectory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_check_parallel_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_enable_linear_interpolation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_linear_interpolation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_is_near_destination_theta_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_theta_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PlannerOpenSpaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PlannerOpenSpaceConfig)
  return false;
#undef DO_
}

void PlannerOpenSpaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ROIConfig roi_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->roi_config_, output);
  }

  // optional .jmc_auto.planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->warm_start_config_, output);
  }

  // optional .jmc_auto.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dual_variable_warm_start_config_, output);
  }

  // optional .jmc_auto.planning.DistanceApproachConfig distance_approach_config = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->distance_approach_config_, output);
  }

  // optional .jmc_auto.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->iterative_anchoring_smoother_config_, output);
  }

  // optional .jmc_auto.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->trajectory_partition_config_, output);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->delta_t(), output);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->is_near_destination_threshold(), output);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_check_parallel_trajectory(), output);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_linear_interpolation(), output);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->is_near_destination_theta_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PlannerOpenSpaceConfig)
}

::google::protobuf::uint8* PlannerOpenSpaceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ROIConfig roi_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->roi_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->warm_start_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dual_variable_warm_start_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DistanceApproachConfig distance_approach_config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->distance_approach_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->iterative_anchoring_smoother_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->trajectory_partition_config_, deterministic, target);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->delta_t(), target);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->is_near_destination_threshold(), target);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_check_parallel_trajectory(), target);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_linear_interpolation(), target);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->is_near_destination_theta_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning.ROIConfig roi_config = 1;
    if (has_roi_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_config_);
    }

    // optional .jmc_auto.planning.WarmStartConfig warm_start_config = 2;
    if (has_warm_start_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->warm_start_config_);
    }

    // optional .jmc_auto.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
    if (has_dual_variable_warm_start_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dual_variable_warm_start_config_);
    }

    // optional .jmc_auto.planning.DistanceApproachConfig distance_approach_config = 4;
    if (has_distance_approach_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->distance_approach_config_);
    }

    // optional .jmc_auto.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
    if (has_iterative_anchoring_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->iterative_anchoring_smoother_config_);
    }

    // optional .jmc_auto.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
    if (has_trajectory_partition_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_partition_config_);
    }

    // optional bool enable_check_parallel_trajectory = 9 [default = false];
    if (has_enable_check_parallel_trajectory()) {
      total_size += 1 + 1;
    }

    // optional bool enable_linear_interpolation = 10 [default = false];
    if (has_enable_linear_interpolation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float delta_t = 7 [default = 1];
    if (has_delta_t()) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 8 [default = 0.001];
    if (has_is_near_destination_threshold()) {
      total_size += 1 + 8;
    }

    // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
    if (has_is_near_destination_theta_threshold()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerOpenSpaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerOpenSpaceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerOpenSpaceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PlannerOpenSpaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PlannerOpenSpaceConfig)
    MergeFrom(*source);
  }
}

void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_roi_config()->::jmc_auto::planning::ROIConfig::MergeFrom(from.roi_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_warm_start_config()->::jmc_auto::planning::WarmStartConfig::MergeFrom(from.warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dual_variable_warm_start_config()->::jmc_auto::planning::DualVariableWarmStartConfig::MergeFrom(from.dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_distance_approach_config()->::jmc_auto::planning::DistanceApproachConfig::MergeFrom(from.distance_approach_config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_iterative_anchoring_smoother_config()->::jmc_auto::planning::IterativeAnchoringConfig::MergeFrom(from.iterative_anchoring_smoother_config());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_trajectory_partition_config()->::jmc_auto::planning::TrajectoryPartitionConfig::MergeFrom(from.trajectory_partition_config());
    }
    if (cached_has_bits & 0x00000040u) {
      enable_check_parallel_trajectory_ = from.enable_check_parallel_trajectory_;
    }
    if (cached_has_bits & 0x00000080u) {
      enable_linear_interpolation_ = from.enable_linear_interpolation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_near_destination_theta_threshold_ = from.is_near_destination_theta_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlannerOpenSpaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::Swap(PlannerOpenSpaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  std::swap(roi_config_, other->roi_config_);
  std::swap(warm_start_config_, other->warm_start_config_);
  std::swap(dual_variable_warm_start_config_, other->dual_variable_warm_start_config_);
  std::swap(distance_approach_config_, other->distance_approach_config_);
  std::swap(iterative_anchoring_smoother_config_, other->iterative_anchoring_smoother_config_);
  std::swap(trajectory_partition_config_, other->trajectory_partition_config_);
  std::swap(enable_check_parallel_trajectory_, other->enable_check_parallel_trajectory_);
  std::swap(enable_linear_interpolation_, other->enable_linear_interpolation_);
  std::swap(delta_t_, other->delta_t_);
  std::swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
  std::swap(is_near_destination_theta_threshold_, other->is_near_destination_theta_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlannerOpenSpaceConfig

// optional .jmc_auto.planning.ROIConfig roi_config = 1;
bool PlannerOpenSpaceConfig::has_roi_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlannerOpenSpaceConfig::set_has_roi_config() {
  _has_bits_[0] |= 0x00000001u;
}
void PlannerOpenSpaceConfig::clear_has_roi_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlannerOpenSpaceConfig::clear_roi_config() {
  if (roi_config_ != NULL) roi_config_->::jmc_auto::planning::ROIConfig::Clear();
  clear_has_roi_config();
}
const ::jmc_auto::planning::ROIConfig& PlannerOpenSpaceConfig::roi_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.roi_config)
  return roi_config_ != NULL ? *roi_config_
                         : *::jmc_auto::planning::ROIConfig::internal_default_instance();
}
::jmc_auto::planning::ROIConfig* PlannerOpenSpaceConfig::mutable_roi_config() {
  set_has_roi_config();
  if (roi_config_ == NULL) {
    roi_config_ = new ::jmc_auto::planning::ROIConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlannerOpenSpaceConfig.roi_config)
  return roi_config_;
}
::jmc_auto::planning::ROIConfig* PlannerOpenSpaceConfig::release_roi_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlannerOpenSpaceConfig.roi_config)
  clear_has_roi_config();
  ::jmc_auto::planning::ROIConfig* temp = roi_config_;
  roi_config_ = NULL;
  return temp;
}
void PlannerOpenSpaceConfig::set_allocated_roi_config(::jmc_auto::planning::ROIConfig* roi_config) {
  delete roi_config_;
  roi_config_ = roi_config;
  if (roi_config) {
    set_has_roi_config();
  } else {
    clear_has_roi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlannerOpenSpaceConfig.roi_config)
}

// optional .jmc_auto.planning.WarmStartConfig warm_start_config = 2;
bool PlannerOpenSpaceConfig::has_warm_start_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlannerOpenSpaceConfig::set_has_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
}
void PlannerOpenSpaceConfig::clear_has_warm_start_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlannerOpenSpaceConfig::clear_warm_start_config() {
  if (warm_start_config_ != NULL) warm_start_config_->::jmc_auto::planning::WarmStartConfig::Clear();
  clear_has_warm_start_config();
}
const ::jmc_auto::planning::WarmStartConfig& PlannerOpenSpaceConfig::warm_start_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.warm_start_config)
  return warm_start_config_ != NULL ? *warm_start_config_
                         : *::jmc_auto::planning::WarmStartConfig::internal_default_instance();
}
::jmc_auto::planning::WarmStartConfig* PlannerOpenSpaceConfig::mutable_warm_start_config() {
  set_has_warm_start_config();
  if (warm_start_config_ == NULL) {
    warm_start_config_ = new ::jmc_auto::planning::WarmStartConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlannerOpenSpaceConfig.warm_start_config)
  return warm_start_config_;
}
::jmc_auto::planning::WarmStartConfig* PlannerOpenSpaceConfig::release_warm_start_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlannerOpenSpaceConfig.warm_start_config)
  clear_has_warm_start_config();
  ::jmc_auto::planning::WarmStartConfig* temp = warm_start_config_;
  warm_start_config_ = NULL;
  return temp;
}
void PlannerOpenSpaceConfig::set_allocated_warm_start_config(::jmc_auto::planning::WarmStartConfig* warm_start_config) {
  delete warm_start_config_;
  warm_start_config_ = warm_start_config;
  if (warm_start_config) {
    set_has_warm_start_config();
  } else {
    clear_has_warm_start_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlannerOpenSpaceConfig.warm_start_config)
}

// optional .jmc_auto.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
bool PlannerOpenSpaceConfig::has_dual_variable_warm_start_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlannerOpenSpaceConfig::set_has_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000004u;
}
void PlannerOpenSpaceConfig::clear_has_dual_variable_warm_start_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlannerOpenSpaceConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != NULL) dual_variable_warm_start_config_->::jmc_auto::planning::DualVariableWarmStartConfig::Clear();
  clear_has_dual_variable_warm_start_config();
}
const ::jmc_auto::planning::DualVariableWarmStartConfig& PlannerOpenSpaceConfig::dual_variable_warm_start_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_ != NULL ? *dual_variable_warm_start_config_
                         : *::jmc_auto::planning::DualVariableWarmStartConfig::internal_default_instance();
}
::jmc_auto::planning::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::mutable_dual_variable_warm_start_config() {
  set_has_dual_variable_warm_start_config();
  if (dual_variable_warm_start_config_ == NULL) {
    dual_variable_warm_start_config_ = new ::jmc_auto::planning::DualVariableWarmStartConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_;
}
::jmc_auto::planning::DualVariableWarmStartConfig* PlannerOpenSpaceConfig::release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
  clear_has_dual_variable_warm_start_config();
  ::jmc_auto::planning::DualVariableWarmStartConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = NULL;
  return temp;
}
void PlannerOpenSpaceConfig::set_allocated_dual_variable_warm_start_config(::jmc_auto::planning::DualVariableWarmStartConfig* dual_variable_warm_start_config) {
  delete dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  if (dual_variable_warm_start_config) {
    set_has_dual_variable_warm_start_config();
  } else {
    clear_has_dual_variable_warm_start_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlannerOpenSpaceConfig.dual_variable_warm_start_config)
}

// optional .jmc_auto.planning.DistanceApproachConfig distance_approach_config = 4;
bool PlannerOpenSpaceConfig::has_distance_approach_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlannerOpenSpaceConfig::set_has_distance_approach_config() {
  _has_bits_[0] |= 0x00000008u;
}
void PlannerOpenSpaceConfig::clear_has_distance_approach_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlannerOpenSpaceConfig::clear_distance_approach_config() {
  if (distance_approach_config_ != NULL) distance_approach_config_->::jmc_auto::planning::DistanceApproachConfig::Clear();
  clear_has_distance_approach_config();
}
const ::jmc_auto::planning::DistanceApproachConfig& PlannerOpenSpaceConfig::distance_approach_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.distance_approach_config)
  return distance_approach_config_ != NULL ? *distance_approach_config_
                         : *::jmc_auto::planning::DistanceApproachConfig::internal_default_instance();
}
::jmc_auto::planning::DistanceApproachConfig* PlannerOpenSpaceConfig::mutable_distance_approach_config() {
  set_has_distance_approach_config();
  if (distance_approach_config_ == NULL) {
    distance_approach_config_ = new ::jmc_auto::planning::DistanceApproachConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlannerOpenSpaceConfig.distance_approach_config)
  return distance_approach_config_;
}
::jmc_auto::planning::DistanceApproachConfig* PlannerOpenSpaceConfig::release_distance_approach_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlannerOpenSpaceConfig.distance_approach_config)
  clear_has_distance_approach_config();
  ::jmc_auto::planning::DistanceApproachConfig* temp = distance_approach_config_;
  distance_approach_config_ = NULL;
  return temp;
}
void PlannerOpenSpaceConfig::set_allocated_distance_approach_config(::jmc_auto::planning::DistanceApproachConfig* distance_approach_config) {
  delete distance_approach_config_;
  distance_approach_config_ = distance_approach_config;
  if (distance_approach_config) {
    set_has_distance_approach_config();
  } else {
    clear_has_distance_approach_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlannerOpenSpaceConfig.distance_approach_config)
}

// optional .jmc_auto.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
bool PlannerOpenSpaceConfig::has_iterative_anchoring_smoother_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlannerOpenSpaceConfig::set_has_iterative_anchoring_smoother_config() {
  _has_bits_[0] |= 0x00000010u;
}
void PlannerOpenSpaceConfig::clear_has_iterative_anchoring_smoother_config() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlannerOpenSpaceConfig::clear_iterative_anchoring_smoother_config() {
  if (iterative_anchoring_smoother_config_ != NULL) iterative_anchoring_smoother_config_->::jmc_auto::planning::IterativeAnchoringConfig::Clear();
  clear_has_iterative_anchoring_smoother_config();
}
const ::jmc_auto::planning::IterativeAnchoringConfig& PlannerOpenSpaceConfig::iterative_anchoring_smoother_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return iterative_anchoring_smoother_config_ != NULL ? *iterative_anchoring_smoother_config_
                         : *::jmc_auto::planning::IterativeAnchoringConfig::internal_default_instance();
}
::jmc_auto::planning::IterativeAnchoringConfig* PlannerOpenSpaceConfig::mutable_iterative_anchoring_smoother_config() {
  set_has_iterative_anchoring_smoother_config();
  if (iterative_anchoring_smoother_config_ == NULL) {
    iterative_anchoring_smoother_config_ = new ::jmc_auto::planning::IterativeAnchoringConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  return iterative_anchoring_smoother_config_;
}
::jmc_auto::planning::IterativeAnchoringConfig* PlannerOpenSpaceConfig::release_iterative_anchoring_smoother_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
  clear_has_iterative_anchoring_smoother_config();
  ::jmc_auto::planning::IterativeAnchoringConfig* temp = iterative_anchoring_smoother_config_;
  iterative_anchoring_smoother_config_ = NULL;
  return temp;
}
void PlannerOpenSpaceConfig::set_allocated_iterative_anchoring_smoother_config(::jmc_auto::planning::IterativeAnchoringConfig* iterative_anchoring_smoother_config) {
  delete iterative_anchoring_smoother_config_;
  iterative_anchoring_smoother_config_ = iterative_anchoring_smoother_config;
  if (iterative_anchoring_smoother_config) {
    set_has_iterative_anchoring_smoother_config();
  } else {
    clear_has_iterative_anchoring_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlannerOpenSpaceConfig.iterative_anchoring_smoother_config)
}

// optional .jmc_auto.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
bool PlannerOpenSpaceConfig::has_trajectory_partition_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlannerOpenSpaceConfig::set_has_trajectory_partition_config() {
  _has_bits_[0] |= 0x00000020u;
}
void PlannerOpenSpaceConfig::clear_has_trajectory_partition_config() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlannerOpenSpaceConfig::clear_trajectory_partition_config() {
  if (trajectory_partition_config_ != NULL) trajectory_partition_config_->::jmc_auto::planning::TrajectoryPartitionConfig::Clear();
  clear_has_trajectory_partition_config();
}
const ::jmc_auto::planning::TrajectoryPartitionConfig& PlannerOpenSpaceConfig::trajectory_partition_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  return trajectory_partition_config_ != NULL ? *trajectory_partition_config_
                         : *::jmc_auto::planning::TrajectoryPartitionConfig::internal_default_instance();
}
::jmc_auto::planning::TrajectoryPartitionConfig* PlannerOpenSpaceConfig::mutable_trajectory_partition_config() {
  set_has_trajectory_partition_config();
  if (trajectory_partition_config_ == NULL) {
    trajectory_partition_config_ = new ::jmc_auto::planning::TrajectoryPartitionConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  return trajectory_partition_config_;
}
::jmc_auto::planning::TrajectoryPartitionConfig* PlannerOpenSpaceConfig::release_trajectory_partition_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
  clear_has_trajectory_partition_config();
  ::jmc_auto::planning::TrajectoryPartitionConfig* temp = trajectory_partition_config_;
  trajectory_partition_config_ = NULL;
  return temp;
}
void PlannerOpenSpaceConfig::set_allocated_trajectory_partition_config(::jmc_auto::planning::TrajectoryPartitionConfig* trajectory_partition_config) {
  delete trajectory_partition_config_;
  trajectory_partition_config_ = trajectory_partition_config;
  if (trajectory_partition_config) {
    set_has_trajectory_partition_config();
  } else {
    clear_has_trajectory_partition_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlannerOpenSpaceConfig.trajectory_partition_config)
}

// optional float delta_t = 7 [default = 1];
bool PlannerOpenSpaceConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlannerOpenSpaceConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00000100u;
}
void PlannerOpenSpaceConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlannerOpenSpaceConfig::clear_delta_t() {
  delta_t_ = 1;
  clear_has_delta_t();
}
float PlannerOpenSpaceConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.delta_t)
  return delta_t_;
}
void PlannerOpenSpaceConfig::set_delta_t(float value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlannerOpenSpaceConfig.delta_t)
}

// optional double is_near_destination_threshold = 8 [default = 0.001];
bool PlannerOpenSpaceConfig::has_is_near_destination_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlannerOpenSpaceConfig::set_has_is_near_destination_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
void PlannerOpenSpaceConfig::clear_has_is_near_destination_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlannerOpenSpaceConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  clear_has_is_near_destination_threshold();
}
double PlannerOpenSpaceConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
  return is_near_destination_threshold_;
}
void PlannerOpenSpaceConfig::set_is_near_destination_threshold(double value) {
  set_has_is_near_destination_threshold();
  is_near_destination_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
}

// optional bool enable_check_parallel_trajectory = 9 [default = false];
bool PlannerOpenSpaceConfig::has_enable_check_parallel_trajectory() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlannerOpenSpaceConfig::set_has_enable_check_parallel_trajectory() {
  _has_bits_[0] |= 0x00000040u;
}
void PlannerOpenSpaceConfig::clear_has_enable_check_parallel_trajectory() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlannerOpenSpaceConfig::clear_enable_check_parallel_trajectory() {
  enable_check_parallel_trajectory_ = false;
  clear_has_enable_check_parallel_trajectory();
}
bool PlannerOpenSpaceConfig::enable_check_parallel_trajectory() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
  return enable_check_parallel_trajectory_;
}
void PlannerOpenSpaceConfig::set_enable_check_parallel_trajectory(bool value) {
  set_has_enable_check_parallel_trajectory();
  enable_check_parallel_trajectory_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
}

// optional bool enable_linear_interpolation = 10 [default = false];
bool PlannerOpenSpaceConfig::has_enable_linear_interpolation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlannerOpenSpaceConfig::set_has_enable_linear_interpolation() {
  _has_bits_[0] |= 0x00000080u;
}
void PlannerOpenSpaceConfig::clear_has_enable_linear_interpolation() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlannerOpenSpaceConfig::clear_enable_linear_interpolation() {
  enable_linear_interpolation_ = false;
  clear_has_enable_linear_interpolation();
}
bool PlannerOpenSpaceConfig::enable_linear_interpolation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
  return enable_linear_interpolation_;
}
void PlannerOpenSpaceConfig::set_enable_linear_interpolation(bool value) {
  set_has_enable_linear_interpolation();
  enable_linear_interpolation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
}

// optional double is_near_destination_theta_threshold = 11 [default = 0.05];
bool PlannerOpenSpaceConfig::has_is_near_destination_theta_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PlannerOpenSpaceConfig::set_has_is_near_destination_theta_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
void PlannerOpenSpaceConfig::clear_has_is_near_destination_theta_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
void PlannerOpenSpaceConfig::clear_is_near_destination_theta_threshold() {
  is_near_destination_theta_threshold_ = 0.05;
  clear_has_is_near_destination_theta_threshold();
}
double PlannerOpenSpaceConfig::is_near_destination_theta_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
  return is_near_destination_theta_threshold_;
}
void PlannerOpenSpaceConfig::set_is_near_destination_theta_threshold(double value) {
  set_has_is_near_destination_theta_threshold();
  is_near_destination_theta_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROIConfig::kRoiLongitudinalRangeStartFieldNumber;
const int ROIConfig::kRoiLongitudinalRangeEndFieldNumber;
const int ROIConfig::kParkingStartRangeFieldNumber;
const int ROIConfig::kParkingInwardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROIConfig::ROIConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ROIConfig)
}
ROIConfig::ROIConfig(const ROIConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_inwards_, &from.parking_inwards_,
    reinterpret_cast<char*>(&parking_start_range_) -
    reinterpret_cast<char*>(&parking_inwards_) + sizeof(parking_start_range_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ROIConfig)
}

void ROIConfig::SharedCtor() {
  _cached_size_ = 0;
  parking_inwards_ = false;
  roi_longitudinal_range_start_ = 10;
  roi_longitudinal_range_end_ = 10;
  parking_start_range_ = 7;
}

ROIConfig::~ROIConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ROIConfig)
  SharedDtor();
}

void ROIConfig::SharedDtor() {
}

void ROIConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROIConfig& ROIConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROIConfig* ROIConfig::New(::google::protobuf::Arena* arena) const {
  ROIConfig* n = new ROIConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ROIConfig)
  if (_has_bits_[0 / 32] & 15u) {
    parking_inwards_ = false;
    roi_longitudinal_range_start_ = 10;
    roi_longitudinal_range_end_ = 10;
    parking_start_range_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ROIConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double roi_longitudinal_range_start = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_roi_longitudinal_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_longitudinal_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_longitudinal_range_end = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_roi_longitudinal_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_longitudinal_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double parking_start_range = 3 [default = 7];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_parking_start_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parking_start_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_inwards = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_parking_inwards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_inwards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ROIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ROIConfig)
  return false;
#undef DO_
}

void ROIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ROIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double roi_longitudinal_range_start = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->roi_longitudinal_range_start(), output);
  }

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->roi_longitudinal_range_end(), output);
  }

  // optional double parking_start_range = 3 [default = 7];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->parking_start_range(), output);
  }

  // optional bool parking_inwards = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->parking_inwards(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ROIConfig)
}

::google::protobuf::uint8* ROIConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ROIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double roi_longitudinal_range_start = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->roi_longitudinal_range_start(), target);
  }

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->roi_longitudinal_range_end(), target);
  }

  // optional double parking_start_range = 3 [default = 7];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->parking_start_range(), target);
  }

  // optional bool parking_inwards = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->parking_inwards(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ROIConfig)
  return target;
}

size_t ROIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ROIConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool parking_inwards = 4 [default = false];
    if (has_parking_inwards()) {
      total_size += 1 + 1;
    }

    // optional double roi_longitudinal_range_start = 1 [default = 10];
    if (has_roi_longitudinal_range_start()) {
      total_size += 1 + 8;
    }

    // optional double roi_longitudinal_range_end = 2 [default = 10];
    if (has_roi_longitudinal_range_end()) {
      total_size += 1 + 8;
    }

    // optional double parking_start_range = 3 [default = 7];
    if (has_parking_start_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROIConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ROIConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ROIConfig)
    MergeFrom(*source);
  }
}

void ROIConfig::MergeFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      parking_inwards_ = from.parking_inwards_;
    }
    if (cached_has_bits & 0x00000002u) {
      roi_longitudinal_range_start_ = from.roi_longitudinal_range_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      roi_longitudinal_range_end_ = from.roi_longitudinal_range_end_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_start_range_ = from.parking_start_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIConfig::CopyFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIConfig::IsInitialized() const {
  return true;
}

void ROIConfig::Swap(ROIConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROIConfig::InternalSwap(ROIConfig* other) {
  std::swap(parking_inwards_, other->parking_inwards_);
  std::swap(roi_longitudinal_range_start_, other->roi_longitudinal_range_start_);
  std::swap(roi_longitudinal_range_end_, other->roi_longitudinal_range_end_);
  std::swap(parking_start_range_, other->parking_start_range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROIConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROIConfig

// optional double roi_longitudinal_range_start = 1 [default = 10];
bool ROIConfig::has_roi_longitudinal_range_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ROIConfig::set_has_roi_longitudinal_range_start() {
  _has_bits_[0] |= 0x00000002u;
}
void ROIConfig::clear_has_roi_longitudinal_range_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void ROIConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 10;
  clear_has_roi_longitudinal_range_start();
}
double ROIConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ROIConfig.roi_longitudinal_range_start)
  return roi_longitudinal_range_start_;
}
void ROIConfig::set_roi_longitudinal_range_start(double value) {
  set_has_roi_longitudinal_range_start();
  roi_longitudinal_range_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ROIConfig.roi_longitudinal_range_start)
}

// optional double roi_longitudinal_range_end = 2 [default = 10];
bool ROIConfig::has_roi_longitudinal_range_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ROIConfig::set_has_roi_longitudinal_range_end() {
  _has_bits_[0] |= 0x00000004u;
}
void ROIConfig::clear_has_roi_longitudinal_range_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void ROIConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 10;
  clear_has_roi_longitudinal_range_end();
}
double ROIConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ROIConfig.roi_longitudinal_range_end)
  return roi_longitudinal_range_end_;
}
void ROIConfig::set_roi_longitudinal_range_end(double value) {
  set_has_roi_longitudinal_range_end();
  roi_longitudinal_range_end_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ROIConfig.roi_longitudinal_range_end)
}

// optional double parking_start_range = 3 [default = 7];
bool ROIConfig::has_parking_start_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ROIConfig::set_has_parking_start_range() {
  _has_bits_[0] |= 0x00000008u;
}
void ROIConfig::clear_has_parking_start_range() {
  _has_bits_[0] &= ~0x00000008u;
}
void ROIConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  clear_has_parking_start_range();
}
double ROIConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ROIConfig.parking_start_range)
  return parking_start_range_;
}
void ROIConfig::set_parking_start_range(double value) {
  set_has_parking_start_range();
  parking_start_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ROIConfig.parking_start_range)
}

// optional bool parking_inwards = 4 [default = false];
bool ROIConfig::has_parking_inwards() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ROIConfig::set_has_parking_inwards() {
  _has_bits_[0] |= 0x00000001u;
}
void ROIConfig::clear_has_parking_inwards() {
  _has_bits_[0] &= ~0x00000001u;
}
void ROIConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  clear_has_parking_inwards();
}
bool ROIConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ROIConfig.parking_inwards)
  return parking_inwards_;
}
void ROIConfig::set_parking_inwards(bool value) {
  set_has_parking_inwards();
  parking_inwards_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ROIConfig.parking_inwards)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WarmStartConfig::kXyGridResolutionFieldNumber;
const int WarmStartConfig::kPhiGridResolutionFieldNumber;
const int WarmStartConfig::kNextNodeNumFieldNumber;
const int WarmStartConfig::kStepSizeFieldNumber;
const int WarmStartConfig::kTrajForwardPenaltyFieldNumber;
const int WarmStartConfig::kTrajBackPenaltyFieldNumber;
const int WarmStartConfig::kTrajGearSwitchPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerPenaltyFieldNumber;
const int WarmStartConfig::kTrajSteerChangePenaltyFieldNumber;
const int WarmStartConfig::kGridAStarXyResolutionFieldNumber;
const int WarmStartConfig::kNodeRadiusFieldNumber;
const int WarmStartConfig::kSCurveConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WarmStartConfig::WarmStartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::jmc_auto::planning::PiecewiseJerkSpeedConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = NULL;
  }
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.WarmStartConfig)
}

void WarmStartConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_curve_config_, 0, reinterpret_cast<char*>(&traj_back_penalty_) -
    reinterpret_cast<char*>(&s_curve_config_) + sizeof(traj_back_penalty_));
  xy_grid_resolution_ = 0.2;
  phi_grid_resolution_ = 0.05;
  next_node_num_ = GOOGLE_ULONGLONG(10);
  step_size_ = 0.5;
  traj_gear_switch_penalty_ = 10;
  traj_steer_penalty_ = 100;
  traj_steer_change_penalty_ = 10;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.WarmStartConfig)
  SharedDtor();
}

void WarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete s_curve_config_;
  }
}

void WarmStartConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarmStartConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WarmStartConfig& WarmStartConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

WarmStartConfig* WarmStartConfig::New(::google::protobuf::Arena* arena) const {
  WarmStartConfig* n = new WarmStartConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.WarmStartConfig)
  if (has_s_curve_config()) {
    GOOGLE_DCHECK(s_curve_config_ != NULL);
    s_curve_config_->::jmc_auto::planning::PiecewiseJerkSpeedConfig::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&traj_forward_penalty_, 0, reinterpret_cast<char*>(&traj_back_penalty_) -
      reinterpret_cast<char*>(&traj_forward_penalty_) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = GOOGLE_ULONGLONG(10);
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    traj_steer_penalty_ = 100;
    traj_steer_change_penalty_ = 10;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WarmStartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.WarmStartConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_xy_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_phi_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_next_node_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_node_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_forward_penalty = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_traj_forward_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_forward_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_back_penalty = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_traj_back_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_back_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_traj_gear_switch_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_gear_switch_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_penalty = 8 [default = 100];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_traj_steer_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_traj_steer_change_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_grid_a_star_xy_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grid_a_star_xy_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double node_radius = 16 [default = 0.5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_node_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &node_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.WarmStartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.WarmStartConfig)
  return false;
#undef DO_
}

void WarmStartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xy_grid_resolution(), output);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_grid_resolution(), output);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next_node_num(), output);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_size(), output);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->traj_forward_penalty(), output);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->traj_back_penalty(), output);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->traj_gear_switch_penalty(), output);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traj_steer_penalty(), output);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->traj_steer_change_penalty(), output);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->grid_a_star_xy_resolution(), output);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->node_radius(), output);
  }

  // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->s_curve_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.WarmStartConfig)
}

::google::protobuf::uint8* WarmStartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.WarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->node_radius(), target);
  }

  // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->s_curve_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.WarmStartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
    if (has_s_curve_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->s_curve_config_);
    }

    // optional double traj_forward_penalty = 5 [default = 0];
    if (has_traj_forward_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (has_traj_back_penalty()) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (has_xy_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (has_phi_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (has_next_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (has_step_size()) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (has_traj_gear_switch_penalty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double traj_steer_penalty = 8 [default = 100];
    if (has_traj_steer_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (has_traj_steer_change_penalty()) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (has_grid_a_star_xy_resolution()) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (has_node_radius()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarmStartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmStartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WarmStartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.WarmStartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.WarmStartConfig)
    MergeFrom(*source);
  }
}

void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s_curve_config()->::jmc_auto::planning::PiecewiseJerkSpeedConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000002u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000400u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WarmStartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::Swap(WarmStartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  std::swap(s_curve_config_, other->s_curve_config_);
  std::swap(traj_forward_penalty_, other->traj_forward_penalty_);
  std::swap(traj_back_penalty_, other->traj_back_penalty_);
  std::swap(xy_grid_resolution_, other->xy_grid_resolution_);
  std::swap(phi_grid_resolution_, other->phi_grid_resolution_);
  std::swap(next_node_num_, other->next_node_num_);
  std::swap(step_size_, other->step_size_);
  std::swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  std::swap(traj_steer_penalty_, other->traj_steer_penalty_);
  std::swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  std::swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  std::swap(node_radius_, other->node_radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WarmStartConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WarmStartConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
bool WarmStartConfig::has_xy_grid_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WarmStartConfig::set_has_xy_grid_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
void WarmStartConfig::clear_has_xy_grid_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
void WarmStartConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  clear_has_xy_grid_resolution();
}
double WarmStartConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.xy_grid_resolution)
  return xy_grid_resolution_;
}
void WarmStartConfig::set_xy_grid_resolution(double value) {
  set_has_xy_grid_resolution();
  xy_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
bool WarmStartConfig::has_phi_grid_resolution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WarmStartConfig::set_has_phi_grid_resolution() {
  _has_bits_[0] |= 0x00000010u;
}
void WarmStartConfig::clear_has_phi_grid_resolution() {
  _has_bits_[0] &= ~0x00000010u;
}
void WarmStartConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  clear_has_phi_grid_resolution();
}
double WarmStartConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.phi_grid_resolution)
  return phi_grid_resolution_;
}
void WarmStartConfig::set_phi_grid_resolution(double value) {
  set_has_phi_grid_resolution();
  phi_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
bool WarmStartConfig::has_next_node_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WarmStartConfig::set_has_next_node_num() {
  _has_bits_[0] |= 0x00000020u;
}
void WarmStartConfig::clear_has_next_node_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void WarmStartConfig::clear_next_node_num() {
  next_node_num_ = GOOGLE_ULONGLONG(10);
  clear_has_next_node_num();
}
::google::protobuf::uint64 WarmStartConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.next_node_num)
  return next_node_num_;
}
void WarmStartConfig::set_next_node_num(::google::protobuf::uint64 value) {
  set_has_next_node_num();
  next_node_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
bool WarmStartConfig::has_step_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WarmStartConfig::set_has_step_size() {
  _has_bits_[0] |= 0x00000040u;
}
void WarmStartConfig::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void WarmStartConfig::clear_step_size() {
  step_size_ = 0.5;
  clear_has_step_size();
}
double WarmStartConfig::step_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.step_size)
  return step_size_;
}
void WarmStartConfig::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
bool WarmStartConfig::has_traj_forward_penalty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WarmStartConfig::set_has_traj_forward_penalty() {
  _has_bits_[0] |= 0x00000002u;
}
void WarmStartConfig::clear_has_traj_forward_penalty() {
  _has_bits_[0] &= ~0x00000002u;
}
void WarmStartConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  clear_has_traj_forward_penalty();
}
double WarmStartConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.traj_forward_penalty)
  return traj_forward_penalty_;
}
void WarmStartConfig::set_traj_forward_penalty(double value) {
  set_has_traj_forward_penalty();
  traj_forward_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
bool WarmStartConfig::has_traj_back_penalty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WarmStartConfig::set_has_traj_back_penalty() {
  _has_bits_[0] |= 0x00000004u;
}
void WarmStartConfig::clear_has_traj_back_penalty() {
  _has_bits_[0] &= ~0x00000004u;
}
void WarmStartConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  clear_has_traj_back_penalty();
}
double WarmStartConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.traj_back_penalty)
  return traj_back_penalty_;
}
void WarmStartConfig::set_traj_back_penalty(double value) {
  set_has_traj_back_penalty();
  traj_back_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
bool WarmStartConfig::has_traj_gear_switch_penalty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WarmStartConfig::set_has_traj_gear_switch_penalty() {
  _has_bits_[0] |= 0x00000080u;
}
void WarmStartConfig::clear_has_traj_gear_switch_penalty() {
  _has_bits_[0] &= ~0x00000080u;
}
void WarmStartConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  clear_has_traj_gear_switch_penalty();
}
double WarmStartConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.traj_gear_switch_penalty)
  return traj_gear_switch_penalty_;
}
void WarmStartConfig::set_traj_gear_switch_penalty(double value) {
  set_has_traj_gear_switch_penalty();
  traj_gear_switch_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
bool WarmStartConfig::has_traj_steer_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WarmStartConfig::set_has_traj_steer_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
void WarmStartConfig::clear_has_traj_steer_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
void WarmStartConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  clear_has_traj_steer_penalty();
}
double WarmStartConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.traj_steer_penalty)
  return traj_steer_penalty_;
}
void WarmStartConfig::set_traj_steer_penalty(double value) {
  set_has_traj_steer_penalty();
  traj_steer_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
bool WarmStartConfig::has_traj_steer_change_penalty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WarmStartConfig::set_has_traj_steer_change_penalty() {
  _has_bits_[0] |= 0x00000200u;
}
void WarmStartConfig::clear_has_traj_steer_change_penalty() {
  _has_bits_[0] &= ~0x00000200u;
}
void WarmStartConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  clear_has_traj_steer_change_penalty();
}
double WarmStartConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.traj_steer_change_penalty)
  return traj_steer_change_penalty_;
}
void WarmStartConfig::set_traj_steer_change_penalty(double value) {
  set_has_traj_steer_change_penalty();
  traj_steer_change_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
bool WarmStartConfig::has_grid_a_star_xy_resolution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WarmStartConfig::set_has_grid_a_star_xy_resolution() {
  _has_bits_[0] |= 0x00000400u;
}
void WarmStartConfig::clear_has_grid_a_star_xy_resolution() {
  _has_bits_[0] &= ~0x00000400u;
}
void WarmStartConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  clear_has_grid_a_star_xy_resolution();
}
double WarmStartConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.grid_a_star_xy_resolution)
  return grid_a_star_xy_resolution_;
}
void WarmStartConfig::set_grid_a_star_xy_resolution(double value) {
  set_has_grid_a_star_xy_resolution();
  grid_a_star_xy_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
bool WarmStartConfig::has_node_radius() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WarmStartConfig::set_has_node_radius() {
  _has_bits_[0] |= 0x00000800u;
}
void WarmStartConfig::clear_has_node_radius() {
  _has_bits_[0] &= ~0x00000800u;
}
void WarmStartConfig::clear_node_radius() {
  node_radius_ = 0.5;
  clear_has_node_radius();
}
double WarmStartConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.node_radius)
  return node_radius_;
}
void WarmStartConfig::set_node_radius(double value) {
  set_has_node_radius();
  node_radius_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.WarmStartConfig.node_radius)
}

// optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
bool WarmStartConfig::has_s_curve_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WarmStartConfig::set_has_s_curve_config() {
  _has_bits_[0] |= 0x00000001u;
}
void WarmStartConfig::clear_has_s_curve_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void WarmStartConfig::clear_s_curve_config() {
  if (s_curve_config_ != NULL) s_curve_config_->::jmc_auto::planning::PiecewiseJerkSpeedConfig::Clear();
  clear_has_s_curve_config();
}
const ::jmc_auto::planning::PiecewiseJerkSpeedConfig& WarmStartConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.WarmStartConfig.s_curve_config)
  return s_curve_config_ != NULL ? *s_curve_config_
                         : *::jmc_auto::planning::PiecewiseJerkSpeedConfig::internal_default_instance();
}
::jmc_auto::planning::PiecewiseJerkSpeedConfig* WarmStartConfig::mutable_s_curve_config() {
  set_has_s_curve_config();
  if (s_curve_config_ == NULL) {
    s_curve_config_ = new ::jmc_auto::planning::PiecewiseJerkSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.WarmStartConfig.s_curve_config)
  return s_curve_config_;
}
::jmc_auto::planning::PiecewiseJerkSpeedConfig* WarmStartConfig::release_s_curve_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.WarmStartConfig.s_curve_config)
  clear_has_s_curve_config();
  ::jmc_auto::planning::PiecewiseJerkSpeedConfig* temp = s_curve_config_;
  s_curve_config_ = NULL;
  return temp;
}
void WarmStartConfig::set_allocated_s_curve_config(::jmc_auto::planning::PiecewiseJerkSpeedConfig* s_curve_config) {
  delete s_curve_config_;
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    set_has_s_curve_config();
  } else {
    clear_has_s_curve_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.WarmStartConfig.s_curve_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DualVariableWarmStartConfig::kWeightDFieldNumber;
const int DualVariableWarmStartConfig::kIpoptConfigFieldNumber;
const int DualVariableWarmStartConfig::kQpFormatFieldNumber;
const int DualVariableWarmStartConfig::kMinSafetyDistanceFieldNumber;
const int DualVariableWarmStartConfig::kDebugOsqpFieldNumber;
const int DualVariableWarmStartConfig::kBetaFieldNumber;
const int DualVariableWarmStartConfig::kOsqpConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DualVariableWarmStartConfig::DualVariableWarmStartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DualVariableWarmStartConfig)
}
DualVariableWarmStartConfig::DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  if (from.has_osqp_config()) {
    osqp_config_ = new ::jmc_auto::planning::OSQPConfig(*from.osqp_config_);
  } else {
    osqp_config_ = NULL;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&min_safety_distance_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DualVariableWarmStartConfig)
}

void DualVariableWarmStartConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipopt_config_, 0, reinterpret_cast<char*>(&debug_osqp_) -
    reinterpret_cast<char*>(&ipopt_config_) + sizeof(debug_osqp_));
  weight_d_ = 1;
  beta_ = 1;
}

DualVariableWarmStartConfig::~DualVariableWarmStartConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DualVariableWarmStartConfig)
  SharedDtor();
}

void DualVariableWarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ipopt_config_;
  }
  if (this != internal_default_instance()) {
    delete osqp_config_;
  }
}

void DualVariableWarmStartConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DualVariableWarmStartConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DualVariableWarmStartConfig& DualVariableWarmStartConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DualVariableWarmStartConfig* DualVariableWarmStartConfig::New(::google::protobuf::Arena* arena) const {
  DualVariableWarmStartConfig* n = new DualVariableWarmStartConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DualVariableWarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DualVariableWarmStartConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ipopt_config()) {
      GOOGLE_DCHECK(ipopt_config_ != NULL);
      ipopt_config_->::jmc_auto::planning::IpoptConfig::Clear();
    }
    if (has_osqp_config()) {
      GOOGLE_DCHECK(osqp_config_ != NULL);
      osqp_config_->::jmc_auto::planning::OSQPConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&min_safety_distance_, 0, reinterpret_cast<char*>(&debug_osqp_) -
      reinterpret_cast<char*>(&min_safety_distance_) + sizeof(debug_osqp_));
    weight_d_ = 1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DualVariableWarmStartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DualVariableWarmStartConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_d = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_weight_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.IpoptConfig ipopt_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DualWarmUpMode qp_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::DualWarmUpMode_IsValid(value)) {
            set_qp_format(static_cast< ::jmc_auto::planning::DualWarmUpMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_osqp = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_debug_osqp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_osqp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beta = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OSQPConfig osqp_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_osqp_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DualVariableWarmStartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DualVariableWarmStartConfig)
  return false;
#undef DO_
}

void DualVariableWarmStartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DualVariableWarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_d(), output);
  }

  // optional .jmc_auto.planning.IpoptConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ipopt_config_, output);
  }

  // optional .jmc_auto.planning.DualWarmUpMode qp_format = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qp_format(), output);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_safety_distance(), output);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->debug_osqp(), output);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->beta(), output);
  }

  // optional .jmc_auto.planning.OSQPConfig osqp_config = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->osqp_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DualVariableWarmStartConfig)
}

::google::protobuf::uint8* DualVariableWarmStartConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DualVariableWarmStartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_d(), target);
  }

  // optional .jmc_auto.planning.IpoptConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ipopt_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DualWarmUpMode qp_format = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->debug_osqp(), target);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->beta(), target);
  }

  // optional .jmc_auto.planning.OSQPConfig osqp_config = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->osqp_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DualVariableWarmStartConfig)
  return target;
}

size_t DualVariableWarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DualVariableWarmStartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .jmc_auto.planning.IpoptConfig ipopt_config = 2;
    if (has_ipopt_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipopt_config_);
    }

    // optional .jmc_auto.planning.OSQPConfig osqp_config = 7;
    if (has_osqp_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->osqp_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.planning.DualWarmUpMode qp_format = 3;
    if (has_qp_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (has_debug_osqp()) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (has_weight_d()) {
      total_size += 1 + 8;
    }

    // optional double beta = 6 [default = 1];
    if (has_beta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DualVariableWarmStartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DualVariableWarmStartConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DualVariableWarmStartConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DualVariableWarmStartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DualVariableWarmStartConfig)
    MergeFrom(*source);
  }
}

void DualVariableWarmStartConfig::MergeFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::jmc_auto::planning::IpoptConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_osqp_config()->::jmc_auto::planning::OSQPConfig::MergeFrom(from.osqp_config());
    }
    if (cached_has_bits & 0x00000004u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_d_ = from.weight_d_;
    }
    if (cached_has_bits & 0x00000040u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DualVariableWarmStartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualVariableWarmStartConfig::CopyFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableWarmStartConfig::IsInitialized() const {
  return true;
}

void DualVariableWarmStartConfig::Swap(DualVariableWarmStartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DualVariableWarmStartConfig::InternalSwap(DualVariableWarmStartConfig* other) {
  std::swap(ipopt_config_, other->ipopt_config_);
  std::swap(osqp_config_, other->osqp_config_);
  std::swap(min_safety_distance_, other->min_safety_distance_);
  std::swap(qp_format_, other->qp_format_);
  std::swap(debug_osqp_, other->debug_osqp_);
  std::swap(weight_d_, other->weight_d_);
  std::swap(beta_, other->beta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DualVariableWarmStartConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DualVariableWarmStartConfig

// optional double weight_d = 1 [default = 1];
bool DualVariableWarmStartConfig::has_weight_d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DualVariableWarmStartConfig::set_has_weight_d() {
  _has_bits_[0] |= 0x00000020u;
}
void DualVariableWarmStartConfig::clear_has_weight_d() {
  _has_bits_[0] &= ~0x00000020u;
}
void DualVariableWarmStartConfig::clear_weight_d() {
  weight_d_ = 1;
  clear_has_weight_d();
}
double DualVariableWarmStartConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.weight_d)
  return weight_d_;
}
void DualVariableWarmStartConfig::set_weight_d(double value) {
  set_has_weight_d();
  weight_d_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableWarmStartConfig.weight_d)
}

// optional .jmc_auto.planning.IpoptConfig ipopt_config = 2;
bool DualVariableWarmStartConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DualVariableWarmStartConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
void DualVariableWarmStartConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void DualVariableWarmStartConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::jmc_auto::planning::IpoptConfig::Clear();
  clear_has_ipopt_config();
}
const ::jmc_auto::planning::IpoptConfig& DualVariableWarmStartConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_
                         : *::jmc_auto::planning::IpoptConfig::internal_default_instance();
}
::jmc_auto::planning::IpoptConfig* DualVariableWarmStartConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DualVariableWarmStartConfig.ipopt_config)
  return ipopt_config_;
}
::jmc_auto::planning::IpoptConfig* DualVariableWarmStartConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DualVariableWarmStartConfig.ipopt_config)
  clear_has_ipopt_config();
  ::jmc_auto::planning::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
void DualVariableWarmStartConfig::set_allocated_ipopt_config(::jmc_auto::planning::IpoptConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DualVariableWarmStartConfig.ipopt_config)
}

// optional .jmc_auto.planning.DualWarmUpMode qp_format = 3;
bool DualVariableWarmStartConfig::has_qp_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DualVariableWarmStartConfig::set_has_qp_format() {
  _has_bits_[0] |= 0x00000008u;
}
void DualVariableWarmStartConfig::clear_has_qp_format() {
  _has_bits_[0] &= ~0x00000008u;
}
void DualVariableWarmStartConfig::clear_qp_format() {
  qp_format_ = 0;
  clear_has_qp_format();
}
::jmc_auto::planning::DualWarmUpMode DualVariableWarmStartConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.qp_format)
  return static_cast< ::jmc_auto::planning::DualWarmUpMode >(qp_format_);
}
void DualVariableWarmStartConfig::set_qp_format(::jmc_auto::planning::DualWarmUpMode value) {
  assert(::jmc_auto::planning::DualWarmUpMode_IsValid(value));
  set_has_qp_format();
  qp_format_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableWarmStartConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
bool DualVariableWarmStartConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DualVariableWarmStartConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void DualVariableWarmStartConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void DualVariableWarmStartConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
double DualVariableWarmStartConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.min_safety_distance)
  return min_safety_distance_;
}
void DualVariableWarmStartConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableWarmStartConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
bool DualVariableWarmStartConfig::has_debug_osqp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DualVariableWarmStartConfig::set_has_debug_osqp() {
  _has_bits_[0] |= 0x00000010u;
}
void DualVariableWarmStartConfig::clear_has_debug_osqp() {
  _has_bits_[0] &= ~0x00000010u;
}
void DualVariableWarmStartConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  clear_has_debug_osqp();
}
bool DualVariableWarmStartConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.debug_osqp)
  return debug_osqp_;
}
void DualVariableWarmStartConfig::set_debug_osqp(bool value) {
  set_has_debug_osqp();
  debug_osqp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableWarmStartConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
bool DualVariableWarmStartConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DualVariableWarmStartConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000040u;
}
void DualVariableWarmStartConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000040u;
}
void DualVariableWarmStartConfig::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
double DualVariableWarmStartConfig::beta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.beta)
  return beta_;
}
void DualVariableWarmStartConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableWarmStartConfig.beta)
}

// optional .jmc_auto.planning.OSQPConfig osqp_config = 7;
bool DualVariableWarmStartConfig::has_osqp_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DualVariableWarmStartConfig::set_has_osqp_config() {
  _has_bits_[0] |= 0x00000002u;
}
void DualVariableWarmStartConfig::clear_has_osqp_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void DualVariableWarmStartConfig::clear_osqp_config() {
  if (osqp_config_ != NULL) osqp_config_->::jmc_auto::planning::OSQPConfig::Clear();
  clear_has_osqp_config();
}
const ::jmc_auto::planning::OSQPConfig& DualVariableWarmStartConfig::osqp_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableWarmStartConfig.osqp_config)
  return osqp_config_ != NULL ? *osqp_config_
                         : *::jmc_auto::planning::OSQPConfig::internal_default_instance();
}
::jmc_auto::planning::OSQPConfig* DualVariableWarmStartConfig::mutable_osqp_config() {
  set_has_osqp_config();
  if (osqp_config_ == NULL) {
    osqp_config_ = new ::jmc_auto::planning::OSQPConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DualVariableWarmStartConfig.osqp_config)
  return osqp_config_;
}
::jmc_auto::planning::OSQPConfig* DualVariableWarmStartConfig::release_osqp_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DualVariableWarmStartConfig.osqp_config)
  clear_has_osqp_config();
  ::jmc_auto::planning::OSQPConfig* temp = osqp_config_;
  osqp_config_ = NULL;
  return temp;
}
void DualVariableWarmStartConfig::set_allocated_osqp_config(::jmc_auto::planning::OSQPConfig* osqp_config) {
  delete osqp_config_;
  osqp_config_ = osqp_config;
  if (osqp_config) {
    set_has_osqp_config();
  } else {
    clear_has_osqp_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DualVariableWarmStartConfig.osqp_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceApproachConfig::kWeightSteerFieldNumber;
const int DistanceApproachConfig::kWeightAFieldNumber;
const int DistanceApproachConfig::kWeightSteerRateFieldNumber;
const int DistanceApproachConfig::kWeightARateFieldNumber;
const int DistanceApproachConfig::kWeightXFieldNumber;
const int DistanceApproachConfig::kWeightYFieldNumber;
const int DistanceApproachConfig::kWeightPhiFieldNumber;
const int DistanceApproachConfig::kWeightVFieldNumber;
const int DistanceApproachConfig::kWeightSteerStitchingFieldNumber;
const int DistanceApproachConfig::kWeightAStitchingFieldNumber;
const int DistanceApproachConfig::kWeightFirstOrderTimeFieldNumber;
const int DistanceApproachConfig::kWeightSecondOrderTimeFieldNumber;
const int DistanceApproachConfig::kMinSafetyDistanceFieldNumber;
const int DistanceApproachConfig::kMaxSpeedForwardFieldNumber;
const int DistanceApproachConfig::kMaxSpeedReverseFieldNumber;
const int DistanceApproachConfig::kMaxAccelerationForwardFieldNumber;
const int DistanceApproachConfig::kMaxAccelerationReverseFieldNumber;
const int DistanceApproachConfig::kMinTimeSampleScalingFieldNumber;
const int DistanceApproachConfig::kMaxTimeSampleScalingFieldNumber;
const int DistanceApproachConfig::kUseFixTimeFieldNumber;
const int DistanceApproachConfig::kIpoptConfigFieldNumber;
const int DistanceApproachConfig::kEnableConstraintCheckFieldNumber;
const int DistanceApproachConfig::kEnableHandDerivativeFieldNumber;
const int DistanceApproachConfig::kEnableDerivativeCheckFieldNumber;
const int DistanceApproachConfig::kEnableInitialFinalCheckFieldNumber;
const int DistanceApproachConfig::kDistanceApproachModeFieldNumber;
const int DistanceApproachConfig::kEnableJacobianAdFieldNumber;
const int DistanceApproachConfig::kEnableCheckInitialStateFieldNumber;
const int DistanceApproachConfig::kWeightEndStateFieldNumber;
const int DistanceApproachConfig::kWeightSlackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceApproachConfig::DistanceApproachConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DistanceApproachConfig)
}
DistanceApproachConfig::DistanceApproachConfig(const DistanceApproachConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DistanceApproachConfig)
}

void DistanceApproachConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipopt_config_, 0, reinterpret_cast<char*>(&enable_check_initial_state_) -
    reinterpret_cast<char*>(&ipopt_config_) + sizeof(enable_check_initial_state_));
  max_speed_forward_ = 3;
  max_speed_reverse_ = 2;
  max_acceleration_forward_ = 2;
  max_acceleration_reverse_ = 2;
  min_time_sample_scaling_ = 0.1;
  max_time_sample_scaling_ = 10;
}

DistanceApproachConfig::~DistanceApproachConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DistanceApproachConfig)
  SharedDtor();
}

void DistanceApproachConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ipopt_config_;
  }
}

void DistanceApproachConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistanceApproachConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistanceApproachConfig& DistanceApproachConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistanceApproachConfig* DistanceApproachConfig::New(::google::protobuf::Arena* arena) const {
  DistanceApproachConfig* n = new DistanceApproachConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistanceApproachConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DistanceApproachConfig)
  if (has_ipopt_config()) {
    GOOGLE_DCHECK(ipopt_config_ != NULL);
    ipopt_config_->::jmc_auto::planning::IpoptConfig::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&weight_steer_, 0, reinterpret_cast<char*>(&weight_phi_) -
      reinterpret_cast<char*>(&weight_steer_) + sizeof(weight_phi_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&weight_v_, 0, reinterpret_cast<char*>(&enable_constraint_check_) -
      reinterpret_cast<char*>(&weight_v_) + sizeof(enable_constraint_check_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&enable_hand_derivative_, 0, reinterpret_cast<char*>(&enable_check_initial_state_) -
      reinterpret_cast<char*>(&enable_hand_derivative_) + sizeof(enable_check_initial_state_));
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    max_speed_forward_ = 3;
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
    max_time_sample_scaling_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistanceApproachConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DistanceApproachConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_steer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_weight_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_weight_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_weight_steer_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_weight_a_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_weight_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_weight_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_phi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_weight_phi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_v = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_weight_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_stitching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_weight_steer_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_stitching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_weight_a_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_first_order_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_weight_first_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_first_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_second_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_weight_second_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_second_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_forward = 14 [default = 3];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_max_speed_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_reverse = 15 [default = 2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_max_speed_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_forward = 16 [default = 2];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_max_acceleration_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_max_acceleration_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_min_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_max_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fix_time = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_use_fix_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.IpoptConfig ipopt_config = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_constraint_check = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_enable_constraint_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_constraint_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hand_derivative = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_enable_hand_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hand_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_derivative_check = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_enable_derivative_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_derivative_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_initial_final_check = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_enable_initial_final_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_initial_final_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DistanceApproachMode distance_approach_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::DistanceApproachMode_IsValid(value)) {
            set_distance_approach_mode(static_cast< ::jmc_auto::planning::DistanceApproachMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_jacobian_ad = 27 [default = false];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_enable_jacobian_ad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_jacobian_ad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_check_initial_state = 28 [default = false];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_enable_check_initial_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_check_initial_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_end_state = 29 [default = 0];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u)) {
          set_has_weight_end_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_end_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_slack = 30 [default = 0];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_weight_slack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_slack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DistanceApproachConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DistanceApproachConfig)
  return false;
#undef DO_
}

void DistanceApproachConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DistanceApproachConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_steer(), output);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_a(), output);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_steer_rate(), output);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight_a_rate(), output);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->weight_x(), output);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_y(), output);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->weight_phi(), output);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->weight_v(), output);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->weight_steer_stitching(), output);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->weight_a_stitching(), output);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->weight_first_order_time(), output);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->weight_second_order_time(), output);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->min_safety_distance(), output);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_speed_forward(), output);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->max_speed_reverse(), output);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->max_acceleration_forward(), output);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->max_acceleration_reverse(), output);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->min_time_sample_scaling(), output);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->max_time_sample_scaling(), output);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->use_fix_time(), output);
  }

  // optional .jmc_auto.planning.IpoptConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->ipopt_config_, output);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enable_constraint_check(), output);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enable_hand_derivative(), output);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->enable_derivative_check(), output);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->enable_initial_final_check(), output);
  }

  // optional .jmc_auto.planning.DistanceApproachMode distance_approach_mode = 26;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->distance_approach_mode(), output);
  }

  // optional bool enable_jacobian_ad = 27 [default = false];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->enable_jacobian_ad(), output);
  }

  // optional bool enable_check_initial_state = 28 [default = false];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->enable_check_initial_state(), output);
  }

  // optional double weight_end_state = 29 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->weight_end_state(), output);
  }

  // optional double weight_slack = 30 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->weight_slack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DistanceApproachConfig)
}

::google::protobuf::uint8* DistanceApproachConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DistanceApproachConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->use_fix_time(), target);
  }

  // optional .jmc_auto.planning.IpoptConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->ipopt_config_, deterministic, target);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->enable_initial_final_check(), target);
  }

  // optional .jmc_auto.planning.DistanceApproachMode distance_approach_mode = 26;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->distance_approach_mode(), target);
  }

  // optional bool enable_jacobian_ad = 27 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->enable_jacobian_ad(), target);
  }

  // optional bool enable_check_initial_state = 28 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->enable_check_initial_state(), target);
  }

  // optional double weight_end_state = 29 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->weight_end_state(), target);
  }

  // optional double weight_slack = 30 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->weight_slack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DistanceApproachConfig)
  return target;
}

size_t DistanceApproachConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DistanceApproachConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning.IpoptConfig ipopt_config = 21;
    if (has_ipopt_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (has_weight_steer()) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (has_weight_a()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (has_weight_steer_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (has_weight_a_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (has_weight_x()) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (has_weight_y()) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (has_weight_phi()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double weight_v = 8;
    if (has_weight_v()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (has_weight_steer_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (has_weight_a_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (has_weight_first_order_time()) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (has_weight_second_order_time()) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (has_use_fix_time()) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (has_enable_constraint_check()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool enable_hand_derivative = 23;
    if (has_enable_hand_derivative()) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (has_enable_derivative_check()) {
      total_size += 2 + 1;
    }

    // optional .jmc_auto.planning.DistanceApproachMode distance_approach_mode = 26;
    if (has_distance_approach_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->distance_approach_mode());
    }

    // optional double weight_end_state = 29 [default = 0];
    if (has_weight_end_state()) {
      total_size += 2 + 8;
    }

    // optional double weight_slack = 30 [default = 0];
    if (has_weight_slack()) {
      total_size += 2 + 8;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (has_enable_initial_final_check()) {
      total_size += 2 + 1;
    }

    // optional bool enable_jacobian_ad = 27 [default = false];
    if (has_enable_jacobian_ad()) {
      total_size += 2 + 1;
    }

    // optional bool enable_check_initial_state = 28 [default = false];
    if (has_enable_check_initial_state()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional double max_speed_forward = 14 [default = 3];
    if (has_max_speed_forward()) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (has_max_speed_reverse()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (has_max_acceleration_forward()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (has_max_acceleration_reverse()) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (has_min_time_sample_scaling()) {
      total_size += 2 + 8;
    }

    // optional double max_time_sample_scaling = 19 [default = 10];
    if (has_max_time_sample_scaling()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistanceApproachConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceApproachConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistanceApproachConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DistanceApproachConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DistanceApproachConfig)
    MergeFrom(*source);
  }
}

void DistanceApproachConfig::MergeFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::jmc_auto::planning::IpoptConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      distance_approach_mode_ = from.distance_approach_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      weight_end_state_ = from.weight_end_state_;
    }
    if (cached_has_bits & 0x00100000u) {
      weight_slack_ = from.weight_slack_;
    }
    if (cached_has_bits & 0x00200000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_jacobian_ad_ = from.enable_jacobian_ad_;
    }
    if (cached_has_bits & 0x00800000u) {
      enable_check_initial_state_ = from.enable_check_initial_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x10000000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_time_sample_scaling_ = from.max_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistanceApproachConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceApproachConfig::CopyFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachConfig::IsInitialized() const {
  return true;
}

void DistanceApproachConfig::Swap(DistanceApproachConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceApproachConfig::InternalSwap(DistanceApproachConfig* other) {
  std::swap(ipopt_config_, other->ipopt_config_);
  std::swap(weight_steer_, other->weight_steer_);
  std::swap(weight_a_, other->weight_a_);
  std::swap(weight_steer_rate_, other->weight_steer_rate_);
  std::swap(weight_a_rate_, other->weight_a_rate_);
  std::swap(weight_x_, other->weight_x_);
  std::swap(weight_y_, other->weight_y_);
  std::swap(weight_phi_, other->weight_phi_);
  std::swap(weight_v_, other->weight_v_);
  std::swap(weight_steer_stitching_, other->weight_steer_stitching_);
  std::swap(weight_a_stitching_, other->weight_a_stitching_);
  std::swap(weight_first_order_time_, other->weight_first_order_time_);
  std::swap(weight_second_order_time_, other->weight_second_order_time_);
  std::swap(min_safety_distance_, other->min_safety_distance_);
  std::swap(use_fix_time_, other->use_fix_time_);
  std::swap(enable_constraint_check_, other->enable_constraint_check_);
  std::swap(enable_hand_derivative_, other->enable_hand_derivative_);
  std::swap(enable_derivative_check_, other->enable_derivative_check_);
  std::swap(distance_approach_mode_, other->distance_approach_mode_);
  std::swap(weight_end_state_, other->weight_end_state_);
  std::swap(weight_slack_, other->weight_slack_);
  std::swap(enable_initial_final_check_, other->enable_initial_final_check_);
  std::swap(enable_jacobian_ad_, other->enable_jacobian_ad_);
  std::swap(enable_check_initial_state_, other->enable_check_initial_state_);
  std::swap(max_speed_forward_, other->max_speed_forward_);
  std::swap(max_speed_reverse_, other->max_speed_reverse_);
  std::swap(max_acceleration_forward_, other->max_acceleration_forward_);
  std::swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  std::swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  std::swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistanceApproachConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistanceApproachConfig

// optional double weight_steer = 1;
bool DistanceApproachConfig::has_weight_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistanceApproachConfig::set_has_weight_steer() {
  _has_bits_[0] |= 0x00000002u;
}
void DistanceApproachConfig::clear_has_weight_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistanceApproachConfig::clear_weight_steer() {
  weight_steer_ = 0;
  clear_has_weight_steer();
}
double DistanceApproachConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_steer)
  return weight_steer_;
}
void DistanceApproachConfig::set_weight_steer(double value) {
  set_has_weight_steer();
  weight_steer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_steer)
}

// optional double weight_a = 2;
bool DistanceApproachConfig::has_weight_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistanceApproachConfig::set_has_weight_a() {
  _has_bits_[0] |= 0x00000004u;
}
void DistanceApproachConfig::clear_has_weight_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistanceApproachConfig::clear_weight_a() {
  weight_a_ = 0;
  clear_has_weight_a();
}
double DistanceApproachConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_a)
  return weight_a_;
}
void DistanceApproachConfig::set_weight_a(double value) {
  set_has_weight_a();
  weight_a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_a)
}

// optional double weight_steer_rate = 3;
bool DistanceApproachConfig::has_weight_steer_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DistanceApproachConfig::set_has_weight_steer_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void DistanceApproachConfig::clear_has_weight_steer_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void DistanceApproachConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  clear_has_weight_steer_rate();
}
double DistanceApproachConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_steer_rate)
  return weight_steer_rate_;
}
void DistanceApproachConfig::set_weight_steer_rate(double value) {
  set_has_weight_steer_rate();
  weight_steer_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
bool DistanceApproachConfig::has_weight_a_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DistanceApproachConfig::set_has_weight_a_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void DistanceApproachConfig::clear_has_weight_a_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void DistanceApproachConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  clear_has_weight_a_rate();
}
double DistanceApproachConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_a_rate)
  return weight_a_rate_;
}
void DistanceApproachConfig::set_weight_a_rate(double value) {
  set_has_weight_a_rate();
  weight_a_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_a_rate)
}

// optional double weight_x = 5;
bool DistanceApproachConfig::has_weight_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DistanceApproachConfig::set_has_weight_x() {
  _has_bits_[0] |= 0x00000020u;
}
void DistanceApproachConfig::clear_has_weight_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void DistanceApproachConfig::clear_weight_x() {
  weight_x_ = 0;
  clear_has_weight_x();
}
double DistanceApproachConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_x)
  return weight_x_;
}
void DistanceApproachConfig::set_weight_x(double value) {
  set_has_weight_x();
  weight_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_x)
}

// optional double weight_y = 6;
bool DistanceApproachConfig::has_weight_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DistanceApproachConfig::set_has_weight_y() {
  _has_bits_[0] |= 0x00000040u;
}
void DistanceApproachConfig::clear_has_weight_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void DistanceApproachConfig::clear_weight_y() {
  weight_y_ = 0;
  clear_has_weight_y();
}
double DistanceApproachConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_y)
  return weight_y_;
}
void DistanceApproachConfig::set_weight_y(double value) {
  set_has_weight_y();
  weight_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_y)
}

// optional double weight_phi = 7;
bool DistanceApproachConfig::has_weight_phi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DistanceApproachConfig::set_has_weight_phi() {
  _has_bits_[0] |= 0x00000080u;
}
void DistanceApproachConfig::clear_has_weight_phi() {
  _has_bits_[0] &= ~0x00000080u;
}
void DistanceApproachConfig::clear_weight_phi() {
  weight_phi_ = 0;
  clear_has_weight_phi();
}
double DistanceApproachConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_phi)
  return weight_phi_;
}
void DistanceApproachConfig::set_weight_phi(double value) {
  set_has_weight_phi();
  weight_phi_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_phi)
}

// optional double weight_v = 8;
bool DistanceApproachConfig::has_weight_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DistanceApproachConfig::set_has_weight_v() {
  _has_bits_[0] |= 0x00000100u;
}
void DistanceApproachConfig::clear_has_weight_v() {
  _has_bits_[0] &= ~0x00000100u;
}
void DistanceApproachConfig::clear_weight_v() {
  weight_v_ = 0;
  clear_has_weight_v();
}
double DistanceApproachConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_v)
  return weight_v_;
}
void DistanceApproachConfig::set_weight_v(double value) {
  set_has_weight_v();
  weight_v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
bool DistanceApproachConfig::has_weight_steer_stitching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DistanceApproachConfig::set_has_weight_steer_stitching() {
  _has_bits_[0] |= 0x00000200u;
}
void DistanceApproachConfig::clear_has_weight_steer_stitching() {
  _has_bits_[0] &= ~0x00000200u;
}
void DistanceApproachConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  clear_has_weight_steer_stitching();
}
double DistanceApproachConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_steer_stitching)
  return weight_steer_stitching_;
}
void DistanceApproachConfig::set_weight_steer_stitching(double value) {
  set_has_weight_steer_stitching();
  weight_steer_stitching_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
bool DistanceApproachConfig::has_weight_a_stitching() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DistanceApproachConfig::set_has_weight_a_stitching() {
  _has_bits_[0] |= 0x00000400u;
}
void DistanceApproachConfig::clear_has_weight_a_stitching() {
  _has_bits_[0] &= ~0x00000400u;
}
void DistanceApproachConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  clear_has_weight_a_stitching();
}
double DistanceApproachConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_a_stitching)
  return weight_a_stitching_;
}
void DistanceApproachConfig::set_weight_a_stitching(double value) {
  set_has_weight_a_stitching();
  weight_a_stitching_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
bool DistanceApproachConfig::has_weight_first_order_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DistanceApproachConfig::set_has_weight_first_order_time() {
  _has_bits_[0] |= 0x00000800u;
}
void DistanceApproachConfig::clear_has_weight_first_order_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void DistanceApproachConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  clear_has_weight_first_order_time();
}
double DistanceApproachConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_first_order_time)
  return weight_first_order_time_;
}
void DistanceApproachConfig::set_weight_first_order_time(double value) {
  set_has_weight_first_order_time();
  weight_first_order_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
bool DistanceApproachConfig::has_weight_second_order_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DistanceApproachConfig::set_has_weight_second_order_time() {
  _has_bits_[0] |= 0x00001000u;
}
void DistanceApproachConfig::clear_has_weight_second_order_time() {
  _has_bits_[0] &= ~0x00001000u;
}
void DistanceApproachConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  clear_has_weight_second_order_time();
}
double DistanceApproachConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_second_order_time)
  return weight_second_order_time_;
}
void DistanceApproachConfig::set_weight_second_order_time(double value) {
  set_has_weight_second_order_time();
  weight_second_order_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
bool DistanceApproachConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DistanceApproachConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00002000u;
}
void DistanceApproachConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
void DistanceApproachConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
double DistanceApproachConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.min_safety_distance)
  return min_safety_distance_;
}
void DistanceApproachConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
bool DistanceApproachConfig::has_max_speed_forward() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DistanceApproachConfig::set_has_max_speed_forward() {
  _has_bits_[0] |= 0x01000000u;
}
void DistanceApproachConfig::clear_has_max_speed_forward() {
  _has_bits_[0] &= ~0x01000000u;
}
void DistanceApproachConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  clear_has_max_speed_forward();
}
double DistanceApproachConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.max_speed_forward)
  return max_speed_forward_;
}
void DistanceApproachConfig::set_max_speed_forward(double value) {
  set_has_max_speed_forward();
  max_speed_forward_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
bool DistanceApproachConfig::has_max_speed_reverse() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DistanceApproachConfig::set_has_max_speed_reverse() {
  _has_bits_[0] |= 0x02000000u;
}
void DistanceApproachConfig::clear_has_max_speed_reverse() {
  _has_bits_[0] &= ~0x02000000u;
}
void DistanceApproachConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  clear_has_max_speed_reverse();
}
double DistanceApproachConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.max_speed_reverse)
  return max_speed_reverse_;
}
void DistanceApproachConfig::set_max_speed_reverse(double value) {
  set_has_max_speed_reverse();
  max_speed_reverse_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
bool DistanceApproachConfig::has_max_acceleration_forward() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DistanceApproachConfig::set_has_max_acceleration_forward() {
  _has_bits_[0] |= 0x04000000u;
}
void DistanceApproachConfig::clear_has_max_acceleration_forward() {
  _has_bits_[0] &= ~0x04000000u;
}
void DistanceApproachConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  clear_has_max_acceleration_forward();
}
double DistanceApproachConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.max_acceleration_forward)
  return max_acceleration_forward_;
}
void DistanceApproachConfig::set_max_acceleration_forward(double value) {
  set_has_max_acceleration_forward();
  max_acceleration_forward_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
bool DistanceApproachConfig::has_max_acceleration_reverse() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void DistanceApproachConfig::set_has_max_acceleration_reverse() {
  _has_bits_[0] |= 0x08000000u;
}
void DistanceApproachConfig::clear_has_max_acceleration_reverse() {
  _has_bits_[0] &= ~0x08000000u;
}
void DistanceApproachConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  clear_has_max_acceleration_reverse();
}
double DistanceApproachConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.max_acceleration_reverse)
  return max_acceleration_reverse_;
}
void DistanceApproachConfig::set_max_acceleration_reverse(double value) {
  set_has_max_acceleration_reverse();
  max_acceleration_reverse_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
bool DistanceApproachConfig::has_min_time_sample_scaling() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void DistanceApproachConfig::set_has_min_time_sample_scaling() {
  _has_bits_[0] |= 0x10000000u;
}
void DistanceApproachConfig::clear_has_min_time_sample_scaling() {
  _has_bits_[0] &= ~0x10000000u;
}
void DistanceApproachConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  clear_has_min_time_sample_scaling();
}
double DistanceApproachConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.min_time_sample_scaling)
  return min_time_sample_scaling_;
}
void DistanceApproachConfig::set_min_time_sample_scaling(double value) {
  set_has_min_time_sample_scaling();
  min_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
bool DistanceApproachConfig::has_max_time_sample_scaling() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void DistanceApproachConfig::set_has_max_time_sample_scaling() {
  _has_bits_[0] |= 0x20000000u;
}
void DistanceApproachConfig::clear_has_max_time_sample_scaling() {
  _has_bits_[0] &= ~0x20000000u;
}
void DistanceApproachConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  clear_has_max_time_sample_scaling();
}
double DistanceApproachConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.max_time_sample_scaling)
  return max_time_sample_scaling_;
}
void DistanceApproachConfig::set_max_time_sample_scaling(double value) {
  set_has_max_time_sample_scaling();
  max_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
bool DistanceApproachConfig::has_use_fix_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DistanceApproachConfig::set_has_use_fix_time() {
  _has_bits_[0] |= 0x00004000u;
}
void DistanceApproachConfig::clear_has_use_fix_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void DistanceApproachConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  clear_has_use_fix_time();
}
bool DistanceApproachConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.use_fix_time)
  return use_fix_time_;
}
void DistanceApproachConfig::set_use_fix_time(bool value) {
  set_has_use_fix_time();
  use_fix_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.use_fix_time)
}

// optional .jmc_auto.planning.IpoptConfig ipopt_config = 21;
bool DistanceApproachConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistanceApproachConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
void DistanceApproachConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistanceApproachConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::jmc_auto::planning::IpoptConfig::Clear();
  clear_has_ipopt_config();
}
const ::jmc_auto::planning::IpoptConfig& DistanceApproachConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_
                         : *::jmc_auto::planning::IpoptConfig::internal_default_instance();
}
::jmc_auto::planning::IpoptConfig* DistanceApproachConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DistanceApproachConfig.ipopt_config)
  return ipopt_config_;
}
::jmc_auto::planning::IpoptConfig* DistanceApproachConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DistanceApproachConfig.ipopt_config)
  clear_has_ipopt_config();
  ::jmc_auto::planning::IpoptConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
void DistanceApproachConfig::set_allocated_ipopt_config(::jmc_auto::planning::IpoptConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DistanceApproachConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
bool DistanceApproachConfig::has_enable_constraint_check() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DistanceApproachConfig::set_has_enable_constraint_check() {
  _has_bits_[0] |= 0x00008000u;
}
void DistanceApproachConfig::clear_has_enable_constraint_check() {
  _has_bits_[0] &= ~0x00008000u;
}
void DistanceApproachConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  clear_has_enable_constraint_check();
}
bool DistanceApproachConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.enable_constraint_check)
  return enable_constraint_check_;
}
void DistanceApproachConfig::set_enable_constraint_check(bool value) {
  set_has_enable_constraint_check();
  enable_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
bool DistanceApproachConfig::has_enable_hand_derivative() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DistanceApproachConfig::set_has_enable_hand_derivative() {
  _has_bits_[0] |= 0x00010000u;
}
void DistanceApproachConfig::clear_has_enable_hand_derivative() {
  _has_bits_[0] &= ~0x00010000u;
}
void DistanceApproachConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  clear_has_enable_hand_derivative();
}
bool DistanceApproachConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.enable_hand_derivative)
  return enable_hand_derivative_;
}
void DistanceApproachConfig::set_enable_hand_derivative(bool value) {
  set_has_enable_hand_derivative();
  enable_hand_derivative_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
bool DistanceApproachConfig::has_enable_derivative_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DistanceApproachConfig::set_has_enable_derivative_check() {
  _has_bits_[0] |= 0x00020000u;
}
void DistanceApproachConfig::clear_has_enable_derivative_check() {
  _has_bits_[0] &= ~0x00020000u;
}
void DistanceApproachConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  clear_has_enable_derivative_check();
}
bool DistanceApproachConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.enable_derivative_check)
  return enable_derivative_check_;
}
void DistanceApproachConfig::set_enable_derivative_check(bool value) {
  set_has_enable_derivative_check();
  enable_derivative_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
bool DistanceApproachConfig::has_enable_initial_final_check() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DistanceApproachConfig::set_has_enable_initial_final_check() {
  _has_bits_[0] |= 0x00200000u;
}
void DistanceApproachConfig::clear_has_enable_initial_final_check() {
  _has_bits_[0] &= ~0x00200000u;
}
void DistanceApproachConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  clear_has_enable_initial_final_check();
}
bool DistanceApproachConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.enable_initial_final_check)
  return enable_initial_final_check_;
}
void DistanceApproachConfig::set_enable_initial_final_check(bool value) {
  set_has_enable_initial_final_check();
  enable_initial_final_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.enable_initial_final_check)
}

// optional .jmc_auto.planning.DistanceApproachMode distance_approach_mode = 26;
bool DistanceApproachConfig::has_distance_approach_mode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DistanceApproachConfig::set_has_distance_approach_mode() {
  _has_bits_[0] |= 0x00040000u;
}
void DistanceApproachConfig::clear_has_distance_approach_mode() {
  _has_bits_[0] &= ~0x00040000u;
}
void DistanceApproachConfig::clear_distance_approach_mode() {
  distance_approach_mode_ = 0;
  clear_has_distance_approach_mode();
}
::jmc_auto::planning::DistanceApproachMode DistanceApproachConfig::distance_approach_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.distance_approach_mode)
  return static_cast< ::jmc_auto::planning::DistanceApproachMode >(distance_approach_mode_);
}
void DistanceApproachConfig::set_distance_approach_mode(::jmc_auto::planning::DistanceApproachMode value) {
  assert(::jmc_auto::planning::DistanceApproachMode_IsValid(value));
  set_has_distance_approach_mode();
  distance_approach_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.distance_approach_mode)
}

// optional bool enable_jacobian_ad = 27 [default = false];
bool DistanceApproachConfig::has_enable_jacobian_ad() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DistanceApproachConfig::set_has_enable_jacobian_ad() {
  _has_bits_[0] |= 0x00400000u;
}
void DistanceApproachConfig::clear_has_enable_jacobian_ad() {
  _has_bits_[0] &= ~0x00400000u;
}
void DistanceApproachConfig::clear_enable_jacobian_ad() {
  enable_jacobian_ad_ = false;
  clear_has_enable_jacobian_ad();
}
bool DistanceApproachConfig::enable_jacobian_ad() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.enable_jacobian_ad)
  return enable_jacobian_ad_;
}
void DistanceApproachConfig::set_enable_jacobian_ad(bool value) {
  set_has_enable_jacobian_ad();
  enable_jacobian_ad_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.enable_jacobian_ad)
}

// optional bool enable_check_initial_state = 28 [default = false];
bool DistanceApproachConfig::has_enable_check_initial_state() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DistanceApproachConfig::set_has_enable_check_initial_state() {
  _has_bits_[0] |= 0x00800000u;
}
void DistanceApproachConfig::clear_has_enable_check_initial_state() {
  _has_bits_[0] &= ~0x00800000u;
}
void DistanceApproachConfig::clear_enable_check_initial_state() {
  enable_check_initial_state_ = false;
  clear_has_enable_check_initial_state();
}
bool DistanceApproachConfig::enable_check_initial_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.enable_check_initial_state)
  return enable_check_initial_state_;
}
void DistanceApproachConfig::set_enable_check_initial_state(bool value) {
  set_has_enable_check_initial_state();
  enable_check_initial_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.enable_check_initial_state)
}

// optional double weight_end_state = 29 [default = 0];
bool DistanceApproachConfig::has_weight_end_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DistanceApproachConfig::set_has_weight_end_state() {
  _has_bits_[0] |= 0x00080000u;
}
void DistanceApproachConfig::clear_has_weight_end_state() {
  _has_bits_[0] &= ~0x00080000u;
}
void DistanceApproachConfig::clear_weight_end_state() {
  weight_end_state_ = 0;
  clear_has_weight_end_state();
}
double DistanceApproachConfig::weight_end_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_end_state)
  return weight_end_state_;
}
void DistanceApproachConfig::set_weight_end_state(double value) {
  set_has_weight_end_state();
  weight_end_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_end_state)
}

// optional double weight_slack = 30 [default = 0];
bool DistanceApproachConfig::has_weight_slack() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DistanceApproachConfig::set_has_weight_slack() {
  _has_bits_[0] |= 0x00100000u;
}
void DistanceApproachConfig::clear_has_weight_slack() {
  _has_bits_[0] &= ~0x00100000u;
}
void DistanceApproachConfig::clear_weight_slack() {
  weight_slack_ = 0;
  clear_has_weight_slack();
}
double DistanceApproachConfig::weight_slack() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachConfig.weight_slack)
  return weight_slack_;
}
void DistanceApproachConfig::set_weight_slack(double value) {
  set_has_weight_slack();
  weight_slack_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachConfig.weight_slack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpoptConfig::kIpoptPrintLevelFieldNumber;
const int IpoptConfig::kMumpsMemPercentFieldNumber;
const int IpoptConfig::kMumpsPivtolFieldNumber;
const int IpoptConfig::kIpoptMaxIterFieldNumber;
const int IpoptConfig::kIpoptTolFieldNumber;
const int IpoptConfig::kIpoptAcceptableConstrViolTolFieldNumber;
const int IpoptConfig::kIpoptMinHessianPerturbationFieldNumber;
const int IpoptConfig::kIpoptJacobianRegularizationValueFieldNumber;
const int IpoptConfig::kIpoptPrintTimingStatisticsFieldNumber;
const int IpoptConfig::kIpoptAlphaForYFieldNumber;
const int IpoptConfig::kIpoptRecalcYFieldNumber;
const int IpoptConfig::kIpoptMuInitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpoptConfig::IpoptConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.IpoptConfig)
}
IpoptConfig::IpoptConfig(const IpoptConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_recalc_y()) {
    ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.IpoptConfig)
}

void IpoptConfig::SharedCtor() {
  _cached_size_ = 0;
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipopt_print_level_, 0, reinterpret_cast<char*>(&ipopt_max_iter_) -
    reinterpret_cast<char*>(&ipopt_print_level_) + sizeof(ipopt_max_iter_));
  ipopt_mu_init_ = 0.1;
}

IpoptConfig::~IpoptConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.IpoptConfig)
  SharedDtor();
}

void IpoptConfig::SharedDtor() {
  ipopt_print_timing_statistics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpoptConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpoptConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpoptConfig& IpoptConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

IpoptConfig* IpoptConfig::New(::google::protobuf::Arena* arena) const {
  IpoptConfig* n = new IpoptConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpoptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.IpoptConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ipopt_print_timing_statistics()) {
      GOOGLE_DCHECK(!ipopt_print_timing_statistics_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ipopt_print_timing_statistics_.UnsafeRawStringPointer())->clear();
    }
    if (has_ipopt_alpha_for_y()) {
      GOOGLE_DCHECK(!ipopt_alpha_for_y_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ipopt_alpha_for_y_.UnsafeRawStringPointer())->clear();
    }
    if (has_ipopt_recalc_y()) {
      GOOGLE_DCHECK(!ipopt_recalc_y_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ipopt_recalc_y_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&ipopt_print_level_, 0, reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
      reinterpret_cast<char*>(&ipopt_print_level_) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, reinterpret_cast<char*>(&ipopt_max_iter_) -
      reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IpoptConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.IpoptConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ipopt_print_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ipopt_print_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_print_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mumps_mem_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mumps_mem_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mumps_mem_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mumps_pivtol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_mumps_pivtol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mumps_pivtol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipopt_max_iter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ipopt_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_tol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ipopt_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_ipopt_acceptable_constr_viol_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_acceptable_constr_viol_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_min_hessian_perturbation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_ipopt_min_hessian_perturbation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_min_hessian_perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_jacobian_regularization_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_ipopt_jacobian_regularization_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_jacobian_regularization_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_print_timing_statistics = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_print_timing_statistics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_print_timing_statistics().data(), this->ipopt_print_timing_statistics().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_alpha_for_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_alpha_for_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_alpha_for_y().data(), this->ipopt_alpha_for_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_recalc_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_recalc_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_recalc_y().data(), this->ipopt_recalc_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.IpoptConfig.ipopt_recalc_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_ipopt_mu_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_mu_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.IpoptConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.IpoptConfig)
  return false;
#undef DO_
}

void IpoptConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.IpoptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipopt_print_level(), output);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mumps_mem_percent(), output);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mumps_pivtol(), output);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ipopt_max_iter(), output);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ipopt_tol(), output);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ipopt_acceptable_constr_viol_tol(), output);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ipopt_min_hessian_perturbation(), output);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ipopt_jacobian_regularization_value(), output);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), this->ipopt_print_timing_statistics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ipopt_print_timing_statistics(), output);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), this->ipopt_alpha_for_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ipopt_alpha_for_y(), output);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), this->ipopt_recalc_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptConfig.ipopt_recalc_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ipopt_recalc_y(), output);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ipopt_mu_init(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.IpoptConfig)
}

::google::protobuf::uint8* IpoptConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.IpoptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), this->ipopt_print_timing_statistics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), this->ipopt_alpha_for_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), this->ipopt_recalc_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptConfig.ipopt_recalc_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ipopt_mu_init(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.IpoptConfig)
  return target;
}

size_t IpoptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.IpoptConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ipopt_print_timing_statistics = 9;
    if (has_ipopt_print_timing_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (has_ipopt_alpha_for_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (has_ipopt_recalc_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (has_ipopt_print_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (has_mumps_mem_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (has_mumps_pivtol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (has_ipopt_tol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (has_ipopt_acceptable_constr_viol_tol()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (has_ipopt_min_hessian_perturbation()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (has_ipopt_jacobian_regularization_value()) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (has_ipopt_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (has_ipopt_mu_init()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpoptConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IpoptConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpoptConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.IpoptConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.IpoptConfig)
    MergeFrom(*source);
  }
}

void IpoptConfig::MergeFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ipopt_print_timing_statistics();
      ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ipopt_alpha_for_y();
      ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ipopt_recalc_y();
      ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpoptConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpoptConfig::CopyFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptConfig::IsInitialized() const {
  return true;
}

void IpoptConfig::Swap(IpoptConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpoptConfig::InternalSwap(IpoptConfig* other) {
  ipopt_print_timing_statistics_.Swap(&other->ipopt_print_timing_statistics_);
  ipopt_alpha_for_y_.Swap(&other->ipopt_alpha_for_y_);
  ipopt_recalc_y_.Swap(&other->ipopt_recalc_y_);
  std::swap(ipopt_print_level_, other->ipopt_print_level_);
  std::swap(mumps_mem_percent_, other->mumps_mem_percent_);
  std::swap(mumps_pivtol_, other->mumps_pivtol_);
  std::swap(ipopt_tol_, other->ipopt_tol_);
  std::swap(ipopt_acceptable_constr_viol_tol_, other->ipopt_acceptable_constr_viol_tol_);
  std::swap(ipopt_min_hessian_perturbation_, other->ipopt_min_hessian_perturbation_);
  std::swap(ipopt_jacobian_regularization_value_, other->ipopt_jacobian_regularization_value_);
  std::swap(ipopt_max_iter_, other->ipopt_max_iter_);
  std::swap(ipopt_mu_init_, other->ipopt_mu_init_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpoptConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IpoptConfig

// optional int32 ipopt_print_level = 1;
bool IpoptConfig::has_ipopt_print_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IpoptConfig::set_has_ipopt_print_level() {
  _has_bits_[0] |= 0x00000008u;
}
void IpoptConfig::clear_has_ipopt_print_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void IpoptConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  clear_has_ipopt_print_level();
}
::google::protobuf::int32 IpoptConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_print_level)
  return ipopt_print_level_;
}
void IpoptConfig::set_ipopt_print_level(::google::protobuf::int32 value) {
  set_has_ipopt_print_level();
  ipopt_print_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
bool IpoptConfig::has_mumps_mem_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IpoptConfig::set_has_mumps_mem_percent() {
  _has_bits_[0] |= 0x00000010u;
}
void IpoptConfig::clear_has_mumps_mem_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
void IpoptConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  clear_has_mumps_mem_percent();
}
::google::protobuf::int32 IpoptConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.mumps_mem_percent)
  return mumps_mem_percent_;
}
void IpoptConfig::set_mumps_mem_percent(::google::protobuf::int32 value) {
  set_has_mumps_mem_percent();
  mumps_mem_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
bool IpoptConfig::has_mumps_pivtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IpoptConfig::set_has_mumps_pivtol() {
  _has_bits_[0] |= 0x00000020u;
}
void IpoptConfig::clear_has_mumps_pivtol() {
  _has_bits_[0] &= ~0x00000020u;
}
void IpoptConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  clear_has_mumps_pivtol();
}
double IpoptConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.mumps_pivtol)
  return mumps_pivtol_;
}
void IpoptConfig::set_mumps_pivtol(double value) {
  set_has_mumps_pivtol();
  mumps_pivtol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
bool IpoptConfig::has_ipopt_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void IpoptConfig::set_has_ipopt_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
void IpoptConfig::clear_has_ipopt_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
void IpoptConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  clear_has_ipopt_max_iter();
}
::google::protobuf::int32 IpoptConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_max_iter)
  return ipopt_max_iter_;
}
void IpoptConfig::set_ipopt_max_iter(::google::protobuf::int32 value) {
  set_has_ipopt_max_iter();
  ipopt_max_iter_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
bool IpoptConfig::has_ipopt_tol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IpoptConfig::set_has_ipopt_tol() {
  _has_bits_[0] |= 0x00000040u;
}
void IpoptConfig::clear_has_ipopt_tol() {
  _has_bits_[0] &= ~0x00000040u;
}
void IpoptConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  clear_has_ipopt_tol();
}
double IpoptConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_tol)
  return ipopt_tol_;
}
void IpoptConfig::set_ipopt_tol(double value) {
  set_has_ipopt_tol();
  ipopt_tol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
bool IpoptConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IpoptConfig::set_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] |= 0x00000080u;
}
void IpoptConfig::clear_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] &= ~0x00000080u;
}
void IpoptConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  clear_has_ipopt_acceptable_constr_viol_tol();
}
double IpoptConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_acceptable_constr_viol_tol)
  return ipopt_acceptable_constr_viol_tol_;
}
void IpoptConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  set_has_ipopt_acceptable_constr_viol_tol();
  ipopt_acceptable_constr_viol_tol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
bool IpoptConfig::has_ipopt_min_hessian_perturbation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IpoptConfig::set_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] |= 0x00000100u;
}
void IpoptConfig::clear_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] &= ~0x00000100u;
}
void IpoptConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  clear_has_ipopt_min_hessian_perturbation();
}
double IpoptConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_min_hessian_perturbation)
  return ipopt_min_hessian_perturbation_;
}
void IpoptConfig::set_ipopt_min_hessian_perturbation(double value) {
  set_has_ipopt_min_hessian_perturbation();
  ipopt_min_hessian_perturbation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
bool IpoptConfig::has_ipopt_jacobian_regularization_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void IpoptConfig::set_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] |= 0x00000200u;
}
void IpoptConfig::clear_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] &= ~0x00000200u;
}
void IpoptConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  clear_has_ipopt_jacobian_regularization_value();
}
double IpoptConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_jacobian_regularization_value)
  return ipopt_jacobian_regularization_value_;
}
void IpoptConfig::set_ipopt_jacobian_regularization_value(double value) {
  set_has_ipopt_jacobian_regularization_value();
  ipopt_jacobian_regularization_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
bool IpoptConfig::has_ipopt_print_timing_statistics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IpoptConfig::set_has_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
}
void IpoptConfig::clear_has_ipopt_print_timing_statistics() {
  _has_bits_[0] &= ~0x00000001u;
}
void IpoptConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_print_timing_statistics();
}
const ::std::string& IpoptConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.GetNoArena();
}
void IpoptConfig::set_ipopt_print_timing_statistics(const ::std::string& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
}
#if LANG_CXX11
void IpoptConfig::set_ipopt_print_timing_statistics(::std::string&& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
}
#endif
void IpoptConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
}
void IpoptConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
}
::std::string* IpoptConfig::mutable_ipopt_print_timing_statistics() {
  set_has_ipopt_print_timing_statistics();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpoptConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
  clear_has_ipopt_print_timing_statistics();
  return ipopt_print_timing_statistics_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpoptConfig::set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != NULL) {
    set_has_ipopt_print_timing_statistics();
  } else {
    clear_has_ipopt_print_timing_statistics();
  }
  ipopt_print_timing_statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
bool IpoptConfig::has_ipopt_alpha_for_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IpoptConfig::set_has_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
}
void IpoptConfig::clear_has_ipopt_alpha_for_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void IpoptConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_alpha_for_y();
}
const ::std::string& IpoptConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.GetNoArena();
}
void IpoptConfig::set_ipopt_alpha_for_y(const ::std::string& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
}
#if LANG_CXX11
void IpoptConfig::set_ipopt_alpha_for_y(::std::string&& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
}
#endif
void IpoptConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
}
void IpoptConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
}
::std::string* IpoptConfig::mutable_ipopt_alpha_for_y() {
  set_has_ipopt_alpha_for_y();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpoptConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
  clear_has_ipopt_alpha_for_y();
  return ipopt_alpha_for_y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpoptConfig::set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != NULL) {
    set_has_ipopt_alpha_for_y();
  } else {
    clear_has_ipopt_alpha_for_y();
  }
  ipopt_alpha_for_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
bool IpoptConfig::has_ipopt_recalc_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IpoptConfig::set_has_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
}
void IpoptConfig::clear_has_ipopt_recalc_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void IpoptConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_recalc_y();
}
const ::std::string& IpoptConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.GetNoArena();
}
void IpoptConfig::set_ipopt_recalc_y(const ::std::string& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
}
#if LANG_CXX11
void IpoptConfig::set_ipopt_recalc_y(::std::string&& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
}
#endif
void IpoptConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
}
void IpoptConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
}
::std::string* IpoptConfig::mutable_ipopt_recalc_y() {
  set_has_ipopt_recalc_y();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpoptConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
  clear_has_ipopt_recalc_y();
  return ipopt_recalc_y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpoptConfig::set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != NULL) {
    set_has_ipopt_recalc_y();
  } else {
    clear_has_ipopt_recalc_y();
  }
  ipopt_recalc_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
bool IpoptConfig::has_ipopt_mu_init() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void IpoptConfig::set_has_ipopt_mu_init() {
  _has_bits_[0] |= 0x00000800u;
}
void IpoptConfig::clear_has_ipopt_mu_init() {
  _has_bits_[0] &= ~0x00000800u;
}
void IpoptConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  clear_has_ipopt_mu_init();
}
double IpoptConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptConfig.ipopt_mu_init)
  return ipopt_mu_init_;
}
void IpoptConfig::set_ipopt_mu_init(double value) {
  set_has_ipopt_mu_init();
  ipopt_mu_init_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptConfig.ipopt_mu_init)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OSQPConfig::kAlphaFieldNumber;
const int OSQPConfig::kEpsAbsFieldNumber;
const int OSQPConfig::kEpsRelFieldNumber;
const int OSQPConfig::kMaxIterFieldNumber;
const int OSQPConfig::kPolishFieldNumber;
const int OSQPConfig::kOsqpDebugLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OSQPConfig::OSQPConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.OSQPConfig)
}
OSQPConfig::OSQPConfig(const OSQPConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&osqp_debug_log_, &from.osqp_debug_log_,
    reinterpret_cast<char*>(&polish_) -
    reinterpret_cast<char*>(&osqp_debug_log_) + sizeof(polish_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.OSQPConfig)
}

void OSQPConfig::SharedCtor() {
  _cached_size_ = 0;
  osqp_debug_log_ = false;
  alpha_ = 1;
  eps_abs_ = 0.001;
  eps_rel_ = 0.001;
  max_iter_ = 10000;
  polish_ = true;
}

OSQPConfig::~OSQPConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.OSQPConfig)
  SharedDtor();
}

void OSQPConfig::SharedDtor() {
}

void OSQPConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OSQPConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OSQPConfig& OSQPConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

OSQPConfig* OSQPConfig::New(::google::protobuf::Arena* arena) const {
  OSQPConfig* n = new OSQPConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OSQPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.OSQPConfig)
  if (_has_bits_[0 / 32] & 63u) {
    osqp_debug_log_ = false;
    alpha_ = 1;
    eps_abs_ = 0.001;
    eps_rel_ = 0.001;
    max_iter_ = 10000;
    polish_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OSQPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.OSQPConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double alpha = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_abs = 2 [default = 0.001];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_eps_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_rel = 3 [default = 0.001];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_eps_rel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_rel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool polish = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_polish();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &polish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool osqp_debug_log = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_osqp_debug_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &osqp_debug_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.OSQPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.OSQPConfig)
  return false;
#undef DO_
}

void OSQPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.OSQPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->alpha(), output);
  }

  // optional double eps_abs = 2 [default = 0.001];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eps_abs(), output);
  }

  // optional double eps_rel = 3 [default = 0.001];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->eps_rel(), output);
  }

  // optional int32 max_iter = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_iter(), output);
  }

  // optional bool polish = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->polish(), output);
  }

  // optional bool osqp_debug_log = 6 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->osqp_debug_log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.OSQPConfig)
}

::google::protobuf::uint8* OSQPConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.OSQPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->alpha(), target);
  }

  // optional double eps_abs = 2 [default = 0.001];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eps_abs(), target);
  }

  // optional double eps_rel = 3 [default = 0.001];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->eps_rel(), target);
  }

  // optional int32 max_iter = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_iter(), target);
  }

  // optional bool polish = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->polish(), target);
  }

  // optional bool osqp_debug_log = 6 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->osqp_debug_log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.OSQPConfig)
  return target;
}

size_t OSQPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.OSQPConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool osqp_debug_log = 6 [default = false];
    if (has_osqp_debug_log()) {
      total_size += 1 + 1;
    }

    // optional double alpha = 1 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 8;
    }

    // optional double eps_abs = 2 [default = 0.001];
    if (has_eps_abs()) {
      total_size += 1 + 8;
    }

    // optional double eps_rel = 3 [default = 0.001];
    if (has_eps_rel()) {
      total_size += 1 + 8;
    }

    // optional int32 max_iter = 4 [default = 10000];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional bool polish = 5 [default = true];
    if (has_polish()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSQPConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.OSQPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OSQPConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OSQPConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.OSQPConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.OSQPConfig)
    MergeFrom(*source);
  }
}

void OSQPConfig::MergeFrom(const OSQPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.OSQPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      osqp_debug_log_ = from.osqp_debug_log_;
    }
    if (cached_has_bits & 0x00000002u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_abs_ = from.eps_abs_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_rel_ = from.eps_rel_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00000020u) {
      polish_ = from.polish_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OSQPConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.OSQPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OSQPConfig::CopyFrom(const OSQPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.OSQPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSQPConfig::IsInitialized() const {
  return true;
}

void OSQPConfig::Swap(OSQPConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OSQPConfig::InternalSwap(OSQPConfig* other) {
  std::swap(osqp_debug_log_, other->osqp_debug_log_);
  std::swap(alpha_, other->alpha_);
  std::swap(eps_abs_, other->eps_abs_);
  std::swap(eps_rel_, other->eps_rel_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(polish_, other->polish_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OSQPConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OSQPConfig

// optional double alpha = 1 [default = 1];
bool OSQPConfig::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OSQPConfig::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
void OSQPConfig::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
void OSQPConfig::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
double OSQPConfig::alpha() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OSQPConfig.alpha)
  return alpha_;
}
void OSQPConfig::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OSQPConfig.alpha)
}

// optional double eps_abs = 2 [default = 0.001];
bool OSQPConfig::has_eps_abs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OSQPConfig::set_has_eps_abs() {
  _has_bits_[0] |= 0x00000004u;
}
void OSQPConfig::clear_has_eps_abs() {
  _has_bits_[0] &= ~0x00000004u;
}
void OSQPConfig::clear_eps_abs() {
  eps_abs_ = 0.001;
  clear_has_eps_abs();
}
double OSQPConfig::eps_abs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OSQPConfig.eps_abs)
  return eps_abs_;
}
void OSQPConfig::set_eps_abs(double value) {
  set_has_eps_abs();
  eps_abs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OSQPConfig.eps_abs)
}

// optional double eps_rel = 3 [default = 0.001];
bool OSQPConfig::has_eps_rel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OSQPConfig::set_has_eps_rel() {
  _has_bits_[0] |= 0x00000008u;
}
void OSQPConfig::clear_has_eps_rel() {
  _has_bits_[0] &= ~0x00000008u;
}
void OSQPConfig::clear_eps_rel() {
  eps_rel_ = 0.001;
  clear_has_eps_rel();
}
double OSQPConfig::eps_rel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OSQPConfig.eps_rel)
  return eps_rel_;
}
void OSQPConfig::set_eps_rel(double value) {
  set_has_eps_rel();
  eps_rel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OSQPConfig.eps_rel)
}

// optional int32 max_iter = 4 [default = 10000];
bool OSQPConfig::has_max_iter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OSQPConfig::set_has_max_iter() {
  _has_bits_[0] |= 0x00000010u;
}
void OSQPConfig::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000010u;
}
void OSQPConfig::clear_max_iter() {
  max_iter_ = 10000;
  clear_has_max_iter();
}
::google::protobuf::int32 OSQPConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OSQPConfig.max_iter)
  return max_iter_;
}
void OSQPConfig::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OSQPConfig.max_iter)
}

// optional bool polish = 5 [default = true];
bool OSQPConfig::has_polish() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OSQPConfig::set_has_polish() {
  _has_bits_[0] |= 0x00000020u;
}
void OSQPConfig::clear_has_polish() {
  _has_bits_[0] &= ~0x00000020u;
}
void OSQPConfig::clear_polish() {
  polish_ = true;
  clear_has_polish();
}
bool OSQPConfig::polish() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OSQPConfig.polish)
  return polish_;
}
void OSQPConfig::set_polish(bool value) {
  set_has_polish();
  polish_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OSQPConfig.polish)
}

// optional bool osqp_debug_log = 6 [default = false];
bool OSQPConfig::has_osqp_debug_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OSQPConfig::set_has_osqp_debug_log() {
  _has_bits_[0] |= 0x00000001u;
}
void OSQPConfig::clear_has_osqp_debug_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void OSQPConfig::clear_osqp_debug_log() {
  osqp_debug_log_ = false;
  clear_has_osqp_debug_log();
}
bool OSQPConfig::osqp_debug_log() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OSQPConfig.osqp_debug_log)
  return osqp_debug_log_;
}
void OSQPConfig::set_osqp_debug_log(bool value) {
  set_has_osqp_debug_log();
  osqp_debug_log_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OSQPConfig.osqp_debug_log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IterativeAnchoringConfig::kInterpolatedDeltaSFieldNumber;
const int IterativeAnchoringConfig::kReanchoringTrailsNumFieldNumber;
const int IterativeAnchoringConfig::kReanchoringPosStddevFieldNumber;
const int IterativeAnchoringConfig::kReanchoringLengthStddevFieldNumber;
const int IterativeAnchoringConfig::kEstimateBoundFieldNumber;
const int IterativeAnchoringConfig::kDefaultBoundFieldNumber;
const int IterativeAnchoringConfig::kVehicleShortestDimensionFieldNumber;
const int IterativeAnchoringConfig::kFemPosDeviationSmootherConfigFieldNumber;
const int IterativeAnchoringConfig::kCollisionDecreaseRatioFieldNumber;
const int IterativeAnchoringConfig::kMaxForwardVFieldNumber;
const int IterativeAnchoringConfig::kMaxReverseVFieldNumber;
const int IterativeAnchoringConfig::kMaxForwardAccFieldNumber;
const int IterativeAnchoringConfig::kMaxReverseAccFieldNumber;
const int IterativeAnchoringConfig::kMaxAccJerkFieldNumber;
const int IterativeAnchoringConfig::kDeltaTFieldNumber;
const int IterativeAnchoringConfig::kSCurveConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IterativeAnchoringConfig::IterativeAnchoringConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.IterativeAnchoringConfig)
}
IterativeAnchoringConfig::IterativeAnchoringConfig(const IterativeAnchoringConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fem_pos_deviation_smoother_config()) {
    fem_pos_deviation_smoother_config_ = new ::jmc_auto::planning::FemPosDeviationSmootherConfig(*from.fem_pos_deviation_smoother_config_);
  } else {
    fem_pos_deviation_smoother_config_ = NULL;
  }
  if (from.has_s_curve_config()) {
    s_curve_config_ = new ::jmc_auto::planning::PiecewiseJerkSpeedConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = NULL;
  }
  ::memcpy(&estimate_bound_, &from.estimate_bound_,
    reinterpret_cast<char*>(&delta_t_) -
    reinterpret_cast<char*>(&estimate_bound_) + sizeof(delta_t_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.IterativeAnchoringConfig)
}

void IterativeAnchoringConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fem_pos_deviation_smoother_config_, 0, reinterpret_cast<char*>(&estimate_bound_) -
    reinterpret_cast<char*>(&fem_pos_deviation_smoother_config_) + sizeof(estimate_bound_));
  reanchoring_trails_num_ = 50;
  interpolated_delta_s_ = 0.1;
  reanchoring_pos_stddev_ = 0.25;
  reanchoring_length_stddev_ = 1;
  default_bound_ = 2;
  vehicle_shortest_dimension_ = 1.04;
  collision_decrease_ratio_ = 0.9;
  max_forward_v_ = 2;
  max_reverse_v_ = 2;
  max_forward_acc_ = 3;
  max_reverse_acc_ = 2;
  max_acc_jerk_ = 4;
  delta_t_ = 0.2;
}

IterativeAnchoringConfig::~IterativeAnchoringConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.IterativeAnchoringConfig)
  SharedDtor();
}

void IterativeAnchoringConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fem_pos_deviation_smoother_config_;
  }
  if (this != internal_default_instance()) {
    delete s_curve_config_;
  }
}

void IterativeAnchoringConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IterativeAnchoringConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IterativeAnchoringConfig& IterativeAnchoringConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

IterativeAnchoringConfig* IterativeAnchoringConfig::New(::google::protobuf::Arena* arena) const {
  IterativeAnchoringConfig* n = new IterativeAnchoringConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IterativeAnchoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.IterativeAnchoringConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fem_pos_deviation_smoother_config()) {
      GOOGLE_DCHECK(fem_pos_deviation_smoother_config_ != NULL);
      fem_pos_deviation_smoother_config_->::jmc_auto::planning::FemPosDeviationSmootherConfig::Clear();
    }
    if (has_s_curve_config()) {
      GOOGLE_DCHECK(s_curve_config_ != NULL);
      s_curve_config_->::jmc_auto::planning::PiecewiseJerkSpeedConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    estimate_bound_ = false;
    reanchoring_trails_num_ = 50;
    interpolated_delta_s_ = 0.1;
    reanchoring_pos_stddev_ = 0.25;
    reanchoring_length_stddev_ = 1;
    default_bound_ = 2;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    vehicle_shortest_dimension_ = 1.04;
    collision_decrease_ratio_ = 0.9;
    max_forward_v_ = 2;
    max_reverse_v_ = 2;
    max_forward_acc_ = 3;
    max_reverse_acc_ = 2;
    max_acc_jerk_ = 4;
    delta_t_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IterativeAnchoringConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.IterativeAnchoringConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double interpolated_delta_s = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_interpolated_delta_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interpolated_delta_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reanchoring_trails_num = 2 [default = 50];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_reanchoring_trails_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reanchoring_trails_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reanchoring_pos_stddev = 3 [default = 0.25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_reanchoring_pos_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reanchoring_pos_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reanchoring_length_stddev = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_reanchoring_length_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reanchoring_length_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool estimate_bound = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_estimate_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &estimate_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_bound = 6 [default = 2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_default_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_shortest_dimension = 7 [default = 1.04];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_vehicle_shortest_dimension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_shortest_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fem_pos_deviation_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double collision_decrease_ratio = 9 [default = 0.9];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_collision_decrease_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collision_decrease_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_v = 10 [default = 2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_max_forward_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_v = 11 [default = 2];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_max_reverse_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_forward_acc = 12 [default = 3];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_max_forward_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_reverse_acc = 13 [default = 2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_max_reverse_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_reverse_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acc_jerk = 14 [default = 4];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_max_acc_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acc_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double delta_t = 15 [default = 0.2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s_curve_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.IterativeAnchoringConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.IterativeAnchoringConfig)
  return false;
#undef DO_
}

void IterativeAnchoringConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->interpolated_delta_s(), output);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reanchoring_trails_num(), output);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reanchoring_pos_stddev(), output);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->reanchoring_length_stddev(), output);
  }

  // optional bool estimate_bound = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->estimate_bound(), output);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->default_bound(), output);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vehicle_shortest_dimension(), output);
  }

  // optional .jmc_auto.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fem_pos_deviation_smoother_config_, output);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->collision_decrease_ratio(), output);
  }

  // optional double max_forward_v = 10 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_forward_v(), output);
  }

  // optional double max_reverse_v = 11 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->max_reverse_v(), output);
  }

  // optional double max_forward_acc = 12 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_forward_acc(), output);
  }

  // optional double max_reverse_acc = 13 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->max_reverse_acc(), output);
  }

  // optional double max_acc_jerk = 14 [default = 4];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_acc_jerk(), output);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->delta_t(), output);
  }

  // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->s_curve_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.IterativeAnchoringConfig)
}

::google::protobuf::uint8* IterativeAnchoringConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.IterativeAnchoringConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->interpolated_delta_s(), target);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reanchoring_trails_num(), target);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reanchoring_pos_stddev(), target);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->reanchoring_length_stddev(), target);
  }

  // optional bool estimate_bound = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->estimate_bound(), target);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->default_bound(), target);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vehicle_shortest_dimension(), target);
  }

  // optional .jmc_auto.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->fem_pos_deviation_smoother_config_, deterministic, target);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->collision_decrease_ratio(), target);
  }

  // optional double max_forward_v = 10 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_forward_v(), target);
  }

  // optional double max_reverse_v = 11 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->max_reverse_v(), target);
  }

  // optional double max_forward_acc = 12 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_forward_acc(), target);
  }

  // optional double max_reverse_acc = 13 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->max_reverse_acc(), target);
  }

  // optional double max_acc_jerk = 14 [default = 4];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_acc_jerk(), target);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->delta_t(), target);
  }

  // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->s_curve_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.IterativeAnchoringConfig)
  return target;
}

size_t IterativeAnchoringConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.IterativeAnchoringConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
    if (has_fem_pos_deviation_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fem_pos_deviation_smoother_config_);
    }

    // optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 16;
    if (has_s_curve_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->s_curve_config_);
    }

    // optional bool estimate_bound = 5 [default = false];
    if (has_estimate_bound()) {
      total_size += 1 + 1;
    }

    // optional int32 reanchoring_trails_num = 2 [default = 50];
    if (has_reanchoring_trails_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reanchoring_trails_num());
    }

    // optional double interpolated_delta_s = 1 [default = 0.1];
    if (has_interpolated_delta_s()) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_pos_stddev = 3 [default = 0.25];
    if (has_reanchoring_pos_stddev()) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_length_stddev = 4 [default = 1];
    if (has_reanchoring_length_stddev()) {
      total_size += 1 + 8;
    }

    // optional double default_bound = 6 [default = 2];
    if (has_default_bound()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double vehicle_shortest_dimension = 7 [default = 1.04];
    if (has_vehicle_shortest_dimension()) {
      total_size += 1 + 8;
    }

    // optional double collision_decrease_ratio = 9 [default = 0.9];
    if (has_collision_decrease_ratio()) {
      total_size += 1 + 8;
    }

    // optional double max_forward_v = 10 [default = 2];
    if (has_max_forward_v()) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_v = 11 [default = 2];
    if (has_max_reverse_v()) {
      total_size += 1 + 8;
    }

    // optional double max_forward_acc = 12 [default = 3];
    if (has_max_forward_acc()) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_acc = 13 [default = 2];
    if (has_max_reverse_acc()) {
      total_size += 1 + 8;
    }

    // optional double max_acc_jerk = 14 [default = 4];
    if (has_max_acc_jerk()) {
      total_size += 1 + 8;
    }

    // optional double delta_t = 15 [default = 0.2];
    if (has_delta_t()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IterativeAnchoringConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IterativeAnchoringConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IterativeAnchoringConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.IterativeAnchoringConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.IterativeAnchoringConfig)
    MergeFrom(*source);
  }
}

void IterativeAnchoringConfig::MergeFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fem_pos_deviation_smoother_config()->::jmc_auto::planning::FemPosDeviationSmootherConfig::MergeFrom(from.fem_pos_deviation_smoother_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s_curve_config()->::jmc_auto::planning::PiecewiseJerkSpeedConfig::MergeFrom(from.s_curve_config());
    }
    if (cached_has_bits & 0x00000004u) {
      estimate_bound_ = from.estimate_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      reanchoring_trails_num_ = from.reanchoring_trails_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      interpolated_delta_s_ = from.interpolated_delta_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      reanchoring_pos_stddev_ = from.reanchoring_pos_stddev_;
    }
    if (cached_has_bits & 0x00000040u) {
      reanchoring_length_stddev_ = from.reanchoring_length_stddev_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_bound_ = from.default_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      vehicle_shortest_dimension_ = from.vehicle_shortest_dimension_;
    }
    if (cached_has_bits & 0x00000200u) {
      collision_decrease_ratio_ = from.collision_decrease_ratio_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_forward_v_ = from.max_forward_v_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_reverse_v_ = from.max_reverse_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_forward_acc_ = from.max_forward_acc_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_reverse_acc_ = from.max_reverse_acc_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_acc_jerk_ = from.max_acc_jerk_;
    }
    if (cached_has_bits & 0x00008000u) {
      delta_t_ = from.delta_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IterativeAnchoringConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterativeAnchoringConfig::CopyFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterativeAnchoringConfig::IsInitialized() const {
  return true;
}

void IterativeAnchoringConfig::Swap(IterativeAnchoringConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IterativeAnchoringConfig::InternalSwap(IterativeAnchoringConfig* other) {
  std::swap(fem_pos_deviation_smoother_config_, other->fem_pos_deviation_smoother_config_);
  std::swap(s_curve_config_, other->s_curve_config_);
  std::swap(estimate_bound_, other->estimate_bound_);
  std::swap(reanchoring_trails_num_, other->reanchoring_trails_num_);
  std::swap(interpolated_delta_s_, other->interpolated_delta_s_);
  std::swap(reanchoring_pos_stddev_, other->reanchoring_pos_stddev_);
  std::swap(reanchoring_length_stddev_, other->reanchoring_length_stddev_);
  std::swap(default_bound_, other->default_bound_);
  std::swap(vehicle_shortest_dimension_, other->vehicle_shortest_dimension_);
  std::swap(collision_decrease_ratio_, other->collision_decrease_ratio_);
  std::swap(max_forward_v_, other->max_forward_v_);
  std::swap(max_reverse_v_, other->max_reverse_v_);
  std::swap(max_forward_acc_, other->max_forward_acc_);
  std::swap(max_reverse_acc_, other->max_reverse_acc_);
  std::swap(max_acc_jerk_, other->max_acc_jerk_);
  std::swap(delta_t_, other->delta_t_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IterativeAnchoringConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IterativeAnchoringConfig

// optional double interpolated_delta_s = 1 [default = 0.1];
bool IterativeAnchoringConfig::has_interpolated_delta_s() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IterativeAnchoringConfig::set_has_interpolated_delta_s() {
  _has_bits_[0] |= 0x00000010u;
}
void IterativeAnchoringConfig::clear_has_interpolated_delta_s() {
  _has_bits_[0] &= ~0x00000010u;
}
void IterativeAnchoringConfig::clear_interpolated_delta_s() {
  interpolated_delta_s_ = 0.1;
  clear_has_interpolated_delta_s();
}
double IterativeAnchoringConfig::interpolated_delta_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.interpolated_delta_s)
  return interpolated_delta_s_;
}
void IterativeAnchoringConfig::set_interpolated_delta_s(double value) {
  set_has_interpolated_delta_s();
  interpolated_delta_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.interpolated_delta_s)
}

// optional int32 reanchoring_trails_num = 2 [default = 50];
bool IterativeAnchoringConfig::has_reanchoring_trails_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IterativeAnchoringConfig::set_has_reanchoring_trails_num() {
  _has_bits_[0] |= 0x00000008u;
}
void IterativeAnchoringConfig::clear_has_reanchoring_trails_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void IterativeAnchoringConfig::clear_reanchoring_trails_num() {
  reanchoring_trails_num_ = 50;
  clear_has_reanchoring_trails_num();
}
::google::protobuf::int32 IterativeAnchoringConfig::reanchoring_trails_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.reanchoring_trails_num)
  return reanchoring_trails_num_;
}
void IterativeAnchoringConfig::set_reanchoring_trails_num(::google::protobuf::int32 value) {
  set_has_reanchoring_trails_num();
  reanchoring_trails_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.reanchoring_trails_num)
}

// optional double reanchoring_pos_stddev = 3 [default = 0.25];
bool IterativeAnchoringConfig::has_reanchoring_pos_stddev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IterativeAnchoringConfig::set_has_reanchoring_pos_stddev() {
  _has_bits_[0] |= 0x00000020u;
}
void IterativeAnchoringConfig::clear_has_reanchoring_pos_stddev() {
  _has_bits_[0] &= ~0x00000020u;
}
void IterativeAnchoringConfig::clear_reanchoring_pos_stddev() {
  reanchoring_pos_stddev_ = 0.25;
  clear_has_reanchoring_pos_stddev();
}
double IterativeAnchoringConfig::reanchoring_pos_stddev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.reanchoring_pos_stddev)
  return reanchoring_pos_stddev_;
}
void IterativeAnchoringConfig::set_reanchoring_pos_stddev(double value) {
  set_has_reanchoring_pos_stddev();
  reanchoring_pos_stddev_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.reanchoring_pos_stddev)
}

// optional double reanchoring_length_stddev = 4 [default = 1];
bool IterativeAnchoringConfig::has_reanchoring_length_stddev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IterativeAnchoringConfig::set_has_reanchoring_length_stddev() {
  _has_bits_[0] |= 0x00000040u;
}
void IterativeAnchoringConfig::clear_has_reanchoring_length_stddev() {
  _has_bits_[0] &= ~0x00000040u;
}
void IterativeAnchoringConfig::clear_reanchoring_length_stddev() {
  reanchoring_length_stddev_ = 1;
  clear_has_reanchoring_length_stddev();
}
double IterativeAnchoringConfig::reanchoring_length_stddev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.reanchoring_length_stddev)
  return reanchoring_length_stddev_;
}
void IterativeAnchoringConfig::set_reanchoring_length_stddev(double value) {
  set_has_reanchoring_length_stddev();
  reanchoring_length_stddev_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.reanchoring_length_stddev)
}

// optional bool estimate_bound = 5 [default = false];
bool IterativeAnchoringConfig::has_estimate_bound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IterativeAnchoringConfig::set_has_estimate_bound() {
  _has_bits_[0] |= 0x00000004u;
}
void IterativeAnchoringConfig::clear_has_estimate_bound() {
  _has_bits_[0] &= ~0x00000004u;
}
void IterativeAnchoringConfig::clear_estimate_bound() {
  estimate_bound_ = false;
  clear_has_estimate_bound();
}
bool IterativeAnchoringConfig::estimate_bound() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.estimate_bound)
  return estimate_bound_;
}
void IterativeAnchoringConfig::set_estimate_bound(bool value) {
  set_has_estimate_bound();
  estimate_bound_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.estimate_bound)
}

// optional double default_bound = 6 [default = 2];
bool IterativeAnchoringConfig::has_default_bound() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IterativeAnchoringConfig::set_has_default_bound() {
  _has_bits_[0] |= 0x00000080u;
}
void IterativeAnchoringConfig::clear_has_default_bound() {
  _has_bits_[0] &= ~0x00000080u;
}
void IterativeAnchoringConfig::clear_default_bound() {
  default_bound_ = 2;
  clear_has_default_bound();
}
double IterativeAnchoringConfig::default_bound() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.default_bound)
  return default_bound_;
}
void IterativeAnchoringConfig::set_default_bound(double value) {
  set_has_default_bound();
  default_bound_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.default_bound)
}

// optional double vehicle_shortest_dimension = 7 [default = 1.04];
bool IterativeAnchoringConfig::has_vehicle_shortest_dimension() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IterativeAnchoringConfig::set_has_vehicle_shortest_dimension() {
  _has_bits_[0] |= 0x00000100u;
}
void IterativeAnchoringConfig::clear_has_vehicle_shortest_dimension() {
  _has_bits_[0] &= ~0x00000100u;
}
void IterativeAnchoringConfig::clear_vehicle_shortest_dimension() {
  vehicle_shortest_dimension_ = 1.04;
  clear_has_vehicle_shortest_dimension();
}
double IterativeAnchoringConfig::vehicle_shortest_dimension() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.vehicle_shortest_dimension)
  return vehicle_shortest_dimension_;
}
void IterativeAnchoringConfig::set_vehicle_shortest_dimension(double value) {
  set_has_vehicle_shortest_dimension();
  vehicle_shortest_dimension_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.vehicle_shortest_dimension)
}

// optional .jmc_auto.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
bool IterativeAnchoringConfig::has_fem_pos_deviation_smoother_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IterativeAnchoringConfig::set_has_fem_pos_deviation_smoother_config() {
  _has_bits_[0] |= 0x00000001u;
}
void IterativeAnchoringConfig::clear_has_fem_pos_deviation_smoother_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void IterativeAnchoringConfig::clear_fem_pos_deviation_smoother_config() {
  if (fem_pos_deviation_smoother_config_ != NULL) fem_pos_deviation_smoother_config_->::jmc_auto::planning::FemPosDeviationSmootherConfig::Clear();
  clear_has_fem_pos_deviation_smoother_config();
}
const ::jmc_auto::planning::FemPosDeviationSmootherConfig& IterativeAnchoringConfig::fem_pos_deviation_smoother_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return fem_pos_deviation_smoother_config_ != NULL ? *fem_pos_deviation_smoother_config_
                         : *::jmc_auto::planning::FemPosDeviationSmootherConfig::internal_default_instance();
}
::jmc_auto::planning::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::mutable_fem_pos_deviation_smoother_config() {
  set_has_fem_pos_deviation_smoother_config();
  if (fem_pos_deviation_smoother_config_ == NULL) {
    fem_pos_deviation_smoother_config_ = new ::jmc_auto::planning::FemPosDeviationSmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  return fem_pos_deviation_smoother_config_;
}
::jmc_auto::planning::FemPosDeviationSmootherConfig* IterativeAnchoringConfig::release_fem_pos_deviation_smoother_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
  clear_has_fem_pos_deviation_smoother_config();
  ::jmc_auto::planning::FemPosDeviationSmootherConfig* temp = fem_pos_deviation_smoother_config_;
  fem_pos_deviation_smoother_config_ = NULL;
  return temp;
}
void IterativeAnchoringConfig::set_allocated_fem_pos_deviation_smoother_config(::jmc_auto::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoother_config) {
  delete fem_pos_deviation_smoother_config_;
  fem_pos_deviation_smoother_config_ = fem_pos_deviation_smoother_config;
  if (fem_pos_deviation_smoother_config) {
    set_has_fem_pos_deviation_smoother_config();
  } else {
    clear_has_fem_pos_deviation_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IterativeAnchoringConfig.fem_pos_deviation_smoother_config)
}

// optional double collision_decrease_ratio = 9 [default = 0.9];
bool IterativeAnchoringConfig::has_collision_decrease_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void IterativeAnchoringConfig::set_has_collision_decrease_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
void IterativeAnchoringConfig::clear_has_collision_decrease_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
void IterativeAnchoringConfig::clear_collision_decrease_ratio() {
  collision_decrease_ratio_ = 0.9;
  clear_has_collision_decrease_ratio();
}
double IterativeAnchoringConfig::collision_decrease_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.collision_decrease_ratio)
  return collision_decrease_ratio_;
}
void IterativeAnchoringConfig::set_collision_decrease_ratio(double value) {
  set_has_collision_decrease_ratio();
  collision_decrease_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.collision_decrease_ratio)
}

// optional double max_forward_v = 10 [default = 2];
bool IterativeAnchoringConfig::has_max_forward_v() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void IterativeAnchoringConfig::set_has_max_forward_v() {
  _has_bits_[0] |= 0x00000400u;
}
void IterativeAnchoringConfig::clear_has_max_forward_v() {
  _has_bits_[0] &= ~0x00000400u;
}
void IterativeAnchoringConfig::clear_max_forward_v() {
  max_forward_v_ = 2;
  clear_has_max_forward_v();
}
double IterativeAnchoringConfig::max_forward_v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.max_forward_v)
  return max_forward_v_;
}
void IterativeAnchoringConfig::set_max_forward_v(double value) {
  set_has_max_forward_v();
  max_forward_v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.max_forward_v)
}

// optional double max_reverse_v = 11 [default = 2];
bool IterativeAnchoringConfig::has_max_reverse_v() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void IterativeAnchoringConfig::set_has_max_reverse_v() {
  _has_bits_[0] |= 0x00000800u;
}
void IterativeAnchoringConfig::clear_has_max_reverse_v() {
  _has_bits_[0] &= ~0x00000800u;
}
void IterativeAnchoringConfig::clear_max_reverse_v() {
  max_reverse_v_ = 2;
  clear_has_max_reverse_v();
}
double IterativeAnchoringConfig::max_reverse_v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.max_reverse_v)
  return max_reverse_v_;
}
void IterativeAnchoringConfig::set_max_reverse_v(double value) {
  set_has_max_reverse_v();
  max_reverse_v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.max_reverse_v)
}

// optional double max_forward_acc = 12 [default = 3];
bool IterativeAnchoringConfig::has_max_forward_acc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void IterativeAnchoringConfig::set_has_max_forward_acc() {
  _has_bits_[0] |= 0x00001000u;
}
void IterativeAnchoringConfig::clear_has_max_forward_acc() {
  _has_bits_[0] &= ~0x00001000u;
}
void IterativeAnchoringConfig::clear_max_forward_acc() {
  max_forward_acc_ = 3;
  clear_has_max_forward_acc();
}
double IterativeAnchoringConfig::max_forward_acc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.max_forward_acc)
  return max_forward_acc_;
}
void IterativeAnchoringConfig::set_max_forward_acc(double value) {
  set_has_max_forward_acc();
  max_forward_acc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.max_forward_acc)
}

// optional double max_reverse_acc = 13 [default = 2];
bool IterativeAnchoringConfig::has_max_reverse_acc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void IterativeAnchoringConfig::set_has_max_reverse_acc() {
  _has_bits_[0] |= 0x00002000u;
}
void IterativeAnchoringConfig::clear_has_max_reverse_acc() {
  _has_bits_[0] &= ~0x00002000u;
}
void IterativeAnchoringConfig::clear_max_reverse_acc() {
  max_reverse_acc_ = 2;
  clear_has_max_reverse_acc();
}
double IterativeAnchoringConfig::max_reverse_acc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.max_reverse_acc)
  return max_reverse_acc_;
}
void IterativeAnchoringConfig::set_max_reverse_acc(double value) {
  set_has_max_reverse_acc();
  max_reverse_acc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.max_reverse_acc)
}

// optional double max_acc_jerk = 14 [default = 4];
bool IterativeAnchoringConfig::has_max_acc_jerk() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void IterativeAnchoringConfig::set_has_max_acc_jerk() {
  _has_bits_[0] |= 0x00004000u;
}
void IterativeAnchoringConfig::clear_has_max_acc_jerk() {
  _has_bits_[0] &= ~0x00004000u;
}
void IterativeAnchoringConfig::clear_max_acc_jerk() {
  max_acc_jerk_ = 4;
  clear_has_max_acc_jerk();
}
double IterativeAnchoringConfig::max_acc_jerk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.max_acc_jerk)
  return max_acc_jerk_;
}
void IterativeAnchoringConfig::set_max_acc_jerk(double value) {
  set_has_max_acc_jerk();
  max_acc_jerk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.max_acc_jerk)
}

// optional double delta_t = 15 [default = 0.2];
bool IterativeAnchoringConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void IterativeAnchoringConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00008000u;
}
void IterativeAnchoringConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00008000u;
}
void IterativeAnchoringConfig::clear_delta_t() {
  delta_t_ = 0.2;
  clear_has_delta_t();
}
double IterativeAnchoringConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.delta_t)
  return delta_t_;
}
void IterativeAnchoringConfig::set_delta_t(double value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IterativeAnchoringConfig.delta_t)
}

// optional .jmc_auto.planning.PiecewiseJerkSpeedConfig s_curve_config = 16;
bool IterativeAnchoringConfig::has_s_curve_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IterativeAnchoringConfig::set_has_s_curve_config() {
  _has_bits_[0] |= 0x00000002u;
}
void IterativeAnchoringConfig::clear_has_s_curve_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void IterativeAnchoringConfig::clear_s_curve_config() {
  if (s_curve_config_ != NULL) s_curve_config_->::jmc_auto::planning::PiecewiseJerkSpeedConfig::Clear();
  clear_has_s_curve_config();
}
const ::jmc_auto::planning::PiecewiseJerkSpeedConfig& IterativeAnchoringConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IterativeAnchoringConfig.s_curve_config)
  return s_curve_config_ != NULL ? *s_curve_config_
                         : *::jmc_auto::planning::PiecewiseJerkSpeedConfig::internal_default_instance();
}
::jmc_auto::planning::PiecewiseJerkSpeedConfig* IterativeAnchoringConfig::mutable_s_curve_config() {
  set_has_s_curve_config();
  if (s_curve_config_ == NULL) {
    s_curve_config_ = new ::jmc_auto::planning::PiecewiseJerkSpeedConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IterativeAnchoringConfig.s_curve_config)
  return s_curve_config_;
}
::jmc_auto::planning::PiecewiseJerkSpeedConfig* IterativeAnchoringConfig::release_s_curve_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IterativeAnchoringConfig.s_curve_config)
  clear_has_s_curve_config();
  ::jmc_auto::planning::PiecewiseJerkSpeedConfig* temp = s_curve_config_;
  s_curve_config_ = NULL;
  return temp;
}
void IterativeAnchoringConfig::set_allocated_s_curve_config(::jmc_auto::planning::PiecewiseJerkSpeedConfig* s_curve_config) {
  delete s_curve_config_;
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    set_has_s_curve_config();
  } else {
    clear_has_s_curve_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IterativeAnchoringConfig.s_curve_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPartitionConfig::kInterpolatedPiecesNumFieldNumber;
const int TrajectoryPartitionConfig::kInitialGearCheckHorizonFieldNumber;
const int TrajectoryPartitionConfig::kHeadingSearchingRangeFieldNumber;
const int TrajectoryPartitionConfig::kGearShiftPeriodDurationFieldNumber;
const int TrajectoryPartitionConfig::kGearShiftMaxTFieldNumber;
const int TrajectoryPartitionConfig::kGearShiftUnitTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPartitionConfig::TrajectoryPartitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TrajectoryPartitionConfig)
}
TrajectoryPartitionConfig::TrajectoryPartitionConfig(const TrajectoryPartitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interpolated_pieces_num_, &from.interpolated_pieces_num_,
    reinterpret_cast<char*>(&gear_shift_unit_t_) -
    reinterpret_cast<char*>(&interpolated_pieces_num_) + sizeof(gear_shift_unit_t_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TrajectoryPartitionConfig)
}

void TrajectoryPartitionConfig::SharedCtor() {
  _cached_size_ = 0;
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
  heading_searching_range_ = 0.3;
  gear_shift_period_duration_ = 2;
  gear_shift_max_t_ = 3;
  gear_shift_unit_t_ = 0.02;
}

TrajectoryPartitionConfig::~TrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TrajectoryPartitionConfig)
  SharedDtor();
}

void TrajectoryPartitionConfig::SharedDtor() {
}

void TrajectoryPartitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPartitionConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPartitionConfig& TrajectoryPartitionConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryPartitionConfig* TrajectoryPartitionConfig::New(::google::protobuf::Arena* arena) const {
  TrajectoryPartitionConfig* n = new TrajectoryPartitionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TrajectoryPartitionConfig)
  if (_has_bits_[0 / 32] & 63u) {
    interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
    initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
    heading_searching_range_ = 0.3;
    gear_shift_period_duration_ = 2;
    gear_shift_max_t_ = 3;
    gear_shift_unit_t_ = 0.02;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPartitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TrajectoryPartitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 interpolated_pieces_num = 1 [default = 50];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_interpolated_pieces_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interpolated_pieces_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 initial_gear_check_horizon = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_initial_gear_check_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initial_gear_check_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_searching_range = 3 [default = 0.3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_heading_searching_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_searching_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_period_duration = 4 [default = 2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_gear_shift_period_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_period_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_max_t = 5 [default = 3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_gear_shift_max_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_max_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_unit_t = 6 [default = 0.02];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_gear_shift_unit_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_unit_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TrajectoryPartitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TrajectoryPartitionConfig)
  return false;
#undef DO_
}

void TrajectoryPartitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->interpolated_pieces_num(), output);
  }

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->initial_gear_check_horizon(), output);
  }

  // optional double heading_searching_range = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading_searching_range(), output);
  }

  // optional double gear_shift_period_duration = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gear_shift_period_duration(), output);
  }

  // optional double gear_shift_max_t = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gear_shift_max_t(), output);
  }

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gear_shift_unit_t(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TrajectoryPartitionConfig)
}

::google::protobuf::uint8* TrajectoryPartitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->initial_gear_check_horizon(), target);
  }

  // optional double heading_searching_range = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading_searching_range(), target);
  }

  // optional double gear_shift_period_duration = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gear_shift_period_duration(), target);
  }

  // optional double gear_shift_max_t = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gear_shift_unit_t(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TrajectoryPartitionConfig)
  return target;
}

size_t TrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TrajectoryPartitionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 interpolated_pieces_num = 1 [default = 50];
    if (has_interpolated_pieces_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 2 [default = 3];
    if (has_initial_gear_check_horizon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initial_gear_check_horizon());
    }

    // optional double heading_searching_range = 3 [default = 0.3];
    if (has_heading_searching_range()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 4 [default = 2];
    if (has_gear_shift_period_duration()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_max_t = 5 [default = 3];
    if (has_gear_shift_max_t()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 6 [default = 0.02];
    if (has_gear_shift_unit_t()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPartitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPartitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPartitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TrajectoryPartitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TrajectoryPartitionConfig)
    MergeFrom(*source);
  }
}

void TrajectoryPartitionConfig::MergeFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_searching_range_ = from.heading_searching_range_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPartitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPartitionConfig::CopyFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void TrajectoryPartitionConfig::Swap(TrajectoryPartitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPartitionConfig::InternalSwap(TrajectoryPartitionConfig* other) {
  std::swap(interpolated_pieces_num_, other->interpolated_pieces_num_);
  std::swap(initial_gear_check_horizon_, other->initial_gear_check_horizon_);
  std::swap(heading_searching_range_, other->heading_searching_range_);
  std::swap(gear_shift_period_duration_, other->gear_shift_period_duration_);
  std::swap(gear_shift_max_t_, other->gear_shift_max_t_);
  std::swap(gear_shift_unit_t_, other->gear_shift_unit_t_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPartitionConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPartitionConfig

// optional uint64 interpolated_pieces_num = 1 [default = 50];
bool TrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPartitionConfig::set_has_interpolated_pieces_num() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPartitionConfig::clear_has_interpolated_pieces_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(50);
  clear_has_interpolated_pieces_num();
}
::google::protobuf::uint64 TrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPartitionConfig.interpolated_pieces_num)
  return interpolated_pieces_num_;
}
void TrajectoryPartitionConfig::set_interpolated_pieces_num(::google::protobuf::uint64 value) {
  set_has_interpolated_pieces_num();
  interpolated_pieces_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 2 [default = 3];
bool TrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPartitionConfig::set_has_initial_gear_check_horizon() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPartitionConfig::clear_has_initial_gear_check_horizon() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(3);
  clear_has_initial_gear_check_horizon();
}
::google::protobuf::uint64 TrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPartitionConfig.initial_gear_check_horizon)
  return initial_gear_check_horizon_;
}
void TrajectoryPartitionConfig::set_initial_gear_check_horizon(::google::protobuf::uint64 value) {
  set_has_initial_gear_check_horizon();
  initial_gear_check_horizon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_searching_range = 3 [default = 0.3];
bool TrajectoryPartitionConfig::has_heading_searching_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryPartitionConfig::set_has_heading_searching_range() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryPartitionConfig::clear_has_heading_searching_range() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryPartitionConfig::clear_heading_searching_range() {
  heading_searching_range_ = 0.3;
  clear_has_heading_searching_range();
}
double TrajectoryPartitionConfig::heading_searching_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPartitionConfig.heading_searching_range)
  return heading_searching_range_;
}
void TrajectoryPartitionConfig::set_heading_searching_range(double value) {
  set_has_heading_searching_range();
  heading_searching_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPartitionConfig.heading_searching_range)
}

// optional double gear_shift_period_duration = 4 [default = 2];
bool TrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrajectoryPartitionConfig::set_has_gear_shift_period_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void TrajectoryPartitionConfig::clear_has_gear_shift_period_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 2;
  clear_has_gear_shift_period_duration();
}
double TrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPartitionConfig.gear_shift_period_duration)
  return gear_shift_period_duration_;
}
void TrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  set_has_gear_shift_period_duration();
  gear_shift_period_duration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional double gear_shift_max_t = 5 [default = 3];
bool TrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrajectoryPartitionConfig::set_has_gear_shift_max_t() {
  _has_bits_[0] |= 0x00000010u;
}
void TrajectoryPartitionConfig::clear_has_gear_shift_max_t() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 3;
  clear_has_gear_shift_max_t();
}
double TrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPartitionConfig.gear_shift_max_t)
  return gear_shift_max_t_;
}
void TrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  set_has_gear_shift_max_t();
  gear_shift_max_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 6 [default = 0.02];
bool TrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrajectoryPartitionConfig::set_has_gear_shift_unit_t() {
  _has_bits_[0] |= 0x00000020u;
}
void TrajectoryPartitionConfig::clear_has_gear_shift_unit_t() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0.02;
  clear_has_gear_shift_unit_t();
}
double TrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TrajectoryPartitionConfig.gear_shift_unit_t)
  return gear_shift_unit_t_;
}
void TrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  set_has_gear_shift_unit_t();
  gear_shift_unit_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TrajectoryPartitionConfig.gear_shift_unit_t)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
