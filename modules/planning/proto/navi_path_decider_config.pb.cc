// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/navi_path_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class NaviPathDeciderConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NaviPathDeciderConfig> {
} _NaviPathDeciderConfig_default_instance_;
class MoveDestLaneConfigTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveDestLaneConfigTable> {
} _MoveDestLaneConfigTable_default_instance_;
class ShiftConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShiftConfig> {
} _ShiftConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, min_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, min_look_forward_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, max_keep_lane_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, max_keep_lane_shift_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, min_keep_lane_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, keep_lane_shift_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, move_dest_lane_config_talbe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, move_dest_lane_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, max_kappa_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, kappa_move_dest_lane_compensation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NaviPathDeciderConfig, start_plan_point_from_),
  5,
  4,
  6,
  7,
  8,
  9,
  0,
  10,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDestLaneConfigTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDestLaneConfigTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveDestLaneConfigTable, lateral_shift_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, max_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShiftConfig, max_move_dest_lane_shift_y_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(NaviPathDeciderConfig)},
  { 27, 33, sizeof(MoveDestLaneConfigTable)},
  { 34, 41, sizeof(ShiftConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NaviPathDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveDestLaneConfigTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShiftConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/navi_path_decider_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _NaviPathDeciderConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MoveDestLaneConfigTable_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ShiftConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NaviPathDeciderConfig_default_instance_.DefaultConstruct();
  _MoveDestLaneConfigTable_default_instance_.DefaultConstruct();
  _ShiftConfig_default_instance_.DefaultConstruct();
  _NaviPathDeciderConfig_default_instance_.get_mutable()->move_dest_lane_config_talbe_ = const_cast< ::jmc_auto::planning::MoveDestLaneConfigTable*>(
      ::jmc_auto::planning::MoveDestLaneConfigTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n5modules/planning/proto/navi_path_decid"
      "er_config.proto\022\021jmc_auto.planning\"\327\003\n\025N"
      "aviPathDeciderConfig\022\032\n\017min_path_length\030"
      "\001 \001(\001:\0015\022 \n\025min_look_forward_time\030\002 \001(\r:"
      "\0012\022#\n\026max_keep_lane_distance\030\003 \001(\001:\0030.8\022"
      "!\n\025max_keep_lane_shift_y\030\004 \001(\001:\00220\022 \n\024mi"
      "n_keep_lane_offset\030\005 \001(\001:\00215\022*\n\034keep_lan"
      "e_shift_compensation\030\006 \001(\001:\0040.01\022O\n\033move"
      "_dest_lane_config_talbe\030\007 \001(\0132*.jmc_auto"
      ".planning.MoveDestLaneConfigTable\022)\n\033mov"
      "e_dest_lane_compensation\030\010 \001(\001:\0040.35\022\036\n\023"
      "max_kappa_threshold\030\t \001(\001:\0010\022,\n!kappa_mo"
      "ve_dest_lane_compensation\030\n \001(\001:\0010\022 \n\025st"
      "art_plan_point_from\030\013 \001(\r:\0010\"P\n\027MoveDest"
      "LaneConfigTable\0225\n\rlateral_shift\030\001 \003(\0132\036"
      ".jmc_auto.planning.ShiftConfig\"O\n\013ShiftC"
      "onfig\022\027\n\tmax_speed\030\001 \001(\001:\0044.16\022\'\n\032max_mo"
      "ve_dest_lane_shift_y\030\003 \001(\001:\0030.4"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/navi_path_decider_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NaviPathDeciderConfig::kMinPathLengthFieldNumber;
const int NaviPathDeciderConfig::kMinLookForwardTimeFieldNumber;
const int NaviPathDeciderConfig::kMaxKeepLaneDistanceFieldNumber;
const int NaviPathDeciderConfig::kMaxKeepLaneShiftYFieldNumber;
const int NaviPathDeciderConfig::kMinKeepLaneOffsetFieldNumber;
const int NaviPathDeciderConfig::kKeepLaneShiftCompensationFieldNumber;
const int NaviPathDeciderConfig::kMoveDestLaneConfigTalbeFieldNumber;
const int NaviPathDeciderConfig::kMoveDestLaneCompensationFieldNumber;
const int NaviPathDeciderConfig::kMaxKappaThresholdFieldNumber;
const int NaviPathDeciderConfig::kKappaMoveDestLaneCompensationFieldNumber;
const int NaviPathDeciderConfig::kStartPlanPointFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NaviPathDeciderConfig::NaviPathDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.NaviPathDeciderConfig)
}
NaviPathDeciderConfig::NaviPathDeciderConfig(const NaviPathDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_move_dest_lane_config_talbe()) {
    move_dest_lane_config_talbe_ = new ::jmc_auto::planning::MoveDestLaneConfigTable(*from.move_dest_lane_config_talbe_);
  } else {
    move_dest_lane_config_talbe_ = NULL;
  }
  ::memcpy(&max_kappa_threshold_, &from.max_kappa_threshold_,
    reinterpret_cast<char*>(&move_dest_lane_compensation_) -
    reinterpret_cast<char*>(&max_kappa_threshold_) + sizeof(move_dest_lane_compensation_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.NaviPathDeciderConfig)
}

void NaviPathDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&move_dest_lane_config_talbe_, 0, reinterpret_cast<char*>(&start_plan_point_from_) -
    reinterpret_cast<char*>(&move_dest_lane_config_talbe_) + sizeof(start_plan_point_from_));
  min_look_forward_time_ = 2u;
  min_path_length_ = 5;
  max_keep_lane_distance_ = 0.8;
  max_keep_lane_shift_y_ = 20;
  min_keep_lane_offset_ = 15;
  keep_lane_shift_compensation_ = 0.01;
  move_dest_lane_compensation_ = 0.35;
}

NaviPathDeciderConfig::~NaviPathDeciderConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.NaviPathDeciderConfig)
  SharedDtor();
}

void NaviPathDeciderConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete move_dest_lane_config_talbe_;
  }
}

void NaviPathDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NaviPathDeciderConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NaviPathDeciderConfig& NaviPathDeciderConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NaviPathDeciderConfig* NaviPathDeciderConfig::New(::google::protobuf::Arena* arena) const {
  NaviPathDeciderConfig* n = new NaviPathDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NaviPathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.NaviPathDeciderConfig)
  if (has_move_dest_lane_config_talbe()) {
    GOOGLE_DCHECK(move_dest_lane_config_talbe_ != NULL);
    move_dest_lane_config_talbe_->::jmc_auto::planning::MoveDestLaneConfigTable::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&max_kappa_threshold_, 0, reinterpret_cast<char*>(&start_plan_point_from_) -
      reinterpret_cast<char*>(&max_kappa_threshold_) + sizeof(start_plan_point_from_));
    min_look_forward_time_ = 2u;
    min_path_length_ = 5;
    max_keep_lane_distance_ = 0.8;
    max_keep_lane_shift_y_ = 20;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    min_keep_lane_offset_ = 15;
    keep_lane_shift_compensation_ = 0.01;
    move_dest_lane_compensation_ = 0.35;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NaviPathDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.NaviPathDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_path_length = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_min_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_look_forward_time = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_min_look_forward_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_look_forward_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_keep_lane_distance = 3 [default = 0.8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_max_keep_lane_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_keep_lane_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_keep_lane_shift_y = 4 [default = 20];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_max_keep_lane_shift_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_keep_lane_shift_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_keep_lane_offset = 5 [default = 15];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_min_keep_lane_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_keep_lane_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double keep_lane_shift_compensation = 6 [default = 0.01];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_keep_lane_shift_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_lane_shift_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_dest_lane_config_talbe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double move_dest_lane_compensation = 8 [default = 0.35];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_move_dest_lane_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &move_dest_lane_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_kappa_threshold = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_max_kappa_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_kappa_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_kappa_move_dest_lane_compensation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_move_dest_lane_compensation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_plan_point_from = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_start_plan_point_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_plan_point_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.NaviPathDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.NaviPathDeciderConfig)
  return false;
#undef DO_
}

void NaviPathDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.NaviPathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_path_length(), output);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_look_forward_time(), output);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_keep_lane_distance(), output);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_keep_lane_shift_y(), output);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_keep_lane_offset(), output);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->keep_lane_shift_compensation(), output);
  }

  // optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->move_dest_lane_config_talbe_, output);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->move_dest_lane_compensation(), output);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_kappa_threshold(), output);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->kappa_move_dest_lane_compensation(), output);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_plan_point_from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.NaviPathDeciderConfig)
}

::google::protobuf::uint8* NaviPathDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.NaviPathDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_path_length(), target);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_look_forward_time(), target);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_keep_lane_distance(), target);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_keep_lane_shift_y(), target);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_keep_lane_offset(), target);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->keep_lane_shift_compensation(), target);
  }

  // optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->move_dest_lane_config_talbe_, deterministic, target);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->move_dest_lane_compensation(), target);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_kappa_threshold(), target);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->kappa_move_dest_lane_compensation(), target);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->start_plan_point_from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.NaviPathDeciderConfig)
  return target;
}

size_t NaviPathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.NaviPathDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
    if (has_move_dest_lane_config_talbe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->move_dest_lane_config_talbe_);
    }

    // optional double max_kappa_threshold = 9 [default = 0];
    if (has_max_kappa_threshold()) {
      total_size += 1 + 8;
    }

    // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
    if (has_kappa_move_dest_lane_compensation()) {
      total_size += 1 + 8;
    }

    // optional uint32 start_plan_point_from = 11 [default = 0];
    if (has_start_plan_point_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_plan_point_from());
    }

    // optional uint32 min_look_forward_time = 2 [default = 2];
    if (has_min_look_forward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_look_forward_time());
    }

    // optional double min_path_length = 1 [default = 5];
    if (has_min_path_length()) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_distance = 3 [default = 0.8];
    if (has_max_keep_lane_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_shift_y = 4 [default = 20];
    if (has_max_keep_lane_shift_y()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double min_keep_lane_offset = 5 [default = 15];
    if (has_min_keep_lane_offset()) {
      total_size += 1 + 8;
    }

    // optional double keep_lane_shift_compensation = 6 [default = 0.01];
    if (has_keep_lane_shift_compensation()) {
      total_size += 1 + 8;
    }

    // optional double move_dest_lane_compensation = 8 [default = 0.35];
    if (has_move_dest_lane_compensation()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NaviPathDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviPathDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NaviPathDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.NaviPathDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.NaviPathDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviPathDeciderConfig::MergeFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_move_dest_lane_config_talbe()->::jmc_auto::planning::MoveDestLaneConfigTable::MergeFrom(from.move_dest_lane_config_talbe());
    }
    if (cached_has_bits & 0x00000002u) {
      max_kappa_threshold_ = from.max_kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_move_dest_lane_compensation_ = from.kappa_move_dest_lane_compensation_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_plan_point_from_ = from.start_plan_point_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_look_forward_time_ = from.min_look_forward_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_path_length_ = from.min_path_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_keep_lane_distance_ = from.max_keep_lane_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_keep_lane_shift_y_ = from.max_keep_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      min_keep_lane_offset_ = from.min_keep_lane_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      keep_lane_shift_compensation_ = from.keep_lane_shift_compensation_;
    }
    if (cached_has_bits & 0x00000400u) {
      move_dest_lane_compensation_ = from.move_dest_lane_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviPathDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviPathDeciderConfig::CopyFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPathDeciderConfig::IsInitialized() const {
  return true;
}

void NaviPathDeciderConfig::Swap(NaviPathDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NaviPathDeciderConfig::InternalSwap(NaviPathDeciderConfig* other) {
  std::swap(move_dest_lane_config_talbe_, other->move_dest_lane_config_talbe_);
  std::swap(max_kappa_threshold_, other->max_kappa_threshold_);
  std::swap(kappa_move_dest_lane_compensation_, other->kappa_move_dest_lane_compensation_);
  std::swap(start_plan_point_from_, other->start_plan_point_from_);
  std::swap(min_look_forward_time_, other->min_look_forward_time_);
  std::swap(min_path_length_, other->min_path_length_);
  std::swap(max_keep_lane_distance_, other->max_keep_lane_distance_);
  std::swap(max_keep_lane_shift_y_, other->max_keep_lane_shift_y_);
  std::swap(min_keep_lane_offset_, other->min_keep_lane_offset_);
  std::swap(keep_lane_shift_compensation_, other->keep_lane_shift_compensation_);
  std::swap(move_dest_lane_compensation_, other->move_dest_lane_compensation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NaviPathDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NaviPathDeciderConfig

// optional double min_path_length = 1 [default = 5];
bool NaviPathDeciderConfig::has_min_path_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NaviPathDeciderConfig::set_has_min_path_length() {
  _has_bits_[0] |= 0x00000020u;
}
void NaviPathDeciderConfig::clear_has_min_path_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void NaviPathDeciderConfig::clear_min_path_length() {
  min_path_length_ = 5;
  clear_has_min_path_length();
}
double NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.min_path_length)
  return min_path_length_;
}
void NaviPathDeciderConfig::set_min_path_length(double value) {
  set_has_min_path_length();
  min_path_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NaviPathDeciderConfig::set_has_min_look_forward_time() {
  _has_bits_[0] |= 0x00000010u;
}
void NaviPathDeciderConfig::clear_has_min_look_forward_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void NaviPathDeciderConfig::clear_min_look_forward_time() {
  min_look_forward_time_ = 2u;
  clear_has_min_look_forward_time();
}
::google::protobuf::uint32 NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.min_look_forward_time)
  return min_look_forward_time_;
}
void NaviPathDeciderConfig::set_min_look_forward_time(::google::protobuf::uint32 value) {
  set_has_min_look_forward_time();
  min_look_forward_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double max_keep_lane_distance = 3 [default = 0.8];
bool NaviPathDeciderConfig::has_max_keep_lane_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NaviPathDeciderConfig::set_has_max_keep_lane_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void NaviPathDeciderConfig::clear_has_max_keep_lane_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void NaviPathDeciderConfig::clear_max_keep_lane_distance() {
  max_keep_lane_distance_ = 0.8;
  clear_has_max_keep_lane_distance();
}
double NaviPathDeciderConfig::max_keep_lane_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_distance)
  return max_keep_lane_distance_;
}
void NaviPathDeciderConfig::set_max_keep_lane_distance(double value) {
  set_has_max_keep_lane_distance();
  max_keep_lane_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_distance)
}

// optional double max_keep_lane_shift_y = 4 [default = 20];
bool NaviPathDeciderConfig::has_max_keep_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NaviPathDeciderConfig::set_has_max_keep_lane_shift_y() {
  _has_bits_[0] |= 0x00000080u;
}
void NaviPathDeciderConfig::clear_has_max_keep_lane_shift_y() {
  _has_bits_[0] &= ~0x00000080u;
}
void NaviPathDeciderConfig::clear_max_keep_lane_shift_y() {
  max_keep_lane_shift_y_ = 20;
  clear_has_max_keep_lane_shift_y();
}
double NaviPathDeciderConfig::max_keep_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
  return max_keep_lane_shift_y_;
}
void NaviPathDeciderConfig::set_max_keep_lane_shift_y(double value) {
  set_has_max_keep_lane_shift_y();
  max_keep_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
}

// optional double min_keep_lane_offset = 5 [default = 15];
bool NaviPathDeciderConfig::has_min_keep_lane_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NaviPathDeciderConfig::set_has_min_keep_lane_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void NaviPathDeciderConfig::clear_has_min_keep_lane_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void NaviPathDeciderConfig::clear_min_keep_lane_offset() {
  min_keep_lane_offset_ = 15;
  clear_has_min_keep_lane_offset();
}
double NaviPathDeciderConfig::min_keep_lane_offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.min_keep_lane_offset)
  return min_keep_lane_offset_;
}
void NaviPathDeciderConfig::set_min_keep_lane_offset(double value) {
  set_has_min_keep_lane_offset();
  min_keep_lane_offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.min_keep_lane_offset)
}

// optional double keep_lane_shift_compensation = 6 [default = 0.01];
bool NaviPathDeciderConfig::has_keep_lane_shift_compensation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NaviPathDeciderConfig::set_has_keep_lane_shift_compensation() {
  _has_bits_[0] |= 0x00000200u;
}
void NaviPathDeciderConfig::clear_has_keep_lane_shift_compensation() {
  _has_bits_[0] &= ~0x00000200u;
}
void NaviPathDeciderConfig::clear_keep_lane_shift_compensation() {
  keep_lane_shift_compensation_ = 0.01;
  clear_has_keep_lane_shift_compensation();
}
double NaviPathDeciderConfig::keep_lane_shift_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
  return keep_lane_shift_compensation_;
}
void NaviPathDeciderConfig::set_keep_lane_shift_compensation(double value) {
  set_has_keep_lane_shift_compensation();
  keep_lane_shift_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
}

// optional .jmc_auto.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
bool NaviPathDeciderConfig::has_move_dest_lane_config_talbe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NaviPathDeciderConfig::set_has_move_dest_lane_config_talbe() {
  _has_bits_[0] |= 0x00000001u;
}
void NaviPathDeciderConfig::clear_has_move_dest_lane_config_talbe() {
  _has_bits_[0] &= ~0x00000001u;
}
void NaviPathDeciderConfig::clear_move_dest_lane_config_talbe() {
  if (move_dest_lane_config_talbe_ != NULL) move_dest_lane_config_talbe_->::jmc_auto::planning::MoveDestLaneConfigTable::Clear();
  clear_has_move_dest_lane_config_talbe();
}
const ::jmc_auto::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::move_dest_lane_config_talbe() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_ != NULL ? *move_dest_lane_config_talbe_
                         : *::jmc_auto::planning::MoveDestLaneConfigTable::internal_default_instance();
}
::jmc_auto::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::mutable_move_dest_lane_config_talbe() {
  set_has_move_dest_lane_config_talbe();
  if (move_dest_lane_config_talbe_ == NULL) {
    move_dest_lane_config_talbe_ = new ::jmc_auto::planning::MoveDestLaneConfigTable;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return move_dest_lane_config_talbe_;
}
::jmc_auto::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::release_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  clear_has_move_dest_lane_config_talbe();
  ::jmc_auto::planning::MoveDestLaneConfigTable* temp = move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = NULL;
  return temp;
}
void NaviPathDeciderConfig::set_allocated_move_dest_lane_config_talbe(::jmc_auto::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  delete move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  if (move_dest_lane_config_talbe) {
    set_has_move_dest_lane_config_talbe();
  } else {
    clear_has_move_dest_lane_config_talbe();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}

// optional double move_dest_lane_compensation = 8 [default = 0.35];
bool NaviPathDeciderConfig::has_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NaviPathDeciderConfig::set_has_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000400u;
}
void NaviPathDeciderConfig::clear_has_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000400u;
}
void NaviPathDeciderConfig::clear_move_dest_lane_compensation() {
  move_dest_lane_compensation_ = 0.35;
  clear_has_move_dest_lane_compensation();
}
double NaviPathDeciderConfig::move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
  return move_dest_lane_compensation_;
}
void NaviPathDeciderConfig::set_move_dest_lane_compensation(double value) {
  set_has_move_dest_lane_compensation();
  move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
}

// optional double max_kappa_threshold = 9 [default = 0];
bool NaviPathDeciderConfig::has_max_kappa_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NaviPathDeciderConfig::set_has_max_kappa_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void NaviPathDeciderConfig::clear_has_max_kappa_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void NaviPathDeciderConfig::clear_max_kappa_threshold() {
  max_kappa_threshold_ = 0;
  clear_has_max_kappa_threshold();
}
double NaviPathDeciderConfig::max_kappa_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.max_kappa_threshold)
  return max_kappa_threshold_;
}
void NaviPathDeciderConfig::set_max_kappa_threshold(double value) {
  set_has_max_kappa_threshold();
  max_kappa_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.max_kappa_threshold)
}

// optional double kappa_move_dest_lane_compensation = 10 [default = 0];
bool NaviPathDeciderConfig::has_kappa_move_dest_lane_compensation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NaviPathDeciderConfig::set_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] |= 0x00000004u;
}
void NaviPathDeciderConfig::clear_has_kappa_move_dest_lane_compensation() {
  _has_bits_[0] &= ~0x00000004u;
}
void NaviPathDeciderConfig::clear_kappa_move_dest_lane_compensation() {
  kappa_move_dest_lane_compensation_ = 0;
  clear_has_kappa_move_dest_lane_compensation();
}
double NaviPathDeciderConfig::kappa_move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
  return kappa_move_dest_lane_compensation_;
}
void NaviPathDeciderConfig::set_kappa_move_dest_lane_compensation(double value) {
  set_has_kappa_move_dest_lane_compensation();
  kappa_move_dest_lane_compensation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
}

// optional uint32 start_plan_point_from = 11 [default = 0];
bool NaviPathDeciderConfig::has_start_plan_point_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NaviPathDeciderConfig::set_has_start_plan_point_from() {
  _has_bits_[0] |= 0x00000008u;
}
void NaviPathDeciderConfig::clear_has_start_plan_point_from() {
  _has_bits_[0] &= ~0x00000008u;
}
void NaviPathDeciderConfig::clear_start_plan_point_from() {
  start_plan_point_from_ = 0u;
  clear_has_start_plan_point_from();
}
::google::protobuf::uint32 NaviPathDeciderConfig::start_plan_point_from() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.NaviPathDeciderConfig.start_plan_point_from)
  return start_plan_point_from_;
}
void NaviPathDeciderConfig::set_start_plan_point_from(::google::protobuf::uint32 value) {
  set_has_start_plan_point_from();
  start_plan_point_from_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.NaviPathDeciderConfig.start_plan_point_from)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveDestLaneConfigTable::kLateralShiftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveDestLaneConfigTable::MoveDestLaneConfigTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MoveDestLaneConfigTable)
}
MoveDestLaneConfigTable::MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lateral_shift_(from.lateral_shift_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MoveDestLaneConfigTable)
}

void MoveDestLaneConfigTable::SharedCtor() {
  _cached_size_ = 0;
}

MoveDestLaneConfigTable::~MoveDestLaneConfigTable() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MoveDestLaneConfigTable)
  SharedDtor();
}

void MoveDestLaneConfigTable::SharedDtor() {
}

void MoveDestLaneConfigTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveDestLaneConfigTable::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MoveDestLaneConfigTable& MoveDestLaneConfigTable::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveDestLaneConfigTable* MoveDestLaneConfigTable::New(::google::protobuf::Arena* arena) const {
  MoveDestLaneConfigTable* n = new MoveDestLaneConfigTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveDestLaneConfigTable::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MoveDestLaneConfigTable)
  lateral_shift_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveDestLaneConfigTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MoveDestLaneConfigTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lateral_shift()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MoveDestLaneConfigTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MoveDestLaneConfigTable)
  return false;
#undef DO_
}

void MoveDestLaneConfigTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MoveDestLaneConfigTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0, n = this->lateral_shift_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lateral_shift(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MoveDestLaneConfigTable)
}

::google::protobuf::uint8* MoveDestLaneConfigTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MoveDestLaneConfigTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0, n = this->lateral_shift_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lateral_shift(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MoveDestLaneConfigTable)
  return target;
}

size_t MoveDestLaneConfigTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MoveDestLaneConfigTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
  {
    unsigned int count = this->lateral_shift_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lateral_shift(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveDestLaneConfigTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDestLaneConfigTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveDestLaneConfigTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MoveDestLaneConfigTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MoveDestLaneConfigTable)
    MergeFrom(*source);
  }
}

void MoveDestLaneConfigTable::MergeFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lateral_shift_.MergeFrom(from.lateral_shift_);
}

void MoveDestLaneConfigTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDestLaneConfigTable::CopyFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDestLaneConfigTable::IsInitialized() const {
  return true;
}

void MoveDestLaneConfigTable::Swap(MoveDestLaneConfigTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveDestLaneConfigTable::InternalSwap(MoveDestLaneConfigTable* other) {
  lateral_shift_.InternalSwap(&other->lateral_shift_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveDestLaneConfigTable::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveDestLaneConfigTable

// repeated .jmc_auto.planning.ShiftConfig lateral_shift = 1;
int MoveDestLaneConfigTable::lateral_shift_size() const {
  return lateral_shift_.size();
}
void MoveDestLaneConfigTable::clear_lateral_shift() {
  lateral_shift_.Clear();
}
const ::jmc_auto::planning::ShiftConfig& MoveDestLaneConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Get(index);
}
::jmc_auto::planning::ShiftConfig* MoveDestLaneConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Mutable(index);
}
::jmc_auto::planning::ShiftConfig* MoveDestLaneConfigTable::add_lateral_shift() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig >*
MoveDestLaneConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return &lateral_shift_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ShiftConfig >&
MoveDestLaneConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShiftConfig::kMaxSpeedFieldNumber;
const int ShiftConfig::kMaxMoveDestLaneShiftYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShiftConfig::ShiftConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ShiftConfig)
}
ShiftConfig::ShiftConfig(const ShiftConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_speed_, &from.max_speed_,
    reinterpret_cast<char*>(&max_move_dest_lane_shift_y_) -
    reinterpret_cast<char*>(&max_speed_) + sizeof(max_move_dest_lane_shift_y_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ShiftConfig)
}

void ShiftConfig::SharedCtor() {
  _cached_size_ = 0;
  max_speed_ = 4.16;
  max_move_dest_lane_shift_y_ = 0.4;
}

ShiftConfig::~ShiftConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ShiftConfig)
  SharedDtor();
}

void ShiftConfig::SharedDtor() {
}

void ShiftConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShiftConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShiftConfig& ShiftConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShiftConfig* ShiftConfig::New(::google::protobuf::Arena* arena) const {
  ShiftConfig* n = new ShiftConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ShiftConfig)
  if (_has_bits_[0 / 32] & 3u) {
    max_speed_ = 4.16;
    max_move_dest_lane_shift_y_ = 0.4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShiftConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ShiftConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_speed = 1 [default = 4.16];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_max_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_max_move_dest_lane_shift_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_move_dest_lane_shift_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ShiftConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ShiftConfig)
  return false;
#undef DO_
}

void ShiftConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_speed(), output);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_move_dest_lane_shift_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ShiftConfig)
}

::google::protobuf::uint8* ShiftConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_speed(), target);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_move_dest_lane_shift_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ShiftConfig)
  return target;
}

size_t ShiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ShiftConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double max_speed = 1 [default = 4.16];
    if (has_max_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
    if (has_max_move_dest_lane_shift_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShiftConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShiftConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShiftConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ShiftConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ShiftConfig)
    MergeFrom(*source);
  }
}

void ShiftConfig::MergeFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_move_dest_lane_shift_y_ = from.max_move_dest_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShiftConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftConfig::CopyFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftConfig::IsInitialized() const {
  return true;
}

void ShiftConfig::Swap(ShiftConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShiftConfig::InternalSwap(ShiftConfig* other) {
  std::swap(max_speed_, other->max_speed_);
  std::swap(max_move_dest_lane_shift_y_, other->max_move_dest_lane_shift_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShiftConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
bool ShiftConfig::has_max_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShiftConfig::set_has_max_speed() {
  _has_bits_[0] |= 0x00000001u;
}
void ShiftConfig::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShiftConfig::clear_max_speed() {
  max_speed_ = 4.16;
  clear_has_max_speed();
}
double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ShiftConfig.max_speed)
  return max_speed_;
}
void ShiftConfig::set_max_speed(double value) {
  set_has_max_speed();
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ShiftConfig.max_speed)
}

// optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
bool ShiftConfig::has_max_move_dest_lane_shift_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShiftConfig::set_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] |= 0x00000002u;
}
void ShiftConfig::clear_has_max_move_dest_lane_shift_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShiftConfig::clear_max_move_dest_lane_shift_y() {
  max_move_dest_lane_shift_y_ = 0.4;
  clear_has_max_move_dest_lane_shift_y();
}
double ShiftConfig::max_move_dest_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ShiftConfig.max_move_dest_lane_shift_y)
  return max_move_dest_lane_shift_y_;
}
void ShiftConfig::set_max_move_dest_lane_shift_y(double value) {
  set_has_max_move_dest_lane_shift_y();
  max_move_dest_lane_shift_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ShiftConfig.max_move_dest_lane_shift_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
