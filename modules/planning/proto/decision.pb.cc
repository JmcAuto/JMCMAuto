// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class TargetLaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TargetLane> {
} _TargetLane_default_instance_;
class ObjectIgnoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectIgnore> {
} _ObjectIgnore_default_instance_;
class ObjectStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectStop> {
} _ObjectStop_default_instance_;
class ObjectNudgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectNudge> {
} _ObjectNudge_default_instance_;
class ObjectYieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectYield> {
} _ObjectYield_default_instance_;
class ObjectFollowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectFollow> {
} _ObjectFollow_default_instance_;
class ObjectOvertakeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectOvertake> {
} _ObjectOvertake_default_instance_;
class ObjectSidePassDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectSidePass> {
} _ObjectSidePass_default_instance_;
class ObjectAvoidDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectAvoid> {
} _ObjectAvoid_default_instance_;
class ObjectStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectStatus> {
} _ObjectStatus_default_instance_;
class ObjectStaticDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectStatic> {
} _ObjectStatic_default_instance_;
class ObjectDynamicDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectDynamic> {
} _ObjectDynamic_default_instance_;
class ObjectMotionTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectMotionType> {
  public:
  const ::jmc_auto::planning::ObjectStatic* static__;
  const ::jmc_auto::planning::ObjectDynamic* dynamic_;
} _ObjectMotionType_default_instance_;
class ObjectDecisionTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectDecisionType> {
  public:
  const ::jmc_auto::planning::ObjectIgnore* ignore_;
  const ::jmc_auto::planning::ObjectStop* stop_;
  const ::jmc_auto::planning::ObjectFollow* follow_;
  const ::jmc_auto::planning::ObjectYield* yield_;
  const ::jmc_auto::planning::ObjectOvertake* overtake_;
  const ::jmc_auto::planning::ObjectNudge* nudge_;
  const ::jmc_auto::planning::ObjectAvoid* avoid_;
  const ::jmc_auto::planning::ObjectSidePass* side_pass_;
} _ObjectDecisionType_default_instance_;
class ObjectDecisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectDecision> {
} _ObjectDecision_default_instance_;
class ObjectDecisionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectDecisions> {
} _ObjectDecisions_default_instance_;
class MainStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainStop> {
} _MainStop_default_instance_;
class EmergencyStopHardBrakeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmergencyStopHardBrake> {
} _EmergencyStopHardBrake_default_instance_;
class EmergencyStopCruiseToStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmergencyStopCruiseToStop> {
} _EmergencyStopCruiseToStop_default_instance_;
class MainEmergencyStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainEmergencyStop> {
  public:
  const ::jmc_auto::planning::EmergencyStopHardBrake* hard_brake_;
  const ::jmc_auto::planning::EmergencyStopCruiseToStop* cruise_to_stop_;
} _MainEmergencyStop_default_instance_;
class MainCruiseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainCruise> {
} _MainCruise_default_instance_;
class MainChangeLaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainChangeLane> {
} _MainChangeLane_default_instance_;
class MainMissionCompleteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainMissionComplete> {
} _MainMissionComplete_default_instance_;
class MainNotReadyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainNotReady> {
} _MainNotReady_default_instance_;
class MainParkingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainParking> {
} _MainParking_default_instance_;
class MainDecisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MainDecision> {
  public:
  const ::jmc_auto::planning::MainCruise* cruise_;
  const ::jmc_auto::planning::MainStop* stop_;
  const ::jmc_auto::planning::MainEmergencyStop* estop_;
  const ::jmc_auto::planning::MainChangeLane* change_lane_;
  const ::jmc_auto::planning::MainMissionComplete* mission_complete_;
  const ::jmc_auto::planning::MainNotReady* not_ready_;
  const ::jmc_auto::planning::MainParking* parking_;
} _MainDecision_default_instance_;
class DecisionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecisionResult> {
} _DecisionResult_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fdecision_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[27];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetLane, speed_limit_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIgnore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIgnore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, stop_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStop, wait_for_obstacle_),
  3,
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectNudge, distance_l_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, fence_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, fence_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectYield, time_buffer_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, fence_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectFollow, fence_heading_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, fence_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, fence_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectOvertake, time_buffer_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSidePass, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAvoid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAvoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStatus, motion_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStatus, decision_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStatic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDynamic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMotionType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMotionType, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMotionType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectMotionType_default_instance_), static__),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectMotionType_default_instance_), dynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMotionType, motion_tag_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), ignore_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), stop_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), follow_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), yield_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), overtake_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), nudge_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), avoid_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ObjectDecisionType_default_instance_), side_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisionType, object_tag_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, perception_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecision, object_decision_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectDecisions, decision_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, stop_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainStop, change_lane_type_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopHardBrake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopHardBrake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopCruiseToStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmergencyStopCruiseToStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, reason_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainEmergencyStop_default_instance_), hard_brake_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainEmergencyStop_default_instance_), cruise_to_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainEmergencyStop, task_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCruise, change_lane_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, default_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, default_lane_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainChangeLane, target_lane_stop_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainMissionComplete, stop_heading_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainNotReady, reason_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainParking, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), cruise_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), stop_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), estop_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), change_lane_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), mission_complete_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), not_ready_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MainDecision_default_instance_), parking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, target_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainDecision, task_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, main_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, object_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionResult, vehicle_signal_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(TargetLane)},
  { 13, 18, sizeof(ObjectIgnore)},
  { 18, 28, sizeof(ObjectStop)},
  { 33, 40, sizeof(ObjectNudge)},
  { 42, 51, sizeof(ObjectYield)},
  { 55, 63, sizeof(ObjectFollow)},
  { 66, 75, sizeof(ObjectOvertake)},
  { 79, 85, sizeof(ObjectSidePass)},
  { 86, 91, sizeof(ObjectAvoid)},
  { 91, 98, sizeof(ObjectStatus)},
  { 100, 105, sizeof(ObjectStatic)},
  { 105, 110, sizeof(ObjectDynamic)},
  { 110, 118, sizeof(ObjectMotionType)},
  { 120, 134, sizeof(ObjectDecisionType)},
  { 142, 150, sizeof(ObjectDecision)},
  { 153, 159, sizeof(ObjectDecisions)},
  { 160, 170, sizeof(MainStop)},
  { 175, 180, sizeof(EmergencyStopHardBrake)},
  { 180, 185, sizeof(EmergencyStopCruiseToStop)},
  { 185, 195, sizeof(MainEmergencyStop)},
  { 199, 205, sizeof(MainCruise)},
  { 206, 215, sizeof(MainChangeLane)},
  { 219, 226, sizeof(MainMissionComplete)},
  { 228, 234, sizeof(MainNotReady)},
  { 235, 241, sizeof(MainParking)},
  { 242, 256, sizeof(MainDecision)},
  { 264, 272, sizeof(DecisionResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectIgnore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectNudge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectYield_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectFollow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectOvertake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectSidePass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectAvoid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectStatic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectDynamic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectMotionType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectDecisionType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectDecision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectDecisions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmergencyStopHardBrake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmergencyStopCruiseToStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainEmergencyStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainCruise_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainChangeLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainMissionComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainNotReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainParking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MainDecision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecisionResult_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/decision.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 27);
}

}  // namespace

void TableStruct::Shutdown() {
  _TargetLane_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ObjectIgnore_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ObjectStop_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ObjectNudge_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ObjectYield_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ObjectFollow_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ObjectOvertake_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ObjectSidePass_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ObjectAvoid_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ObjectStatus_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ObjectStatic_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ObjectDynamic_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ObjectMotionType_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ObjectDecisionType_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ObjectDecision_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _ObjectDecisions_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _MainStop_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _EmergencyStopHardBrake_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _EmergencyStopCruiseToStop_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _MainEmergencyStop_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _MainCruise_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _MainChangeLane_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _MainMissionComplete_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _MainNotReady_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _MainParking_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _MainDecision_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _DecisionResult_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::InitDefaults();
  ::jmc_auto::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  _TargetLane_default_instance_.DefaultConstruct();
  _ObjectIgnore_default_instance_.DefaultConstruct();
  _ObjectStop_default_instance_.DefaultConstruct();
  _ObjectNudge_default_instance_.DefaultConstruct();
  _ObjectYield_default_instance_.DefaultConstruct();
  _ObjectFollow_default_instance_.DefaultConstruct();
  _ObjectOvertake_default_instance_.DefaultConstruct();
  _ObjectSidePass_default_instance_.DefaultConstruct();
  _ObjectAvoid_default_instance_.DefaultConstruct();
  _ObjectStatus_default_instance_.DefaultConstruct();
  _ObjectStatic_default_instance_.DefaultConstruct();
  _ObjectDynamic_default_instance_.DefaultConstruct();
  _ObjectMotionType_default_instance_.DefaultConstruct();
  _ObjectDecisionType_default_instance_.DefaultConstruct();
  _ObjectDecision_default_instance_.DefaultConstruct();
  _ObjectDecisions_default_instance_.DefaultConstruct();
  _MainStop_default_instance_.DefaultConstruct();
  _EmergencyStopHardBrake_default_instance_.DefaultConstruct();
  _EmergencyStopCruiseToStop_default_instance_.DefaultConstruct();
  _MainEmergencyStop_default_instance_.DefaultConstruct();
  _MainCruise_default_instance_.DefaultConstruct();
  _MainChangeLane_default_instance_.DefaultConstruct();
  _MainMissionComplete_default_instance_.DefaultConstruct();
  _MainNotReady_default_instance_.DefaultConstruct();
  _MainParking_default_instance_.DefaultConstruct();
  _MainDecision_default_instance_.DefaultConstruct();
  _DecisionResult_default_instance_.DefaultConstruct();
  _ObjectStop_default_instance_.get_mutable()->stop_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _ObjectYield_default_instance_.get_mutable()->fence_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _ObjectFollow_default_instance_.get_mutable()->fence_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _ObjectOvertake_default_instance_.get_mutable()->fence_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _ObjectStatus_default_instance_.get_mutable()->motion_type_ = const_cast< ::jmc_auto::planning::ObjectMotionType*>(
      ::jmc_auto::planning::ObjectMotionType::internal_default_instance());
  _ObjectStatus_default_instance_.get_mutable()->decision_type_ = const_cast< ::jmc_auto::planning::ObjectDecisionType*>(
      ::jmc_auto::planning::ObjectDecisionType::internal_default_instance());
  _ObjectMotionType_default_instance_.static__ = const_cast< ::jmc_auto::planning::ObjectStatic*>(
      ::jmc_auto::planning::ObjectStatic::internal_default_instance());
  _ObjectMotionType_default_instance_.dynamic_ = const_cast< ::jmc_auto::planning::ObjectDynamic*>(
      ::jmc_auto::planning::ObjectDynamic::internal_default_instance());
  _ObjectDecisionType_default_instance_.ignore_ = const_cast< ::jmc_auto::planning::ObjectIgnore*>(
      ::jmc_auto::planning::ObjectIgnore::internal_default_instance());
  _ObjectDecisionType_default_instance_.stop_ = const_cast< ::jmc_auto::planning::ObjectStop*>(
      ::jmc_auto::planning::ObjectStop::internal_default_instance());
  _ObjectDecisionType_default_instance_.follow_ = const_cast< ::jmc_auto::planning::ObjectFollow*>(
      ::jmc_auto::planning::ObjectFollow::internal_default_instance());
  _ObjectDecisionType_default_instance_.yield_ = const_cast< ::jmc_auto::planning::ObjectYield*>(
      ::jmc_auto::planning::ObjectYield::internal_default_instance());
  _ObjectDecisionType_default_instance_.overtake_ = const_cast< ::jmc_auto::planning::ObjectOvertake*>(
      ::jmc_auto::planning::ObjectOvertake::internal_default_instance());
  _ObjectDecisionType_default_instance_.nudge_ = const_cast< ::jmc_auto::planning::ObjectNudge*>(
      ::jmc_auto::planning::ObjectNudge::internal_default_instance());
  _ObjectDecisionType_default_instance_.avoid_ = const_cast< ::jmc_auto::planning::ObjectAvoid*>(
      ::jmc_auto::planning::ObjectAvoid::internal_default_instance());
  _ObjectDecisionType_default_instance_.side_pass_ = const_cast< ::jmc_auto::planning::ObjectSidePass*>(
      ::jmc_auto::planning::ObjectSidePass::internal_default_instance());
  _MainStop_default_instance_.get_mutable()->stop_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _MainEmergencyStop_default_instance_.hard_brake_ = const_cast< ::jmc_auto::planning::EmergencyStopHardBrake*>(
      ::jmc_auto::planning::EmergencyStopHardBrake::internal_default_instance());
  _MainEmergencyStop_default_instance_.cruise_to_stop_ = const_cast< ::jmc_auto::planning::EmergencyStopCruiseToStop*>(
      ::jmc_auto::planning::EmergencyStopCruiseToStop::internal_default_instance());
  _MainChangeLane_default_instance_.get_mutable()->default_lane_stop_ = const_cast< ::jmc_auto::planning::MainStop*>(
      ::jmc_auto::planning::MainStop::internal_default_instance());
  _MainChangeLane_default_instance_.get_mutable()->target_lane_stop_ = const_cast< ::jmc_auto::planning::MainStop*>(
      ::jmc_auto::planning::MainStop::internal_default_instance());
  _MainMissionComplete_default_instance_.get_mutable()->stop_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _MainDecision_default_instance_.cruise_ = const_cast< ::jmc_auto::planning::MainCruise*>(
      ::jmc_auto::planning::MainCruise::internal_default_instance());
  _MainDecision_default_instance_.stop_ = const_cast< ::jmc_auto::planning::MainStop*>(
      ::jmc_auto::planning::MainStop::internal_default_instance());
  _MainDecision_default_instance_.estop_ = const_cast< ::jmc_auto::planning::MainEmergencyStop*>(
      ::jmc_auto::planning::MainEmergencyStop::internal_default_instance());
  _MainDecision_default_instance_.change_lane_ = const_cast< ::jmc_auto::planning::MainChangeLane*>(
      ::jmc_auto::planning::MainChangeLane::internal_default_instance());
  _MainDecision_default_instance_.mission_complete_ = const_cast< ::jmc_auto::planning::MainMissionComplete*>(
      ::jmc_auto::planning::MainMissionComplete::internal_default_instance());
  _MainDecision_default_instance_.not_ready_ = const_cast< ::jmc_auto::planning::MainNotReady*>(
      ::jmc_auto::planning::MainNotReady::internal_default_instance());
  _MainDecision_default_instance_.parking_ = const_cast< ::jmc_auto::planning::MainParking*>(
      ::jmc_auto::planning::MainParking::internal_default_instance());
  _DecisionResult_default_instance_.get_mutable()->main_decision_ = const_cast< ::jmc_auto::planning::MainDecision*>(
      ::jmc_auto::planning::MainDecision::internal_default_instance());
  _DecisionResult_default_instance_.get_mutable()->object_decision_ = const_cast< ::jmc_auto::planning::ObjectDecisions*>(
      ::jmc_auto::planning::ObjectDecisions::internal_default_instance());
  _DecisionResult_default_instance_.get_mutable()->vehicle_signal_ = const_cast< ::jmc_auto::common::VehicleSignal*>(
      ::jmc_auto::common::VehicleSignal::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%modules/planning/proto/decision.proto\022"
      "\021jmc_auto.planning\032#modules/common/proto"
      "/geometry.proto\032)modules/common/proto/ve"
      "hicle_signal.proto\032#modules/routing/prot"
      "o/routing.proto\"M\n\nTargetLane\022\n\n\002id\030\001 \001("
      "\t\022\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\022\023\n\013spe"
      "ed_limit\030\004 \001(\001\"\016\n\014ObjectIgnore\"\270\001\n\nObjec"
      "tStop\0226\n\013reason_code\030\001 \001(\0162!.jmc_auto.pl"
      "anning.StopReasonCode\022\022\n\ndistance_s\030\002 \001("
      "\001\022-\n\nstop_point\030\003 \001(\0132\031.jmc_auto.common."
      "PointENU\022\024\n\014stop_heading\030\004 \001(\001\022\031\n\021wait_f"
      "or_obstacle\030\005 \003(\t\"\213\001\n\013ObjectNudge\0221\n\004typ"
      "e\030\001 \001(\0162#.jmc_auto.planning.ObjectNudge."
      "Type\022\022\n\ndistance_l\030\002 \001(\001\"5\n\004Type\022\016\n\nLEFT"
      "_NUDGE\020\001\022\017\n\013RIGHT_NUDGE\020\002\022\014\n\010NO_NUDGE\020\003\""
      "}\n\013ObjectYield\022\022\n\ndistance_s\030\001 \001(\001\022.\n\013fe"
      "nce_point\030\002 \001(\0132\031.jmc_auto.common.PointE"
      "NU\022\025\n\rfence_heading\030\003 \001(\001\022\023\n\013time_buffer"
      "\030\004 \001(\001\"i\n\014ObjectFollow\022\022\n\ndistance_s\030\001 \001"
      "(\001\022.\n\013fence_point\030\002 \001(\0132\031.jmc_auto.commo"
      "n.PointENU\022\025\n\rfence_heading\030\003 \001(\001\"\200\001\n\016Ob"
      "jectOvertake\022\022\n\ndistance_s\030\001 \001(\001\022.\n\013fenc"
      "e_point\030\002 \001(\0132\031.jmc_auto.common.PointENU"
      "\022\025\n\rfence_heading\030\003 \001(\001\022\023\n\013time_buffer\030\004"
      " \001(\001\"c\n\016ObjectSidePass\0224\n\004type\030\001 \001(\0162&.j"
      "mc_auto.planning.ObjectSidePass.Type\"\033\n\004"
      "Type\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"\r\n\013ObjectAvoid"
      "\"\206\001\n\014ObjectStatus\0228\n\013motion_type\030\001 \001(\0132#"
      ".jmc_auto.planning.ObjectMotionType\022<\n\rd"
      "ecision_type\030\002 \001(\0132%.jmc_auto.planning.O"
      "bjectDecisionType\"\016\n\014ObjectStatic\"\017\n\rObj"
      "ectDynamic\"\210\001\n\020ObjectMotionType\0221\n\006stati"
      "c\030\001 \001(\0132\037.jmc_auto.planning.ObjectStatic"
      "H\000\0223\n\007dynamic\030\002 \001(\0132 .jmc_auto.planning."
      "ObjectDynamicH\000B\014\n\nmotion_tag\"\271\003\n\022Object"
      "DecisionType\0221\n\006ignore\030\001 \001(\0132\037.jmc_auto."
      "planning.ObjectIgnoreH\000\022-\n\004stop\030\002 \001(\0132\035."
      "jmc_auto.planning.ObjectStopH\000\0221\n\006follow"
      "\030\003 \001(\0132\037.jmc_auto.planning.ObjectFollowH"
      "\000\022/\n\005yield\030\004 \001(\0132\036.jmc_auto.planning.Obj"
      "ectYieldH\000\0225\n\010overtake\030\005 \001(\0132!.jmc_auto."
      "planning.ObjectOvertakeH\000\022/\n\005nudge\030\006 \001(\013"
      "2\036.jmc_auto.planning.ObjectNudgeH\000\022/\n\005av"
      "oid\030\007 \001(\0132\036.jmc_auto.planning.ObjectAvoi"
      "dH\000\0226\n\tside_pass\030\010 \001(\0132!.jmc_auto.planni"
      "ng.ObjectSidePassH\000B\014\n\nobject_tag\"s\n\016Obj"
      "ectDecision\022\n\n\002id\030\001 \001(\t\022\025\n\rperception_id"
      "\030\002 \001(\005\022>\n\017object_decision\030\003 \003(\0132%.jmc_au"
      "to.planning.ObjectDecisionType\"F\n\017Object"
      "Decisions\0223\n\010decision\030\001 \003(\0132!.jmc_auto.p"
      "lanning.ObjectDecision\"\323\001\n\010MainStop\0226\n\013r"
      "eason_code\030\001 \001(\0162!.jmc_auto.planning.Sto"
      "pReasonCode\022\016\n\006reason\030\002 \001(\t\022-\n\nstop_poin"
      "t\030\003 \001(\0132\031.jmc_auto.common.PointENU\022\024\n\014st"
      "op_heading\030\004 \001(\001\022:\n\020change_lane_type\030\005 \001"
      "(\0162 .jmc_auto.routing.ChangeLaneType\"\030\n\026"
      "EmergencyStopHardBrake\"\033\n\031EmergencyStopC"
      "ruiseToStop\"\245\003\n\021MainEmergencyStop\022D\n\013rea"
      "son_code\030\001 \001(\0162/.jmc_auto.planning.MainE"
      "mergencyStop.ReasonCode\022\016\n\006reason\030\002 \001(\t\022"
      "\?\n\nhard_brake\030\003 \001(\0132).jmc_auto.planning."
      "EmergencyStopHardBrakeH\000\022F\n\016cruise_to_st"
      "op\030\004 \001(\0132,.jmc_auto.planning.EmergencySt"
      "opCruiseToStopH\000\"\250\001\n\nReasonCode\022\035\n\031ESTOP"
      "_REASON_INTERNAL_ERR\020\001\022\032\n\026ESTOP_REASON_C"
      "OLLISION\020\002\022\035\n\031ESTOP_REASON_ST_FIND_PATH\020"
      "\003\022!\n\035ESTOP_REASON_ST_MAKE_DECISION\020\004\022\035\n\031"
      "ESTOP_REASON_SENSOR_ERROR\020\005B\006\n\004task\"H\n\nM"
      "ainCruise\022:\n\020change_lane_type\030\001 \001(\0162 .jm"
      "c_auto.routing.ChangeLaneType\"\207\002\n\016MainCh"
      "angeLane\0224\n\004type\030\001 \001(\0162&.jmc_auto.planni"
      "ng.MainChangeLane.Type\0223\n\014default_lane\030\002"
      " \003(\0132\035.jmc_auto.planning.TargetLane\0226\n\021d"
      "efault_lane_stop\030\003 \001(\0132\033.jmc_auto.planni"
      "ng.MainStop\0225\n\020target_lane_stop\030\004 \001(\0132\033."
      "jmc_auto.planning.MainStop\"\033\n\004Type\022\010\n\004LE"
      "FT\020\001\022\t\n\005RIGHT\020\002\"Z\n\023MainMissionComplete\022-"
      "\n\nstop_point\030\001 \001(\0132\031.jmc_auto.common.Poi"
      "ntENU\022\024\n\014stop_heading\030\002 \001(\001\"\036\n\014MainNotRe"
      "ady\022\016\n\006reason\030\001 \001(\t\"l\n\013MainParking\022<\n\006st"
      "atus\030\001 \001(\0162,.jmc_auto.planning.MainParki"
      "ng.ParkingStatus\"\037\n\rParkingStatus\022\016\n\nIN_"
      "PARKING\020\001\"\316\003\n\014MainDecision\022/\n\006cruise\030\001 \001"
      "(\0132\035.jmc_auto.planning.MainCruiseH\000\022+\n\004s"
      "top\030\002 \001(\0132\033.jmc_auto.planning.MainStopH\000"
      "\0225\n\005estop\030\003 \001(\0132$.jmc_auto.planning.Main"
      "EmergencyStopH\000\022<\n\013change_lane\030\004 \001(\0132!.j"
      "mc_auto.planning.MainChangeLaneB\002\030\001H\000\022B\n"
      "\020mission_complete\030\006 \001(\0132&.jmc_auto.plann"
      "ing.MainMissionCompleteH\000\0224\n\tnot_ready\030\007"
      " \001(\0132\037.jmc_auto.planning.MainNotReadyH\000\022"
      "1\n\007parking\030\010 \001(\0132\036.jmc_auto.planning.Mai"
      "nParkingH\000\0226\n\013target_lane\030\005 \003(\0132\035.jmc_au"
      "to.planning.TargetLaneB\002\030\001B\006\n\004task\"\275\001\n\016D"
      "ecisionResult\0226\n\rmain_decision\030\001 \001(\0132\037.j"
      "mc_auto.planning.MainDecision\022;\n\017object_"
      "decision\030\002 \001(\0132\".jmc_auto.planning.Objec"
      "tDecisions\0226\n\016vehicle_signal\030\003 \001(\0132\036.jmc"
      "_auto.common.VehicleSignal*\236\004\n\016StopReaso"
      "nCode\022\034\n\030STOP_REASON_HEAD_VEHICLE\020\001\022\033\n\027S"
      "TOP_REASON_DESTINATION\020\002\022\032\n\026STOP_REASON_"
      "PEDESTRIAN\020\003\022\030\n\024STOP_REASON_OBSTACLE\020\004\022\032"
      "\n\026STOP_REASON_PREPARKING\020\005\022\026\n\022STOP_REASO"
      "N_SIGNAL\020d\022\031\n\025STOP_REASON_STOP_SIGN\020e\022\032\n"
      "\026STOP_REASON_YIELD_SIGN\020f\022\032\n\026STOP_REASON"
      "_CLEAR_ZONE\020g\022\031\n\025STOP_REASON_CROSSWALK\020h"
      "\022\027\n\023STOP_REASON_CREEPER\020i\022\035\n\031STOP_REASON"
      "_REFERENCE_END\020j\022\035\n\031STOP_REASON_YELLOW_S"
      "IGNAL\020k\022\031\n\025STOP_REASON_PULL_OVER\020l\022\037\n\033ST"
      "OP_REASON_SIDEPASS_SAFETY\020m\022$\n\037STOP_REAS"
      "ON_PRE_OPEN_SPACE_STOP\020\310\001\022$\n\037STOP_REASON"
      "_LANE_CHANGE_URGENCY\020\311\001\022\032\n\025STOP_REASON_E"
      "MERGENCY\020\312\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4491);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/decision.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::AddDescriptors();
  ::jmc_auto::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fdecision_2eproto

const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_enum_descriptors[0];
}
bool ObjectNudge_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectNudge_Type ObjectNudge::LEFT_NUDGE;
const ObjectNudge_Type ObjectNudge::RIGHT_NUDGE;
const ObjectNudge_Type ObjectNudge::NO_NUDGE;
const ObjectNudge_Type ObjectNudge::Type_MIN;
const ObjectNudge_Type ObjectNudge::Type_MAX;
const int ObjectNudge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_enum_descriptors[1];
}
bool ObjectSidePass_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectSidePass_Type ObjectSidePass::LEFT;
const ObjectSidePass_Type ObjectSidePass::RIGHT;
const ObjectSidePass_Type ObjectSidePass::Type_MIN;
const ObjectSidePass_Type ObjectSidePass::Type_MAX;
const int ObjectSidePass::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_enum_descriptors[2];
}
bool MainEmergencyStop_ReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_INTERNAL_ERR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_COLLISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_FIND_PATH;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_MAKE_DECISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_SENSOR_ERROR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MIN;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MAX;
const int MainEmergencyStop::ReasonCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_enum_descriptors[3];
}
bool MainChangeLane_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainChangeLane_Type MainChangeLane::LEFT;
const MainChangeLane_Type MainChangeLane::RIGHT;
const MainChangeLane_Type MainChangeLane::Type_MIN;
const MainChangeLane_Type MainChangeLane::Type_MAX;
const int MainChangeLane::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MainParking_ParkingStatus_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_enum_descriptors[4];
}
bool MainParking_ParkingStatus_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainParking_ParkingStatus MainParking::IN_PARKING;
const MainParking_ParkingStatus MainParking::ParkingStatus_MIN;
const MainParking_ParkingStatus MainParking::ParkingStatus_MAX;
const int MainParking::ParkingStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_enum_descriptors[5];
}
bool StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 200:
    case 201:
    case 202:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetLane::kIdFieldNumber;
const int TargetLane::kStartSFieldNumber;
const int TargetLane::kEndSFieldNumber;
const int TargetLane::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetLane::TargetLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TargetLane)
}
TargetLane::TargetLane(const TargetLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TargetLane)
}

void TargetLane::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(speed_limit_));
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TargetLane)
  SharedDtor();
}

void TargetLane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TargetLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetLane::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetLane& TargetLane::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetLane* TargetLane::New(::google::protobuf::Arena* arena) const {
  TargetLane* n = new TargetLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TargetLane)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&start_s_, 0, reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&start_s_) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TargetLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TargetLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.TargetLane.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TargetLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TargetLane)
  return false;
#undef DO_
}

void TargetLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TargetLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.TargetLane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional double speed_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TargetLane)
}

::google::protobuf::uint8* TargetLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TargetLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.TargetLane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional double speed_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TargetLane)
  return target;
}

size_t TargetLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TargetLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_s = 2;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TargetLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TargetLane)
    MergeFrom(*source);
  }
}

void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {
  return true;
}

void TargetLane::Swap(TargetLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetLane::InternalSwap(TargetLane* other) {
  id_.Swap(&other->id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetLane::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetLane

// optional string id = 1;
bool TargetLane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TargetLane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TargetLane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TargetLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& TargetLane::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TargetLane.id)
  return id_.GetNoArena();
}
void TargetLane::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TargetLane.id)
}
#if LANG_CXX11
void TargetLane::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.TargetLane.id)
}
#endif
void TargetLane::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.TargetLane.id)
}
void TargetLane::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.TargetLane.id)
}
::std::string* TargetLane::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TargetLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TargetLane::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TargetLane.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TargetLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TargetLane.id)
}

// optional double start_s = 2;
bool TargetLane::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TargetLane::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void TargetLane::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void TargetLane::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
double TargetLane::start_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TargetLane.start_s)
  return start_s_;
}
void TargetLane::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TargetLane.start_s)
}

// optional double end_s = 3;
bool TargetLane::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TargetLane::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void TargetLane::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void TargetLane::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
double TargetLane::end_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TargetLane.end_s)
  return end_s_;
}
void TargetLane::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TargetLane.end_s)
}

// optional double speed_limit = 4;
bool TargetLane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TargetLane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void TargetLane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void TargetLane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
double TargetLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TargetLane.speed_limit)
  return speed_limit_;
}
void TargetLane::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TargetLane.speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectIgnore::ObjectIgnore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectIgnore)
}
ObjectIgnore::ObjectIgnore(const ObjectIgnore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectIgnore)
}

void ObjectIgnore::SharedCtor() {
  _cached_size_ = 0;
}

ObjectIgnore::~ObjectIgnore() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectIgnore)
  SharedDtor();
}

void ObjectIgnore::SharedDtor() {
}

void ObjectIgnore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectIgnore::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectIgnore& ObjectIgnore::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectIgnore* ObjectIgnore::New(::google::protobuf::Arena* arena) const {
  ObjectIgnore* n = new ObjectIgnore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectIgnore)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectIgnore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectIgnore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectIgnore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectIgnore)
  return false;
#undef DO_
}

void ObjectIgnore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectIgnore)
}

::google::protobuf::uint8* ObjectIgnore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectIgnore)
  return target;
}

size_t ObjectIgnore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectIgnore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectIgnore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectIgnore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectIgnore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectIgnore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectIgnore)
    MergeFrom(*source);
  }
}

void ObjectIgnore::MergeFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectIgnore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIgnore::CopyFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIgnore::IsInitialized() const {
  return true;
}

void ObjectIgnore::Swap(ObjectIgnore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectIgnore::InternalSwap(ObjectIgnore* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectIgnore::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectIgnore

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectStop::kReasonCodeFieldNumber;
const int ObjectStop::kDistanceSFieldNumber;
const int ObjectStop::kStopPointFieldNumber;
const int ObjectStop::kStopHeadingFieldNumber;
const int ObjectStop::kWaitForObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectStop::ObjectStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectStop)
}
ObjectStop::ObjectStop(const ObjectStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wait_for_obstacle_(from.wait_for_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::jmc_auto::common::PointENU(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    reinterpret_cast<char*>(&reason_code_) -
    reinterpret_cast<char*>(&distance_s_) + sizeof(reason_code_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectStop)
}

void ObjectStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stop_point_, 0, reinterpret_cast<char*>(&stop_heading_) -
    reinterpret_cast<char*>(&stop_point_) + sizeof(stop_heading_));
  reason_code_ = 1;
}

ObjectStop::~ObjectStop() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectStop)
  SharedDtor();
}

void ObjectStop::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stop_point_;
  }
}

void ObjectStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectStop::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectStop& ObjectStop::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectStop* ObjectStop::New(::google::protobuf::Arena* arena) const {
  ObjectStop* n = new ObjectStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectStop::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectStop)
  wait_for_obstacle_.Clear();
  if (has_stop_point()) {
    GOOGLE_DCHECK(stop_point_ != NULL);
    stop_point_->::jmc_auto::common::PointENU::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&distance_s_, 0, reinterpret_cast<char*>(&stop_heading_) -
      reinterpret_cast<char*>(&distance_s_) + sizeof(stop_heading_));
    reason_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::StopReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::jmc_auto::planning::StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU stop_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_stop_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string wait_for_obstacle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wait_for_obstacle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wait_for_obstacle(this->wait_for_obstacle_size() - 1).data(),
            this->wait_for_obstacle(this->wait_for_obstacle_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.ObjectStop.wait_for_obstacle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectStop)
  return false;
#undef DO_
}

void ObjectStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional double distance_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_s(), output);
  }

  // optional .jmc_auto.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_heading(), output);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0, n = this->wait_for_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle(i).data(), this->wait_for_obstacle(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.ObjectStop.wait_for_obstacle");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wait_for_obstacle(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectStop)
}

::google::protobuf::uint8* ObjectStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional double distance_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_s(), target);
  }

  // optional .jmc_auto.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, deterministic, target);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_heading(), target);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0, n = this->wait_for_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle(i).data(), this->wait_for_obstacle(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.ObjectStop.wait_for_obstacle");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->wait_for_obstacle(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectStop)
  return target;
}

size_t ObjectStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string wait_for_obstacle = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->wait_for_obstacle_size());
  for (int i = 0, n = this->wait_for_obstacle_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wait_for_obstacle(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.common.PointENU stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double distance_s = 2;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double stop_heading = 4;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectStop)
    MergeFrom(*source);
  }
}

void ObjectStop::MergeFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wait_for_obstacle_.MergeFrom(from.wait_for_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::jmc_auto::common::PointENU::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_heading_ = from.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStop::CopyFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStop::IsInitialized() const {
  return true;
}

void ObjectStop::Swap(ObjectStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectStop::InternalSwap(ObjectStop* other) {
  wait_for_obstacle_.InternalSwap(&other->wait_for_obstacle_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(distance_s_, other->distance_s_);
  std::swap(stop_heading_, other->stop_heading_);
  std::swap(reason_code_, other->reason_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectStop

// optional .jmc_auto.planning.StopReasonCode reason_code = 1;
bool ObjectStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
::jmc_auto::planning::StopReasonCode ObjectStop::reason_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStop.reason_code)
  return static_cast< ::jmc_auto::planning::StopReasonCode >(reason_code_);
}
void ObjectStop::set_reason_code(::jmc_auto::planning::StopReasonCode value) {
  assert(::jmc_auto::planning::StopReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectStop.reason_code)
}

// optional double distance_s = 2;
bool ObjectStop::has_distance_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectStop::set_has_distance_s() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectStop::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectStop::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
double ObjectStop::distance_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStop.distance_s)
  return distance_s_;
}
void ObjectStop::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectStop.distance_s)
}

// optional .jmc_auto.common.PointENU stop_point = 3;
bool ObjectStop::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectStop::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectStop::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectStop::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::jmc_auto::common::PointENU& ObjectStop::stop_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStop.stop_point)
  return stop_point_ != NULL ? *stop_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* ObjectStop::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectStop.stop_point)
  return stop_point_;
}
::jmc_auto::common::PointENU* ObjectStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectStop.stop_point)
  clear_has_stop_point();
  ::jmc_auto::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void ObjectStop::set_allocated_stop_point(::jmc_auto::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectStop.stop_point)
}

// optional double stop_heading = 4;
bool ObjectStop::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectStop::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectStop::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectStop::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
double ObjectStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStop.stop_heading)
  return stop_heading_;
}
void ObjectStop::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectStop.stop_heading)
}

// repeated string wait_for_obstacle = 5;
int ObjectStop::wait_for_obstacle_size() const {
  return wait_for_obstacle_.size();
}
void ObjectStop::clear_wait_for_obstacle() {
  wait_for_obstacle_.Clear();
}
const ::std::string& ObjectStop::wait_for_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Get(index);
}
::std::string* ObjectStop::mutable_wait_for_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Mutable(index);
}
void ObjectStop::set_wait_for_obstacle(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  wait_for_obstacle_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ObjectStop::set_wait_for_obstacle(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  wait_for_obstacle_.Mutable(index)->assign(std::move(value));
}
#endif
void ObjectStop::set_wait_for_obstacle(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  wait_for_obstacle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.ObjectStop.wait_for_obstacle)
}
void ObjectStop::set_wait_for_obstacle(int index, const char* value, size_t size) {
  wait_for_obstacle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.ObjectStop.wait_for_obstacle)
}
::std::string* ObjectStop::add_wait_for_obstacle() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_.Add();
}
void ObjectStop::add_wait_for_obstacle(const ::std::string& value) {
  wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ObjectStop.wait_for_obstacle)
}
#if LANG_CXX11
void ObjectStop::add_wait_for_obstacle(::std::string&& value) {
  wait_for_obstacle_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ObjectStop.wait_for_obstacle)
}
#endif
void ObjectStop::add_wait_for_obstacle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.planning.ObjectStop.wait_for_obstacle)
}
void ObjectStop::add_wait_for_obstacle(const char* value, size_t size) {
  wait_for_obstacle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.planning.ObjectStop.wait_for_obstacle)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjectStop::wait_for_obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  return wait_for_obstacle_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ObjectStop::mutable_wait_for_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ObjectStop.wait_for_obstacle)
  return &wait_for_obstacle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectNudge::kTypeFieldNumber;
const int ObjectNudge::kDistanceLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectNudge::ObjectNudge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectNudge)
}
ObjectNudge::ObjectNudge(const ObjectNudge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_l_, &from.distance_l_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&distance_l_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectNudge)
}

void ObjectNudge::SharedCtor() {
  _cached_size_ = 0;
  distance_l_ = 0;
  type_ = 1;
}

ObjectNudge::~ObjectNudge() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectNudge)
  SharedDtor();
}

void ObjectNudge::SharedDtor() {
}

void ObjectNudge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectNudge::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectNudge& ObjectNudge::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectNudge* ObjectNudge::New(::google::protobuf::Arena* arena) const {
  ObjectNudge* n = new ObjectNudge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectNudge::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectNudge)
  if (_has_bits_[0 / 32] & 3u) {
    distance_l_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectNudge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectNudge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ObjectNudge.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ObjectNudge_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::planning::ObjectNudge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_distance_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectNudge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectNudge)
  return false;
#undef DO_
}

void ObjectNudge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectNudge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ObjectNudge.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double distance_l = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectNudge)
}

::google::protobuf::uint8* ObjectNudge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectNudge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ObjectNudge.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double distance_l = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectNudge)
  return target;
}

size_t ObjectNudge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectNudge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double distance_l = 2;
    if (has_distance_l()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.planning.ObjectNudge.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectNudge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectNudge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectNudge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectNudge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectNudge)
    MergeFrom(*source);
  }
}

void ObjectNudge::MergeFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      distance_l_ = from.distance_l_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectNudge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectNudge::CopyFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNudge::IsInitialized() const {
  return true;
}

void ObjectNudge::Swap(ObjectNudge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectNudge::InternalSwap(ObjectNudge* other) {
  std::swap(distance_l_, other->distance_l_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectNudge::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectNudge

// optional .jmc_auto.planning.ObjectNudge.Type type = 1;
bool ObjectNudge::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectNudge::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectNudge::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectNudge::clear_type() {
  type_ = 1;
  clear_has_type();
}
::jmc_auto::planning::ObjectNudge_Type ObjectNudge::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectNudge.type)
  return static_cast< ::jmc_auto::planning::ObjectNudge_Type >(type_);
}
void ObjectNudge::set_type(::jmc_auto::planning::ObjectNudge_Type value) {
  assert(::jmc_auto::planning::ObjectNudge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectNudge.type)
}

// optional double distance_l = 2;
bool ObjectNudge::has_distance_l() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectNudge::set_has_distance_l() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectNudge::clear_has_distance_l() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectNudge::clear_distance_l() {
  distance_l_ = 0;
  clear_has_distance_l();
}
double ObjectNudge::distance_l() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectNudge.distance_l)
  return distance_l_;
}
void ObjectNudge::set_distance_l(double value) {
  set_has_distance_l();
  distance_l_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectNudge.distance_l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectYield::kDistanceSFieldNumber;
const int ObjectYield::kFencePointFieldNumber;
const int ObjectYield::kFenceHeadingFieldNumber;
const int ObjectYield::kTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectYield::ObjectYield()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectYield)
}
ObjectYield::ObjectYield(const ObjectYield& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence_point()) {
    fence_point_ = new ::jmc_auto::common::PointENU(*from.fence_point_);
  } else {
    fence_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&distance_s_) + sizeof(time_buffer_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectYield)
}

void ObjectYield::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fence_point_, 0, reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&fence_point_) + sizeof(time_buffer_));
}

ObjectYield::~ObjectYield() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectYield)
  SharedDtor();
}

void ObjectYield::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fence_point_;
  }
}

void ObjectYield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectYield::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectYield& ObjectYield::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectYield* ObjectYield::New(::google::protobuf::Arena* arena) const {
  ObjectYield* n = new ObjectYield;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectYield::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectYield)
  if (has_fence_point()) {
    GOOGLE_DCHECK(fence_point_ != NULL);
    fence_point_->::jmc_auto::common::PointENU::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&distance_s_, 0, reinterpret_cast<char*>(&time_buffer_) -
      reinterpret_cast<char*>(&distance_s_) + sizeof(time_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectYield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectYield)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU fence_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_fence_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectYield)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectYield)
  return false;
#undef DO_
}

void ObjectYield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectYield)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .jmc_auto.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectYield)
}

::google::protobuf::uint8* ObjectYield::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectYield)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .jmc_auto.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fence_point_, deterministic, target);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectYield)
  return target;
}

size_t ObjectYield::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectYield)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.common.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fence_point_);
    }

    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (has_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectYield::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectYield* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectYield>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectYield)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectYield)
    MergeFrom(*source);
  }
}

void ObjectYield::MergeFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fence_point()->::jmc_auto::common::PointENU::MergeFrom(from.fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_buffer_ = from.time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectYield::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectYield::CopyFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectYield::IsInitialized() const {
  return true;
}

void ObjectYield::Swap(ObjectYield* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectYield::InternalSwap(ObjectYield* other) {
  std::swap(fence_point_, other->fence_point_);
  std::swap(distance_s_, other->distance_s_);
  std::swap(fence_heading_, other->fence_heading_);
  std::swap(time_buffer_, other->time_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectYield::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectYield

// optional double distance_s = 1;
bool ObjectYield::has_distance_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectYield::set_has_distance_s() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectYield::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectYield::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
double ObjectYield::distance_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectYield.distance_s)
  return distance_s_;
}
void ObjectYield::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectYield.distance_s)
}

// optional .jmc_auto.common.PointENU fence_point = 2;
bool ObjectYield::has_fence_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectYield::set_has_fence_point() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectYield::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectYield::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_fence_point();
}
const ::jmc_auto::common::PointENU& ObjectYield::fence_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectYield.fence_point)
  return fence_point_ != NULL ? *fence_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* ObjectYield::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectYield.fence_point)
  return fence_point_;
}
::jmc_auto::common::PointENU* ObjectYield::release_fence_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectYield.fence_point)
  clear_has_fence_point();
  ::jmc_auto::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
void ObjectYield::set_allocated_fence_point(::jmc_auto::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectYield.fence_point)
}

// optional double fence_heading = 3;
bool ObjectYield::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectYield::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectYield::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectYield::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
double ObjectYield::fence_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectYield.fence_heading)
  return fence_heading_;
}
void ObjectYield::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectYield.fence_heading)
}

// optional double time_buffer = 4;
bool ObjectYield::has_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectYield::set_has_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectYield::clear_has_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectYield::clear_time_buffer() {
  time_buffer_ = 0;
  clear_has_time_buffer();
}
double ObjectYield::time_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectYield.time_buffer)
  return time_buffer_;
}
void ObjectYield::set_time_buffer(double value) {
  set_has_time_buffer();
  time_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectYield.time_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectFollow::kDistanceSFieldNumber;
const int ObjectFollow::kFencePointFieldNumber;
const int ObjectFollow::kFenceHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectFollow::ObjectFollow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectFollow)
}
ObjectFollow::ObjectFollow(const ObjectFollow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence_point()) {
    fence_point_ = new ::jmc_auto::common::PointENU(*from.fence_point_);
  } else {
    fence_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    reinterpret_cast<char*>(&fence_heading_) -
    reinterpret_cast<char*>(&distance_s_) + sizeof(fence_heading_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectFollow)
}

void ObjectFollow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fence_point_, 0, reinterpret_cast<char*>(&fence_heading_) -
    reinterpret_cast<char*>(&fence_point_) + sizeof(fence_heading_));
}

ObjectFollow::~ObjectFollow() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectFollow)
  SharedDtor();
}

void ObjectFollow::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fence_point_;
  }
}

void ObjectFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectFollow::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectFollow& ObjectFollow::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectFollow* ObjectFollow::New(::google::protobuf::Arena* arena) const {
  ObjectFollow* n = new ObjectFollow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectFollow)
  if (has_fence_point()) {
    GOOGLE_DCHECK(fence_point_ != NULL);
    fence_point_->::jmc_auto::common::PointENU::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&distance_s_, 0, reinterpret_cast<char*>(&fence_heading_) -
      reinterpret_cast<char*>(&distance_s_) + sizeof(fence_heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectFollow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU fence_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_fence_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectFollow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectFollow)
  return false;
#undef DO_
}

void ObjectFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectFollow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .jmc_auto.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectFollow)
}

::google::protobuf::uint8* ObjectFollow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectFollow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .jmc_auto.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fence_point_, deterministic, target);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectFollow)
  return target;
}

size_t ObjectFollow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectFollow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.common.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fence_point_);
    }

    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectFollow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectFollow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectFollow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectFollow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectFollow)
    MergeFrom(*source);
  }
}

void ObjectFollow::MergeFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fence_point()->::jmc_auto::common::PointENU::MergeFrom(from.fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectFollow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFollow::CopyFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFollow::IsInitialized() const {
  return true;
}

void ObjectFollow::Swap(ObjectFollow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectFollow::InternalSwap(ObjectFollow* other) {
  std::swap(fence_point_, other->fence_point_);
  std::swap(distance_s_, other->distance_s_);
  std::swap(fence_heading_, other->fence_heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectFollow::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectFollow

// optional double distance_s = 1;
bool ObjectFollow::has_distance_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectFollow::set_has_distance_s() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectFollow::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectFollow::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
double ObjectFollow::distance_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectFollow.distance_s)
  return distance_s_;
}
void ObjectFollow::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectFollow.distance_s)
}

// optional .jmc_auto.common.PointENU fence_point = 2;
bool ObjectFollow::has_fence_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectFollow::set_has_fence_point() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectFollow::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectFollow::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_fence_point();
}
const ::jmc_auto::common::PointENU& ObjectFollow::fence_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectFollow.fence_point)
  return fence_point_ != NULL ? *fence_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* ObjectFollow::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectFollow.fence_point)
  return fence_point_;
}
::jmc_auto::common::PointENU* ObjectFollow::release_fence_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectFollow.fence_point)
  clear_has_fence_point();
  ::jmc_auto::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
void ObjectFollow::set_allocated_fence_point(::jmc_auto::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectFollow.fence_point)
}

// optional double fence_heading = 3;
bool ObjectFollow::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectFollow::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectFollow::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectFollow::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
double ObjectFollow::fence_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectFollow.fence_heading)
  return fence_heading_;
}
void ObjectFollow::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectFollow.fence_heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectOvertake::kDistanceSFieldNumber;
const int ObjectOvertake::kFencePointFieldNumber;
const int ObjectOvertake::kFenceHeadingFieldNumber;
const int ObjectOvertake::kTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectOvertake::ObjectOvertake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectOvertake)
}
ObjectOvertake::ObjectOvertake(const ObjectOvertake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence_point()) {
    fence_point_ = new ::jmc_auto::common::PointENU(*from.fence_point_);
  } else {
    fence_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&distance_s_) + sizeof(time_buffer_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectOvertake)
}

void ObjectOvertake::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fence_point_, 0, reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&fence_point_) + sizeof(time_buffer_));
}

ObjectOvertake::~ObjectOvertake() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectOvertake)
  SharedDtor();
}

void ObjectOvertake::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fence_point_;
  }
}

void ObjectOvertake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectOvertake::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectOvertake& ObjectOvertake::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectOvertake* ObjectOvertake::New(::google::protobuf::Arena* arena) const {
  ObjectOvertake* n = new ObjectOvertake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectOvertake::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectOvertake)
  if (has_fence_point()) {
    GOOGLE_DCHECK(fence_point_ != NULL);
    fence_point_->::jmc_auto::common::PointENU::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&distance_s_, 0, reinterpret_cast<char*>(&time_buffer_) -
      reinterpret_cast<char*>(&distance_s_) + sizeof(time_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectOvertake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectOvertake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU fence_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_fence_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectOvertake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectOvertake)
  return false;
#undef DO_
}

void ObjectOvertake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectOvertake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .jmc_auto.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectOvertake)
}

::google::protobuf::uint8* ObjectOvertake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectOvertake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .jmc_auto.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fence_point_, deterministic, target);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectOvertake)
  return target;
}

size_t ObjectOvertake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectOvertake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.common.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fence_point_);
    }

    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (has_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectOvertake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOvertake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectOvertake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectOvertake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectOvertake)
    MergeFrom(*source);
  }
}

void ObjectOvertake::MergeFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fence_point()->::jmc_auto::common::PointENU::MergeFrom(from.fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_buffer_ = from.time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectOvertake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOvertake::CopyFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOvertake::IsInitialized() const {
  return true;
}

void ObjectOvertake::Swap(ObjectOvertake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectOvertake::InternalSwap(ObjectOvertake* other) {
  std::swap(fence_point_, other->fence_point_);
  std::swap(distance_s_, other->distance_s_);
  std::swap(fence_heading_, other->fence_heading_);
  std::swap(time_buffer_, other->time_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectOvertake::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectOvertake

// optional double distance_s = 1;
bool ObjectOvertake::has_distance_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectOvertake::set_has_distance_s() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectOvertake::clear_has_distance_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectOvertake::clear_distance_s() {
  distance_s_ = 0;
  clear_has_distance_s();
}
double ObjectOvertake::distance_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectOvertake.distance_s)
  return distance_s_;
}
void ObjectOvertake::set_distance_s(double value) {
  set_has_distance_s();
  distance_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectOvertake.distance_s)
}

// optional .jmc_auto.common.PointENU fence_point = 2;
bool ObjectOvertake::has_fence_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectOvertake::set_has_fence_point() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectOvertake::clear_has_fence_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectOvertake::clear_fence_point() {
  if (fence_point_ != NULL) fence_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_fence_point();
}
const ::jmc_auto::common::PointENU& ObjectOvertake::fence_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectOvertake.fence_point)
  return fence_point_ != NULL ? *fence_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* ObjectOvertake::mutable_fence_point() {
  set_has_fence_point();
  if (fence_point_ == NULL) {
    fence_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectOvertake.fence_point)
  return fence_point_;
}
::jmc_auto::common::PointENU* ObjectOvertake::release_fence_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectOvertake.fence_point)
  clear_has_fence_point();
  ::jmc_auto::common::PointENU* temp = fence_point_;
  fence_point_ = NULL;
  return temp;
}
void ObjectOvertake::set_allocated_fence_point(::jmc_auto::common::PointENU* fence_point) {
  delete fence_point_;
  fence_point_ = fence_point;
  if (fence_point) {
    set_has_fence_point();
  } else {
    clear_has_fence_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectOvertake.fence_point)
}

// optional double fence_heading = 3;
bool ObjectOvertake::has_fence_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectOvertake::set_has_fence_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectOvertake::clear_has_fence_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectOvertake::clear_fence_heading() {
  fence_heading_ = 0;
  clear_has_fence_heading();
}
double ObjectOvertake::fence_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectOvertake.fence_heading)
  return fence_heading_;
}
void ObjectOvertake::set_fence_heading(double value) {
  set_has_fence_heading();
  fence_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectOvertake.fence_heading)
}

// optional double time_buffer = 4;
bool ObjectOvertake::has_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectOvertake::set_has_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectOvertake::clear_has_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectOvertake::clear_time_buffer() {
  time_buffer_ = 0;
  clear_has_time_buffer();
}
double ObjectOvertake::time_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectOvertake.time_buffer)
  return time_buffer_;
}
void ObjectOvertake::set_time_buffer(double value) {
  set_has_time_buffer();
  time_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectOvertake.time_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectSidePass::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectSidePass::ObjectSidePass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectSidePass)
}
ObjectSidePass::ObjectSidePass(const ObjectSidePass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectSidePass)
}

void ObjectSidePass::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
}

ObjectSidePass::~ObjectSidePass() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectSidePass)
  SharedDtor();
}

void ObjectSidePass::SharedDtor() {
}

void ObjectSidePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectSidePass::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectSidePass& ObjectSidePass::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectSidePass* ObjectSidePass::New(::google::protobuf::Arena* arena) const {
  ObjectSidePass* n = new ObjectSidePass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectSidePass::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectSidePass)
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectSidePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectSidePass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ObjectSidePass.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ObjectSidePass_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::planning::ObjectSidePass_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectSidePass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectSidePass)
  return false;
#undef DO_
}

void ObjectSidePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectSidePass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ObjectSidePass.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectSidePass)
}

::google::protobuf::uint8* ObjectSidePass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectSidePass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ObjectSidePass.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectSidePass)
  return target;
}

size_t ObjectSidePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectSidePass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.planning.ObjectSidePass.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectSidePass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSidePass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectSidePass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectSidePass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectSidePass)
    MergeFrom(*source);
  }
}

void ObjectSidePass::MergeFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ObjectSidePass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSidePass::CopyFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSidePass::IsInitialized() const {
  return true;
}

void ObjectSidePass::Swap(ObjectSidePass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectSidePass::InternalSwap(ObjectSidePass* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectSidePass::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectSidePass

// optional .jmc_auto.planning.ObjectSidePass.Type type = 1;
bool ObjectSidePass::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectSidePass::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectSidePass::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectSidePass::clear_type() {
  type_ = 1;
  clear_has_type();
}
::jmc_auto::planning::ObjectSidePass_Type ObjectSidePass::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectSidePass.type)
  return static_cast< ::jmc_auto::planning::ObjectSidePass_Type >(type_);
}
void ObjectSidePass::set_type(::jmc_auto::planning::ObjectSidePass_Type value) {
  assert(::jmc_auto::planning::ObjectSidePass_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectSidePass.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectAvoid::ObjectAvoid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectAvoid)
}
ObjectAvoid::ObjectAvoid(const ObjectAvoid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectAvoid)
}

void ObjectAvoid::SharedCtor() {
  _cached_size_ = 0;
}

ObjectAvoid::~ObjectAvoid() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectAvoid)
  SharedDtor();
}

void ObjectAvoid::SharedDtor() {
}

void ObjectAvoid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAvoid::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectAvoid& ObjectAvoid::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectAvoid* ObjectAvoid::New(::google::protobuf::Arena* arena) const {
  ObjectAvoid* n = new ObjectAvoid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectAvoid::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectAvoid)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectAvoid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectAvoid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectAvoid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectAvoid)
  return false;
#undef DO_
}

void ObjectAvoid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectAvoid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectAvoid)
}

::google::protobuf::uint8* ObjectAvoid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectAvoid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectAvoid)
  return target;
}

size_t ObjectAvoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectAvoid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAvoid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectAvoid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectAvoid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectAvoid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectAvoid)
    MergeFrom(*source);
  }
}

void ObjectAvoid::MergeFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectAvoid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAvoid::CopyFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAvoid::IsInitialized() const {
  return true;
}

void ObjectAvoid::Swap(ObjectAvoid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectAvoid::InternalSwap(ObjectAvoid* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectAvoid::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectAvoid

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectStatus::kMotionTypeFieldNumber;
const int ObjectStatus::kDecisionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectStatus::ObjectStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectStatus)
}
ObjectStatus::ObjectStatus(const ObjectStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_motion_type()) {
    motion_type_ = new ::jmc_auto::planning::ObjectMotionType(*from.motion_type_);
  } else {
    motion_type_ = NULL;
  }
  if (from.has_decision_type()) {
    decision_type_ = new ::jmc_auto::planning::ObjectDecisionType(*from.decision_type_);
  } else {
    decision_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectStatus)
}

void ObjectStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&motion_type_, 0, reinterpret_cast<char*>(&decision_type_) -
    reinterpret_cast<char*>(&motion_type_) + sizeof(decision_type_));
}

ObjectStatus::~ObjectStatus() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectStatus)
  SharedDtor();
}

void ObjectStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete motion_type_;
  }
  if (this != internal_default_instance()) {
    delete decision_type_;
  }
}

void ObjectStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectStatus::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectStatus& ObjectStatus::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectStatus* ObjectStatus::New(::google::protobuf::Arena* arena) const {
  ObjectStatus* n = new ObjectStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_motion_type()) {
      GOOGLE_DCHECK(motion_type_ != NULL);
      motion_type_->::jmc_auto::planning::ObjectMotionType::Clear();
    }
    if (has_decision_type()) {
      GOOGLE_DCHECK(decision_type_ != NULL);
      decision_type_->::jmc_auto::planning::ObjectDecisionType::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ObjectMotionType motion_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectDecisionType decision_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectStatus)
  return false;
#undef DO_
}

void ObjectStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ObjectMotionType motion_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->motion_type_, output);
  }

  // optional .jmc_auto.planning.ObjectDecisionType decision_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->decision_type_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectStatus)
}

::google::protobuf::uint8* ObjectStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.ObjectMotionType motion_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->motion_type_, deterministic, target);
  }

  // optional .jmc_auto.planning.ObjectDecisionType decision_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->decision_type_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectStatus)
  return target;
}

size_t ObjectStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.ObjectMotionType motion_type = 1;
    if (has_motion_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->motion_type_);
    }

    // optional .jmc_auto.planning.ObjectDecisionType decision_type = 2;
    if (has_decision_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_type_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectStatus)
    MergeFrom(*source);
  }
}

void ObjectStatus::MergeFrom(const ObjectStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_motion_type()->::jmc_auto::planning::ObjectMotionType::MergeFrom(from.motion_type());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_decision_type()->::jmc_auto::planning::ObjectDecisionType::MergeFrom(from.decision_type());
    }
  }
}

void ObjectStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStatus::CopyFrom(const ObjectStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStatus::IsInitialized() const {
  return true;
}

void ObjectStatus::Swap(ObjectStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectStatus::InternalSwap(ObjectStatus* other) {
  std::swap(motion_type_, other->motion_type_);
  std::swap(decision_type_, other->decision_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectStatus::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectStatus

// optional .jmc_auto.planning.ObjectMotionType motion_type = 1;
bool ObjectStatus::has_motion_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectStatus::set_has_motion_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectStatus::clear_has_motion_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectStatus::clear_motion_type() {
  if (motion_type_ != NULL) motion_type_->::jmc_auto::planning::ObjectMotionType::Clear();
  clear_has_motion_type();
}
const ::jmc_auto::planning::ObjectMotionType& ObjectStatus::motion_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStatus.motion_type)
  return motion_type_ != NULL ? *motion_type_
                         : *::jmc_auto::planning::ObjectMotionType::internal_default_instance();
}
::jmc_auto::planning::ObjectMotionType* ObjectStatus::mutable_motion_type() {
  set_has_motion_type();
  if (motion_type_ == NULL) {
    motion_type_ = new ::jmc_auto::planning::ObjectMotionType;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectStatus.motion_type)
  return motion_type_;
}
::jmc_auto::planning::ObjectMotionType* ObjectStatus::release_motion_type() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectStatus.motion_type)
  clear_has_motion_type();
  ::jmc_auto::planning::ObjectMotionType* temp = motion_type_;
  motion_type_ = NULL;
  return temp;
}
void ObjectStatus::set_allocated_motion_type(::jmc_auto::planning::ObjectMotionType* motion_type) {
  delete motion_type_;
  motion_type_ = motion_type;
  if (motion_type) {
    set_has_motion_type();
  } else {
    clear_has_motion_type();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectStatus.motion_type)
}

// optional .jmc_auto.planning.ObjectDecisionType decision_type = 2;
bool ObjectStatus::has_decision_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectStatus::set_has_decision_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectStatus::clear_has_decision_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectStatus::clear_decision_type() {
  if (decision_type_ != NULL) decision_type_->::jmc_auto::planning::ObjectDecisionType::Clear();
  clear_has_decision_type();
}
const ::jmc_auto::planning::ObjectDecisionType& ObjectStatus::decision_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectStatus.decision_type)
  return decision_type_ != NULL ? *decision_type_
                         : *::jmc_auto::planning::ObjectDecisionType::internal_default_instance();
}
::jmc_auto::planning::ObjectDecisionType* ObjectStatus::mutable_decision_type() {
  set_has_decision_type();
  if (decision_type_ == NULL) {
    decision_type_ = new ::jmc_auto::planning::ObjectDecisionType;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectStatus.decision_type)
  return decision_type_;
}
::jmc_auto::planning::ObjectDecisionType* ObjectStatus::release_decision_type() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectStatus.decision_type)
  clear_has_decision_type();
  ::jmc_auto::planning::ObjectDecisionType* temp = decision_type_;
  decision_type_ = NULL;
  return temp;
}
void ObjectStatus::set_allocated_decision_type(::jmc_auto::planning::ObjectDecisionType* decision_type) {
  delete decision_type_;
  decision_type_ = decision_type;
  if (decision_type) {
    set_has_decision_type();
  } else {
    clear_has_decision_type();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectStatus.decision_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectStatic::ObjectStatic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectStatic)
}
ObjectStatic::ObjectStatic(const ObjectStatic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectStatic)
}

void ObjectStatic::SharedCtor() {
  _cached_size_ = 0;
}

ObjectStatic::~ObjectStatic() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectStatic)
  SharedDtor();
}

void ObjectStatic::SharedDtor() {
}

void ObjectStatic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectStatic::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectStatic& ObjectStatic::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectStatic* ObjectStatic::New(::google::protobuf::Arena* arena) const {
  ObjectStatic* n = new ObjectStatic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectStatic)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectStatic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectStatic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectStatic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectStatic)
  return false;
#undef DO_
}

void ObjectStatic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectStatic)
}

::google::protobuf::uint8* ObjectStatic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectStatic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectStatic)
  return target;
}

size_t ObjectStatic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectStatic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectStatic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectStatic)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectStatic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectStatic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectStatic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectStatic)
    MergeFrom(*source);
  }
}

void ObjectStatic::MergeFrom(const ObjectStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectStatic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectStatic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStatic::CopyFrom(const ObjectStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStatic::IsInitialized() const {
  return true;
}

void ObjectStatic::Swap(ObjectStatic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectStatic::InternalSwap(ObjectStatic* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectStatic::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectStatic

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDynamic::ObjectDynamic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectDynamic)
}
ObjectDynamic::ObjectDynamic(const ObjectDynamic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectDynamic)
}

void ObjectDynamic::SharedCtor() {
  _cached_size_ = 0;
}

ObjectDynamic::~ObjectDynamic() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectDynamic)
  SharedDtor();
}

void ObjectDynamic::SharedDtor() {
}

void ObjectDynamic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDynamic::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDynamic& ObjectDynamic::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectDynamic* ObjectDynamic::New(::google::protobuf::Arena* arena) const {
  ObjectDynamic* n = new ObjectDynamic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectDynamic)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDynamic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectDynamic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectDynamic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectDynamic)
  return false;
#undef DO_
}

void ObjectDynamic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectDynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectDynamic)
}

::google::protobuf::uint8* ObjectDynamic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectDynamic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectDynamic)
  return target;
}

size_t ObjectDynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectDynamic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDynamic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectDynamic)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDynamic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDynamic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectDynamic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectDynamic)
    MergeFrom(*source);
  }
}

void ObjectDynamic::MergeFrom(const ObjectDynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectDynamic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectDynamic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectDynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDynamic::CopyFrom(const ObjectDynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectDynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDynamic::IsInitialized() const {
  return true;
}

void ObjectDynamic::Swap(ObjectDynamic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDynamic::InternalSwap(ObjectDynamic* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDynamic::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDynamic

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectMotionType::kStaticFieldNumber;
const int ObjectMotionType::kDynamicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectMotionType::ObjectMotionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectMotionType)
}
ObjectMotionType::ObjectMotionType(const ObjectMotionType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_motion_tag();
  switch (from.motion_tag_case()) {
    case kStatic: {
      mutable_static_()->::jmc_auto::planning::ObjectStatic::MergeFrom(from.static_());
      break;
    }
    case kDynamic: {
      mutable_dynamic()->::jmc_auto::planning::ObjectDynamic::MergeFrom(from.dynamic());
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectMotionType)
}

void ObjectMotionType::SharedCtor() {
  _cached_size_ = 0;
  clear_has_motion_tag();
}

ObjectMotionType::~ObjectMotionType() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectMotionType)
  SharedDtor();
}

void ObjectMotionType::SharedDtor() {
  if (has_motion_tag()) {
    clear_motion_tag();
  }
}

void ObjectMotionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectMotionType::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectMotionType& ObjectMotionType::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectMotionType* ObjectMotionType::New(::google::protobuf::Arena* arena) const {
  ObjectMotionType* n = new ObjectMotionType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectMotionType::clear_motion_tag() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.planning.ObjectMotionType)
  switch (motion_tag_case()) {
    case kStatic: {
      delete motion_tag_.static__;
      break;
    }
    case kDynamic: {
      delete motion_tag_.dynamic_;
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MOTION_TAG_NOT_SET;
}


void ObjectMotionType::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectMotionType)
  clear_motion_tag();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectMotionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectMotionType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ObjectStatic static = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectDynamic dynamic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectMotionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectMotionType)
  return false;
#undef DO_
}

void ObjectMotionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectMotionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (motion_tag_case()) {
    case kStatic:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *motion_tag_.static__, output);
      break;
    case kDynamic:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *motion_tag_.dynamic_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectMotionType)
}

::google::protobuf::uint8* ObjectMotionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectMotionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (motion_tag_case()) {
    case kStatic:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *motion_tag_.static__, deterministic, target);
      break;
    case kDynamic:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *motion_tag_.dynamic_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectMotionType)
  return target;
}

size_t ObjectMotionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectMotionType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (motion_tag_case()) {
    // optional .jmc_auto.planning.ObjectStatic static = 1;
    case kStatic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *motion_tag_.static__);
      break;
    }
    // optional .jmc_auto.planning.ObjectDynamic dynamic = 2;
    case kDynamic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *motion_tag_.dynamic_);
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectMotionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectMotionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectMotionType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectMotionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectMotionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectMotionType)
    MergeFrom(*source);
  }
}

void ObjectMotionType::MergeFrom(const ObjectMotionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectMotionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.motion_tag_case()) {
    case kStatic: {
      mutable_static_()->::jmc_auto::planning::ObjectStatic::MergeFrom(from.static_());
      break;
    }
    case kDynamic: {
      mutable_dynamic()->::jmc_auto::planning::ObjectDynamic::MergeFrom(from.dynamic());
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
}

void ObjectMotionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectMotionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectMotionType::CopyFrom(const ObjectMotionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectMotionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectMotionType::IsInitialized() const {
  return true;
}

void ObjectMotionType::Swap(ObjectMotionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectMotionType::InternalSwap(ObjectMotionType* other) {
  std::swap(motion_tag_, other->motion_tag_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectMotionType::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectMotionType

// optional .jmc_auto.planning.ObjectStatic static = 1;
bool ObjectMotionType::has_static_() const {
  return motion_tag_case() == kStatic;
}
void ObjectMotionType::set_has_static_() {
  _oneof_case_[0] = kStatic;
}
void ObjectMotionType::clear_static_() {
  if (has_static_()) {
    delete motion_tag_.static__;
    clear_has_motion_tag();
  }
}
 const ::jmc_auto::planning::ObjectStatic& ObjectMotionType::static_() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectMotionType.static)
  return has_static_()
      ? *motion_tag_.static__
      : ::jmc_auto::planning::ObjectStatic::default_instance();
}
::jmc_auto::planning::ObjectStatic* ObjectMotionType::mutable_static_() {
  if (!has_static_()) {
    clear_motion_tag();
    set_has_static_();
    motion_tag_.static__ = new ::jmc_auto::planning::ObjectStatic;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectMotionType.static)
  return motion_tag_.static__;
}
::jmc_auto::planning::ObjectStatic* ObjectMotionType::release_static_() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectMotionType.static)
  if (has_static_()) {
    clear_has_motion_tag();
    ::jmc_auto::planning::ObjectStatic* temp = motion_tag_.static__;
    motion_tag_.static__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectMotionType::set_allocated_static_(::jmc_auto::planning::ObjectStatic* static_) {
  clear_motion_tag();
  if (static_) {
    set_has_static_();
    motion_tag_.static__ = static_;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectMotionType.static)
}

// optional .jmc_auto.planning.ObjectDynamic dynamic = 2;
bool ObjectMotionType::has_dynamic() const {
  return motion_tag_case() == kDynamic;
}
void ObjectMotionType::set_has_dynamic() {
  _oneof_case_[0] = kDynamic;
}
void ObjectMotionType::clear_dynamic() {
  if (has_dynamic()) {
    delete motion_tag_.dynamic_;
    clear_has_motion_tag();
  }
}
 const ::jmc_auto::planning::ObjectDynamic& ObjectMotionType::dynamic() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectMotionType.dynamic)
  return has_dynamic()
      ? *motion_tag_.dynamic_
      : ::jmc_auto::planning::ObjectDynamic::default_instance();
}
::jmc_auto::planning::ObjectDynamic* ObjectMotionType::mutable_dynamic() {
  if (!has_dynamic()) {
    clear_motion_tag();
    set_has_dynamic();
    motion_tag_.dynamic_ = new ::jmc_auto::planning::ObjectDynamic;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectMotionType.dynamic)
  return motion_tag_.dynamic_;
}
::jmc_auto::planning::ObjectDynamic* ObjectMotionType::release_dynamic() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectMotionType.dynamic)
  if (has_dynamic()) {
    clear_has_motion_tag();
    ::jmc_auto::planning::ObjectDynamic* temp = motion_tag_.dynamic_;
    motion_tag_.dynamic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectMotionType::set_allocated_dynamic(::jmc_auto::planning::ObjectDynamic* dynamic) {
  clear_motion_tag();
  if (dynamic) {
    set_has_dynamic();
    motion_tag_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectMotionType.dynamic)
}

bool ObjectMotionType::has_motion_tag() const {
  return motion_tag_case() != MOTION_TAG_NOT_SET;
}
void ObjectMotionType::clear_has_motion_tag() {
  _oneof_case_[0] = MOTION_TAG_NOT_SET;
}
ObjectMotionType::MotionTagCase ObjectMotionType::motion_tag_case() const {
  return ObjectMotionType::MotionTagCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisionType::kIgnoreFieldNumber;
const int ObjectDecisionType::kStopFieldNumber;
const int ObjectDecisionType::kFollowFieldNumber;
const int ObjectDecisionType::kYieldFieldNumber;
const int ObjectDecisionType::kOvertakeFieldNumber;
const int ObjectDecisionType::kNudgeFieldNumber;
const int ObjectDecisionType::kAvoidFieldNumber;
const int ObjectDecisionType::kSidePassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisionType::ObjectDecisionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectDecisionType)
}
ObjectDecisionType::ObjectDecisionType(const ObjectDecisionType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_object_tag();
  switch (from.object_tag_case()) {
    case kIgnore: {
      mutable_ignore()->::jmc_auto::planning::ObjectIgnore::MergeFrom(from.ignore());
      break;
    }
    case kStop: {
      mutable_stop()->::jmc_auto::planning::ObjectStop::MergeFrom(from.stop());
      break;
    }
    case kFollow: {
      mutable_follow()->::jmc_auto::planning::ObjectFollow::MergeFrom(from.follow());
      break;
    }
    case kYield: {
      mutable_yield()->::jmc_auto::planning::ObjectYield::MergeFrom(from.yield());
      break;
    }
    case kOvertake: {
      mutable_overtake()->::jmc_auto::planning::ObjectOvertake::MergeFrom(from.overtake());
      break;
    }
    case kNudge: {
      mutable_nudge()->::jmc_auto::planning::ObjectNudge::MergeFrom(from.nudge());
      break;
    }
    case kAvoid: {
      mutable_avoid()->::jmc_auto::planning::ObjectAvoid::MergeFrom(from.avoid());
      break;
    }
    case kSidePass: {
      mutable_side_pass()->::jmc_auto::planning::ObjectSidePass::MergeFrom(from.side_pass());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectDecisionType)
}

void ObjectDecisionType::SharedCtor() {
  _cached_size_ = 0;
  clear_has_object_tag();
}

ObjectDecisionType::~ObjectDecisionType() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectDecisionType)
  SharedDtor();
}

void ObjectDecisionType::SharedDtor() {
  if (has_object_tag()) {
    clear_object_tag();
  }
}

void ObjectDecisionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisionType::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDecisionType& ObjectDecisionType::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectDecisionType* ObjectDecisionType::New(::google::protobuf::Arena* arena) const {
  ObjectDecisionType* n = new ObjectDecisionType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisionType::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.planning.ObjectDecisionType)
  switch (object_tag_case()) {
    case kIgnore: {
      delete object_tag_.ignore_;
      break;
    }
    case kStop: {
      delete object_tag_.stop_;
      break;
    }
    case kFollow: {
      delete object_tag_.follow_;
      break;
    }
    case kYield: {
      delete object_tag_.yield_;
      break;
    }
    case kOvertake: {
      delete object_tag_.overtake_;
      break;
    }
    case kNudge: {
      delete object_tag_.nudge_;
      break;
    }
    case kAvoid: {
      delete object_tag_.avoid_;
      break;
    }
    case kSidePass: {
      delete object_tag_.side_pass_;
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void ObjectDecisionType::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectDecisionType)
  clear_object_tag();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDecisionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectDecisionType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.ObjectIgnore ignore = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ignore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectStop stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectFollow follow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_follow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectYield yield = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectOvertake overtake = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_overtake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectNudge nudge = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nudge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectAvoid avoid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectSidePass side_pass = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_side_pass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectDecisionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectDecisionType)
  return false;
#undef DO_
}

void ObjectDecisionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectDecisionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (object_tag_case()) {
    case kIgnore:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *object_tag_.ignore_, output);
      break;
    case kStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *object_tag_.stop_, output);
      break;
    case kFollow:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *object_tag_.follow_, output);
      break;
    case kYield:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *object_tag_.yield_, output);
      break;
    case kOvertake:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *object_tag_.overtake_, output);
      break;
    case kNudge:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *object_tag_.nudge_, output);
      break;
    case kAvoid:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *object_tag_.avoid_, output);
      break;
    case kSidePass:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *object_tag_.side_pass_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectDecisionType)
}

::google::protobuf::uint8* ObjectDecisionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectDecisionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (object_tag_case()) {
    case kIgnore:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *object_tag_.ignore_, deterministic, target);
      break;
    case kStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *object_tag_.stop_, deterministic, target);
      break;
    case kFollow:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *object_tag_.follow_, deterministic, target);
      break;
    case kYield:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *object_tag_.yield_, deterministic, target);
      break;
    case kOvertake:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *object_tag_.overtake_, deterministic, target);
      break;
    case kNudge:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *object_tag_.nudge_, deterministic, target);
      break;
    case kAvoid:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *object_tag_.avoid_, deterministic, target);
      break;
    case kSidePass:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *object_tag_.side_pass_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectDecisionType)
  return target;
}

size_t ObjectDecisionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectDecisionType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (object_tag_case()) {
    // optional .jmc_auto.planning.ObjectIgnore ignore = 1;
    case kIgnore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.ignore_);
      break;
    }
    // optional .jmc_auto.planning.ObjectStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.stop_);
      break;
    }
    // optional .jmc_auto.planning.ObjectFollow follow = 3;
    case kFollow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.follow_);
      break;
    }
    // optional .jmc_auto.planning.ObjectYield yield = 4;
    case kYield: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.yield_);
      break;
    }
    // optional .jmc_auto.planning.ObjectOvertake overtake = 5;
    case kOvertake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.overtake_);
      break;
    }
    // optional .jmc_auto.planning.ObjectNudge nudge = 6;
    case kNudge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.nudge_);
      break;
    }
    // optional .jmc_auto.planning.ObjectAvoid avoid = 7;
    case kAvoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.avoid_);
      break;
    }
    // optional .jmc_auto.planning.ObjectSidePass side_pass = 8;
    case kSidePass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *object_tag_.side_pass_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecisionType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectDecisionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectDecisionType)
    MergeFrom(*source);
  }
}

void ObjectDecisionType::MergeFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.object_tag_case()) {
    case kIgnore: {
      mutable_ignore()->::jmc_auto::planning::ObjectIgnore::MergeFrom(from.ignore());
      break;
    }
    case kStop: {
      mutable_stop()->::jmc_auto::planning::ObjectStop::MergeFrom(from.stop());
      break;
    }
    case kFollow: {
      mutable_follow()->::jmc_auto::planning::ObjectFollow::MergeFrom(from.follow());
      break;
    }
    case kYield: {
      mutable_yield()->::jmc_auto::planning::ObjectYield::MergeFrom(from.yield());
      break;
    }
    case kOvertake: {
      mutable_overtake()->::jmc_auto::planning::ObjectOvertake::MergeFrom(from.overtake());
      break;
    }
    case kNudge: {
      mutable_nudge()->::jmc_auto::planning::ObjectNudge::MergeFrom(from.nudge());
      break;
    }
    case kAvoid: {
      mutable_avoid()->::jmc_auto::planning::ObjectAvoid::MergeFrom(from.avoid());
      break;
    }
    case kSidePass: {
      mutable_side_pass()->::jmc_auto::planning::ObjectSidePass::MergeFrom(from.side_pass());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
}

void ObjectDecisionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisionType::CopyFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisionType::IsInitialized() const {
  return true;
}

void ObjectDecisionType::Swap(ObjectDecisionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisionType::InternalSwap(ObjectDecisionType* other) {
  std::swap(object_tag_, other->object_tag_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisionType::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecisionType

// optional .jmc_auto.planning.ObjectIgnore ignore = 1;
bool ObjectDecisionType::has_ignore() const {
  return object_tag_case() == kIgnore;
}
void ObjectDecisionType::set_has_ignore() {
  _oneof_case_[0] = kIgnore;
}
void ObjectDecisionType::clear_ignore() {
  if (has_ignore()) {
    delete object_tag_.ignore_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectIgnore& ObjectDecisionType::ignore() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.ignore)
  return has_ignore()
      ? *object_tag_.ignore_
      : ::jmc_auto::planning::ObjectIgnore::default_instance();
}
::jmc_auto::planning::ObjectIgnore* ObjectDecisionType::mutable_ignore() {
  if (!has_ignore()) {
    clear_object_tag();
    set_has_ignore();
    object_tag_.ignore_ = new ::jmc_auto::planning::ObjectIgnore;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.ignore)
  return object_tag_.ignore_;
}
::jmc_auto::planning::ObjectIgnore* ObjectDecisionType::release_ignore() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.ignore)
  if (has_ignore()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectIgnore* temp = object_tag_.ignore_;
    object_tag_.ignore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_ignore(::jmc_auto::planning::ObjectIgnore* ignore) {
  clear_object_tag();
  if (ignore) {
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.ignore)
}

// optional .jmc_auto.planning.ObjectStop stop = 2;
bool ObjectDecisionType::has_stop() const {
  return object_tag_case() == kStop;
}
void ObjectDecisionType::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void ObjectDecisionType::clear_stop() {
  if (has_stop()) {
    delete object_tag_.stop_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectStop& ObjectDecisionType::stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.stop)
  return has_stop()
      ? *object_tag_.stop_
      : ::jmc_auto::planning::ObjectStop::default_instance();
}
::jmc_auto::planning::ObjectStop* ObjectDecisionType::mutable_stop() {
  if (!has_stop()) {
    clear_object_tag();
    set_has_stop();
    object_tag_.stop_ = new ::jmc_auto::planning::ObjectStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.stop)
  return object_tag_.stop_;
}
::jmc_auto::planning::ObjectStop* ObjectDecisionType::release_stop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.stop)
  if (has_stop()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectStop* temp = object_tag_.stop_;
    object_tag_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_stop(::jmc_auto::planning::ObjectStop* stop) {
  clear_object_tag();
  if (stop) {
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.stop)
}

// optional .jmc_auto.planning.ObjectFollow follow = 3;
bool ObjectDecisionType::has_follow() const {
  return object_tag_case() == kFollow;
}
void ObjectDecisionType::set_has_follow() {
  _oneof_case_[0] = kFollow;
}
void ObjectDecisionType::clear_follow() {
  if (has_follow()) {
    delete object_tag_.follow_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectFollow& ObjectDecisionType::follow() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.follow)
  return has_follow()
      ? *object_tag_.follow_
      : ::jmc_auto::planning::ObjectFollow::default_instance();
}
::jmc_auto::planning::ObjectFollow* ObjectDecisionType::mutable_follow() {
  if (!has_follow()) {
    clear_object_tag();
    set_has_follow();
    object_tag_.follow_ = new ::jmc_auto::planning::ObjectFollow;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.follow)
  return object_tag_.follow_;
}
::jmc_auto::planning::ObjectFollow* ObjectDecisionType::release_follow() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.follow)
  if (has_follow()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectFollow* temp = object_tag_.follow_;
    object_tag_.follow_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_follow(::jmc_auto::planning::ObjectFollow* follow) {
  clear_object_tag();
  if (follow) {
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.follow)
}

// optional .jmc_auto.planning.ObjectYield yield = 4;
bool ObjectDecisionType::has_yield() const {
  return object_tag_case() == kYield;
}
void ObjectDecisionType::set_has_yield() {
  _oneof_case_[0] = kYield;
}
void ObjectDecisionType::clear_yield() {
  if (has_yield()) {
    delete object_tag_.yield_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectYield& ObjectDecisionType::yield() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.yield)
  return has_yield()
      ? *object_tag_.yield_
      : ::jmc_auto::planning::ObjectYield::default_instance();
}
::jmc_auto::planning::ObjectYield* ObjectDecisionType::mutable_yield() {
  if (!has_yield()) {
    clear_object_tag();
    set_has_yield();
    object_tag_.yield_ = new ::jmc_auto::planning::ObjectYield;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.yield)
  return object_tag_.yield_;
}
::jmc_auto::planning::ObjectYield* ObjectDecisionType::release_yield() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.yield)
  if (has_yield()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectYield* temp = object_tag_.yield_;
    object_tag_.yield_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_yield(::jmc_auto::planning::ObjectYield* yield) {
  clear_object_tag();
  if (yield) {
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.yield)
}

// optional .jmc_auto.planning.ObjectOvertake overtake = 5;
bool ObjectDecisionType::has_overtake() const {
  return object_tag_case() == kOvertake;
}
void ObjectDecisionType::set_has_overtake() {
  _oneof_case_[0] = kOvertake;
}
void ObjectDecisionType::clear_overtake() {
  if (has_overtake()) {
    delete object_tag_.overtake_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectOvertake& ObjectDecisionType::overtake() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.overtake)
  return has_overtake()
      ? *object_tag_.overtake_
      : ::jmc_auto::planning::ObjectOvertake::default_instance();
}
::jmc_auto::planning::ObjectOvertake* ObjectDecisionType::mutable_overtake() {
  if (!has_overtake()) {
    clear_object_tag();
    set_has_overtake();
    object_tag_.overtake_ = new ::jmc_auto::planning::ObjectOvertake;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.overtake)
  return object_tag_.overtake_;
}
::jmc_auto::planning::ObjectOvertake* ObjectDecisionType::release_overtake() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.overtake)
  if (has_overtake()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectOvertake* temp = object_tag_.overtake_;
    object_tag_.overtake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_overtake(::jmc_auto::planning::ObjectOvertake* overtake) {
  clear_object_tag();
  if (overtake) {
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.overtake)
}

// optional .jmc_auto.planning.ObjectNudge nudge = 6;
bool ObjectDecisionType::has_nudge() const {
  return object_tag_case() == kNudge;
}
void ObjectDecisionType::set_has_nudge() {
  _oneof_case_[0] = kNudge;
}
void ObjectDecisionType::clear_nudge() {
  if (has_nudge()) {
    delete object_tag_.nudge_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectNudge& ObjectDecisionType::nudge() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.nudge)
  return has_nudge()
      ? *object_tag_.nudge_
      : ::jmc_auto::planning::ObjectNudge::default_instance();
}
::jmc_auto::planning::ObjectNudge* ObjectDecisionType::mutable_nudge() {
  if (!has_nudge()) {
    clear_object_tag();
    set_has_nudge();
    object_tag_.nudge_ = new ::jmc_auto::planning::ObjectNudge;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.nudge)
  return object_tag_.nudge_;
}
::jmc_auto::planning::ObjectNudge* ObjectDecisionType::release_nudge() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.nudge)
  if (has_nudge()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectNudge* temp = object_tag_.nudge_;
    object_tag_.nudge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_nudge(::jmc_auto::planning::ObjectNudge* nudge) {
  clear_object_tag();
  if (nudge) {
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.nudge)
}

// optional .jmc_auto.planning.ObjectAvoid avoid = 7;
bool ObjectDecisionType::has_avoid() const {
  return object_tag_case() == kAvoid;
}
void ObjectDecisionType::set_has_avoid() {
  _oneof_case_[0] = kAvoid;
}
void ObjectDecisionType::clear_avoid() {
  if (has_avoid()) {
    delete object_tag_.avoid_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectAvoid& ObjectDecisionType::avoid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.avoid)
  return has_avoid()
      ? *object_tag_.avoid_
      : ::jmc_auto::planning::ObjectAvoid::default_instance();
}
::jmc_auto::planning::ObjectAvoid* ObjectDecisionType::mutable_avoid() {
  if (!has_avoid()) {
    clear_object_tag();
    set_has_avoid();
    object_tag_.avoid_ = new ::jmc_auto::planning::ObjectAvoid;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.avoid)
  return object_tag_.avoid_;
}
::jmc_auto::planning::ObjectAvoid* ObjectDecisionType::release_avoid() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.avoid)
  if (has_avoid()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectAvoid* temp = object_tag_.avoid_;
    object_tag_.avoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_avoid(::jmc_auto::planning::ObjectAvoid* avoid) {
  clear_object_tag();
  if (avoid) {
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.avoid)
}

// optional .jmc_auto.planning.ObjectSidePass side_pass = 8;
bool ObjectDecisionType::has_side_pass() const {
  return object_tag_case() == kSidePass;
}
void ObjectDecisionType::set_has_side_pass() {
  _oneof_case_[0] = kSidePass;
}
void ObjectDecisionType::clear_side_pass() {
  if (has_side_pass()) {
    delete object_tag_.side_pass_;
    clear_has_object_tag();
  }
}
 const ::jmc_auto::planning::ObjectSidePass& ObjectDecisionType::side_pass() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisionType.side_pass)
  return has_side_pass()
      ? *object_tag_.side_pass_
      : ::jmc_auto::planning::ObjectSidePass::default_instance();
}
::jmc_auto::planning::ObjectSidePass* ObjectDecisionType::mutable_side_pass() {
  if (!has_side_pass()) {
    clear_object_tag();
    set_has_side_pass();
    object_tag_.side_pass_ = new ::jmc_auto::planning::ObjectSidePass;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisionType.side_pass)
  return object_tag_.side_pass_;
}
::jmc_auto::planning::ObjectSidePass* ObjectDecisionType::release_side_pass() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecisionType.side_pass)
  if (has_side_pass()) {
    clear_has_object_tag();
    ::jmc_auto::planning::ObjectSidePass* temp = object_tag_.side_pass_;
    object_tag_.side_pass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObjectDecisionType::set_allocated_side_pass(::jmc_auto::planning::ObjectSidePass* side_pass) {
  clear_object_tag();
  if (side_pass) {
    set_has_side_pass();
    object_tag_.side_pass_ = side_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecisionType.side_pass)
}

bool ObjectDecisionType::has_object_tag() const {
  return object_tag_case() != OBJECT_TAG_NOT_SET;
}
void ObjectDecisionType::clear_has_object_tag() {
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}
ObjectDecisionType::ObjectTagCase ObjectDecisionType::object_tag_case() const {
  return ObjectDecisionType::ObjectTagCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecision::kIdFieldNumber;
const int ObjectDecision::kPerceptionIdFieldNumber;
const int ObjectDecision::kObjectDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecision::ObjectDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectDecision)
}
ObjectDecision::ObjectDecision(const ObjectDecision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      object_decision_(from.object_decision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  perception_id_ = from.perception_id_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectDecision)
}

void ObjectDecision::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perception_id_ = 0;
}

ObjectDecision::~ObjectDecision() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectDecision)
  SharedDtor();
}

void ObjectDecision::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObjectDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecision::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDecision& ObjectDecision::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectDecision* ObjectDecision::New(::google::protobuf::Arena* arena) const {
  ObjectDecision* n = new ObjectDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectDecision)
  object_decision_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  perception_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.ObjectDecision.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 perception_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_perception_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perception_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.ObjectDecisionType object_decision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectDecision)
  return false;
#undef DO_
}

void ObjectDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.ObjectDecision.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 perception_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->perception_id(), output);
  }

  // repeated .jmc_auto.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0, n = this->object_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object_decision(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectDecision)
}

::google::protobuf::uint8* ObjectDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.ObjectDecision.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 perception_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->perception_id(), target);
  }

  // repeated .jmc_auto.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0, n = this->object_decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->object_decision(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectDecision)
  return target;
}

size_t ObjectDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.ObjectDecisionType object_decision = 3;
  {
    unsigned int count = this->object_decision_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_decision(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 perception_id = 2;
    if (has_perception_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perception_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectDecision)
    MergeFrom(*source);
  }
}

void ObjectDecision::MergeFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_decision_.MergeFrom(from.object_decision_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      perception_id_ = from.perception_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecision::CopyFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecision::IsInitialized() const {
  return true;
}

void ObjectDecision::Swap(ObjectDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecision::InternalSwap(ObjectDecision* other) {
  object_decision_.InternalSwap(&other->object_decision_);
  id_.Swap(&other->id_);
  std::swap(perception_id_, other->perception_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecision::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecision

// optional string id = 1;
bool ObjectDecision::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectDecision::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectDecision::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectDecision::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ObjectDecision::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecision.id)
  return id_.GetNoArena();
}
void ObjectDecision::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectDecision.id)
}
#if LANG_CXX11
void ObjectDecision::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.ObjectDecision.id)
}
#endif
void ObjectDecision::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.ObjectDecision.id)
}
void ObjectDecision::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.ObjectDecision.id)
}
::std::string* ObjectDecision::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecision.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectDecision::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ObjectDecision.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectDecision::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ObjectDecision.id)
}

// optional int32 perception_id = 2;
bool ObjectDecision::has_perception_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectDecision::set_has_perception_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectDecision::clear_has_perception_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectDecision::clear_perception_id() {
  perception_id_ = 0;
  clear_has_perception_id();
}
::google::protobuf::int32 ObjectDecision::perception_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecision.perception_id)
  return perception_id_;
}
void ObjectDecision::set_perception_id(::google::protobuf::int32 value) {
  set_has_perception_id();
  perception_id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ObjectDecision.perception_id)
}

// repeated .jmc_auto.planning.ObjectDecisionType object_decision = 3;
int ObjectDecision::object_decision_size() const {
  return object_decision_.size();
}
void ObjectDecision::clear_object_decision() {
  object_decision_.Clear();
}
const ::jmc_auto::planning::ObjectDecisionType& ObjectDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecision.object_decision)
  return object_decision_.Get(index);
}
::jmc_auto::planning::ObjectDecisionType* ObjectDecision::mutable_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecision.object_decision)
  return object_decision_.Mutable(index);
}
::jmc_auto::planning::ObjectDecisionType* ObjectDecision::add_object_decision() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ObjectDecision.object_decision)
  return object_decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ObjectDecisionType >*
ObjectDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ObjectDecision.object_decision)
  return &object_decision_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ObjectDecisionType >&
ObjectDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ObjectDecision.object_decision)
  return object_decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisions::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisions::ObjectDecisions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ObjectDecisions)
}
ObjectDecisions::ObjectDecisions(const ObjectDecisions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      decision_(from.decision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ObjectDecisions)
}

void ObjectDecisions::SharedCtor() {
  _cached_size_ = 0;
}

ObjectDecisions::~ObjectDecisions() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ObjectDecisions)
  SharedDtor();
}

void ObjectDecisions::SharedDtor() {
}

void ObjectDecisions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisions::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDecisions& ObjectDecisions::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectDecisions* ObjectDecisions::New(::google::protobuf::Arena* arena) const {
  ObjectDecisions* n = new ObjectDecisions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisions::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ObjectDecisions)
  decision_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDecisions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ObjectDecisions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.ObjectDecision decision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ObjectDecisions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ObjectDecisions)
  return false;
#undef DO_
}

void ObjectDecisions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ObjectDecisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decision(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ObjectDecisions)
}

::google::protobuf::uint8* ObjectDecisions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ObjectDecisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0, n = this->decision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->decision(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ObjectDecisions)
  return target;
}

size_t ObjectDecisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ObjectDecisions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.ObjectDecision decision = 1;
  {
    unsigned int count = this->decision_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decision(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecisions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ObjectDecisions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ObjectDecisions)
    MergeFrom(*source);
  }
}

void ObjectDecisions::MergeFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decision_.MergeFrom(from.decision_);
}

void ObjectDecisions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisions::CopyFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisions::IsInitialized() const {
  return true;
}

void ObjectDecisions::Swap(ObjectDecisions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisions::InternalSwap(ObjectDecisions* other) {
  decision_.InternalSwap(&other->decision_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisions::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectDecisions

// repeated .jmc_auto.planning.ObjectDecision decision = 1;
int ObjectDecisions::decision_size() const {
  return decision_.size();
}
void ObjectDecisions::clear_decision() {
  decision_.Clear();
}
const ::jmc_auto::planning::ObjectDecision& ObjectDecisions::decision(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ObjectDecisions.decision)
  return decision_.Get(index);
}
::jmc_auto::planning::ObjectDecision* ObjectDecisions::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ObjectDecisions.decision)
  return decision_.Mutable(index);
}
::jmc_auto::planning::ObjectDecision* ObjectDecisions::add_decision() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ObjectDecisions.decision)
  return decision_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ObjectDecision >*
ObjectDecisions::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ObjectDecisions.decision)
  return &decision_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::ObjectDecision >&
ObjectDecisions::decision() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ObjectDecisions.decision)
  return decision_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainStop::kReasonCodeFieldNumber;
const int MainStop::kReasonFieldNumber;
const int MainStop::kStopPointFieldNumber;
const int MainStop::kStopHeadingFieldNumber;
const int MainStop::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainStop::MainStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainStop)
}
MainStop::MainStop(const MainStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_stop_point()) {
    stop_point_ = new ::jmc_auto::common::PointENU(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  ::memcpy(&stop_heading_, &from.stop_heading_,
    reinterpret_cast<char*>(&reason_code_) -
    reinterpret_cast<char*>(&stop_heading_) + sizeof(reason_code_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainStop)
}

void MainStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_point_, 0, reinterpret_cast<char*>(&change_lane_type_) -
    reinterpret_cast<char*>(&stop_point_) + sizeof(change_lane_type_));
  reason_code_ = 1;
}

MainStop::~MainStop() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainStop)
  SharedDtor();
}

void MainStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stop_point_;
  }
}

void MainStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainStop::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainStop& MainStop::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainStop* MainStop::New(::google::protobuf::Arena* arena) const {
  MainStop* n = new MainStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainStop::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainStop)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_reason()) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    if (has_stop_point()) {
      GOOGLE_DCHECK(stop_point_ != NULL);
      stop_point_->::jmc_auto::common::PointENU::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&stop_heading_, 0, reinterpret_cast<char*>(&change_lane_type_) -
      reinterpret_cast<char*>(&stop_heading_) + sizeof(change_lane_type_));
    reason_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::StopReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::jmc_auto::planning::StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.MainStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU stop_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_stop_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::jmc_auto::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainStop)
  return false;
#undef DO_
}

void MainStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.MainStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional .jmc_auto.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_heading(), output);
  }

  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainStop)
}

::google::protobuf::uint8* MainStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.MainStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional .jmc_auto.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, deterministic, target);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_heading(), target);
  }

  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainStop)
  return target;
}

size_t MainStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .jmc_auto.common.PointENU stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double stop_heading = 4;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 5;
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

    // optional .jmc_auto.planning.StopReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  const MainStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainStop)
    MergeFrom(*source);
  }
}

void MainStop::MergeFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stop_point()->::jmc_auto::common::PointENU::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000004u) {
      stop_heading_ = from.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_lane_type_ = from.change_lane_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainStop::CopyFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainStop::IsInitialized() const {
  return true;
}

void MainStop::Swap(MainStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainStop::InternalSwap(MainStop* other) {
  reason_.Swap(&other->reason_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_heading_, other->stop_heading_);
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(reason_code_, other->reason_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainStop

// optional .jmc_auto.planning.StopReasonCode reason_code = 1;
bool MainStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MainStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000010u;
}
void MainStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void MainStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
::jmc_auto::planning::StopReasonCode MainStop::reason_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainStop.reason_code)
  return static_cast< ::jmc_auto::planning::StopReasonCode >(reason_code_);
}
void MainStop::set_reason_code(::jmc_auto::planning::StopReasonCode value) {
  assert(::jmc_auto::planning::StopReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainStop.reason_code)
}

// optional string reason = 2;
bool MainStop::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainStop::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void MainStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& MainStop::reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainStop.reason)
  return reason_.GetNoArena();
}
void MainStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainStop.reason)
}
#if LANG_CXX11
void MainStop::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.MainStop.reason)
}
#endif
void MainStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.MainStop.reason)
}
void MainStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.MainStop.reason)
}
::std::string* MainStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MainStop::release_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainStop.reason)
}

// optional .jmc_auto.common.PointENU stop_point = 3;
bool MainStop::has_stop_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainStop::set_has_stop_point() {
  _has_bits_[0] |= 0x00000002u;
}
void MainStop::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainStop::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::jmc_auto::common::PointENU& MainStop::stop_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainStop.stop_point)
  return stop_point_ != NULL ? *stop_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* MainStop::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainStop.stop_point)
  return stop_point_;
}
::jmc_auto::common::PointENU* MainStop::release_stop_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainStop.stop_point)
  clear_has_stop_point();
  ::jmc_auto::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void MainStop::set_allocated_stop_point(::jmc_auto::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainStop.stop_point)
}

// optional double stop_heading = 4;
bool MainStop::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MainStop::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void MainStop::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void MainStop::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
double MainStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainStop.stop_heading)
  return stop_heading_;
}
void MainStop::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainStop.stop_heading)
}

// optional .jmc_auto.routing.ChangeLaneType change_lane_type = 5;
bool MainStop::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MainStop::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000008u;
}
void MainStop::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void MainStop::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
::jmc_auto::routing::ChangeLaneType MainStop::change_lane_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainStop.change_lane_type)
  return static_cast< ::jmc_auto::routing::ChangeLaneType >(change_lane_type_);
}
void MainStop::set_change_lane_type(::jmc_auto::routing::ChangeLaneType value) {
  assert(::jmc_auto::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainStop.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopHardBrake::EmergencyStopHardBrake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.EmergencyStopHardBrake)
}
EmergencyStopHardBrake::EmergencyStopHardBrake(const EmergencyStopHardBrake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::SharedCtor() {
  _cached_size_ = 0;
}

EmergencyStopHardBrake::~EmergencyStopHardBrake() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.EmergencyStopHardBrake)
  SharedDtor();
}

void EmergencyStopHardBrake::SharedDtor() {
}

void EmergencyStopHardBrake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopHardBrake::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmergencyStopHardBrake& EmergencyStopHardBrake::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmergencyStopHardBrake* EmergencyStopHardBrake::New(::google::protobuf::Arena* arena) const {
  EmergencyStopHardBrake* n = new EmergencyStopHardBrake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopHardBrake::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.EmergencyStopHardBrake)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmergencyStopHardBrake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.EmergencyStopHardBrake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.EmergencyStopHardBrake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.EmergencyStopHardBrake)
  return false;
#undef DO_
}

void EmergencyStopHardBrake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.EmergencyStopHardBrake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.EmergencyStopHardBrake)
}

::google::protobuf::uint8* EmergencyStopHardBrake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.EmergencyStopHardBrake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.EmergencyStopHardBrake)
  return target;
}

size_t EmergencyStopHardBrake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.EmergencyStopHardBrake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopHardBrake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.EmergencyStopHardBrake)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStopHardBrake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopHardBrake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.EmergencyStopHardBrake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.EmergencyStopHardBrake)
    MergeFrom(*source);
  }
}

void EmergencyStopHardBrake::MergeFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.EmergencyStopHardBrake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStopHardBrake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopHardBrake::CopyFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopHardBrake::IsInitialized() const {
  return true;
}

void EmergencyStopHardBrake::Swap(EmergencyStopHardBrake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopHardBrake::InternalSwap(EmergencyStopHardBrake* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopHardBrake::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyStopHardBrake

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.EmergencyStopCruiseToStop)
}
EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::SharedCtor() {
  _cached_size_ = 0;
}

EmergencyStopCruiseToStop::~EmergencyStopCruiseToStop() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.EmergencyStopCruiseToStop)
  SharedDtor();
}

void EmergencyStopCruiseToStop::SharedDtor() {
}

void EmergencyStopCruiseToStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopCruiseToStop::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmergencyStopCruiseToStop& EmergencyStopCruiseToStop::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmergencyStopCruiseToStop* EmergencyStopCruiseToStop::New(::google::protobuf::Arena* arena) const {
  EmergencyStopCruiseToStop* n = new EmergencyStopCruiseToStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopCruiseToStop::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmergencyStopCruiseToStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.EmergencyStopCruiseToStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.EmergencyStopCruiseToStop)
  return false;
#undef DO_
}

void EmergencyStopCruiseToStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.EmergencyStopCruiseToStop)
}

::google::protobuf::uint8* EmergencyStopCruiseToStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.EmergencyStopCruiseToStop)
  return target;
}

size_t EmergencyStopCruiseToStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopCruiseToStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStopCruiseToStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopCruiseToStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.EmergencyStopCruiseToStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.EmergencyStopCruiseToStop)
    MergeFrom(*source);
  }
}

void EmergencyStopCruiseToStop::MergeFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStopCruiseToStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopCruiseToStop::CopyFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopCruiseToStop::IsInitialized() const {
  return true;
}

void EmergencyStopCruiseToStop::Swap(EmergencyStopCruiseToStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopCruiseToStop::InternalSwap(EmergencyStopCruiseToStop* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopCruiseToStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmergencyStopCruiseToStop

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainEmergencyStop::kReasonCodeFieldNumber;
const int MainEmergencyStop::kReasonFieldNumber;
const int MainEmergencyStop::kHardBrakeFieldNumber;
const int MainEmergencyStop::kCruiseToStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainEmergencyStop::MainEmergencyStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainEmergencyStop)
}
MainEmergencyStop::MainEmergencyStop(const MainEmergencyStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  reason_code_ = from.reason_code_;
  clear_has_task();
  switch (from.task_case()) {
    case kHardBrake: {
      mutable_hard_brake()->::jmc_auto::planning::EmergencyStopHardBrake::MergeFrom(from.hard_brake());
      break;
    }
    case kCruiseToStop: {
      mutable_cruise_to_stop()->::jmc_auto::planning::EmergencyStopCruiseToStop::MergeFrom(from.cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainEmergencyStop)
}

void MainEmergencyStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 1;
  clear_has_task();
}

MainEmergencyStop::~MainEmergencyStop() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainEmergencyStop)
  SharedDtor();
}

void MainEmergencyStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_task()) {
    clear_task();
  }
}

void MainEmergencyStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainEmergencyStop::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainEmergencyStop& MainEmergencyStop::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainEmergencyStop* MainEmergencyStop::New(::google::protobuf::Arena* arena) const {
  MainEmergencyStop* n = new MainEmergencyStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainEmergencyStop::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.planning.MainEmergencyStop)
  switch (task_case()) {
    case kHardBrake: {
      delete task_.hard_brake_;
      break;
    }
    case kCruiseToStop: {
      delete task_.cruise_to_stop_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainEmergencyStop)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_reason()) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    reason_code_ = 1;
  }
  clear_task();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainEmergencyStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainEmergencyStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.MainEmergencyStop.ReasonCode reason_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::MainEmergencyStop_ReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::jmc_auto::planning::MainEmergencyStop_ReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.MainEmergencyStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.EmergencyStopHardBrake hard_brake = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cruise_to_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainEmergencyStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainEmergencyStop)
  return false;
#undef DO_
}

void MainEmergencyStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainEmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.MainEmergencyStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  switch (task_case()) {
    case kHardBrake:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *task_.hard_brake_, output);
      break;
    case kCruiseToStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *task_.cruise_to_stop_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainEmergencyStop)
}

::google::protobuf::uint8* MainEmergencyStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainEmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.MainEmergencyStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  switch (task_case()) {
    case kHardBrake:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *task_.hard_brake_, deterministic, target);
      break;
    case kCruiseToStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *task_.cruise_to_stop_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainEmergencyStop)
  return target;
}

size_t MainEmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainEmergencyStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .jmc_auto.planning.MainEmergencyStop.ReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

  }
  switch (task_case()) {
    // optional .jmc_auto.planning.EmergencyStopHardBrake hard_brake = 3;
    case kHardBrake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.hard_brake_);
      break;
    }
    // optional .jmc_auto.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
    case kCruiseToStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.cruise_to_stop_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainEmergencyStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const MainEmergencyStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainEmergencyStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainEmergencyStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainEmergencyStop)
    MergeFrom(*source);
  }
}

void MainEmergencyStop::MergeFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.task_case()) {
    case kHardBrake: {
      mutable_hard_brake()->::jmc_auto::planning::EmergencyStopHardBrake::MergeFrom(from.hard_brake());
      break;
    }
    case kCruiseToStop: {
      mutable_cruise_to_stop()->::jmc_auto::planning::EmergencyStopCruiseToStop::MergeFrom(from.cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainEmergencyStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainEmergencyStop::CopyFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainEmergencyStop::IsInitialized() const {
  return true;
}

void MainEmergencyStop::Swap(MainEmergencyStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainEmergencyStop::InternalSwap(MainEmergencyStop* other) {
  reason_.Swap(&other->reason_);
  std::swap(reason_code_, other->reason_code_);
  std::swap(task_, other->task_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainEmergencyStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainEmergencyStop

// optional .jmc_auto.planning.MainEmergencyStop.ReasonCode reason_code = 1;
bool MainEmergencyStop::has_reason_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainEmergencyStop::set_has_reason_code() {
  _has_bits_[0] |= 0x00000002u;
}
void MainEmergencyStop::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainEmergencyStop::clear_reason_code() {
  reason_code_ = 1;
  clear_has_reason_code();
}
::jmc_auto::planning::MainEmergencyStop_ReasonCode MainEmergencyStop::reason_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainEmergencyStop.reason_code)
  return static_cast< ::jmc_auto::planning::MainEmergencyStop_ReasonCode >(reason_code_);
}
void MainEmergencyStop::set_reason_code(::jmc_auto::planning::MainEmergencyStop_ReasonCode value) {
  assert(::jmc_auto::planning::MainEmergencyStop_ReasonCode_IsValid(value));
  set_has_reason_code();
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainEmergencyStop.reason_code)
}

// optional string reason = 2;
bool MainEmergencyStop::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainEmergencyStop::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void MainEmergencyStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainEmergencyStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& MainEmergencyStop::reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainEmergencyStop.reason)
  return reason_.GetNoArena();
}
void MainEmergencyStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainEmergencyStop.reason)
}
#if LANG_CXX11
void MainEmergencyStop::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.MainEmergencyStop.reason)
}
#endif
void MainEmergencyStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.MainEmergencyStop.reason)
}
void MainEmergencyStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.MainEmergencyStop.reason)
}
::std::string* MainEmergencyStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainEmergencyStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MainEmergencyStop::release_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainEmergencyStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainEmergencyStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainEmergencyStop.reason)
}

// optional .jmc_auto.planning.EmergencyStopHardBrake hard_brake = 3;
bool MainEmergencyStop::has_hard_brake() const {
  return task_case() == kHardBrake;
}
void MainEmergencyStop::set_has_hard_brake() {
  _oneof_case_[0] = kHardBrake;
}
void MainEmergencyStop::clear_hard_brake() {
  if (has_hard_brake()) {
    delete task_.hard_brake_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::EmergencyStopHardBrake& MainEmergencyStop::hard_brake() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainEmergencyStop.hard_brake)
  return has_hard_brake()
      ? *task_.hard_brake_
      : ::jmc_auto::planning::EmergencyStopHardBrake::default_instance();
}
::jmc_auto::planning::EmergencyStopHardBrake* MainEmergencyStop::mutable_hard_brake() {
  if (!has_hard_brake()) {
    clear_task();
    set_has_hard_brake();
    task_.hard_brake_ = new ::jmc_auto::planning::EmergencyStopHardBrake;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainEmergencyStop.hard_brake)
  return task_.hard_brake_;
}
::jmc_auto::planning::EmergencyStopHardBrake* MainEmergencyStop::release_hard_brake() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainEmergencyStop.hard_brake)
  if (has_hard_brake()) {
    clear_has_task();
    ::jmc_auto::planning::EmergencyStopHardBrake* temp = task_.hard_brake_;
    task_.hard_brake_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainEmergencyStop::set_allocated_hard_brake(::jmc_auto::planning::EmergencyStopHardBrake* hard_brake) {
  clear_task();
  if (hard_brake) {
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainEmergencyStop.hard_brake)
}

// optional .jmc_auto.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
bool MainEmergencyStop::has_cruise_to_stop() const {
  return task_case() == kCruiseToStop;
}
void MainEmergencyStop::set_has_cruise_to_stop() {
  _oneof_case_[0] = kCruiseToStop;
}
void MainEmergencyStop::clear_cruise_to_stop() {
  if (has_cruise_to_stop()) {
    delete task_.cruise_to_stop_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::EmergencyStopCruiseToStop& MainEmergencyStop::cruise_to_stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainEmergencyStop.cruise_to_stop)
  return has_cruise_to_stop()
      ? *task_.cruise_to_stop_
      : ::jmc_auto::planning::EmergencyStopCruiseToStop::default_instance();
}
::jmc_auto::planning::EmergencyStopCruiseToStop* MainEmergencyStop::mutable_cruise_to_stop() {
  if (!has_cruise_to_stop()) {
    clear_task();
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = new ::jmc_auto::planning::EmergencyStopCruiseToStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainEmergencyStop.cruise_to_stop)
  return task_.cruise_to_stop_;
}
::jmc_auto::planning::EmergencyStopCruiseToStop* MainEmergencyStop::release_cruise_to_stop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainEmergencyStop.cruise_to_stop)
  if (has_cruise_to_stop()) {
    clear_has_task();
    ::jmc_auto::planning::EmergencyStopCruiseToStop* temp = task_.cruise_to_stop_;
    task_.cruise_to_stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainEmergencyStop::set_allocated_cruise_to_stop(::jmc_auto::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  clear_task();
  if (cruise_to_stop) {
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainEmergencyStop.cruise_to_stop)
}

bool MainEmergencyStop::has_task() const {
  return task_case() != TASK_NOT_SET;
}
void MainEmergencyStop::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
MainEmergencyStop::TaskCase MainEmergencyStop::task_case() const {
  return MainEmergencyStop::TaskCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainCruise::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainCruise::MainCruise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainCruise)
}
MainCruise::MainCruise(const MainCruise& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_lane_type_ = from.change_lane_type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainCruise)
}

void MainCruise::SharedCtor() {
  _cached_size_ = 0;
  change_lane_type_ = 0;
}

MainCruise::~MainCruise() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainCruise)
  SharedDtor();
}

void MainCruise::SharedDtor() {
}

void MainCruise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainCruise::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainCruise& MainCruise::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainCruise* MainCruise::New(::google::protobuf::Arena* arena) const {
  MainCruise* n = new MainCruise;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainCruise::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainCruise)
  change_lane_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainCruise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainCruise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::jmc_auto::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainCruise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainCruise)
  return false;
#undef DO_
}

void MainCruise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainCruise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainCruise)
}

::google::protobuf::uint8* MainCruise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainCruise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainCruise)
  return target;
}

size_t MainCruise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainCruise)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 1;
  if (has_change_lane_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainCruise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  const MainCruise* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainCruise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainCruise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainCruise)
    MergeFrom(*source);
  }
}

void MainCruise::MergeFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_lane_type()) {
    set_change_lane_type(from.change_lane_type());
  }
}

void MainCruise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainCruise::CopyFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainCruise::IsInitialized() const {
  return true;
}

void MainCruise::Swap(MainCruise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainCruise::InternalSwap(MainCruise* other) {
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainCruise::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainCruise

// optional .jmc_auto.routing.ChangeLaneType change_lane_type = 1;
bool MainCruise::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainCruise::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000001u;
}
void MainCruise::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainCruise::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
::jmc_auto::routing::ChangeLaneType MainCruise::change_lane_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainCruise.change_lane_type)
  return static_cast< ::jmc_auto::routing::ChangeLaneType >(change_lane_type_);
}
void MainCruise::set_change_lane_type(::jmc_auto::routing::ChangeLaneType value) {
  assert(::jmc_auto::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainCruise.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainChangeLane::kTypeFieldNumber;
const int MainChangeLane::kDefaultLaneFieldNumber;
const int MainChangeLane::kDefaultLaneStopFieldNumber;
const int MainChangeLane::kTargetLaneStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainChangeLane::MainChangeLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainChangeLane)
}
MainChangeLane::MainChangeLane(const MainChangeLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      default_lane_(from.default_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_lane_stop()) {
    default_lane_stop_ = new ::jmc_auto::planning::MainStop(*from.default_lane_stop_);
  } else {
    default_lane_stop_ = NULL;
  }
  if (from.has_target_lane_stop()) {
    target_lane_stop_ = new ::jmc_auto::planning::MainStop(*from.target_lane_stop_);
  } else {
    target_lane_stop_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainChangeLane)
}

void MainChangeLane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_lane_stop_, 0, reinterpret_cast<char*>(&target_lane_stop_) -
    reinterpret_cast<char*>(&default_lane_stop_) + sizeof(target_lane_stop_));
  type_ = 1;
}

MainChangeLane::~MainChangeLane() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainChangeLane)
  SharedDtor();
}

void MainChangeLane::SharedDtor() {
  if (this != internal_default_instance()) {
    delete default_lane_stop_;
  }
  if (this != internal_default_instance()) {
    delete target_lane_stop_;
  }
}

void MainChangeLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainChangeLane::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainChangeLane& MainChangeLane::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainChangeLane* MainChangeLane::New(::google::protobuf::Arena* arena) const {
  MainChangeLane* n = new MainChangeLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainChangeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainChangeLane)
  default_lane_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_default_lane_stop()) {
      GOOGLE_DCHECK(default_lane_stop_ != NULL);
      default_lane_stop_->::jmc_auto::planning::MainStop::Clear();
    }
    if (has_target_lane_stop()) {
      GOOGLE_DCHECK(target_lane_stop_ != NULL);
      target_lane_stop_->::jmc_auto::planning::MainStop::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainChangeLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainChangeLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.MainChangeLane.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::MainChangeLane_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::planning::MainChangeLane_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.TargetLane default_lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_default_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainStop default_lane_stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_lane_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainStop target_lane_stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_lane_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainChangeLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainChangeLane)
  return false;
#undef DO_
}

void MainChangeLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainChangeLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainChangeLane.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .jmc_auto.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0, n = this->default_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->default_lane(i), output);
  }

  // optional .jmc_auto.planning.MainStop default_lane_stop = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_lane_stop_, output);
  }

  // optional .jmc_auto.planning.MainStop target_lane_stop = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_lane_stop_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainChangeLane)
}

::google::protobuf::uint8* MainChangeLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainChangeLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainChangeLane.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .jmc_auto.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0, n = this->default_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->default_lane(i), deterministic, target);
  }

  // optional .jmc_auto.planning.MainStop default_lane_stop = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->default_lane_stop_, deterministic, target);
  }

  // optional .jmc_auto.planning.MainStop target_lane_stop = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->target_lane_stop_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainChangeLane)
  return target;
}

size_t MainChangeLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainChangeLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.TargetLane default_lane = 2;
  {
    unsigned int count = this->default_lane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_lane(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.planning.MainStop default_lane_stop = 3;
    if (has_default_lane_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->default_lane_stop_);
    }

    // optional .jmc_auto.planning.MainStop target_lane_stop = 4;
    if (has_target_lane_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->target_lane_stop_);
    }

    // optional .jmc_auto.planning.MainChangeLane.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainChangeLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  const MainChangeLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainChangeLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainChangeLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainChangeLane)
    MergeFrom(*source);
  }
}

void MainChangeLane::MergeFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  default_lane_.MergeFrom(from.default_lane_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_lane_stop()->::jmc_auto::planning::MainStop::MergeFrom(from.default_lane_stop());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_target_lane_stop()->::jmc_auto::planning::MainStop::MergeFrom(from.target_lane_stop());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainChangeLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainChangeLane::CopyFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainChangeLane::IsInitialized() const {
  return true;
}

void MainChangeLane::Swap(MainChangeLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainChangeLane::InternalSwap(MainChangeLane* other) {
  default_lane_.InternalSwap(&other->default_lane_);
  std::swap(default_lane_stop_, other->default_lane_stop_);
  std::swap(target_lane_stop_, other->target_lane_stop_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainChangeLane::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainChangeLane

// optional .jmc_auto.planning.MainChangeLane.Type type = 1;
bool MainChangeLane::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MainChangeLane::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void MainChangeLane::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void MainChangeLane::clear_type() {
  type_ = 1;
  clear_has_type();
}
::jmc_auto::planning::MainChangeLane_Type MainChangeLane::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainChangeLane.type)
  return static_cast< ::jmc_auto::planning::MainChangeLane_Type >(type_);
}
void MainChangeLane::set_type(::jmc_auto::planning::MainChangeLane_Type value) {
  assert(::jmc_auto::planning::MainChangeLane_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainChangeLane.type)
}

// repeated .jmc_auto.planning.TargetLane default_lane = 2;
int MainChangeLane::default_lane_size() const {
  return default_lane_.size();
}
void MainChangeLane::clear_default_lane() {
  default_lane_.Clear();
}
const ::jmc_auto::planning::TargetLane& MainChangeLane::default_lane(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainChangeLane.default_lane)
  return default_lane_.Get(index);
}
::jmc_auto::planning::TargetLane* MainChangeLane::mutable_default_lane(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainChangeLane.default_lane)
  return default_lane_.Mutable(index);
}
::jmc_auto::planning::TargetLane* MainChangeLane::add_default_lane() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.MainChangeLane.default_lane)
  return default_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TargetLane >*
MainChangeLane::mutable_default_lane() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.MainChangeLane.default_lane)
  return &default_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TargetLane >&
MainChangeLane::default_lane() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.MainChangeLane.default_lane)
  return default_lane_;
}

// optional .jmc_auto.planning.MainStop default_lane_stop = 3;
bool MainChangeLane::has_default_lane_stop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainChangeLane::set_has_default_lane_stop() {
  _has_bits_[0] |= 0x00000001u;
}
void MainChangeLane::clear_has_default_lane_stop() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainChangeLane::clear_default_lane_stop() {
  if (default_lane_stop_ != NULL) default_lane_stop_->::jmc_auto::planning::MainStop::Clear();
  clear_has_default_lane_stop();
}
const ::jmc_auto::planning::MainStop& MainChangeLane::default_lane_stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainChangeLane.default_lane_stop)
  return default_lane_stop_ != NULL ? *default_lane_stop_
                         : *::jmc_auto::planning::MainStop::internal_default_instance();
}
::jmc_auto::planning::MainStop* MainChangeLane::mutable_default_lane_stop() {
  set_has_default_lane_stop();
  if (default_lane_stop_ == NULL) {
    default_lane_stop_ = new ::jmc_auto::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainChangeLane.default_lane_stop)
  return default_lane_stop_;
}
::jmc_auto::planning::MainStop* MainChangeLane::release_default_lane_stop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainChangeLane.default_lane_stop)
  clear_has_default_lane_stop();
  ::jmc_auto::planning::MainStop* temp = default_lane_stop_;
  default_lane_stop_ = NULL;
  return temp;
}
void MainChangeLane::set_allocated_default_lane_stop(::jmc_auto::planning::MainStop* default_lane_stop) {
  delete default_lane_stop_;
  default_lane_stop_ = default_lane_stop;
  if (default_lane_stop) {
    set_has_default_lane_stop();
  } else {
    clear_has_default_lane_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainChangeLane.default_lane_stop)
}

// optional .jmc_auto.planning.MainStop target_lane_stop = 4;
bool MainChangeLane::has_target_lane_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainChangeLane::set_has_target_lane_stop() {
  _has_bits_[0] |= 0x00000002u;
}
void MainChangeLane::clear_has_target_lane_stop() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainChangeLane::clear_target_lane_stop() {
  if (target_lane_stop_ != NULL) target_lane_stop_->::jmc_auto::planning::MainStop::Clear();
  clear_has_target_lane_stop();
}
const ::jmc_auto::planning::MainStop& MainChangeLane::target_lane_stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainChangeLane.target_lane_stop)
  return target_lane_stop_ != NULL ? *target_lane_stop_
                         : *::jmc_auto::planning::MainStop::internal_default_instance();
}
::jmc_auto::planning::MainStop* MainChangeLane::mutable_target_lane_stop() {
  set_has_target_lane_stop();
  if (target_lane_stop_ == NULL) {
    target_lane_stop_ = new ::jmc_auto::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainChangeLane.target_lane_stop)
  return target_lane_stop_;
}
::jmc_auto::planning::MainStop* MainChangeLane::release_target_lane_stop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainChangeLane.target_lane_stop)
  clear_has_target_lane_stop();
  ::jmc_auto::planning::MainStop* temp = target_lane_stop_;
  target_lane_stop_ = NULL;
  return temp;
}
void MainChangeLane::set_allocated_target_lane_stop(::jmc_auto::planning::MainStop* target_lane_stop) {
  delete target_lane_stop_;
  target_lane_stop_ = target_lane_stop;
  if (target_lane_stop) {
    set_has_target_lane_stop();
  } else {
    clear_has_target_lane_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainChangeLane.target_lane_stop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainMissionComplete::kStopPointFieldNumber;
const int MainMissionComplete::kStopHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainMissionComplete::MainMissionComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainMissionComplete)
}
MainMissionComplete::MainMissionComplete(const MainMissionComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::jmc_auto::common::PointENU(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  stop_heading_ = from.stop_heading_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainMissionComplete)
}

void MainMissionComplete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stop_point_, 0, reinterpret_cast<char*>(&stop_heading_) -
    reinterpret_cast<char*>(&stop_point_) + sizeof(stop_heading_));
}

MainMissionComplete::~MainMissionComplete() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainMissionComplete)
  SharedDtor();
}

void MainMissionComplete::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stop_point_;
  }
}

void MainMissionComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMissionComplete::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainMissionComplete& MainMissionComplete::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainMissionComplete* MainMissionComplete::New(::google::protobuf::Arena* arena) const {
  MainMissionComplete* n = new MainMissionComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainMissionComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainMissionComplete)
  if (has_stop_point()) {
    GOOGLE_DCHECK(stop_point_ != NULL);
    stop_point_->::jmc_auto::common::PointENU::Clear();
  }
  stop_heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainMissionComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainMissionComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.PointENU stop_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_stop_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainMissionComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainMissionComplete)
  return false;
#undef DO_
}

void MainMissionComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainMissionComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.PointENU stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional double stop_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainMissionComplete)
}

::google::protobuf::uint8* MainMissionComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainMissionComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.PointENU stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, deterministic, target);
  }

  // optional double stop_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainMissionComplete)
  return target;
}

size_t MainMissionComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainMissionComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.common.PointENU stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional double stop_heading = 2;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMissionComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const MainMissionComplete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainMissionComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainMissionComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainMissionComplete)
    MergeFrom(*source);
  }
}

void MainMissionComplete::MergeFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::jmc_auto::common::PointENU::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_heading_ = from.stop_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainMissionComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMissionComplete::CopyFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMissionComplete::IsInitialized() const {
  return true;
}

void MainMissionComplete::Swap(MainMissionComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainMissionComplete::InternalSwap(MainMissionComplete* other) {
  std::swap(stop_point_, other->stop_point_);
  std::swap(stop_heading_, other->stop_heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainMissionComplete::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainMissionComplete

// optional .jmc_auto.common.PointENU stop_point = 1;
bool MainMissionComplete::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainMissionComplete::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void MainMissionComplete::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainMissionComplete::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_stop_point();
}
const ::jmc_auto::common::PointENU& MainMissionComplete::stop_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainMissionComplete.stop_point)
  return stop_point_ != NULL ? *stop_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* MainMissionComplete::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainMissionComplete.stop_point)
  return stop_point_;
}
::jmc_auto::common::PointENU* MainMissionComplete::release_stop_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainMissionComplete.stop_point)
  clear_has_stop_point();
  ::jmc_auto::common::PointENU* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void MainMissionComplete::set_allocated_stop_point(::jmc_auto::common::PointENU* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainMissionComplete.stop_point)
}

// optional double stop_heading = 2;
bool MainMissionComplete::has_stop_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainMissionComplete::set_has_stop_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void MainMissionComplete::clear_has_stop_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainMissionComplete::clear_stop_heading() {
  stop_heading_ = 0;
  clear_has_stop_heading();
}
double MainMissionComplete::stop_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainMissionComplete.stop_heading)
  return stop_heading_;
}
void MainMissionComplete::set_stop_heading(double value) {
  set_has_stop_heading();
  stop_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainMissionComplete.stop_heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainNotReady::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainNotReady::MainNotReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainNotReady)
}
MainNotReady::MainNotReady(const MainNotReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainNotReady)
}

void MainNotReady::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MainNotReady::~MainNotReady() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainNotReady)
  SharedDtor();
}

void MainNotReady::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MainNotReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainNotReady::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainNotReady& MainNotReady::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainNotReady* MainNotReady::New(::google::protobuf::Arena* arena) const {
  MainNotReady* n = new MainNotReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainNotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainNotReady)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainNotReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainNotReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.MainNotReady.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainNotReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainNotReady)
  return false;
#undef DO_
}

void MainNotReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainNotReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.MainNotReady.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainNotReady)
}

::google::protobuf::uint8* MainNotReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainNotReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.MainNotReady.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainNotReady)
  return target;
}

size_t MainNotReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainNotReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainNotReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  const MainNotReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainNotReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainNotReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainNotReady)
    MergeFrom(*source);
  }
}

void MainNotReady::MergeFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_has_reason();
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void MainNotReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainNotReady::CopyFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainNotReady::IsInitialized() const {
  return true;
}

void MainNotReady::Swap(MainNotReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainNotReady::InternalSwap(MainNotReady* other) {
  reason_.Swap(&other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainNotReady::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainNotReady

// optional string reason = 1;
bool MainNotReady::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainNotReady::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void MainNotReady::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainNotReady::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& MainNotReady::reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainNotReady.reason)
  return reason_.GetNoArena();
}
void MainNotReady::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainNotReady.reason)
}
#if LANG_CXX11
void MainNotReady::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.MainNotReady.reason)
}
#endif
void MainNotReady::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.MainNotReady.reason)
}
void MainNotReady::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.MainNotReady.reason)
}
::std::string* MainNotReady::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainNotReady.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MainNotReady::release_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainNotReady.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainNotReady::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainNotReady.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainParking::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainParking::MainParking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainParking)
}
MainParking::MainParking(const MainParking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainParking)
}

void MainParking::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
}

MainParking::~MainParking() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainParking)
  SharedDtor();
}

void MainParking::SharedDtor() {
}

void MainParking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainParking::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainParking& MainParking::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainParking* MainParking::New(::google::protobuf::Arena* arena) const {
  MainParking* n = new MainParking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainParking::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainParking)
  status_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainParking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainParking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.MainParking.ParkingStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::MainParking_ParkingStatus_IsValid(value)) {
            set_status(static_cast< ::jmc_auto::planning::MainParking_ParkingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainParking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainParking)
  return false;
#undef DO_
}

void MainParking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainParking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainParking.ParkingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainParking)
}

::google::protobuf::uint8* MainParking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainParking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainParking.ParkingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainParking)
  return target;
}

size_t MainParking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainParking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.planning.MainParking.ParkingStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainParking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  const MainParking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainParking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainParking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainParking)
    MergeFrom(*source);
  }
}

void MainParking::MergeFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void MainParking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainParking::CopyFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainParking::IsInitialized() const {
  return true;
}

void MainParking::Swap(MainParking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainParking::InternalSwap(MainParking* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainParking::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainParking

// optional .jmc_auto.planning.MainParking.ParkingStatus status = 1;
bool MainParking::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainParking::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void MainParking::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainParking::clear_status() {
  status_ = 1;
  clear_has_status();
}
::jmc_auto::planning::MainParking_ParkingStatus MainParking::status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainParking.status)
  return static_cast< ::jmc_auto::planning::MainParking_ParkingStatus >(status_);
}
void MainParking::set_status(::jmc_auto::planning::MainParking_ParkingStatus value) {
  assert(::jmc_auto::planning::MainParking_ParkingStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.MainParking.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainDecision::kCruiseFieldNumber;
const int MainDecision::kStopFieldNumber;
const int MainDecision::kEstopFieldNumber;
const int MainDecision::kChangeLaneFieldNumber;
const int MainDecision::kMissionCompleteFieldNumber;
const int MainDecision::kNotReadyFieldNumber;
const int MainDecision::kParkingFieldNumber;
const int MainDecision::kTargetLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainDecision::MainDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.MainDecision)
}
MainDecision::MainDecision(const MainDecision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      target_lane_(from.target_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_task();
  switch (from.task_case()) {
    case kCruise: {
      mutable_cruise()->::jmc_auto::planning::MainCruise::MergeFrom(from.cruise());
      break;
    }
    case kStop: {
      mutable_stop()->::jmc_auto::planning::MainStop::MergeFrom(from.stop());
      break;
    }
    case kEstop: {
      mutable_estop()->::jmc_auto::planning::MainEmergencyStop::MergeFrom(from.estop());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::jmc_auto::planning::MainChangeLane::MergeFrom(from.change_lane());
      break;
    }
    case kMissionComplete: {
      mutable_mission_complete()->::jmc_auto::planning::MainMissionComplete::MergeFrom(from.mission_complete());
      break;
    }
    case kNotReady: {
      mutable_not_ready()->::jmc_auto::planning::MainNotReady::MergeFrom(from.not_ready());
      break;
    }
    case kParking: {
      mutable_parking()->::jmc_auto::planning::MainParking::MergeFrom(from.parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.MainDecision)
}

void MainDecision::SharedCtor() {
  _cached_size_ = 0;
  clear_has_task();
}

MainDecision::~MainDecision() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.MainDecision)
  SharedDtor();
}

void MainDecision::SharedDtor() {
  if (has_task()) {
    clear_task();
  }
}

void MainDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainDecision::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainDecision& MainDecision::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

MainDecision* MainDecision::New(::google::protobuf::Arena* arena) const {
  MainDecision* n = new MainDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainDecision::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.planning.MainDecision)
  switch (task_case()) {
    case kCruise: {
      delete task_.cruise_;
      break;
    }
    case kStop: {
      delete task_.stop_;
      break;
    }
    case kEstop: {
      delete task_.estop_;
      break;
    }
    case kChangeLane: {
      delete task_.change_lane_;
      break;
    }
    case kMissionComplete: {
      delete task_.mission_complete_;
      break;
    }
    case kNotReady: {
      delete task_.not_ready_;
      break;
    }
    case kParking: {
      delete task_.parking_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.MainDecision)
  target_lane_.Clear();
  clear_task();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.MainDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.MainCruise cruise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cruise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainStop stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainEmergencyStop estop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainChangeLane change_lane = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.TargetLane target_lane = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainMissionComplete mission_complete = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainNotReady not_ready = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_ready()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.MainParking parking = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.MainDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.MainDecision)
  return false;
#undef DO_
}

void MainDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.MainDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (task_case()) {
    case kCruise:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *task_.cruise_, output);
      break;
    case kStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *task_.stop_, output);
      break;
    case kEstop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *task_.estop_, output);
      break;
    case kChangeLane:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *task_.change_lane_, output);
      break;
    default: ;
  }
  // repeated .jmc_auto.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0, n = this->target_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_lane(i), output);
  }

  switch (task_case()) {
    case kMissionComplete:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *task_.mission_complete_, output);
      break;
    case kNotReady:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *task_.not_ready_, output);
      break;
    case kParking:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *task_.parking_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.MainDecision)
}

::google::protobuf::uint8* MainDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.MainDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (task_case()) {
    case kCruise:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *task_.cruise_, deterministic, target);
      break;
    case kStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *task_.stop_, deterministic, target);
      break;
    case kEstop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *task_.estop_, deterministic, target);
      break;
    case kChangeLane:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *task_.change_lane_, deterministic, target);
      break;
    default: ;
  }
  // repeated .jmc_auto.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0, n = this->target_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->target_lane(i), deterministic, target);
  }

  switch (task_case()) {
    case kMissionComplete:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *task_.mission_complete_, deterministic, target);
      break;
    case kNotReady:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *task_.not_ready_, deterministic, target);
      break;
    case kParking:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *task_.parking_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.MainDecision)
  return target;
}

size_t MainDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.MainDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.TargetLane target_lane = 5 [deprecated = true];
  {
    unsigned int count = this->target_lane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_lane(i));
    }
  }

  switch (task_case()) {
    // optional .jmc_auto.planning.MainCruise cruise = 1;
    case kCruise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.cruise_);
      break;
    }
    // optional .jmc_auto.planning.MainStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.stop_);
      break;
    }
    // optional .jmc_auto.planning.MainEmergencyStop estop = 3;
    case kEstop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.estop_);
      break;
    }
    // optional .jmc_auto.planning.MainChangeLane change_lane = 4 [deprecated = true];
    case kChangeLane: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.change_lane_);
      break;
    }
    // optional .jmc_auto.planning.MainMissionComplete mission_complete = 6;
    case kMissionComplete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.mission_complete_);
      break;
    }
    // optional .jmc_auto.planning.MainNotReady not_ready = 7;
    case kNotReady: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.not_ready_);
      break;
    }
    // optional .jmc_auto.planning.MainParking parking = 8;
    case kParking: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *task_.parking_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const MainDecision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.MainDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.MainDecision)
    MergeFrom(*source);
  }
}

void MainDecision::MergeFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_lane_.MergeFrom(from.target_lane_);
  switch (from.task_case()) {
    case kCruise: {
      mutable_cruise()->::jmc_auto::planning::MainCruise::MergeFrom(from.cruise());
      break;
    }
    case kStop: {
      mutable_stop()->::jmc_auto::planning::MainStop::MergeFrom(from.stop());
      break;
    }
    case kEstop: {
      mutable_estop()->::jmc_auto::planning::MainEmergencyStop::MergeFrom(from.estop());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::jmc_auto::planning::MainChangeLane::MergeFrom(from.change_lane());
      break;
    }
    case kMissionComplete: {
      mutable_mission_complete()->::jmc_auto::planning::MainMissionComplete::MergeFrom(from.mission_complete());
      break;
    }
    case kNotReady: {
      mutable_not_ready()->::jmc_auto::planning::MainNotReady::MergeFrom(from.not_ready());
      break;
    }
    case kParking: {
      mutable_parking()->::jmc_auto::planning::MainParking::MergeFrom(from.parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainDecision::CopyFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainDecision::IsInitialized() const {
  return true;
}

void MainDecision::Swap(MainDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainDecision::InternalSwap(MainDecision* other) {
  target_lane_.InternalSwap(&other->target_lane_);
  std::swap(task_, other->task_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainDecision::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainDecision

// optional .jmc_auto.planning.MainCruise cruise = 1;
bool MainDecision::has_cruise() const {
  return task_case() == kCruise;
}
void MainDecision::set_has_cruise() {
  _oneof_case_[0] = kCruise;
}
void MainDecision::clear_cruise() {
  if (has_cruise()) {
    delete task_.cruise_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainCruise& MainDecision::cruise() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.cruise)
  return has_cruise()
      ? *task_.cruise_
      : ::jmc_auto::planning::MainCruise::default_instance();
}
::jmc_auto::planning::MainCruise* MainDecision::mutable_cruise() {
  if (!has_cruise()) {
    clear_task();
    set_has_cruise();
    task_.cruise_ = new ::jmc_auto::planning::MainCruise;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.cruise)
  return task_.cruise_;
}
::jmc_auto::planning::MainCruise* MainDecision::release_cruise() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.cruise)
  if (has_cruise()) {
    clear_has_task();
    ::jmc_auto::planning::MainCruise* temp = task_.cruise_;
    task_.cruise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_cruise(::jmc_auto::planning::MainCruise* cruise) {
  clear_task();
  if (cruise) {
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.cruise)
}

// optional .jmc_auto.planning.MainStop stop = 2;
bool MainDecision::has_stop() const {
  return task_case() == kStop;
}
void MainDecision::set_has_stop() {
  _oneof_case_[0] = kStop;
}
void MainDecision::clear_stop() {
  if (has_stop()) {
    delete task_.stop_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainStop& MainDecision::stop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.stop)
  return has_stop()
      ? *task_.stop_
      : ::jmc_auto::planning::MainStop::default_instance();
}
::jmc_auto::planning::MainStop* MainDecision::mutable_stop() {
  if (!has_stop()) {
    clear_task();
    set_has_stop();
    task_.stop_ = new ::jmc_auto::planning::MainStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.stop)
  return task_.stop_;
}
::jmc_auto::planning::MainStop* MainDecision::release_stop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.stop)
  if (has_stop()) {
    clear_has_task();
    ::jmc_auto::planning::MainStop* temp = task_.stop_;
    task_.stop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_stop(::jmc_auto::planning::MainStop* stop) {
  clear_task();
  if (stop) {
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.stop)
}

// optional .jmc_auto.planning.MainEmergencyStop estop = 3;
bool MainDecision::has_estop() const {
  return task_case() == kEstop;
}
void MainDecision::set_has_estop() {
  _oneof_case_[0] = kEstop;
}
void MainDecision::clear_estop() {
  if (has_estop()) {
    delete task_.estop_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainEmergencyStop& MainDecision::estop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.estop)
  return has_estop()
      ? *task_.estop_
      : ::jmc_auto::planning::MainEmergencyStop::default_instance();
}
::jmc_auto::planning::MainEmergencyStop* MainDecision::mutable_estop() {
  if (!has_estop()) {
    clear_task();
    set_has_estop();
    task_.estop_ = new ::jmc_auto::planning::MainEmergencyStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.estop)
  return task_.estop_;
}
::jmc_auto::planning::MainEmergencyStop* MainDecision::release_estop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.estop)
  if (has_estop()) {
    clear_has_task();
    ::jmc_auto::planning::MainEmergencyStop* temp = task_.estop_;
    task_.estop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_estop(::jmc_auto::planning::MainEmergencyStop* estop) {
  clear_task();
  if (estop) {
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.estop)
}

// optional .jmc_auto.planning.MainChangeLane change_lane = 4 [deprecated = true];
bool MainDecision::has_change_lane() const {
  return task_case() == kChangeLane;
}
void MainDecision::set_has_change_lane() {
  _oneof_case_[0] = kChangeLane;
}
void MainDecision::clear_change_lane() {
  if (has_change_lane()) {
    delete task_.change_lane_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainChangeLane& MainDecision::change_lane() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.change_lane)
  return has_change_lane()
      ? *task_.change_lane_
      : ::jmc_auto::planning::MainChangeLane::default_instance();
}
::jmc_auto::planning::MainChangeLane* MainDecision::mutable_change_lane() {
  if (!has_change_lane()) {
    clear_task();
    set_has_change_lane();
    task_.change_lane_ = new ::jmc_auto::planning::MainChangeLane;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.change_lane)
  return task_.change_lane_;
}
::jmc_auto::planning::MainChangeLane* MainDecision::release_change_lane() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.change_lane)
  if (has_change_lane()) {
    clear_has_task();
    ::jmc_auto::planning::MainChangeLane* temp = task_.change_lane_;
    task_.change_lane_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_change_lane(::jmc_auto::planning::MainChangeLane* change_lane) {
  clear_task();
  if (change_lane) {
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.change_lane)
}

// optional .jmc_auto.planning.MainMissionComplete mission_complete = 6;
bool MainDecision::has_mission_complete() const {
  return task_case() == kMissionComplete;
}
void MainDecision::set_has_mission_complete() {
  _oneof_case_[0] = kMissionComplete;
}
void MainDecision::clear_mission_complete() {
  if (has_mission_complete()) {
    delete task_.mission_complete_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainMissionComplete& MainDecision::mission_complete() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.mission_complete)
  return has_mission_complete()
      ? *task_.mission_complete_
      : ::jmc_auto::planning::MainMissionComplete::default_instance();
}
::jmc_auto::planning::MainMissionComplete* MainDecision::mutable_mission_complete() {
  if (!has_mission_complete()) {
    clear_task();
    set_has_mission_complete();
    task_.mission_complete_ = new ::jmc_auto::planning::MainMissionComplete;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.mission_complete)
  return task_.mission_complete_;
}
::jmc_auto::planning::MainMissionComplete* MainDecision::release_mission_complete() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.mission_complete)
  if (has_mission_complete()) {
    clear_has_task();
    ::jmc_auto::planning::MainMissionComplete* temp = task_.mission_complete_;
    task_.mission_complete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_mission_complete(::jmc_auto::planning::MainMissionComplete* mission_complete) {
  clear_task();
  if (mission_complete) {
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.mission_complete)
}

// optional .jmc_auto.planning.MainNotReady not_ready = 7;
bool MainDecision::has_not_ready() const {
  return task_case() == kNotReady;
}
void MainDecision::set_has_not_ready() {
  _oneof_case_[0] = kNotReady;
}
void MainDecision::clear_not_ready() {
  if (has_not_ready()) {
    delete task_.not_ready_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainNotReady& MainDecision::not_ready() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.not_ready)
  return has_not_ready()
      ? *task_.not_ready_
      : ::jmc_auto::planning::MainNotReady::default_instance();
}
::jmc_auto::planning::MainNotReady* MainDecision::mutable_not_ready() {
  if (!has_not_ready()) {
    clear_task();
    set_has_not_ready();
    task_.not_ready_ = new ::jmc_auto::planning::MainNotReady;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.not_ready)
  return task_.not_ready_;
}
::jmc_auto::planning::MainNotReady* MainDecision::release_not_ready() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.not_ready)
  if (has_not_ready()) {
    clear_has_task();
    ::jmc_auto::planning::MainNotReady* temp = task_.not_ready_;
    task_.not_ready_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_not_ready(::jmc_auto::planning::MainNotReady* not_ready) {
  clear_task();
  if (not_ready) {
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.not_ready)
}

// optional .jmc_auto.planning.MainParking parking = 8;
bool MainDecision::has_parking() const {
  return task_case() == kParking;
}
void MainDecision::set_has_parking() {
  _oneof_case_[0] = kParking;
}
void MainDecision::clear_parking() {
  if (has_parking()) {
    delete task_.parking_;
    clear_has_task();
  }
}
 const ::jmc_auto::planning::MainParking& MainDecision::parking() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.parking)
  return has_parking()
      ? *task_.parking_
      : ::jmc_auto::planning::MainParking::default_instance();
}
::jmc_auto::planning::MainParking* MainDecision::mutable_parking() {
  if (!has_parking()) {
    clear_task();
    set_has_parking();
    task_.parking_ = new ::jmc_auto::planning::MainParking;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.parking)
  return task_.parking_;
}
::jmc_auto::planning::MainParking* MainDecision::release_parking() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.MainDecision.parking)
  if (has_parking()) {
    clear_has_task();
    ::jmc_auto::planning::MainParking* temp = task_.parking_;
    task_.parking_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MainDecision::set_allocated_parking(::jmc_auto::planning::MainParking* parking) {
  clear_task();
  if (parking) {
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.MainDecision.parking)
}

// repeated .jmc_auto.planning.TargetLane target_lane = 5 [deprecated = true];
int MainDecision::target_lane_size() const {
  return target_lane_.size();
}
void MainDecision::clear_target_lane() {
  target_lane_.Clear();
}
const ::jmc_auto::planning::TargetLane& MainDecision::target_lane(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.MainDecision.target_lane)
  return target_lane_.Get(index);
}
::jmc_auto::planning::TargetLane* MainDecision::mutable_target_lane(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.MainDecision.target_lane)
  return target_lane_.Mutable(index);
}
::jmc_auto::planning::TargetLane* MainDecision::add_target_lane() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.MainDecision.target_lane)
  return target_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TargetLane >*
MainDecision::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.MainDecision.target_lane)
  return &target_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TargetLane >&
MainDecision::target_lane() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.MainDecision.target_lane)
  return target_lane_;
}

bool MainDecision::has_task() const {
  return task_case() != TASK_NOT_SET;
}
void MainDecision::clear_has_task() {
  _oneof_case_[0] = TASK_NOT_SET;
}
MainDecision::TaskCase MainDecision::task_case() const {
  return MainDecision::TaskCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionResult::kMainDecisionFieldNumber;
const int DecisionResult::kObjectDecisionFieldNumber;
const int DecisionResult::kVehicleSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionResult::DecisionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DecisionResult)
}
DecisionResult::DecisionResult(const DecisionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_main_decision()) {
    main_decision_ = new ::jmc_auto::planning::MainDecision(*from.main_decision_);
  } else {
    main_decision_ = NULL;
  }
  if (from.has_object_decision()) {
    object_decision_ = new ::jmc_auto::planning::ObjectDecisions(*from.object_decision_);
  } else {
    object_decision_ = NULL;
  }
  if (from.has_vehicle_signal()) {
    vehicle_signal_ = new ::jmc_auto::common::VehicleSignal(*from.vehicle_signal_);
  } else {
    vehicle_signal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DecisionResult)
}

void DecisionResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&main_decision_, 0, reinterpret_cast<char*>(&vehicle_signal_) -
    reinterpret_cast<char*>(&main_decision_) + sizeof(vehicle_signal_));
}

DecisionResult::~DecisionResult() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DecisionResult)
  SharedDtor();
}

void DecisionResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete main_decision_;
  }
  if (this != internal_default_instance()) {
    delete object_decision_;
  }
  if (this != internal_default_instance()) {
    delete vehicle_signal_;
  }
}

void DecisionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionResult::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionResult& DecisionResult::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecisionResult* DecisionResult::New(::google::protobuf::Arena* arena) const {
  DecisionResult* n = new DecisionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DecisionResult)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_main_decision()) {
      GOOGLE_DCHECK(main_decision_ != NULL);
      main_decision_->::jmc_auto::planning::MainDecision::Clear();
    }
    if (has_object_decision()) {
      GOOGLE_DCHECK(object_decision_ != NULL);
      object_decision_->::jmc_auto::planning::ObjectDecisions::Clear();
    }
    if (has_vehicle_signal()) {
      GOOGLE_DCHECK(vehicle_signal_ != NULL);
      vehicle_signal_->::jmc_auto::common::VehicleSignal::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DecisionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DecisionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.MainDecision main_decision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ObjectDecisions object_decision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.VehicleSignal vehicle_signal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DecisionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DecisionResult)
  return false;
#undef DO_
}

void DecisionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DecisionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainDecision main_decision = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->main_decision_, output);
  }

  // optional .jmc_auto.planning.ObjectDecisions object_decision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_decision_, output);
  }

  // optional .jmc_auto.common.VehicleSignal vehicle_signal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vehicle_signal_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DecisionResult)
}

::google::protobuf::uint8* DecisionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DecisionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.MainDecision main_decision = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->main_decision_, deterministic, target);
  }

  // optional .jmc_auto.planning.ObjectDecisions object_decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->object_decision_, deterministic, target);
  }

  // optional .jmc_auto.common.VehicleSignal vehicle_signal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->vehicle_signal_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DecisionResult)
  return target;
}

size_t DecisionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DecisionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.planning.MainDecision main_decision = 1;
    if (has_main_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->main_decision_);
    }

    // optional .jmc_auto.planning.ObjectDecisions object_decision = 2;
    if (has_object_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->object_decision_);
    }

    // optional .jmc_auto.common.VehicleSignal vehicle_signal = 3;
    if (has_vehicle_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_signal_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DecisionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DecisionResult)
    MergeFrom(*source);
  }
}

void DecisionResult::MergeFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_main_decision()->::jmc_auto::planning::MainDecision::MergeFrom(from.main_decision());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_object_decision()->::jmc_auto::planning::ObjectDecisions::MergeFrom(from.object_decision());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vehicle_signal()->::jmc_auto::common::VehicleSignal::MergeFrom(from.vehicle_signal());
    }
  }
}

void DecisionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionResult::CopyFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionResult::IsInitialized() const {
  return true;
}

void DecisionResult::Swap(DecisionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionResult::InternalSwap(DecisionResult* other) {
  std::swap(main_decision_, other->main_decision_);
  std::swap(object_decision_, other->object_decision_);
  std::swap(vehicle_signal_, other->vehicle_signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionResult::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionResult

// optional .jmc_auto.planning.MainDecision main_decision = 1;
bool DecisionResult::has_main_decision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DecisionResult::set_has_main_decision() {
  _has_bits_[0] |= 0x00000001u;
}
void DecisionResult::clear_has_main_decision() {
  _has_bits_[0] &= ~0x00000001u;
}
void DecisionResult::clear_main_decision() {
  if (main_decision_ != NULL) main_decision_->::jmc_auto::planning::MainDecision::Clear();
  clear_has_main_decision();
}
const ::jmc_auto::planning::MainDecision& DecisionResult::main_decision() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DecisionResult.main_decision)
  return main_decision_ != NULL ? *main_decision_
                         : *::jmc_auto::planning::MainDecision::internal_default_instance();
}
::jmc_auto::planning::MainDecision* DecisionResult::mutable_main_decision() {
  set_has_main_decision();
  if (main_decision_ == NULL) {
    main_decision_ = new ::jmc_auto::planning::MainDecision;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DecisionResult.main_decision)
  return main_decision_;
}
::jmc_auto::planning::MainDecision* DecisionResult::release_main_decision() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DecisionResult.main_decision)
  clear_has_main_decision();
  ::jmc_auto::planning::MainDecision* temp = main_decision_;
  main_decision_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_main_decision(::jmc_auto::planning::MainDecision* main_decision) {
  delete main_decision_;
  main_decision_ = main_decision;
  if (main_decision) {
    set_has_main_decision();
  } else {
    clear_has_main_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DecisionResult.main_decision)
}

// optional .jmc_auto.planning.ObjectDecisions object_decision = 2;
bool DecisionResult::has_object_decision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionResult::set_has_object_decision() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionResult::clear_has_object_decision() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionResult::clear_object_decision() {
  if (object_decision_ != NULL) object_decision_->::jmc_auto::planning::ObjectDecisions::Clear();
  clear_has_object_decision();
}
const ::jmc_auto::planning::ObjectDecisions& DecisionResult::object_decision() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DecisionResult.object_decision)
  return object_decision_ != NULL ? *object_decision_
                         : *::jmc_auto::planning::ObjectDecisions::internal_default_instance();
}
::jmc_auto::planning::ObjectDecisions* DecisionResult::mutable_object_decision() {
  set_has_object_decision();
  if (object_decision_ == NULL) {
    object_decision_ = new ::jmc_auto::planning::ObjectDecisions;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DecisionResult.object_decision)
  return object_decision_;
}
::jmc_auto::planning::ObjectDecisions* DecisionResult::release_object_decision() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DecisionResult.object_decision)
  clear_has_object_decision();
  ::jmc_auto::planning::ObjectDecisions* temp = object_decision_;
  object_decision_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_object_decision(::jmc_auto::planning::ObjectDecisions* object_decision) {
  delete object_decision_;
  object_decision_ = object_decision;
  if (object_decision) {
    set_has_object_decision();
  } else {
    clear_has_object_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DecisionResult.object_decision)
}

// optional .jmc_auto.common.VehicleSignal vehicle_signal = 3;
bool DecisionResult::has_vehicle_signal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DecisionResult::set_has_vehicle_signal() {
  _has_bits_[0] |= 0x00000004u;
}
void DecisionResult::clear_has_vehicle_signal() {
  _has_bits_[0] &= ~0x00000004u;
}
void DecisionResult::clear_vehicle_signal() {
  if (vehicle_signal_ != NULL) vehicle_signal_->::jmc_auto::common::VehicleSignal::Clear();
  clear_has_vehicle_signal();
}
const ::jmc_auto::common::VehicleSignal& DecisionResult::vehicle_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DecisionResult.vehicle_signal)
  return vehicle_signal_ != NULL ? *vehicle_signal_
                         : *::jmc_auto::common::VehicleSignal::internal_default_instance();
}
::jmc_auto::common::VehicleSignal* DecisionResult::mutable_vehicle_signal() {
  set_has_vehicle_signal();
  if (vehicle_signal_ == NULL) {
    vehicle_signal_ = new ::jmc_auto::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DecisionResult.vehicle_signal)
  return vehicle_signal_;
}
::jmc_auto::common::VehicleSignal* DecisionResult::release_vehicle_signal() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DecisionResult.vehicle_signal)
  clear_has_vehicle_signal();
  ::jmc_auto::common::VehicleSignal* temp = vehicle_signal_;
  vehicle_signal_ = NULL;
  return temp;
}
void DecisionResult::set_allocated_vehicle_signal(::jmc_auto::common::VehicleSignal* vehicle_signal) {
  delete vehicle_signal_;
  vehicle_signal_ = vehicle_signal;
  if (vehicle_signal) {
    set_has_vehicle_signal();
  } else {
    clear_has_vehicle_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DecisionResult.vehicle_signal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
