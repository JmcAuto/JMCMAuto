// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class ADCSignalsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCSignals> {
} _ADCSignals_default_instance_;
class EStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EStop> {
} _EStop_default_instance_;
class TaskStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TaskStats> {
} _TaskStats_default_instance_;
class LatencyStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats> {
} _LatencyStats_default_instance_;
class RSSInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSSInfo> {
} _RSSInfo_default_instance_;
class ADCTrajectory_CriticalRegionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory_CriticalRegion> {
} _ADCTrajectory_CriticalRegion_default_instance_;
class ADCTrajectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory> {
} _ADCTrajectory_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCSignals, signal_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, is_estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EStop, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, time_ms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, task_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyStats, init_frame_time_ms_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, is_rss_safe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, cur_dist_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, rss_safe_dist_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, acc_lon_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, acc_lon_range_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, acc_lat_left_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, acc_lat_left_range_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, acc_lat_right_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSSInfo, acc_lat_right_range_maximum_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory_CriticalRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory_CriticalRegion, region_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, total_path_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, is_replan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, replan_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, latency_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, routing_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, right_of_way_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, engage_advice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, critical_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, trajectory_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, target_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTrajectory, rss_info_),
  1,
  10,
  11,
  ~0u,
  2,
  ~0u,
  12,
  0,
  13,
  4,
  5,
  6,
  3,
  14,
  ~0u,
  7,
  8,
  15,
  ~0u,
  9,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ADCSignals)},
  { 7, 14, sizeof(EStop)},
  { 16, 23, sizeof(TaskStats)},
  { 25, 33, sizeof(LatencyStats)},
  { 36, 50, sizeof(RSSInfo)},
  { 59, 65, sizeof(ADCTrajectory_CriticalRegion)},
  { 66, 91, sizeof(ADCTrajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCSignals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TaskStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSSInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCTrajectory_CriticalRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ADCTrajectory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _ADCSignals_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EStop_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TaskStats_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LatencyStats_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RSSInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ADCTrajectory_CriticalRegion_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ADCTrajectory_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::InitDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::InitDefaults();
  ::jmc_auto::planning_internal::protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::InitDefaults();
  _ADCSignals_default_instance_.DefaultConstruct();
  _EStop_default_instance_.DefaultConstruct();
  _TaskStats_default_instance_.DefaultConstruct();
  _LatencyStats_default_instance_.DefaultConstruct();
  _RSSInfo_default_instance_.DefaultConstruct();
  _ADCTrajectory_CriticalRegion_default_instance_.DefaultConstruct();
  _ADCTrajectory_default_instance_.DefaultConstruct();
  _ADCTrajectory_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->estop_ = const_cast< ::jmc_auto::planning::EStop*>(
      ::jmc_auto::planning::EStop::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->decision_ = const_cast< ::jmc_auto::planning::DecisionResult*>(
      ::jmc_auto::planning::DecisionResult::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->latency_stats_ = const_cast< ::jmc_auto::planning::LatencyStats*>(
      ::jmc_auto::planning::LatencyStats::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->routing_header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->debug_ = const_cast< ::jmc_auto::planning_internal::Debug*>(
      ::jmc_auto::planning_internal::Debug::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->engage_advice_ = const_cast< ::jmc_auto::common::EngageAdvice*>(
      ::jmc_auto::common::EngageAdvice::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->critical_region_ = const_cast< ::jmc_auto::planning::ADCTrajectory_CriticalRegion*>(
      ::jmc_auto::planning::ADCTrajectory_CriticalRegion::internal_default_instance());
  _ADCTrajectory_default_instance_.get_mutable()->rss_info_ = const_cast< ::jmc_auto::planning::RSSInfo*>(
      ::jmc_auto::planning::RSSInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%modules/planning/proto/planning.proto\022"
      "\021jmc_auto.planning\032\"modules/canbus/proto"
      "/chassis.proto\032&modules/common/proto/dri"
      "ve_state.proto\032#modules/common/proto/geo"
      "metry.proto\032!modules/common/proto/header"
      ".proto\032$modules/common/proto/pnc_point.p"
      "roto\032\036modules/map/proto/map_id.proto\032%mo"
      "dules/planning/proto/decision.proto\032.mod"
      "ules/planning/proto/planning_internal.pr"
      "oto\"\300\001\n\nADCSignals\0228\n\006signal\030\001 \003(\0162(.jmc"
      "_auto.planning.ADCSignals.SignalType\"x\n\n"
      "SignalType\022\r\n\tLEFT_TURN\020\001\022\016\n\nRIGHT_TURN\020"
      "\002\022\022\n\016LOW_BEAM_LIGHT\020\003\022\023\n\017HIGH_BEAM_LIGHT"
      "\020\004\022\r\n\tFOG_LIGHT\020\005\022\023\n\017EMERGENCY_LIGHT\020\006\")"
      "\n\005EStop\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002 \001("
      "\t\"*\n\tTaskStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_ms\030"
      "\002 \001(\001\"s\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001"
      " \001(\001\0220\n\ntask_stats\030\002 \003(\0132\034.jmc_auto.plan"
      "ning.TaskStats\022\032\n\022init_frame_time_ms\030\003 \001"
      "(\001\"\237\002\n\007RSSInfo\022\023\n\013is_rss_safe\030\001 \001(\010\022\024\n\014c"
      "ur_dist_lon\030\002 \001(\001\022\031\n\021rss_safe_dist_lon\030\003"
      " \001(\001\022\035\n\025acc_lon_range_minimum\030\004 \001(\001\022\035\n\025a"
      "cc_lon_range_maximum\030\005 \001(\001\022\"\n\032acc_lat_le"
      "ft_range_minimum\030\006 \001(\001\022\"\n\032acc_lat_left_r"
      "ange_maximum\030\007 \001(\001\022#\n\033acc_lat_right_rang"
      "e_minimum\030\010 \001(\001\022#\n\033acc_lat_right_range_m"
      "aximum\030\t \001(\001\"\254\t\n\rADCTrajectory\022\'\n\006header"
      "\030\001 \001(\0132\027.jmc_auto.common.Header\022\031\n\021total"
      "_path_length\030\002 \001(\001\022\027\n\017total_path_time\030\003 "
      "\001(\001\022:\n\020trajectory_point\030\014 \003(\0132 .jmc_auto"
      ".common.TrajectoryPoint\022\'\n\005estop\030\006 \001(\0132\030"
      ".jmc_auto.planning.EStop\022.\n\npath_point\030\r"
      " \003(\0132\032.jmc_auto.common.PathPoint\022\030\n\tis_r"
      "eplan\030\t \001(\010:\005false\022\025\n\rreplan_reason\030\026 \001("
      "\t\0223\n\004gear\030\n \001(\0162%.jmc_auto.canbus.Chassi"
      "s.GearPosition\0223\n\010decision\030\016 \001(\0132!.jmc_a"
      "uto.planning.DecisionResult\0226\n\rlatency_s"
      "tats\030\017 \001(\0132\037.jmc_auto.planning.LatencySt"
      "ats\022/\n\016routing_header\030\020 \001(\0132\027.jmc_auto.c"
      "ommon.Header\0220\n\005debug\030\010 \001(\0132!.jmc_auto.p"
      "lanning_internal.Debug\022N\n\023right_of_way_s"
      "tatus\030\021 \001(\01621.jmc_auto.planning.ADCTraje"
      "ctory.RightOfWayStatus\022#\n\007lane_id\030\022 \003(\0132"
      "\022.jmc_auto.hdmap.Id\0224\n\rengage_advice\030\023 \001"
      "(\0132\035.jmc_auto.common.EngageAdvice\022H\n\017cri"
      "tical_region\030\024 \001(\0132/.jmc_auto.planning.A"
      "DCTrajectory.CriticalRegion\022Q\n\017trajector"
      "y_type\030\025 \001(\0162/.jmc_auto.planning.ADCTraj"
      "ectory.TrajectoryType:\007UNKNOWN\022*\n\016target"
      "_lane_id\030\027 \003(\0132\022.jmc_auto.hdmap.Id\022,\n\010rs"
      "s_info\030d \001(\0132\032.jmc_auto.planning.RSSInfo"
      "\032:\n\016CriticalRegion\022(\n\006region\030\001 \003(\0132\030.jmc"
      "_auto.common.Polygon\"2\n\020RightOfWayStatus"
      "\022\017\n\013UNPROTECTED\020\000\022\r\n\tPROTECTED\020\001\"a\n\016Traj"
      "ectoryType\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\021\n\rP"
      "ATH_FALLBACK\020\002\022\022\n\016SPEED_FALLBACK\020\003\022\017\n\013PA"
      "TH_REUSED\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning.proto", &protobuf_RegisterTypes);
  ::jmc_auto::canbus::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::AddDescriptors();
  ::jmc_auto::planning_internal::protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[0];
}
bool ADCSignals_SignalType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCSignals_SignalType ADCSignals::LEFT_TURN;
const ADCSignals_SignalType ADCSignals::RIGHT_TURN;
const ADCSignals_SignalType ADCSignals::LOW_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::HIGH_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::FOG_LIGHT;
const ADCSignals_SignalType ADCSignals::EMERGENCY_LIGHT;
const ADCSignals_SignalType ADCSignals::SignalType_MIN;
const ADCSignals_SignalType ADCSignals::SignalType_MAX;
const int ADCSignals::SignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[1];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
const int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[2];
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_REUSED;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
const int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCSignals::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCSignals::ADCSignals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ADCSignals)
}
ADCSignals::ADCSignals(const ADCSignals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ADCSignals)
}

void ADCSignals::SharedCtor() {
  _cached_size_ = 0;
}

ADCSignals::~ADCSignals() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ADCSignals)
  SharedDtor();
}

void ADCSignals::SharedDtor() {
}

void ADCSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCSignals::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCSignals& ADCSignals::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCSignals* ADCSignals::New(::google::protobuf::Arena* arena) const {
  ADCSignals* n = new ADCSignals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ADCSignals)
  signal_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ADCSignals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.planning.ADCSignals.SignalType signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ADCSignals_SignalType_IsValid(value)) {
            add_signal(static_cast< ::jmc_auto::planning::ADCSignals_SignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::jmc_auto::planning::ADCSignals_SignalType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_signal())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ADCSignals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ADCSignals)
  return false;
#undef DO_
}

void ADCSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ADCSignals.SignalType signal = 1;
  for (int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ADCSignals)
}

::google::protobuf::uint8* ADCSignals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.planning.ADCSignals.SignalType signal = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->signal_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ADCSignals)
  return target;
}

size_t ADCSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ADCSignals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.ADCSignals.SignalType signal = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->signal_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->signal(i));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCSignals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCSignals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCSignals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ADCSignals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ADCSignals)
    MergeFrom(*source);
  }
}

void ADCSignals::MergeFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
}

void ADCSignals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCSignals::CopyFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCSignals::IsInitialized() const {
  return true;
}

void ADCSignals::Swap(ADCSignals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCSignals::InternalSwap(ADCSignals* other) {
  signal_.InternalSwap(&other->signal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCSignals::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCSignals

// repeated .jmc_auto.planning.ADCSignals.SignalType signal = 1;
int ADCSignals::signal_size() const {
  return signal_.size();
}
void ADCSignals::clear_signal() {
  signal_.Clear();
}
::jmc_auto::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCSignals.signal)
  return static_cast< ::jmc_auto::planning::ADCSignals_SignalType >(signal_.Get(index));
}
void ADCSignals::set_signal(int index, ::jmc_auto::planning::ADCSignals_SignalType value) {
  assert(::jmc_auto::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCSignals.signal)
}
void ADCSignals::add_signal(::jmc_auto::planning::ADCSignals_SignalType value) {
  assert(::jmc_auto::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ADCSignals.signal)
}
const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ADCSignals.signal)
  return signal_;
}
::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ADCSignals.signal)
  return &signal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
const int EStop::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  is_estop_ = from.is_estop_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.EStop)
}

void EStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EStop::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EStop& EStop::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

EStop* EStop::New(::google::protobuf::Arena* arena) const {
  EStop* n = new EStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.EStop)
  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  is_estop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.EStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_estop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.EStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.EStop)
  return false;
#undef DO_
}

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.EStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.EStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.EStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool is_estop = 1;
    if (has_is_estop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_estop_ = from.is_estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  reason_.Swap(&other->reason_);
  std::swap(is_estop_, other->is_estop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EStop

// optional bool is_estop = 1;
bool EStop::has_is_estop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EStop::set_has_is_estop() {
  _has_bits_[0] |= 0x00000002u;
}
void EStop::clear_has_is_estop() {
  _has_bits_[0] &= ~0x00000002u;
}
void EStop::clear_is_estop() {
  is_estop_ = false;
  clear_has_is_estop();
}
bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.EStop.is_estop)
  return is_estop_;
}
void EStop::set_is_estop(bool value) {
  set_has_is_estop();
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.EStop.is_estop)
}

// optional string reason = 2;
bool EStop::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EStop::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void EStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.EStop.reason)
  return reason_.GetNoArena();
}
void EStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.EStop.reason)
}
#if LANG_CXX11
void EStop::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.EStop.reason)
}
#endif
void EStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.EStop.reason)
}
void EStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.EStop.reason)
}
::std::string* EStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.EStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.EStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.EStop.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kNameFieldNumber;
const int TaskStats::kTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ms_ = from.time_ms_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.TaskStats)
}

void TaskStats::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStats::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskStats& TaskStats::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskStats* TaskStats::New(::google::protobuf::Arena* arena) const {
  TaskStats* n = new TaskStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.TaskStats)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.TaskStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.TaskStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.TaskStats)
  return false;
#undef DO_
}

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.TaskStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.TaskStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.TaskStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time_ms = 2;
    if (has_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  name_.Swap(&other->name_);
  std::swap(time_ms_, other->time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStats

// optional string name = 1;
bool TaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskStats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TaskStats.name)
  return name_.GetNoArena();
}
void TaskStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TaskStats.name)
}
#if LANG_CXX11
void TaskStats::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.TaskStats.name)
}
#endif
void TaskStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.TaskStats.name)
}
void TaskStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.TaskStats.name)
}
::std::string* TaskStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.TaskStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.TaskStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.TaskStats.name)
}

// optional double time_ms = 2;
bool TaskStats::has_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskStats::set_has_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskStats::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  clear_has_time_ms();
}
double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.TaskStats.time_ms)
  return time_ms_;
}
void TaskStats::set_time_ms(double value) {
  set_has_time_ms();
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.TaskStats.time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kTaskStatsFieldNumber;
const int LatencyStats::kInitFrameTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      task_stats_(from.task_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_) + sizeof(init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_time_ms_, 0, reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_) + sizeof(init_frame_time_ms_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStats& LatencyStats::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.LatencyStats)
  task_stats_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&total_time_ms_, 0, reinterpret_cast<char*>(&init_frame_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_) + sizeof(init_frame_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_total_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.planning.TaskStats task_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_frame_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_init_frame_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_frame_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated .jmc_auto.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0, n = this->task_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_stats(i), output);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_frame_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated .jmc_auto.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0, n = this->task_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->task_stats(i), deterministic, target);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_frame_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.LatencyStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.planning.TaskStats task_stats = 2;
  {
    unsigned int count = this->task_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_stats(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double total_time_ms = 1;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (has_init_frame_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_stats_.MergeFrom(from.task_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_frame_time_ms_ = from.init_frame_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  task_stats_.InternalSwap(&other->task_stats_);
  std::swap(total_time_ms_, other->total_time_ms_);
  std::swap(init_frame_time_ms_, other->init_frame_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LatencyStats

// optional double total_time_ms = 1;
bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatencyStats.total_time_ms)
  return total_time_ms_;
}
void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LatencyStats.total_time_ms)
}

// repeated .jmc_auto.planning.TaskStats task_stats = 2;
int LatencyStats::task_stats_size() const {
  return task_stats_.size();
}
void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
const ::jmc_auto::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatencyStats.task_stats)
  return task_stats_.Get(index);
}
::jmc_auto::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
::jmc_auto::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.LatencyStats.task_stats)
  return task_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.LatencyStats.task_stats)
  return &task_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
bool LatencyStats::has_init_frame_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LatencyStats::set_has_init_frame_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void LatencyStats::clear_has_init_frame_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  clear_has_init_frame_time_ms();
}
double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.LatencyStats.init_frame_time_ms)
  return init_frame_time_ms_;
}
void LatencyStats::set_init_frame_time_ms(double value) {
  set_has_init_frame_time_ms();
  init_frame_time_ms_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.LatencyStats.init_frame_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSSInfo::kIsRssSafeFieldNumber;
const int RSSInfo::kCurDistLonFieldNumber;
const int RSSInfo::kRssSafeDistLonFieldNumber;
const int RSSInfo::kAccLonRangeMinimumFieldNumber;
const int RSSInfo::kAccLonRangeMaximumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMinimumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMaximumFieldNumber;
const int RSSInfo::kAccLatRightRangeMinimumFieldNumber;
const int RSSInfo::kAccLatRightRangeMaximumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSSInfo::RSSInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.RSSInfo)
}
RSSInfo::RSSInfo(const RSSInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_dist_lon_, &from.cur_dist_lon_,
    reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&cur_dist_lon_) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.RSSInfo)
}

void RSSInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_dist_lon_, 0, reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&cur_dist_lon_) + sizeof(is_rss_safe_));
}

RSSInfo::~RSSInfo() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.RSSInfo)
  SharedDtor();
}

void RSSInfo::SharedDtor() {
}

void RSSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSSInfo::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RSSInfo& RSSInfo::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSSInfo* RSSInfo::New(::google::protobuf::Arena* arena) const {
  RSSInfo* n = new RSSInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.RSSInfo)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&cur_dist_lon_, 0, reinterpret_cast<char*>(&acc_lat_right_range_maximum_) -
      reinterpret_cast<char*>(&cur_dist_lon_) + sizeof(acc_lat_right_range_maximum_));
  }
  is_rss_safe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.RSSInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_rss_safe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_rss_safe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rss_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cur_dist_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cur_dist_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rss_safe_dist_lon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_rss_safe_dist_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rss_safe_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_minimum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_acc_lon_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_maximum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_acc_lon_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_minimum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_acc_lat_left_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_maximum = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_acc_lat_left_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_minimum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_acc_lat_right_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_maximum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_acc_lat_right_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.RSSInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.RSSInfo)
  return false;
#undef DO_
}

void RSSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_rss_safe(), output);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cur_dist_lon(), output);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rss_safe_dist_lon(), output);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acc_lon_range_minimum(), output);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acc_lon_range_maximum(), output);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acc_lat_left_range_minimum(), output);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_lat_left_range_maximum(), output);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acc_lat_right_range_minimum(), output);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->acc_lat_right_range_maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.RSSInfo)
}

::google::protobuf::uint8* RSSInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_rss_safe(), target);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cur_dist_lon(), target);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rss_safe_dist_lon(), target);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acc_lon_range_minimum(), target);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acc_lon_range_maximum(), target);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acc_lat_left_range_minimum(), target);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_lat_left_range_maximum(), target);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acc_lat_right_range_minimum(), target);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->acc_lat_right_range_maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.RSSInfo)
  return target;
}

size_t RSSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.RSSInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double cur_dist_lon = 2;
    if (has_cur_dist_lon()) {
      total_size += 1 + 8;
    }

    // optional double rss_safe_dist_lon = 3;
    if (has_rss_safe_dist_lon()) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_minimum = 4;
    if (has_acc_lon_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_maximum = 5;
    if (has_acc_lon_range_maximum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_minimum = 6;
    if (has_acc_lat_left_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_maximum = 7;
    if (has_acc_lat_left_range_maximum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_minimum = 8;
    if (has_acc_lat_right_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_maximum = 9;
    if (has_acc_lat_right_range_maximum()) {
      total_size += 1 + 8;
    }

  }
  // optional bool is_rss_safe = 1;
  if (has_is_rss_safe()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSSInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSSInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSSInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.RSSInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.RSSInfo)
    MergeFrom(*source);
  }
}

void RSSInfo::MergeFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cur_dist_lon_ = from.cur_dist_lon_;
    }
    if (cached_has_bits & 0x00000002u) {
      rss_safe_dist_lon_ = from.rss_safe_dist_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_lon_range_minimum_ = from.acc_lon_range_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_lon_range_maximum_ = from.acc_lon_range_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lat_left_range_minimum_ = from.acc_lat_left_range_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lat_left_range_maximum_ = from.acc_lat_left_range_maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lat_right_range_minimum_ = from.acc_lat_right_range_minimum_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_lat_right_range_maximum_ = from.acc_lat_right_range_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_is_rss_safe(from.is_rss_safe());
  }
}

void RSSInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSSInfo::CopyFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSSInfo::IsInitialized() const {
  return true;
}

void RSSInfo::Swap(RSSInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSSInfo::InternalSwap(RSSInfo* other) {
  std::swap(cur_dist_lon_, other->cur_dist_lon_);
  std::swap(rss_safe_dist_lon_, other->rss_safe_dist_lon_);
  std::swap(acc_lon_range_minimum_, other->acc_lon_range_minimum_);
  std::swap(acc_lon_range_maximum_, other->acc_lon_range_maximum_);
  std::swap(acc_lat_left_range_minimum_, other->acc_lat_left_range_minimum_);
  std::swap(acc_lat_left_range_maximum_, other->acc_lat_left_range_maximum_);
  std::swap(acc_lat_right_range_minimum_, other->acc_lat_right_range_minimum_);
  std::swap(acc_lat_right_range_maximum_, other->acc_lat_right_range_maximum_);
  std::swap(is_rss_safe_, other->is_rss_safe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSSInfo::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSSInfo

// optional bool is_rss_safe = 1;
bool RSSInfo::has_is_rss_safe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RSSInfo::set_has_is_rss_safe() {
  _has_bits_[0] |= 0x00000100u;
}
void RSSInfo::clear_has_is_rss_safe() {
  _has_bits_[0] &= ~0x00000100u;
}
void RSSInfo::clear_is_rss_safe() {
  is_rss_safe_ = false;
  clear_has_is_rss_safe();
}
bool RSSInfo::is_rss_safe() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.is_rss_safe)
  return is_rss_safe_;
}
void RSSInfo::set_is_rss_safe(bool value) {
  set_has_is_rss_safe();
  is_rss_safe_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.is_rss_safe)
}

// optional double cur_dist_lon = 2;
bool RSSInfo::has_cur_dist_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RSSInfo::set_has_cur_dist_lon() {
  _has_bits_[0] |= 0x00000001u;
}
void RSSInfo::clear_has_cur_dist_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
void RSSInfo::clear_cur_dist_lon() {
  cur_dist_lon_ = 0;
  clear_has_cur_dist_lon();
}
double RSSInfo::cur_dist_lon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.cur_dist_lon)
  return cur_dist_lon_;
}
void RSSInfo::set_cur_dist_lon(double value) {
  set_has_cur_dist_lon();
  cur_dist_lon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.cur_dist_lon)
}

// optional double rss_safe_dist_lon = 3;
bool RSSInfo::has_rss_safe_dist_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RSSInfo::set_has_rss_safe_dist_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void RSSInfo::clear_has_rss_safe_dist_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void RSSInfo::clear_rss_safe_dist_lon() {
  rss_safe_dist_lon_ = 0;
  clear_has_rss_safe_dist_lon();
}
double RSSInfo::rss_safe_dist_lon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.rss_safe_dist_lon)
  return rss_safe_dist_lon_;
}
void RSSInfo::set_rss_safe_dist_lon(double value) {
  set_has_rss_safe_dist_lon();
  rss_safe_dist_lon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.rss_safe_dist_lon)
}

// optional double acc_lon_range_minimum = 4;
bool RSSInfo::has_acc_lon_range_minimum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RSSInfo::set_has_acc_lon_range_minimum() {
  _has_bits_[0] |= 0x00000004u;
}
void RSSInfo::clear_has_acc_lon_range_minimum() {
  _has_bits_[0] &= ~0x00000004u;
}
void RSSInfo::clear_acc_lon_range_minimum() {
  acc_lon_range_minimum_ = 0;
  clear_has_acc_lon_range_minimum();
}
double RSSInfo::acc_lon_range_minimum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.acc_lon_range_minimum)
  return acc_lon_range_minimum_;
}
void RSSInfo::set_acc_lon_range_minimum(double value) {
  set_has_acc_lon_range_minimum();
  acc_lon_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.acc_lon_range_minimum)
}

// optional double acc_lon_range_maximum = 5;
bool RSSInfo::has_acc_lon_range_maximum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RSSInfo::set_has_acc_lon_range_maximum() {
  _has_bits_[0] |= 0x00000008u;
}
void RSSInfo::clear_has_acc_lon_range_maximum() {
  _has_bits_[0] &= ~0x00000008u;
}
void RSSInfo::clear_acc_lon_range_maximum() {
  acc_lon_range_maximum_ = 0;
  clear_has_acc_lon_range_maximum();
}
double RSSInfo::acc_lon_range_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.acc_lon_range_maximum)
  return acc_lon_range_maximum_;
}
void RSSInfo::set_acc_lon_range_maximum(double value) {
  set_has_acc_lon_range_maximum();
  acc_lon_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.acc_lon_range_maximum)
}

// optional double acc_lat_left_range_minimum = 6;
bool RSSInfo::has_acc_lat_left_range_minimum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RSSInfo::set_has_acc_lat_left_range_minimum() {
  _has_bits_[0] |= 0x00000010u;
}
void RSSInfo::clear_has_acc_lat_left_range_minimum() {
  _has_bits_[0] &= ~0x00000010u;
}
void RSSInfo::clear_acc_lat_left_range_minimum() {
  acc_lat_left_range_minimum_ = 0;
  clear_has_acc_lat_left_range_minimum();
}
double RSSInfo::acc_lat_left_range_minimum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.acc_lat_left_range_minimum)
  return acc_lat_left_range_minimum_;
}
void RSSInfo::set_acc_lat_left_range_minimum(double value) {
  set_has_acc_lat_left_range_minimum();
  acc_lat_left_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.acc_lat_left_range_minimum)
}

// optional double acc_lat_left_range_maximum = 7;
bool RSSInfo::has_acc_lat_left_range_maximum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RSSInfo::set_has_acc_lat_left_range_maximum() {
  _has_bits_[0] |= 0x00000020u;
}
void RSSInfo::clear_has_acc_lat_left_range_maximum() {
  _has_bits_[0] &= ~0x00000020u;
}
void RSSInfo::clear_acc_lat_left_range_maximum() {
  acc_lat_left_range_maximum_ = 0;
  clear_has_acc_lat_left_range_maximum();
}
double RSSInfo::acc_lat_left_range_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.acc_lat_left_range_maximum)
  return acc_lat_left_range_maximum_;
}
void RSSInfo::set_acc_lat_left_range_maximum(double value) {
  set_has_acc_lat_left_range_maximum();
  acc_lat_left_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.acc_lat_left_range_maximum)
}

// optional double acc_lat_right_range_minimum = 8;
bool RSSInfo::has_acc_lat_right_range_minimum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RSSInfo::set_has_acc_lat_right_range_minimum() {
  _has_bits_[0] |= 0x00000040u;
}
void RSSInfo::clear_has_acc_lat_right_range_minimum() {
  _has_bits_[0] &= ~0x00000040u;
}
void RSSInfo::clear_acc_lat_right_range_minimum() {
  acc_lat_right_range_minimum_ = 0;
  clear_has_acc_lat_right_range_minimum();
}
double RSSInfo::acc_lat_right_range_minimum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.acc_lat_right_range_minimum)
  return acc_lat_right_range_minimum_;
}
void RSSInfo::set_acc_lat_right_range_minimum(double value) {
  set_has_acc_lat_right_range_minimum();
  acc_lat_right_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.acc_lat_right_range_minimum)
}

// optional double acc_lat_right_range_maximum = 9;
bool RSSInfo::has_acc_lat_right_range_maximum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RSSInfo::set_has_acc_lat_right_range_maximum() {
  _has_bits_[0] |= 0x00000080u;
}
void RSSInfo::clear_has_acc_lat_right_range_maximum() {
  _has_bits_[0] &= ~0x00000080u;
}
void RSSInfo::clear_acc_lat_right_range_maximum() {
  acc_lat_right_range_maximum_ = 0;
  clear_has_acc_lat_right_range_maximum();
}
double RSSInfo::acc_lat_right_range_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.RSSInfo.acc_lat_right_range_maximum)
  return acc_lat_right_range_maximum_;
}
void RSSInfo::set_acc_lat_right_range_maximum(double value) {
  set_has_acc_lat_right_range_maximum();
  acc_lat_right_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.RSSInfo.acc_lat_right_range_maximum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory_CriticalRegion::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ADCTrajectory.CriticalRegion)
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      region_(from.region_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ADCTrajectory.CriticalRegion)
}

void ADCTrajectory_CriticalRegion::SharedCtor() {
  _cached_size_ = 0;
}

ADCTrajectory_CriticalRegion::~ADCTrajectory_CriticalRegion() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  SharedDtor();
}

void ADCTrajectory_CriticalRegion::SharedDtor() {
}

void ADCTrajectory_CriticalRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory_CriticalRegion::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectory_CriticalRegion& ADCTrajectory_CriticalRegion::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCTrajectory_CriticalRegion* ADCTrajectory_CriticalRegion::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory_CriticalRegion* n = new ADCTrajectory_CriticalRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory_CriticalRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  region_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectory_CriticalRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.Polygon region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  return false;
#undef DO_
}

void ADCTrajectory_CriticalRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Polygon region = 1;
  for (unsigned int i = 0, n = this->region_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->region(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ADCTrajectory.CriticalRegion)
}

::google::protobuf::uint8* ADCTrajectory_CriticalRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Polygon region = 1;
  for (unsigned int i = 0, n = this->region_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->region(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  return target;
}

size_t ADCTrajectory_CriticalRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Polygon region = 1;
  {
    unsigned int count = this->region_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory_CriticalRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory_CriticalRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ADCTrajectory.CriticalRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ADCTrajectory.CriticalRegion)
    MergeFrom(*source);
  }
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory_CriticalRegion::IsInitialized() const {
  return true;
}

void ADCTrajectory_CriticalRegion::Swap(ADCTrajectory_CriticalRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory_CriticalRegion::InternalSwap(ADCTrajectory_CriticalRegion* other) {
  region_.InternalSwap(&other->region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory_CriticalRegion::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectory_CriticalRegion

// repeated .jmc_auto.common.Polygon region = 1;
int ADCTrajectory_CriticalRegion::region_size() const {
  return region_.size();
}
void ADCTrajectory_CriticalRegion::clear_region() {
  region_.Clear();
}
const ::jmc_auto::common::Polygon& ADCTrajectory_CriticalRegion::region(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Get(index);
}
::jmc_auto::common::Polygon* ADCTrajectory_CriticalRegion::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Mutable(index);
}
::jmc_auto::common::Polygon* ADCTrajectory_CriticalRegion::add_region() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Polygon >*
ADCTrajectory_CriticalRegion::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ADCTrajectory.CriticalRegion.region)
  return &region_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Polygon >&
ADCTrajectory_CriticalRegion::region() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ADCTrajectory.CriticalRegion.region)
  return region_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kTrajectoryPointFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kPathPointFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kReplanReasonFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kDecisionFieldNumber;
const int ADCTrajectory::kLatencyStatsFieldNumber;
const int ADCTrajectory::kRoutingHeaderFieldNumber;
const int ADCTrajectory::kDebugFieldNumber;
const int ADCTrajectory::kRightOfWayStatusFieldNumber;
const int ADCTrajectory::kLaneIdFieldNumber;
const int ADCTrajectory::kEngageAdviceFieldNumber;
const int ADCTrajectory::kCriticalRegionFieldNumber;
const int ADCTrajectory::kTrajectoryTypeFieldNumber;
const int ADCTrajectory::kTargetLaneIdFieldNumber;
const int ADCTrajectory::kRssInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_),
      lane_id_(from.lane_id_),
      target_lane_id_(from.target_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replan_reason()) {
    replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
  }
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_estop()) {
    estop_ = new ::jmc_auto::planning::EStop(*from.estop_);
  } else {
    estop_ = NULL;
  }
  if (from.has_debug()) {
    debug_ = new ::jmc_auto::planning_internal::Debug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_decision()) {
    decision_ = new ::jmc_auto::planning::DecisionResult(*from.decision_);
  } else {
    decision_ = NULL;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::jmc_auto::planning::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = NULL;
  }
  if (from.has_routing_header()) {
    routing_header_ = new ::jmc_auto::common::Header(*from.routing_header_);
  } else {
    routing_header_ = NULL;
  }
  if (from.has_engage_advice()) {
    engage_advice_ = new ::jmc_auto::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = NULL;
  }
  if (from.has_critical_region()) {
    critical_region_ = new ::jmc_auto::planning::ADCTrajectory_CriticalRegion(*from.critical_region_);
  } else {
    critical_region_ = NULL;
  }
  if (from.has_rss_info()) {
    rss_info_ = new ::jmc_auto::planning::RSSInfo(*from.rss_info_);
  } else {
    rss_info_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&total_path_length_) + sizeof(trajectory_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  _cached_size_ = 0;
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(trajectory_type_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  replan_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete estop_;
  }
  if (this != internal_default_instance()) {
    delete debug_;
  }
  if (this != internal_default_instance()) {
    delete decision_;
  }
  if (this != internal_default_instance()) {
    delete latency_stats_;
  }
  if (this != internal_default_instance()) {
    delete routing_header_;
  }
  if (this != internal_default_instance()) {
    delete engage_advice_;
  }
  if (this != internal_default_instance()) {
    delete critical_region_;
  }
  if (this != internal_default_instance()) {
    delete rss_info_;
  }
}

void ADCTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectory& ADCTrajectory::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADCTrajectory* ADCTrajectory::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory* n = new ADCTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ADCTrajectory)
  trajectory_point_.Clear();
  path_point_.Clear();
  lane_id_.Clear();
  target_lane_id_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_replan_reason()) {
      GOOGLE_DCHECK(!replan_reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*replan_reason_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_estop()) {
      GOOGLE_DCHECK(estop_ != NULL);
      estop_->::jmc_auto::planning::EStop::Clear();
    }
    if (has_debug()) {
      GOOGLE_DCHECK(debug_ != NULL);
      debug_->::jmc_auto::planning_internal::Debug::Clear();
    }
    if (has_decision()) {
      GOOGLE_DCHECK(decision_ != NULL);
      decision_->::jmc_auto::planning::DecisionResult::Clear();
    }
    if (has_latency_stats()) {
      GOOGLE_DCHECK(latency_stats_ != NULL);
      latency_stats_->::jmc_auto::planning::LatencyStats::Clear();
    }
    if (has_routing_header()) {
      GOOGLE_DCHECK(routing_header_ != NULL);
      routing_header_->::jmc_auto::common::Header::Clear();
    }
    if (has_engage_advice()) {
      GOOGLE_DCHECK(engage_advice_ != NULL);
      engage_advice_->::jmc_auto::common::EngageAdvice::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_critical_region()) {
      GOOGLE_DCHECK(critical_region_ != NULL);
      critical_region_->::jmc_auto::planning::ADCTrajectory_CriticalRegion::Clear();
    }
    if (has_rss_info()) {
      GOOGLE_DCHECK(rss_info_ != NULL);
      rss_info_->::jmc_auto::planning::RSSInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 64512u) {
    ::memset(&total_path_length_, 0, reinterpret_cast<char*>(&trajectory_type_) -
      reinterpret_cast<char*>(&total_path_length_) + sizeof(trajectory_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ADCTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_total_path_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.EStop estop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning_internal.Debug debug = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_replan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.PathPoint path_point = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DecisionResult decision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.LatencyStats latency_stats = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Header routing_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ADCTrajectory_RightOfWayStatus_IsValid(value)) {
            set_right_of_way_status(static_cast< ::jmc_auto::planning::ADCTrajectory_RightOfWayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id lane_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.EngageAdvice engage_advice = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ADCTrajectory.CriticalRegion critical_region = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_critical_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::ADCTrajectory_TrajectoryType_IsValid(value)) {
            set_trajectory_type(static_cast< ::jmc_auto::planning::ADCTrajectory_TrajectoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string replan_reason = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replan_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replan_reason().data(), this->replan_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.ADCTrajectory.replan_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id target_lane_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.RSSInfo rss_info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(802u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rss_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ADCTrajectory)
  return false;
#undef DO_
}

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // optional .jmc_auto.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->estop_, output);
  }

  // optional .jmc_auto.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->debug_, output);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear(), output);
  }

  // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trajectory_point(i), output);
  }

  // repeated .jmc_auto.common.PathPoint path_point = 13;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->path_point(i), output);
  }

  // optional .jmc_auto.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->decision_, output);
  }

  // optional .jmc_auto.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->latency_stats_, output);
  }

  // optional .jmc_auto.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->routing_header_, output);
  }

  // optional .jmc_auto.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->right_of_way_status(), output);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 18;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->lane_id(i), output);
  }

  // optional .jmc_auto.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->engage_advice_, output);
  }

  // optional .jmc_auto.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->critical_region_, output);
  }

  // optional .jmc_auto.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->trajectory_type(), output);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), this->replan_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.ADCTrajectory.replan_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->replan_reason(), output);
  }

  // repeated .jmc_auto.hdmap.Id target_lane_id = 23;
  for (unsigned int i = 0, n = this->target_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->target_lane_id(i), output);
  }

  // optional .jmc_auto.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->rss_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // optional .jmc_auto.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->estop_, deterministic, target);
  }

  // optional .jmc_auto.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->debug_, deterministic, target);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear(), target);
  }

  // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->trajectory_point(i), deterministic, target);
  }

  // repeated .jmc_auto.common.PathPoint path_point = 13;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->path_point(i), deterministic, target);
  }

  // optional .jmc_auto.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->decision_, deterministic, target);
  }

  // optional .jmc_auto.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->latency_stats_, deterministic, target);
  }

  // optional .jmc_auto.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->routing_header_, deterministic, target);
  }

  // optional .jmc_auto.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_of_way_status(), target);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 18;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->engage_advice_, deterministic, target);
  }

  // optional .jmc_auto.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->critical_region_, deterministic, target);
  }

  // optional .jmc_auto.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->trajectory_type(), target);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), this->replan_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.ADCTrajectory.replan_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->replan_reason(), target);
  }

  // repeated .jmc_auto.hdmap.Id target_lane_id = 23;
  for (unsigned int i = 0, n = this->target_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->target_lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->rss_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ADCTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 12;
  {
    unsigned int count = this->trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(i));
    }
  }

  // repeated .jmc_auto.common.PathPoint path_point = 13;
  {
    unsigned int count = this->path_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_point(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 18;
  {
    unsigned int count = this->lane_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id target_lane_id = 23;
  {
    unsigned int count = this->target_lane_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_lane_id(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string replan_reason = 22;
    if (has_replan_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replan_reason());
    }

    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.planning.EStop estop = 6;
    if (has_estop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->estop_);
    }

    // optional .jmc_auto.planning_internal.Debug debug = 8;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_);
    }

    // optional .jmc_auto.planning.DecisionResult decision = 14;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decision_);
    }

    // optional .jmc_auto.planning.LatencyStats latency_stats = 15;
    if (has_latency_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->latency_stats_);
    }

    // optional .jmc_auto.common.Header routing_header = 16;
    if (has_routing_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_header_);
    }

    // optional .jmc_auto.common.EngageAdvice engage_advice = 19;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    if (has_critical_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->critical_region_);
    }

    // optional .jmc_auto.planning.RSSInfo rss_info = 100;
    if (has_rss_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rss_info_);
    }

    // optional double total_path_length = 2;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (has_total_path_time()) {
      total_size += 1 + 8;
    }

    // optional bool is_replan = 9 [default = false];
    if (has_is_replan()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.canbus.Chassis.GearPosition gear = 10;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional .jmc_auto.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (has_right_of_way_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_of_way_status());
    }

    // optional .jmc_auto.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    if (has_trajectory_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trajectory_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  lane_id_.MergeFrom(from.lane_id_);
  target_lane_id_.MergeFrom(from.target_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_replan_reason();
      replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_estop()->::jmc_auto::planning::EStop::MergeFrom(from.estop());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_debug()->::jmc_auto::planning_internal::Debug::MergeFrom(from.debug());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_decision()->::jmc_auto::planning::DecisionResult::MergeFrom(from.decision());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_latency_stats()->::jmc_auto::planning::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_routing_header()->::jmc_auto::common::Header::MergeFrom(from.routing_header());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_engage_advice()->::jmc_auto::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_critical_region()->::jmc_auto::planning::ADCTrajectory_CriticalRegion::MergeFrom(from.critical_region());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_rss_info()->::jmc_auto::planning::RSSInfo::MergeFrom(from.rss_info());
    }
    if (cached_has_bits & 0x00000400u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_path_time_ = from.total_path_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_replan_ = from.is_replan_;
    }
    if (cached_has_bits & 0x00002000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00004000u) {
      right_of_way_status_ = from.right_of_way_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      trajectory_type_ = from.trajectory_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  path_point_.InternalSwap(&other->path_point_);
  lane_id_.InternalSwap(&other->lane_id_);
  target_lane_id_.InternalSwap(&other->target_lane_id_);
  replan_reason_.Swap(&other->replan_reason_);
  std::swap(header_, other->header_);
  std::swap(estop_, other->estop_);
  std::swap(debug_, other->debug_);
  std::swap(decision_, other->decision_);
  std::swap(latency_stats_, other->latency_stats_);
  std::swap(routing_header_, other->routing_header_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(critical_region_, other->critical_region_);
  std::swap(rss_info_, other->rss_info_);
  std::swap(total_path_length_, other->total_path_length_);
  std::swap(total_path_time_, other->total_path_time_);
  std::swap(is_replan_, other->is_replan_);
  std::swap(gear_, other->gear_);
  std::swap(right_of_way_status_, other->right_of_way_status_);
  std::swap(trajectory_type_, other->trajectory_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADCTrajectory

// optional .jmc_auto.common.Header header = 1;
bool ADCTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADCTrajectory::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void ADCTrajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADCTrajectory::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* ADCTrajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.header)
  return header_;
}
::jmc_auto::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
bool ADCTrajectory::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ADCTrajectory::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000400u;
}
void ADCTrajectory::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000400u;
}
void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
void ADCTrajectory::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
bool ADCTrajectory::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ADCTrajectory::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000800u;
}
void ADCTrajectory::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  clear_has_total_path_time();
}
double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
void ADCTrajectory::set_total_path_time(double value) {
  set_has_total_path_time();
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.total_path_time)
}

// repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 12;
int ADCTrajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::jmc_auto::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::jmc_auto::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::jmc_auto::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// optional .jmc_auto.planning.EStop estop = 6;
bool ADCTrajectory::has_estop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADCTrajectory::set_has_estop() {
  _has_bits_[0] |= 0x00000004u;
}
void ADCTrajectory::clear_has_estop() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectory::clear_estop() {
  if (estop_ != NULL) estop_->::jmc_auto::planning::EStop::Clear();
  clear_has_estop();
}
const ::jmc_auto::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.estop)
  return estop_ != NULL ? *estop_
                         : *::jmc_auto::planning::EStop::internal_default_instance();
}
::jmc_auto::planning::EStop* ADCTrajectory::mutable_estop() {
  set_has_estop();
  if (estop_ == NULL) {
    estop_ = new ::jmc_auto::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.estop)
  return estop_;
}
::jmc_auto::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.estop)
  clear_has_estop();
  ::jmc_auto::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_estop(::jmc_auto::planning::EStop* estop) {
  delete estop_;
  estop_ = estop;
  if (estop) {
    set_has_estop();
  } else {
    clear_has_estop();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.estop)
}

// repeated .jmc_auto.common.PathPoint path_point = 13;
int ADCTrajectory::path_point_size() const {
  return path_point_.size();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
const ::jmc_auto::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.path_point)
  return path_point_.Get(index);
}
::jmc_auto::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
::jmc_auto::common::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ADCTrajectory.path_point)
  return path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ADCTrajectory.path_point)
  return &path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional bool is_replan = 9 [default = false];
bool ADCTrajectory::has_is_replan() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ADCTrajectory::set_has_is_replan() {
  _has_bits_[0] |= 0x00001000u;
}
void ADCTrajectory::clear_has_is_replan() {
  _has_bits_[0] &= ~0x00001000u;
}
void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  clear_has_is_replan();
}
bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
void ADCTrajectory::set_is_replan(bool value) {
  set_has_is_replan();
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.is_replan)
}

// optional string replan_reason = 22;
bool ADCTrajectory::has_replan_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADCTrajectory::set_has_replan_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void ADCTrajectory::clear_has_replan_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectory::clear_replan_reason() {
  replan_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replan_reason();
}
const ::std::string& ADCTrajectory::replan_reason() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.replan_reason)
  return replan_reason_.GetNoArena();
}
void ADCTrajectory::set_replan_reason(const ::std::string& value) {
  set_has_replan_reason();
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.replan_reason)
}
#if LANG_CXX11
void ADCTrajectory::set_replan_reason(::std::string&& value) {
  set_has_replan_reason();
  replan_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.ADCTrajectory.replan_reason)
}
#endif
void ADCTrajectory::set_replan_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replan_reason();
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.ADCTrajectory.replan_reason)
}
void ADCTrajectory::set_replan_reason(const char* value, size_t size) {
  set_has_replan_reason();
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.ADCTrajectory.replan_reason)
}
::std::string* ADCTrajectory::mutable_replan_reason() {
  set_has_replan_reason();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.replan_reason)
  return replan_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ADCTrajectory::release_replan_reason() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.replan_reason)
  clear_has_replan_reason();
  return replan_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ADCTrajectory::set_allocated_replan_reason(::std::string* replan_reason) {
  if (replan_reason != NULL) {
    set_has_replan_reason();
  } else {
    clear_has_replan_reason();
  }
  replan_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replan_reason);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.replan_reason)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear = 10;
bool ADCTrajectory::has_gear() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ADCTrajectory::set_has_gear() {
  _has_bits_[0] |= 0x00002000u;
}
void ADCTrajectory::clear_has_gear() {
  _has_bits_[0] &= ~0x00002000u;
}
void ADCTrajectory::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
::jmc_auto::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.gear)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_);
}
void ADCTrajectory::set_gear(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.gear)
}

// optional .jmc_auto.planning.DecisionResult decision = 14;
bool ADCTrajectory::has_decision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADCTrajectory::set_has_decision() {
  _has_bits_[0] |= 0x00000010u;
}
void ADCTrajectory::clear_has_decision() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectory::clear_decision() {
  if (decision_ != NULL) decision_->::jmc_auto::planning::DecisionResult::Clear();
  clear_has_decision();
}
const ::jmc_auto::planning::DecisionResult& ADCTrajectory::decision() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.decision)
  return decision_ != NULL ? *decision_
                         : *::jmc_auto::planning::DecisionResult::internal_default_instance();
}
::jmc_auto::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::jmc_auto::planning::DecisionResult;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.decision)
  return decision_;
}
::jmc_auto::planning::DecisionResult* ADCTrajectory::release_decision() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.decision)
  clear_has_decision();
  ::jmc_auto::planning::DecisionResult* temp = decision_;
  decision_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_decision(::jmc_auto::planning::DecisionResult* decision) {
  delete decision_;
  decision_ = decision;
  if (decision) {
    set_has_decision();
  } else {
    clear_has_decision();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.decision)
}

// optional .jmc_auto.planning.LatencyStats latency_stats = 15;
bool ADCTrajectory::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ADCTrajectory::set_has_latency_stats() {
  _has_bits_[0] |= 0x00000020u;
}
void ADCTrajectory::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->::jmc_auto::planning::LatencyStats::Clear();
  clear_has_latency_stats();
}
const ::jmc_auto::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.latency_stats)
  return latency_stats_ != NULL ? *latency_stats_
                         : *::jmc_auto::planning::LatencyStats::internal_default_instance();
}
::jmc_auto::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::jmc_auto::planning::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.latency_stats)
  return latency_stats_;
}
::jmc_auto::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.latency_stats)
  clear_has_latency_stats();
  ::jmc_auto::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_latency_stats(::jmc_auto::planning::LatencyStats* latency_stats) {
  delete latency_stats_;
  latency_stats_ = latency_stats;
  if (latency_stats) {
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.latency_stats)
}

// optional .jmc_auto.common.Header routing_header = 16;
bool ADCTrajectory::has_routing_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADCTrajectory::set_has_routing_header() {
  _has_bits_[0] |= 0x00000040u;
}
void ADCTrajectory::clear_has_routing_header() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != NULL) routing_header_->::jmc_auto::common::Header::Clear();
  clear_has_routing_header();
}
const ::jmc_auto::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.routing_header)
  return routing_header_ != NULL ? *routing_header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* ADCTrajectory::mutable_routing_header() {
  set_has_routing_header();
  if (routing_header_ == NULL) {
    routing_header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.routing_header)
  return routing_header_;
}
::jmc_auto::common::Header* ADCTrajectory::release_routing_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.routing_header)
  clear_has_routing_header();
  ::jmc_auto::common::Header* temp = routing_header_;
  routing_header_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_routing_header(::jmc_auto::common::Header* routing_header) {
  delete routing_header_;
  routing_header_ = routing_header;
  if (routing_header) {
    set_has_routing_header();
  } else {
    clear_has_routing_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.routing_header)
}

// optional .jmc_auto.planning_internal.Debug debug = 8;
bool ADCTrajectory::has_debug() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADCTrajectory::set_has_debug() {
  _has_bits_[0] |= 0x00000008u;
}
void ADCTrajectory::clear_has_debug() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectory::clear_debug() {
  if (debug_ != NULL) debug_->::jmc_auto::planning_internal::Debug::Clear();
  clear_has_debug();
}
const ::jmc_auto::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.debug)
  return debug_ != NULL ? *debug_
                         : *::jmc_auto::planning_internal::Debug::internal_default_instance();
}
::jmc_auto::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  set_has_debug();
  if (debug_ == NULL) {
    debug_ = new ::jmc_auto::planning_internal::Debug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.debug)
  return debug_;
}
::jmc_auto::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.debug)
  clear_has_debug();
  ::jmc_auto::planning_internal::Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_debug(::jmc_auto::planning_internal::Debug* debug) {
  delete debug_;
  debug_ = debug;
  if (debug) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.debug)
}

// optional .jmc_auto.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
bool ADCTrajectory::has_right_of_way_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ADCTrajectory::set_has_right_of_way_status() {
  _has_bits_[0] |= 0x00004000u;
}
void ADCTrajectory::clear_has_right_of_way_status() {
  _has_bits_[0] &= ~0x00004000u;
}
void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  clear_has_right_of_way_status();
}
::jmc_auto::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.right_of_way_status)
  return static_cast< ::jmc_auto::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
void ADCTrajectory::set_right_of_way_status(::jmc_auto::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::jmc_auto::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  set_has_right_of_way_status();
  right_of_way_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.right_of_way_status)
}

// repeated .jmc_auto.hdmap.Id lane_id = 18;
int ADCTrajectory::lane_id_size() const {
  return lane_id_.size();
}
void ADCTrajectory::clear_lane_id() {
  lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& ADCTrajectory::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.lane_id)
  return lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* ADCTrajectory::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.lane_id)
  return lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* ADCTrajectory::add_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ADCTrajectory.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
ADCTrajectory::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ADCTrajectory.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
ADCTrajectory::lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ADCTrajectory.lane_id)
  return lane_id_;
}

// optional .jmc_auto.common.EngageAdvice engage_advice = 19;
bool ADCTrajectory::has_engage_advice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADCTrajectory::set_has_engage_advice() {
  _has_bits_[0] |= 0x00000080u;
}
void ADCTrajectory::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADCTrajectory::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::jmc_auto::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::jmc_auto::common::EngageAdvice& ADCTrajectory::engage_advice() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_
                         : *::jmc_auto::common::EngageAdvice::internal_default_instance();
}
::jmc_auto::common::EngageAdvice* ADCTrajectory::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::jmc_auto::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.engage_advice)
  return engage_advice_;
}
::jmc_auto::common::EngageAdvice* ADCTrajectory::release_engage_advice() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.engage_advice)
  clear_has_engage_advice();
  ::jmc_auto::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_engage_advice(::jmc_auto::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.engage_advice)
}

// optional .jmc_auto.planning.ADCTrajectory.CriticalRegion critical_region = 20;
bool ADCTrajectory::has_critical_region() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADCTrajectory::set_has_critical_region() {
  _has_bits_[0] |= 0x00000100u;
}
void ADCTrajectory::clear_has_critical_region() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADCTrajectory::clear_critical_region() {
  if (critical_region_ != NULL) critical_region_->::jmc_auto::planning::ADCTrajectory_CriticalRegion::Clear();
  clear_has_critical_region();
}
const ::jmc_auto::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::critical_region() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.critical_region)
  return critical_region_ != NULL ? *critical_region_
                         : *::jmc_auto::planning::ADCTrajectory_CriticalRegion::internal_default_instance();
}
::jmc_auto::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::mutable_critical_region() {
  set_has_critical_region();
  if (critical_region_ == NULL) {
    critical_region_ = new ::jmc_auto::planning::ADCTrajectory_CriticalRegion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.critical_region)
  return critical_region_;
}
::jmc_auto::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::release_critical_region() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.critical_region)
  clear_has_critical_region();
  ::jmc_auto::planning::ADCTrajectory_CriticalRegion* temp = critical_region_;
  critical_region_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_critical_region(::jmc_auto::planning::ADCTrajectory_CriticalRegion* critical_region) {
  delete critical_region_;
  critical_region_ = critical_region;
  if (critical_region) {
    set_has_critical_region();
  } else {
    clear_has_critical_region();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.critical_region)
}

// optional .jmc_auto.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
bool ADCTrajectory::has_trajectory_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ADCTrajectory::set_has_trajectory_type() {
  _has_bits_[0] |= 0x00008000u;
}
void ADCTrajectory::clear_has_trajectory_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
  clear_has_trajectory_type();
}
::jmc_auto::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.trajectory_type)
  return static_cast< ::jmc_auto::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
void ADCTrajectory::set_trajectory_type(::jmc_auto::planning::ADCTrajectory_TrajectoryType value) {
  assert(::jmc_auto::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  set_has_trajectory_type();
  trajectory_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ADCTrajectory.trajectory_type)
}

// repeated .jmc_auto.hdmap.Id target_lane_id = 23;
int ADCTrajectory::target_lane_id_size() const {
  return target_lane_id_.size();
}
void ADCTrajectory::clear_target_lane_id() {
  target_lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& ADCTrajectory::target_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.target_lane_id)
  return target_lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* ADCTrajectory::mutable_target_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.target_lane_id)
  return target_lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* ADCTrajectory::add_target_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.planning.ADCTrajectory.target_lane_id)
  return target_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
ADCTrajectory::mutable_target_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.planning.ADCTrajectory.target_lane_id)
  return &target_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
ADCTrajectory::target_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.planning.ADCTrajectory.target_lane_id)
  return target_lane_id_;
}

// optional .jmc_auto.planning.RSSInfo rss_info = 100;
bool ADCTrajectory::has_rss_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADCTrajectory::set_has_rss_info() {
  _has_bits_[0] |= 0x00000200u;
}
void ADCTrajectory::clear_has_rss_info() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADCTrajectory::clear_rss_info() {
  if (rss_info_ != NULL) rss_info_->::jmc_auto::planning::RSSInfo::Clear();
  clear_has_rss_info();
}
const ::jmc_auto::planning::RSSInfo& ADCTrajectory::rss_info() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ADCTrajectory.rss_info)
  return rss_info_ != NULL ? *rss_info_
                         : *::jmc_auto::planning::RSSInfo::internal_default_instance();
}
::jmc_auto::planning::RSSInfo* ADCTrajectory::mutable_rss_info() {
  set_has_rss_info();
  if (rss_info_ == NULL) {
    rss_info_ = new ::jmc_auto::planning::RSSInfo;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ADCTrajectory.rss_info)
  return rss_info_;
}
::jmc_auto::planning::RSSInfo* ADCTrajectory::release_rss_info() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ADCTrajectory.rss_info)
  clear_has_rss_info();
  ::jmc_auto::planning::RSSInfo* temp = rss_info_;
  rss_info_ = NULL;
  return temp;
}
void ADCTrajectory::set_allocated_rss_info(::jmc_auto::planning::RSSInfo* rss_info) {
  delete rss_info_;
  rss_info_ = rss_info;
  if (rss_info) {
    set_has_rss_info();
  } else {
    clear_has_rss_info();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ADCTrajectory.rss_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
