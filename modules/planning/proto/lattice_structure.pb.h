// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class PlanningTarget;
class PlanningTargetDefaultTypeInternal;
extern PlanningTargetDefaultTypeInternal _PlanningTarget_default_instance_;
class StopPoint;
class StopPointDefaultTypeInternal;
extern StopPointDefaultTypeInternal _StopPoint_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto

enum StopPoint_Type {
  StopPoint_Type_HARD = 0,
  StopPoint_Type_SOFT = 1
};
bool StopPoint_Type_IsValid(int value);
const StopPoint_Type StopPoint_Type_Type_MIN = StopPoint_Type_HARD;
const StopPoint_Type StopPoint_Type_Type_MAX = StopPoint_Type_SOFT;
const int StopPoint_Type_Type_ARRAYSIZE = StopPoint_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor();
inline const ::std::string& StopPoint_Type_Name(StopPoint_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopPoint_Type_descriptor(), value);
}
inline bool StopPoint_Type_Parse(
    const ::std::string& name, StopPoint_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopPoint_Type>(
    StopPoint_Type_descriptor(), name, value);
}
// ===================================================================

class StopPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.StopPoint) */ {
 public:
  StopPoint();
  virtual ~StopPoint();

  StopPoint(const StopPoint& from);

  inline StopPoint& operator=(const StopPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopPoint& default_instance();

  static inline const StopPoint* internal_default_instance() {
    return reinterpret_cast<const StopPoint*>(
               &_StopPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StopPoint* other);

  // implements Message ----------------------------------------------

  inline StopPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  StopPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopPoint& from);
  void MergeFrom(const StopPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StopPoint_Type Type;
  static const Type HARD =
    StopPoint_Type_HARD;
  static const Type SOFT =
    StopPoint_Type_SOFT;
  static inline bool Type_IsValid(int value) {
    return StopPoint_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StopPoint_Type_Type_MIN;
  static const Type Type_MAX =
    StopPoint_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StopPoint_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StopPoint_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StopPoint_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StopPoint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::jmc_auto::planning::StopPoint_Type type() const;
  void set_type(::jmc_auto::planning::StopPoint_Type value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.StopPoint)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double s_;
  int type_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlanningTarget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.PlanningTarget) */ {
 public:
  PlanningTarget();
  virtual ~PlanningTarget();

  PlanningTarget(const PlanningTarget& from);

  inline PlanningTarget& operator=(const PlanningTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningTarget& default_instance();

  static inline const PlanningTarget* internal_default_instance() {
    return reinterpret_cast<const PlanningTarget*>(
               &_PlanningTarget_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlanningTarget* other);

  // implements Message ----------------------------------------------

  inline PlanningTarget* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanningTarget* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanningTarget& from);
  void MergeFrom(const PlanningTarget& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanningTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.StopPoint stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::jmc_auto::planning::StopPoint& stop_point() const;
  ::jmc_auto::planning::StopPoint* mutable_stop_point();
  ::jmc_auto::planning::StopPoint* release_stop_point();
  void set_allocated_stop_point(::jmc_auto::planning::StopPoint* stop_point);

  // optional double cruise_speed = 2;
  bool has_cruise_speed() const;
  void clear_cruise_speed();
  static const int kCruiseSpeedFieldNumber = 2;
  double cruise_speed() const;
  void set_cruise_speed(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.PlanningTarget)
 private:
  void set_has_stop_point();
  void clear_has_stop_point();
  void set_has_cruise_speed();
  void clear_has_cruise_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::StopPoint* stop_point_;
  double cruise_speed_;
  friend struct protobuf_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StopPoint

// optional double s = 1;
inline bool StopPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double StopPoint::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.StopPoint.s)
  return s_;
}
inline void StopPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.StopPoint.s)
}

// optional .jmc_auto.planning.StopPoint.Type type = 2 [default = HARD];
inline bool StopPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopPoint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopPoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::planning::StopPoint_Type StopPoint::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.StopPoint.type)
  return static_cast< ::jmc_auto::planning::StopPoint_Type >(type_);
}
inline void StopPoint::set_type(::jmc_auto::planning::StopPoint_Type value) {
  assert(::jmc_auto::planning::StopPoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.StopPoint.type)
}

// -------------------------------------------------------------------

// PlanningTarget

// optional .jmc_auto.planning.StopPoint stop_point = 1;
inline bool PlanningTarget::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningTarget::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningTarget::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningTarget::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::jmc_auto::planning::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::jmc_auto::planning::StopPoint& PlanningTarget::stop_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTarget.stop_point)
  return stop_point_ != NULL ? *stop_point_
                         : *::jmc_auto::planning::StopPoint::internal_default_instance();
}
inline ::jmc_auto::planning::StopPoint* PlanningTarget::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::jmc_auto::planning::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningTarget.stop_point)
  return stop_point_;
}
inline ::jmc_auto::planning::StopPoint* PlanningTarget::release_stop_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningTarget.stop_point)
  clear_has_stop_point();
  ::jmc_auto::planning::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void PlanningTarget::set_allocated_stop_point(::jmc_auto::planning::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningTarget.stop_point)
}

// optional double cruise_speed = 2;
inline bool PlanningTarget::has_cruise_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningTarget::set_has_cruise_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningTarget::clear_has_cruise_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningTarget::clear_cruise_speed() {
  cruise_speed_ = 0;
  clear_has_cruise_speed();
}
inline double PlanningTarget::cruise_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningTarget.cruise_speed)
  return cruise_speed_;
}
inline void PlanningTarget::set_cruise_speed(double value) {
  set_has_cruise_speed();
  cruise_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PlanningTarget.cruise_speed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::planning::StopPoint_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::planning::StopPoint_Type>() {
  return ::jmc_auto::planning::StopPoint_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto__INCLUDED
