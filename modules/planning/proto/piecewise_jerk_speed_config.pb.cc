// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/piecewise_jerk_speed_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/piecewise_jerk_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class PiecewiseJerkSpeedConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkSpeedConfig> {
} _PiecewiseJerkSpeedConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, kappa_penalty_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, ref_s_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseJerkSpeedConfig, ref_v_weight_),
  0,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(PiecewiseJerkSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PiecewiseJerkSpeedConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/piecewise_jerk_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PiecewiseJerkSpeedConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PiecewiseJerkSpeedConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n8modules/planning/proto/piecewise_jerk_"
      "speed_config.proto\022\021jmc_auto.planning\"\242\001"
      "\n\030PiecewiseJerkSpeedConfig\022\025\n\nacc_weight"
      "\030\001 \001(\001:\0011\022\027\n\013jerk_weight\030\002 \001(\001:\00210\022\"\n\024ka"
      "ppa_penalty_weight\030\003 \001(\001:\0041000\022\030\n\014ref_s_"
      "weight\030\004 \001(\001:\00210\022\030\n\014ref_v_weight\030\005 \001(\001:\002"
      "10"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/piecewise_jerk_speed_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkSpeedConfig::kAccWeightFieldNumber;
const int PiecewiseJerkSpeedConfig::kJerkWeightFieldNumber;
const int PiecewiseJerkSpeedConfig::kKappaPenaltyWeightFieldNumber;
const int PiecewiseJerkSpeedConfig::kRefSWeightFieldNumber;
const int PiecewiseJerkSpeedConfig::kRefVWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkSpeedConfig::PiecewiseJerkSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PiecewiseJerkSpeedConfig)
}
PiecewiseJerkSpeedConfig::PiecewiseJerkSpeedConfig(const PiecewiseJerkSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_weight_, &from.acc_weight_,
    reinterpret_cast<char*>(&ref_v_weight_) -
    reinterpret_cast<char*>(&acc_weight_) + sizeof(ref_v_weight_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PiecewiseJerkSpeedConfig)
}

void PiecewiseJerkSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  acc_weight_ = 1;
  jerk_weight_ = 10;
  kappa_penalty_weight_ = 1000;
  ref_s_weight_ = 10;
  ref_v_weight_ = 10;
}

PiecewiseJerkSpeedConfig::~PiecewiseJerkSpeedConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  SharedDtor();
}

void PiecewiseJerkSpeedConfig::SharedDtor() {
}

void PiecewiseJerkSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseJerkSpeedConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkSpeedConfig& PiecewiseJerkSpeedConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PiecewiseJerkSpeedConfig* PiecewiseJerkSpeedConfig::New(::google::protobuf::Arena* arena) const {
  PiecewiseJerkSpeedConfig* n = new PiecewiseJerkSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiecewiseJerkSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  if (_has_bits_[0 / 32] & 31u) {
    acc_weight_ = 1;
    jerk_weight_ = 10;
    kappa_penalty_weight_ = 1000;
    ref_s_weight_ = 10;
    ref_v_weight_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_acc_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa_penalty_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_kappa_penalty_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_penalty_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_s_weight = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ref_s_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_s_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ref_v_weight = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ref_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  return false;
#undef DO_
}

void PiecewiseJerkSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_weight(), output);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jerk_weight(), output);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kappa_penalty_weight(), output);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ref_s_weight(), output);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ref_v_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PiecewiseJerkSpeedConfig)
}

::google::protobuf::uint8* PiecewiseJerkSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_weight(), target);
  }

  // optional double jerk_weight = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jerk_weight(), target);
  }

  // optional double kappa_penalty_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kappa_penalty_weight(), target);
  }

  // optional double ref_s_weight = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ref_s_weight(), target);
  }

  // optional double ref_v_weight = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ref_v_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  return target;
}

size_t PiecewiseJerkSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double acc_weight = 1 [default = 1];
    if (has_acc_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 2 [default = 10];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double kappa_penalty_weight = 3 [default = 1000];
    if (has_kappa_penalty_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_s_weight = 4 [default = 10];
    if (has_ref_s_weight()) {
      total_size += 1 + 8;
    }

    // optional double ref_v_weight = 5 [default = 10];
    if (has_ref_v_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseJerkSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PiecewiseJerkSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PiecewiseJerkSpeedConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkSpeedConfig::MergeFrom(const PiecewiseJerkSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      acc_weight_ = from.acc_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_penalty_weight_ = from.kappa_penalty_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_s_weight_ = from.ref_s_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      ref_v_weight_ = from.ref_v_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PiecewiseJerkSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkSpeedConfig::CopyFrom(const PiecewiseJerkSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PiecewiseJerkSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkSpeedConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkSpeedConfig::Swap(PiecewiseJerkSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkSpeedConfig::InternalSwap(PiecewiseJerkSpeedConfig* other) {
  std::swap(acc_weight_, other->acc_weight_);
  std::swap(jerk_weight_, other->jerk_weight_);
  std::swap(kappa_penalty_weight_, other->kappa_penalty_weight_);
  std::swap(ref_s_weight_, other->ref_s_weight_);
  std::swap(ref_v_weight_, other->ref_v_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiecewiseJerkSpeedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PiecewiseJerkSpeedConfig

// optional double acc_weight = 1 [default = 1];
bool PiecewiseJerkSpeedConfig::has_acc_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PiecewiseJerkSpeedConfig::set_has_acc_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void PiecewiseJerkSpeedConfig::clear_has_acc_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void PiecewiseJerkSpeedConfig::clear_acc_weight() {
  acc_weight_ = 1;
  clear_has_acc_weight();
}
double PiecewiseJerkSpeedConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkSpeedConfig.acc_weight)
  return acc_weight_;
}
void PiecewiseJerkSpeedConfig::set_acc_weight(double value) {
  set_has_acc_weight();
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkSpeedConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 10];
bool PiecewiseJerkSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PiecewiseJerkSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void PiecewiseJerkSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void PiecewiseJerkSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  clear_has_jerk_weight();
}
double PiecewiseJerkSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkSpeedConfig.jerk_weight)
  return jerk_weight_;
}
void PiecewiseJerkSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkSpeedConfig.jerk_weight)
}

// optional double kappa_penalty_weight = 3 [default = 1000];
bool PiecewiseJerkSpeedConfig::has_kappa_penalty_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PiecewiseJerkSpeedConfig::set_has_kappa_penalty_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void PiecewiseJerkSpeedConfig::clear_has_kappa_penalty_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void PiecewiseJerkSpeedConfig::clear_kappa_penalty_weight() {
  kappa_penalty_weight_ = 1000;
  clear_has_kappa_penalty_weight();
}
double PiecewiseJerkSpeedConfig::kappa_penalty_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkSpeedConfig.kappa_penalty_weight)
  return kappa_penalty_weight_;
}
void PiecewiseJerkSpeedConfig::set_kappa_penalty_weight(double value) {
  set_has_kappa_penalty_weight();
  kappa_penalty_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkSpeedConfig.kappa_penalty_weight)
}

// optional double ref_s_weight = 4 [default = 10];
bool PiecewiseJerkSpeedConfig::has_ref_s_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PiecewiseJerkSpeedConfig::set_has_ref_s_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void PiecewiseJerkSpeedConfig::clear_has_ref_s_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void PiecewiseJerkSpeedConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  clear_has_ref_s_weight();
}
double PiecewiseJerkSpeedConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkSpeedConfig.ref_s_weight)
  return ref_s_weight_;
}
void PiecewiseJerkSpeedConfig::set_ref_s_weight(double value) {
  set_has_ref_s_weight();
  ref_s_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkSpeedConfig.ref_s_weight)
}

// optional double ref_v_weight = 5 [default = 10];
bool PiecewiseJerkSpeedConfig::has_ref_v_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PiecewiseJerkSpeedConfig::set_has_ref_v_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void PiecewiseJerkSpeedConfig::clear_has_ref_v_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void PiecewiseJerkSpeedConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  clear_has_ref_v_weight();
}
double PiecewiseJerkSpeedConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkSpeedConfig.ref_v_weight)
  return ref_v_weight_;
}
void PiecewiseJerkSpeedConfig::set_ref_v_weight(double value) {
  set_has_ref_v_weight();
  ref_v_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkSpeedConfig.ref_v_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
