// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_provider_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/planner_open_space_config.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class DistanceApproachConfig;
class DistanceApproachConfigDefaultTypeInternal;
extern DistanceApproachConfigDefaultTypeInternal _DistanceApproachConfig_default_instance_;
class DistanceApproachTrajectorySmootherConfig;
class DistanceApproachTrajectorySmootherConfigDefaultTypeInternal;
extern DistanceApproachTrajectorySmootherConfigDefaultTypeInternal _DistanceApproachTrajectorySmootherConfig_default_instance_;
class DualVariableConfig;
class DualVariableConfigDefaultTypeInternal;
extern DualVariableConfigDefaultTypeInternal _DualVariableConfig_default_instance_;
class DualVariableWarmStartConfig;
class DualVariableWarmStartConfigDefaultTypeInternal;
extern DualVariableWarmStartConfigDefaultTypeInternal _DualVariableWarmStartConfig_default_instance_;
class HybridAStarConfig;
class HybridAStarConfigDefaultTypeInternal;
extern HybridAStarConfigDefaultTypeInternal _HybridAStarConfig_default_instance_;
class IpoptConfig;
class IpoptConfigDefaultTypeInternal;
extern IpoptConfigDefaultTypeInternal _IpoptConfig_default_instance_;
class IpoptSolverConfig;
class IpoptSolverConfigDefaultTypeInternal;
extern IpoptSolverConfigDefaultTypeInternal _IpoptSolverConfig_default_instance_;
class IterativeAnchoringConfig;
class IterativeAnchoringConfigDefaultTypeInternal;
extern IterativeAnchoringConfigDefaultTypeInternal _IterativeAnchoringConfig_default_instance_;
class OSQPConfig;
class OSQPConfigDefaultTypeInternal;
extern OSQPConfigDefaultTypeInternal _OSQPConfig_default_instance_;
class OpenSpaceTrajectoryOptimizerConfig;
class OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
class OpenSpaceTrajectoryProviderConfig;
class OpenSpaceTrajectoryProviderConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryProviderConfigDefaultTypeInternal _OpenSpaceTrajectoryProviderConfig_default_instance_;
class PlannerOpenSpaceConfig;
class PlannerOpenSpaceConfigDefaultTypeInternal;
extern PlannerOpenSpaceConfigDefaultTypeInternal _PlannerOpenSpaceConfig_default_instance_;
class ROIConfig;
class ROIConfigDefaultTypeInternal;
extern ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
class TrajectoryPartitionConfig;
class TrajectoryPartitionConfigDefaultTypeInternal;
extern TrajectoryPartitionConfigDefaultTypeInternal _TrajectoryPartitionConfig_default_instance_;
class WarmStartConfig;
class WarmStartConfigDefaultTypeInternal;
extern WarmStartConfigDefaultTypeInternal _WarmStartConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto

enum DualVariableMode {
  DUAL_VARIABLE_IPOPT = 0,
  DUAL_VARIABLE_IPOPTQP = 1,
  DUAL_VARIABLE_OSQP = 2,
  DUAL_VARIABLE_DEBUG = 3
};
bool DualVariableMode_IsValid(int value);
const DualVariableMode DualVariableMode_MIN = DUAL_VARIABLE_IPOPT;
const DualVariableMode DualVariableMode_MAX = DUAL_VARIABLE_DEBUG;
const int DualVariableMode_ARRAYSIZE = DualVariableMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DualVariableMode_descriptor();
inline const ::std::string& DualVariableMode_Name(DualVariableMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DualVariableMode_descriptor(), value);
}
inline bool DualVariableMode_Parse(
    const ::std::string& name, DualVariableMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DualVariableMode>(
    DualVariableMode_descriptor(), name, value);
}
// ===================================================================

class OpenSpaceTrajectoryProviderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig) */ {
 public:
  OpenSpaceTrajectoryProviderConfig();
  virtual ~OpenSpaceTrajectoryProviderConfig();

  OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from);

  inline OpenSpaceTrajectoryProviderConfig& operator=(const OpenSpaceTrajectoryProviderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceTrajectoryProviderConfig& default_instance();

  static inline const OpenSpaceTrajectoryProviderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryProviderConfig*>(
               &_OpenSpaceTrajectoryProviderConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OpenSpaceTrajectoryProviderConfig* other);

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryProviderConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenSpaceTrajectoryProviderConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenSpaceTrajectoryProviderConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryProviderConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenSpaceTrajectoryProviderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  bool has_open_space_trajectory_optimizer_config() const;
  void clear_open_space_trajectory_optimizer_config();
  static const int kOpenSpaceTrajectoryOptimizerConfigFieldNumber = 1;
  const ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig& open_space_trajectory_optimizer_config() const;
  ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* mutable_open_space_trajectory_optimizer_config();
  ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* release_open_space_trajectory_optimizer_config();
  void set_allocated_open_space_trajectory_optimizer_config(::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
 private:
  void set_has_open_space_trajectory_optimizer_config();
  void clear_has_open_space_trajectory_optimizer_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpaceTrajectoryOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig) */ {
 public:
  OpenSpaceTrajectoryOptimizerConfig();
  virtual ~OpenSpaceTrajectoryOptimizerConfig();

  OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from);

  inline OpenSpaceTrajectoryOptimizerConfig& operator=(const OpenSpaceTrajectoryOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceTrajectoryOptimizerConfig& default_instance();

  static inline const OpenSpaceTrajectoryOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryOptimizerConfig*>(
               &_OpenSpaceTrajectoryOptimizerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OpenSpaceTrajectoryOptimizerConfig* other);

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryOptimizerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenSpaceTrajectoryOptimizerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
  bool has_hybrid_a_star_config() const;
  void clear_hybrid_a_star_config();
  static const int kHybridAStarConfigFieldNumber = 1;
  const ::jmc_auto::planning::HybridAStarConfig& hybrid_a_star_config() const;
  ::jmc_auto::planning::HybridAStarConfig* mutable_hybrid_a_star_config();
  ::jmc_auto::planning::HybridAStarConfig* release_hybrid_a_star_config();
  void set_allocated_hybrid_a_star_config(::jmc_auto::planning::HybridAStarConfig* hybrid_a_star_config);

  // optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  bool has_dual_variable_warm_start_config() const;
  void clear_dual_variable_warm_start_config();
  static const int kDualVariableWarmStartConfigFieldNumber = 2;
  const ::jmc_auto::planning::DualVariableConfig& dual_variable_warm_start_config() const;
  ::jmc_auto::planning::DualVariableConfig* mutable_dual_variable_warm_start_config();
  ::jmc_auto::planning::DualVariableConfig* release_dual_variable_warm_start_config();
  void set_allocated_dual_variable_warm_start_config(::jmc_auto::planning::DualVariableConfig* dual_variable_warm_start_config);

  // optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  bool has_distance_approach_trajectory_smoother_config() const;
  void clear_distance_approach_trajectory_smoother_config();
  static const int kDistanceApproachTrajectorySmootherConfigFieldNumber = 3;
  const ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig& distance_approach_trajectory_smoother_config() const;
  ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* mutable_distance_approach_trajectory_smoother_config();
  ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* release_distance_approach_trajectory_smoother_config();
  void set_allocated_distance_approach_trajectory_smoother_config(::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config);

  // optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  bool has_planner_open_space_config() const;
  void clear_planner_open_space_config();
  static const int kPlannerOpenSpaceConfigFieldNumber = 6;
  const ::jmc_auto::planning::PlannerOpenSpaceConfig& planner_open_space_config() const;
  ::jmc_auto::planning::PlannerOpenSpaceConfig* mutable_planner_open_space_config();
  ::jmc_auto::planning::PlannerOpenSpaceConfig* release_planner_open_space_config();
  void set_allocated_planner_open_space_config(::jmc_auto::planning::PlannerOpenSpaceConfig* planner_open_space_config);

  // optional float delta_t = 4 [default = 0.5];
  bool has_delta_t() const;
  void clear_delta_t();
  static const int kDeltaTFieldNumber = 4;
  float delta_t() const;
  void set_delta_t(float value);

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  bool has_is_near_destination_threshold() const;
  void clear_is_near_destination_threshold();
  static const int kIsNearDestinationThresholdFieldNumber = 5;
  double is_near_destination_threshold() const;
  void set_is_near_destination_threshold(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
 private:
  void set_has_hybrid_a_star_config();
  void clear_has_hybrid_a_star_config();
  void set_has_dual_variable_warm_start_config();
  void clear_has_dual_variable_warm_start_config();
  void set_has_distance_approach_trajectory_smoother_config();
  void clear_has_distance_approach_trajectory_smoother_config();
  void set_has_delta_t();
  void clear_has_delta_t();
  void set_has_is_near_destination_threshold();
  void clear_has_is_near_destination_threshold();
  void set_has_planner_open_space_config();
  void clear_has_planner_open_space_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::HybridAStarConfig* hybrid_a_star_config_;
  ::jmc_auto::planning::DualVariableConfig* dual_variable_warm_start_config_;
  ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config_;
  ::jmc_auto::planning::PlannerOpenSpaceConfig* planner_open_space_config_;
  float delta_t_;
  double is_near_destination_threshold_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HybridAStarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.HybridAStarConfig) */ {
 public:
  HybridAStarConfig();
  virtual ~HybridAStarConfig();

  HybridAStarConfig(const HybridAStarConfig& from);

  inline HybridAStarConfig& operator=(const HybridAStarConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HybridAStarConfig& default_instance();

  static inline const HybridAStarConfig* internal_default_instance() {
    return reinterpret_cast<const HybridAStarConfig*>(
               &_HybridAStarConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HybridAStarConfig* other);

  // implements Message ----------------------------------------------

  inline HybridAStarConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  HybridAStarConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HybridAStarConfig& from);
  void MergeFrom(const HybridAStarConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HybridAStarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double traj_forward_penalty = 5 [default = 0];
  bool has_traj_forward_penalty() const;
  void clear_traj_forward_penalty();
  static const int kTrajForwardPenaltyFieldNumber = 5;
  double traj_forward_penalty() const;
  void set_traj_forward_penalty(double value);

  // optional double traj_back_penalty = 6 [default = 0];
  bool has_traj_back_penalty() const;
  void clear_traj_back_penalty();
  static const int kTrajBackPenaltyFieldNumber = 6;
  double traj_back_penalty() const;
  void set_traj_back_penalty(double value);

  // optional double xy_grid_resolution = 1 [default = 0.2];
  bool has_xy_grid_resolution() const;
  void clear_xy_grid_resolution();
  static const int kXyGridResolutionFieldNumber = 1;
  double xy_grid_resolution() const;
  void set_xy_grid_resolution(double value);

  // optional double phi_grid_resolution = 2 [default = 0.05];
  bool has_phi_grid_resolution() const;
  void clear_phi_grid_resolution();
  static const int kPhiGridResolutionFieldNumber = 2;
  double phi_grid_resolution() const;
  void set_phi_grid_resolution(double value);

  // optional uint64 next_node_num = 3 [default = 10];
  bool has_next_node_num() const;
  void clear_next_node_num();
  static const int kNextNodeNumFieldNumber = 3;
  ::google::protobuf::uint64 next_node_num() const;
  void set_next_node_num(::google::protobuf::uint64 value);

  // optional double step_size = 4 [default = 0.5];
  bool has_step_size() const;
  void clear_step_size();
  static const int kStepSizeFieldNumber = 4;
  double step_size() const;
  void set_step_size(double value);

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  bool has_traj_gear_switch_penalty() const;
  void clear_traj_gear_switch_penalty();
  static const int kTrajGearSwitchPenaltyFieldNumber = 7;
  double traj_gear_switch_penalty() const;
  void set_traj_gear_switch_penalty(double value);

  // optional double traj_steer_penalty = 8 [default = 100];
  bool has_traj_steer_penalty() const;
  void clear_traj_steer_penalty();
  static const int kTrajSteerPenaltyFieldNumber = 8;
  double traj_steer_penalty() const;
  void set_traj_steer_penalty(double value);

  // optional double traj_steer_change_penalty = 9 [default = 10];
  bool has_traj_steer_change_penalty() const;
  void clear_traj_steer_change_penalty();
  static const int kTrajSteerChangePenaltyFieldNumber = 9;
  double traj_steer_change_penalty() const;
  void set_traj_steer_change_penalty(double value);

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  bool has_grid_a_star_xy_resolution() const;
  void clear_grid_a_star_xy_resolution();
  static const int kGridAStarXyResolutionFieldNumber = 15;
  double grid_a_star_xy_resolution() const;
  void set_grid_a_star_xy_resolution(double value);

  // optional double node_radius = 16 [default = 0.5];
  bool has_node_radius() const;
  void clear_node_radius();
  static const int kNodeRadiusFieldNumber = 16;
  double node_radius() const;
  void set_node_radius(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.HybridAStarConfig)
 private:
  void set_has_xy_grid_resolution();
  void clear_has_xy_grid_resolution();
  void set_has_phi_grid_resolution();
  void clear_has_phi_grid_resolution();
  void set_has_next_node_num();
  void clear_has_next_node_num();
  void set_has_step_size();
  void clear_has_step_size();
  void set_has_traj_forward_penalty();
  void clear_has_traj_forward_penalty();
  void set_has_traj_back_penalty();
  void clear_has_traj_back_penalty();
  void set_has_traj_gear_switch_penalty();
  void clear_has_traj_gear_switch_penalty();
  void set_has_traj_steer_penalty();
  void clear_has_traj_steer_penalty();
  void set_has_traj_steer_change_penalty();
  void clear_has_traj_steer_change_penalty();
  void set_has_grid_a_star_xy_resolution();
  void clear_has_grid_a_star_xy_resolution();
  void set_has_node_radius();
  void clear_has_node_radius();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double traj_forward_penalty_;
  double traj_back_penalty_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  ::google::protobuf::uint64 next_node_num_;
  double step_size_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DualVariableConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.DualVariableConfig) */ {
 public:
  DualVariableConfig();
  virtual ~DualVariableConfig();

  DualVariableConfig(const DualVariableConfig& from);

  inline DualVariableConfig& operator=(const DualVariableConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DualVariableConfig& default_instance();

  static inline const DualVariableConfig* internal_default_instance() {
    return reinterpret_cast<const DualVariableConfig*>(
               &_DualVariableConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DualVariableConfig* other);

  // implements Message ----------------------------------------------

  inline DualVariableConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DualVariableConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DualVariableConfig& from);
  void MergeFrom(const DualVariableConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DualVariableConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
  bool has_ipopt_config() const;
  void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 2;
  const ::jmc_auto::planning::IpoptSolverConfig& ipopt_config() const;
  ::jmc_auto::planning::IpoptSolverConfig* mutable_ipopt_config();
  ::jmc_auto::planning::IpoptSolverConfig* release_ipopt_config();
  void set_allocated_ipopt_config(::jmc_auto::planning::IpoptSolverConfig* ipopt_config);

  // optional double min_safety_distance = 4 [default = 0];
  bool has_min_safety_distance() const;
  void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 4;
  double min_safety_distance() const;
  void set_min_safety_distance(double value);

  // optional .jmc_auto.planning.DualVariableMode qp_format = 3;
  bool has_qp_format() const;
  void clear_qp_format();
  static const int kQpFormatFieldNumber = 3;
  ::jmc_auto::planning::DualVariableMode qp_format() const;
  void set_qp_format(::jmc_auto::planning::DualVariableMode value);

  // optional bool debug_osqp = 5 [default = false];
  bool has_debug_osqp() const;
  void clear_debug_osqp();
  static const int kDebugOsqpFieldNumber = 5;
  bool debug_osqp() const;
  void set_debug_osqp(bool value);

  // optional double weight_d = 1 [default = 1];
  bool has_weight_d() const;
  void clear_weight_d();
  static const int kWeightDFieldNumber = 1;
  double weight_d() const;
  void set_weight_d(double value);

  // optional double beta = 6 [default = 1];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 6;
  double beta() const;
  void set_beta(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.DualVariableConfig)
 private:
  void set_has_weight_d();
  void clear_has_weight_d();
  void set_has_ipopt_config();
  void clear_has_ipopt_config();
  void set_has_qp_format();
  void clear_has_qp_format();
  void set_has_min_safety_distance();
  void clear_has_min_safety_distance();
  void set_has_debug_osqp();
  void clear_has_debug_osqp();
  void set_has_beta();
  void clear_has_beta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::IpoptSolverConfig* ipopt_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double weight_d_;
  double beta_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DistanceApproachTrajectorySmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig) */ {
 public:
  DistanceApproachTrajectorySmootherConfig();
  virtual ~DistanceApproachTrajectorySmootherConfig();

  DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from);

  inline DistanceApproachTrajectorySmootherConfig& operator=(const DistanceApproachTrajectorySmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistanceApproachTrajectorySmootherConfig& default_instance();

  static inline const DistanceApproachTrajectorySmootherConfig* internal_default_instance() {
    return reinterpret_cast<const DistanceApproachTrajectorySmootherConfig*>(
               &_DistanceApproachTrajectorySmootherConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DistanceApproachTrajectorySmootherConfig* other);

  // implements Message ----------------------------------------------

  inline DistanceApproachTrajectorySmootherConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DistanceApproachTrajectorySmootherConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DistanceApproachTrajectorySmootherConfig& from);
  void MergeFrom(const DistanceApproachTrajectorySmootherConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DistanceApproachTrajectorySmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
  bool has_ipopt_config() const;
  void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 21;
  const ::jmc_auto::planning::IpoptSolverConfig& ipopt_config() const;
  ::jmc_auto::planning::IpoptSolverConfig* mutable_ipopt_config();
  ::jmc_auto::planning::IpoptSolverConfig* release_ipopt_config();
  void set_allocated_ipopt_config(::jmc_auto::planning::IpoptSolverConfig* ipopt_config);

  // optional double weight_steer = 1;
  bool has_weight_steer() const;
  void clear_weight_steer();
  static const int kWeightSteerFieldNumber = 1;
  double weight_steer() const;
  void set_weight_steer(double value);

  // optional double weight_a = 2;
  bool has_weight_a() const;
  void clear_weight_a();
  static const int kWeightAFieldNumber = 2;
  double weight_a() const;
  void set_weight_a(double value);

  // optional double weight_steer_rate = 3;
  bool has_weight_steer_rate() const;
  void clear_weight_steer_rate();
  static const int kWeightSteerRateFieldNumber = 3;
  double weight_steer_rate() const;
  void set_weight_steer_rate(double value);

  // optional double weight_a_rate = 4;
  bool has_weight_a_rate() const;
  void clear_weight_a_rate();
  static const int kWeightARateFieldNumber = 4;
  double weight_a_rate() const;
  void set_weight_a_rate(double value);

  // optional double weight_x = 5;
  bool has_weight_x() const;
  void clear_weight_x();
  static const int kWeightXFieldNumber = 5;
  double weight_x() const;
  void set_weight_x(double value);

  // optional double weight_y = 6;
  bool has_weight_y() const;
  void clear_weight_y();
  static const int kWeightYFieldNumber = 6;
  double weight_y() const;
  void set_weight_y(double value);

  // optional double weight_phi = 7;
  bool has_weight_phi() const;
  void clear_weight_phi();
  static const int kWeightPhiFieldNumber = 7;
  double weight_phi() const;
  void set_weight_phi(double value);

  // optional double weight_v = 8;
  bool has_weight_v() const;
  void clear_weight_v();
  static const int kWeightVFieldNumber = 8;
  double weight_v() const;
  void set_weight_v(double value);

  // optional double weight_steer_stitching = 9;
  bool has_weight_steer_stitching() const;
  void clear_weight_steer_stitching();
  static const int kWeightSteerStitchingFieldNumber = 9;
  double weight_steer_stitching() const;
  void set_weight_steer_stitching(double value);

  // optional double weight_a_stitching = 10;
  bool has_weight_a_stitching() const;
  void clear_weight_a_stitching();
  static const int kWeightAStitchingFieldNumber = 10;
  double weight_a_stitching() const;
  void set_weight_a_stitching(double value);

  // optional double weight_first_order_time = 11;
  bool has_weight_first_order_time() const;
  void clear_weight_first_order_time();
  static const int kWeightFirstOrderTimeFieldNumber = 11;
  double weight_first_order_time() const;
  void set_weight_first_order_time(double value);

  // optional double weight_second_order_time = 12;
  bool has_weight_second_order_time() const;
  void clear_weight_second_order_time();
  static const int kWeightSecondOrderTimeFieldNumber = 12;
  double weight_second_order_time() const;
  void set_weight_second_order_time(double value);

  // optional double min_safety_distance = 13 [default = 0];
  bool has_min_safety_distance() const;
  void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 13;
  double min_safety_distance() const;
  void set_min_safety_distance(double value);

  // optional bool use_fix_time = 20 [default = false];
  bool has_use_fix_time() const;
  void clear_use_fix_time();
  static const int kUseFixTimeFieldNumber = 20;
  bool use_fix_time() const;
  void set_use_fix_time(bool value);

  // optional bool enable_constraint_check = 22;
  bool has_enable_constraint_check() const;
  void clear_enable_constraint_check();
  static const int kEnableConstraintCheckFieldNumber = 22;
  bool enable_constraint_check() const;
  void set_enable_constraint_check(bool value);

  // optional bool enable_hand_derivative = 23;
  bool has_enable_hand_derivative() const;
  void clear_enable_hand_derivative();
  static const int kEnableHandDerivativeFieldNumber = 23;
  bool enable_hand_derivative() const;
  void set_enable_hand_derivative(bool value);

  // optional bool enable_derivative_check = 24;
  bool has_enable_derivative_check() const;
  void clear_enable_derivative_check();
  static const int kEnableDerivativeCheckFieldNumber = 24;
  bool enable_derivative_check() const;
  void set_enable_derivative_check(bool value);

  // optional bool enable_initial_final_check = 25 [default = false];
  bool has_enable_initial_final_check() const;
  void clear_enable_initial_final_check();
  static const int kEnableInitialFinalCheckFieldNumber = 25;
  bool enable_initial_final_check() const;
  void set_enable_initial_final_check(bool value);

  // optional double max_speed_forward = 14 [default = 3];
  bool has_max_speed_forward() const;
  void clear_max_speed_forward();
  static const int kMaxSpeedForwardFieldNumber = 14;
  double max_speed_forward() const;
  void set_max_speed_forward(double value);

  // optional double max_speed_reverse = 15 [default = 2];
  bool has_max_speed_reverse() const;
  void clear_max_speed_reverse();
  static const int kMaxSpeedReverseFieldNumber = 15;
  double max_speed_reverse() const;
  void set_max_speed_reverse(double value);

  // optional double max_acceleration_forward = 16 [default = 2];
  bool has_max_acceleration_forward() const;
  void clear_max_acceleration_forward();
  static const int kMaxAccelerationForwardFieldNumber = 16;
  double max_acceleration_forward() const;
  void set_max_acceleration_forward(double value);

  // optional double max_acceleration_reverse = 17 [default = 2];
  bool has_max_acceleration_reverse() const;
  void clear_max_acceleration_reverse();
  static const int kMaxAccelerationReverseFieldNumber = 17;
  double max_acceleration_reverse() const;
  void set_max_acceleration_reverse(double value);

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  bool has_min_time_sample_scaling() const;
  void clear_min_time_sample_scaling();
  static const int kMinTimeSampleScalingFieldNumber = 18;
  double min_time_sample_scaling() const;
  void set_min_time_sample_scaling(double value);

  // optional double max_time_sample_scaling = 19 [default = 10];
  bool has_max_time_sample_scaling() const;
  void clear_max_time_sample_scaling();
  static const int kMaxTimeSampleScalingFieldNumber = 19;
  double max_time_sample_scaling() const;
  void set_max_time_sample_scaling(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
 private:
  void set_has_weight_steer();
  void clear_has_weight_steer();
  void set_has_weight_a();
  void clear_has_weight_a();
  void set_has_weight_steer_rate();
  void clear_has_weight_steer_rate();
  void set_has_weight_a_rate();
  void clear_has_weight_a_rate();
  void set_has_weight_x();
  void clear_has_weight_x();
  void set_has_weight_y();
  void clear_has_weight_y();
  void set_has_weight_phi();
  void clear_has_weight_phi();
  void set_has_weight_v();
  void clear_has_weight_v();
  void set_has_weight_steer_stitching();
  void clear_has_weight_steer_stitching();
  void set_has_weight_a_stitching();
  void clear_has_weight_a_stitching();
  void set_has_weight_first_order_time();
  void clear_has_weight_first_order_time();
  void set_has_weight_second_order_time();
  void clear_has_weight_second_order_time();
  void set_has_min_safety_distance();
  void clear_has_min_safety_distance();
  void set_has_max_speed_forward();
  void clear_has_max_speed_forward();
  void set_has_max_speed_reverse();
  void clear_has_max_speed_reverse();
  void set_has_max_acceleration_forward();
  void clear_has_max_acceleration_forward();
  void set_has_max_acceleration_reverse();
  void clear_has_max_acceleration_reverse();
  void set_has_min_time_sample_scaling();
  void clear_has_min_time_sample_scaling();
  void set_has_max_time_sample_scaling();
  void clear_has_max_time_sample_scaling();
  void set_has_use_fix_time();
  void clear_has_use_fix_time();
  void set_has_ipopt_config();
  void clear_has_ipopt_config();
  void set_has_enable_constraint_check();
  void clear_has_enable_constraint_check();
  void set_has_enable_hand_derivative();
  void clear_has_enable_hand_derivative();
  void set_has_enable_derivative_check();
  void clear_has_enable_derivative_check();
  void set_has_enable_initial_final_check();
  void clear_has_enable_initial_final_check();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::IpoptSolverConfig* ipopt_config_;
  double weight_steer_;
  double weight_a_;
  double weight_steer_rate_;
  double weight_a_rate_;
  double weight_x_;
  double weight_y_;
  double weight_phi_;
  double weight_v_;
  double weight_steer_stitching_;
  double weight_a_stitching_;
  double weight_first_order_time_;
  double weight_second_order_time_;
  double min_safety_distance_;
  bool use_fix_time_;
  bool enable_constraint_check_;
  bool enable_hand_derivative_;
  bool enable_derivative_check_;
  bool enable_initial_final_check_;
  double max_speed_forward_;
  double max_speed_reverse_;
  double max_acceleration_forward_;
  double max_acceleration_reverse_;
  double min_time_sample_scaling_;
  double max_time_sample_scaling_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IpoptSolverConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.IpoptSolverConfig) */ {
 public:
  IpoptSolverConfig();
  virtual ~IpoptSolverConfig();

  IpoptSolverConfig(const IpoptSolverConfig& from);

  inline IpoptSolverConfig& operator=(const IpoptSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpoptSolverConfig& default_instance();

  static inline const IpoptSolverConfig* internal_default_instance() {
    return reinterpret_cast<const IpoptSolverConfig*>(
               &_IpoptSolverConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(IpoptSolverConfig* other);

  // implements Message ----------------------------------------------

  inline IpoptSolverConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  IpoptSolverConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpoptSolverConfig& from);
  void MergeFrom(const IpoptSolverConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpoptSolverConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ipopt_print_timing_statistics = 9;
  bool has_ipopt_print_timing_statistics() const;
  void clear_ipopt_print_timing_statistics();
  static const int kIpoptPrintTimingStatisticsFieldNumber = 9;
  const ::std::string& ipopt_print_timing_statistics() const;
  void set_ipopt_print_timing_statistics(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_print_timing_statistics(::std::string&& value);
  #endif
  void set_ipopt_print_timing_statistics(const char* value);
  void set_ipopt_print_timing_statistics(const char* value, size_t size);
  ::std::string* mutable_ipopt_print_timing_statistics();
  ::std::string* release_ipopt_print_timing_statistics();
  void set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics);

  // optional string ipopt_alpha_for_y = 10;
  bool has_ipopt_alpha_for_y() const;
  void clear_ipopt_alpha_for_y();
  static const int kIpoptAlphaForYFieldNumber = 10;
  const ::std::string& ipopt_alpha_for_y() const;
  void set_ipopt_alpha_for_y(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_alpha_for_y(::std::string&& value);
  #endif
  void set_ipopt_alpha_for_y(const char* value);
  void set_ipopt_alpha_for_y(const char* value, size_t size);
  ::std::string* mutable_ipopt_alpha_for_y();
  ::std::string* release_ipopt_alpha_for_y();
  void set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y);

  // optional string ipopt_recalc_y = 11;
  bool has_ipopt_recalc_y() const;
  void clear_ipopt_recalc_y();
  static const int kIpoptRecalcYFieldNumber = 11;
  const ::std::string& ipopt_recalc_y() const;
  void set_ipopt_recalc_y(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_recalc_y(::std::string&& value);
  #endif
  void set_ipopt_recalc_y(const char* value);
  void set_ipopt_recalc_y(const char* value, size_t size);
  ::std::string* mutable_ipopt_recalc_y();
  ::std::string* release_ipopt_recalc_y();
  void set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y);

  // optional int32 ipopt_print_level = 1;
  bool has_ipopt_print_level() const;
  void clear_ipopt_print_level();
  static const int kIpoptPrintLevelFieldNumber = 1;
  ::google::protobuf::int32 ipopt_print_level() const;
  void set_ipopt_print_level(::google::protobuf::int32 value);

  // optional int32 mumps_mem_percent = 2;
  bool has_mumps_mem_percent() const;
  void clear_mumps_mem_percent();
  static const int kMumpsMemPercentFieldNumber = 2;
  ::google::protobuf::int32 mumps_mem_percent() const;
  void set_mumps_mem_percent(::google::protobuf::int32 value);

  // optional double mumps_pivtol = 3;
  bool has_mumps_pivtol() const;
  void clear_mumps_pivtol();
  static const int kMumpsPivtolFieldNumber = 3;
  double mumps_pivtol() const;
  void set_mumps_pivtol(double value);

  // optional double ipopt_tol = 5;
  bool has_ipopt_tol() const;
  void clear_ipopt_tol();
  static const int kIpoptTolFieldNumber = 5;
  double ipopt_tol() const;
  void set_ipopt_tol(double value);

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  bool has_ipopt_acceptable_constr_viol_tol() const;
  void clear_ipopt_acceptable_constr_viol_tol();
  static const int kIpoptAcceptableConstrViolTolFieldNumber = 6;
  double ipopt_acceptable_constr_viol_tol() const;
  void set_ipopt_acceptable_constr_viol_tol(double value);

  // optional double ipopt_min_hessian_perturbation = 7;
  bool has_ipopt_min_hessian_perturbation() const;
  void clear_ipopt_min_hessian_perturbation();
  static const int kIpoptMinHessianPerturbationFieldNumber = 7;
  double ipopt_min_hessian_perturbation() const;
  void set_ipopt_min_hessian_perturbation(double value);

  // optional double ipopt_jacobian_regularization_value = 8;
  bool has_ipopt_jacobian_regularization_value() const;
  void clear_ipopt_jacobian_regularization_value();
  static const int kIpoptJacobianRegularizationValueFieldNumber = 8;
  double ipopt_jacobian_regularization_value() const;
  void set_ipopt_jacobian_regularization_value(double value);

  // optional int32 ipopt_max_iter = 4;
  bool has_ipopt_max_iter() const;
  void clear_ipopt_max_iter();
  static const int kIpoptMaxIterFieldNumber = 4;
  ::google::protobuf::int32 ipopt_max_iter() const;
  void set_ipopt_max_iter(::google::protobuf::int32 value);

  // optional double ipopt_mu_init = 12 [default = 0.1];
  bool has_ipopt_mu_init() const;
  void clear_ipopt_mu_init();
  static const int kIpoptMuInitFieldNumber = 12;
  double ipopt_mu_init() const;
  void set_ipopt_mu_init(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.IpoptSolverConfig)
 private:
  void set_has_ipopt_print_level();
  void clear_has_ipopt_print_level();
  void set_has_mumps_mem_percent();
  void clear_has_mumps_mem_percent();
  void set_has_mumps_pivtol();
  void clear_has_mumps_pivtol();
  void set_has_ipopt_max_iter();
  void clear_has_ipopt_max_iter();
  void set_has_ipopt_tol();
  void clear_has_ipopt_tol();
  void set_has_ipopt_acceptable_constr_viol_tol();
  void clear_has_ipopt_acceptable_constr_viol_tol();
  void set_has_ipopt_min_hessian_perturbation();
  void clear_has_ipopt_min_hessian_perturbation();
  void set_has_ipopt_jacobian_regularization_value();
  void clear_has_ipopt_jacobian_regularization_value();
  void set_has_ipopt_print_timing_statistics();
  void clear_has_ipopt_print_timing_statistics();
  void set_has_ipopt_alpha_for_y();
  void clear_has_ipopt_alpha_for_y();
  void set_has_ipopt_recalc_y();
  void clear_has_ipopt_recalc_y();
  void set_has_ipopt_mu_init();
  void clear_has_ipopt_mu_init();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_print_timing_statistics_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_alpha_for_y_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_recalc_y_;
  ::google::protobuf::int32 ipopt_print_level_;
  ::google::protobuf::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::google::protobuf::int32 ipopt_max_iter_;
  double ipopt_mu_init_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceTrajectoryProviderConfig

// optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
inline bool OpenSpaceTrajectoryProviderConfig::has_open_space_trajectory_optimizer_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceTrajectoryProviderConfig::set_has_open_space_trajectory_optimizer_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceTrajectoryProviderConfig::clear_has_open_space_trajectory_optimizer_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceTrajectoryProviderConfig::clear_open_space_trajectory_optimizer_config() {
  if (open_space_trajectory_optimizer_config_ != NULL) open_space_trajectory_optimizer_config_->::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::Clear();
  clear_has_open_space_trajectory_optimizer_config();
}
inline const ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryProviderConfig::open_space_trajectory_optimizer_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return open_space_trajectory_optimizer_config_ != NULL ? *open_space_trajectory_optimizer_config_
                         : *::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::internal_default_instance();
}
inline ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::mutable_open_space_trajectory_optimizer_config() {
  set_has_open_space_trajectory_optimizer_config();
  if (open_space_trajectory_optimizer_config_ == NULL) {
    open_space_trajectory_optimizer_config_ = new ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return open_space_trajectory_optimizer_config_;
}
inline ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::release_open_space_trajectory_optimizer_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  clear_has_open_space_trajectory_optimizer_config();
  ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* temp = open_space_trajectory_optimizer_config_;
  open_space_trajectory_optimizer_config_ = NULL;
  return temp;
}
inline void OpenSpaceTrajectoryProviderConfig::set_allocated_open_space_trajectory_optimizer_config(::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config) {
  delete open_space_trajectory_optimizer_config_;
  open_space_trajectory_optimizer_config_ = open_space_trajectory_optimizer_config;
  if (open_space_trajectory_optimizer_config) {
    set_has_open_space_trajectory_optimizer_config();
  } else {
    clear_has_open_space_trajectory_optimizer_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
}

// -------------------------------------------------------------------

// OpenSpaceTrajectoryOptimizerConfig

// optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_hybrid_a_star_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_hybrid_a_star_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_hybrid_a_star_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_hybrid_a_star_config() {
  if (hybrid_a_star_config_ != NULL) hybrid_a_star_config_->::jmc_auto::planning::HybridAStarConfig::Clear();
  clear_has_hybrid_a_star_config();
}
inline const ::jmc_auto::planning::HybridAStarConfig& OpenSpaceTrajectoryOptimizerConfig::hybrid_a_star_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return hybrid_a_star_config_ != NULL ? *hybrid_a_star_config_
                         : *::jmc_auto::planning::HybridAStarConfig::internal_default_instance();
}
inline ::jmc_auto::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_hybrid_a_star_config() {
  set_has_hybrid_a_star_config();
  if (hybrid_a_star_config_ == NULL) {
    hybrid_a_star_config_ = new ::jmc_auto::planning::HybridAStarConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return hybrid_a_star_config_;
}
inline ::jmc_auto::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::release_hybrid_a_star_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  clear_has_hybrid_a_star_config();
  ::jmc_auto::planning::HybridAStarConfig* temp = hybrid_a_star_config_;
  hybrid_a_star_config_ = NULL;
  return temp;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_hybrid_a_star_config(::jmc_auto::planning::HybridAStarConfig* hybrid_a_star_config) {
  delete hybrid_a_star_config_;
  hybrid_a_star_config_ = hybrid_a_star_config;
  if (hybrid_a_star_config) {
    set_has_hybrid_a_star_config();
  } else {
    clear_has_hybrid_a_star_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
}

// optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_dual_variable_warm_start_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_dual_variable_warm_start_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != NULL) dual_variable_warm_start_config_->::jmc_auto::planning::DualVariableConfig::Clear();
  clear_has_dual_variable_warm_start_config();
}
inline const ::jmc_auto::planning::DualVariableConfig& OpenSpaceTrajectoryOptimizerConfig::dual_variable_warm_start_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_ != NULL ? *dual_variable_warm_start_config_
                         : *::jmc_auto::planning::DualVariableConfig::internal_default_instance();
}
inline ::jmc_auto::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_dual_variable_warm_start_config() {
  set_has_dual_variable_warm_start_config();
  if (dual_variable_warm_start_config_ == NULL) {
    dual_variable_warm_start_config_ = new ::jmc_auto::planning::DualVariableConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_;
}
inline ::jmc_auto::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  clear_has_dual_variable_warm_start_config();
  ::jmc_auto::planning::DualVariableConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = NULL;
  return temp;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_dual_variable_warm_start_config(::jmc_auto::planning::DualVariableConfig* dual_variable_warm_start_config) {
  delete dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  if (dual_variable_warm_start_config) {
    set_has_dual_variable_warm_start_config();
  } else {
    clear_has_dual_variable_warm_start_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
}

// optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_distance_approach_trajectory_smoother_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_distance_approach_trajectory_smoother_config() {
  if (distance_approach_trajectory_smoother_config_ != NULL) distance_approach_trajectory_smoother_config_->::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::Clear();
  clear_has_distance_approach_trajectory_smoother_config();
}
inline const ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig& OpenSpaceTrajectoryOptimizerConfig::distance_approach_trajectory_smoother_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return distance_approach_trajectory_smoother_config_ != NULL ? *distance_approach_trajectory_smoother_config_
                         : *::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::internal_default_instance();
}
inline ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_distance_approach_trajectory_smoother_config() {
  set_has_distance_approach_trajectory_smoother_config();
  if (distance_approach_trajectory_smoother_config_ == NULL) {
    distance_approach_trajectory_smoother_config_ = new ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return distance_approach_trajectory_smoother_config_;
}
inline ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::release_distance_approach_trajectory_smoother_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  clear_has_distance_approach_trajectory_smoother_config();
  ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* temp = distance_approach_trajectory_smoother_config_;
  distance_approach_trajectory_smoother_config_ = NULL;
  return temp;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_distance_approach_trajectory_smoother_config(::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config) {
  delete distance_approach_trajectory_smoother_config_;
  distance_approach_trajectory_smoother_config_ = distance_approach_trajectory_smoother_config;
  if (distance_approach_trajectory_smoother_config) {
    set_has_distance_approach_trajectory_smoother_config();
  } else {
    clear_has_distance_approach_trajectory_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
}

// optional float delta_t = 4 [default = 0.5];
inline bool OpenSpaceTrajectoryOptimizerConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_delta_t() {
  delta_t_ = 0.5f;
  clear_has_delta_t();
}
inline float OpenSpaceTrajectoryOptimizerConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
  return delta_t_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_delta_t(float value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
}

// optional double is_near_destination_threshold = 5 [default = 0.001];
inline bool OpenSpaceTrajectoryOptimizerConfig::has_is_near_destination_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_is_near_destination_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_is_near_destination_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  clear_has_is_near_destination_threshold();
}
inline double OpenSpaceTrajectoryOptimizerConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
  return is_near_destination_threshold_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_is_near_destination_threshold(double value) {
  set_has_is_near_destination_threshold();
  is_near_destination_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
}

// optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_planner_open_space_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_planner_open_space_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_planner_open_space_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_planner_open_space_config() {
  if (planner_open_space_config_ != NULL) planner_open_space_config_->::jmc_auto::planning::PlannerOpenSpaceConfig::Clear();
  clear_has_planner_open_space_config();
}
inline const ::jmc_auto::planning::PlannerOpenSpaceConfig& OpenSpaceTrajectoryOptimizerConfig::planner_open_space_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return planner_open_space_config_ != NULL ? *planner_open_space_config_
                         : *::jmc_auto::planning::PlannerOpenSpaceConfig::internal_default_instance();
}
inline ::jmc_auto::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_planner_open_space_config() {
  set_has_planner_open_space_config();
  if (planner_open_space_config_ == NULL) {
    planner_open_space_config_ = new ::jmc_auto::planning::PlannerOpenSpaceConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return planner_open_space_config_;
}
inline ::jmc_auto::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::release_planner_open_space_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  clear_has_planner_open_space_config();
  ::jmc_auto::planning::PlannerOpenSpaceConfig* temp = planner_open_space_config_;
  planner_open_space_config_ = NULL;
  return temp;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_planner_open_space_config(::jmc_auto::planning::PlannerOpenSpaceConfig* planner_open_space_config) {
  delete planner_open_space_config_;
  planner_open_space_config_ = planner_open_space_config;
  if (planner_open_space_config) {
    set_has_planner_open_space_config();
  } else {
    clear_has_planner_open_space_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
}

// -------------------------------------------------------------------

// HybridAStarConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
inline bool HybridAStarConfig::has_xy_grid_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HybridAStarConfig::set_has_xy_grid_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HybridAStarConfig::clear_has_xy_grid_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HybridAStarConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  clear_has_xy_grid_resolution();
}
inline double HybridAStarConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.xy_grid_resolution)
  return xy_grid_resolution_;
}
inline void HybridAStarConfig::set_xy_grid_resolution(double value) {
  set_has_xy_grid_resolution();
  xy_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
inline bool HybridAStarConfig::has_phi_grid_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HybridAStarConfig::set_has_phi_grid_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HybridAStarConfig::clear_has_phi_grid_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HybridAStarConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  clear_has_phi_grid_resolution();
}
inline double HybridAStarConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.phi_grid_resolution)
  return phi_grid_resolution_;
}
inline void HybridAStarConfig::set_phi_grid_resolution(double value) {
  set_has_phi_grid_resolution();
  phi_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
inline bool HybridAStarConfig::has_next_node_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HybridAStarConfig::set_has_next_node_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HybridAStarConfig::clear_has_next_node_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HybridAStarConfig::clear_next_node_num() {
  next_node_num_ = GOOGLE_ULONGLONG(10);
  clear_has_next_node_num();
}
inline ::google::protobuf::uint64 HybridAStarConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.next_node_num)
  return next_node_num_;
}
inline void HybridAStarConfig::set_next_node_num(::google::protobuf::uint64 value) {
  set_has_next_node_num();
  next_node_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
inline bool HybridAStarConfig::has_step_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HybridAStarConfig::set_has_step_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HybridAStarConfig::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HybridAStarConfig::clear_step_size() {
  step_size_ = 0.5;
  clear_has_step_size();
}
inline double HybridAStarConfig::step_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.step_size)
  return step_size_;
}
inline void HybridAStarConfig::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
inline bool HybridAStarConfig::has_traj_forward_penalty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HybridAStarConfig::set_has_traj_forward_penalty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HybridAStarConfig::clear_has_traj_forward_penalty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HybridAStarConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  clear_has_traj_forward_penalty();
}
inline double HybridAStarConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_forward_penalty)
  return traj_forward_penalty_;
}
inline void HybridAStarConfig::set_traj_forward_penalty(double value) {
  set_has_traj_forward_penalty();
  traj_forward_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
inline bool HybridAStarConfig::has_traj_back_penalty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HybridAStarConfig::set_has_traj_back_penalty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HybridAStarConfig::clear_has_traj_back_penalty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HybridAStarConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  clear_has_traj_back_penalty();
}
inline double HybridAStarConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_back_penalty)
  return traj_back_penalty_;
}
inline void HybridAStarConfig::set_traj_back_penalty(double value) {
  set_has_traj_back_penalty();
  traj_back_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
inline bool HybridAStarConfig::has_traj_gear_switch_penalty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HybridAStarConfig::set_has_traj_gear_switch_penalty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HybridAStarConfig::clear_has_traj_gear_switch_penalty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HybridAStarConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  clear_has_traj_gear_switch_penalty();
}
inline double HybridAStarConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_gear_switch_penalty)
  return traj_gear_switch_penalty_;
}
inline void HybridAStarConfig::set_traj_gear_switch_penalty(double value) {
  set_has_traj_gear_switch_penalty();
  traj_gear_switch_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
inline bool HybridAStarConfig::has_traj_steer_penalty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HybridAStarConfig::set_has_traj_steer_penalty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HybridAStarConfig::clear_has_traj_steer_penalty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HybridAStarConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  clear_has_traj_steer_penalty();
}
inline double HybridAStarConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_steer_penalty)
  return traj_steer_penalty_;
}
inline void HybridAStarConfig::set_traj_steer_penalty(double value) {
  set_has_traj_steer_penalty();
  traj_steer_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
inline bool HybridAStarConfig::has_traj_steer_change_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HybridAStarConfig::set_has_traj_steer_change_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HybridAStarConfig::clear_has_traj_steer_change_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HybridAStarConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  clear_has_traj_steer_change_penalty();
}
inline double HybridAStarConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_steer_change_penalty)
  return traj_steer_change_penalty_;
}
inline void HybridAStarConfig::set_traj_steer_change_penalty(double value) {
  set_has_traj_steer_change_penalty();
  traj_steer_change_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
inline bool HybridAStarConfig::has_grid_a_star_xy_resolution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HybridAStarConfig::set_has_grid_a_star_xy_resolution() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HybridAStarConfig::clear_has_grid_a_star_xy_resolution() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HybridAStarConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  clear_has_grid_a_star_xy_resolution();
}
inline double HybridAStarConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.grid_a_star_xy_resolution)
  return grid_a_star_xy_resolution_;
}
inline void HybridAStarConfig::set_grid_a_star_xy_resolution(double value) {
  set_has_grid_a_star_xy_resolution();
  grid_a_star_xy_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
inline bool HybridAStarConfig::has_node_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HybridAStarConfig::set_has_node_radius() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HybridAStarConfig::clear_has_node_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HybridAStarConfig::clear_node_radius() {
  node_radius_ = 0.5;
  clear_has_node_radius();
}
inline double HybridAStarConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.node_radius)
  return node_radius_;
}
inline void HybridAStarConfig::set_node_radius(double value) {
  set_has_node_radius();
  node_radius_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.node_radius)
}

// -------------------------------------------------------------------

// DualVariableConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableConfig::has_weight_d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DualVariableConfig::set_has_weight_d() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DualVariableConfig::clear_has_weight_d() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DualVariableConfig::clear_weight_d() {
  weight_d_ = 1;
  clear_has_weight_d();
}
inline double DualVariableConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.weight_d)
  return weight_d_;
}
inline void DualVariableConfig::set_weight_d(double value) {
  set_has_weight_d();
  weight_d_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.weight_d)
}

// optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
inline bool DualVariableConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DualVariableConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DualVariableConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DualVariableConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::jmc_auto::planning::IpoptSolverConfig::Clear();
  clear_has_ipopt_config();
}
inline const ::jmc_auto::planning::IpoptSolverConfig& DualVariableConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_
                         : *::jmc_auto::planning::IpoptSolverConfig::internal_default_instance();
}
inline ::jmc_auto::planning::IpoptSolverConfig* DualVariableConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptSolverConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DualVariableConfig.ipopt_config)
  return ipopt_config_;
}
inline ::jmc_auto::planning::IpoptSolverConfig* DualVariableConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DualVariableConfig.ipopt_config)
  clear_has_ipopt_config();
  ::jmc_auto::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline void DualVariableConfig::set_allocated_ipopt_config(::jmc_auto::planning::IpoptSolverConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DualVariableConfig.ipopt_config)
}

// optional .jmc_auto.planning.DualVariableMode qp_format = 3;
inline bool DualVariableConfig::has_qp_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DualVariableConfig::set_has_qp_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DualVariableConfig::clear_has_qp_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DualVariableConfig::clear_qp_format() {
  qp_format_ = 0;
  clear_has_qp_format();
}
inline ::jmc_auto::planning::DualVariableMode DualVariableConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.qp_format)
  return static_cast< ::jmc_auto::planning::DualVariableMode >(qp_format_);
}
inline void DualVariableConfig::set_qp_format(::jmc_auto::planning::DualVariableMode value) {
  assert(::jmc_auto::planning::DualVariableMode_IsValid(value));
  set_has_qp_format();
  qp_format_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DualVariableConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DualVariableConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DualVariableConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DualVariableConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DualVariableConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableConfig::has_debug_osqp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DualVariableConfig::set_has_debug_osqp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DualVariableConfig::clear_has_debug_osqp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DualVariableConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  clear_has_debug_osqp();
}
inline bool DualVariableConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.debug_osqp)
  return debug_osqp_;
}
inline void DualVariableConfig::set_debug_osqp(bool value) {
  set_has_debug_osqp();
  debug_osqp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
inline bool DualVariableConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DualVariableConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DualVariableConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DualVariableConfig::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
inline double DualVariableConfig::beta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.beta)
  return beta_;
}
inline void DualVariableConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.beta)
}

// -------------------------------------------------------------------

// DistanceApproachTrajectorySmootherConfig

// optional double weight_steer = 1;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer() {
  weight_steer_ = 0;
  clear_has_weight_steer();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
  return weight_steer_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer(double value) {
  set_has_weight_steer();
  weight_steer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
}

// optional double weight_a = 2;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a() {
  weight_a_ = 0;
  clear_has_weight_a();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
  return weight_a_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a(double value) {
  set_has_weight_a();
  weight_a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
}

// optional double weight_steer_rate = 3;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  clear_has_weight_steer_rate();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
  return weight_steer_rate_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer_rate(double value) {
  set_has_weight_steer_rate();
  weight_steer_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_a_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  clear_has_weight_a_rate();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
  return weight_a_rate_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a_rate(double value) {
  set_has_weight_a_rate();
  weight_a_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
}

// optional double weight_x = 5;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_x() {
  weight_x_ = 0;
  clear_has_weight_x();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
  return weight_x_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_x(double value) {
  set_has_weight_x();
  weight_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
}

// optional double weight_y = 6;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_y() {
  weight_y_ = 0;
  clear_has_weight_y();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
  return weight_y_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_y(double value) {
  set_has_weight_y();
  weight_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
}

// optional double weight_phi = 7;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_phi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_phi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_phi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_phi() {
  weight_phi_ = 0;
  clear_has_weight_phi();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
  return weight_phi_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_phi(double value) {
  set_has_weight_phi();
  weight_phi_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
}

// optional double weight_v = 8;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_v() {
  weight_v_ = 0;
  clear_has_weight_v();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
  return weight_v_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_v(double value) {
  set_has_weight_v();
  weight_v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_stitching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer_stitching() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer_stitching() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  clear_has_weight_steer_stitching();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
  return weight_steer_stitching_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer_stitching(double value) {
  set_has_weight_steer_stitching();
  weight_steer_stitching_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a_stitching() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_a_stitching() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a_stitching() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  clear_has_weight_a_stitching();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
  return weight_a_stitching_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a_stitching(double value) {
  set_has_weight_a_stitching();
  weight_a_stitching_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_first_order_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_first_order_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_first_order_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  clear_has_weight_first_order_time();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
  return weight_first_order_time_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_first_order_time(double value) {
  set_has_weight_first_order_time();
  weight_first_order_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_second_order_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_second_order_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_second_order_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  clear_has_weight_second_order_time();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
  return weight_second_order_time_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_second_order_time(double value) {
  set_has_weight_second_order_time();
  weight_second_order_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
inline bool DistanceApproachTrajectorySmootherConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DistanceApproachTrajectorySmootherConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_speed_forward() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_speed_forward() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_speed_forward() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  clear_has_max_speed_forward();
}
inline double DistanceApproachTrajectorySmootherConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
  return max_speed_forward_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_speed_forward(double value) {
  set_has_max_speed_forward();
  max_speed_forward_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_speed_reverse() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_speed_reverse() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_speed_reverse() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  clear_has_max_speed_reverse();
}
inline double DistanceApproachTrajectorySmootherConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
  return max_speed_reverse_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_speed_reverse(double value) {
  set_has_max_speed_reverse();
  max_speed_reverse_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_forward() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_acceleration_forward() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_acceleration_forward() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  clear_has_max_acceleration_forward();
}
inline double DistanceApproachTrajectorySmootherConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
  return max_acceleration_forward_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_forward(double value) {
  set_has_max_acceleration_forward();
  max_acceleration_forward_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_reverse() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_acceleration_reverse() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_acceleration_reverse() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  clear_has_max_acceleration_reverse();
}
inline double DistanceApproachTrajectorySmootherConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
  return max_acceleration_reverse_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_reverse(double value) {
  set_has_max_acceleration_reverse();
  max_acceleration_reverse_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
inline bool DistanceApproachTrajectorySmootherConfig::has_min_time_sample_scaling() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_min_time_sample_scaling() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_min_time_sample_scaling() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  clear_has_min_time_sample_scaling();
}
inline double DistanceApproachTrajectorySmootherConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
  return min_time_sample_scaling_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_min_time_sample_scaling(double value) {
  set_has_min_time_sample_scaling();
  min_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_time_sample_scaling() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_time_sample_scaling() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_time_sample_scaling() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  clear_has_max_time_sample_scaling();
}
inline double DistanceApproachTrajectorySmootherConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
  return max_time_sample_scaling_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_time_sample_scaling(double value) {
  set_has_max_time_sample_scaling();
  max_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
inline bool DistanceApproachTrajectorySmootherConfig::has_use_fix_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_use_fix_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_use_fix_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  clear_has_use_fix_time();
}
inline bool DistanceApproachTrajectorySmootherConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
  return use_fix_time_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_use_fix_time(bool value) {
  set_has_use_fix_time();
  use_fix_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
}

// optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
inline bool DistanceApproachTrajectorySmootherConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::jmc_auto::planning::IpoptSolverConfig::Clear();
  clear_has_ipopt_config();
}
inline const ::jmc_auto::planning::IpoptSolverConfig& DistanceApproachTrajectorySmootherConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_
                         : *::jmc_auto::planning::IpoptSolverConfig::internal_default_instance();
}
inline ::jmc_auto::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptSolverConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return ipopt_config_;
}
inline ::jmc_auto::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  clear_has_ipopt_config();
  ::jmc_auto::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline void DistanceApproachTrajectorySmootherConfig::set_allocated_ipopt_config(::jmc_auto::planning::IpoptSolverConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_constraint_check() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_constraint_check() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_constraint_check() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  clear_has_enable_constraint_check();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
  return enable_constraint_check_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_constraint_check(bool value) {
  set_has_enable_constraint_check();
  enable_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_hand_derivative() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_hand_derivative() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_hand_derivative() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  clear_has_enable_hand_derivative();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
  return enable_hand_derivative_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_hand_derivative(bool value) {
  set_has_enable_hand_derivative();
  enable_hand_derivative_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_derivative_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_derivative_check() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_derivative_check() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  clear_has_enable_derivative_check();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
  return enable_derivative_check_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_derivative_check(bool value) {
  set_has_enable_derivative_check();
  enable_derivative_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_initial_final_check() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_initial_final_check() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_initial_final_check() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  clear_has_enable_initial_final_check();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
  return enable_initial_final_check_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_initial_final_check(bool value) {
  set_has_enable_initial_final_check();
  enable_initial_final_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
}

// -------------------------------------------------------------------

// IpoptSolverConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptSolverConfig::has_ipopt_print_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_print_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpoptSolverConfig::clear_has_ipopt_print_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpoptSolverConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  clear_has_ipopt_print_level();
}
inline ::google::protobuf::int32 IpoptSolverConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_print_level)
  return ipopt_print_level_;
}
inline void IpoptSolverConfig::set_ipopt_print_level(::google::protobuf::int32 value) {
  set_has_ipopt_print_level();
  ipopt_print_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptSolverConfig::has_mumps_mem_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpoptSolverConfig::set_has_mumps_mem_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpoptSolverConfig::clear_has_mumps_mem_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpoptSolverConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  clear_has_mumps_mem_percent();
}
inline ::google::protobuf::int32 IpoptSolverConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.mumps_mem_percent)
  return mumps_mem_percent_;
}
inline void IpoptSolverConfig::set_mumps_mem_percent(::google::protobuf::int32 value) {
  set_has_mumps_mem_percent();
  mumps_mem_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptSolverConfig::has_mumps_pivtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpoptSolverConfig::set_has_mumps_pivtol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpoptSolverConfig::clear_has_mumps_pivtol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpoptSolverConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  clear_has_mumps_pivtol();
}
inline double IpoptSolverConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.mumps_pivtol)
  return mumps_pivtol_;
}
inline void IpoptSolverConfig::set_mumps_pivtol(double value) {
  set_has_mumps_pivtol();
  mumps_pivtol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptSolverConfig::has_ipopt_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpoptSolverConfig::clear_has_ipopt_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpoptSolverConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  clear_has_ipopt_max_iter();
}
inline ::google::protobuf::int32 IpoptSolverConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_max_iter)
  return ipopt_max_iter_;
}
inline void IpoptSolverConfig::set_ipopt_max_iter(::google::protobuf::int32 value) {
  set_has_ipopt_max_iter();
  ipopt_max_iter_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptSolverConfig::has_ipopt_tol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_tol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpoptSolverConfig::clear_has_ipopt_tol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpoptSolverConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  clear_has_ipopt_tol();
}
inline double IpoptSolverConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_tol)
  return ipopt_tol_;
}
inline void IpoptSolverConfig::set_ipopt_tol(double value) {
  set_has_ipopt_tol();
  ipopt_tol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptSolverConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpoptSolverConfig::clear_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpoptSolverConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  clear_has_ipopt_acceptable_constr_viol_tol();
}
inline double IpoptSolverConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
  return ipopt_acceptable_constr_viol_tol_;
}
inline void IpoptSolverConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  set_has_ipopt_acceptable_constr_viol_tol();
  ipopt_acceptable_constr_viol_tol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptSolverConfig::has_ipopt_min_hessian_perturbation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpoptSolverConfig::clear_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpoptSolverConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  clear_has_ipopt_min_hessian_perturbation();
}
inline double IpoptSolverConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
  return ipopt_min_hessian_perturbation_;
}
inline void IpoptSolverConfig::set_ipopt_min_hessian_perturbation(double value) {
  set_has_ipopt_min_hessian_perturbation();
  ipopt_min_hessian_perturbation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptSolverConfig::has_ipopt_jacobian_regularization_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpoptSolverConfig::clear_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpoptSolverConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  clear_has_ipopt_jacobian_regularization_value();
}
inline double IpoptSolverConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
  return ipopt_jacobian_regularization_value_;
}
inline void IpoptSolverConfig::set_ipopt_jacobian_regularization_value(double value) {
  set_has_ipopt_jacobian_regularization_value();
  ipopt_jacobian_regularization_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptSolverConfig::has_ipopt_print_timing_statistics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpoptSolverConfig::clear_has_ipopt_print_timing_statistics() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpoptSolverConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_print_timing_statistics();
}
inline const ::std::string& IpoptSolverConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.GetNoArena();
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const ::std::string& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
#if LANG_CXX11
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(::std::string&& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
#endif
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline ::std::string* IpoptSolverConfig::mutable_ipopt_print_timing_statistics() {
  set_has_ipopt_print_timing_statistics();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptSolverConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  clear_has_ipopt_print_timing_statistics();
  return ipopt_print_timing_statistics_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != NULL) {
    set_has_ipopt_print_timing_statistics();
  } else {
    clear_has_ipopt_print_timing_statistics();
  }
  ipopt_print_timing_statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptSolverConfig::has_ipopt_alpha_for_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpoptSolverConfig::clear_has_ipopt_alpha_for_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpoptSolverConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_alpha_for_y();
}
inline const ::std::string& IpoptSolverConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.GetNoArena();
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const ::std::string& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
#if LANG_CXX11
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(::std::string&& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
#endif
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline ::std::string* IpoptSolverConfig::mutable_ipopt_alpha_for_y() {
  set_has_ipopt_alpha_for_y();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptSolverConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  clear_has_ipopt_alpha_for_y();
  return ipopt_alpha_for_y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != NULL) {
    set_has_ipopt_alpha_for_y();
  } else {
    clear_has_ipopt_alpha_for_y();
  }
  ipopt_alpha_for_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptSolverConfig::has_ipopt_recalc_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpoptSolverConfig::clear_has_ipopt_recalc_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpoptSolverConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_recalc_y();
}
inline const ::std::string& IpoptSolverConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.GetNoArena();
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const ::std::string& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
#if LANG_CXX11
inline void IpoptSolverConfig::set_ipopt_recalc_y(::std::string&& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
#endif
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline ::std::string* IpoptSolverConfig::mutable_ipopt_recalc_y() {
  set_has_ipopt_recalc_y();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptSolverConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
  clear_has_ipopt_recalc_y();
  return ipopt_recalc_y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != NULL) {
    set_has_ipopt_recalc_y();
  } else {
    clear_has_ipopt_recalc_y();
  }
  ipopt_recalc_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptSolverConfig::has_ipopt_mu_init() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_mu_init() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpoptSolverConfig::clear_has_ipopt_mu_init() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpoptSolverConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  clear_has_ipopt_mu_init();
}
inline double IpoptSolverConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_mu_init)
  return ipopt_mu_init_;
}
inline void IpoptSolverConfig::set_ipopt_mu_init(double value) {
  set_has_ipopt_mu_init();
  ipopt_mu_init_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_mu_init)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::planning::DualVariableMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::planning::DualVariableMode>() {
  return ::jmc_auto::planning::DualVariableMode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto__INCLUDED
