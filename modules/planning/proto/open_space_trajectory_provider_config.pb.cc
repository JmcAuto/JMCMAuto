// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_provider_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/open_space_trajectory_provider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class OpenSpaceTrajectoryProviderConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceTrajectoryProviderConfig> {
} _OpenSpaceTrajectoryProviderConfig_default_instance_;
class OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceTrajectoryOptimizerConfig> {
} _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
class HybridAStarConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HybridAStarConfig> {
} _HybridAStarConfig_default_instance_;
class DualVariableConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DualVariableConfig> {
} _DualVariableConfig_default_instance_;
class DistanceApproachTrajectorySmootherConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistanceApproachTrajectorySmootherConfig> {
} _DistanceApproachTrajectorySmootherConfig_default_instance_;
class IpoptSolverConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IpoptSolverConfig> {
} _IpoptSolverConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryProviderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryProviderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryProviderConfig, open_space_trajectory_optimizer_config_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, hybrid_a_star_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, dual_variable_warm_start_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, distance_approach_trajectory_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, is_near_destination_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryOptimizerConfig, planner_open_space_config_),
  0,
  1,
  2,
  4,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, xy_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, phi_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, next_node_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, traj_forward_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, traj_back_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, traj_gear_switch_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, traj_steer_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, traj_steer_change_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, grid_a_star_xy_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HybridAStarConfig, node_radius_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, weight_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, qp_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, debug_osqp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DualVariableConfig, beta_),
  4,
  0,
  2,
  1,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_steer_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_a_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_steer_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_a_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_first_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, weight_second_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, max_speed_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, max_speed_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, max_acceleration_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, max_acceleration_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, min_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, max_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, use_fix_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, enable_constraint_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, enable_hand_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, enable_derivative_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistanceApproachTrajectorySmootherConfig, enable_initial_final_check_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  19,
  20,
  21,
  22,
  23,
  24,
  14,
  0,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_print_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, mumps_mem_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, mumps_pivtol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_acceptable_constr_viol_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_min_hessian_perturbation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_jacobian_regularization_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_print_timing_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_alpha_for_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_recalc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpoptSolverConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(OpenSpaceTrajectoryProviderConfig)},
  { 7, 18, sizeof(OpenSpaceTrajectoryOptimizerConfig)},
  { 24, 40, sizeof(HybridAStarConfig)},
  { 51, 62, sizeof(DualVariableConfig)},
  { 68, 98, sizeof(DistanceApproachTrajectorySmootherConfig)},
  { 123, 140, sizeof(IpoptSolverConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpenSpaceTrajectoryProviderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpenSpaceTrajectoryOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HybridAStarConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DualVariableConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DistanceApproachTrajectorySmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IpoptSolverConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/open_space_trajectory_provider_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _OpenSpaceTrajectoryProviderConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OpenSpaceTrajectoryOptimizerConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _HybridAStarConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DualVariableConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DistanceApproachTrajectorySmootherConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _IpoptSolverConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::InitDefaults();
  _OpenSpaceTrajectoryProviderConfig_default_instance_.DefaultConstruct();
  _OpenSpaceTrajectoryOptimizerConfig_default_instance_.DefaultConstruct();
  _HybridAStarConfig_default_instance_.DefaultConstruct();
  _DualVariableConfig_default_instance_.DefaultConstruct();
  _DistanceApproachTrajectorySmootherConfig_default_instance_.DefaultConstruct();
  _IpoptSolverConfig_default_instance_.DefaultConstruct();
  _OpenSpaceTrajectoryProviderConfig_default_instance_.get_mutable()->open_space_trajectory_optimizer_config_ = const_cast< ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig*>(
      ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::internal_default_instance());
  _OpenSpaceTrajectoryOptimizerConfig_default_instance_.get_mutable()->hybrid_a_star_config_ = const_cast< ::jmc_auto::planning::HybridAStarConfig*>(
      ::jmc_auto::planning::HybridAStarConfig::internal_default_instance());
  _OpenSpaceTrajectoryOptimizerConfig_default_instance_.get_mutable()->dual_variable_warm_start_config_ = const_cast< ::jmc_auto::planning::DualVariableConfig*>(
      ::jmc_auto::planning::DualVariableConfig::internal_default_instance());
  _OpenSpaceTrajectoryOptimizerConfig_default_instance_.get_mutable()->distance_approach_trajectory_smoother_config_ = const_cast< ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig*>(
      ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::internal_default_instance());
  _OpenSpaceTrajectoryOptimizerConfig_default_instance_.get_mutable()->planner_open_space_config_ = const_cast< ::jmc_auto::planning::PlannerOpenSpaceConfig*>(
      ::jmc_auto::planning::PlannerOpenSpaceConfig::internal_default_instance());
  _DualVariableConfig_default_instance_.get_mutable()->ipopt_config_ = const_cast< ::jmc_auto::planning::IpoptSolverConfig*>(
      ::jmc_auto::planning::IpoptSolverConfig::internal_default_instance());
  _DistanceApproachTrajectorySmootherConfig_default_instance_.get_mutable()->ipopt_config_ = const_cast< ::jmc_auto::planning::IpoptSolverConfig*>(
      ::jmc_auto::planning::IpoptSolverConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nBmodules/planning/proto/open_space_traj"
      "ectory_provider_config.proto\022\021jmc_auto.p"
      "lanning\0326modules/planning/proto/planner_"
      "open_space_config.proto\"\212\001\n!OpenSpaceTra"
      "jectoryProviderConfig\022e\n&open_space_traj"
      "ectory_optimizer_config\030\001 \001(\01325.jmc_auto"
      ".planning.OpenSpaceTrajectoryOptimizerCo"
      "nfig\"\275\003\n\"OpenSpaceTrajectoryOptimizerCon"
      "fig\022B\n\024hybrid_a_star_config\030\001 \001(\0132$.jmc_"
      "auto.planning.HybridAStarConfig\022N\n\037dual_"
      "variable_warm_start_config\030\002 \001(\0132%.jmc_a"
      "uto.planning.DualVariableConfig\022q\n,dista"
      "nce_approach_trajectory_smoother_config\030"
      "\003 \001(\0132;.jmc_auto.planning.DistanceApproa"
      "chTrajectorySmootherConfig\022\024\n\007delta_t\030\004 "
      "\001(\002:\0030.5\022,\n\035is_near_destination_threshol"
      "d\030\005 \001(\001:\0050.001\022L\n\031planner_open_space_con"
      "fig\030\006 \001(\0132).jmc_auto.planning.PlannerOpe"
      "nSpaceConfig\"\371\002\n\021HybridAStarConfig\022\037\n\022xy"
      "_grid_resolution\030\001 \001(\001:\0030.2\022!\n\023phi_grid_"
      "resolution\030\002 \001(\001:\0040.05\022\031\n\rnext_node_num\030"
      "\003 \001(\004:\00210\022\026\n\tstep_size\030\004 \001(\001:\0030.5\022\037\n\024tra"
      "j_forward_penalty\030\005 \001(\001:\0010\022\034\n\021traj_back_"
      "penalty\030\006 \001(\001:\0010\022$\n\030traj_gear_switch_pen"
      "alty\030\007 \001(\001:\00210\022\037\n\022traj_steer_penalty\030\010 \001"
      "(\001:\003100\022%\n\031traj_steer_change_penalty\030\t \001"
      "(\001:\00210\022&\n\031grid_a_star_xy_resolution\030\017 \001("
      "\001:\0030.1\022\030\n\013node_radius\030\020 \001(\001:\0030.5\"\351\001\n\022Dua"
      "lVariableConfig\022\023\n\010weight_d\030\001 \001(\001:\0011\022:\n\014"
      "ipopt_config\030\002 \001(\0132$.jmc_auto.planning.I"
      "poptSolverConfig\0226\n\tqp_format\030\003 \001(\0162#.jm"
      "c_auto.planning.DualVariableMode\022\036\n\023min_"
      "safety_distance\030\004 \001(\001:\0010\022\031\n\ndebug_osqp\030\005"
      " \001(\010:\005false\022\017\n\004beta\030\006 \001(\001:\0011\"\244\006\n(Distanc"
      "eApproachTrajectorySmootherConfig\022\024\n\014wei"
      "ght_steer\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001\022\031\n\021wei"
      "ght_steer_rate\030\003 \001(\001\022\025\n\rweight_a_rate\030\004 "
      "\001(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n\010weight_y\030\006 \001(\001\022"
      "\022\n\nweight_phi\030\007 \001(\001\022\020\n\010weight_v\030\010 \001(\001\022\036\n"
      "\026weight_steer_stitching\030\t \001(\001\022\032\n\022weight_"
      "a_stitching\030\n \001(\001\022\037\n\027weight_first_order_"
      "time\030\013 \001(\001\022 \n\030weight_second_order_time\030\014"
      " \001(\001\022\036\n\023min_safety_distance\030\r \001(\001:\0010\022\034\n\021"
      "max_speed_forward\030\016 \001(\001:\0013\022\034\n\021max_speed_"
      "reverse\030\017 \001(\001:\0012\022#\n\030max_acceleration_for"
      "ward\030\020 \001(\001:\0012\022#\n\030max_acceleration_revers"
      "e\030\021 \001(\001:\0012\022$\n\027min_time_sample_scaling\030\022 "
      "\001(\001:\0030.1\022#\n\027max_time_sample_scaling\030\023 \001("
      "\001:\00210\022\033\n\014use_fix_time\030\024 \001(\010:\005false\022:\n\014ip"
      "opt_config\030\025 \001(\0132$.jmc_auto.planning.Ipo"
      "ptSolverConfig\022\037\n\027enable_constraint_chec"
      "k\030\026 \001(\010\022\036\n\026enable_hand_derivative\030\027 \001(\010\022"
      "\037\n\027enable_derivative_check\030\030 \001(\010\022)\n\032enab"
      "le_initial_final_check\030\031 \001(\010:\005false\"\377\002\n\021"
      "IpoptSolverConfig\022\031\n\021ipopt_print_level\030\001"
      " \001(\005\022\031\n\021mumps_mem_percent\030\002 \001(\005\022\024\n\014mumps"
      "_pivtol\030\003 \001(\001\022\026\n\016ipopt_max_iter\030\004 \001(\005\022\021\n"
      "\tipopt_tol\030\005 \001(\001\022(\n ipopt_acceptable_con"
      "str_viol_tol\030\006 \001(\001\022&\n\036ipopt_min_hessian_"
      "perturbation\030\007 \001(\001\022+\n#ipopt_jacobian_reg"
      "ularization_value\030\010 \001(\001\022%\n\035ipopt_print_t"
      "iming_statistics\030\t \001(\t\022\031\n\021ipopt_alpha_fo"
      "r_y\030\n \001(\t\022\026\n\016ipopt_recalc_y\030\013 \001(\t\022\032\n\ripo"
      "pt_mu_init\030\014 \001(\001:\0030.1*w\n\020DualVariableMod"
      "e\022\027\n\023DUAL_VARIABLE_IPOPT\020\000\022\031\n\025DUAL_VARIA"
      "BLE_IPOPTQP\020\001\022\026\n\022DUAL_VARIABLE_OSQP\020\002\022\027\n"
      "\023DUAL_VARIABLE_DEBUG\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/open_space_trajectory_provider_config.proto", &protobuf_RegisterTypes);
  ::jmc_auto::planning::protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* DualVariableMode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool DualVariableMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceTrajectoryProviderConfig::kOpenSpaceTrajectoryOptimizerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
}
OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_open_space_trajectory_optimizer_config()) {
    open_space_trajectory_optimizer_config_ = new ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig(*from.open_space_trajectory_optimizer_config_);
  } else {
    open_space_trajectory_optimizer_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
}

void OpenSpaceTrajectoryProviderConfig::SharedCtor() {
  _cached_size_ = 0;
  open_space_trajectory_optimizer_config_ = NULL;
}

OpenSpaceTrajectoryProviderConfig::~OpenSpaceTrajectoryProviderConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryProviderConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete open_space_trajectory_optimizer_config_;
  }
}

void OpenSpaceTrajectoryProviderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSpaceTrajectoryProviderConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceTrajectoryProviderConfig& OpenSpaceTrajectoryProviderConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenSpaceTrajectoryProviderConfig* OpenSpaceTrajectoryProviderConfig::New(::google::protobuf::Arena* arena) const {
  OpenSpaceTrajectoryProviderConfig* n = new OpenSpaceTrajectoryProviderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenSpaceTrajectoryProviderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  if (has_open_space_trajectory_optimizer_config()) {
    GOOGLE_DCHECK(open_space_trajectory_optimizer_config_ != NULL);
    open_space_trajectory_optimizer_config_->::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceTrajectoryProviderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_space_trajectory_optimizer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  return false;
#undef DO_
}

void OpenSpaceTrajectoryProviderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->open_space_trajectory_optimizer_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
}

::google::protobuf::uint8* OpenSpaceTrajectoryProviderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->open_space_trajectory_optimizer_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  return target;
}

size_t OpenSpaceTrajectoryProviderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (has_open_space_trajectory_optimizer_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->open_space_trajectory_optimizer_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSpaceTrajectoryProviderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryProviderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceTrajectoryProviderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryProviderConfig::MergeFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_open_space_trajectory_optimizer_config()) {
    mutable_open_space_trajectory_optimizer_config()->::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::MergeFrom(from.open_space_trajectory_optimizer_config());
  }
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryProviderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryProviderConfig::Swap(OpenSpaceTrajectoryProviderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceTrajectoryProviderConfig::InternalSwap(OpenSpaceTrajectoryProviderConfig* other) {
  std::swap(open_space_trajectory_optimizer_config_, other->open_space_trajectory_optimizer_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenSpaceTrajectoryProviderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceTrajectoryProviderConfig

// optional .jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
bool OpenSpaceTrajectoryProviderConfig::has_open_space_trajectory_optimizer_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenSpaceTrajectoryProviderConfig::set_has_open_space_trajectory_optimizer_config() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenSpaceTrajectoryProviderConfig::clear_has_open_space_trajectory_optimizer_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenSpaceTrajectoryProviderConfig::clear_open_space_trajectory_optimizer_config() {
  if (open_space_trajectory_optimizer_config_ != NULL) open_space_trajectory_optimizer_config_->::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::Clear();
  clear_has_open_space_trajectory_optimizer_config();
}
const ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryProviderConfig::open_space_trajectory_optimizer_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return open_space_trajectory_optimizer_config_ != NULL ? *open_space_trajectory_optimizer_config_
                         : *::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig::internal_default_instance();
}
::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::mutable_open_space_trajectory_optimizer_config() {
  set_has_open_space_trajectory_optimizer_config();
  if (open_space_trajectory_optimizer_config_ == NULL) {
    open_space_trajectory_optimizer_config_ = new ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return open_space_trajectory_optimizer_config_;
}
::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::release_open_space_trajectory_optimizer_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  clear_has_open_space_trajectory_optimizer_config();
  ::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* temp = open_space_trajectory_optimizer_config_;
  open_space_trajectory_optimizer_config_ = NULL;
  return temp;
}
void OpenSpaceTrajectoryProviderConfig::set_allocated_open_space_trajectory_optimizer_config(::jmc_auto::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config) {
  delete open_space_trajectory_optimizer_config_;
  open_space_trajectory_optimizer_config_ = open_space_trajectory_optimizer_config;
  if (open_space_trajectory_optimizer_config) {
    set_has_open_space_trajectory_optimizer_config();
  } else {
    clear_has_open_space_trajectory_optimizer_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceTrajectoryOptimizerConfig::kHybridAStarConfigFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kDualVariableWarmStartConfigFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kDistanceApproachTrajectorySmootherConfigFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kDeltaTFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kIsNearDestinationThresholdFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kPlannerOpenSpaceConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
}
OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hybrid_a_star_config()) {
    hybrid_a_star_config_ = new ::jmc_auto::planning::HybridAStarConfig(*from.hybrid_a_star_config_);
  } else {
    hybrid_a_star_config_ = NULL;
  }
  if (from.has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::jmc_auto::planning::DualVariableConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = NULL;
  }
  if (from.has_distance_approach_trajectory_smoother_config()) {
    distance_approach_trajectory_smoother_config_ = new ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig(*from.distance_approach_trajectory_smoother_config_);
  } else {
    distance_approach_trajectory_smoother_config_ = NULL;
  }
  if (from.has_planner_open_space_config()) {
    planner_open_space_config_ = new ::jmc_auto::planning::PlannerOpenSpaceConfig(*from.planner_open_space_config_);
  } else {
    planner_open_space_config_ = NULL;
  }
  ::memcpy(&delta_t_, &from.delta_t_,
    reinterpret_cast<char*>(&is_near_destination_threshold_) -
    reinterpret_cast<char*>(&delta_t_) + sizeof(is_near_destination_threshold_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
}

void OpenSpaceTrajectoryOptimizerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hybrid_a_star_config_, 0, reinterpret_cast<char*>(&planner_open_space_config_) -
    reinterpret_cast<char*>(&hybrid_a_star_config_) + sizeof(planner_open_space_config_));
  delta_t_ = 0.5f;
  is_near_destination_threshold_ = 0.001;
}

OpenSpaceTrajectoryOptimizerConfig::~OpenSpaceTrajectoryOptimizerConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryOptimizerConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete hybrid_a_star_config_;
  }
  if (this != internal_default_instance()) {
    delete dual_variable_warm_start_config_;
  }
  if (this != internal_default_instance()) {
    delete distance_approach_trajectory_smoother_config_;
  }
  if (this != internal_default_instance()) {
    delete planner_open_space_config_;
  }
}

void OpenSpaceTrajectoryOptimizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSpaceTrajectoryOptimizerConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryOptimizerConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryOptimizerConfig::New(::google::protobuf::Arena* arena) const {
  OpenSpaceTrajectoryOptimizerConfig* n = new OpenSpaceTrajectoryOptimizerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenSpaceTrajectoryOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_hybrid_a_star_config()) {
      GOOGLE_DCHECK(hybrid_a_star_config_ != NULL);
      hybrid_a_star_config_->::jmc_auto::planning::HybridAStarConfig::Clear();
    }
    if (has_dual_variable_warm_start_config()) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != NULL);
      dual_variable_warm_start_config_->::jmc_auto::planning::DualVariableConfig::Clear();
    }
    if (has_distance_approach_trajectory_smoother_config()) {
      GOOGLE_DCHECK(distance_approach_trajectory_smoother_config_ != NULL);
      distance_approach_trajectory_smoother_config_->::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::Clear();
    }
    if (has_planner_open_space_config()) {
      GOOGLE_DCHECK(planner_open_space_config_ != NULL);
      planner_open_space_config_->::jmc_auto::planning::PlannerOpenSpaceConfig::Clear();
    }
    delta_t_ = 0.5f;
    is_near_destination_threshold_ = 0.001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceTrajectoryOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hybrid_a_star_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dual_variable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distance_approach_trajectory_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_t = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_threshold = 5 [default = 0.001];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_is_near_destination_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planner_open_space_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  return false;
#undef DO_
}

void OpenSpaceTrajectoryOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hybrid_a_star_config_, output);
  }

  // optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dual_variable_warm_start_config_, output);
  }

  // optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->distance_approach_trajectory_smoother_config_, output);
  }

  // optional float delta_t = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->delta_t(), output);
  }

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->is_near_destination_threshold(), output);
  }

  // optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->planner_open_space_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
}

::google::protobuf::uint8* OpenSpaceTrajectoryOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hybrid_a_star_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dual_variable_warm_start_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->distance_approach_trajectory_smoother_config_, deterministic, target);
  }

  // optional float delta_t = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->delta_t(), target);
  }

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->is_near_destination_threshold(), target);
  }

  // optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->planner_open_space_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  return target;
}

size_t OpenSpaceTrajectoryOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
    if (has_hybrid_a_star_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hybrid_a_star_config_);
    }

    // optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
    if (has_dual_variable_warm_start_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dual_variable_warm_start_config_);
    }

    // optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
    if (has_distance_approach_trajectory_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->distance_approach_trajectory_smoother_config_);
    }

    // optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
    if (has_planner_open_space_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planner_open_space_config_);
    }

    // optional float delta_t = 4 [default = 0.5];
    if (has_delta_t()) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 5 [default = 0.001];
    if (has_is_near_destination_threshold()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceTrajectoryOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hybrid_a_star_config()->::jmc_auto::planning::HybridAStarConfig::MergeFrom(from.hybrid_a_star_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dual_variable_warm_start_config()->::jmc_auto::planning::DualVariableConfig::MergeFrom(from.dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_distance_approach_trajectory_smoother_config()->::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::MergeFrom(from.distance_approach_trajectory_smoother_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_planner_open_space_config()->::jmc_auto::planning::PlannerOpenSpaceConfig::MergeFrom(from.planner_open_space_config());
    }
    if (cached_has_bits & 0x00000010u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryOptimizerConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryOptimizerConfig::Swap(OpenSpaceTrajectoryOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceTrajectoryOptimizerConfig::InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other) {
  std::swap(hybrid_a_star_config_, other->hybrid_a_star_config_);
  std::swap(dual_variable_warm_start_config_, other->dual_variable_warm_start_config_);
  std::swap(distance_approach_trajectory_smoother_config_, other->distance_approach_trajectory_smoother_config_);
  std::swap(planner_open_space_config_, other->planner_open_space_config_);
  std::swap(delta_t_, other->delta_t_);
  std::swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenSpaceTrajectoryOptimizerConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceTrajectoryOptimizerConfig

// optional .jmc_auto.planning.HybridAStarConfig hybrid_a_star_config = 1;
bool OpenSpaceTrajectoryOptimizerConfig::has_hybrid_a_star_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenSpaceTrajectoryOptimizerConfig::set_has_hybrid_a_star_config() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_has_hybrid_a_star_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_hybrid_a_star_config() {
  if (hybrid_a_star_config_ != NULL) hybrid_a_star_config_->::jmc_auto::planning::HybridAStarConfig::Clear();
  clear_has_hybrid_a_star_config();
}
const ::jmc_auto::planning::HybridAStarConfig& OpenSpaceTrajectoryOptimizerConfig::hybrid_a_star_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return hybrid_a_star_config_ != NULL ? *hybrid_a_star_config_
                         : *::jmc_auto::planning::HybridAStarConfig::internal_default_instance();
}
::jmc_auto::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_hybrid_a_star_config() {
  set_has_hybrid_a_star_config();
  if (hybrid_a_star_config_ == NULL) {
    hybrid_a_star_config_ = new ::jmc_auto::planning::HybridAStarConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return hybrid_a_star_config_;
}
::jmc_auto::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::release_hybrid_a_star_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  clear_has_hybrid_a_star_config();
  ::jmc_auto::planning::HybridAStarConfig* temp = hybrid_a_star_config_;
  hybrid_a_star_config_ = NULL;
  return temp;
}
void OpenSpaceTrajectoryOptimizerConfig::set_allocated_hybrid_a_star_config(::jmc_auto::planning::HybridAStarConfig* hybrid_a_star_config) {
  delete hybrid_a_star_config_;
  hybrid_a_star_config_ = hybrid_a_star_config;
  if (hybrid_a_star_config) {
    set_has_hybrid_a_star_config();
  } else {
    clear_has_hybrid_a_star_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
}

// optional .jmc_auto.planning.DualVariableConfig dual_variable_warm_start_config = 2;
bool OpenSpaceTrajectoryOptimizerConfig::has_dual_variable_warm_start_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpenSpaceTrajectoryOptimizerConfig::set_has_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_has_dual_variable_warm_start_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != NULL) dual_variable_warm_start_config_->::jmc_auto::planning::DualVariableConfig::Clear();
  clear_has_dual_variable_warm_start_config();
}
const ::jmc_auto::planning::DualVariableConfig& OpenSpaceTrajectoryOptimizerConfig::dual_variable_warm_start_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_ != NULL ? *dual_variable_warm_start_config_
                         : *::jmc_auto::planning::DualVariableConfig::internal_default_instance();
}
::jmc_auto::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_dual_variable_warm_start_config() {
  set_has_dual_variable_warm_start_config();
  if (dual_variable_warm_start_config_ == NULL) {
    dual_variable_warm_start_config_ = new ::jmc_auto::planning::DualVariableConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_;
}
::jmc_auto::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  clear_has_dual_variable_warm_start_config();
  ::jmc_auto::planning::DualVariableConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = NULL;
  return temp;
}
void OpenSpaceTrajectoryOptimizerConfig::set_allocated_dual_variable_warm_start_config(::jmc_auto::planning::DualVariableConfig* dual_variable_warm_start_config) {
  delete dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  if (dual_variable_warm_start_config) {
    set_has_dual_variable_warm_start_config();
  } else {
    clear_has_dual_variable_warm_start_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
}

// optional .jmc_auto.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
bool OpenSpaceTrajectoryOptimizerConfig::has_distance_approach_trajectory_smoother_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpenSpaceTrajectoryOptimizerConfig::set_has_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] |= 0x00000004u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_has_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_distance_approach_trajectory_smoother_config() {
  if (distance_approach_trajectory_smoother_config_ != NULL) distance_approach_trajectory_smoother_config_->::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::Clear();
  clear_has_distance_approach_trajectory_smoother_config();
}
const ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig& OpenSpaceTrajectoryOptimizerConfig::distance_approach_trajectory_smoother_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return distance_approach_trajectory_smoother_config_ != NULL ? *distance_approach_trajectory_smoother_config_
                         : *::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig::internal_default_instance();
}
::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_distance_approach_trajectory_smoother_config() {
  set_has_distance_approach_trajectory_smoother_config();
  if (distance_approach_trajectory_smoother_config_ == NULL) {
    distance_approach_trajectory_smoother_config_ = new ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return distance_approach_trajectory_smoother_config_;
}
::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::release_distance_approach_trajectory_smoother_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  clear_has_distance_approach_trajectory_smoother_config();
  ::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* temp = distance_approach_trajectory_smoother_config_;
  distance_approach_trajectory_smoother_config_ = NULL;
  return temp;
}
void OpenSpaceTrajectoryOptimizerConfig::set_allocated_distance_approach_trajectory_smoother_config(::jmc_auto::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config) {
  delete distance_approach_trajectory_smoother_config_;
  distance_approach_trajectory_smoother_config_ = distance_approach_trajectory_smoother_config;
  if (distance_approach_trajectory_smoother_config) {
    set_has_distance_approach_trajectory_smoother_config();
  } else {
    clear_has_distance_approach_trajectory_smoother_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
}

// optional float delta_t = 4 [default = 0.5];
bool OpenSpaceTrajectoryOptimizerConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpenSpaceTrajectoryOptimizerConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00000010u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_delta_t() {
  delta_t_ = 0.5f;
  clear_has_delta_t();
}
float OpenSpaceTrajectoryOptimizerConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
  return delta_t_;
}
void OpenSpaceTrajectoryOptimizerConfig::set_delta_t(float value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
}

// optional double is_near_destination_threshold = 5 [default = 0.001];
bool OpenSpaceTrajectoryOptimizerConfig::has_is_near_destination_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpenSpaceTrajectoryOptimizerConfig::set_has_is_near_destination_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_has_is_near_destination_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  clear_has_is_near_destination_threshold();
}
double OpenSpaceTrajectoryOptimizerConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
  return is_near_destination_threshold_;
}
void OpenSpaceTrajectoryOptimizerConfig::set_is_near_destination_threshold(double value) {
  set_has_is_near_destination_threshold();
  is_near_destination_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
}

// optional .jmc_auto.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
bool OpenSpaceTrajectoryOptimizerConfig::has_planner_open_space_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpenSpaceTrajectoryOptimizerConfig::set_has_planner_open_space_config() {
  _has_bits_[0] |= 0x00000008u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_has_planner_open_space_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_planner_open_space_config() {
  if (planner_open_space_config_ != NULL) planner_open_space_config_->::jmc_auto::planning::PlannerOpenSpaceConfig::Clear();
  clear_has_planner_open_space_config();
}
const ::jmc_auto::planning::PlannerOpenSpaceConfig& OpenSpaceTrajectoryOptimizerConfig::planner_open_space_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return planner_open_space_config_ != NULL ? *planner_open_space_config_
                         : *::jmc_auto::planning::PlannerOpenSpaceConfig::internal_default_instance();
}
::jmc_auto::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_planner_open_space_config() {
  set_has_planner_open_space_config();
  if (planner_open_space_config_ == NULL) {
    planner_open_space_config_ = new ::jmc_auto::planning::PlannerOpenSpaceConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return planner_open_space_config_;
}
::jmc_auto::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::release_planner_open_space_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  clear_has_planner_open_space_config();
  ::jmc_auto::planning::PlannerOpenSpaceConfig* temp = planner_open_space_config_;
  planner_open_space_config_ = NULL;
  return temp;
}
void OpenSpaceTrajectoryOptimizerConfig::set_allocated_planner_open_space_config(::jmc_auto::planning::PlannerOpenSpaceConfig* planner_open_space_config) {
  delete planner_open_space_config_;
  planner_open_space_config_ = planner_open_space_config;
  if (planner_open_space_config) {
    set_has_planner_open_space_config();
  } else {
    clear_has_planner_open_space_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridAStarConfig::kXyGridResolutionFieldNumber;
const int HybridAStarConfig::kPhiGridResolutionFieldNumber;
const int HybridAStarConfig::kNextNodeNumFieldNumber;
const int HybridAStarConfig::kStepSizeFieldNumber;
const int HybridAStarConfig::kTrajForwardPenaltyFieldNumber;
const int HybridAStarConfig::kTrajBackPenaltyFieldNumber;
const int HybridAStarConfig::kTrajGearSwitchPenaltyFieldNumber;
const int HybridAStarConfig::kTrajSteerPenaltyFieldNumber;
const int HybridAStarConfig::kTrajSteerChangePenaltyFieldNumber;
const int HybridAStarConfig::kGridAStarXyResolutionFieldNumber;
const int HybridAStarConfig::kNodeRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridAStarConfig::HybridAStarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.HybridAStarConfig)
}
HybridAStarConfig::HybridAStarConfig(const HybridAStarConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.HybridAStarConfig)
}

void HybridAStarConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&traj_forward_penalty_, 0, reinterpret_cast<char*>(&traj_back_penalty_) -
    reinterpret_cast<char*>(&traj_forward_penalty_) + sizeof(traj_back_penalty_));
  xy_grid_resolution_ = 0.2;
  phi_grid_resolution_ = 0.05;
  next_node_num_ = GOOGLE_ULONGLONG(10);
  step_size_ = 0.5;
  traj_gear_switch_penalty_ = 10;
  traj_steer_penalty_ = 100;
  traj_steer_change_penalty_ = 10;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

HybridAStarConfig::~HybridAStarConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.HybridAStarConfig)
  SharedDtor();
}

void HybridAStarConfig::SharedDtor() {
}

void HybridAStarConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HybridAStarConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HybridAStarConfig& HybridAStarConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

HybridAStarConfig* HybridAStarConfig::New(::google::protobuf::Arena* arena) const {
  HybridAStarConfig* n = new HybridAStarConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HybridAStarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.HybridAStarConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&traj_forward_penalty_, 0, reinterpret_cast<char*>(&traj_back_penalty_) -
      reinterpret_cast<char*>(&traj_forward_penalty_) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = GOOGLE_ULONGLONG(10);
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
    traj_steer_penalty_ = 100;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    traj_steer_change_penalty_ = 10;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HybridAStarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.HybridAStarConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_xy_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_phi_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_next_node_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_node_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_forward_penalty = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_traj_forward_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_forward_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_back_penalty = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_traj_back_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_back_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_traj_gear_switch_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_gear_switch_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_penalty = 8 [default = 100];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_traj_steer_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_traj_steer_change_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_grid_a_star_xy_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grid_a_star_xy_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double node_radius = 16 [default = 0.5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_node_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &node_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.HybridAStarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.HybridAStarConfig)
  return false;
#undef DO_
}

void HybridAStarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.HybridAStarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xy_grid_resolution(), output);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_grid_resolution(), output);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next_node_num(), output);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_size(), output);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->traj_forward_penalty(), output);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->traj_back_penalty(), output);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->traj_gear_switch_penalty(), output);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traj_steer_penalty(), output);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->traj_steer_change_penalty(), output);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->grid_a_star_xy_resolution(), output);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->node_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.HybridAStarConfig)
}

::google::protobuf::uint8* HybridAStarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.HybridAStarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->node_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.HybridAStarConfig)
  return target;
}

size_t HybridAStarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.HybridAStarConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double traj_forward_penalty = 5 [default = 0];
    if (has_traj_forward_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (has_traj_back_penalty()) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (has_xy_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (has_phi_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (has_next_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (has_step_size()) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (has_traj_gear_switch_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_penalty = 8 [default = 100];
    if (has_traj_steer_penalty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (has_traj_steer_change_penalty()) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (has_grid_a_star_xy_resolution()) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (has_node_radius()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HybridAStarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridAStarConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HybridAStarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.HybridAStarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.HybridAStarConfig)
    MergeFrom(*source);
  }
}

void HybridAStarConfig::MergeFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000002u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000400u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HybridAStarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridAStarConfig::CopyFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridAStarConfig::IsInitialized() const {
  return true;
}

void HybridAStarConfig::Swap(HybridAStarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridAStarConfig::InternalSwap(HybridAStarConfig* other) {
  std::swap(traj_forward_penalty_, other->traj_forward_penalty_);
  std::swap(traj_back_penalty_, other->traj_back_penalty_);
  std::swap(xy_grid_resolution_, other->xy_grid_resolution_);
  std::swap(phi_grid_resolution_, other->phi_grid_resolution_);
  std::swap(next_node_num_, other->next_node_num_);
  std::swap(step_size_, other->step_size_);
  std::swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  std::swap(traj_steer_penalty_, other->traj_steer_penalty_);
  std::swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  std::swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  std::swap(node_radius_, other->node_radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HybridAStarConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HybridAStarConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
bool HybridAStarConfig::has_xy_grid_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HybridAStarConfig::set_has_xy_grid_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
void HybridAStarConfig::clear_has_xy_grid_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
void HybridAStarConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  clear_has_xy_grid_resolution();
}
double HybridAStarConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.xy_grid_resolution)
  return xy_grid_resolution_;
}
void HybridAStarConfig::set_xy_grid_resolution(double value) {
  set_has_xy_grid_resolution();
  xy_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
bool HybridAStarConfig::has_phi_grid_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HybridAStarConfig::set_has_phi_grid_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
void HybridAStarConfig::clear_has_phi_grid_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
void HybridAStarConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  clear_has_phi_grid_resolution();
}
double HybridAStarConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.phi_grid_resolution)
  return phi_grid_resolution_;
}
void HybridAStarConfig::set_phi_grid_resolution(double value) {
  set_has_phi_grid_resolution();
  phi_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
bool HybridAStarConfig::has_next_node_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HybridAStarConfig::set_has_next_node_num() {
  _has_bits_[0] |= 0x00000010u;
}
void HybridAStarConfig::clear_has_next_node_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void HybridAStarConfig::clear_next_node_num() {
  next_node_num_ = GOOGLE_ULONGLONG(10);
  clear_has_next_node_num();
}
::google::protobuf::uint64 HybridAStarConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.next_node_num)
  return next_node_num_;
}
void HybridAStarConfig::set_next_node_num(::google::protobuf::uint64 value) {
  set_has_next_node_num();
  next_node_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
bool HybridAStarConfig::has_step_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HybridAStarConfig::set_has_step_size() {
  _has_bits_[0] |= 0x00000020u;
}
void HybridAStarConfig::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void HybridAStarConfig::clear_step_size() {
  step_size_ = 0.5;
  clear_has_step_size();
}
double HybridAStarConfig::step_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.step_size)
  return step_size_;
}
void HybridAStarConfig::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
bool HybridAStarConfig::has_traj_forward_penalty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HybridAStarConfig::set_has_traj_forward_penalty() {
  _has_bits_[0] |= 0x00000001u;
}
void HybridAStarConfig::clear_has_traj_forward_penalty() {
  _has_bits_[0] &= ~0x00000001u;
}
void HybridAStarConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  clear_has_traj_forward_penalty();
}
double HybridAStarConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_forward_penalty)
  return traj_forward_penalty_;
}
void HybridAStarConfig::set_traj_forward_penalty(double value) {
  set_has_traj_forward_penalty();
  traj_forward_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
bool HybridAStarConfig::has_traj_back_penalty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HybridAStarConfig::set_has_traj_back_penalty() {
  _has_bits_[0] |= 0x00000002u;
}
void HybridAStarConfig::clear_has_traj_back_penalty() {
  _has_bits_[0] &= ~0x00000002u;
}
void HybridAStarConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  clear_has_traj_back_penalty();
}
double HybridAStarConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_back_penalty)
  return traj_back_penalty_;
}
void HybridAStarConfig::set_traj_back_penalty(double value) {
  set_has_traj_back_penalty();
  traj_back_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
bool HybridAStarConfig::has_traj_gear_switch_penalty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HybridAStarConfig::set_has_traj_gear_switch_penalty() {
  _has_bits_[0] |= 0x00000040u;
}
void HybridAStarConfig::clear_has_traj_gear_switch_penalty() {
  _has_bits_[0] &= ~0x00000040u;
}
void HybridAStarConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  clear_has_traj_gear_switch_penalty();
}
double HybridAStarConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_gear_switch_penalty)
  return traj_gear_switch_penalty_;
}
void HybridAStarConfig::set_traj_gear_switch_penalty(double value) {
  set_has_traj_gear_switch_penalty();
  traj_gear_switch_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
bool HybridAStarConfig::has_traj_steer_penalty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HybridAStarConfig::set_has_traj_steer_penalty() {
  _has_bits_[0] |= 0x00000080u;
}
void HybridAStarConfig::clear_has_traj_steer_penalty() {
  _has_bits_[0] &= ~0x00000080u;
}
void HybridAStarConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  clear_has_traj_steer_penalty();
}
double HybridAStarConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_steer_penalty)
  return traj_steer_penalty_;
}
void HybridAStarConfig::set_traj_steer_penalty(double value) {
  set_has_traj_steer_penalty();
  traj_steer_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
bool HybridAStarConfig::has_traj_steer_change_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HybridAStarConfig::set_has_traj_steer_change_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
void HybridAStarConfig::clear_has_traj_steer_change_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
void HybridAStarConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  clear_has_traj_steer_change_penalty();
}
double HybridAStarConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.traj_steer_change_penalty)
  return traj_steer_change_penalty_;
}
void HybridAStarConfig::set_traj_steer_change_penalty(double value) {
  set_has_traj_steer_change_penalty();
  traj_steer_change_penalty_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
bool HybridAStarConfig::has_grid_a_star_xy_resolution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HybridAStarConfig::set_has_grid_a_star_xy_resolution() {
  _has_bits_[0] |= 0x00000200u;
}
void HybridAStarConfig::clear_has_grid_a_star_xy_resolution() {
  _has_bits_[0] &= ~0x00000200u;
}
void HybridAStarConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  clear_has_grid_a_star_xy_resolution();
}
double HybridAStarConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.grid_a_star_xy_resolution)
  return grid_a_star_xy_resolution_;
}
void HybridAStarConfig::set_grid_a_star_xy_resolution(double value) {
  set_has_grid_a_star_xy_resolution();
  grid_a_star_xy_resolution_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
bool HybridAStarConfig::has_node_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void HybridAStarConfig::set_has_node_radius() {
  _has_bits_[0] |= 0x00000400u;
}
void HybridAStarConfig::clear_has_node_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
void HybridAStarConfig::clear_node_radius() {
  node_radius_ = 0.5;
  clear_has_node_radius();
}
double HybridAStarConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.HybridAStarConfig.node_radius)
  return node_radius_;
}
void HybridAStarConfig::set_node_radius(double value) {
  set_has_node_radius();
  node_radius_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.HybridAStarConfig.node_radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DualVariableConfig::kWeightDFieldNumber;
const int DualVariableConfig::kIpoptConfigFieldNumber;
const int DualVariableConfig::kQpFormatFieldNumber;
const int DualVariableConfig::kMinSafetyDistanceFieldNumber;
const int DualVariableConfig::kDebugOsqpFieldNumber;
const int DualVariableConfig::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DualVariableConfig::DualVariableConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DualVariableConfig)
}
DualVariableConfig::DualVariableConfig(const DualVariableConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&min_safety_distance_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DualVariableConfig)
}

void DualVariableConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipopt_config_, 0, reinterpret_cast<char*>(&debug_osqp_) -
    reinterpret_cast<char*>(&ipopt_config_) + sizeof(debug_osqp_));
  weight_d_ = 1;
  beta_ = 1;
}

DualVariableConfig::~DualVariableConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DualVariableConfig)
  SharedDtor();
}

void DualVariableConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ipopt_config_;
  }
}

void DualVariableConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DualVariableConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DualVariableConfig& DualVariableConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DualVariableConfig* DualVariableConfig::New(::google::protobuf::Arena* arena) const {
  DualVariableConfig* n = new DualVariableConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DualVariableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DualVariableConfig)
  if (has_ipopt_config()) {
    GOOGLE_DCHECK(ipopt_config_ != NULL);
    ipopt_config_->::jmc_auto::planning::IpoptSolverConfig::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&min_safety_distance_, 0, reinterpret_cast<char*>(&debug_osqp_) -
      reinterpret_cast<char*>(&min_safety_distance_) + sizeof(debug_osqp_));
    weight_d_ = 1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DualVariableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DualVariableConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_d = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_weight_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.DualVariableMode qp_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::planning::DualVariableMode_IsValid(value)) {
            set_qp_format(static_cast< ::jmc_auto::planning::DualVariableMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_osqp = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_debug_osqp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_osqp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beta = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DualVariableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DualVariableConfig)
  return false;
#undef DO_
}

void DualVariableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DualVariableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_d(), output);
  }

  // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ipopt_config_, output);
  }

  // optional .jmc_auto.planning.DualVariableMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qp_format(), output);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_safety_distance(), output);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->debug_osqp(), output);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->beta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DualVariableConfig)
}

::google::protobuf::uint8* DualVariableConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DualVariableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_d(), target);
  }

  // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ipopt_config_, deterministic, target);
  }

  // optional .jmc_auto.planning.DualVariableMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->debug_osqp(), target);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->beta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DualVariableConfig)
  return target;
}

size_t DualVariableConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DualVariableConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
    if (has_ipopt_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipopt_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.planning.DualVariableMode qp_format = 3;
    if (has_qp_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (has_debug_osqp()) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (has_weight_d()) {
      total_size += 1 + 8;
    }

    // optional double beta = 6 [default = 1];
    if (has_beta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DualVariableConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DualVariableConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DualVariableConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DualVariableConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DualVariableConfig)
    MergeFrom(*source);
  }
}

void DualVariableConfig::MergeFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::jmc_auto::planning::IpoptSolverConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_d_ = from.weight_d_;
    }
    if (cached_has_bits & 0x00000020u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DualVariableConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualVariableConfig::CopyFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableConfig::IsInitialized() const {
  return true;
}

void DualVariableConfig::Swap(DualVariableConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DualVariableConfig::InternalSwap(DualVariableConfig* other) {
  std::swap(ipopt_config_, other->ipopt_config_);
  std::swap(min_safety_distance_, other->min_safety_distance_);
  std::swap(qp_format_, other->qp_format_);
  std::swap(debug_osqp_, other->debug_osqp_);
  std::swap(weight_d_, other->weight_d_);
  std::swap(beta_, other->beta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DualVariableConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DualVariableConfig

// optional double weight_d = 1 [default = 1];
bool DualVariableConfig::has_weight_d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DualVariableConfig::set_has_weight_d() {
  _has_bits_[0] |= 0x00000010u;
}
void DualVariableConfig::clear_has_weight_d() {
  _has_bits_[0] &= ~0x00000010u;
}
void DualVariableConfig::clear_weight_d() {
  weight_d_ = 1;
  clear_has_weight_d();
}
double DualVariableConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.weight_d)
  return weight_d_;
}
void DualVariableConfig::set_weight_d(double value) {
  set_has_weight_d();
  weight_d_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.weight_d)
}

// optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 2;
bool DualVariableConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DualVariableConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
void DualVariableConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void DualVariableConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::jmc_auto::planning::IpoptSolverConfig::Clear();
  clear_has_ipopt_config();
}
const ::jmc_auto::planning::IpoptSolverConfig& DualVariableConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_
                         : *::jmc_auto::planning::IpoptSolverConfig::internal_default_instance();
}
::jmc_auto::planning::IpoptSolverConfig* DualVariableConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptSolverConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DualVariableConfig.ipopt_config)
  return ipopt_config_;
}
::jmc_auto::planning::IpoptSolverConfig* DualVariableConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DualVariableConfig.ipopt_config)
  clear_has_ipopt_config();
  ::jmc_auto::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
void DualVariableConfig::set_allocated_ipopt_config(::jmc_auto::planning::IpoptSolverConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DualVariableConfig.ipopt_config)
}

// optional .jmc_auto.planning.DualVariableMode qp_format = 3;
bool DualVariableConfig::has_qp_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DualVariableConfig::set_has_qp_format() {
  _has_bits_[0] |= 0x00000004u;
}
void DualVariableConfig::clear_has_qp_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void DualVariableConfig::clear_qp_format() {
  qp_format_ = 0;
  clear_has_qp_format();
}
::jmc_auto::planning::DualVariableMode DualVariableConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.qp_format)
  return static_cast< ::jmc_auto::planning::DualVariableMode >(qp_format_);
}
void DualVariableConfig::set_qp_format(::jmc_auto::planning::DualVariableMode value) {
  assert(::jmc_auto::planning::DualVariableMode_IsValid(value));
  set_has_qp_format();
  qp_format_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
bool DualVariableConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DualVariableConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void DualVariableConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void DualVariableConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
double DualVariableConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.min_safety_distance)
  return min_safety_distance_;
}
void DualVariableConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
bool DualVariableConfig::has_debug_osqp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DualVariableConfig::set_has_debug_osqp() {
  _has_bits_[0] |= 0x00000008u;
}
void DualVariableConfig::clear_has_debug_osqp() {
  _has_bits_[0] &= ~0x00000008u;
}
void DualVariableConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  clear_has_debug_osqp();
}
bool DualVariableConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.debug_osqp)
  return debug_osqp_;
}
void DualVariableConfig::set_debug_osqp(bool value) {
  set_has_debug_osqp();
  debug_osqp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
bool DualVariableConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DualVariableConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000020u;
}
void DualVariableConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000020u;
}
void DualVariableConfig::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
double DualVariableConfig::beta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DualVariableConfig.beta)
  return beta_;
}
void DualVariableConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DualVariableConfig.beta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceApproachTrajectorySmootherConfig::kWeightSteerFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightAFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightSteerRateFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightARateFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightXFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightYFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightPhiFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightVFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightSteerStitchingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightAStitchingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightFirstOrderTimeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightSecondOrderTimeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMinSafetyDistanceFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxSpeedForwardFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxSpeedReverseFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxAccelerationForwardFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxAccelerationReverseFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMinTimeSampleScalingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxTimeSampleScalingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kUseFixTimeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kIpoptConfigFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableConstraintCheckFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableHandDerivativeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableDerivativeCheckFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableInitialFinalCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
}
DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
}

void DistanceApproachTrajectorySmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipopt_config_, 0, reinterpret_cast<char*>(&enable_initial_final_check_) -
    reinterpret_cast<char*>(&ipopt_config_) + sizeof(enable_initial_final_check_));
  max_speed_forward_ = 3;
  max_speed_reverse_ = 2;
  max_acceleration_forward_ = 2;
  max_acceleration_reverse_ = 2;
  min_time_sample_scaling_ = 0.1;
  max_time_sample_scaling_ = 10;
}

DistanceApproachTrajectorySmootherConfig::~DistanceApproachTrajectorySmootherConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  SharedDtor();
}

void DistanceApproachTrajectorySmootherConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ipopt_config_;
  }
}

void DistanceApproachTrajectorySmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistanceApproachTrajectorySmootherConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistanceApproachTrajectorySmootherConfig& DistanceApproachTrajectorySmootherConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistanceApproachTrajectorySmootherConfig* DistanceApproachTrajectorySmootherConfig::New(::google::protobuf::Arena* arena) const {
  DistanceApproachTrajectorySmootherConfig* n = new DistanceApproachTrajectorySmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistanceApproachTrajectorySmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  if (has_ipopt_config()) {
    GOOGLE_DCHECK(ipopt_config_ != NULL);
    ipopt_config_->::jmc_auto::planning::IpoptSolverConfig::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&weight_steer_, 0, reinterpret_cast<char*>(&weight_phi_) -
      reinterpret_cast<char*>(&weight_steer_) + sizeof(weight_phi_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&weight_v_, 0, reinterpret_cast<char*>(&enable_constraint_check_) -
      reinterpret_cast<char*>(&weight_v_) + sizeof(enable_constraint_check_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&enable_hand_derivative_, 0, reinterpret_cast<char*>(&enable_initial_final_check_) -
      reinterpret_cast<char*>(&enable_hand_derivative_) + sizeof(enable_initial_final_check_));
    max_speed_forward_ = 3;
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
  }
  max_time_sample_scaling_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistanceApproachTrajectorySmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_steer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_weight_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_weight_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_weight_steer_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_weight_a_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_weight_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_weight_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_phi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_weight_phi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_v = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_weight_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_stitching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_weight_steer_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_stitching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_weight_a_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_first_order_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_weight_first_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_first_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_second_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_weight_second_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_second_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_forward = 14 [default = 3];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_max_speed_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_reverse = 15 [default = 2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_max_speed_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_forward = 16 [default = 2];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_max_acceleration_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_max_acceleration_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_min_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_max_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fix_time = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_use_fix_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_constraint_check = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_enable_constraint_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_constraint_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hand_derivative = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_enable_hand_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hand_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_derivative_check = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_enable_derivative_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_derivative_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_initial_final_check = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_enable_initial_final_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_initial_final_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  return false;
#undef DO_
}

void DistanceApproachTrajectorySmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_steer(), output);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_a(), output);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_steer_rate(), output);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight_a_rate(), output);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->weight_x(), output);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_y(), output);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->weight_phi(), output);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->weight_v(), output);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->weight_steer_stitching(), output);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->weight_a_stitching(), output);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->weight_first_order_time(), output);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->weight_second_order_time(), output);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->min_safety_distance(), output);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_speed_forward(), output);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->max_speed_reverse(), output);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->max_acceleration_forward(), output);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->max_acceleration_reverse(), output);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->min_time_sample_scaling(), output);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->max_time_sample_scaling(), output);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->use_fix_time(), output);
  }

  // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->ipopt_config_, output);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enable_constraint_check(), output);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enable_hand_derivative(), output);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->enable_derivative_check(), output);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->enable_initial_final_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
}

::google::protobuf::uint8* DistanceApproachTrajectorySmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->use_fix_time(), target);
  }

  // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->ipopt_config_, deterministic, target);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->enable_initial_final_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  return target;
}

size_t DistanceApproachTrajectorySmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
    if (has_ipopt_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (has_weight_steer()) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (has_weight_a()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (has_weight_steer_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (has_weight_a_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (has_weight_x()) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (has_weight_y()) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (has_weight_phi()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double weight_v = 8;
    if (has_weight_v()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (has_weight_steer_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (has_weight_a_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (has_weight_first_order_time()) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (has_weight_second_order_time()) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (has_use_fix_time()) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (has_enable_constraint_check()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool enable_hand_derivative = 23;
    if (has_enable_hand_derivative()) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (has_enable_derivative_check()) {
      total_size += 2 + 1;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (has_enable_initial_final_check()) {
      total_size += 2 + 1;
    }

    // optional double max_speed_forward = 14 [default = 3];
    if (has_max_speed_forward()) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (has_max_speed_reverse()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (has_max_acceleration_forward()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (has_max_acceleration_reverse()) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (has_min_time_sample_scaling()) {
      total_size += 2 + 8;
    }

  }
  // optional double max_time_sample_scaling = 19 [default = 10];
  if (has_max_time_sample_scaling()) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistanceApproachTrajectorySmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceApproachTrajectorySmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistanceApproachTrajectorySmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
    MergeFrom(*source);
  }
}

void DistanceApproachTrajectorySmootherConfig::MergeFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::jmc_auto::planning::IpoptSolverConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x00800000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_max_time_sample_scaling(from.max_time_sample_scaling());
  }
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachTrajectorySmootherConfig::IsInitialized() const {
  return true;
}

void DistanceApproachTrajectorySmootherConfig::Swap(DistanceApproachTrajectorySmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceApproachTrajectorySmootherConfig::InternalSwap(DistanceApproachTrajectorySmootherConfig* other) {
  std::swap(ipopt_config_, other->ipopt_config_);
  std::swap(weight_steer_, other->weight_steer_);
  std::swap(weight_a_, other->weight_a_);
  std::swap(weight_steer_rate_, other->weight_steer_rate_);
  std::swap(weight_a_rate_, other->weight_a_rate_);
  std::swap(weight_x_, other->weight_x_);
  std::swap(weight_y_, other->weight_y_);
  std::swap(weight_phi_, other->weight_phi_);
  std::swap(weight_v_, other->weight_v_);
  std::swap(weight_steer_stitching_, other->weight_steer_stitching_);
  std::swap(weight_a_stitching_, other->weight_a_stitching_);
  std::swap(weight_first_order_time_, other->weight_first_order_time_);
  std::swap(weight_second_order_time_, other->weight_second_order_time_);
  std::swap(min_safety_distance_, other->min_safety_distance_);
  std::swap(use_fix_time_, other->use_fix_time_);
  std::swap(enable_constraint_check_, other->enable_constraint_check_);
  std::swap(enable_hand_derivative_, other->enable_hand_derivative_);
  std::swap(enable_derivative_check_, other->enable_derivative_check_);
  std::swap(enable_initial_final_check_, other->enable_initial_final_check_);
  std::swap(max_speed_forward_, other->max_speed_forward_);
  std::swap(max_speed_reverse_, other->max_speed_reverse_);
  std::swap(max_acceleration_forward_, other->max_acceleration_forward_);
  std::swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  std::swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  std::swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistanceApproachTrajectorySmootherConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistanceApproachTrajectorySmootherConfig

// optional double weight_steer = 1;
bool DistanceApproachTrajectorySmootherConfig::has_weight_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer() {
  _has_bits_[0] |= 0x00000002u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_steer() {
  weight_steer_ = 0;
  clear_has_weight_steer();
}
double DistanceApproachTrajectorySmootherConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
  return weight_steer_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_steer(double value) {
  set_has_weight_steer();
  weight_steer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
}

// optional double weight_a = 2;
bool DistanceApproachTrajectorySmootherConfig::has_weight_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_a() {
  _has_bits_[0] |= 0x00000004u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a() {
  _has_bits_[0] &= ~0x00000004u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_a() {
  weight_a_ = 0;
  clear_has_weight_a();
}
double DistanceApproachTrajectorySmootherConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
  return weight_a_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_a(double value) {
  set_has_weight_a();
  weight_a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
}

// optional double weight_steer_rate = 3;
bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  clear_has_weight_steer_rate();
}
double DistanceApproachTrajectorySmootherConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
  return weight_steer_rate_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_steer_rate(double value) {
  set_has_weight_steer_rate();
  weight_steer_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
bool DistanceApproachTrajectorySmootherConfig::has_weight_a_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_a_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  clear_has_weight_a_rate();
}
double DistanceApproachTrajectorySmootherConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
  return weight_a_rate_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_a_rate(double value) {
  set_has_weight_a_rate();
  weight_a_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
}

// optional double weight_x = 5;
bool DistanceApproachTrajectorySmootherConfig::has_weight_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_x() {
  _has_bits_[0] |= 0x00000020u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_x() {
  weight_x_ = 0;
  clear_has_weight_x();
}
double DistanceApproachTrajectorySmootherConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
  return weight_x_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_x(double value) {
  set_has_weight_x();
  weight_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
}

// optional double weight_y = 6;
bool DistanceApproachTrajectorySmootherConfig::has_weight_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_y() {
  _has_bits_[0] |= 0x00000040u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_y() {
  weight_y_ = 0;
  clear_has_weight_y();
}
double DistanceApproachTrajectorySmootherConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
  return weight_y_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_y(double value) {
  set_has_weight_y();
  weight_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
}

// optional double weight_phi = 7;
bool DistanceApproachTrajectorySmootherConfig::has_weight_phi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_phi() {
  _has_bits_[0] |= 0x00000080u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_phi() {
  _has_bits_[0] &= ~0x00000080u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_phi() {
  weight_phi_ = 0;
  clear_has_weight_phi();
}
double DistanceApproachTrajectorySmootherConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
  return weight_phi_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_phi(double value) {
  set_has_weight_phi();
  weight_phi_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
}

// optional double weight_v = 8;
bool DistanceApproachTrajectorySmootherConfig::has_weight_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_v() {
  _has_bits_[0] |= 0x00000100u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_v() {
  _has_bits_[0] &= ~0x00000100u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_v() {
  weight_v_ = 0;
  clear_has_weight_v();
}
double DistanceApproachTrajectorySmootherConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
  return weight_v_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_v(double value) {
  set_has_weight_v();
  weight_v_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_stitching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer_stitching() {
  _has_bits_[0] |= 0x00000200u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer_stitching() {
  _has_bits_[0] &= ~0x00000200u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  clear_has_weight_steer_stitching();
}
double DistanceApproachTrajectorySmootherConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
  return weight_steer_stitching_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_steer_stitching(double value) {
  set_has_weight_steer_stitching();
  weight_steer_stitching_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
bool DistanceApproachTrajectorySmootherConfig::has_weight_a_stitching() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_a_stitching() {
  _has_bits_[0] |= 0x00000400u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a_stitching() {
  _has_bits_[0] &= ~0x00000400u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  clear_has_weight_a_stitching();
}
double DistanceApproachTrajectorySmootherConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
  return weight_a_stitching_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_a_stitching(double value) {
  set_has_weight_a_stitching();
  weight_a_stitching_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
bool DistanceApproachTrajectorySmootherConfig::has_weight_first_order_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_first_order_time() {
  _has_bits_[0] |= 0x00000800u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_first_order_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  clear_has_weight_first_order_time();
}
double DistanceApproachTrajectorySmootherConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
  return weight_first_order_time_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_first_order_time(double value) {
  set_has_weight_first_order_time();
  weight_first_order_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
bool DistanceApproachTrajectorySmootherConfig::has_weight_second_order_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_weight_second_order_time() {
  _has_bits_[0] |= 0x00001000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_weight_second_order_time() {
  _has_bits_[0] &= ~0x00001000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  clear_has_weight_second_order_time();
}
double DistanceApproachTrajectorySmootherConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
  return weight_second_order_time_;
}
void DistanceApproachTrajectorySmootherConfig::set_weight_second_order_time(double value) {
  set_has_weight_second_order_time();
  weight_second_order_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
bool DistanceApproachTrajectorySmootherConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00002000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
double DistanceApproachTrajectorySmootherConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
  return min_safety_distance_;
}
void DistanceApproachTrajectorySmootherConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
bool DistanceApproachTrajectorySmootherConfig::has_max_speed_forward() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_max_speed_forward() {
  _has_bits_[0] |= 0x00080000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_max_speed_forward() {
  _has_bits_[0] &= ~0x00080000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  clear_has_max_speed_forward();
}
double DistanceApproachTrajectorySmootherConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
  return max_speed_forward_;
}
void DistanceApproachTrajectorySmootherConfig::set_max_speed_forward(double value) {
  set_has_max_speed_forward();
  max_speed_forward_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
bool DistanceApproachTrajectorySmootherConfig::has_max_speed_reverse() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_max_speed_reverse() {
  _has_bits_[0] |= 0x00100000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_max_speed_reverse() {
  _has_bits_[0] &= ~0x00100000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  clear_has_max_speed_reverse();
}
double DistanceApproachTrajectorySmootherConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
  return max_speed_reverse_;
}
void DistanceApproachTrajectorySmootherConfig::set_max_speed_reverse(double value) {
  set_has_max_speed_reverse();
  max_speed_reverse_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_forward() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_max_acceleration_forward() {
  _has_bits_[0] |= 0x00200000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_max_acceleration_forward() {
  _has_bits_[0] &= ~0x00200000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  clear_has_max_acceleration_forward();
}
double DistanceApproachTrajectorySmootherConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
  return max_acceleration_forward_;
}
void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_forward(double value) {
  set_has_max_acceleration_forward();
  max_acceleration_forward_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_reverse() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_max_acceleration_reverse() {
  _has_bits_[0] |= 0x00400000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_max_acceleration_reverse() {
  _has_bits_[0] &= ~0x00400000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  clear_has_max_acceleration_reverse();
}
double DistanceApproachTrajectorySmootherConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
  return max_acceleration_reverse_;
}
void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_reverse(double value) {
  set_has_max_acceleration_reverse();
  max_acceleration_reverse_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
bool DistanceApproachTrajectorySmootherConfig::has_min_time_sample_scaling() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_min_time_sample_scaling() {
  _has_bits_[0] |= 0x00800000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_min_time_sample_scaling() {
  _has_bits_[0] &= ~0x00800000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  clear_has_min_time_sample_scaling();
}
double DistanceApproachTrajectorySmootherConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
  return min_time_sample_scaling_;
}
void DistanceApproachTrajectorySmootherConfig::set_min_time_sample_scaling(double value) {
  set_has_min_time_sample_scaling();
  min_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
bool DistanceApproachTrajectorySmootherConfig::has_max_time_sample_scaling() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_max_time_sample_scaling() {
  _has_bits_[0] |= 0x01000000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_max_time_sample_scaling() {
  _has_bits_[0] &= ~0x01000000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  clear_has_max_time_sample_scaling();
}
double DistanceApproachTrajectorySmootherConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
  return max_time_sample_scaling_;
}
void DistanceApproachTrajectorySmootherConfig::set_max_time_sample_scaling(double value) {
  set_has_max_time_sample_scaling();
  max_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
bool DistanceApproachTrajectorySmootherConfig::has_use_fix_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_use_fix_time() {
  _has_bits_[0] |= 0x00004000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_use_fix_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  clear_has_use_fix_time();
}
bool DistanceApproachTrajectorySmootherConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
  return use_fix_time_;
}
void DistanceApproachTrajectorySmootherConfig::set_use_fix_time(bool value) {
  set_has_use_fix_time();
  use_fix_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
}

// optional .jmc_auto.planning.IpoptSolverConfig ipopt_config = 21;
bool DistanceApproachTrajectorySmootherConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void DistanceApproachTrajectorySmootherConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->::jmc_auto::planning::IpoptSolverConfig::Clear();
  clear_has_ipopt_config();
}
const ::jmc_auto::planning::IpoptSolverConfig& DistanceApproachTrajectorySmootherConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return ipopt_config_ != NULL ? *ipopt_config_
                         : *::jmc_auto::planning::IpoptSolverConfig::internal_default_instance();
}
::jmc_auto::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    ipopt_config_ = new ::jmc_auto::planning::IpoptSolverConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return ipopt_config_;
}
::jmc_auto::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  clear_has_ipopt_config();
  ::jmc_auto::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
void DistanceApproachTrajectorySmootherConfig::set_allocated_ipopt_config(::jmc_auto::planning::IpoptSolverConfig* ipopt_config) {
  delete ipopt_config_;
  ipopt_config_ = ipopt_config;
  if (ipopt_config) {
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
bool DistanceApproachTrajectorySmootherConfig::has_enable_constraint_check() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_enable_constraint_check() {
  _has_bits_[0] |= 0x00008000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_enable_constraint_check() {
  _has_bits_[0] &= ~0x00008000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  clear_has_enable_constraint_check();
}
bool DistanceApproachTrajectorySmootherConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
  return enable_constraint_check_;
}
void DistanceApproachTrajectorySmootherConfig::set_enable_constraint_check(bool value) {
  set_has_enable_constraint_check();
  enable_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
bool DistanceApproachTrajectorySmootherConfig::has_enable_hand_derivative() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_enable_hand_derivative() {
  _has_bits_[0] |= 0x00010000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_enable_hand_derivative() {
  _has_bits_[0] &= ~0x00010000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  clear_has_enable_hand_derivative();
}
bool DistanceApproachTrajectorySmootherConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
  return enable_hand_derivative_;
}
void DistanceApproachTrajectorySmootherConfig::set_enable_hand_derivative(bool value) {
  set_has_enable_hand_derivative();
  enable_hand_derivative_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
bool DistanceApproachTrajectorySmootherConfig::has_enable_derivative_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_enable_derivative_check() {
  _has_bits_[0] |= 0x00020000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_enable_derivative_check() {
  _has_bits_[0] &= ~0x00020000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  clear_has_enable_derivative_check();
}
bool DistanceApproachTrajectorySmootherConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
  return enable_derivative_check_;
}
void DistanceApproachTrajectorySmootherConfig::set_enable_derivative_check(bool value) {
  set_has_enable_derivative_check();
  enable_derivative_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
bool DistanceApproachTrajectorySmootherConfig::has_enable_initial_final_check() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DistanceApproachTrajectorySmootherConfig::set_has_enable_initial_final_check() {
  _has_bits_[0] |= 0x00040000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_has_enable_initial_final_check() {
  _has_bits_[0] &= ~0x00040000u;
}
void DistanceApproachTrajectorySmootherConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  clear_has_enable_initial_final_check();
}
bool DistanceApproachTrajectorySmootherConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
  return enable_initial_final_check_;
}
void DistanceApproachTrajectorySmootherConfig::set_enable_initial_final_check(bool value) {
  set_has_enable_initial_final_check();
  enable_initial_final_check_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpoptSolverConfig::kIpoptPrintLevelFieldNumber;
const int IpoptSolverConfig::kMumpsMemPercentFieldNumber;
const int IpoptSolverConfig::kMumpsPivtolFieldNumber;
const int IpoptSolverConfig::kIpoptMaxIterFieldNumber;
const int IpoptSolverConfig::kIpoptTolFieldNumber;
const int IpoptSolverConfig::kIpoptAcceptableConstrViolTolFieldNumber;
const int IpoptSolverConfig::kIpoptMinHessianPerturbationFieldNumber;
const int IpoptSolverConfig::kIpoptJacobianRegularizationValueFieldNumber;
const int IpoptSolverConfig::kIpoptPrintTimingStatisticsFieldNumber;
const int IpoptSolverConfig::kIpoptAlphaForYFieldNumber;
const int IpoptSolverConfig::kIpoptRecalcYFieldNumber;
const int IpoptSolverConfig::kIpoptMuInitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpoptSolverConfig::IpoptSolverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.IpoptSolverConfig)
}
IpoptSolverConfig::IpoptSolverConfig(const IpoptSolverConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_recalc_y()) {
    ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.IpoptSolverConfig)
}

void IpoptSolverConfig::SharedCtor() {
  _cached_size_ = 0;
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipopt_print_level_, 0, reinterpret_cast<char*>(&ipopt_max_iter_) -
    reinterpret_cast<char*>(&ipopt_print_level_) + sizeof(ipopt_max_iter_));
  ipopt_mu_init_ = 0.1;
}

IpoptSolverConfig::~IpoptSolverConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.IpoptSolverConfig)
  SharedDtor();
}

void IpoptSolverConfig::SharedDtor() {
  ipopt_print_timing_statistics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpoptSolverConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpoptSolverConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpoptSolverConfig& IpoptSolverConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

IpoptSolverConfig* IpoptSolverConfig::New(::google::protobuf::Arena* arena) const {
  IpoptSolverConfig* n = new IpoptSolverConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpoptSolverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.IpoptSolverConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ipopt_print_timing_statistics()) {
      GOOGLE_DCHECK(!ipopt_print_timing_statistics_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ipopt_print_timing_statistics_.UnsafeRawStringPointer())->clear();
    }
    if (has_ipopt_alpha_for_y()) {
      GOOGLE_DCHECK(!ipopt_alpha_for_y_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ipopt_alpha_for_y_.UnsafeRawStringPointer())->clear();
    }
    if (has_ipopt_recalc_y()) {
      GOOGLE_DCHECK(!ipopt_recalc_y_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ipopt_recalc_y_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&ipopt_print_level_, 0, reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
      reinterpret_cast<char*>(&ipopt_print_level_) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, reinterpret_cast<char*>(&ipopt_max_iter_) -
      reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IpoptSolverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.IpoptSolverConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ipopt_print_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ipopt_print_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_print_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mumps_mem_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mumps_mem_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mumps_mem_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mumps_pivtol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_mumps_pivtol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mumps_pivtol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipopt_max_iter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ipopt_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_tol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ipopt_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_ipopt_acceptable_constr_viol_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_acceptable_constr_viol_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_min_hessian_perturbation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_ipopt_min_hessian_perturbation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_min_hessian_perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_jacobian_regularization_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_ipopt_jacobian_regularization_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_jacobian_regularization_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_print_timing_statistics = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_print_timing_statistics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_print_timing_statistics().data(), this->ipopt_print_timing_statistics().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_alpha_for_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_alpha_for_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_alpha_for_y().data(), this->ipopt_alpha_for_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_recalc_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_recalc_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_recalc_y().data(), this->ipopt_recalc_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_ipopt_mu_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_mu_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.IpoptSolverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.IpoptSolverConfig)
  return false;
#undef DO_
}

void IpoptSolverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.IpoptSolverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipopt_print_level(), output);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mumps_mem_percent(), output);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mumps_pivtol(), output);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ipopt_max_iter(), output);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ipopt_tol(), output);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ipopt_acceptable_constr_viol_tol(), output);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ipopt_min_hessian_perturbation(), output);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ipopt_jacobian_regularization_value(), output);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), this->ipopt_print_timing_statistics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ipopt_print_timing_statistics(), output);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), this->ipopt_alpha_for_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ipopt_alpha_for_y(), output);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), this->ipopt_recalc_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ipopt_recalc_y(), output);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ipopt_mu_init(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.IpoptSolverConfig)
}

::google::protobuf::uint8* IpoptSolverConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.IpoptSolverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), this->ipopt_print_timing_statistics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), this->ipopt_alpha_for_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), this->ipopt_recalc_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ipopt_mu_init(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.IpoptSolverConfig)
  return target;
}

size_t IpoptSolverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.IpoptSolverConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ipopt_print_timing_statistics = 9;
    if (has_ipopt_print_timing_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (has_ipopt_alpha_for_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (has_ipopt_recalc_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (has_ipopt_print_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (has_mumps_mem_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (has_mumps_pivtol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (has_ipopt_tol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (has_ipopt_acceptable_constr_viol_tol()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (has_ipopt_min_hessian_perturbation()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (has_ipopt_jacobian_regularization_value()) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (has_ipopt_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (has_ipopt_mu_init()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpoptSolverConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IpoptSolverConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpoptSolverConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.IpoptSolverConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.IpoptSolverConfig)
    MergeFrom(*source);
  }
}

void IpoptSolverConfig::MergeFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ipopt_print_timing_statistics();
      ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ipopt_alpha_for_y();
      ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ipopt_recalc_y();
      ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpoptSolverConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpoptSolverConfig::CopyFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptSolverConfig::IsInitialized() const {
  return true;
}

void IpoptSolverConfig::Swap(IpoptSolverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpoptSolverConfig::InternalSwap(IpoptSolverConfig* other) {
  ipopt_print_timing_statistics_.Swap(&other->ipopt_print_timing_statistics_);
  ipopt_alpha_for_y_.Swap(&other->ipopt_alpha_for_y_);
  ipopt_recalc_y_.Swap(&other->ipopt_recalc_y_);
  std::swap(ipopt_print_level_, other->ipopt_print_level_);
  std::swap(mumps_mem_percent_, other->mumps_mem_percent_);
  std::swap(mumps_pivtol_, other->mumps_pivtol_);
  std::swap(ipopt_tol_, other->ipopt_tol_);
  std::swap(ipopt_acceptable_constr_viol_tol_, other->ipopt_acceptable_constr_viol_tol_);
  std::swap(ipopt_min_hessian_perturbation_, other->ipopt_min_hessian_perturbation_);
  std::swap(ipopt_jacobian_regularization_value_, other->ipopt_jacobian_regularization_value_);
  std::swap(ipopt_max_iter_, other->ipopt_max_iter_);
  std::swap(ipopt_mu_init_, other->ipopt_mu_init_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpoptSolverConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IpoptSolverConfig

// optional int32 ipopt_print_level = 1;
bool IpoptSolverConfig::has_ipopt_print_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_print_level() {
  _has_bits_[0] |= 0x00000008u;
}
void IpoptSolverConfig::clear_has_ipopt_print_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void IpoptSolverConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  clear_has_ipopt_print_level();
}
::google::protobuf::int32 IpoptSolverConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_print_level)
  return ipopt_print_level_;
}
void IpoptSolverConfig::set_ipopt_print_level(::google::protobuf::int32 value) {
  set_has_ipopt_print_level();
  ipopt_print_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
bool IpoptSolverConfig::has_mumps_mem_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IpoptSolverConfig::set_has_mumps_mem_percent() {
  _has_bits_[0] |= 0x00000010u;
}
void IpoptSolverConfig::clear_has_mumps_mem_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
void IpoptSolverConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  clear_has_mumps_mem_percent();
}
::google::protobuf::int32 IpoptSolverConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.mumps_mem_percent)
  return mumps_mem_percent_;
}
void IpoptSolverConfig::set_mumps_mem_percent(::google::protobuf::int32 value) {
  set_has_mumps_mem_percent();
  mumps_mem_percent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
bool IpoptSolverConfig::has_mumps_pivtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void IpoptSolverConfig::set_has_mumps_pivtol() {
  _has_bits_[0] |= 0x00000020u;
}
void IpoptSolverConfig::clear_has_mumps_pivtol() {
  _has_bits_[0] &= ~0x00000020u;
}
void IpoptSolverConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  clear_has_mumps_pivtol();
}
double IpoptSolverConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.mumps_pivtol)
  return mumps_pivtol_;
}
void IpoptSolverConfig::set_mumps_pivtol(double value) {
  set_has_mumps_pivtol();
  mumps_pivtol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
bool IpoptSolverConfig::has_ipopt_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
void IpoptSolverConfig::clear_has_ipopt_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
void IpoptSolverConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  clear_has_ipopt_max_iter();
}
::google::protobuf::int32 IpoptSolverConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_max_iter)
  return ipopt_max_iter_;
}
void IpoptSolverConfig::set_ipopt_max_iter(::google::protobuf::int32 value) {
  set_has_ipopt_max_iter();
  ipopt_max_iter_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
bool IpoptSolverConfig::has_ipopt_tol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_tol() {
  _has_bits_[0] |= 0x00000040u;
}
void IpoptSolverConfig::clear_has_ipopt_tol() {
  _has_bits_[0] &= ~0x00000040u;
}
void IpoptSolverConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  clear_has_ipopt_tol();
}
double IpoptSolverConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_tol)
  return ipopt_tol_;
}
void IpoptSolverConfig::set_ipopt_tol(double value) {
  set_has_ipopt_tol();
  ipopt_tol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
bool IpoptSolverConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] |= 0x00000080u;
}
void IpoptSolverConfig::clear_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] &= ~0x00000080u;
}
void IpoptSolverConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  clear_has_ipopt_acceptable_constr_viol_tol();
}
double IpoptSolverConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
  return ipopt_acceptable_constr_viol_tol_;
}
void IpoptSolverConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  set_has_ipopt_acceptable_constr_viol_tol();
  ipopt_acceptable_constr_viol_tol_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
bool IpoptSolverConfig::has_ipopt_min_hessian_perturbation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] |= 0x00000100u;
}
void IpoptSolverConfig::clear_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] &= ~0x00000100u;
}
void IpoptSolverConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  clear_has_ipopt_min_hessian_perturbation();
}
double IpoptSolverConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
  return ipopt_min_hessian_perturbation_;
}
void IpoptSolverConfig::set_ipopt_min_hessian_perturbation(double value) {
  set_has_ipopt_min_hessian_perturbation();
  ipopt_min_hessian_perturbation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
bool IpoptSolverConfig::has_ipopt_jacobian_regularization_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] |= 0x00000200u;
}
void IpoptSolverConfig::clear_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] &= ~0x00000200u;
}
void IpoptSolverConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  clear_has_ipopt_jacobian_regularization_value();
}
double IpoptSolverConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
  return ipopt_jacobian_regularization_value_;
}
void IpoptSolverConfig::set_ipopt_jacobian_regularization_value(double value) {
  set_has_ipopt_jacobian_regularization_value();
  ipopt_jacobian_regularization_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
bool IpoptSolverConfig::has_ipopt_print_timing_statistics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
}
void IpoptSolverConfig::clear_has_ipopt_print_timing_statistics() {
  _has_bits_[0] &= ~0x00000001u;
}
void IpoptSolverConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_print_timing_statistics();
}
const ::std::string& IpoptSolverConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.GetNoArena();
}
void IpoptSolverConfig::set_ipopt_print_timing_statistics(const ::std::string& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
#if LANG_CXX11
void IpoptSolverConfig::set_ipopt_print_timing_statistics(::std::string&& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
#endif
void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
::std::string* IpoptSolverConfig::mutable_ipopt_print_timing_statistics() {
  set_has_ipopt_print_timing_statistics();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpoptSolverConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  clear_has_ipopt_print_timing_statistics();
  return ipopt_print_timing_statistics_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpoptSolverConfig::set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != NULL) {
    set_has_ipopt_print_timing_statistics();
  } else {
    clear_has_ipopt_print_timing_statistics();
  }
  ipopt_print_timing_statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
bool IpoptSolverConfig::has_ipopt_alpha_for_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
}
void IpoptSolverConfig::clear_has_ipopt_alpha_for_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void IpoptSolverConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_alpha_for_y();
}
const ::std::string& IpoptSolverConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.GetNoArena();
}
void IpoptSolverConfig::set_ipopt_alpha_for_y(const ::std::string& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
#if LANG_CXX11
void IpoptSolverConfig::set_ipopt_alpha_for_y(::std::string&& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
#endif
void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
::std::string* IpoptSolverConfig::mutable_ipopt_alpha_for_y() {
  set_has_ipopt_alpha_for_y();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpoptSolverConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  clear_has_ipopt_alpha_for_y();
  return ipopt_alpha_for_y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpoptSolverConfig::set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != NULL) {
    set_has_ipopt_alpha_for_y();
  } else {
    clear_has_ipopt_alpha_for_y();
  }
  ipopt_alpha_for_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
bool IpoptSolverConfig::has_ipopt_recalc_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
}
void IpoptSolverConfig::clear_has_ipopt_recalc_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void IpoptSolverConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_recalc_y();
}
const ::std::string& IpoptSolverConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.GetNoArena();
}
void IpoptSolverConfig::set_ipopt_recalc_y(const ::std::string& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
#if LANG_CXX11
void IpoptSolverConfig::set_ipopt_recalc_y(::std::string&& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
#endif
void IpoptSolverConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
void IpoptSolverConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}
::std::string* IpoptSolverConfig::mutable_ipopt_recalc_y() {
  set_has_ipopt_recalc_y();
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IpoptSolverConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
  clear_has_ipopt_recalc_y();
  return ipopt_recalc_y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IpoptSolverConfig::set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != NULL) {
    set_has_ipopt_recalc_y();
  } else {
    clear_has_ipopt_recalc_y();
  }
  ipopt_recalc_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.IpoptSolverConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
bool IpoptSolverConfig::has_ipopt_mu_init() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void IpoptSolverConfig::set_has_ipopt_mu_init() {
  _has_bits_[0] |= 0x00000800u;
}
void IpoptSolverConfig::clear_has_ipopt_mu_init() {
  _has_bits_[0] &= ~0x00000800u;
}
void IpoptSolverConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  clear_has_ipopt_mu_init();
}
double IpoptSolverConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.IpoptSolverConfig.ipopt_mu_init)
  return ipopt_mu_init_;
}
void IpoptSolverConfig::set_ipopt_mu_init(double value) {
  set_has_ipopt_mu_init();
  ipopt_mu_init_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.IpoptSolverConfig.ipopt_mu_init)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
