// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/piecewise_jerk_path_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class PiecewiseJerkPathConfig;
class PiecewiseJerkPathConfigDefaultTypeInternal;
extern PiecewiseJerkPathConfigDefaultTypeInternal _PiecewiseJerkPathConfig_default_instance_;
class PiecewiseJerkPathWeights;
class PiecewiseJerkPathWeightsDefaultTypeInternal;
extern PiecewiseJerkPathWeightsDefaultTypeInternal _PiecewiseJerkPathWeights_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto

// ===================================================================

class PiecewiseJerkPathConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.PiecewiseJerkPathConfig) */ {
 public:
  PiecewiseJerkPathConfig();
  virtual ~PiecewiseJerkPathConfig();

  PiecewiseJerkPathConfig(const PiecewiseJerkPathConfig& from);

  inline PiecewiseJerkPathConfig& operator=(const PiecewiseJerkPathConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkPathConfig& default_instance();

  static inline const PiecewiseJerkPathConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathConfig*>(
               &_PiecewiseJerkPathConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PiecewiseJerkPathConfig* other);

  // implements Message ----------------------------------------------

  inline PiecewiseJerkPathConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PiecewiseJerkPathConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PiecewiseJerkPathConfig& from);
  void MergeFrom(const PiecewiseJerkPathConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PiecewiseJerkPathConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
  bool has_default_path_config() const;
  void clear_default_path_config();
  static const int kDefaultPathConfigFieldNumber = 1;
  const ::jmc_auto::planning::PiecewiseJerkPathWeights& default_path_config() const;
  ::jmc_auto::planning::PiecewiseJerkPathWeights* mutable_default_path_config();
  ::jmc_auto::planning::PiecewiseJerkPathWeights* release_default_path_config();
  void set_allocated_default_path_config(::jmc_auto::planning::PiecewiseJerkPathWeights* default_path_config);

  // optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  bool has_lane_change_path_config() const;
  void clear_lane_change_path_config();
  static const int kLaneChangePathConfigFieldNumber = 2;
  const ::jmc_auto::planning::PiecewiseJerkPathWeights& lane_change_path_config() const;
  ::jmc_auto::planning::PiecewiseJerkPathWeights* mutable_lane_change_path_config();
  ::jmc_auto::planning::PiecewiseJerkPathWeights* release_lane_change_path_config();
  void set_allocated_lane_change_path_config(::jmc_auto::planning::PiecewiseJerkPathWeights* lane_change_path_config);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.PiecewiseJerkPathConfig)
 private:
  void set_has_default_path_config();
  void clear_has_default_path_config();
  void set_has_lane_change_path_config();
  void clear_has_lane_change_path_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::planning::PiecewiseJerkPathWeights* default_path_config_;
  ::jmc_auto::planning::PiecewiseJerkPathWeights* lane_change_path_config_;
  friend struct protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PiecewiseJerkPathWeights : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.PiecewiseJerkPathWeights) */ {
 public:
  PiecewiseJerkPathWeights();
  virtual ~PiecewiseJerkPathWeights();

  PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from);

  inline PiecewiseJerkPathWeights& operator=(const PiecewiseJerkPathWeights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkPathWeights& default_instance();

  static inline const PiecewiseJerkPathWeights* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathWeights*>(
               &_PiecewiseJerkPathWeights_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PiecewiseJerkPathWeights* other);

  // implements Message ----------------------------------------------

  inline PiecewiseJerkPathWeights* New() const PROTOBUF_FINAL { return New(NULL); }

  PiecewiseJerkPathWeights* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PiecewiseJerkPathWeights& from);
  void MergeFrom(const PiecewiseJerkPathWeights& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PiecewiseJerkPathWeights* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double l_weight = 1 [default = 1];
  bool has_l_weight() const;
  void clear_l_weight();
  static const int kLWeightFieldNumber = 1;
  double l_weight() const;
  void set_l_weight(double value);

  // optional double dl_weight = 2 [default = 100];
  bool has_dl_weight() const;
  void clear_dl_weight();
  static const int kDlWeightFieldNumber = 2;
  double dl_weight() const;
  void set_dl_weight(double value);

  // optional double ddl_weight = 3 [default = 1000];
  bool has_ddl_weight() const;
  void clear_ddl_weight();
  static const int kDdlWeightFieldNumber = 3;
  double ddl_weight() const;
  void set_ddl_weight(double value);

  // optional double dddl_weight = 4 [default = 10000];
  bool has_dddl_weight() const;
  void clear_dddl_weight();
  static const int kDddlWeightFieldNumber = 4;
  double dddl_weight() const;
  void set_dddl_weight(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.PiecewiseJerkPathWeights)
 private:
  void set_has_l_weight();
  void clear_has_l_weight();
  void set_has_dl_weight();
  void clear_has_dl_weight();
  void set_has_ddl_weight();
  void clear_has_ddl_weight();
  void set_has_dddl_weight();
  void clear_has_dddl_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double l_weight_;
  double dl_weight_;
  double ddl_weight_;
  double dddl_weight_;
  friend struct protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PiecewiseJerkPathConfig

// optional .jmc_auto.planning.PiecewiseJerkPathWeights default_path_config = 1;
inline bool PiecewiseJerkPathConfig::has_default_path_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkPathConfig::set_has_default_path_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkPathConfig::clear_has_default_path_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkPathConfig::clear_default_path_config() {
  if (default_path_config_ != NULL) default_path_config_->::jmc_auto::planning::PiecewiseJerkPathWeights::Clear();
  clear_has_default_path_config();
}
inline const ::jmc_auto::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::default_path_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
  return default_path_config_ != NULL ? *default_path_config_
                         : *::jmc_auto::planning::PiecewiseJerkPathWeights::internal_default_instance();
}
inline ::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::mutable_default_path_config() {
  set_has_default_path_config();
  if (default_path_config_ == NULL) {
    default_path_config_ = new ::jmc_auto::planning::PiecewiseJerkPathWeights;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
  return default_path_config_;
}
inline ::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::release_default_path_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
  clear_has_default_path_config();
  ::jmc_auto::planning::PiecewiseJerkPathWeights* temp = default_path_config_;
  default_path_config_ = NULL;
  return temp;
}
inline void PiecewiseJerkPathConfig::set_allocated_default_path_config(::jmc_auto::planning::PiecewiseJerkPathWeights* default_path_config) {
  delete default_path_config_;
  default_path_config_ = default_path_config;
  if (default_path_config) {
    set_has_default_path_config();
  } else {
    clear_has_default_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PiecewiseJerkPathConfig.default_path_config)
}

// optional .jmc_auto.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
inline bool PiecewiseJerkPathConfig::has_lane_change_path_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkPathConfig::set_has_lane_change_path_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkPathConfig::clear_has_lane_change_path_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkPathConfig::clear_lane_change_path_config() {
  if (lane_change_path_config_ != NULL) lane_change_path_config_->::jmc_auto::planning::PiecewiseJerkPathWeights::Clear();
  clear_has_lane_change_path_config();
}
inline const ::jmc_auto::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::lane_change_path_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  return lane_change_path_config_ != NULL ? *lane_change_path_config_
                         : *::jmc_auto::planning::PiecewiseJerkPathWeights::internal_default_instance();
}
inline ::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::mutable_lane_change_path_config() {
  set_has_lane_change_path_config();
  if (lane_change_path_config_ == NULL) {
    lane_change_path_config_ = new ::jmc_auto::planning::PiecewiseJerkPathWeights;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  return lane_change_path_config_;
}
inline ::jmc_auto::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::release_lane_change_path_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  clear_has_lane_change_path_config();
  ::jmc_auto::planning::PiecewiseJerkPathWeights* temp = lane_change_path_config_;
  lane_change_path_config_ = NULL;
  return temp;
}
inline void PiecewiseJerkPathConfig::set_allocated_lane_change_path_config(::jmc_auto::planning::PiecewiseJerkPathWeights* lane_change_path_config) {
  delete lane_change_path_config_;
  lane_change_path_config_ = lane_change_path_config;
  if (lane_change_path_config) {
    set_has_lane_change_path_config();
  } else {
    clear_has_lane_change_path_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PiecewiseJerkPathConfig.lane_change_path_config)
}

// -------------------------------------------------------------------

// PiecewiseJerkPathWeights

// optional double l_weight = 1 [default = 1];
inline bool PiecewiseJerkPathWeights::has_l_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_l_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkPathWeights::clear_has_l_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkPathWeights::clear_l_weight() {
  l_weight_ = 1;
  clear_has_l_weight();
}
inline double PiecewiseJerkPathWeights::l_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.l_weight)
  return l_weight_;
}
inline void PiecewiseJerkPathWeights::set_l_weight(double value) {
  set_has_l_weight();
  l_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.l_weight)
}

// optional double dl_weight = 2 [default = 100];
inline bool PiecewiseJerkPathWeights::has_dl_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_dl_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkPathWeights::clear_has_dl_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkPathWeights::clear_dl_weight() {
  dl_weight_ = 100;
  clear_has_dl_weight();
}
inline double PiecewiseJerkPathWeights::dl_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.dl_weight)
  return dl_weight_;
}
inline void PiecewiseJerkPathWeights::set_dl_weight(double value) {
  set_has_dl_weight();
  dl_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.dl_weight)
}

// optional double ddl_weight = 3 [default = 1000];
inline bool PiecewiseJerkPathWeights::has_ddl_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_ddl_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkPathWeights::clear_has_ddl_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkPathWeights::clear_ddl_weight() {
  ddl_weight_ = 1000;
  clear_has_ddl_weight();
}
inline double PiecewiseJerkPathWeights::ddl_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.ddl_weight)
  return ddl_weight_;
}
inline void PiecewiseJerkPathWeights::set_ddl_weight(double value) {
  set_has_ddl_weight();
  ddl_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.ddl_weight)
}

// optional double dddl_weight = 4 [default = 10000];
inline bool PiecewiseJerkPathWeights::has_dddl_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiecewiseJerkPathWeights::set_has_dddl_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiecewiseJerkPathWeights::clear_has_dddl_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiecewiseJerkPathWeights::clear_dddl_weight() {
  dddl_weight_ = 10000;
  clear_has_dddl_weight();
}
inline double PiecewiseJerkPathWeights::dddl_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkPathWeights.dddl_weight)
  return dddl_weight_;
}
inline void PiecewiseJerkPathWeights::set_dddl_weight(double value) {
  set_has_dddl_weight();
  dddl_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkPathWeights.dddl_weight)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto__INCLUDED
