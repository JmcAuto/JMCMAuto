// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_mode_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/planning_mode_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class OwnParkingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OwnParkingConfig> {
} _OwnParkingConfig_default_instance_;
class FlowParkingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlowParkingConfig> {
} _FlowParkingConfig_default_instance_;
class CallDrivingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CallDrivingConfig> {
} _CallDrivingConfig_default_instance_;
class ParkingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParkingConfig> {
} _ParkingConfig_default_instance_;
class PlanningModeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanningModeConfig> {
} _PlanningModeConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnParkingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnParkingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnParkingConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnParkingConfig, routingrequest_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowParkingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowParkingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowParkingConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowParkingConfig, routingrequest_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDrivingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDrivingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDrivingConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallDrivingConfig, routingrequest_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingConfig, ownparking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingConfig, flowparking_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningModeConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningModeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningModeConfig, calldriving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanningModeConfig, parking_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(OwnParkingConfig)},
  { 9, 16, sizeof(FlowParkingConfig)},
  { 18, 25, sizeof(CallDrivingConfig)},
  { 27, 35, sizeof(ParkingConfig)},
  { 38, 45, sizeof(PlanningModeConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OwnParkingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlowParkingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CallDrivingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParkingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanningModeConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/planning_mode_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _OwnParkingConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FlowParkingConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CallDrivingConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ParkingConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PlanningModeConfig_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  _OwnParkingConfig_default_instance_.DefaultConstruct();
  _FlowParkingConfig_default_instance_.DefaultConstruct();
  _CallDrivingConfig_default_instance_.DefaultConstruct();
  _ParkingConfig_default_instance_.DefaultConstruct();
  _PlanningModeConfig_default_instance_.DefaultConstruct();
  _OwnParkingConfig_default_instance_.get_mutable()->routingrequest_ = const_cast< ::jmc_auto::routing::RoutingRequest*>(
      ::jmc_auto::routing::RoutingRequest::internal_default_instance());
  _FlowParkingConfig_default_instance_.get_mutable()->routingrequest_ = const_cast< ::jmc_auto::routing::RoutingRequest*>(
      ::jmc_auto::routing::RoutingRequest::internal_default_instance());
  _CallDrivingConfig_default_instance_.get_mutable()->routingrequest_ = const_cast< ::jmc_auto::routing::RoutingRequest*>(
      ::jmc_auto::routing::RoutingRequest::internal_default_instance());
  _ParkingConfig_default_instance_.get_mutable()->ownparking_ = const_cast< ::jmc_auto::planning::OwnParkingConfig*>(
      ::jmc_auto::planning::OwnParkingConfig::internal_default_instance());
  _ParkingConfig_default_instance_.get_mutable()->flowparking_ = const_cast< ::jmc_auto::planning::FlowParkingConfig*>(
      ::jmc_auto::planning::FlowParkingConfig::internal_default_instance());
  _PlanningModeConfig_default_instance_.get_mutable()->calldriving_ = const_cast< ::jmc_auto::planning::CallDrivingConfig*>(
      ::jmc_auto::planning::CallDrivingConfig::internal_default_instance());
  _PlanningModeConfig_default_instance_.get_mutable()->parking_ = const_cast< ::jmc_auto::planning::ParkingConfig*>(
      ::jmc_auto::planning::ParkingConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n1modules/planning/proto/planning_mode_c"
      "onfig.proto\022\021jmc_auto.planning\032#modules/"
      "routing/proto/routing.proto\"]\n\020OwnParkin"
      "gConfig\022\017\n\007enabled\030\001 \001(\010\0228\n\016routingreque"
      "st\030\002 \001(\0132 .jmc_auto.routing.RoutingReque"
      "st\"^\n\021FlowParkingConfig\022\017\n\007enabled\030\001 \001(\010"
      "\0228\n\016routingrequest\030\002 \001(\0132 .jmc_auto.rout"
      "ing.RoutingRequest\"^\n\021CallDrivingConfig\022"
      "\017\n\007enabled\030\001 \001(\010\0228\n\016routingrequest\030\002 \001(\013"
      "2 .jmc_auto.routing.RoutingRequest\"\224\001\n\rP"
      "arkingConfig\022\017\n\007enabled\030\001 \001(\010\0227\n\nownpark"
      "ing\030\002 \001(\0132#.jmc_auto.planning.OwnParking"
      "Config\0229\n\013flowparking\030\003 \001(\0132$.jmc_auto.p"
      "lanning.FlowParkingConfig\"\202\001\n\022PlanningMo"
      "deConfig\0229\n\013calldriving\030\001 \001(\0132$.jmc_auto"
      ".planning.CallDrivingConfig\0221\n\007parking\030\002"
      " \001(\0132 .jmc_auto.planning.ParkingConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_mode_config.proto", &protobuf_RegisterTypes);
  ::jmc_auto::routing::protobuf_modules_2frouting_2fproto_2frouting_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OwnParkingConfig::kEnabledFieldNumber;
const int OwnParkingConfig::kRoutingrequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OwnParkingConfig::OwnParkingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.OwnParkingConfig)
}
OwnParkingConfig::OwnParkingConfig(const OwnParkingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routingrequest()) {
    routingrequest_ = new ::jmc_auto::routing::RoutingRequest(*from.routingrequest_);
  } else {
    routingrequest_ = NULL;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.OwnParkingConfig)
}

void OwnParkingConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&routingrequest_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&routingrequest_) + sizeof(enabled_));
}

OwnParkingConfig::~OwnParkingConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.OwnParkingConfig)
  SharedDtor();
}

void OwnParkingConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete routingrequest_;
  }
}

void OwnParkingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnParkingConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OwnParkingConfig& OwnParkingConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

OwnParkingConfig* OwnParkingConfig::New(::google::protobuf::Arena* arena) const {
  OwnParkingConfig* n = new OwnParkingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OwnParkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.OwnParkingConfig)
  if (has_routingrequest()) {
    GOOGLE_DCHECK(routingrequest_ != NULL);
    routingrequest_->::jmc_auto::routing::RoutingRequest::Clear();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OwnParkingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.OwnParkingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routingrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.OwnParkingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.OwnParkingConfig)
  return false;
#undef DO_
}

void OwnParkingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.OwnParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->routingrequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.OwnParkingConfig)
}

::google::protobuf::uint8* OwnParkingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.OwnParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->routingrequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.OwnParkingConfig)
  return target;
}

size_t OwnParkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.OwnParkingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
    if (has_routingrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routingrequest_);
    }

    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnParkingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.OwnParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnParkingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OwnParkingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.OwnParkingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.OwnParkingConfig)
    MergeFrom(*source);
  }
}

void OwnParkingConfig::MergeFrom(const OwnParkingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.OwnParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_routingrequest()->::jmc_auto::routing::RoutingRequest::MergeFrom(from.routingrequest());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OwnParkingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.OwnParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnParkingConfig::CopyFrom(const OwnParkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.OwnParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnParkingConfig::IsInitialized() const {
  return true;
}

void OwnParkingConfig::Swap(OwnParkingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OwnParkingConfig::InternalSwap(OwnParkingConfig* other) {
  std::swap(routingrequest_, other->routingrequest_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OwnParkingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OwnParkingConfig

// optional bool enabled = 1;
bool OwnParkingConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OwnParkingConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void OwnParkingConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void OwnParkingConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool OwnParkingConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OwnParkingConfig.enabled)
  return enabled_;
}
void OwnParkingConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OwnParkingConfig.enabled)
}

// optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
bool OwnParkingConfig::has_routingrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OwnParkingConfig::set_has_routingrequest() {
  _has_bits_[0] |= 0x00000001u;
}
void OwnParkingConfig::clear_has_routingrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void OwnParkingConfig::clear_routingrequest() {
  if (routingrequest_ != NULL) routingrequest_->::jmc_auto::routing::RoutingRequest::Clear();
  clear_has_routingrequest();
}
const ::jmc_auto::routing::RoutingRequest& OwnParkingConfig::routingrequest() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OwnParkingConfig.routingrequest)
  return routingrequest_ != NULL ? *routingrequest_
                         : *::jmc_auto::routing::RoutingRequest::internal_default_instance();
}
::jmc_auto::routing::RoutingRequest* OwnParkingConfig::mutable_routingrequest() {
  set_has_routingrequest();
  if (routingrequest_ == NULL) {
    routingrequest_ = new ::jmc_auto::routing::RoutingRequest;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.OwnParkingConfig.routingrequest)
  return routingrequest_;
}
::jmc_auto::routing::RoutingRequest* OwnParkingConfig::release_routingrequest() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.OwnParkingConfig.routingrequest)
  clear_has_routingrequest();
  ::jmc_auto::routing::RoutingRequest* temp = routingrequest_;
  routingrequest_ = NULL;
  return temp;
}
void OwnParkingConfig::set_allocated_routingrequest(::jmc_auto::routing::RoutingRequest* routingrequest) {
  delete routingrequest_;
  routingrequest_ = routingrequest;
  if (routingrequest) {
    set_has_routingrequest();
  } else {
    clear_has_routingrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.OwnParkingConfig.routingrequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowParkingConfig::kEnabledFieldNumber;
const int FlowParkingConfig::kRoutingrequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowParkingConfig::FlowParkingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.FlowParkingConfig)
}
FlowParkingConfig::FlowParkingConfig(const FlowParkingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routingrequest()) {
    routingrequest_ = new ::jmc_auto::routing::RoutingRequest(*from.routingrequest_);
  } else {
    routingrequest_ = NULL;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.FlowParkingConfig)
}

void FlowParkingConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&routingrequest_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&routingrequest_) + sizeof(enabled_));
}

FlowParkingConfig::~FlowParkingConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.FlowParkingConfig)
  SharedDtor();
}

void FlowParkingConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete routingrequest_;
  }
}

void FlowParkingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowParkingConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowParkingConfig& FlowParkingConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlowParkingConfig* FlowParkingConfig::New(::google::protobuf::Arena* arena) const {
  FlowParkingConfig* n = new FlowParkingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowParkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.FlowParkingConfig)
  if (has_routingrequest()) {
    GOOGLE_DCHECK(routingrequest_ != NULL);
    routingrequest_->::jmc_auto::routing::RoutingRequest::Clear();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FlowParkingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.FlowParkingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routingrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.FlowParkingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.FlowParkingConfig)
  return false;
#undef DO_
}

void FlowParkingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.FlowParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->routingrequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.FlowParkingConfig)
}

::google::protobuf::uint8* FlowParkingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.FlowParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->routingrequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.FlowParkingConfig)
  return target;
}

size_t FlowParkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.FlowParkingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
    if (has_routingrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routingrequest_);
    }

    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowParkingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.FlowParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowParkingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowParkingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.FlowParkingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.FlowParkingConfig)
    MergeFrom(*source);
  }
}

void FlowParkingConfig::MergeFrom(const FlowParkingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.FlowParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_routingrequest()->::jmc_auto::routing::RoutingRequest::MergeFrom(from.routingrequest());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlowParkingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.FlowParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowParkingConfig::CopyFrom(const FlowParkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.FlowParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowParkingConfig::IsInitialized() const {
  return true;
}

void FlowParkingConfig::Swap(FlowParkingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowParkingConfig::InternalSwap(FlowParkingConfig* other) {
  std::swap(routingrequest_, other->routingrequest_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlowParkingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowParkingConfig

// optional bool enabled = 1;
bool FlowParkingConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlowParkingConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void FlowParkingConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlowParkingConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool FlowParkingConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.FlowParkingConfig.enabled)
  return enabled_;
}
void FlowParkingConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.FlowParkingConfig.enabled)
}

// optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
bool FlowParkingConfig::has_routingrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlowParkingConfig::set_has_routingrequest() {
  _has_bits_[0] |= 0x00000001u;
}
void FlowParkingConfig::clear_has_routingrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlowParkingConfig::clear_routingrequest() {
  if (routingrequest_ != NULL) routingrequest_->::jmc_auto::routing::RoutingRequest::Clear();
  clear_has_routingrequest();
}
const ::jmc_auto::routing::RoutingRequest& FlowParkingConfig::routingrequest() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.FlowParkingConfig.routingrequest)
  return routingrequest_ != NULL ? *routingrequest_
                         : *::jmc_auto::routing::RoutingRequest::internal_default_instance();
}
::jmc_auto::routing::RoutingRequest* FlowParkingConfig::mutable_routingrequest() {
  set_has_routingrequest();
  if (routingrequest_ == NULL) {
    routingrequest_ = new ::jmc_auto::routing::RoutingRequest;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.FlowParkingConfig.routingrequest)
  return routingrequest_;
}
::jmc_auto::routing::RoutingRequest* FlowParkingConfig::release_routingrequest() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.FlowParkingConfig.routingrequest)
  clear_has_routingrequest();
  ::jmc_auto::routing::RoutingRequest* temp = routingrequest_;
  routingrequest_ = NULL;
  return temp;
}
void FlowParkingConfig::set_allocated_routingrequest(::jmc_auto::routing::RoutingRequest* routingrequest) {
  delete routingrequest_;
  routingrequest_ = routingrequest;
  if (routingrequest) {
    set_has_routingrequest();
  } else {
    clear_has_routingrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.FlowParkingConfig.routingrequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallDrivingConfig::kEnabledFieldNumber;
const int CallDrivingConfig::kRoutingrequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallDrivingConfig::CallDrivingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.CallDrivingConfig)
}
CallDrivingConfig::CallDrivingConfig(const CallDrivingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routingrequest()) {
    routingrequest_ = new ::jmc_auto::routing::RoutingRequest(*from.routingrequest_);
  } else {
    routingrequest_ = NULL;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.CallDrivingConfig)
}

void CallDrivingConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&routingrequest_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&routingrequest_) + sizeof(enabled_));
}

CallDrivingConfig::~CallDrivingConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.CallDrivingConfig)
  SharedDtor();
}

void CallDrivingConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete routingrequest_;
  }
}

void CallDrivingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallDrivingConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CallDrivingConfig& CallDrivingConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

CallDrivingConfig* CallDrivingConfig::New(::google::protobuf::Arena* arena) const {
  CallDrivingConfig* n = new CallDrivingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallDrivingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.CallDrivingConfig)
  if (has_routingrequest()) {
    GOOGLE_DCHECK(routingrequest_ != NULL);
    routingrequest_->::jmc_auto::routing::RoutingRequest::Clear();
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CallDrivingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.CallDrivingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routingrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.CallDrivingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.CallDrivingConfig)
  return false;
#undef DO_
}

void CallDrivingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.CallDrivingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->routingrequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.CallDrivingConfig)
}

::google::protobuf::uint8* CallDrivingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.CallDrivingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->routingrequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.CallDrivingConfig)
  return target;
}

size_t CallDrivingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.CallDrivingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
    if (has_routingrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routingrequest_);
    }

    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallDrivingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.CallDrivingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CallDrivingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallDrivingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.CallDrivingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.CallDrivingConfig)
    MergeFrom(*source);
  }
}

void CallDrivingConfig::MergeFrom(const CallDrivingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.CallDrivingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_routingrequest()->::jmc_auto::routing::RoutingRequest::MergeFrom(from.routingrequest());
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallDrivingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.CallDrivingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallDrivingConfig::CopyFrom(const CallDrivingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.CallDrivingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallDrivingConfig::IsInitialized() const {
  return true;
}

void CallDrivingConfig::Swap(CallDrivingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallDrivingConfig::InternalSwap(CallDrivingConfig* other) {
  std::swap(routingrequest_, other->routingrequest_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallDrivingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallDrivingConfig

// optional bool enabled = 1;
bool CallDrivingConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CallDrivingConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void CallDrivingConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void CallDrivingConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool CallDrivingConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CallDrivingConfig.enabled)
  return enabled_;
}
void CallDrivingConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.CallDrivingConfig.enabled)
}

// optional .jmc_auto.routing.RoutingRequest routingrequest = 2;
bool CallDrivingConfig::has_routingrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CallDrivingConfig::set_has_routingrequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CallDrivingConfig::clear_has_routingrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CallDrivingConfig::clear_routingrequest() {
  if (routingrequest_ != NULL) routingrequest_->::jmc_auto::routing::RoutingRequest::Clear();
  clear_has_routingrequest();
}
const ::jmc_auto::routing::RoutingRequest& CallDrivingConfig::routingrequest() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.CallDrivingConfig.routingrequest)
  return routingrequest_ != NULL ? *routingrequest_
                         : *::jmc_auto::routing::RoutingRequest::internal_default_instance();
}
::jmc_auto::routing::RoutingRequest* CallDrivingConfig::mutable_routingrequest() {
  set_has_routingrequest();
  if (routingrequest_ == NULL) {
    routingrequest_ = new ::jmc_auto::routing::RoutingRequest;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.CallDrivingConfig.routingrequest)
  return routingrequest_;
}
::jmc_auto::routing::RoutingRequest* CallDrivingConfig::release_routingrequest() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.CallDrivingConfig.routingrequest)
  clear_has_routingrequest();
  ::jmc_auto::routing::RoutingRequest* temp = routingrequest_;
  routingrequest_ = NULL;
  return temp;
}
void CallDrivingConfig::set_allocated_routingrequest(::jmc_auto::routing::RoutingRequest* routingrequest) {
  delete routingrequest_;
  routingrequest_ = routingrequest;
  if (routingrequest) {
    set_has_routingrequest();
  } else {
    clear_has_routingrequest();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.CallDrivingConfig.routingrequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingConfig::kEnabledFieldNumber;
const int ParkingConfig::kOwnparkingFieldNumber;
const int ParkingConfig::kFlowparkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingConfig::ParkingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.ParkingConfig)
}
ParkingConfig::ParkingConfig(const ParkingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ownparking()) {
    ownparking_ = new ::jmc_auto::planning::OwnParkingConfig(*from.ownparking_);
  } else {
    ownparking_ = NULL;
  }
  if (from.has_flowparking()) {
    flowparking_ = new ::jmc_auto::planning::FlowParkingConfig(*from.flowparking_);
  } else {
    flowparking_ = NULL;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.ParkingConfig)
}

void ParkingConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ownparking_, 0, reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&ownparking_) + sizeof(enabled_));
}

ParkingConfig::~ParkingConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.ParkingConfig)
  SharedDtor();
}

void ParkingConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ownparking_;
  }
  if (this != internal_default_instance()) {
    delete flowparking_;
  }
}

void ParkingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingConfig& ParkingConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParkingConfig* ParkingConfig::New(::google::protobuf::Arena* arena) const {
  ParkingConfig* n = new ParkingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.ParkingConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ownparking()) {
      GOOGLE_DCHECK(ownparking_ != NULL);
      ownparking_->::jmc_auto::planning::OwnParkingConfig::Clear();
    }
    if (has_flowparking()) {
      GOOGLE_DCHECK(flowparking_ != NULL);
      flowparking_->::jmc_auto::planning::FlowParkingConfig::Clear();
    }
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.ParkingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.OwnParkingConfig ownparking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ownparking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.FlowParkingConfig flowparking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flowparking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.ParkingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.ParkingConfig)
  return false;
#undef DO_
}

void ParkingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.ParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .jmc_auto.planning.OwnParkingConfig ownparking = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ownparking_, output);
  }

  // optional .jmc_auto.planning.FlowParkingConfig flowparking = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->flowparking_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.ParkingConfig)
}

::google::protobuf::uint8* ParkingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.ParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional .jmc_auto.planning.OwnParkingConfig ownparking = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ownparking_, deterministic, target);
  }

  // optional .jmc_auto.planning.FlowParkingConfig flowparking = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->flowparking_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.ParkingConfig)
  return target;
}

size_t ParkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.ParkingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.planning.OwnParkingConfig ownparking = 2;
    if (has_ownparking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ownparking_);
    }

    // optional .jmc_auto.planning.FlowParkingConfig flowparking = 3;
    if (has_flowparking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flowparking_);
    }

    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.ParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.ParkingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.ParkingConfig)
    MergeFrom(*source);
  }
}

void ParkingConfig::MergeFrom(const ParkingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.ParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ownparking()->::jmc_auto::planning::OwnParkingConfig::MergeFrom(from.ownparking());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_flowparking()->::jmc_auto::planning::FlowParkingConfig::MergeFrom(from.flowparking());
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.ParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingConfig::CopyFrom(const ParkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.ParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingConfig::IsInitialized() const {
  return true;
}

void ParkingConfig::Swap(ParkingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingConfig::InternalSwap(ParkingConfig* other) {
  std::swap(ownparking_, other->ownparking_);
  std::swap(flowparking_, other->flowparking_);
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParkingConfig

// optional bool enabled = 1;
bool ParkingConfig::has_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParkingConfig::set_has_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
void ParkingConfig::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParkingConfig::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool ParkingConfig::enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ParkingConfig.enabled)
  return enabled_;
}
void ParkingConfig::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.ParkingConfig.enabled)
}

// optional .jmc_auto.planning.OwnParkingConfig ownparking = 2;
bool ParkingConfig::has_ownparking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParkingConfig::set_has_ownparking() {
  _has_bits_[0] |= 0x00000001u;
}
void ParkingConfig::clear_has_ownparking() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingConfig::clear_ownparking() {
  if (ownparking_ != NULL) ownparking_->::jmc_auto::planning::OwnParkingConfig::Clear();
  clear_has_ownparking();
}
const ::jmc_auto::planning::OwnParkingConfig& ParkingConfig::ownparking() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ParkingConfig.ownparking)
  return ownparking_ != NULL ? *ownparking_
                         : *::jmc_auto::planning::OwnParkingConfig::internal_default_instance();
}
::jmc_auto::planning::OwnParkingConfig* ParkingConfig::mutable_ownparking() {
  set_has_ownparking();
  if (ownparking_ == NULL) {
    ownparking_ = new ::jmc_auto::planning::OwnParkingConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ParkingConfig.ownparking)
  return ownparking_;
}
::jmc_auto::planning::OwnParkingConfig* ParkingConfig::release_ownparking() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ParkingConfig.ownparking)
  clear_has_ownparking();
  ::jmc_auto::planning::OwnParkingConfig* temp = ownparking_;
  ownparking_ = NULL;
  return temp;
}
void ParkingConfig::set_allocated_ownparking(::jmc_auto::planning::OwnParkingConfig* ownparking) {
  delete ownparking_;
  ownparking_ = ownparking;
  if (ownparking) {
    set_has_ownparking();
  } else {
    clear_has_ownparking();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ParkingConfig.ownparking)
}

// optional .jmc_auto.planning.FlowParkingConfig flowparking = 3;
bool ParkingConfig::has_flowparking() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParkingConfig::set_has_flowparking() {
  _has_bits_[0] |= 0x00000002u;
}
void ParkingConfig::clear_has_flowparking() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingConfig::clear_flowparking() {
  if (flowparking_ != NULL) flowparking_->::jmc_auto::planning::FlowParkingConfig::Clear();
  clear_has_flowparking();
}
const ::jmc_auto::planning::FlowParkingConfig& ParkingConfig::flowparking() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.ParkingConfig.flowparking)
  return flowparking_ != NULL ? *flowparking_
                         : *::jmc_auto::planning::FlowParkingConfig::internal_default_instance();
}
::jmc_auto::planning::FlowParkingConfig* ParkingConfig::mutable_flowparking() {
  set_has_flowparking();
  if (flowparking_ == NULL) {
    flowparking_ = new ::jmc_auto::planning::FlowParkingConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.ParkingConfig.flowparking)
  return flowparking_;
}
::jmc_auto::planning::FlowParkingConfig* ParkingConfig::release_flowparking() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.ParkingConfig.flowparking)
  clear_has_flowparking();
  ::jmc_auto::planning::FlowParkingConfig* temp = flowparking_;
  flowparking_ = NULL;
  return temp;
}
void ParkingConfig::set_allocated_flowparking(::jmc_auto::planning::FlowParkingConfig* flowparking) {
  delete flowparking_;
  flowparking_ = flowparking;
  if (flowparking) {
    set_has_flowparking();
  } else {
    clear_has_flowparking();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.ParkingConfig.flowparking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningModeConfig::kCalldrivingFieldNumber;
const int PlanningModeConfig::kParkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningModeConfig::PlanningModeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.PlanningModeConfig)
}
PlanningModeConfig::PlanningModeConfig(const PlanningModeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calldriving()) {
    calldriving_ = new ::jmc_auto::planning::CallDrivingConfig(*from.calldriving_);
  } else {
    calldriving_ = NULL;
  }
  if (from.has_parking()) {
    parking_ = new ::jmc_auto::planning::ParkingConfig(*from.parking_);
  } else {
    parking_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.PlanningModeConfig)
}

void PlanningModeConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&calldriving_, 0, reinterpret_cast<char*>(&parking_) -
    reinterpret_cast<char*>(&calldriving_) + sizeof(parking_));
}

PlanningModeConfig::~PlanningModeConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.PlanningModeConfig)
  SharedDtor();
}

void PlanningModeConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete calldriving_;
  }
  if (this != internal_default_instance()) {
    delete parking_;
  }
}

void PlanningModeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningModeConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningModeConfig& PlanningModeConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanningModeConfig* PlanningModeConfig::New(::google::protobuf::Arena* arena) const {
  PlanningModeConfig* n = new PlanningModeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningModeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.PlanningModeConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_calldriving()) {
      GOOGLE_DCHECK(calldriving_ != NULL);
      calldriving_->::jmc_auto::planning::CallDrivingConfig::Clear();
    }
    if (has_parking()) {
      GOOGLE_DCHECK(parking_ != NULL);
      parking_->::jmc_auto::planning::ParkingConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningModeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.PlanningModeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.planning.CallDrivingConfig calldriving = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calldriving()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.planning.ParkingConfig parking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.PlanningModeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.PlanningModeConfig)
  return false;
#undef DO_
}

void PlanningModeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.PlanningModeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.CallDrivingConfig calldriving = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->calldriving_, output);
  }

  // optional .jmc_auto.planning.ParkingConfig parking = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parking_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.PlanningModeConfig)
}

::google::protobuf::uint8* PlanningModeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.PlanningModeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.planning.CallDrivingConfig calldriving = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->calldriving_, deterministic, target);
  }

  // optional .jmc_auto.planning.ParkingConfig parking = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parking_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.PlanningModeConfig)
  return target;
}

size_t PlanningModeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.PlanningModeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.planning.CallDrivingConfig calldriving = 1;
    if (has_calldriving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calldriving_);
    }

    // optional .jmc_auto.planning.ParkingConfig parking = 2;
    if (has_parking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parking_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningModeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.PlanningModeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningModeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningModeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.PlanningModeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.PlanningModeConfig)
    MergeFrom(*source);
  }
}

void PlanningModeConfig::MergeFrom(const PlanningModeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.PlanningModeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_calldriving()->::jmc_auto::planning::CallDrivingConfig::MergeFrom(from.calldriving());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_parking()->::jmc_auto::planning::ParkingConfig::MergeFrom(from.parking());
    }
  }
}

void PlanningModeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.PlanningModeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningModeConfig::CopyFrom(const PlanningModeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.PlanningModeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningModeConfig::IsInitialized() const {
  return true;
}

void PlanningModeConfig::Swap(PlanningModeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningModeConfig::InternalSwap(PlanningModeConfig* other) {
  std::swap(calldriving_, other->calldriving_);
  std::swap(parking_, other->parking_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningModeConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fmode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanningModeConfig

// optional .jmc_auto.planning.CallDrivingConfig calldriving = 1;
bool PlanningModeConfig::has_calldriving() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlanningModeConfig::set_has_calldriving() {
  _has_bits_[0] |= 0x00000001u;
}
void PlanningModeConfig::clear_has_calldriving() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningModeConfig::clear_calldriving() {
  if (calldriving_ != NULL) calldriving_->::jmc_auto::planning::CallDrivingConfig::Clear();
  clear_has_calldriving();
}
const ::jmc_auto::planning::CallDrivingConfig& PlanningModeConfig::calldriving() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningModeConfig.calldriving)
  return calldriving_ != NULL ? *calldriving_
                         : *::jmc_auto::planning::CallDrivingConfig::internal_default_instance();
}
::jmc_auto::planning::CallDrivingConfig* PlanningModeConfig::mutable_calldriving() {
  set_has_calldriving();
  if (calldriving_ == NULL) {
    calldriving_ = new ::jmc_auto::planning::CallDrivingConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningModeConfig.calldriving)
  return calldriving_;
}
::jmc_auto::planning::CallDrivingConfig* PlanningModeConfig::release_calldriving() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningModeConfig.calldriving)
  clear_has_calldriving();
  ::jmc_auto::planning::CallDrivingConfig* temp = calldriving_;
  calldriving_ = NULL;
  return temp;
}
void PlanningModeConfig::set_allocated_calldriving(::jmc_auto::planning::CallDrivingConfig* calldriving) {
  delete calldriving_;
  calldriving_ = calldriving;
  if (calldriving) {
    set_has_calldriving();
  } else {
    clear_has_calldriving();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningModeConfig.calldriving)
}

// optional .jmc_auto.planning.ParkingConfig parking = 2;
bool PlanningModeConfig::has_parking() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlanningModeConfig::set_has_parking() {
  _has_bits_[0] |= 0x00000002u;
}
void PlanningModeConfig::clear_has_parking() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningModeConfig::clear_parking() {
  if (parking_ != NULL) parking_->::jmc_auto::planning::ParkingConfig::Clear();
  clear_has_parking();
}
const ::jmc_auto::planning::ParkingConfig& PlanningModeConfig::parking() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PlanningModeConfig.parking)
  return parking_ != NULL ? *parking_
                         : *::jmc_auto::planning::ParkingConfig::internal_default_instance();
}
::jmc_auto::planning::ParkingConfig* PlanningModeConfig::mutable_parking() {
  set_has_parking();
  if (parking_ == NULL) {
    parking_ = new ::jmc_auto::planning::ParkingConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.planning.PlanningModeConfig.parking)
  return parking_;
}
::jmc_auto::planning::ParkingConfig* PlanningModeConfig::release_parking() {
  // @@protoc_insertion_point(field_release:jmc_auto.planning.PlanningModeConfig.parking)
  clear_has_parking();
  ::jmc_auto::planning::ParkingConfig* temp = parking_;
  parking_ = NULL;
  return temp;
}
void PlanningModeConfig::set_allocated_parking(::jmc_auto::planning::ParkingConfig* parking) {
  delete parking_;
  parking_ = parking;
  if (parking) {
    set_has_parking();
  } else {
    clear_has_parking();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.planning.PlanningModeConfig.parking)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
