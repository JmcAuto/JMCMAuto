// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/piecewise_jerk_nonlinear_speed_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class PiecewiseJerkNonlinearSpeedConfig;
class PiecewiseJerkNonlinearSpeedConfigDefaultTypeInternal;
extern PiecewiseJerkNonlinearSpeedConfigDefaultTypeInternal _PiecewiseJerkNonlinearSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto

// ===================================================================

class PiecewiseJerkNonlinearSpeedConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig) */ {
 public:
  PiecewiseJerkNonlinearSpeedConfig();
  virtual ~PiecewiseJerkNonlinearSpeedConfig();

  PiecewiseJerkNonlinearSpeedConfig(const PiecewiseJerkNonlinearSpeedConfig& from);

  inline PiecewiseJerkNonlinearSpeedConfig& operator=(const PiecewiseJerkNonlinearSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PiecewiseJerkNonlinearSpeedConfig& default_instance();

  static inline const PiecewiseJerkNonlinearSpeedConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkNonlinearSpeedConfig*>(
               &_PiecewiseJerkNonlinearSpeedConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PiecewiseJerkNonlinearSpeedConfig* other);

  // implements Message ----------------------------------------------

  inline PiecewiseJerkNonlinearSpeedConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PiecewiseJerkNonlinearSpeedConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PiecewiseJerkNonlinearSpeedConfig& from);
  void MergeFrom(const PiecewiseJerkNonlinearSpeedConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PiecewiseJerkNonlinearSpeedConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_warm_start = 100 [default = true];
  bool has_use_warm_start() const;
  void clear_use_warm_start();
  static const int kUseWarmStartFieldNumber = 100;
  bool use_warm_start() const;
  void set_use_warm_start(bool value);

  // optional double acc_weight = 1 [default = 500];
  bool has_acc_weight() const;
  void clear_acc_weight();
  static const int kAccWeightFieldNumber = 1;
  double acc_weight() const;
  void set_acc_weight(double value);

  // optional double jerk_weight = 2 [default = 100];
  bool has_jerk_weight() const;
  void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 2;
  double jerk_weight() const;
  void set_jerk_weight(double value);

  // optional double lat_acc_weight = 3 [default = 500];
  bool has_lat_acc_weight() const;
  void clear_lat_acc_weight();
  static const int kLatAccWeightFieldNumber = 3;
  double lat_acc_weight() const;
  void set_lat_acc_weight(double value);

  // optional double s_potential_weight = 4 [default = 10];
  bool has_s_potential_weight() const;
  void clear_s_potential_weight();
  static const int kSPotentialWeightFieldNumber = 4;
  double s_potential_weight() const;
  void set_s_potential_weight(double value);

  // optional double ref_v_weight = 5 [default = 10];
  bool has_ref_v_weight() const;
  void clear_ref_v_weight();
  static const int kRefVWeightFieldNumber = 5;
  double ref_v_weight() const;
  void set_ref_v_weight(double value);

  // optional double ref_s_weight = 6 [default = 10];
  bool has_ref_s_weight() const;
  void clear_ref_s_weight();
  static const int kRefSWeightFieldNumber = 6;
  double ref_s_weight() const;
  void set_ref_s_weight(double value);

  // optional double end_s_weight = 7 [default = 10];
  bool has_end_s_weight() const;
  void clear_end_s_weight();
  static const int kEndSWeightFieldNumber = 7;
  double end_s_weight() const;
  void set_end_s_weight(double value);

  // optional double end_v_weight = 8 [default = 10];
  bool has_end_v_weight() const;
  void clear_end_v_weight();
  static const int kEndVWeightFieldNumber = 8;
  double end_v_weight() const;
  void set_end_v_weight(double value);

  // optional double end_a_weight = 9 [default = 10];
  bool has_end_a_weight() const;
  void clear_end_a_weight();
  static const int kEndAWeightFieldNumber = 9;
  double end_a_weight() const;
  void set_end_a_weight(double value);

  // optional double soft_s_bound_weight = 10 [default = 10];
  bool has_soft_s_bound_weight() const;
  void clear_soft_s_bound_weight();
  static const int kSoftSBoundWeightFieldNumber = 10;
  double soft_s_bound_weight() const;
  void set_soft_s_bound_weight(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig)
 private:
  void set_has_acc_weight();
  void clear_has_acc_weight();
  void set_has_jerk_weight();
  void clear_has_jerk_weight();
  void set_has_lat_acc_weight();
  void clear_has_lat_acc_weight();
  void set_has_s_potential_weight();
  void clear_has_s_potential_weight();
  void set_has_ref_v_weight();
  void clear_has_ref_v_weight();
  void set_has_ref_s_weight();
  void clear_has_ref_s_weight();
  void set_has_end_s_weight();
  void clear_has_end_s_weight();
  void set_has_end_v_weight();
  void clear_has_end_v_weight();
  void set_has_end_a_weight();
  void clear_has_end_a_weight();
  void set_has_soft_s_bound_weight();
  void clear_has_soft_s_bound_weight();
  void set_has_use_warm_start();
  void clear_has_use_warm_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool use_warm_start_;
  double acc_weight_;
  double jerk_weight_;
  double lat_acc_weight_;
  double s_potential_weight_;
  double ref_v_weight_;
  double ref_s_weight_;
  double end_s_weight_;
  double end_v_weight_;
  double end_a_weight_;
  double soft_s_bound_weight_;
  friend struct protobuf_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PiecewiseJerkNonlinearSpeedConfig

// optional double acc_weight = 1 [default = 500];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_acc_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_acc_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_acc_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_acc_weight() {
  acc_weight_ = 500;
  clear_has_acc_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.acc_weight)
  return acc_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_acc_weight(double value) {
  set_has_acc_weight();
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 100];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_jerk_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_jerk_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_jerk_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 100;
  clear_has_jerk_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.jerk_weight)
  return jerk_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_jerk_weight(double value) {
  set_has_jerk_weight();
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.jerk_weight)
}

// optional double lat_acc_weight = 3 [default = 500];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_lat_acc_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_lat_acc_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_lat_acc_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_lat_acc_weight() {
  lat_acc_weight_ = 500;
  clear_has_lat_acc_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::lat_acc_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.lat_acc_weight)
  return lat_acc_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_lat_acc_weight(double value) {
  set_has_lat_acc_weight();
  lat_acc_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.lat_acc_weight)
}

// optional double s_potential_weight = 4 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_s_potential_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_s_potential_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_s_potential_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_s_potential_weight() {
  s_potential_weight_ = 10;
  clear_has_s_potential_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::s_potential_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.s_potential_weight)
  return s_potential_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_s_potential_weight(double value) {
  set_has_s_potential_weight();
  s_potential_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.s_potential_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_ref_v_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_ref_v_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_ref_v_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_ref_v_weight() {
  ref_v_weight_ = 10;
  clear_has_ref_v_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_v_weight)
  return ref_v_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_ref_v_weight(double value) {
  set_has_ref_v_weight();
  ref_v_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_v_weight)
}

// optional double ref_s_weight = 6 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_ref_s_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_ref_s_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_ref_s_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_ref_s_weight() {
  ref_s_weight_ = 10;
  clear_has_ref_s_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_s_weight)
  return ref_s_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_ref_s_weight(double value) {
  set_has_ref_s_weight();
  ref_s_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.ref_s_weight)
}

// optional double end_s_weight = 7 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_end_s_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_end_s_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_end_s_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_end_s_weight() {
  end_s_weight_ = 10;
  clear_has_end_s_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::end_s_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_s_weight)
  return end_s_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_end_s_weight(double value) {
  set_has_end_s_weight();
  end_s_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_s_weight)
}

// optional double end_v_weight = 8 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_end_v_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_end_v_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_end_v_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_end_v_weight() {
  end_v_weight_ = 10;
  clear_has_end_v_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::end_v_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_v_weight)
  return end_v_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_end_v_weight(double value) {
  set_has_end_v_weight();
  end_v_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_v_weight)
}

// optional double end_a_weight = 9 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_end_a_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_end_a_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_end_a_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_end_a_weight() {
  end_a_weight_ = 10;
  clear_has_end_a_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::end_a_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_a_weight)
  return end_a_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_end_a_weight(double value) {
  set_has_end_a_weight();
  end_a_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.end_a_weight)
}

// optional double soft_s_bound_weight = 10 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_soft_s_bound_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_soft_s_bound_weight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_soft_s_bound_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_soft_s_bound_weight() {
  soft_s_bound_weight_ = 10;
  clear_has_soft_s_bound_weight();
}
inline double PiecewiseJerkNonlinearSpeedConfig::soft_s_bound_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.soft_s_bound_weight)
  return soft_s_bound_weight_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_soft_s_bound_weight(double value) {
  set_has_soft_s_bound_weight();
  soft_s_bound_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.soft_s_bound_weight)
}

// optional bool use_warm_start = 100 [default = true];
inline bool PiecewiseJerkNonlinearSpeedConfig::has_use_warm_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_has_use_warm_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_has_use_warm_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PiecewiseJerkNonlinearSpeedConfig::clear_use_warm_start() {
  use_warm_start_ = true;
  clear_has_use_warm_start();
}
inline bool PiecewiseJerkNonlinearSpeedConfig::use_warm_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.use_warm_start)
  return use_warm_start_;
}
inline void PiecewiseJerkNonlinearSpeedConfig::set_use_warm_start(bool value) {
  set_has_use_warm_start();
  use_warm_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.PiecewiseJerkNonlinearSpeedConfig.use_warm_start)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fnonlinear_5fspeed_5fconfig_2eproto__INCLUDED
