// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_roi_decider_config.proto

#ifndef PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace planning {
class OpenSpaceRoiDeciderConfig;
class OpenSpaceRoiDeciderConfigDefaultTypeInternal;
extern OpenSpaceRoiDeciderConfigDefaultTypeInternal _OpenSpaceRoiDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace jmc_auto

namespace jmc_auto {
namespace planning {

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto

enum OpenSpaceRoiDeciderConfig_RoiType {
  OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED = 0,
  OpenSpaceRoiDeciderConfig_RoiType_PARKING = 1,
  OpenSpaceRoiDeciderConfig_RoiType_PULL_OVER = 2,
  OpenSpaceRoiDeciderConfig_RoiType_PARK_AND_GO = 3,
  OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN = 4
};
bool OpenSpaceRoiDeciderConfig_RoiType_IsValid(int value);
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig_RoiType_RoiType_MIN = OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX = OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN;
const int OpenSpaceRoiDeciderConfig_RoiType_RoiType_ARRAYSIZE = OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenSpaceRoiDeciderConfig_RoiType_descriptor();
inline const ::std::string& OpenSpaceRoiDeciderConfig_RoiType_Name(OpenSpaceRoiDeciderConfig_RoiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenSpaceRoiDeciderConfig_RoiType_descriptor(), value);
}
inline bool OpenSpaceRoiDeciderConfig_RoiType_Parse(
    const ::std::string& name, OpenSpaceRoiDeciderConfig_RoiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenSpaceRoiDeciderConfig_RoiType>(
    OpenSpaceRoiDeciderConfig_RoiType_descriptor(), name, value);
}
// ===================================================================

class OpenSpaceRoiDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.planning.OpenSpaceRoiDeciderConfig) */ {
 public:
  OpenSpaceRoiDeciderConfig();
  virtual ~OpenSpaceRoiDeciderConfig();

  OpenSpaceRoiDeciderConfig(const OpenSpaceRoiDeciderConfig& from);

  inline OpenSpaceRoiDeciderConfig& operator=(const OpenSpaceRoiDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceRoiDeciderConfig& default_instance();

  static inline const OpenSpaceRoiDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceRoiDeciderConfig*>(
               &_OpenSpaceRoiDeciderConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OpenSpaceRoiDeciderConfig* other);

  // implements Message ----------------------------------------------

  inline OpenSpaceRoiDeciderConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  OpenSpaceRoiDeciderConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpenSpaceRoiDeciderConfig& from);
  void MergeFrom(const OpenSpaceRoiDeciderConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpenSpaceRoiDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef OpenSpaceRoiDeciderConfig_RoiType RoiType;
  static const RoiType NOT_DEFINED =
    OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED;
  static const RoiType PARKING =
    OpenSpaceRoiDeciderConfig_RoiType_PARKING;
  static const RoiType PULL_OVER =
    OpenSpaceRoiDeciderConfig_RoiType_PULL_OVER;
  static const RoiType PARK_AND_GO =
    OpenSpaceRoiDeciderConfig_RoiType_PARK_AND_GO;
  static const RoiType NARROW_STREET_U_TURN =
    OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN;
  static inline bool RoiType_IsValid(int value) {
    return OpenSpaceRoiDeciderConfig_RoiType_IsValid(value);
  }
  static const RoiType RoiType_MIN =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_MIN;
  static const RoiType RoiType_MAX =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX;
  static const int RoiType_ARRAYSIZE =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoiType_descriptor() {
    return OpenSpaceRoiDeciderConfig_RoiType_descriptor();
  }
  static inline const ::std::string& RoiType_Name(RoiType value) {
    return OpenSpaceRoiDeciderConfig_RoiType_Name(value);
  }
  static inline bool RoiType_Parse(const ::std::string& name,
      RoiType* value) {
    return OpenSpaceRoiDeciderConfig_RoiType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  bool has_roi_type() const;
  void clear_roi_type();
  static const int kRoiTypeFieldNumber = 1;
  ::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType roi_type() const;
  void set_roi_type(::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType value);

  // optional bool parking_inwards = 5 [default = false];
  bool has_parking_inwards() const;
  void clear_parking_inwards();
  static const int kParkingInwardsFieldNumber = 5;
  bool parking_inwards() const;
  void set_parking_inwards(bool value);

  // optional bool enable_perception_obstacles = 6;
  bool has_enable_perception_obstacles() const;
  void clear_enable_perception_obstacles();
  static const int kEnablePerceptionObstaclesFieldNumber = 6;
  bool enable_perception_obstacles() const;
  void set_enable_perception_obstacles(bool value);

  // optional double perception_obstacle_buffer = 12;
  bool has_perception_obstacle_buffer() const;
  void clear_perception_obstacle_buffer();
  static const int kPerceptionObstacleBufferFieldNumber = 12;
  double perception_obstacle_buffer() const;
  void set_perception_obstacle_buffer(double value);

  // optional double roi_longitudinal_range_start = 2 [default = 10];
  bool has_roi_longitudinal_range_start() const;
  void clear_roi_longitudinal_range_start();
  static const int kRoiLongitudinalRangeStartFieldNumber = 2;
  double roi_longitudinal_range_start() const;
  void set_roi_longitudinal_range_start(double value);

  // optional double roi_longitudinal_range_end = 3 [default = 10];
  bool has_roi_longitudinal_range_end() const;
  void clear_roi_longitudinal_range_end();
  static const int kRoiLongitudinalRangeEndFieldNumber = 3;
  double roi_longitudinal_range_end() const;
  void set_roi_longitudinal_range_end(double value);

  // optional double parking_start_range = 4 [default = 7];
  bool has_parking_start_range() const;
  void clear_parking_start_range();
  static const int kParkingStartRangeFieldNumber = 4;
  double parking_start_range() const;
  void set_parking_start_range(double value);

  // optional double parking_depth_buffer = 7 [default = 0.1];
  bool has_parking_depth_buffer() const;
  void clear_parking_depth_buffer();
  static const int kParkingDepthBufferFieldNumber = 7;
  double parking_depth_buffer() const;
  void set_parking_depth_buffer(double value);

  // optional double roi_line_segment_min_angle = 8 [default = 0.3];
  bool has_roi_line_segment_min_angle() const;
  void clear_roi_line_segment_min_angle();
  static const int kRoiLineSegmentMinAngleFieldNumber = 8;
  double roi_line_segment_min_angle() const;
  void set_roi_line_segment_min_angle(double value);

  // optional double roi_line_segment_length = 9 [default = 1];
  bool has_roi_line_segment_length() const;
  void clear_roi_line_segment_length();
  static const int kRoiLineSegmentLengthFieldNumber = 9;
  double roi_line_segment_length() const;
  void set_roi_line_segment_length(double value);

  // optional double roi_line_segment_length_from_map = 10 [default = 10];
  bool has_roi_line_segment_length_from_map() const;
  void clear_roi_line_segment_length_from_map();
  static const int kRoiLineSegmentLengthFromMapFieldNumber = 10;
  double roi_line_segment_length_from_map() const;
  void set_roi_line_segment_length_from_map(double value);

  // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
  bool has_perception_obstacle_filtering_distance() const;
  void clear_perception_obstacle_filtering_distance();
  static const int kPerceptionObstacleFilteringDistanceFieldNumber = 11;
  double perception_obstacle_filtering_distance() const;
  void set_perception_obstacle_filtering_distance(double value);

  // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
  bool has_curb_heading_tangent_change_upper_limit() const;
  void clear_curb_heading_tangent_change_upper_limit();
  static const int kCurbHeadingTangentChangeUpperLimitFieldNumber = 13;
  double curb_heading_tangent_change_upper_limit() const;
  void set_curb_heading_tangent_change_upper_limit(double value);

  // optional double end_pose_s_distance = 14 [default = 10];
  bool has_end_pose_s_distance() const;
  void clear_end_pose_s_distance();
  static const int kEndPoseSDistanceFieldNumber = 14;
  double end_pose_s_distance() const;
  void set_end_pose_s_distance(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.planning.OpenSpaceRoiDeciderConfig)
 private:
  void set_has_roi_type();
  void clear_has_roi_type();
  void set_has_roi_longitudinal_range_start();
  void clear_has_roi_longitudinal_range_start();
  void set_has_roi_longitudinal_range_end();
  void clear_has_roi_longitudinal_range_end();
  void set_has_parking_start_range();
  void clear_has_parking_start_range();
  void set_has_parking_inwards();
  void clear_has_parking_inwards();
  void set_has_enable_perception_obstacles();
  void clear_has_enable_perception_obstacles();
  void set_has_parking_depth_buffer();
  void clear_has_parking_depth_buffer();
  void set_has_roi_line_segment_min_angle();
  void clear_has_roi_line_segment_min_angle();
  void set_has_roi_line_segment_length();
  void clear_has_roi_line_segment_length();
  void set_has_roi_line_segment_length_from_map();
  void clear_has_roi_line_segment_length_from_map();
  void set_has_perception_obstacle_filtering_distance();
  void clear_has_perception_obstacle_filtering_distance();
  void set_has_perception_obstacle_buffer();
  void clear_has_perception_obstacle_buffer();
  void set_has_curb_heading_tangent_change_upper_limit();
  void clear_has_curb_heading_tangent_change_upper_limit();
  void set_has_end_pose_s_distance();
  void clear_has_end_pose_s_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int roi_type_;
  bool parking_inwards_;
  bool enable_perception_obstacles_;
  double perception_obstacle_buffer_;
  double roi_longitudinal_range_start_;
  double roi_longitudinal_range_end_;
  double parking_start_range_;
  double parking_depth_buffer_;
  double roi_line_segment_min_angle_;
  double roi_line_segment_length_;
  double roi_line_segment_length_from_map_;
  double perception_obstacle_filtering_distance_;
  double curb_heading_tangent_change_upper_limit_;
  double end_pose_s_distance_;
  friend struct protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceRoiDeciderConfig

// optional .jmc_auto.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
inline bool OpenSpaceRoiDeciderConfig::has_roi_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_type() {
  roi_type_ = 0;
  clear_has_roi_type();
}
inline ::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::roi_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_type)
  return static_cast< ::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType >(roi_type_);
}
inline void OpenSpaceRoiDeciderConfig::set_roi_type(::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType value) {
  assert(::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType_IsValid(value));
  set_has_roi_type();
  roi_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_type)
}

// optional double roi_longitudinal_range_start = 2 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_roi_longitudinal_range_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_longitudinal_range_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_longitudinal_range_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 10;
  clear_has_roi_longitudinal_range_start();
}
inline double OpenSpaceRoiDeciderConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_start)
  return roi_longitudinal_range_start_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_longitudinal_range_start(double value) {
  set_has_roi_longitudinal_range_start();
  roi_longitudinal_range_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_start)
}

// optional double roi_longitudinal_range_end = 3 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_roi_longitudinal_range_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_longitudinal_range_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_longitudinal_range_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 10;
  clear_has_roi_longitudinal_range_end();
}
inline double OpenSpaceRoiDeciderConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_end)
  return roi_longitudinal_range_end_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_longitudinal_range_end(double value) {
  set_has_roi_longitudinal_range_end();
  roi_longitudinal_range_end_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_end)
}

// optional double parking_start_range = 4 [default = 7];
inline bool OpenSpaceRoiDeciderConfig::has_parking_start_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parking_start_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parking_start_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  clear_has_parking_start_range();
}
inline double OpenSpaceRoiDeciderConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.parking_start_range)
  return parking_start_range_;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_start_range(double value) {
  set_has_parking_start_range();
  parking_start_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.parking_start_range)
}

// optional bool parking_inwards = 5 [default = false];
inline bool OpenSpaceRoiDeciderConfig::has_parking_inwards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parking_inwards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parking_inwards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  clear_has_parking_inwards();
}
inline bool OpenSpaceRoiDeciderConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.parking_inwards)
  return parking_inwards_;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_inwards(bool value) {
  set_has_parking_inwards();
  parking_inwards_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.parking_inwards)
}

// optional bool enable_perception_obstacles = 6;
inline bool OpenSpaceRoiDeciderConfig::has_enable_perception_obstacles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_enable_perception_obstacles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_enable_perception_obstacles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceRoiDeciderConfig::clear_enable_perception_obstacles() {
  enable_perception_obstacles_ = false;
  clear_has_enable_perception_obstacles();
}
inline bool OpenSpaceRoiDeciderConfig::enable_perception_obstacles() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.enable_perception_obstacles)
  return enable_perception_obstacles_;
}
inline void OpenSpaceRoiDeciderConfig::set_enable_perception_obstacles(bool value) {
  set_has_enable_perception_obstacles();
  enable_perception_obstacles_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.enable_perception_obstacles)
}

// optional double parking_depth_buffer = 7 [default = 0.1];
inline bool OpenSpaceRoiDeciderConfig::has_parking_depth_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parking_depth_buffer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parking_depth_buffer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_depth_buffer() {
  parking_depth_buffer_ = 0.1;
  clear_has_parking_depth_buffer();
}
inline double OpenSpaceRoiDeciderConfig::parking_depth_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.parking_depth_buffer)
  return parking_depth_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_depth_buffer(double value) {
  set_has_parking_depth_buffer();
  parking_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.parking_depth_buffer)
}

// optional double roi_line_segment_min_angle = 8 [default = 0.3];
inline bool OpenSpaceRoiDeciderConfig::has_roi_line_segment_min_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_line_segment_min_angle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_line_segment_min_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_line_segment_min_angle() {
  roi_line_segment_min_angle_ = 0.3;
  clear_has_roi_line_segment_min_angle();
}
inline double OpenSpaceRoiDeciderConfig::roi_line_segment_min_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_min_angle)
  return roi_line_segment_min_angle_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_line_segment_min_angle(double value) {
  set_has_roi_line_segment_min_angle();
  roi_line_segment_min_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_min_angle)
}

// optional double roi_line_segment_length = 9 [default = 1];
inline bool OpenSpaceRoiDeciderConfig::has_roi_line_segment_length() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_line_segment_length() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_line_segment_length() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_line_segment_length() {
  roi_line_segment_length_ = 1;
  clear_has_roi_line_segment_length();
}
inline double OpenSpaceRoiDeciderConfig::roi_line_segment_length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length)
  return roi_line_segment_length_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_line_segment_length(double value) {
  set_has_roi_line_segment_length();
  roi_line_segment_length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length)
}

// optional double roi_line_segment_length_from_map = 10 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_roi_line_segment_length_from_map() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_line_segment_length_from_map() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_line_segment_length_from_map() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_line_segment_length_from_map() {
  roi_line_segment_length_from_map_ = 10;
  clear_has_roi_line_segment_length_from_map();
}
inline double OpenSpaceRoiDeciderConfig::roi_line_segment_length_from_map() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length_from_map)
  return roi_line_segment_length_from_map_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_line_segment_length_from_map(double value) {
  set_has_roi_line_segment_length_from_map();
  roi_line_segment_length_from_map_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length_from_map)
}

// optional double perception_obstacle_filtering_distance = 11 [default = 1000];
inline bool OpenSpaceRoiDeciderConfig::has_perception_obstacle_filtering_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_perception_obstacle_filtering_distance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_perception_obstacle_filtering_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpenSpaceRoiDeciderConfig::clear_perception_obstacle_filtering_distance() {
  perception_obstacle_filtering_distance_ = 1000;
  clear_has_perception_obstacle_filtering_distance();
}
inline double OpenSpaceRoiDeciderConfig::perception_obstacle_filtering_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_filtering_distance)
  return perception_obstacle_filtering_distance_;
}
inline void OpenSpaceRoiDeciderConfig::set_perception_obstacle_filtering_distance(double value) {
  set_has_perception_obstacle_filtering_distance();
  perception_obstacle_filtering_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_filtering_distance)
}

// optional double perception_obstacle_buffer = 12;
inline bool OpenSpaceRoiDeciderConfig::has_perception_obstacle_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_perception_obstacle_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_perception_obstacle_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceRoiDeciderConfig::clear_perception_obstacle_buffer() {
  perception_obstacle_buffer_ = 0;
  clear_has_perception_obstacle_buffer();
}
inline double OpenSpaceRoiDeciderConfig::perception_obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_buffer)
  return perception_obstacle_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_perception_obstacle_buffer(double value) {
  set_has_perception_obstacle_buffer();
  perception_obstacle_buffer_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_buffer)
}

// optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
inline bool OpenSpaceRoiDeciderConfig::has_curb_heading_tangent_change_upper_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_curb_heading_tangent_change_upper_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_curb_heading_tangent_change_upper_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_curb_heading_tangent_change_upper_limit() {
  curb_heading_tangent_change_upper_limit_ = 1;
  clear_has_curb_heading_tangent_change_upper_limit();
}
inline double OpenSpaceRoiDeciderConfig::curb_heading_tangent_change_upper_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.curb_heading_tangent_change_upper_limit)
  return curb_heading_tangent_change_upper_limit_;
}
inline void OpenSpaceRoiDeciderConfig::set_curb_heading_tangent_change_upper_limit(double value) {
  set_has_curb_heading_tangent_change_upper_limit();
  curb_heading_tangent_change_upper_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.curb_heading_tangent_change_upper_limit)
}

// optional double end_pose_s_distance = 14 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_end_pose_s_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_end_pose_s_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_end_pose_s_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_end_pose_s_distance() {
  end_pose_s_distance_ = 10;
  clear_has_end_pose_s_distance();
}
inline double OpenSpaceRoiDeciderConfig::end_pose_s_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceRoiDeciderConfig.end_pose_s_distance)
  return end_pose_s_distance_;
}
inline void OpenSpaceRoiDeciderConfig::set_end_pose_s_distance(double value) {
  set_has_end_pose_s_distance();
  end_pose_s_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceRoiDeciderConfig.end_pose_s_distance)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace planning
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType>() {
  return ::jmc_auto::planning::OpenSpaceRoiDeciderConfig_RoiType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto__INCLUDED
