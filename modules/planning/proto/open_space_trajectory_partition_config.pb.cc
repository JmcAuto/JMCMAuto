// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_partition_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/planning/proto/open_space_trajectory_partition_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace planning {
class OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceTrajectoryPartitionConfig> {
} _OpenSpaceTrajectoryPartitionConfig_default_instance_;

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, gear_shift_max_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, gear_shift_unit_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, gear_shift_period_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, interpolated_pieces_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, initial_gear_check_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, heading_search_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, heading_track_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, distance_search_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, heading_offset_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, lateral_offset_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, longitudinal_offset_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, vehicle_box_iou_threshold_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSpaceTrajectoryPartitionConfig, linear_velocity_threshold_on_ego_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  12,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(OpenSpaceTrajectoryPartitionConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpenSpaceTrajectoryPartitionConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/planning/proto/open_space_trajectory_partition_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _OpenSpaceTrajectoryPartitionConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OpenSpaceTrajectoryPartitionConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nCmodules/planning/proto/open_space_traj"
      "ectory_partition_config.proto\022\021jmc_auto."
      "planning\"\202\004\n\"OpenSpaceTrajectoryPartitio"
      "nConfig\022\030\n\020gear_shift_max_t\030\001 \001(\001\022\031\n\021gea"
      "r_shift_unit_t\030\002 \001(\001\022\"\n\032gear_shift_perio"
      "d_duration\030\003 \001(\001\022\037\n\027interpolated_pieces_"
      "num\030\004 \001(\004\022\"\n\032initial_gear_check_horizon\030"
      "\005 \001(\004\022\034\n\024heading_search_range\030\006 \001(\001\022\033\n\023h"
      "eading_track_range\030\007 \001(\001\022$\n\025distance_sea"
      "rch_range\030\010 \001(\001:\0051e-06\022\"\n\032heading_offset"
      "_to_midpoint\030\t \001(\001\022\'\n\032lateral_offset_to_"
      "midpoint\030\n \001(\001:\0030.1\022,\n\037longitudinal_offs"
      "et_to_midpoint\030\013 \001(\001:\0030.1\0223\n%vehicle_box"
      "_iou_threshold_to_midpoint\030\014 \001(\001:\0040.95\022-"
      "\n linear_velocity_threshold_on_ego\030\r \001(\001"
      ":\0030.2"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/open_space_trajectory_partition_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceTrajectoryPartitionConfig::kGearShiftMaxTFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kGearShiftUnitTFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kGearShiftPeriodDurationFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kInterpolatedPiecesNumFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kInitialGearCheckHorizonFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kHeadingSearchRangeFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kHeadingTrackRangeFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kDistanceSearchRangeFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kHeadingOffsetToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kLateralOffsetToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kLongitudinalOffsetToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kVehicleBoxIouThresholdToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kLinearVelocityThresholdOnEgoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
}
OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_shift_max_t_, &from.gear_shift_max_t_,
    reinterpret_cast<char*>(&linear_velocity_threshold_on_ego_) -
    reinterpret_cast<char*>(&gear_shift_max_t_) + sizeof(linear_velocity_threshold_on_ego_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
}

void OpenSpaceTrajectoryPartitionConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gear_shift_max_t_, 0, reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
    reinterpret_cast<char*>(&gear_shift_max_t_) + sizeof(heading_offset_to_midpoint_));
  distance_search_range_ = 1e-06;
  lateral_offset_to_midpoint_ = 0.1;
  longitudinal_offset_to_midpoint_ = 0.1;
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  linear_velocity_threshold_on_ego_ = 0.2;
}

OpenSpaceTrajectoryPartitionConfig::~OpenSpaceTrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryPartitionConfig::SharedDtor() {
}

void OpenSpaceTrajectoryPartitionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSpaceTrajectoryPartitionConfig::descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceTrajectoryPartitionConfig& OpenSpaceTrajectoryPartitionConfig::default_instance() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpenSpaceTrajectoryPartitionConfig* OpenSpaceTrajectoryPartitionConfig::New(::google::protobuf::Arena* arena) const {
  OpenSpaceTrajectoryPartitionConfig* n = new OpenSpaceTrajectoryPartitionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenSpaceTrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&gear_shift_max_t_, 0, reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
      reinterpret_cast<char*>(&gear_shift_max_t_) + sizeof(heading_offset_to_midpoint_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    distance_search_range_ = 1e-06;
    lateral_offset_to_midpoint_ = 0.1;
    longitudinal_offset_to_midpoint_ = 0.1;
    vehicle_box_iou_threshold_to_midpoint_ = 0.95;
    linear_velocity_threshold_on_ego_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceTrajectoryPartitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double gear_shift_max_t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_gear_shift_max_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_max_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_unit_t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_gear_shift_unit_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_unit_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_period_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_gear_shift_period_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_period_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 interpolated_pieces_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_interpolated_pieces_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interpolated_pieces_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 initial_gear_check_horizon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_initial_gear_check_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initial_gear_check_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_search_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_heading_search_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_search_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_track_range = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_heading_track_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_track_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_search_range = 8 [default = 1e-06];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_distance_search_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_search_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_offset_to_midpoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_heading_offset_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_offset_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_lateral_offset_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_offset_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_longitudinal_offset_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_offset_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_vehicle_box_iou_threshold_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_box_iou_threshold_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_linear_velocity_threshold_on_ego();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_velocity_threshold_on_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  return false;
#undef DO_
}

void OpenSpaceTrajectoryPartitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gear_shift_max_t = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gear_shift_max_t(), output);
  }

  // optional double gear_shift_unit_t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gear_shift_unit_t(), output);
  }

  // optional double gear_shift_period_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gear_shift_period_duration(), output);
  }

  // optional uint64 interpolated_pieces_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->interpolated_pieces_num(), output);
  }

  // optional uint64 initial_gear_check_horizon = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->initial_gear_check_horizon(), output);
  }

  // optional double heading_search_range = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading_search_range(), output);
  }

  // optional double heading_track_range = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->heading_track_range(), output);
  }

  // optional double distance_search_range = 8 [default = 1e-06];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_search_range(), output);
  }

  // optional double heading_offset_to_midpoint = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heading_offset_to_midpoint(), output);
  }

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lateral_offset_to_midpoint(), output);
  }

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitudinal_offset_to_midpoint(), output);
  }

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vehicle_box_iou_threshold_to_midpoint(), output);
  }

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->linear_velocity_threshold_on_ego(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
}

::google::protobuf::uint8* OpenSpaceTrajectoryPartitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gear_shift_max_t = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gear_shift_unit_t(), target);
  }

  // optional double gear_shift_period_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gear_shift_period_duration(), target);
  }

  // optional uint64 interpolated_pieces_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->initial_gear_check_horizon(), target);
  }

  // optional double heading_search_range = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading_search_range(), target);
  }

  // optional double heading_track_range = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->heading_track_range(), target);
  }

  // optional double distance_search_range = 8 [default = 1e-06];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance_search_range(), target);
  }

  // optional double heading_offset_to_midpoint = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->heading_offset_to_midpoint(), target);
  }

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lateral_offset_to_midpoint(), target);
  }

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longitudinal_offset_to_midpoint(), target);
  }

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vehicle_box_iou_threshold_to_midpoint(), target);
  }

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->linear_velocity_threshold_on_ego(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  return target;
}

size_t OpenSpaceTrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double gear_shift_max_t = 1;
    if (has_gear_shift_max_t()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 2;
    if (has_gear_shift_unit_t()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 3;
    if (has_gear_shift_period_duration()) {
      total_size += 1 + 8;
    }

    // optional uint64 interpolated_pieces_num = 4;
    if (has_interpolated_pieces_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 5;
    if (has_initial_gear_check_horizon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initial_gear_check_horizon());
    }

    // optional double heading_search_range = 6;
    if (has_heading_search_range()) {
      total_size += 1 + 8;
    }

    // optional double heading_track_range = 7;
    if (has_heading_track_range()) {
      total_size += 1 + 8;
    }

    // optional double heading_offset_to_midpoint = 9;
    if (has_heading_offset_to_midpoint()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double distance_search_range = 8 [default = 1e-06];
    if (has_distance_search_range()) {
      total_size += 1 + 8;
    }

    // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
    if (has_lateral_offset_to_midpoint()) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
    if (has_longitudinal_offset_to_midpoint()) {
      total_size += 1 + 8;
    }

    // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
    if (has_vehicle_box_iou_threshold_to_midpoint()) {
      total_size += 1 + 8;
    }

    // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
    if (has_linear_velocity_threshold_on_ego()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryPartitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceTrajectoryPartitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_search_range_ = from.heading_search_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_track_range_ = from.heading_track_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_offset_to_midpoint_ = from.heading_offset_to_midpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      distance_search_range_ = from.distance_search_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_offset_to_midpoint_ = from.lateral_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitudinal_offset_to_midpoint_ = from.longitudinal_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_box_iou_threshold_to_midpoint_ = from.vehicle_box_iou_threshold_to_midpoint_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_velocity_threshold_on_ego_ = from.linear_velocity_threshold_on_ego_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryPartitionConfig::Swap(OpenSpaceTrajectoryPartitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceTrajectoryPartitionConfig::InternalSwap(OpenSpaceTrajectoryPartitionConfig* other) {
  std::swap(gear_shift_max_t_, other->gear_shift_max_t_);
  std::swap(gear_shift_unit_t_, other->gear_shift_unit_t_);
  std::swap(gear_shift_period_duration_, other->gear_shift_period_duration_);
  std::swap(interpolated_pieces_num_, other->interpolated_pieces_num_);
  std::swap(initial_gear_check_horizon_, other->initial_gear_check_horizon_);
  std::swap(heading_search_range_, other->heading_search_range_);
  std::swap(heading_track_range_, other->heading_track_range_);
  std::swap(heading_offset_to_midpoint_, other->heading_offset_to_midpoint_);
  std::swap(distance_search_range_, other->distance_search_range_);
  std::swap(lateral_offset_to_midpoint_, other->lateral_offset_to_midpoint_);
  std::swap(longitudinal_offset_to_midpoint_, other->longitudinal_offset_to_midpoint_);
  std::swap(vehicle_box_iou_threshold_to_midpoint_, other->vehicle_box_iou_threshold_to_midpoint_);
  std::swap(linear_velocity_threshold_on_ego_, other->linear_velocity_threshold_on_ego_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenSpaceTrajectoryPartitionConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenSpaceTrajectoryPartitionConfig

// optional double gear_shift_max_t = 1;
bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_max_t() {
  _has_bits_[0] |= 0x00000001u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_max_t() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 0;
  clear_has_gear_shift_max_t();
}
double OpenSpaceTrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
  return gear_shift_max_t_;
}
void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  set_has_gear_shift_max_t();
  gear_shift_max_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 2;
bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_unit_t() {
  _has_bits_[0] |= 0x00000002u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_unit_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0;
  clear_has_gear_shift_unit_t();
}
double OpenSpaceTrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
  return gear_shift_unit_t_;
}
void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  set_has_gear_shift_unit_t();
  gear_shift_unit_t_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
}

// optional double gear_shift_period_duration = 3;
bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_period_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_period_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 0;
  clear_has_gear_shift_period_duration();
}
double OpenSpaceTrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
  return gear_shift_period_duration_;
}
void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  set_has_gear_shift_period_duration();
  gear_shift_period_duration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional uint64 interpolated_pieces_num = 4;
bool OpenSpaceTrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_interpolated_pieces_num() {
  _has_bits_[0] |= 0x00000008u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_interpolated_pieces_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(0);
  clear_has_interpolated_pieces_num();
}
::google::protobuf::uint64 OpenSpaceTrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
  return interpolated_pieces_num_;
}
void OpenSpaceTrajectoryPartitionConfig::set_interpolated_pieces_num(::google::protobuf::uint64 value) {
  set_has_interpolated_pieces_num();
  interpolated_pieces_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 5;
bool OpenSpaceTrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_initial_gear_check_horizon() {
  _has_bits_[0] |= 0x00000010u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_initial_gear_check_horizon() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(0);
  clear_has_initial_gear_check_horizon();
}
::google::protobuf::uint64 OpenSpaceTrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
  return initial_gear_check_horizon_;
}
void OpenSpaceTrajectoryPartitionConfig::set_initial_gear_check_horizon(::google::protobuf::uint64 value) {
  set_has_initial_gear_check_horizon();
  initial_gear_check_horizon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_search_range = 6;
bool OpenSpaceTrajectoryPartitionConfig::has_heading_search_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_heading_search_range() {
  _has_bits_[0] |= 0x00000020u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_search_range() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_heading_search_range() {
  heading_search_range_ = 0;
  clear_has_heading_search_range();
}
double OpenSpaceTrajectoryPartitionConfig::heading_search_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
  return heading_search_range_;
}
void OpenSpaceTrajectoryPartitionConfig::set_heading_search_range(double value) {
  set_has_heading_search_range();
  heading_search_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
}

// optional double heading_track_range = 7;
bool OpenSpaceTrajectoryPartitionConfig::has_heading_track_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_heading_track_range() {
  _has_bits_[0] |= 0x00000040u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_track_range() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_heading_track_range() {
  heading_track_range_ = 0;
  clear_has_heading_track_range();
}
double OpenSpaceTrajectoryPartitionConfig::heading_track_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
  return heading_track_range_;
}
void OpenSpaceTrajectoryPartitionConfig::set_heading_track_range(double value) {
  set_has_heading_track_range();
  heading_track_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
}

// optional double distance_search_range = 8 [default = 1e-06];
bool OpenSpaceTrajectoryPartitionConfig::has_distance_search_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_distance_search_range() {
  _has_bits_[0] |= 0x00000100u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_distance_search_range() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_distance_search_range() {
  distance_search_range_ = 1e-06;
  clear_has_distance_search_range();
}
double OpenSpaceTrajectoryPartitionConfig::distance_search_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
  return distance_search_range_;
}
void OpenSpaceTrajectoryPartitionConfig::set_distance_search_range(double value) {
  set_has_distance_search_range();
  distance_search_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
}

// optional double heading_offset_to_midpoint = 9;
bool OpenSpaceTrajectoryPartitionConfig::has_heading_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_heading_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000080u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_heading_offset_to_midpoint() {
  heading_offset_to_midpoint_ = 0;
  clear_has_heading_offset_to_midpoint();
}
double OpenSpaceTrajectoryPartitionConfig::heading_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
  return heading_offset_to_midpoint_;
}
void OpenSpaceTrajectoryPartitionConfig::set_heading_offset_to_midpoint(double value) {
  set_has_heading_offset_to_midpoint();
  heading_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
}

// optional double lateral_offset_to_midpoint = 10 [default = 0.1];
bool OpenSpaceTrajectoryPartitionConfig::has_lateral_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_lateral_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000200u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_lateral_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_lateral_offset_to_midpoint() {
  lateral_offset_to_midpoint_ = 0.1;
  clear_has_lateral_offset_to_midpoint();
}
double OpenSpaceTrajectoryPartitionConfig::lateral_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
  return lateral_offset_to_midpoint_;
}
void OpenSpaceTrajectoryPartitionConfig::set_lateral_offset_to_midpoint(double value) {
  set_has_lateral_offset_to_midpoint();
  lateral_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
}

// optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
bool OpenSpaceTrajectoryPartitionConfig::has_longitudinal_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_longitudinal_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000400u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_longitudinal_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000400u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_longitudinal_offset_to_midpoint() {
  longitudinal_offset_to_midpoint_ = 0.1;
  clear_has_longitudinal_offset_to_midpoint();
}
double OpenSpaceTrajectoryPartitionConfig::longitudinal_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
  return longitudinal_offset_to_midpoint_;
}
void OpenSpaceTrajectoryPartitionConfig::set_longitudinal_offset_to_midpoint(double value) {
  set_has_longitudinal_offset_to_midpoint();
  longitudinal_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
}

// optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
bool OpenSpaceTrajectoryPartitionConfig::has_vehicle_box_iou_threshold_to_midpoint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_vehicle_box_iou_threshold_to_midpoint() {
  _has_bits_[0] |= 0x00000800u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_vehicle_box_iou_threshold_to_midpoint() {
  _has_bits_[0] &= ~0x00000800u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_vehicle_box_iou_threshold_to_midpoint() {
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  clear_has_vehicle_box_iou_threshold_to_midpoint();
}
double OpenSpaceTrajectoryPartitionConfig::vehicle_box_iou_threshold_to_midpoint() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
  return vehicle_box_iou_threshold_to_midpoint_;
}
void OpenSpaceTrajectoryPartitionConfig::set_vehicle_box_iou_threshold_to_midpoint(double value) {
  set_has_vehicle_box_iou_threshold_to_midpoint();
  vehicle_box_iou_threshold_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
}

// optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
bool OpenSpaceTrajectoryPartitionConfig::has_linear_velocity_threshold_on_ego() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OpenSpaceTrajectoryPartitionConfig::set_has_linear_velocity_threshold_on_ego() {
  _has_bits_[0] |= 0x00001000u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_has_linear_velocity_threshold_on_ego() {
  _has_bits_[0] &= ~0x00001000u;
}
void OpenSpaceTrajectoryPartitionConfig::clear_linear_velocity_threshold_on_ego() {
  linear_velocity_threshold_on_ego_ = 0.2;
  clear_has_linear_velocity_threshold_on_ego();
}
double OpenSpaceTrajectoryPartitionConfig::linear_velocity_threshold_on_ego() const {
  // @@protoc_insertion_point(field_get:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.linear_velocity_threshold_on_ego)
  return linear_velocity_threshold_on_ego_;
}
void OpenSpaceTrajectoryPartitionConfig::set_linear_velocity_threshold_on_ego(double value) {
  set_has_linear_velocity_threshold_on_ego();
  linear_velocity_threshold_on_ego_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.planning.OpenSpaceTrajectoryPartitionConfig.linear_velocity_threshold_on_ego)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
