// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/routing/proto/routing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace routing {
class LaneWaypointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneWaypoint> {
} _LaneWaypoint_default_instance_;
class LaneSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneSegment> {
} _LaneSegment_default_instance_;
class ParkingInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ParkingInfo> {
} _ParkingInfo_default_instance_;
class RoutingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoutingRequest> {
} _RoutingRequest_default_instance_;
class MeasurementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Measurement> {
} _Measurement_default_instance_;
class PassageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Passage> {
} _Passage_default_instance_;
class RoadSegmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoadSegment> {
} _RoadSegment_default_instance_;
class RoutingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoutingResponse> {
} _RoutingResponse_default_instance_;

namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneWaypoint, pose_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSegment, end_s_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingInfo, parking_space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParkingInfo, parking_point_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, waypoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, blacklisted_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, blacklisted_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, broadcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, parking_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingRequest, parking_info_),
  0,
  ~0u,
  ~0u,
  ~0u,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, can_exit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, change_lane_type_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSegment, passage_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, measurement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, routing_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, map_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingResponse, status_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(LaneWaypoint)},
  { 11, 19, sizeof(LaneSegment)},
  { 22, 29, sizeof(ParkingInfo)},
  { 31, 43, sizeof(RoutingRequest)},
  { 50, 56, sizeof(Measurement)},
  { 57, 65, sizeof(Passage)},
  { 68, 75, sizeof(RoadSegment)},
  { 77, 88, sizeof(RoutingResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneWaypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParkingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoutingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Measurement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Passage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoadSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoutingResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/routing/proto/routing.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _LaneWaypoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LaneSegment_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ParkingInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RoutingRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Measurement_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Passage_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RoadSegment_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RoutingResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::InitDefaults();
  _LaneWaypoint_default_instance_.DefaultConstruct();
  _LaneSegment_default_instance_.DefaultConstruct();
  _ParkingInfo_default_instance_.DefaultConstruct();
  _RoutingRequest_default_instance_.DefaultConstruct();
  _Measurement_default_instance_.DefaultConstruct();
  _Passage_default_instance_.DefaultConstruct();
  _RoadSegment_default_instance_.DefaultConstruct();
  _RoutingResponse_default_instance_.DefaultConstruct();
  _LaneWaypoint_default_instance_.get_mutable()->pose_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _ParkingInfo_default_instance_.get_mutable()->parking_point_ = const_cast< ::jmc_auto::common::PointENU*>(
      ::jmc_auto::common::PointENU::internal_default_instance());
  _RoutingRequest_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _RoutingRequest_default_instance_.get_mutable()->parking_space_ = const_cast< ::jmc_auto::hdmap::ParkingSpace*>(
      ::jmc_auto::hdmap::ParkingSpace::internal_default_instance());
  _RoutingRequest_default_instance_.get_mutable()->parking_info_ = const_cast< ::jmc_auto::routing::ParkingInfo*>(
      ::jmc_auto::routing::ParkingInfo::internal_default_instance());
  _RoutingResponse_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _RoutingResponse_default_instance_.get_mutable()->measurement_ = const_cast< ::jmc_auto::routing::Measurement*>(
      ::jmc_auto::routing::Measurement::internal_default_instance());
  _RoutingResponse_default_instance_.get_mutable()->routing_request_ = const_cast< ::jmc_auto::routing::RoutingRequest*>(
      ::jmc_auto::routing::RoutingRequest::internal_default_instance());
  _RoutingResponse_default_instance_.get_mutable()->status_ = const_cast< ::jmc_auto::common::StatusPb*>(
      ::jmc_auto::common::StatusPb::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n#modules/routing/proto/routing.proto\022\020j"
      "mc_auto.routing\032!modules/common/proto/he"
      "ader.proto\032#modules/common/proto/geometr"
      "y.proto\032%modules/common/proto/error_code"
      ".proto\032)modules/map/proto/map_parking_sp"
      "ace.proto\"N\n\014LaneWaypoint\022\n\n\002id\030\001 \001(\t\022\t\n"
      "\001s\030\002 \001(\001\022\'\n\004pose\030\003 \001(\0132\031.jmc_auto.common"
      ".PointENU\"9\n\013LaneSegment\022\n\n\002id\030\001 \001(\t\022\017\n\007"
      "start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\"Y\n\013ParkingI"
      "nfo\022\030\n\020parking_space_id\030\001 \001(\t\0220\n\rparking"
      "_point\030\002 \001(\0132\031.jmc_auto.common.PointENU\""
      "\305\002\n\016RoutingRequest\022\'\n\006header\030\001 \001(\0132\027.jmc"
      "_auto.common.Header\0220\n\010waypoint\030\002 \003(\0132\036."
      "jmc_auto.routing.LaneWaypoint\0227\n\020blackli"
      "sted_lane\030\003 \003(\0132\035.jmc_auto.routing.LaneS"
      "egment\022\030\n\020blacklisted_road\030\004 \003(\t\022\027\n\tbroa"
      "dcast\030\005 \001(\010:\004true\0227\n\rparking_space\030\006 \001(\013"
      "2\034.jmc_auto.hdmap.ParkingSpaceB\002\030\001\0223\n\014pa"
      "rking_info\030\007 \001(\0132\035.jmc_auto.routing.Park"
      "ingInfo\"\037\n\013Measurement\022\020\n\010distance\030\001 \001(\001"
      "\"\220\001\n\007Passage\022.\n\007segment\030\001 \003(\0132\035.jmc_auto"
      ".routing.LaneSegment\022\020\n\010can_exit\030\002 \001(\010\022C"
      "\n\020change_lane_type\030\003 \001(\0162 .jmc_auto.rout"
      "ing.ChangeLaneType:\007FORWARD\"E\n\013RoadSegme"
      "nt\022\n\n\002id\030\001 \001(\t\022*\n\007passage\030\002 \003(\0132\031.jmc_au"
      "to.routing.Passage\"\226\002\n\017RoutingResponse\022\'"
      "\n\006header\030\001 \001(\0132\027.jmc_auto.common.Header\022"
      "+\n\004road\030\002 \003(\0132\035.jmc_auto.routing.RoadSeg"
      "ment\0222\n\013measurement\030\003 \001(\0132\035.jmc_auto.rou"
      "ting.Measurement\0229\n\017routing_request\030\004 \001("
      "\0132 .jmc_auto.routing.RoutingRequest\022\023\n\013m"
      "ap_version\030\005 \001(\014\022)\n\006status\030\006 \001(\0132\031.jmc_a"
      "uto.common.StatusPb*2\n\016ChangeLaneType\022\013\n"
      "\007FORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/routing/proto/routing.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto

const ::google::protobuf::EnumDescriptor* ChangeLaneType_descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_enum_descriptors[0];
}
bool ChangeLaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneWaypoint::kIdFieldNumber;
const int LaneWaypoint::kSFieldNumber;
const int LaneWaypoint::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneWaypoint::LaneWaypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.LaneWaypoint)
}
LaneWaypoint::LaneWaypoint(const LaneWaypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pose()) {
    pose_ = new ::jmc_auto::common::PointENU(*from.pose_);
  } else {
    pose_ = NULL;
  }
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.LaneWaypoint)
}

void LaneWaypoint::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&pose_) + sizeof(s_));
}

LaneWaypoint::~LaneWaypoint() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.LaneWaypoint)
  SharedDtor();
}

void LaneWaypoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete pose_;
  }
}

void LaneWaypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneWaypoint::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneWaypoint& LaneWaypoint::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneWaypoint* LaneWaypoint::New(::google::protobuf::Arena* arena) const {
  LaneWaypoint* n = new LaneWaypoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.LaneWaypoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::jmc_auto::common::PointENU::Clear();
    }
  }
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneWaypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.LaneWaypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.routing.LaneWaypoint.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.LaneWaypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.LaneWaypoint)
  return false;
#undef DO_
}

void LaneWaypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.LaneWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.LaneWaypoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // optional .jmc_auto.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.LaneWaypoint)
}

::google::protobuf::uint8* LaneWaypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.LaneWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.LaneWaypoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // optional .jmc_auto.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.LaneWaypoint)
  return target;
}

size_t LaneWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.LaneWaypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .jmc_auto.common.PointENU pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneWaypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneWaypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneWaypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.LaneWaypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.LaneWaypoint)
    MergeFrom(*source);
  }
}

void LaneWaypoint::MergeFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::jmc_auto::common::PointENU::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneWaypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneWaypoint::CopyFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWaypoint::IsInitialized() const {
  return true;
}

void LaneWaypoint::Swap(LaneWaypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneWaypoint::InternalSwap(LaneWaypoint* other) {
  id_.Swap(&other->id_);
  std::swap(pose_, other->pose_);
  std::swap(s_, other->s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneWaypoint::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneWaypoint

// optional string id = 1;
bool LaneWaypoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneWaypoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneWaypoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneWaypoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& LaneWaypoint::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.LaneWaypoint.id)
  return id_.GetNoArena();
}
void LaneWaypoint::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.routing.LaneWaypoint.id)
}
#if LANG_CXX11
void LaneWaypoint::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.routing.LaneWaypoint.id)
}
#endif
void LaneWaypoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.routing.LaneWaypoint.id)
}
void LaneWaypoint::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.routing.LaneWaypoint.id)
}
::std::string* LaneWaypoint::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.LaneWaypoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaneWaypoint::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.LaneWaypoint.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaneWaypoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.LaneWaypoint.id)
}

// optional double s = 2;
bool LaneWaypoint::has_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneWaypoint::set_has_s() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneWaypoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneWaypoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double LaneWaypoint::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.LaneWaypoint.s)
  return s_;
}
void LaneWaypoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.LaneWaypoint.s)
}

// optional .jmc_auto.common.PointENU pose = 3;
bool LaneWaypoint::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneWaypoint::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneWaypoint::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneWaypoint::clear_pose() {
  if (pose_ != NULL) pose_->::jmc_auto::common::PointENU::Clear();
  clear_has_pose();
}
const ::jmc_auto::common::PointENU& LaneWaypoint::pose() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.LaneWaypoint.pose)
  return pose_ != NULL ? *pose_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* LaneWaypoint::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.LaneWaypoint.pose)
  return pose_;
}
::jmc_auto::common::PointENU* LaneWaypoint::release_pose() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.LaneWaypoint.pose)
  clear_has_pose();
  ::jmc_auto::common::PointENU* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LaneWaypoint::set_allocated_pose(::jmc_auto::common::PointENU* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.LaneWaypoint.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSegment::kIdFieldNumber;
const int LaneSegment::kStartSFieldNumber;
const int LaneSegment::kEndSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSegment::LaneSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.LaneSegment)
}

void LaneSegment::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&start_s_) + sizeof(end_s_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSegment::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSegment& LaneSegment::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneSegment* LaneSegment::New(::google::protobuf::Arena* arena) const {
  LaneSegment* n = new LaneSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.LaneSegment)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&start_s_, 0, reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&start_s_) + sizeof(end_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.LaneSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.routing.LaneSegment.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.LaneSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.LaneSegment)
  return false;
#undef DO_
}

void LaneSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.LaneSegment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.LaneSegment)
}

::google::protobuf::uint8* LaneSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.LaneSegment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.LaneSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_s = 2;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.LaneSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::Swap(LaneSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSegment::InternalSwap(LaneSegment* other) {
  id_.Swap(&other->id_);
  std::swap(start_s_, other->start_s_);
  std::swap(end_s_, other->end_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSegment::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSegment

// optional string id = 1;
bool LaneSegment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSegment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSegment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSegment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& LaneSegment::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.LaneSegment.id)
  return id_.GetNoArena();
}
void LaneSegment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.routing.LaneSegment.id)
}
#if LANG_CXX11
void LaneSegment::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.routing.LaneSegment.id)
}
#endif
void LaneSegment::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.routing.LaneSegment.id)
}
void LaneSegment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.routing.LaneSegment.id)
}
::std::string* LaneSegment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.LaneSegment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaneSegment::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.LaneSegment.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaneSegment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.LaneSegment.id)
}

// optional double start_s = 2;
bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.LaneSegment.start_s)
  return start_s_;
}
void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.LaneSegment.start_s)
}

// optional double end_s = 3;
bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.LaneSegment.end_s)
  return end_s_;
}
void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.LaneSegment.end_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingInfo::kParkingSpaceIdFieldNumber;
const int ParkingInfo::kParkingPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingInfo::ParkingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.ParkingInfo)
}
ParkingInfo::ParkingInfo(const ParkingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parking_space_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parking_space_id()) {
    parking_space_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parking_space_id_);
  }
  if (from.has_parking_point()) {
    parking_point_ = new ::jmc_auto::common::PointENU(*from.parking_point_);
  } else {
    parking_point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.ParkingInfo)
}

void ParkingInfo::SharedCtor() {
  _cached_size_ = 0;
  parking_space_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parking_point_ = NULL;
}

ParkingInfo::~ParkingInfo() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.ParkingInfo)
  SharedDtor();
}

void ParkingInfo::SharedDtor() {
  parking_space_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete parking_point_;
  }
}

void ParkingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingInfo::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingInfo& ParkingInfo::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParkingInfo* ParkingInfo::New(::google::protobuf::Arena* arena) const {
  ParkingInfo* n = new ParkingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.ParkingInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_parking_space_id()) {
      GOOGLE_DCHECK(!parking_space_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parking_space_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_parking_point()) {
      GOOGLE_DCHECK(parking_point_ != NULL);
      parking_point_->::jmc_auto::common::PointENU::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.ParkingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parking_space_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parking_space_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parking_space_id().data(), this->parking_space_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.routing.ParkingInfo.parking_space_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointENU parking_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.ParkingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.ParkingInfo)
  return false;
#undef DO_
}

void ParkingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.ParkingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string parking_space_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space_id().data(), this->parking_space_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.ParkingInfo.parking_space_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parking_space_id(), output);
  }

  // optional .jmc_auto.common.PointENU parking_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->parking_point_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.ParkingInfo)
}

::google::protobuf::uint8* ParkingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.ParkingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string parking_space_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space_id().data(), this->parking_space_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.ParkingInfo.parking_space_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parking_space_id(), target);
  }

  // optional .jmc_auto.common.PointENU parking_point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->parking_point_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.ParkingInfo)
  return target;
}

size_t ParkingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.ParkingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string parking_space_id = 1;
    if (has_parking_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parking_space_id());
    }

    // optional .jmc_auto.common.PointENU parking_point = 2;
    if (has_parking_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parking_point_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.ParkingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.ParkingInfo)
    MergeFrom(*source);
  }
}

void ParkingInfo::MergeFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_parking_space_id();
      parking_space_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parking_space_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_parking_point()->::jmc_auto::common::PointENU::MergeFrom(from.parking_point());
    }
  }
}

void ParkingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingInfo::CopyFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingInfo::IsInitialized() const {
  return true;
}

void ParkingInfo::Swap(ParkingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingInfo::InternalSwap(ParkingInfo* other) {
  parking_space_id_.Swap(&other->parking_space_id_);
  std::swap(parking_point_, other->parking_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingInfo::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParkingInfo

// optional string parking_space_id = 1;
bool ParkingInfo::has_parking_space_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParkingInfo::set_has_parking_space_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ParkingInfo::clear_has_parking_space_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParkingInfo::clear_parking_space_id() {
  parking_space_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parking_space_id();
}
const ::std::string& ParkingInfo::parking_space_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.ParkingInfo.parking_space_id)
  return parking_space_id_.GetNoArena();
}
void ParkingInfo::set_parking_space_id(const ::std::string& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.routing.ParkingInfo.parking_space_id)
}
#if LANG_CXX11
void ParkingInfo::set_parking_space_id(::std::string&& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.routing.ParkingInfo.parking_space_id)
}
#endif
void ParkingInfo::set_parking_space_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.routing.ParkingInfo.parking_space_id)
}
void ParkingInfo::set_parking_space_id(const char* value, size_t size) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.routing.ParkingInfo.parking_space_id)
}
::std::string* ParkingInfo::mutable_parking_space_id() {
  set_has_parking_space_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.ParkingInfo.parking_space_id)
  return parking_space_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParkingInfo::release_parking_space_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.ParkingInfo.parking_space_id)
  clear_has_parking_space_id();
  return parking_space_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParkingInfo::set_allocated_parking_space_id(::std::string* parking_space_id) {
  if (parking_space_id != NULL) {
    set_has_parking_space_id();
  } else {
    clear_has_parking_space_id();
  }
  parking_space_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parking_space_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.ParkingInfo.parking_space_id)
}

// optional .jmc_auto.common.PointENU parking_point = 2;
bool ParkingInfo::has_parking_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParkingInfo::set_has_parking_point() {
  _has_bits_[0] |= 0x00000002u;
}
void ParkingInfo::clear_has_parking_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParkingInfo::clear_parking_point() {
  if (parking_point_ != NULL) parking_point_->::jmc_auto::common::PointENU::Clear();
  clear_has_parking_point();
}
const ::jmc_auto::common::PointENU& ParkingInfo::parking_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.ParkingInfo.parking_point)
  return parking_point_ != NULL ? *parking_point_
                         : *::jmc_auto::common::PointENU::internal_default_instance();
}
::jmc_auto::common::PointENU* ParkingInfo::mutable_parking_point() {
  set_has_parking_point();
  if (parking_point_ == NULL) {
    parking_point_ = new ::jmc_auto::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.ParkingInfo.parking_point)
  return parking_point_;
}
::jmc_auto::common::PointENU* ParkingInfo::release_parking_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.ParkingInfo.parking_point)
  clear_has_parking_point();
  ::jmc_auto::common::PointENU* temp = parking_point_;
  parking_point_ = NULL;
  return temp;
}
void ParkingInfo::set_allocated_parking_point(::jmc_auto::common::PointENU* parking_point) {
  delete parking_point_;
  parking_point_ = parking_point;
  if (parking_point) {
    set_has_parking_point();
  } else {
    clear_has_parking_point();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.ParkingInfo.parking_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingRequest::kHeaderFieldNumber;
const int RoutingRequest::kWaypointFieldNumber;
const int RoutingRequest::kBlacklistedLaneFieldNumber;
const int RoutingRequest::kBlacklistedRoadFieldNumber;
const int RoutingRequest::kBroadcastFieldNumber;
const int RoutingRequest::kParkingSpaceFieldNumber;
const int RoutingRequest::kParkingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingRequest::RoutingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.RoutingRequest)
}
RoutingRequest::RoutingRequest(const RoutingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      waypoint_(from.waypoint_),
      blacklisted_lane_(from.blacklisted_lane_),
      blacklisted_road_(from.blacklisted_road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_parking_space()) {
    parking_space_ = new ::jmc_auto::hdmap::ParkingSpace(*from.parking_space_);
  } else {
    parking_space_ = NULL;
  }
  if (from.has_parking_info()) {
    parking_info_ = new ::jmc_auto::routing::ParkingInfo(*from.parking_info_);
  } else {
    parking_info_ = NULL;
  }
  broadcast_ = from.broadcast_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.RoutingRequest)
}

void RoutingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&parking_info_) -
    reinterpret_cast<char*>(&header_) + sizeof(parking_info_));
  broadcast_ = true;
}

RoutingRequest::~RoutingRequest() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.RoutingRequest)
  SharedDtor();
}

void RoutingRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete parking_space_;
  }
  if (this != internal_default_instance()) {
    delete parking_info_;
  }
}

void RoutingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingRequest::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingRequest& RoutingRequest::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoutingRequest* RoutingRequest::New(::google::protobuf::Arena* arena) const {
  RoutingRequest* n = new RoutingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.RoutingRequest)
  waypoint_.Clear();
  blacklisted_lane_.Clear();
  blacklisted_road_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_parking_space()) {
      GOOGLE_DCHECK(parking_space_ != NULL);
      parking_space_->::jmc_auto::hdmap::ParkingSpace::Clear();
    }
    if (has_parking_info()) {
      GOOGLE_DCHECK(parking_info_ != NULL);
      parking_info_->::jmc_auto::routing::ParkingInfo::Clear();
    }
    broadcast_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.RoutingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.routing.LaneWaypoint waypoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.routing.LaneSegment blacklisted_lane = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklisted_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string blacklisted_road = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklisted_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blacklisted_road(this->blacklisted_road_size() - 1).data(),
            this->blacklisted_road(this->blacklisted_road_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.routing.RoutingRequest.blacklisted_road");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.ParkingInfo parking_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parking_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.RoutingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.RoutingRequest)
  return false;
#undef DO_
}

void RoutingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.RoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .jmc_auto.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0, n = this->waypoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waypoint(i), output);
  }

  // repeated .jmc_auto.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0, n = this->blacklisted_lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blacklisted_lane(i), output);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->blacklisted_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklisted_road(i).data(), this->blacklisted_road(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.RoutingRequest.blacklisted_road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->blacklisted_road(i), output);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->broadcast(), output);
  }

  // optional .jmc_auto.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->parking_space_, output);
  }

  // optional .jmc_auto.routing.ParkingInfo parking_info = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->parking_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.RoutingRequest)
}

::google::protobuf::uint8* RoutingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.RoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .jmc_auto.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0, n = this->waypoint_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->waypoint(i), deterministic, target);
  }

  // repeated .jmc_auto.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0, n = this->blacklisted_lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->blacklisted_lane(i), deterministic, target);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->blacklisted_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklisted_road(i).data(), this->blacklisted_road(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.RoutingRequest.blacklisted_road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->blacklisted_road(i), target);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->broadcast(), target);
  }

  // optional .jmc_auto.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->parking_space_, deterministic, target);
  }

  // optional .jmc_auto.routing.ParkingInfo parking_info = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->parking_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.RoutingRequest)
  return target;
}

size_t RoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.RoutingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.routing.LaneWaypoint waypoint = 2;
  {
    unsigned int count = this->waypoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waypoint(i));
    }
  }

  // repeated .jmc_auto.routing.LaneSegment blacklisted_lane = 3;
  {
    unsigned int count = this->blacklisted_lane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blacklisted_lane(i));
    }
  }

  // repeated string blacklisted_road = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->blacklisted_road_size());
  for (int i = 0, n = this->blacklisted_road_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklisted_road(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
    if (has_parking_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parking_space_);
    }

    // optional .jmc_auto.routing.ParkingInfo parking_info = 7;
    if (has_parking_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parking_info_);
    }

    // optional bool broadcast = 5 [default = true];
    if (has_broadcast()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.RoutingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.RoutingRequest)
    MergeFrom(*source);
  }
}

void RoutingRequest::MergeFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
  blacklisted_lane_.MergeFrom(from.blacklisted_lane_);
  blacklisted_road_.MergeFrom(from.blacklisted_road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_parking_space()->::jmc_auto::hdmap::ParkingSpace::MergeFrom(from.parking_space());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_parking_info()->::jmc_auto::routing::ParkingInfo::MergeFrom(from.parking_info());
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRequest::CopyFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRequest::IsInitialized() const {
  return true;
}

void RoutingRequest::Swap(RoutingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingRequest::InternalSwap(RoutingRequest* other) {
  waypoint_.InternalSwap(&other->waypoint_);
  blacklisted_lane_.InternalSwap(&other->blacklisted_lane_);
  blacklisted_road_.InternalSwap(&other->blacklisted_road_);
  std::swap(header_, other->header_);
  std::swap(parking_space_, other->parking_space_);
  std::swap(parking_info_, other->parking_info_);
  std::swap(broadcast_, other->broadcast_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingRequest::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingRequest

// optional .jmc_auto.common.Header header = 1;
bool RoutingRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutingRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutingRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingRequest::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& RoutingRequest::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* RoutingRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingRequest.header)
  return header_;
}
::jmc_auto::common::Header* RoutingRequest::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingRequest.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RoutingRequest::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingRequest.header)
}

// repeated .jmc_auto.routing.LaneWaypoint waypoint = 2;
int RoutingRequest::waypoint_size() const {
  return waypoint_.size();
}
void RoutingRequest::clear_waypoint() {
  waypoint_.Clear();
}
const ::jmc_auto::routing::LaneWaypoint& RoutingRequest::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.waypoint)
  return waypoint_.Get(index);
}
::jmc_auto::routing::LaneWaypoint* RoutingRequest::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingRequest.waypoint)
  return waypoint_.Mutable(index);
}
::jmc_auto::routing::LaneWaypoint* RoutingRequest::add_waypoint() {
  // @@protoc_insertion_point(field_add:jmc_auto.routing.RoutingRequest.waypoint)
  return waypoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneWaypoint >*
RoutingRequest::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.routing.RoutingRequest.waypoint)
  return &waypoint_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneWaypoint >&
RoutingRequest::waypoint() const {
  // @@protoc_insertion_point(field_list:jmc_auto.routing.RoutingRequest.waypoint)
  return waypoint_;
}

// repeated .jmc_auto.routing.LaneSegment blacklisted_lane = 3;
int RoutingRequest::blacklisted_lane_size() const {
  return blacklisted_lane_.size();
}
void RoutingRequest::clear_blacklisted_lane() {
  blacklisted_lane_.Clear();
}
const ::jmc_auto::routing::LaneSegment& RoutingRequest::blacklisted_lane(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Get(index);
}
::jmc_auto::routing::LaneSegment* RoutingRequest::mutable_blacklisted_lane(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Mutable(index);
}
::jmc_auto::routing::LaneSegment* RoutingRequest::add_blacklisted_lane() {
  // @@protoc_insertion_point(field_add:jmc_auto.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >*
RoutingRequest::mutable_blacklisted_lane() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.routing.RoutingRequest.blacklisted_lane)
  return &blacklisted_lane_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >&
RoutingRequest::blacklisted_lane() const {
  // @@protoc_insertion_point(field_list:jmc_auto.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_;
}

// repeated string blacklisted_road = 4;
int RoutingRequest::blacklisted_road_size() const {
  return blacklisted_road_.size();
}
void RoutingRequest::clear_blacklisted_road() {
  blacklisted_road_.Clear();
}
const ::std::string& RoutingRequest::blacklisted_road(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Get(index);
}
::std::string* RoutingRequest::mutable_blacklisted_road(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Mutable(index);
}
void RoutingRequest::set_blacklisted_road(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.routing.RoutingRequest.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RoutingRequest::set_blacklisted_road(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.routing.RoutingRequest.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(std::move(value));
}
#endif
void RoutingRequest::set_blacklisted_road(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklisted_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.routing.RoutingRequest.blacklisted_road)
}
void RoutingRequest::set_blacklisted_road(int index, const char* value, size_t size) {
  blacklisted_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.routing.RoutingRequest.blacklisted_road)
}
::std::string* RoutingRequest::add_blacklisted_road() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Add();
}
void RoutingRequest::add_blacklisted_road(const ::std::string& value) {
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.routing.RoutingRequest.blacklisted_road)
}
#if LANG_CXX11
void RoutingRequest::add_blacklisted_road(::std::string&& value) {
  blacklisted_road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.routing.RoutingRequest.blacklisted_road)
}
#endif
void RoutingRequest::add_blacklisted_road(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.routing.RoutingRequest.blacklisted_road)
}
void RoutingRequest::add_blacklisted_road(const char* value, size_t size) {
  blacklisted_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.routing.RoutingRequest.blacklisted_road)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoutingRequest::blacklisted_road() const {
  // @@protoc_insertion_point(field_list:jmc_auto.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RoutingRequest::mutable_blacklisted_road() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.routing.RoutingRequest.blacklisted_road)
  return &blacklisted_road_;
}

// optional bool broadcast = 5 [default = true];
bool RoutingRequest::has_broadcast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoutingRequest::set_has_broadcast() {
  _has_bits_[0] |= 0x00000008u;
}
void RoutingRequest::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoutingRequest::clear_broadcast() {
  broadcast_ = true;
  clear_has_broadcast();
}
bool RoutingRequest::broadcast() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.broadcast)
  return broadcast_;
}
void RoutingRequest::set_broadcast(bool value) {
  set_has_broadcast();
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.RoutingRequest.broadcast)
}

// optional .jmc_auto.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
bool RoutingRequest::has_parking_space() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoutingRequest::set_has_parking_space() {
  _has_bits_[0] |= 0x00000002u;
}
void RoutingRequest::clear_has_parking_space() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoutingRequest::clear_parking_space() {
  if (parking_space_ != NULL) parking_space_->::jmc_auto::hdmap::ParkingSpace::Clear();
  clear_has_parking_space();
}
const ::jmc_auto::hdmap::ParkingSpace& RoutingRequest::parking_space() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.parking_space)
  return parking_space_ != NULL ? *parking_space_
                         : *::jmc_auto::hdmap::ParkingSpace::internal_default_instance();
}
::jmc_auto::hdmap::ParkingSpace* RoutingRequest::mutable_parking_space() {
  set_has_parking_space();
  if (parking_space_ == NULL) {
    parking_space_ = new ::jmc_auto::hdmap::ParkingSpace;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingRequest.parking_space)
  return parking_space_;
}
::jmc_auto::hdmap::ParkingSpace* RoutingRequest::release_parking_space() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingRequest.parking_space)
  clear_has_parking_space();
  ::jmc_auto::hdmap::ParkingSpace* temp = parking_space_;
  parking_space_ = NULL;
  return temp;
}
void RoutingRequest::set_allocated_parking_space(::jmc_auto::hdmap::ParkingSpace* parking_space) {
  delete parking_space_;
  parking_space_ = parking_space;
  if (parking_space) {
    set_has_parking_space();
  } else {
    clear_has_parking_space();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingRequest.parking_space)
}

// optional .jmc_auto.routing.ParkingInfo parking_info = 7;
bool RoutingRequest::has_parking_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoutingRequest::set_has_parking_info() {
  _has_bits_[0] |= 0x00000004u;
}
void RoutingRequest::clear_has_parking_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoutingRequest::clear_parking_info() {
  if (parking_info_ != NULL) parking_info_->::jmc_auto::routing::ParkingInfo::Clear();
  clear_has_parking_info();
}
const ::jmc_auto::routing::ParkingInfo& RoutingRequest::parking_info() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingRequest.parking_info)
  return parking_info_ != NULL ? *parking_info_
                         : *::jmc_auto::routing::ParkingInfo::internal_default_instance();
}
::jmc_auto::routing::ParkingInfo* RoutingRequest::mutable_parking_info() {
  set_has_parking_info();
  if (parking_info_ == NULL) {
    parking_info_ = new ::jmc_auto::routing::ParkingInfo;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingRequest.parking_info)
  return parking_info_;
}
::jmc_auto::routing::ParkingInfo* RoutingRequest::release_parking_info() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingRequest.parking_info)
  clear_has_parking_info();
  ::jmc_auto::routing::ParkingInfo* temp = parking_info_;
  parking_info_ = NULL;
  return temp;
}
void RoutingRequest::set_allocated_parking_info(::jmc_auto::routing::ParkingInfo* parking_info) {
  delete parking_info_;
  parking_info_ = parking_info;
  if (parking_info) {
    set_has_parking_info();
  } else {
    clear_has_parking_info();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingRequest.parking_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.Measurement)
}

void Measurement::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0;
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
}

void Measurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measurement& Measurement::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

Measurement* Measurement::New(::google::protobuf::Arena* arena) const {
  Measurement* n = new Measurement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.Measurement)
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.Measurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.Measurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional double distance = 1;
  if (has_distance()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_distance()) {
    set_distance(from.distance());
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measurement

// optional double distance = 1;
bool Measurement::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Measurement::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void Measurement::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void Measurement::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
double Measurement::distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.Measurement.distance)
  return distance_;
}
void Measurement::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.Measurement.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passage::kSegmentFieldNumber;
const int Passage::kCanExitFieldNumber;
const int Passage::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passage::Passage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.Passage)
}
Passage::Passage(const Passage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_exit_, &from.can_exit_,
    reinterpret_cast<char*>(&change_lane_type_) -
    reinterpret_cast<char*>(&can_exit_) + sizeof(change_lane_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.Passage)
}

void Passage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&can_exit_, 0, reinterpret_cast<char*>(&change_lane_type_) -
    reinterpret_cast<char*>(&can_exit_) + sizeof(change_lane_type_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
}

void Passage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Passage::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Passage& Passage::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

Passage* Passage::New(::google::protobuf::Arena* arena) const {
  Passage* n = new Passage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.Passage)
  segment_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&can_exit_, 0, reinterpret_cast<char*>(&change_lane_type_) -
      reinterpret_cast<char*>(&can_exit_) + sizeof(change_lane_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Passage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.Passage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.routing.LaneSegment segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_exit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_can_exit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_exit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::jmc_auto::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.Passage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.Passage)
  return false;
#undef DO_
}

void Passage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.routing.LaneSegment segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segment(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_exit(), output);
  }

  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.Passage)
}

::google::protobuf::uint8* Passage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.routing.LaneSegment segment = 1;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segment(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_exit(), target);
  }

  // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.Passage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.routing.LaneSegment segment = 1;
  {
    unsigned int count = this->segment_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool can_exit = 2;
    if (has_can_exit()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Passage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  const Passage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Passage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.Passage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      can_exit_ = from.can_exit_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_lane_type_ = from.change_lane_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Passage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::Swap(Passage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passage::InternalSwap(Passage* other) {
  segment_.InternalSwap(&other->segment_);
  std::swap(can_exit_, other->can_exit_);
  std::swap(change_lane_type_, other->change_lane_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Passage::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Passage

// repeated .jmc_auto.routing.LaneSegment segment = 1;
int Passage::segment_size() const {
  return segment_.size();
}
void Passage::clear_segment() {
  segment_.Clear();
}
const ::jmc_auto::routing::LaneSegment& Passage::segment(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.Passage.segment)
  return segment_.Get(index);
}
::jmc_auto::routing::LaneSegment* Passage::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.Passage.segment)
  return segment_.Mutable(index);
}
::jmc_auto::routing::LaneSegment* Passage::add_segment() {
  // @@protoc_insertion_point(field_add:jmc_auto.routing.Passage.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >*
Passage::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.routing.Passage.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::LaneSegment >&
Passage::segment() const {
  // @@protoc_insertion_point(field_list:jmc_auto.routing.Passage.segment)
  return segment_;
}

// optional bool can_exit = 2;
bool Passage::has_can_exit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Passage::set_has_can_exit() {
  _has_bits_[0] |= 0x00000001u;
}
void Passage::clear_has_can_exit() {
  _has_bits_[0] &= ~0x00000001u;
}
void Passage::clear_can_exit() {
  can_exit_ = false;
  clear_has_can_exit();
}
bool Passage::can_exit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.Passage.can_exit)
  return can_exit_;
}
void Passage::set_can_exit(bool value) {
  set_has_can_exit();
  can_exit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.Passage.can_exit)
}

// optional .jmc_auto.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
bool Passage::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Passage::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Passage::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Passage::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
::jmc_auto::routing::ChangeLaneType Passage::change_lane_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.Passage.change_lane_type)
  return static_cast< ::jmc_auto::routing::ChangeLaneType >(change_lane_type_);
}
void Passage::set_change_lane_type(::jmc_auto::routing::ChangeLaneType value) {
  assert(::jmc_auto::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.routing.Passage.change_lane_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSegment::kIdFieldNumber;
const int RoadSegment::kPassageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSegment::RoadSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.RoadSegment)
}
RoadSegment::RoadSegment(const RoadSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      passage_(from.passage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.RoadSegment)
}

void RoadSegment::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoadSegment::~RoadSegment() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.RoadSegment)
  SharedDtor();
}

void RoadSegment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoadSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadSegment::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadSegment& RoadSegment::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoadSegment* RoadSegment::New(::google::protobuf::Arena* arena) const {
  RoadSegment* n = new RoadSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.RoadSegment)
  passage_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.RoadSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.routing.RoadSegment.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.routing.Passage passage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.RoadSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.RoadSegment)
  return false;
#undef DO_
}

void RoadSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.RoadSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.RoadSegment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .jmc_auto.routing.Passage passage = 2;
  for (unsigned int i = 0, n = this->passage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->passage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.RoadSegment)
}

::google::protobuf::uint8* RoadSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.RoadSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.routing.RoadSegment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .jmc_auto.routing.Passage passage = 2;
  for (unsigned int i = 0, n = this->passage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->passage(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.RoadSegment)
  return target;
}

size_t RoadSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.RoadSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.routing.Passage passage = 2;
  {
    unsigned int count = this->passage_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passage(i));
    }
  }

  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.RoadSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.RoadSegment)
    MergeFrom(*source);
  }
}

void RoadSegment::MergeFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passage_.MergeFrom(from.passage_);
  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RoadSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSegment::CopyFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegment::IsInitialized() const {
  return true;
}

void RoadSegment::Swap(RoadSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSegment::InternalSwap(RoadSegment* other) {
  passage_.InternalSwap(&other->passage_);
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadSegment::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadSegment

// optional string id = 1;
bool RoadSegment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadSegment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadSegment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadSegment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& RoadSegment::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoadSegment.id)
  return id_.GetNoArena();
}
void RoadSegment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.routing.RoadSegment.id)
}
#if LANG_CXX11
void RoadSegment::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.routing.RoadSegment.id)
}
#endif
void RoadSegment::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.routing.RoadSegment.id)
}
void RoadSegment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.routing.RoadSegment.id)
}
::std::string* RoadSegment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoadSegment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoadSegment::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoadSegment.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoadSegment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoadSegment.id)
}

// repeated .jmc_auto.routing.Passage passage = 2;
int RoadSegment::passage_size() const {
  return passage_.size();
}
void RoadSegment::clear_passage() {
  passage_.Clear();
}
const ::jmc_auto::routing::Passage& RoadSegment::passage(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoadSegment.passage)
  return passage_.Get(index);
}
::jmc_auto::routing::Passage* RoadSegment::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoadSegment.passage)
  return passage_.Mutable(index);
}
::jmc_auto::routing::Passage* RoadSegment::add_passage() {
  // @@protoc_insertion_point(field_add:jmc_auto.routing.RoadSegment.passage)
  return passage_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::Passage >*
RoadSegment::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.routing.RoadSegment.passage)
  return &passage_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::Passage >&
RoadSegment::passage() const {
  // @@protoc_insertion_point(field_list:jmc_auto.routing.RoadSegment.passage)
  return passage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingResponse::kHeaderFieldNumber;
const int RoutingResponse::kRoadFieldNumber;
const int RoutingResponse::kMeasurementFieldNumber;
const int RoutingResponse::kRoutingRequestFieldNumber;
const int RoutingResponse::kMapVersionFieldNumber;
const int RoutingResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingResponse::RoutingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.routing.RoutingResponse)
}
RoutingResponse::RoutingResponse(const RoutingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      road_(from.road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_version()) {
    map_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_version_);
  }
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_measurement()) {
    measurement_ = new ::jmc_auto::routing::Measurement(*from.measurement_);
  } else {
    measurement_ = NULL;
  }
  if (from.has_routing_request()) {
    routing_request_ = new ::jmc_auto::routing::RoutingRequest(*from.routing_request_);
  } else {
    routing_request_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::jmc_auto::common::StatusPb(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.routing.RoutingResponse)
}

void RoutingResponse::SharedCtor() {
  _cached_size_ = 0;
  map_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_) + sizeof(status_));
}

RoutingResponse::~RoutingResponse() {
  // @@protoc_insertion_point(destructor:jmc_auto.routing.RoutingResponse)
  SharedDtor();
}

void RoutingResponse::SharedDtor() {
  map_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete measurement_;
  }
  if (this != internal_default_instance()) {
    delete routing_request_;
  }
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void RoutingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingResponse::descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingResponse& RoutingResponse::default_instance() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoutingResponse* RoutingResponse::New(::google::protobuf::Arena* arena) const {
  RoutingResponse* n = new RoutingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.routing.RoutingResponse)
  road_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_map_version()) {
      GOOGLE_DCHECK(!map_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_measurement()) {
      GOOGLE_DCHECK(measurement_ != NULL);
      measurement_->::jmc_auto::routing::Measurement::Clear();
    }
    if (has_routing_request()) {
      GOOGLE_DCHECK(routing_request_ != NULL);
      routing_request_->::jmc_auto::routing::RoutingRequest::Clear();
    }
    if (has_status()) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->::jmc_auto::common::StatusPb::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.routing.RoutingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.routing.RoadSegment road = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.Measurement measurement = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measurement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.routing.RoutingRequest routing_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.StatusPb status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.routing.RoutingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.routing.RoutingResponse)
  return false;
#undef DO_
}

void RoutingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.routing.RoutingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .jmc_auto.routing.RoadSegment road = 2;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road(i), output);
  }

  // optional .jmc_auto.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->measurement_, output);
  }

  // optional .jmc_auto.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->routing_request_, output);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->map_version(), output);
  }

  // optional .jmc_auto.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.routing.RoutingResponse)
}

::google::protobuf::uint8* RoutingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.routing.RoutingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .jmc_auto.routing.RoadSegment road = 2;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->road(i), deterministic, target);
  }

  // optional .jmc_auto.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->measurement_, deterministic, target);
  }

  // optional .jmc_auto.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->routing_request_, deterministic, target);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->map_version(), target);
  }

  // optional .jmc_auto.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->status_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.routing.RoutingResponse)
  return target;
}

size_t RoutingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.routing.RoutingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.routing.RoadSegment road = 2;
  {
    unsigned int count = this->road_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes map_version = 5;
    if (has_map_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_version());
    }

    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.routing.Measurement measurement = 3;
    if (has_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->measurement_);
    }

    // optional .jmc_auto.routing.RoutingRequest routing_request = 4;
    if (has_routing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_request_);
    }

    // optional .jmc_auto.common.StatusPb status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.routing.RoutingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.routing.RoutingResponse)
    MergeFrom(*source);
  }
}

void RoutingResponse::MergeFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_version();
      map_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_measurement()->::jmc_auto::routing::Measurement::MergeFrom(from.measurement());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_routing_request()->::jmc_auto::routing::RoutingRequest::MergeFrom(from.routing_request());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_status()->::jmc_auto::common::StatusPb::MergeFrom(from.status());
    }
  }
}

void RoutingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingResponse::CopyFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponse::IsInitialized() const {
  return true;
}

void RoutingResponse::Swap(RoutingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingResponse::InternalSwap(RoutingResponse* other) {
  road_.InternalSwap(&other->road_);
  map_version_.Swap(&other->map_version_);
  std::swap(header_, other->header_);
  std::swap(measurement_, other->measurement_);
  std::swap(routing_request_, other->routing_request_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingResponse::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingResponse

// optional .jmc_auto.common.Header header = 1;
bool RoutingResponse::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoutingResponse::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void RoutingResponse::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoutingResponse::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& RoutingResponse::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingResponse.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* RoutingResponse::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingResponse.header)
  return header_;
}
::jmc_auto::common::Header* RoutingResponse::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingResponse.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingResponse.header)
}

// repeated .jmc_auto.routing.RoadSegment road = 2;
int RoutingResponse::road_size() const {
  return road_.size();
}
void RoutingResponse::clear_road() {
  road_.Clear();
}
const ::jmc_auto::routing::RoadSegment& RoutingResponse::road(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingResponse.road)
  return road_.Get(index);
}
::jmc_auto::routing::RoadSegment* RoutingResponse::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingResponse.road)
  return road_.Mutable(index);
}
::jmc_auto::routing::RoadSegment* RoutingResponse::add_road() {
  // @@protoc_insertion_point(field_add:jmc_auto.routing.RoutingResponse.road)
  return road_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::RoadSegment >*
RoutingResponse::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.routing.RoutingResponse.road)
  return &road_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::routing::RoadSegment >&
RoutingResponse::road() const {
  // @@protoc_insertion_point(field_list:jmc_auto.routing.RoutingResponse.road)
  return road_;
}

// optional .jmc_auto.routing.Measurement measurement = 3;
bool RoutingResponse::has_measurement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoutingResponse::set_has_measurement() {
  _has_bits_[0] |= 0x00000004u;
}
void RoutingResponse::clear_has_measurement() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoutingResponse::clear_measurement() {
  if (measurement_ != NULL) measurement_->::jmc_auto::routing::Measurement::Clear();
  clear_has_measurement();
}
const ::jmc_auto::routing::Measurement& RoutingResponse::measurement() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingResponse.measurement)
  return measurement_ != NULL ? *measurement_
                         : *::jmc_auto::routing::Measurement::internal_default_instance();
}
::jmc_auto::routing::Measurement* RoutingResponse::mutable_measurement() {
  set_has_measurement();
  if (measurement_ == NULL) {
    measurement_ = new ::jmc_auto::routing::Measurement;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingResponse.measurement)
  return measurement_;
}
::jmc_auto::routing::Measurement* RoutingResponse::release_measurement() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingResponse.measurement)
  clear_has_measurement();
  ::jmc_auto::routing::Measurement* temp = measurement_;
  measurement_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_measurement(::jmc_auto::routing::Measurement* measurement) {
  delete measurement_;
  measurement_ = measurement;
  if (measurement) {
    set_has_measurement();
  } else {
    clear_has_measurement();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingResponse.measurement)
}

// optional .jmc_auto.routing.RoutingRequest routing_request = 4;
bool RoutingResponse::has_routing_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoutingResponse::set_has_routing_request() {
  _has_bits_[0] |= 0x00000008u;
}
void RoutingResponse::clear_has_routing_request() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoutingResponse::clear_routing_request() {
  if (routing_request_ != NULL) routing_request_->::jmc_auto::routing::RoutingRequest::Clear();
  clear_has_routing_request();
}
const ::jmc_auto::routing::RoutingRequest& RoutingResponse::routing_request() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingResponse.routing_request)
  return routing_request_ != NULL ? *routing_request_
                         : *::jmc_auto::routing::RoutingRequest::internal_default_instance();
}
::jmc_auto::routing::RoutingRequest* RoutingResponse::mutable_routing_request() {
  set_has_routing_request();
  if (routing_request_ == NULL) {
    routing_request_ = new ::jmc_auto::routing::RoutingRequest;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingResponse.routing_request)
  return routing_request_;
}
::jmc_auto::routing::RoutingRequest* RoutingResponse::release_routing_request() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingResponse.routing_request)
  clear_has_routing_request();
  ::jmc_auto::routing::RoutingRequest* temp = routing_request_;
  routing_request_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_routing_request(::jmc_auto::routing::RoutingRequest* routing_request) {
  delete routing_request_;
  routing_request_ = routing_request;
  if (routing_request) {
    set_has_routing_request();
  } else {
    clear_has_routing_request();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingResponse.routing_request)
}

// optional bytes map_version = 5;
bool RoutingResponse::has_map_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutingResponse::set_has_map_version() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutingResponse::clear_has_map_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingResponse::clear_map_version() {
  map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_version();
}
const ::std::string& RoutingResponse::map_version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingResponse.map_version)
  return map_version_.GetNoArena();
}
void RoutingResponse::set_map_version(const ::std::string& value) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.routing.RoutingResponse.map_version)
}
#if LANG_CXX11
void RoutingResponse::set_map_version(::std::string&& value) {
  set_has_map_version();
  map_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.routing.RoutingResponse.map_version)
}
#endif
void RoutingResponse::set_map_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.routing.RoutingResponse.map_version)
}
void RoutingResponse::set_map_version(const void* value, size_t size) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.routing.RoutingResponse.map_version)
}
::std::string* RoutingResponse::mutable_map_version() {
  set_has_map_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingResponse.map_version)
  return map_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RoutingResponse::release_map_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingResponse.map_version)
  clear_has_map_version();
  return map_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RoutingResponse::set_allocated_map_version(::std::string* map_version) {
  if (map_version != NULL) {
    set_has_map_version();
  } else {
    clear_has_map_version();
  }
  map_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingResponse.map_version)
}

// optional .jmc_auto.common.StatusPb status = 6;
bool RoutingResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoutingResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void RoutingResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoutingResponse::clear_status() {
  if (status_ != NULL) status_->::jmc_auto::common::StatusPb::Clear();
  clear_has_status();
}
const ::jmc_auto::common::StatusPb& RoutingResponse::status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.routing.RoutingResponse.status)
  return status_ != NULL ? *status_
                         : *::jmc_auto::common::StatusPb::internal_default_instance();
}
::jmc_auto::common::StatusPb* RoutingResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::jmc_auto::common::StatusPb;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.routing.RoutingResponse.status)
  return status_;
}
::jmc_auto::common::StatusPb* RoutingResponse::release_status() {
  // @@protoc_insertion_point(field_release:jmc_auto.routing.RoutingResponse.status)
  clear_has_status();
  ::jmc_auto::common::StatusPb* temp = status_;
  status_ = NULL;
  return temp;
}
void RoutingResponse::set_allocated_status(::jmc_auto::common::StatusPb* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.routing.RoutingResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
