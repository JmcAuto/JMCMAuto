// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_ultrasonic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/perception_ultrasonic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
class ImpendingCollisionEdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImpendingCollisionEdge> {
} _ImpendingCollisionEdge_default_instance_;
class ImpendingCollisionEdgesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImpendingCollisionEdges> {
} _ImpendingCollisionEdges_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, cone_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdge, tracking_time_),
  1,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, impending_collision_edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpendingCollisionEdges, header_),
  ~0u,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(ImpendingCollisionEdge)},
  { 13, 20, sizeof(ImpendingCollisionEdges)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImpendingCollisionEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImpendingCollisionEdges_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/perception_ultrasonic.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ImpendingCollisionEdge_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ImpendingCollisionEdges_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _ImpendingCollisionEdge_default_instance_.DefaultConstruct();
  _ImpendingCollisionEdges_default_instance_.DefaultConstruct();
  _ImpendingCollisionEdges_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n4modules/perception/proto/perception_ul"
      "trasonic.proto\022\023jmc_auto.perception\032!mod"
      "ules/common/proto/header.proto\032#modules/"
      "common/proto/geometry.proto\"z\n\026Impending"
      "CollisionEdge\022\n\n\002id\030\001 \001(\005\022\024\n\014cone_id_lis"
      "t\030\002 \003(\005\022\'\n\005point\030\003 \003(\0132\030.jmc_auto.common"
      ".Point3D\022\025\n\rtracking_time\030\004 \001(\001\"\221\001\n\027Impe"
      "ndingCollisionEdges\022M\n\030impending_collisi"
      "on_edge\030\001 \003(\0132+.jmc_auto.perception.Impe"
      "ndingCollisionEdge\022\'\n\006header\030\002 \001(\0132\027.jmc"
      "_auto.common.Header"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/perception_ultrasonic.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImpendingCollisionEdge::kIdFieldNumber;
const int ImpendingCollisionEdge::kConeIdListFieldNumber;
const int ImpendingCollisionEdge::kPointFieldNumber;
const int ImpendingCollisionEdge::kTrackingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImpendingCollisionEdge::ImpendingCollisionEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.ImpendingCollisionEdge)
}
ImpendingCollisionEdge::ImpendingCollisionEdge(const ImpendingCollisionEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cone_id_list_(from.cone_id_list_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tracking_time_, &from.tracking_time_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&tracking_time_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.ImpendingCollisionEdge)
}

void ImpendingCollisionEdge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tracking_time_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&tracking_time_) + sizeof(id_));
}

ImpendingCollisionEdge::~ImpendingCollisionEdge() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.ImpendingCollisionEdge)
  SharedDtor();
}

void ImpendingCollisionEdge::SharedDtor() {
}

void ImpendingCollisionEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpendingCollisionEdge::descriptor() {
  protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImpendingCollisionEdge& ImpendingCollisionEdge::default_instance() {
  protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImpendingCollisionEdge* ImpendingCollisionEdge::New(::google::protobuf::Arena* arena) const {
  ImpendingCollisionEdge* n = new ImpendingCollisionEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImpendingCollisionEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.ImpendingCollisionEdge)
  cone_id_list_.Clear();
  point_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&tracking_time_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&tracking_time_) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImpendingCollisionEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.ImpendingCollisionEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cone_id_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_cone_id_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cone_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.Point3D point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.ImpendingCollisionEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.ImpendingCollisionEdge)
  return false;
#undef DO_
}

void ImpendingCollisionEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.ImpendingCollisionEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 cone_id_list = 2;
  for (int i = 0, n = this->cone_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cone_id_list(i), output);
  }

  // repeated .jmc_auto.common.Point3D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(i), output);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.ImpendingCollisionEdge)
}

::google::protobuf::uint8* ImpendingCollisionEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.ImpendingCollisionEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 cone_id_list = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->cone_id_list_, target);

  // repeated .jmc_auto.common.Point3D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->point(i), deterministic, target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.ImpendingCollisionEdge)
  return target;
}

size_t ImpendingCollisionEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.ImpendingCollisionEdge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 cone_id_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cone_id_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cone_id_list_size());
    total_size += data_size;
  }

  // repeated .jmc_auto.common.Point3D point = 3;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpendingCollisionEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.ImpendingCollisionEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const ImpendingCollisionEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImpendingCollisionEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.ImpendingCollisionEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.ImpendingCollisionEdge)
    MergeFrom(*source);
  }
}

void ImpendingCollisionEdge::MergeFrom(const ImpendingCollisionEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.ImpendingCollisionEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cone_id_list_.MergeFrom(from.cone_id_list_);
  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImpendingCollisionEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.ImpendingCollisionEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpendingCollisionEdge::CopyFrom(const ImpendingCollisionEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.ImpendingCollisionEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpendingCollisionEdge::IsInitialized() const {
  return true;
}

void ImpendingCollisionEdge::Swap(ImpendingCollisionEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImpendingCollisionEdge::InternalSwap(ImpendingCollisionEdge* other) {
  cone_id_list_.InternalSwap(&other->cone_id_list_);
  point_.InternalSwap(&other->point_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImpendingCollisionEdge::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImpendingCollisionEdge

// optional int32 id = 1;
bool ImpendingCollisionEdge::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImpendingCollisionEdge::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ImpendingCollisionEdge::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImpendingCollisionEdge::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 ImpendingCollisionEdge::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.ImpendingCollisionEdge.id)
  return id_;
}
void ImpendingCollisionEdge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.ImpendingCollisionEdge.id)
}

// repeated int32 cone_id_list = 2;
int ImpendingCollisionEdge::cone_id_list_size() const {
  return cone_id_list_.size();
}
void ImpendingCollisionEdge::clear_cone_id_list() {
  cone_id_list_.Clear();
}
::google::protobuf::int32 ImpendingCollisionEdge::cone_id_list(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.ImpendingCollisionEdge.cone_id_list)
  return cone_id_list_.Get(index);
}
void ImpendingCollisionEdge::set_cone_id_list(int index, ::google::protobuf::int32 value) {
  cone_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.ImpendingCollisionEdge.cone_id_list)
}
void ImpendingCollisionEdge::add_cone_id_list(::google::protobuf::int32 value) {
  cone_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.perception.ImpendingCollisionEdge.cone_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ImpendingCollisionEdge::cone_id_list() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.ImpendingCollisionEdge.cone_id_list)
  return cone_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ImpendingCollisionEdge::mutable_cone_id_list() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.ImpendingCollisionEdge.cone_id_list)
  return &cone_id_list_;
}

// repeated .jmc_auto.common.Point3D point = 3;
int ImpendingCollisionEdge::point_size() const {
  return point_.size();
}
void ImpendingCollisionEdge::clear_point() {
  point_.Clear();
}
const ::jmc_auto::common::Point3D& ImpendingCollisionEdge::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.ImpendingCollisionEdge.point)
  return point_.Get(index);
}
::jmc_auto::common::Point3D* ImpendingCollisionEdge::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.ImpendingCollisionEdge.point)
  return point_.Mutable(index);
}
::jmc_auto::common::Point3D* ImpendingCollisionEdge::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.ImpendingCollisionEdge.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
ImpendingCollisionEdge::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.ImpendingCollisionEdge.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
ImpendingCollisionEdge::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.ImpendingCollisionEdge.point)
  return point_;
}

// optional double tracking_time = 4;
bool ImpendingCollisionEdge::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImpendingCollisionEdge::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ImpendingCollisionEdge::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImpendingCollisionEdge::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double ImpendingCollisionEdge::tracking_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.ImpendingCollisionEdge.tracking_time)
  return tracking_time_;
}
void ImpendingCollisionEdge::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.ImpendingCollisionEdge.tracking_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImpendingCollisionEdges::kImpendingCollisionEdgeFieldNumber;
const int ImpendingCollisionEdges::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImpendingCollisionEdges::ImpendingCollisionEdges()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.ImpendingCollisionEdges)
}
ImpendingCollisionEdges::ImpendingCollisionEdges(const ImpendingCollisionEdges& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      impending_collision_edge_(from.impending_collision_edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.ImpendingCollisionEdges)
}

void ImpendingCollisionEdges::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

ImpendingCollisionEdges::~ImpendingCollisionEdges() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.ImpendingCollisionEdges)
  SharedDtor();
}

void ImpendingCollisionEdges::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void ImpendingCollisionEdges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpendingCollisionEdges::descriptor() {
  protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImpendingCollisionEdges& ImpendingCollisionEdges::default_instance() {
  protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImpendingCollisionEdges* ImpendingCollisionEdges::New(::google::protobuf::Arena* arena) const {
  ImpendingCollisionEdges* n = new ImpendingCollisionEdges;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImpendingCollisionEdges::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.ImpendingCollisionEdges)
  impending_collision_edge_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::jmc_auto::common::Header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImpendingCollisionEdges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.ImpendingCollisionEdges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.perception.ImpendingCollisionEdge impending_collision_edge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_impending_collision_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.ImpendingCollisionEdges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.ImpendingCollisionEdges)
  return false;
#undef DO_
}

void ImpendingCollisionEdges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.ImpendingCollisionEdges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.perception.ImpendingCollisionEdge impending_collision_edge = 1;
  for (unsigned int i = 0, n = this->impending_collision_edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->impending_collision_edge(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.ImpendingCollisionEdges)
}

::google::protobuf::uint8* ImpendingCollisionEdges::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.ImpendingCollisionEdges)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.perception.ImpendingCollisionEdge impending_collision_edge = 1;
  for (unsigned int i = 0, n = this->impending_collision_edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->impending_collision_edge(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.ImpendingCollisionEdges)
  return target;
}

size_t ImpendingCollisionEdges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.ImpendingCollisionEdges)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.perception.ImpendingCollisionEdge impending_collision_edge = 1;
  {
    unsigned int count = this->impending_collision_edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impending_collision_edge(i));
    }
  }

  // optional .jmc_auto.common.Header header = 2;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpendingCollisionEdges::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.ImpendingCollisionEdges)
  GOOGLE_DCHECK_NE(&from, this);
  const ImpendingCollisionEdges* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImpendingCollisionEdges>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.ImpendingCollisionEdges)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.ImpendingCollisionEdges)
    MergeFrom(*source);
  }
}

void ImpendingCollisionEdges::MergeFrom(const ImpendingCollisionEdges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.ImpendingCollisionEdges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impending_collision_edge_.MergeFrom(from.impending_collision_edge_);
  if (from.has_header()) {
    mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
  }
}

void ImpendingCollisionEdges::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.ImpendingCollisionEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpendingCollisionEdges::CopyFrom(const ImpendingCollisionEdges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.ImpendingCollisionEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpendingCollisionEdges::IsInitialized() const {
  return true;
}

void ImpendingCollisionEdges::Swap(ImpendingCollisionEdges* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImpendingCollisionEdges::InternalSwap(ImpendingCollisionEdges* other) {
  impending_collision_edge_.InternalSwap(&other->impending_collision_edge_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImpendingCollisionEdges::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2fperception_5fultrasonic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImpendingCollisionEdges

// repeated .jmc_auto.perception.ImpendingCollisionEdge impending_collision_edge = 1;
int ImpendingCollisionEdges::impending_collision_edge_size() const {
  return impending_collision_edge_.size();
}
void ImpendingCollisionEdges::clear_impending_collision_edge() {
  impending_collision_edge_.Clear();
}
const ::jmc_auto::perception::ImpendingCollisionEdge& ImpendingCollisionEdges::impending_collision_edge(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_.Get(index);
}
::jmc_auto::perception::ImpendingCollisionEdge* ImpendingCollisionEdges::mutable_impending_collision_edge(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_.Mutable(index);
}
::jmc_auto::perception::ImpendingCollisionEdge* ImpendingCollisionEdges::add_impending_collision_edge() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::ImpendingCollisionEdge >*
ImpendingCollisionEdges::mutable_impending_collision_edge() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.ImpendingCollisionEdges.impending_collision_edge)
  return &impending_collision_edge_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::ImpendingCollisionEdge >&
ImpendingCollisionEdges::impending_collision_edge() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.ImpendingCollisionEdges.impending_collision_edge)
  return impending_collision_edge_;
}

// optional .jmc_auto.common.Header header = 2;
bool ImpendingCollisionEdges::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImpendingCollisionEdges::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void ImpendingCollisionEdges::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImpendingCollisionEdges::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& ImpendingCollisionEdges::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.ImpendingCollisionEdges.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* ImpendingCollisionEdges::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.ImpendingCollisionEdges.header)
  return header_;
}
::jmc_auto::common::Header* ImpendingCollisionEdges::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.ImpendingCollisionEdges.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ImpendingCollisionEdges::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.ImpendingCollisionEdges.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
