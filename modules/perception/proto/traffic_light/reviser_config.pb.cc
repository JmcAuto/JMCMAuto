// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/reviser_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/traffic_light/reviser_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace traffic_light {
namespace reviser_config {
class HMMReviserConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMMReviserConfig> {
} _HMMReviserConfig_default_instance_;
class ColorReviserConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ColorReviserConfig> {
} _ColorReviserConfig_default_instance_;
class ModelConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelConfigs> {
} _ModelConfigs_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMMReviserConfig, param_file_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorReviserConfig, blink_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, hmm_reviser_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, color_reviser_config_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(HMMReviserConfig)},
  { 11, 20, sizeof(ColorReviserConfig)},
  { 24, 31, sizeof(ModelConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMMReviserConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ColorReviserConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/traffic_light/reviser_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _HMMReviserConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ColorReviserConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ModelConfigs_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HMMReviserConfig_default_instance_.DefaultConstruct();
  _ColorReviserConfig_default_instance_.DefaultConstruct();
  _ModelConfigs_default_instance_.DefaultConstruct();
  _ModelConfigs_default_instance_.get_mutable()->hmm_reviser_config_ = const_cast< ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig*>(
      ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::internal_default_instance());
  _ModelConfigs_default_instance_.get_mutable()->color_reviser_config_ = const_cast< ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig*>(
      ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n;modules/perception/proto/traffic_light"
      "/reviser_config.proto\0220jmc_auto.percepti"
      "on.traffic_light.reviser_config\"E\n\020HMMRe"
      "viserConfig\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001"
      "(\t\022\022\n\nparam_file\030\003 \001(\t\"W\n\022ColorReviserCo"
      "nfig\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\016\n\006e"
      "nable\030\003 \001(\005\022\022\n\nblink_time\030\004 \001(\002\"\322\001\n\014Mode"
      "lConfigs\022^\n\022hmm_reviser_config\030\001 \001(\0132B.j"
      "mc_auto.perception.traffic_light.reviser"
      "_config.HMMReviserConfig\022b\n\024color_revise"
      "r_config\030\002 \001(\0132D.jmc_auto.perception.tra"
      "ffic_light.reviser_config.ColorReviserCo"
      "nfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/traffic_light/reviser_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HMMReviserConfig::kNameFieldNumber;
const int HMMReviserConfig::kVersionFieldNumber;
const int HMMReviserConfig::kParamFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HMMReviserConfig::HMMReviserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
}
HMMReviserConfig::HMMReviserConfig(const HMMReviserConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  param_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param_file()) {
    param_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_file_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
}

void HMMReviserConfig::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HMMReviserConfig::~HMMReviserConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  SharedDtor();
}

void HMMReviserConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HMMReviserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HMMReviserConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HMMReviserConfig& HMMReviserConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

HMMReviserConfig* HMMReviserConfig::New(::google::protobuf::Arena* arena) const {
  HMMReviserConfig* n = new HMMReviserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HMMReviserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (has_param_file()) {
      GOOGLE_DCHECK(!param_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param_file_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HMMReviserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param_file().data(), this->param_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  return false;
#undef DO_
}

void HMMReviserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string param_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_file().data(), this->param_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
}

::google::protobuf::uint8* HMMReviserConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string param_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param_file().data(), this->param_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  return target;
}

size_t HMMReviserConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string param_file = 3;
    if (has_param_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param_file());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HMMReviserConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HMMReviserConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HMMReviserConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
    MergeFrom(*source);
  }
}

void HMMReviserConfig::MergeFrom(const HMMReviserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_param_file();
      param_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_file_);
    }
  }
}

void HMMReviserConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMMReviserConfig::CopyFrom(const HMMReviserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMMReviserConfig::IsInitialized() const {
  return true;
}

void HMMReviserConfig::Swap(HMMReviserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HMMReviserConfig::InternalSwap(HMMReviserConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  param_file_.Swap(&other->param_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HMMReviserConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HMMReviserConfig

// optional string name = 1;
bool HMMReviserConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HMMReviserConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HMMReviserConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HMMReviserConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& HMMReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return name_.GetNoArena();
}
void HMMReviserConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
#if LANG_CXX11
void HMMReviserConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
#endif
void HMMReviserConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
void HMMReviserConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
::std::string* HMMReviserConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HMMReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HMMReviserConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}

// optional string version = 2;
bool HMMReviserConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HMMReviserConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void HMMReviserConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void HMMReviserConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& HMMReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return version_.GetNoArena();
}
void HMMReviserConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
#if LANG_CXX11
void HMMReviserConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
#endif
void HMMReviserConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
void HMMReviserConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
::std::string* HMMReviserConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HMMReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HMMReviserConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}

// optional string param_file = 3;
bool HMMReviserConfig::has_param_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HMMReviserConfig::set_has_param_file() {
  _has_bits_[0] |= 0x00000004u;
}
void HMMReviserConfig::clear_has_param_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void HMMReviserConfig::clear_param_file() {
  param_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_file();
}
const ::std::string& HMMReviserConfig::param_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return param_file_.GetNoArena();
}
void HMMReviserConfig::set_param_file(const ::std::string& value) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
#if LANG_CXX11
void HMMReviserConfig::set_param_file(::std::string&& value) {
  set_has_param_file();
  param_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
#endif
void HMMReviserConfig::set_param_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
void HMMReviserConfig::set_param_file(const char* value, size_t size) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
::std::string* HMMReviserConfig::mutable_param_file() {
  set_has_param_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return param_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HMMReviserConfig::release_param_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  clear_has_param_file();
  return param_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HMMReviserConfig::set_allocated_param_file(::std::string* param_file) {
  if (param_file != NULL) {
    set_has_param_file();
  } else {
    clear_has_param_file();
  }
  param_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColorReviserConfig::kNameFieldNumber;
const int ColorReviserConfig::kVersionFieldNumber;
const int ColorReviserConfig::kEnableFieldNumber;
const int ColorReviserConfig::kBlinkTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColorReviserConfig::ColorReviserConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
}
ColorReviserConfig::ColorReviserConfig(const ColorReviserConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&enable_, &from.enable_,
    reinterpret_cast<char*>(&blink_time_) -
    reinterpret_cast<char*>(&enable_) + sizeof(blink_time_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
}

void ColorReviserConfig::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, reinterpret_cast<char*>(&blink_time_) -
    reinterpret_cast<char*>(&enable_) + sizeof(blink_time_));
}

ColorReviserConfig::~ColorReviserConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  SharedDtor();
}

void ColorReviserConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColorReviserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorReviserConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColorReviserConfig& ColorReviserConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ColorReviserConfig* ColorReviserConfig::New(::google::protobuf::Arena* arena) const {
  ColorReviserConfig* n = new ColorReviserConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ColorReviserConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&enable_, 0, reinterpret_cast<char*>(&blink_time_) -
      reinterpret_cast<char*>(&enable_) + sizeof(blink_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColorReviserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float blink_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_blink_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blink_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  return false;
#undef DO_
}

void ColorReviserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 enable = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enable(), output);
  }

  // optional float blink_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blink_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
}

::google::protobuf::uint8* ColorReviserConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 enable = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enable(), target);
  }

  // optional float blink_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blink_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  return target;
}

size_t ColorReviserConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 enable = 3;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable());
    }

    // optional float blink_time = 4;
    if (has_blink_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorReviserConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorReviserConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColorReviserConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
    MergeFrom(*source);
  }
}

void ColorReviserConfig::MergeFrom(const ColorReviserConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      blink_time_ = from.blink_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColorReviserConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorReviserConfig::CopyFrom(const ColorReviserConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorReviserConfig::IsInitialized() const {
  return true;
}

void ColorReviserConfig::Swap(ColorReviserConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColorReviserConfig::InternalSwap(ColorReviserConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(enable_, other->enable_);
  std::swap(blink_time_, other->blink_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ColorReviserConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ColorReviserConfig

// optional string name = 1;
bool ColorReviserConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ColorReviserConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ColorReviserConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ColorReviserConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ColorReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return name_.GetNoArena();
}
void ColorReviserConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
#if LANG_CXX11
void ColorReviserConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
#endif
void ColorReviserConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
void ColorReviserConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
::std::string* ColorReviserConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColorReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColorReviserConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}

// optional string version = 2;
bool ColorReviserConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ColorReviserConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ColorReviserConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ColorReviserConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& ColorReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return version_.GetNoArena();
}
void ColorReviserConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
#if LANG_CXX11
void ColorReviserConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
#endif
void ColorReviserConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
void ColorReviserConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
::std::string* ColorReviserConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ColorReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ColorReviserConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}

// optional int32 enable = 3;
bool ColorReviserConfig::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ColorReviserConfig::set_has_enable() {
  _has_bits_[0] |= 0x00000004u;
}
void ColorReviserConfig::clear_has_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
void ColorReviserConfig::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
::google::protobuf::int32 ColorReviserConfig::enable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
  return enable_;
}
void ColorReviserConfig::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
}

// optional float blink_time = 4;
bool ColorReviserConfig::has_blink_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ColorReviserConfig::set_has_blink_time() {
  _has_bits_[0] |= 0x00000008u;
}
void ColorReviserConfig::clear_has_blink_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void ColorReviserConfig::clear_blink_time() {
  blink_time_ = 0;
  clear_has_blink_time();
}
float ColorReviserConfig::blink_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
  return blink_time_;
}
void ColorReviserConfig::set_blink_time(float value) {
  set_has_blink_time();
  blink_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kHmmReviserConfigFieldNumber;
const int ModelConfigs::kColorReviserConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hmm_reviser_config()) {
    hmm_reviser_config_ = new ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig(*from.hmm_reviser_config_);
  } else {
    hmm_reviser_config_ = NULL;
  }
  if (from.has_color_reviser_config()) {
    color_reviser_config_ = new ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig(*from.color_reviser_config_);
  } else {
    color_reviser_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hmm_reviser_config_, 0, reinterpret_cast<char*>(&color_reviser_config_) -
    reinterpret_cast<char*>(&hmm_reviser_config_) + sizeof(color_reviser_config_));
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete hmm_reviser_config_;
  }
  if (this != internal_default_instance()) {
    delete color_reviser_config_;
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelConfigs& ModelConfigs::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hmm_reviser_config()) {
      GOOGLE_DCHECK(hmm_reviser_config_ != NULL);
      hmm_reviser_config_->::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::Clear();
    }
    if (has_color_reviser_config()) {
      GOOGLE_DCHECK(color_reviser_config_ != NULL);
      color_reviser_config_->::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hmm_reviser_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color_reviser_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hmm_reviser_config_, output);
  }

  // optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_reviser_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hmm_reviser_config_, deterministic, target);
  }

  // optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->color_reviser_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
    if (has_hmm_reviser_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hmm_reviser_config_);
    }

    // optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
    if (has_color_reviser_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_reviser_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hmm_reviser_config()->::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::MergeFrom(from.hmm_reviser_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_color_reviser_config()->::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::MergeFrom(from.color_reviser_config());
    }
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  std::swap(hmm_reviser_config_, other->hmm_reviser_config_);
  std::swap(color_reviser_config_, other->color_reviser_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
bool ModelConfigs::has_hmm_reviser_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_hmm_reviser_config() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_hmm_reviser_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_hmm_reviser_config() {
  if (hmm_reviser_config_ != NULL) hmm_reviser_config_->::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::Clear();
  clear_has_hmm_reviser_config();
}
const ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig& ModelConfigs::hmm_reviser_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return hmm_reviser_config_ != NULL ? *hmm_reviser_config_
                         : *::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::internal_default_instance();
}
::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::mutable_hmm_reviser_config() {
  set_has_hmm_reviser_config();
  if (hmm_reviser_config_ == NULL) {
    hmm_reviser_config_ = new ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return hmm_reviser_config_;
}
::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::release_hmm_reviser_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  clear_has_hmm_reviser_config();
  ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* temp = hmm_reviser_config_;
  hmm_reviser_config_ = NULL;
  return temp;
}
void ModelConfigs::set_allocated_hmm_reviser_config(::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config) {
  delete hmm_reviser_config_;
  hmm_reviser_config_ = hmm_reviser_config;
  if (hmm_reviser_config) {
    set_has_hmm_reviser_config();
  } else {
    clear_has_hmm_reviser_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
}

// optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
bool ModelConfigs::has_color_reviser_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_color_reviser_config() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_color_reviser_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_color_reviser_config() {
  if (color_reviser_config_ != NULL) color_reviser_config_->::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::Clear();
  clear_has_color_reviser_config();
}
const ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig& ModelConfigs::color_reviser_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return color_reviser_config_ != NULL ? *color_reviser_config_
                         : *::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::internal_default_instance();
}
::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::mutable_color_reviser_config() {
  set_has_color_reviser_config();
  if (color_reviser_config_ == NULL) {
    color_reviser_config_ = new ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return color_reviser_config_;
}
::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::release_color_reviser_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  clear_has_color_reviser_config();
  ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* temp = color_reviser_config_;
  color_reviser_config_ = NULL;
  return temp;
}
void ModelConfigs::set_allocated_color_reviser_config(::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config) {
  delete color_reviser_config_;
  color_reviser_config_ = color_reviser_config;
  if (color_reviser_config) {
    set_has_color_reviser_config();
  } else {
    clear_has_color_reviser_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
