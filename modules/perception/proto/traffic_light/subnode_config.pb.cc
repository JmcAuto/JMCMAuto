// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/subnode_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/traffic_light/subnode_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace traffic_light {
namespace subnode_config {
class TLPreprocessorSubnodeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TLPreprocessorSubnodeConfig> {
} _TLPreprocessorSubnodeConfig_default_instance_;
class TLProcSubnodeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TLProcSubnodeConfig> {
} _TLProcSubnodeConfig_default_instance_;
class SubnodeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SubnodeConfig> {
} _SubnodeConfig_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, max_ahead_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, max_process_image_fps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLPreprocessorSubnodeConfig, query_tf_inverval_seconds_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, image_border_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLProcSubnodeConfig, valid_ts_interval_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, tl_preprocessor_subnode_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubnodeConfig, tl_proc_subnode_config_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(TLPreprocessorSubnodeConfig)},
  { 15, 24, sizeof(TLProcSubnodeConfig)},
  { 28, 35, sizeof(SubnodeConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TLPreprocessorSubnodeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TLProcSubnodeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubnodeConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/traffic_light/subnode_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _TLPreprocessorSubnodeConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  TLPreprocessorSubnodeConfig::_default_name_.Shutdown();
  TLPreprocessorSubnodeConfig::_default_version_.Shutdown();
  _TLProcSubnodeConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  TLProcSubnodeConfig::_default_name_.Shutdown();
  TLProcSubnodeConfig::_default_version_.Shutdown();
  _SubnodeConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  TLPreprocessorSubnodeConfig::_default_name_.DefaultConstruct();
  *TLPreprocessorSubnodeConfig::_default_name_.get_mutable() = ::std::string("TLPreprocessorSubnode", 21);
  TLPreprocessorSubnodeConfig::_default_version_.DefaultConstruct();
  *TLPreprocessorSubnodeConfig::_default_version_.get_mutable() = ::std::string("1.0.0", 5);
  _TLPreprocessorSubnodeConfig_default_instance_.DefaultConstruct();
  TLProcSubnodeConfig::_default_name_.DefaultConstruct();
  *TLProcSubnodeConfig::_default_name_.get_mutable() = ::std::string("TLProcSubnode", 13);
  TLProcSubnodeConfig::_default_version_.DefaultConstruct();
  *TLProcSubnodeConfig::_default_version_.get_mutable() = ::std::string("1.0.0", 5);
  _TLProcSubnodeConfig_default_instance_.DefaultConstruct();
  _SubnodeConfig_default_instance_.DefaultConstruct();
  _SubnodeConfig_default_instance_.get_mutable()->tl_preprocessor_subnode_config_ = const_cast< ::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig*>(
      ::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::internal_default_instance());
  _SubnodeConfig_default_instance_.get_mutable()->tl_proc_subnode_config_ = const_cast< ::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig*>(
      ::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n;modules/perception/proto/traffic_light"
      "/subnode_config.proto\0220jmc_auto.percepti"
      "on.traffic_light.subnode_config\"\304\001\n\033TLPr"
      "eprocessorSubnodeConfig\022#\n\004name\030\001 \001(\t:\025T"
      "LPreprocessorSubnode\022\026\n\007version\030\002 \001(\t:\0051"
      ".0.0\022\036\n\021max_ahead_seconds\030\003 \001(\002:\0030.3\022 \n\025"
      "max_process_image_fps\030\004 \001(\002:\0018\022&\n\031query_"
      "tf_inverval_seconds\030\005 \001(\002:\0030.2\"\205\001\n\023TLPro"
      "cSubnodeConfig\022\033\n\004name\030\001 \001(\t:\rTLProcSubn"
      "ode\022\026\n\007version\030\002 \001(\t:\0051.0.0\022\031\n\014image_bor"
      "der\030\003 \001(\005:\003100\022\036\n\021valid_ts_interval\030\004 \001("
      "\002:\0030.5\"\355\001\n\rSubnodeConfig\022u\n\036tl_preproces"
      "sor_subnode_config\030\001 \001(\0132M.jmc_auto.perc"
      "eption.traffic_light.subnode_config.TLPr"
      "eprocessorSubnodeConfig\022e\n\026tl_proc_subno"
      "de_config\030\002 \001(\0132E.jmc_auto.perception.tr"
      "affic_light.subnode_config.TLProcSubnode"
      "Config"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 686);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/traffic_light/subnode_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TLPreprocessorSubnodeConfig::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TLPreprocessorSubnodeConfig::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLPreprocessorSubnodeConfig::kNameFieldNumber;
const int TLPreprocessorSubnodeConfig::kVersionFieldNumber;
const int TLPreprocessorSubnodeConfig::kMaxAheadSecondsFieldNumber;
const int TLPreprocessorSubnodeConfig::kMaxProcessImageFpsFieldNumber;
const int TLPreprocessorSubnodeConfig::kQueryTfInvervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}
TLPreprocessorSubnodeConfig::TLPreprocessorSubnodeConfig(const TLPreprocessorSubnodeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&TLPreprocessorSubnodeConfig::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&TLPreprocessorSubnodeConfig::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&TLPreprocessorSubnodeConfig::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&TLPreprocessorSubnodeConfig::_default_version_.get(), from.version_);
  }
  ::memcpy(&query_tf_inverval_seconds_, &from.query_tf_inverval_seconds_,
    reinterpret_cast<char*>(&max_process_image_fps_) -
    reinterpret_cast<char*>(&query_tf_inverval_seconds_) + sizeof(max_process_image_fps_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}

void TLPreprocessorSubnodeConfig::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&TLPreprocessorSubnodeConfig::_default_name_.get());
  version_.UnsafeSetDefault(&TLPreprocessorSubnodeConfig::_default_version_.get());
  query_tf_inverval_seconds_ = 0.2f;
  max_ahead_seconds_ = 0.3f;
  max_process_image_fps_ = 8;
}

TLPreprocessorSubnodeConfig::~TLPreprocessorSubnodeConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  SharedDtor();
}

void TLPreprocessorSubnodeConfig::SharedDtor() {
  name_.DestroyNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get());
  version_.DestroyNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get());
}

void TLPreprocessorSubnodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLPreprocessorSubnodeConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLPreprocessorSubnodeConfig& TLPreprocessorSubnodeConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TLPreprocessorSubnodeConfig* TLPreprocessorSubnodeConfig::New(::google::protobuf::Arena* arena) const {
  TLPreprocessorSubnodeConfig* n = new TLPreprocessorSubnodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLPreprocessorSubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&TLPreprocessorSubnodeConfig::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&TLPreprocessorSubnodeConfig::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&TLPreprocessorSubnodeConfig::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&TLPreprocessorSubnodeConfig::_default_version_.get());
    }
    query_tf_inverval_seconds_ = 0.2f;
    max_ahead_seconds_ = 0.3f;
    max_process_image_fps_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TLPreprocessorSubnodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "TLPreprocessorSubnode"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_ahead_seconds = 3 [default = 0.3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_max_ahead_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_ahead_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_process_image_fps = 4 [default = 8];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_max_process_image_fps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_process_image_fps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float query_tf_inverval_seconds = 5 [default = 0.2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_query_tf_inverval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &query_tf_inverval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return false;
#undef DO_
}

void TLPreprocessorSubnodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "TLPreprocessorSubnode"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional float max_ahead_seconds = 3 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_ahead_seconds(), output);
  }

  // optional float max_process_image_fps = 4 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_process_image_fps(), output);
  }

  // optional float query_tf_inverval_seconds = 5 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->query_tf_inverval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
}

::google::protobuf::uint8* TLPreprocessorSubnodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "TLPreprocessorSubnode"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional float max_ahead_seconds = 3 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_ahead_seconds(), target);
  }

  // optional float max_process_image_fps = 4 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_process_image_fps(), target);
  }

  // optional float query_tf_inverval_seconds = 5 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->query_tf_inverval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  return target;
}

size_t TLPreprocessorSubnodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1 [default = "TLPreprocessorSubnode"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional float query_tf_inverval_seconds = 5 [default = 0.2];
    if (has_query_tf_inverval_seconds()) {
      total_size += 1 + 4;
    }

    // optional float max_ahead_seconds = 3 [default = 0.3];
    if (has_max_ahead_seconds()) {
      total_size += 1 + 4;
    }

    // optional float max_process_image_fps = 4 [default = 8];
    if (has_max_process_image_fps()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLPreprocessorSubnodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TLPreprocessorSubnodeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLPreprocessorSubnodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
    MergeFrom(*source);
  }
}

void TLPreprocessorSubnodeConfig::MergeFrom(const TLPreprocessorSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&TLPreprocessorSubnodeConfig::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&TLPreprocessorSubnodeConfig::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      query_tf_inverval_seconds_ = from.query_tf_inverval_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_ahead_seconds_ = from.max_ahead_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_process_image_fps_ = from.max_process_image_fps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TLPreprocessorSubnodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLPreprocessorSubnodeConfig::CopyFrom(const TLPreprocessorSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLPreprocessorSubnodeConfig::IsInitialized() const {
  return true;
}

void TLPreprocessorSubnodeConfig::Swap(TLPreprocessorSubnodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLPreprocessorSubnodeConfig::InternalSwap(TLPreprocessorSubnodeConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(query_tf_inverval_seconds_, other->query_tf_inverval_seconds_);
  std::swap(max_ahead_seconds_, other->max_ahead_seconds_);
  std::swap(max_process_image_fps_, other->max_process_image_fps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLPreprocessorSubnodeConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLPreprocessorSubnodeConfig

// optional string name = 1 [default = "TLPreprocessorSubnode"];
bool TLPreprocessorSubnodeConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TLPreprocessorSubnodeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TLPreprocessorSubnodeConfig::clear_name() {
  name_.ClearToDefaultNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get());
  clear_has_name();
}
const ::std::string& TLPreprocessorSubnodeConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  return name_.GetNoArena();
}
void TLPreprocessorSubnodeConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
#if LANG_CXX11
void TLPreprocessorSubnodeConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &TLPreprocessorSubnodeConfig::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
#endif
void TLPreprocessorSubnodeConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
void TLPreprocessorSubnodeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}
::std::string* TLPreprocessorSubnodeConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  return name_.MutableNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get());
}
::std::string* TLPreprocessorSubnodeConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get());
}
void TLPreprocessorSubnodeConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&TLPreprocessorSubnodeConfig::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
bool TLPreprocessorSubnodeConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void TLPreprocessorSubnodeConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void TLPreprocessorSubnodeConfig::clear_version() {
  version_.ClearToDefaultNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get());
  clear_has_version();
}
const ::std::string& TLPreprocessorSubnodeConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  return version_.GetNoArena();
}
void TLPreprocessorSubnodeConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
#if LANG_CXX11
void TLPreprocessorSubnodeConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &TLPreprocessorSubnodeConfig::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
#endif
void TLPreprocessorSubnodeConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
void TLPreprocessorSubnodeConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}
::std::string* TLPreprocessorSubnodeConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  return version_.MutableNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get());
}
::std::string* TLPreprocessorSubnodeConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get());
}
void TLPreprocessorSubnodeConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&TLPreprocessorSubnodeConfig::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.version)
}

// optional float max_ahead_seconds = 3 [default = 0.3];
bool TLPreprocessorSubnodeConfig::has_max_ahead_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_max_ahead_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
void TLPreprocessorSubnodeConfig::clear_has_max_ahead_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
void TLPreprocessorSubnodeConfig::clear_max_ahead_seconds() {
  max_ahead_seconds_ = 0.3f;
  clear_has_max_ahead_seconds();
}
float TLPreprocessorSubnodeConfig::max_ahead_seconds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_ahead_seconds)
  return max_ahead_seconds_;
}
void TLPreprocessorSubnodeConfig::set_max_ahead_seconds(float value) {
  set_has_max_ahead_seconds();
  max_ahead_seconds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_ahead_seconds)
}

// optional float max_process_image_fps = 4 [default = 8];
bool TLPreprocessorSubnodeConfig::has_max_process_image_fps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_max_process_image_fps() {
  _has_bits_[0] |= 0x00000010u;
}
void TLPreprocessorSubnodeConfig::clear_has_max_process_image_fps() {
  _has_bits_[0] &= ~0x00000010u;
}
void TLPreprocessorSubnodeConfig::clear_max_process_image_fps() {
  max_process_image_fps_ = 8;
  clear_has_max_process_image_fps();
}
float TLPreprocessorSubnodeConfig::max_process_image_fps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_process_image_fps)
  return max_process_image_fps_;
}
void TLPreprocessorSubnodeConfig::set_max_process_image_fps(float value) {
  set_has_max_process_image_fps();
  max_process_image_fps_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.max_process_image_fps)
}

// optional float query_tf_inverval_seconds = 5 [default = 0.2];
bool TLPreprocessorSubnodeConfig::has_query_tf_inverval_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TLPreprocessorSubnodeConfig::set_has_query_tf_inverval_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void TLPreprocessorSubnodeConfig::clear_has_query_tf_inverval_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void TLPreprocessorSubnodeConfig::clear_query_tf_inverval_seconds() {
  query_tf_inverval_seconds_ = 0.2f;
  clear_has_query_tf_inverval_seconds();
}
float TLPreprocessorSubnodeConfig::query_tf_inverval_seconds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.query_tf_inverval_seconds)
  return query_tf_inverval_seconds_;
}
void TLPreprocessorSubnodeConfig::set_query_tf_inverval_seconds(float value) {
  set_has_query_tf_inverval_seconds();
  query_tf_inverval_seconds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig.query_tf_inverval_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TLProcSubnodeConfig::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TLProcSubnodeConfig::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLProcSubnodeConfig::kNameFieldNumber;
const int TLProcSubnodeConfig::kVersionFieldNumber;
const int TLProcSubnodeConfig::kImageBorderFieldNumber;
const int TLProcSubnodeConfig::kValidTsIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLProcSubnodeConfig::TLProcSubnodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}
TLProcSubnodeConfig::TLProcSubnodeConfig(const TLProcSubnodeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&TLProcSubnodeConfig::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&TLProcSubnodeConfig::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&TLProcSubnodeConfig::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&TLProcSubnodeConfig::_default_version_.get(), from.version_);
  }
  ::memcpy(&image_border_, &from.image_border_,
    reinterpret_cast<char*>(&valid_ts_interval_) -
    reinterpret_cast<char*>(&image_border_) + sizeof(valid_ts_interval_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}

void TLProcSubnodeConfig::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&TLProcSubnodeConfig::_default_name_.get());
  version_.UnsafeSetDefault(&TLProcSubnodeConfig::_default_version_.get());
  image_border_ = 100;
  valid_ts_interval_ = 0.5f;
}

TLProcSubnodeConfig::~TLProcSubnodeConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  SharedDtor();
}

void TLProcSubnodeConfig::SharedDtor() {
  name_.DestroyNoArena(&TLProcSubnodeConfig::_default_name_.get());
  version_.DestroyNoArena(&TLProcSubnodeConfig::_default_version_.get());
}

void TLProcSubnodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLProcSubnodeConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLProcSubnodeConfig& TLProcSubnodeConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TLProcSubnodeConfig* TLProcSubnodeConfig::New(::google::protobuf::Arena* arena) const {
  TLProcSubnodeConfig* n = new TLProcSubnodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TLProcSubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&TLProcSubnodeConfig::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&TLProcSubnodeConfig::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&TLProcSubnodeConfig::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&TLProcSubnodeConfig::_default_version_.get());
    }
    image_border_ = 100;
    valid_ts_interval_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TLProcSubnodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "TLProcSubnode"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 image_border = 3 [default = 100];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_image_border();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_border_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float valid_ts_interval = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_valid_ts_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &valid_ts_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return false;
#undef DO_
}

void TLProcSubnodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "TLProcSubnode"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 image_border = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->image_border(), output);
  }

  // optional float valid_ts_interval = 4 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->valid_ts_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
}

::google::protobuf::uint8* TLProcSubnodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "TLProcSubnode"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 image_border = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->image_border(), target);
  }

  // optional float valid_ts_interval = 4 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->valid_ts_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  return target;
}

size_t TLProcSubnodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1 [default = "TLProcSubnode"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 image_border = 3 [default = 100];
    if (has_image_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_border());
    }

    // optional float valid_ts_interval = 4 [default = 0.5];
    if (has_valid_ts_interval()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLProcSubnodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TLProcSubnodeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLProcSubnodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
    MergeFrom(*source);
  }
}

void TLProcSubnodeConfig::MergeFrom(const TLProcSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&TLProcSubnodeConfig::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&TLProcSubnodeConfig::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      image_border_ = from.image_border_;
    }
    if (cached_has_bits & 0x00000008u) {
      valid_ts_interval_ = from.valid_ts_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TLProcSubnodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLProcSubnodeConfig::CopyFrom(const TLProcSubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLProcSubnodeConfig::IsInitialized() const {
  return true;
}

void TLProcSubnodeConfig::Swap(TLProcSubnodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLProcSubnodeConfig::InternalSwap(TLProcSubnodeConfig* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(image_border_, other->image_border_);
  std::swap(valid_ts_interval_, other->valid_ts_interval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLProcSubnodeConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TLProcSubnodeConfig

// optional string name = 1 [default = "TLProcSubnode"];
bool TLProcSubnodeConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TLProcSubnodeConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TLProcSubnodeConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TLProcSubnodeConfig::clear_name() {
  name_.ClearToDefaultNoArena(&TLProcSubnodeConfig::_default_name_.get());
  clear_has_name();
}
const ::std::string& TLProcSubnodeConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  return name_.GetNoArena();
}
void TLProcSubnodeConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&TLProcSubnodeConfig::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
#if LANG_CXX11
void TLProcSubnodeConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &TLProcSubnodeConfig::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
#endif
void TLProcSubnodeConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&TLProcSubnodeConfig::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
void TLProcSubnodeConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&TLProcSubnodeConfig::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}
::std::string* TLProcSubnodeConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  return name_.MutableNoArena(&TLProcSubnodeConfig::_default_name_.get());
}
::std::string* TLProcSubnodeConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&TLProcSubnodeConfig::_default_name_.get());
}
void TLProcSubnodeConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&TLProcSubnodeConfig::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
bool TLProcSubnodeConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TLProcSubnodeConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void TLProcSubnodeConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void TLProcSubnodeConfig::clear_version() {
  version_.ClearToDefaultNoArena(&TLProcSubnodeConfig::_default_version_.get());
  clear_has_version();
}
const ::std::string& TLProcSubnodeConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  return version_.GetNoArena();
}
void TLProcSubnodeConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&TLProcSubnodeConfig::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
#if LANG_CXX11
void TLProcSubnodeConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &TLProcSubnodeConfig::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
#endif
void TLProcSubnodeConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&TLProcSubnodeConfig::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
void TLProcSubnodeConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&TLProcSubnodeConfig::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}
::std::string* TLProcSubnodeConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  return version_.MutableNoArena(&TLProcSubnodeConfig::_default_version_.get());
}
::std::string* TLProcSubnodeConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&TLProcSubnodeConfig::_default_version_.get());
}
void TLProcSubnodeConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&TLProcSubnodeConfig::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.version)
}

// optional int32 image_border = 3 [default = 100];
bool TLProcSubnodeConfig::has_image_border() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TLProcSubnodeConfig::set_has_image_border() {
  _has_bits_[0] |= 0x00000004u;
}
void TLProcSubnodeConfig::clear_has_image_border() {
  _has_bits_[0] &= ~0x00000004u;
}
void TLProcSubnodeConfig::clear_image_border() {
  image_border_ = 100;
  clear_has_image_border();
}
::google::protobuf::int32 TLProcSubnodeConfig::image_border() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.image_border)
  return image_border_;
}
void TLProcSubnodeConfig::set_image_border(::google::protobuf::int32 value) {
  set_has_image_border();
  image_border_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.image_border)
}

// optional float valid_ts_interval = 4 [default = 0.5];
bool TLProcSubnodeConfig::has_valid_ts_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TLProcSubnodeConfig::set_has_valid_ts_interval() {
  _has_bits_[0] |= 0x00000008u;
}
void TLProcSubnodeConfig::clear_has_valid_ts_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
void TLProcSubnodeConfig::clear_valid_ts_interval() {
  valid_ts_interval_ = 0.5f;
  clear_has_valid_ts_interval();
}
float TLProcSubnodeConfig::valid_ts_interval() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.valid_ts_interval)
  return valid_ts_interval_;
}
void TLProcSubnodeConfig::set_valid_ts_interval(float value) {
  set_has_valid_ts_interval();
  valid_ts_interval_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig.valid_ts_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubnodeConfig::kTlPreprocessorSubnodeConfigFieldNumber;
const int SubnodeConfig::kTlProcSubnodeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubnodeConfig::SubnodeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
}
SubnodeConfig::SubnodeConfig(const SubnodeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tl_preprocessor_subnode_config()) {
    tl_preprocessor_subnode_config_ = new ::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig(*from.tl_preprocessor_subnode_config_);
  } else {
    tl_preprocessor_subnode_config_ = NULL;
  }
  if (from.has_tl_proc_subnode_config()) {
    tl_proc_subnode_config_ = new ::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig(*from.tl_proc_subnode_config_);
  } else {
    tl_proc_subnode_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
}

void SubnodeConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tl_preprocessor_subnode_config_, 0, reinterpret_cast<char*>(&tl_proc_subnode_config_) -
    reinterpret_cast<char*>(&tl_preprocessor_subnode_config_) + sizeof(tl_proc_subnode_config_));
}

SubnodeConfig::~SubnodeConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  SharedDtor();
}

void SubnodeConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tl_preprocessor_subnode_config_;
  }
  if (this != internal_default_instance()) {
    delete tl_proc_subnode_config_;
  }
}

void SubnodeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubnodeConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubnodeConfig& SubnodeConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubnodeConfig* SubnodeConfig::New(::google::protobuf::Arena* arena) const {
  SubnodeConfig* n = new SubnodeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubnodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tl_preprocessor_subnode_config()) {
      GOOGLE_DCHECK(tl_preprocessor_subnode_config_ != NULL);
      tl_preprocessor_subnode_config_->::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Clear();
    }
    if (has_tl_proc_subnode_config()) {
      GOOGLE_DCHECK(tl_proc_subnode_config_ != NULL);
      tl_proc_subnode_config_->::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubnodeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tl_preprocessor_subnode_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tl_proc_subnode_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  return false;
#undef DO_
}

void SubnodeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tl_preprocessor_subnode_config_, output);
  }

  // optional .jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tl_proc_subnode_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
}

::google::protobuf::uint8* SubnodeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tl_preprocessor_subnode_config_, deterministic, target);
  }

  // optional .jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tl_proc_subnode_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  return target;
}

size_t SubnodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
    if (has_tl_preprocessor_subnode_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tl_preprocessor_subnode_config_);
    }

    // optional .jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
    if (has_tl_proc_subnode_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tl_proc_subnode_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubnodeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SubnodeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubnodeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
    MergeFrom(*source);
  }
}

void SubnodeConfig::MergeFrom(const SubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tl_preprocessor_subnode_config()->::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::MergeFrom(from.tl_preprocessor_subnode_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tl_proc_subnode_config()->::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig::MergeFrom(from.tl_proc_subnode_config());
    }
  }
}

void SubnodeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubnodeConfig::CopyFrom(const SubnodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubnodeConfig::IsInitialized() const {
  return true;
}

void SubnodeConfig::Swap(SubnodeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubnodeConfig::InternalSwap(SubnodeConfig* other) {
  std::swap(tl_preprocessor_subnode_config_, other->tl_preprocessor_subnode_config_);
  std::swap(tl_proc_subnode_config_, other->tl_proc_subnode_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubnodeConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fsubnode_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubnodeConfig

// optional .jmc_auto.perception.traffic_light.subnode_config.TLPreprocessorSubnodeConfig tl_preprocessor_subnode_config = 1;
bool SubnodeConfig::has_tl_preprocessor_subnode_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubnodeConfig::set_has_tl_preprocessor_subnode_config() {
  _has_bits_[0] |= 0x00000001u;
}
void SubnodeConfig::clear_has_tl_preprocessor_subnode_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubnodeConfig::clear_tl_preprocessor_subnode_config() {
  if (tl_preprocessor_subnode_config_ != NULL) tl_preprocessor_subnode_config_->::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::Clear();
  clear_has_tl_preprocessor_subnode_config();
}
const ::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig& SubnodeConfig::tl_preprocessor_subnode_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  return tl_preprocessor_subnode_config_ != NULL ? *tl_preprocessor_subnode_config_
                         : *::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig::internal_default_instance();
}
::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::mutable_tl_preprocessor_subnode_config() {
  set_has_tl_preprocessor_subnode_config();
  if (tl_preprocessor_subnode_config_ == NULL) {
    tl_preprocessor_subnode_config_ = new ::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  return tl_preprocessor_subnode_config_;
}
::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* SubnodeConfig::release_tl_preprocessor_subnode_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
  clear_has_tl_preprocessor_subnode_config();
  ::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* temp = tl_preprocessor_subnode_config_;
  tl_preprocessor_subnode_config_ = NULL;
  return temp;
}
void SubnodeConfig::set_allocated_tl_preprocessor_subnode_config(::jmc_auto::perception::traffic_light::subnode_config::TLPreprocessorSubnodeConfig* tl_preprocessor_subnode_config) {
  delete tl_preprocessor_subnode_config_;
  tl_preprocessor_subnode_config_ = tl_preprocessor_subnode_config;
  if (tl_preprocessor_subnode_config) {
    set_has_tl_preprocessor_subnode_config();
  } else {
    clear_has_tl_preprocessor_subnode_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_preprocessor_subnode_config)
}

// optional .jmc_auto.perception.traffic_light.subnode_config.TLProcSubnodeConfig tl_proc_subnode_config = 2;
bool SubnodeConfig::has_tl_proc_subnode_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubnodeConfig::set_has_tl_proc_subnode_config() {
  _has_bits_[0] |= 0x00000002u;
}
void SubnodeConfig::clear_has_tl_proc_subnode_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubnodeConfig::clear_tl_proc_subnode_config() {
  if (tl_proc_subnode_config_ != NULL) tl_proc_subnode_config_->::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig::Clear();
  clear_has_tl_proc_subnode_config();
}
const ::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig& SubnodeConfig::tl_proc_subnode_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  return tl_proc_subnode_config_ != NULL ? *tl_proc_subnode_config_
                         : *::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig::internal_default_instance();
}
::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::mutable_tl_proc_subnode_config() {
  set_has_tl_proc_subnode_config();
  if (tl_proc_subnode_config_ == NULL) {
    tl_proc_subnode_config_ = new ::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  return tl_proc_subnode_config_;
}
::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig* SubnodeConfig::release_tl_proc_subnode_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
  clear_has_tl_proc_subnode_config();
  ::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig* temp = tl_proc_subnode_config_;
  tl_proc_subnode_config_ = NULL;
  return temp;
}
void SubnodeConfig::set_allocated_tl_proc_subnode_config(::jmc_auto::perception::traffic_light::subnode_config::TLProcSubnodeConfig* tl_proc_subnode_config) {
  delete tl_proc_subnode_config_;
  tl_proc_subnode_config_ = tl_proc_subnode_config;
  if (tl_proc_subnode_config) {
    set_has_tl_proc_subnode_config();
  } else {
    clear_has_tl_proc_subnode_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.subnode_config.SubnodeConfig.tl_proc_subnode_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace subnode_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
