// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/reviser_config.proto

#ifndef PROTOBUF_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace perception {
namespace traffic_light {
namespace reviser_config {
class ColorReviserConfig;
class ColorReviserConfigDefaultTypeInternal;
extern ColorReviserConfigDefaultTypeInternal _ColorReviserConfig_default_instance_;
class HMMReviserConfig;
class HMMReviserConfigDefaultTypeInternal;
extern HMMReviserConfigDefaultTypeInternal _HMMReviserConfig_default_instance_;
class ModelConfigs;
class ModelConfigsDefaultTypeInternal;
extern ModelConfigsDefaultTypeInternal _ModelConfigs_default_instance_;
}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace jmc_auto

namespace jmc_auto {
namespace perception {
namespace traffic_light {
namespace reviser_config {

namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto

// ===================================================================

class HMMReviserConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig) */ {
 public:
  HMMReviserConfig();
  virtual ~HMMReviserConfig();

  HMMReviserConfig(const HMMReviserConfig& from);

  inline HMMReviserConfig& operator=(const HMMReviserConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HMMReviserConfig& default_instance();

  static inline const HMMReviserConfig* internal_default_instance() {
    return reinterpret_cast<const HMMReviserConfig*>(
               &_HMMReviserConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HMMReviserConfig* other);

  // implements Message ----------------------------------------------

  inline HMMReviserConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  HMMReviserConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HMMReviserConfig& from);
  void MergeFrom(const HMMReviserConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HMMReviserConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string param_file = 3;
  bool has_param_file() const;
  void clear_param_file();
  static const int kParamFileFieldNumber = 3;
  const ::std::string& param_file() const;
  void set_param_file(const ::std::string& value);
  #if LANG_CXX11
  void set_param_file(::std::string&& value);
  #endif
  void set_param_file(const char* value);
  void set_param_file(const char* value, size_t size);
  ::std::string* mutable_param_file();
  ::std::string* release_param_file();
  void set_allocated_param_file(::std::string* param_file);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_version();
  void clear_has_version();
  void set_has_param_file();
  void clear_has_param_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr param_file_;
  friend struct protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ColorReviserConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig) */ {
 public:
  ColorReviserConfig();
  virtual ~ColorReviserConfig();

  ColorReviserConfig(const ColorReviserConfig& from);

  inline ColorReviserConfig& operator=(const ColorReviserConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorReviserConfig& default_instance();

  static inline const ColorReviserConfig* internal_default_instance() {
    return reinterpret_cast<const ColorReviserConfig*>(
               &_ColorReviserConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ColorReviserConfig* other);

  // implements Message ----------------------------------------------

  inline ColorReviserConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ColorReviserConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColorReviserConfig& from);
  void MergeFrom(const ColorReviserConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColorReviserConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional int32 enable = 3;
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 3;
  ::google::protobuf::int32 enable() const;
  void set_enable(::google::protobuf::int32 value);

  // optional float blink_time = 4;
  bool has_blink_time() const;
  void clear_blink_time();
  static const int kBlinkTimeFieldNumber = 4;
  float blink_time() const;
  void set_blink_time(float value);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_version();
  void clear_has_version();
  void set_has_enable();
  void clear_has_enable();
  void set_has_blink_time();
  void clear_has_blink_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int32 enable_;
  float blink_time_;
  friend struct protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModelConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs) */ {
 public:
  ModelConfigs();
  virtual ~ModelConfigs();

  ModelConfigs(const ModelConfigs& from);

  inline ModelConfigs& operator=(const ModelConfigs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelConfigs& default_instance();

  static inline const ModelConfigs* internal_default_instance() {
    return reinterpret_cast<const ModelConfigs*>(
               &_ModelConfigs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ModelConfigs* other);

  // implements Message ----------------------------------------------

  inline ModelConfigs* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelConfigs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModelConfigs& from);
  void MergeFrom(const ModelConfigs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModelConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
  bool has_hmm_reviser_config() const;
  void clear_hmm_reviser_config();
  static const int kHmmReviserConfigFieldNumber = 1;
  const ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig& hmm_reviser_config() const;
  ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* mutable_hmm_reviser_config();
  ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* release_hmm_reviser_config();
  void set_allocated_hmm_reviser_config(::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config);

  // optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
  bool has_color_reviser_config() const;
  void clear_color_reviser_config();
  static const int kColorReviserConfigFieldNumber = 2;
  const ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig& color_reviser_config() const;
  ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* mutable_color_reviser_config();
  ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* release_color_reviser_config();
  void set_allocated_color_reviser_config(::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs)
 private:
  void set_has_hmm_reviser_config();
  void clear_has_hmm_reviser_config();
  void set_has_color_reviser_config();
  void clear_has_color_reviser_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config_;
  ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config_;
  friend struct protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HMMReviserConfig

// optional string name = 1;
inline bool HMMReviserConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HMMReviserConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HMMReviserConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HMMReviserConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& HMMReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return name_.GetNoArena();
}
inline void HMMReviserConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
#if LANG_CXX11
inline void HMMReviserConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
#endif
inline void HMMReviserConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
inline void HMMReviserConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}
inline ::std::string* HMMReviserConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMMReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMMReviserConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.name)
}

// optional string version = 2;
inline bool HMMReviserConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HMMReviserConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HMMReviserConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HMMReviserConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& HMMReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return version_.GetNoArena();
}
inline void HMMReviserConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
#if LANG_CXX11
inline void HMMReviserConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
#endif
inline void HMMReviserConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
inline void HMMReviserConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}
inline ::std::string* HMMReviserConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMMReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMMReviserConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.version)
}

// optional string param_file = 3;
inline bool HMMReviserConfig::has_param_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HMMReviserConfig::set_has_param_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HMMReviserConfig::clear_has_param_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HMMReviserConfig::clear_param_file() {
  param_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_file();
}
inline const ::std::string& HMMReviserConfig::param_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return param_file_.GetNoArena();
}
inline void HMMReviserConfig::set_param_file(const ::std::string& value) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
#if LANG_CXX11
inline void HMMReviserConfig::set_param_file(::std::string&& value) {
  set_has_param_file();
  param_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
#endif
inline void HMMReviserConfig::set_param_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
inline void HMMReviserConfig::set_param_file(const char* value, size_t size) {
  set_has_param_file();
  param_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}
inline ::std::string* HMMReviserConfig::mutable_param_file() {
  set_has_param_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  return param_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMMReviserConfig::release_param_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
  clear_has_param_file();
  return param_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMMReviserConfig::set_allocated_param_file(::std::string* param_file) {
  if (param_file != NULL) {
    set_has_param_file();
  } else {
    clear_has_param_file();
  }
  param_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig.param_file)
}

// -------------------------------------------------------------------

// ColorReviserConfig

// optional string name = 1;
inline bool ColorReviserConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorReviserConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorReviserConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorReviserConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ColorReviserConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return name_.GetNoArena();
}
inline void ColorReviserConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
#if LANG_CXX11
inline void ColorReviserConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
#endif
inline void ColorReviserConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
inline void ColorReviserConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}
inline ::std::string* ColorReviserConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColorReviserConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColorReviserConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.name)
}

// optional string version = 2;
inline bool ColorReviserConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorReviserConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorReviserConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorReviserConfig::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& ColorReviserConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return version_.GetNoArena();
}
inline void ColorReviserConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
#if LANG_CXX11
inline void ColorReviserConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
#endif
inline void ColorReviserConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
inline void ColorReviserConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}
inline ::std::string* ColorReviserConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColorReviserConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColorReviserConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.version)
}

// optional int32 enable = 3;
inline bool ColorReviserConfig::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorReviserConfig::set_has_enable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorReviserConfig::clear_has_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorReviserConfig::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
inline ::google::protobuf::int32 ColorReviserConfig::enable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
  return enable_;
}
inline void ColorReviserConfig::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.enable)
}

// optional float blink_time = 4;
inline bool ColorReviserConfig::has_blink_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColorReviserConfig::set_has_blink_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColorReviserConfig::clear_has_blink_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColorReviserConfig::clear_blink_time() {
  blink_time_ = 0;
  clear_has_blink_time();
}
inline float ColorReviserConfig::blink_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
  return blink_time_;
}
inline void ColorReviserConfig::set_blink_time(float value) {
  set_has_blink_time();
  blink_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig.blink_time)
}

// -------------------------------------------------------------------

// ModelConfigs

// optional .jmc_auto.perception.traffic_light.reviser_config.HMMReviserConfig hmm_reviser_config = 1;
inline bool ModelConfigs::has_hmm_reviser_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelConfigs::set_has_hmm_reviser_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelConfigs::clear_has_hmm_reviser_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelConfigs::clear_hmm_reviser_config() {
  if (hmm_reviser_config_ != NULL) hmm_reviser_config_->::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::Clear();
  clear_has_hmm_reviser_config();
}
inline const ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig& ModelConfigs::hmm_reviser_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return hmm_reviser_config_ != NULL ? *hmm_reviser_config_
                         : *::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig::internal_default_instance();
}
inline ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::mutable_hmm_reviser_config() {
  set_has_hmm_reviser_config();
  if (hmm_reviser_config_ == NULL) {
    hmm_reviser_config_ = new ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  return hmm_reviser_config_;
}
inline ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* ModelConfigs::release_hmm_reviser_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
  clear_has_hmm_reviser_config();
  ::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* temp = hmm_reviser_config_;
  hmm_reviser_config_ = NULL;
  return temp;
}
inline void ModelConfigs::set_allocated_hmm_reviser_config(::jmc_auto::perception::traffic_light::reviser_config::HMMReviserConfig* hmm_reviser_config) {
  delete hmm_reviser_config_;
  hmm_reviser_config_ = hmm_reviser_config;
  if (hmm_reviser_config) {
    set_has_hmm_reviser_config();
  } else {
    clear_has_hmm_reviser_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.hmm_reviser_config)
}

// optional .jmc_auto.perception.traffic_light.reviser_config.ColorReviserConfig color_reviser_config = 2;
inline bool ModelConfigs::has_color_reviser_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelConfigs::set_has_color_reviser_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelConfigs::clear_has_color_reviser_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelConfigs::clear_color_reviser_config() {
  if (color_reviser_config_ != NULL) color_reviser_config_->::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::Clear();
  clear_has_color_reviser_config();
}
inline const ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig& ModelConfigs::color_reviser_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return color_reviser_config_ != NULL ? *color_reviser_config_
                         : *::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig::internal_default_instance();
}
inline ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::mutable_color_reviser_config() {
  set_has_color_reviser_config();
  if (color_reviser_config_ == NULL) {
    color_reviser_config_ = new ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  return color_reviser_config_;
}
inline ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* ModelConfigs::release_color_reviser_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
  clear_has_color_reviser_config();
  ::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* temp = color_reviser_config_;
  color_reviser_config_ = NULL;
  return temp;
}
inline void ModelConfigs::set_allocated_color_reviser_config(::jmc_auto::perception::traffic_light::reviser_config::ColorReviserConfig* color_reviser_config) {
  delete color_reviser_config_;
  color_reviser_config_ = color_reviser_config;
  if (color_reviser_config) {
    set_has_color_reviser_config();
  } else {
    clear_has_color_reviser_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.reviser_config.ModelConfigs.color_reviser_config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace reviser_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2fproto_2ftraffic_5flight_2freviser_5fconfig_2eproto__INCLUDED
