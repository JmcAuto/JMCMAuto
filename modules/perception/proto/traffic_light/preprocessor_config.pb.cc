// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/preprocessor_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/traffic_light/preprocessor_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace traffic_light {
namespace preprocessor_config {
class ModelConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelConfigs> {
} _ModelConfigs_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_cached_lights_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, projection_image_cols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, projection_image_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, sync_interval_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, no_signals_interval_seconds_),
  0,
  1,
  3,
  4,
  5,
  6,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(ModelConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/traffic_light/preprocessor_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ModelConfigs_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  ModelConfigs::_default_name_.Shutdown();
  ModelConfigs::_default_version_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ModelConfigs::_default_name_.DefaultConstruct();
  *ModelConfigs::_default_name_.get_mutable() = ::std::string("TLPreprocessor", 14);
  ModelConfigs::_default_version_.DefaultConstruct();
  *ModelConfigs::_default_version_.get_mutable() = ::std::string("1.0.0", 5);
  _ModelConfigs_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n@modules/perception/proto/traffic_light"
      "/preprocessor_config.proto\0225jmc_auto.per"
      "ception.traffic_light.preprocessor_confi"
      "g\"\201\002\n\014ModelConfigs\022\034\n\004name\030\001 \001(\t:\016TLPrep"
      "rocessor\022\026\n\007version\030\002 \001(\t:\0051.0.0\022#\n\026max_"
      "cached_lights_size\030\003 \001(\005:\003100\022#\n\025project"
      "ion_image_cols\030\004 \001(\005:\0041920\022#\n\025projection"
      "_image_rows\030\005 \001(\005:\0041080\022\"\n\025sync_interval"
      "_seconds\030\006 \001(\002:\0030.1\022(\n\033no_signals_interv"
      "al_seconds\030\007 \001(\002:\0030.5"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/traffic_light/preprocessor_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kMaxCachedLightsSizeFieldNumber;
const int ModelConfigs::kProjectionImageColsFieldNumber;
const int ModelConfigs::kProjectionImageRowsFieldNumber;
const int ModelConfigs::kSyncIntervalSecondsFieldNumber;
const int ModelConfigs::kNoSignalsIntervalSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
  }
  ::memcpy(&no_signals_interval_seconds_, &from.no_signals_interval_seconds_,
    reinterpret_cast<char*>(&sync_interval_seconds_) -
    reinterpret_cast<char*>(&no_signals_interval_seconds_) + sizeof(sync_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  no_signals_interval_seconds_ = 0.5f;
  max_cached_lights_size_ = 100;
  projection_image_cols_ = 1920;
  projection_image_rows_ = 1080;
  sync_interval_seconds_ = 0.1f;
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(&ModelConfigs::_default_name_.get());
  version_.DestroyNoArena(&ModelConfigs::_default_version_.get());
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelConfigs& ModelConfigs::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&ModelConfigs::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&ModelConfigs::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_version_.get());
    }
    no_signals_interval_seconds_ = 0.5f;
    max_cached_lights_size_ = 100;
    projection_image_cols_ = 1920;
    projection_image_rows_ = 1080;
    sync_interval_seconds_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "TLPreprocessor"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_cached_lights_size = 3 [default = 100];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_max_cached_lights_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cached_lights_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 projection_image_cols = 4 [default = 1920];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_projection_image_cols();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projection_image_cols_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 projection_image_rows = 5 [default = 1080];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_projection_image_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projection_image_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sync_interval_seconds = 6 [default = 0.1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_sync_interval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sync_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float no_signals_interval_seconds = 7 [default = 0.5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_no_signals_interval_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &no_signals_interval_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "TLPreprocessor"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 max_cached_lights_size = 3 [default = 100];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_cached_lights_size(), output);
  }

  // optional int32 projection_image_cols = 4 [default = 1920];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->projection_image_cols(), output);
  }

  // optional int32 projection_image_rows = 5 [default = 1080];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->projection_image_rows(), output);
  }

  // optional float sync_interval_seconds = 6 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sync_interval_seconds(), output);
  }

  // optional float no_signals_interval_seconds = 7 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->no_signals_interval_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "TLPreprocessor"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 max_cached_lights_size = 3 [default = 100];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_cached_lights_size(), target);
  }

  // optional int32 projection_image_cols = 4 [default = 1920];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->projection_image_cols(), target);
  }

  // optional int32 projection_image_rows = 5 [default = 1080];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->projection_image_rows(), target);
  }

  // optional float sync_interval_seconds = 6 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sync_interval_seconds(), target);
  }

  // optional float no_signals_interval_seconds = 7 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->no_signals_interval_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1 [default = "TLPreprocessor"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional float no_signals_interval_seconds = 7 [default = 0.5];
    if (has_no_signals_interval_seconds()) {
      total_size += 1 + 4;
    }

    // optional int32 max_cached_lights_size = 3 [default = 100];
    if (has_max_cached_lights_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cached_lights_size());
    }

    // optional int32 projection_image_cols = 4 [default = 1920];
    if (has_projection_image_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projection_image_cols());
    }

    // optional int32 projection_image_rows = 5 [default = 1080];
    if (has_projection_image_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projection_image_rows());
    }

    // optional float sync_interval_seconds = 6 [default = 0.1];
    if (has_sync_interval_seconds()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      no_signals_interval_seconds_ = from.no_signals_interval_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_cached_lights_size_ = from.max_cached_lights_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      projection_image_cols_ = from.projection_image_cols_;
    }
    if (cached_has_bits & 0x00000020u) {
      projection_image_rows_ = from.projection_image_rows_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_interval_seconds_ = from.sync_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(no_signals_interval_seconds_, other->no_signals_interval_seconds_);
  std::swap(max_cached_lights_size_, other->max_cached_lights_size_);
  std::swap(projection_image_cols_, other->projection_image_cols_);
  std::swap(projection_image_rows_, other->projection_image_rows_);
  std::swap(sync_interval_seconds_, other->sync_interval_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fpreprocessor_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "TLPreprocessor"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(&ModelConfigs::_default_name_.get());
  clear_has_name();
}
const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
  return name_.GetNoArena();
}
void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}
#if LANG_CXX11
void ModelConfigs::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &ModelConfigs::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}
#endif
void ModelConfigs::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}
void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}
::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
  return name_.MutableNoArena(&ModelConfigs::_default_name_.get());
}
::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&ModelConfigs::_default_name_.get());
}
void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&ModelConfigs::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(&ModelConfigs::_default_version_.get());
  clear_has_version();
}
const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
  return version_.GetNoArena();
}
void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}
#if LANG_CXX11
void ModelConfigs::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &ModelConfigs::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}
#endif
void ModelConfigs::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}
void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}
::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
  return version_.MutableNoArena(&ModelConfigs::_default_version_.get());
}
::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&ModelConfigs::_default_version_.get());
}
void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&ModelConfigs::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.version)
}

// optional int32 max_cached_lights_size = 3 [default = 100];
bool ModelConfigs::has_max_cached_lights_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_max_cached_lights_size() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_max_cached_lights_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_max_cached_lights_size() {
  max_cached_lights_size_ = 100;
  clear_has_max_cached_lights_size();
}
::google::protobuf::int32 ModelConfigs::max_cached_lights_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.max_cached_lights_size)
  return max_cached_lights_size_;
}
void ModelConfigs::set_max_cached_lights_size(::google::protobuf::int32 value) {
  set_has_max_cached_lights_size();
  max_cached_lights_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.max_cached_lights_size)
}

// optional int32 projection_image_cols = 4 [default = 1920];
bool ModelConfigs::has_projection_image_cols() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_projection_image_cols() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_projection_image_cols() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_projection_image_cols() {
  projection_image_cols_ = 1920;
  clear_has_projection_image_cols();
}
::google::protobuf::int32 ModelConfigs::projection_image_cols() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_cols)
  return projection_image_cols_;
}
void ModelConfigs::set_projection_image_cols(::google::protobuf::int32 value) {
  set_has_projection_image_cols();
  projection_image_cols_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_cols)
}

// optional int32 projection_image_rows = 5 [default = 1080];
bool ModelConfigs::has_projection_image_rows() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_projection_image_rows() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_projection_image_rows() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_projection_image_rows() {
  projection_image_rows_ = 1080;
  clear_has_projection_image_rows();
}
::google::protobuf::int32 ModelConfigs::projection_image_rows() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_rows)
  return projection_image_rows_;
}
void ModelConfigs::set_projection_image_rows(::google::protobuf::int32 value) {
  set_has_projection_image_rows();
  projection_image_rows_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.projection_image_rows)
}

// optional float sync_interval_seconds = 6 [default = 0.1];
bool ModelConfigs::has_sync_interval_seconds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_sync_interval_seconds() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_sync_interval_seconds() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_sync_interval_seconds() {
  sync_interval_seconds_ = 0.1f;
  clear_has_sync_interval_seconds();
}
float ModelConfigs::sync_interval_seconds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.sync_interval_seconds)
  return sync_interval_seconds_;
}
void ModelConfigs::set_sync_interval_seconds(float value) {
  set_has_sync_interval_seconds();
  sync_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.sync_interval_seconds)
}

// optional float no_signals_interval_seconds = 7 [default = 0.5];
bool ModelConfigs::has_no_signals_interval_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_no_signals_interval_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_no_signals_interval_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_no_signals_interval_seconds() {
  no_signals_interval_seconds_ = 0.5f;
  clear_has_no_signals_interval_seconds();
}
float ModelConfigs::no_signals_interval_seconds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.no_signals_interval_seconds)
  return no_signals_interval_seconds_;
}
void ModelConfigs::set_no_signals_interval_seconds(float value) {
  set_has_no_signals_interval_seconds();
  no_signals_interval_seconds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.preprocessor_config.ModelConfigs.no_signals_interval_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace preprocessor_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
