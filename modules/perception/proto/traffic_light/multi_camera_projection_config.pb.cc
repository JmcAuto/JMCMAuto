// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light/multi_camera_projection_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/traffic_light/multi_camera_projection_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace traffic_light {
namespace multi_camera_projection_config {
class CameraFocusConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CameraFocusConfig> {
} _CameraFocusConfig_default_instance_;
class MultiCamerasProjectionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiCamerasProjectionConfig> {
} _MultiCamerasProjectionConfig_default_instance_;
class ModelConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelConfigs> {
} _ModelConfigs_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, camera_extrinsic_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocusConfig, camera_intrinsic_file_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, single_projection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, camera_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiCamerasProjectionConfig, camera_focus_config_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, multi_camera_projection_config_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CameraFocusConfig)},
  { 11, 21, sizeof(MultiCamerasProjectionConfig)},
  { 26, 32, sizeof(ModelConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraFocusConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiCamerasProjectionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/traffic_light/multi_camera_projection_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _CameraFocusConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MultiCamerasProjectionConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  MultiCamerasProjectionConfig::_default_name_.Shutdown();
  MultiCamerasProjectionConfig::_default_version_.Shutdown();
  MultiCamerasProjectionConfig::_default_single_projection_.Shutdown();
  _ModelConfigs_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CameraFocusConfig_default_instance_.DefaultConstruct();
  MultiCamerasProjectionConfig::_default_name_.DefaultConstruct();
  *MultiCamerasProjectionConfig::_default_name_.get_mutable() = ::std::string("MultiCamerasProjection", 22);
  MultiCamerasProjectionConfig::_default_version_.DefaultConstruct();
  *MultiCamerasProjectionConfig::_default_version_.get_mutable() = ::std::string("1.0.0", 5);
  MultiCamerasProjectionConfig::_default_single_projection_.DefaultConstruct();
  *MultiCamerasProjectionConfig::_default_single_projection_.get_mutable() = ::std::string("BoundaryProjection", 18);
  _MultiCamerasProjectionConfig_default_instance_.DefaultConstruct();
  _ModelConfigs_default_instance_.DefaultConstruct();
  _ModelConfigs_default_instance_.get_mutable()->multi_camera_projection_config_ = const_cast< ::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig*>(
      ::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nKmodules/perception/proto/traffic_light"
      "/multi_camera_projection_config.proto\022@j"
      "mc_auto.perception.traffic_light.multi_c"
      "amera_projection_config\"_\n\021CameraFocusCo"
      "nfig\022\014\n\004name\030\001 \001(\t\022\035\n\025camera_extrinsic_f"
      "ile\030\002 \001(\t\022\035\n\025camera_intrinsic_file\030\003 \001(\t"
      "\"\223\002\n\034MultiCamerasProjectionConfig\022$\n\004nam"
      "e\030\001 \001(\t:\026MultiCamerasProjection\022\026\n\007versi"
      "on\030\002 \001(\t:\0051.0.0\022-\n\021single_projection\030\003 \001"
      "(\t:\022BoundaryProjection\022\024\n\014camera_names\030\004"
      " \003(\t\022p\n\023camera_focus_config\030\005 \003(\0132S.jmc_"
      "auto.perception.traffic_light.multi_came"
      "ra_projection_config.CameraFocusConfig\"\227"
      "\001\n\014ModelConfigs\022\206\001\n\036multi_camera_project"
      "ion_config\030\001 \001(\0132^.jmc_auto.perception.t"
      "raffic_light.multi_camera_projection_con"
      "fig.MultiCamerasProjectionConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/traffic_light/multi_camera_projection_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraFocusConfig::kNameFieldNumber;
const int CameraFocusConfig::kCameraExtrinsicFileFieldNumber;
const int CameraFocusConfig::kCameraIntrinsicFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraFocusConfig::CameraFocusConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}
CameraFocusConfig::CameraFocusConfig(const CameraFocusConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  camera_extrinsic_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_extrinsic_file()) {
    camera_extrinsic_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_extrinsic_file_);
  }
  camera_intrinsic_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_intrinsic_file()) {
    camera_intrinsic_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_intrinsic_file_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}

void CameraFocusConfig::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_extrinsic_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_intrinsic_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CameraFocusConfig::~CameraFocusConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  SharedDtor();
}

void CameraFocusConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_extrinsic_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_intrinsic_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraFocusConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraFocusConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraFocusConfig& CameraFocusConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraFocusConfig* CameraFocusConfig::New(::google::protobuf::Arena* arena) const {
  CameraFocusConfig* n = new CameraFocusConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraFocusConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_camera_extrinsic_file()) {
      GOOGLE_DCHECK(!camera_extrinsic_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*camera_extrinsic_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_camera_intrinsic_file()) {
      GOOGLE_DCHECK(!camera_intrinsic_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*camera_intrinsic_file_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraFocusConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string camera_extrinsic_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_extrinsic_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_extrinsic_file().data(), this->camera_extrinsic_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string camera_intrinsic_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_intrinsic_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_intrinsic_file().data(), this->camera_intrinsic_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return false;
#undef DO_
}

void CameraFocusConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string camera_extrinsic_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_extrinsic_file().data(), this->camera_extrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_extrinsic_file(), output);
  }

  // optional string camera_intrinsic_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_intrinsic_file().data(), this->camera_intrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->camera_intrinsic_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
}

::google::protobuf::uint8* CameraFocusConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string camera_extrinsic_file = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_extrinsic_file().data(), this->camera_extrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_extrinsic_file(), target);
  }

  // optional string camera_intrinsic_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_intrinsic_file().data(), this->camera_intrinsic_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->camera_intrinsic_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  return target;
}

size_t CameraFocusConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string camera_extrinsic_file = 2;
    if (has_camera_extrinsic_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_extrinsic_file());
    }

    // optional string camera_intrinsic_file = 3;
    if (has_camera_intrinsic_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_intrinsic_file());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraFocusConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraFocusConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraFocusConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
    MergeFrom(*source);
  }
}

void CameraFocusConfig::MergeFrom(const CameraFocusConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_camera_extrinsic_file();
      camera_extrinsic_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_extrinsic_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_camera_intrinsic_file();
      camera_intrinsic_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_intrinsic_file_);
    }
  }
}

void CameraFocusConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFocusConfig::CopyFrom(const CameraFocusConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFocusConfig::IsInitialized() const {
  return true;
}

void CameraFocusConfig::Swap(CameraFocusConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraFocusConfig::InternalSwap(CameraFocusConfig* other) {
  name_.Swap(&other->name_);
  camera_extrinsic_file_.Swap(&other->camera_extrinsic_file_);
  camera_intrinsic_file_.Swap(&other->camera_intrinsic_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraFocusConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraFocusConfig

// optional string name = 1;
bool CameraFocusConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraFocusConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraFocusConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraFocusConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CameraFocusConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return name_.GetNoArena();
}
void CameraFocusConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
#if LANG_CXX11
void CameraFocusConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
#endif
void CameraFocusConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
void CameraFocusConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}
::std::string* CameraFocusConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CameraFocusConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CameraFocusConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.name)
}

// optional string camera_extrinsic_file = 2;
bool CameraFocusConfig::has_camera_extrinsic_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraFocusConfig::set_has_camera_extrinsic_file() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraFocusConfig::clear_has_camera_extrinsic_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraFocusConfig::clear_camera_extrinsic_file() {
  camera_extrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_extrinsic_file();
}
const ::std::string& CameraFocusConfig::camera_extrinsic_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return camera_extrinsic_file_.GetNoArena();
}
void CameraFocusConfig::set_camera_extrinsic_file(const ::std::string& value) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
#if LANG_CXX11
void CameraFocusConfig::set_camera_extrinsic_file(::std::string&& value) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
#endif
void CameraFocusConfig::set_camera_extrinsic_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
void CameraFocusConfig::set_camera_extrinsic_file(const char* value, size_t size) {
  set_has_camera_extrinsic_file();
  camera_extrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}
::std::string* CameraFocusConfig::mutable_camera_extrinsic_file() {
  set_has_camera_extrinsic_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  return camera_extrinsic_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CameraFocusConfig::release_camera_extrinsic_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
  clear_has_camera_extrinsic_file();
  return camera_extrinsic_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CameraFocusConfig::set_allocated_camera_extrinsic_file(::std::string* camera_extrinsic_file) {
  if (camera_extrinsic_file != NULL) {
    set_has_camera_extrinsic_file();
  } else {
    clear_has_camera_extrinsic_file();
  }
  camera_extrinsic_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_extrinsic_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_extrinsic_file)
}

// optional string camera_intrinsic_file = 3;
bool CameraFocusConfig::has_camera_intrinsic_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraFocusConfig::set_has_camera_intrinsic_file() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraFocusConfig::clear_has_camera_intrinsic_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraFocusConfig::clear_camera_intrinsic_file() {
  camera_intrinsic_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_camera_intrinsic_file();
}
const ::std::string& CameraFocusConfig::camera_intrinsic_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return camera_intrinsic_file_.GetNoArena();
}
void CameraFocusConfig::set_camera_intrinsic_file(const ::std::string& value) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
#if LANG_CXX11
void CameraFocusConfig::set_camera_intrinsic_file(::std::string&& value) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
#endif
void CameraFocusConfig::set_camera_intrinsic_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
void CameraFocusConfig::set_camera_intrinsic_file(const char* value, size_t size) {
  set_has_camera_intrinsic_file();
  camera_intrinsic_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}
::std::string* CameraFocusConfig::mutable_camera_intrinsic_file() {
  set_has_camera_intrinsic_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  return camera_intrinsic_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CameraFocusConfig::release_camera_intrinsic_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
  clear_has_camera_intrinsic_file();
  return camera_intrinsic_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CameraFocusConfig::set_allocated_camera_intrinsic_file(::std::string* camera_intrinsic_file) {
  if (camera_intrinsic_file != NULL) {
    set_has_camera_intrinsic_file();
  } else {
    clear_has_camera_intrinsic_file();
  }
  camera_intrinsic_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), camera_intrinsic_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig.camera_intrinsic_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> MultiCamerasProjectionConfig::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> MultiCamerasProjectionConfig::_default_version_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> MultiCamerasProjectionConfig::_default_single_projection_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiCamerasProjectionConfig::kNameFieldNumber;
const int MultiCamerasProjectionConfig::kVersionFieldNumber;
const int MultiCamerasProjectionConfig::kSingleProjectionFieldNumber;
const int MultiCamerasProjectionConfig::kCameraNamesFieldNumber;
const int MultiCamerasProjectionConfig::kCameraFocusConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiCamerasProjectionConfig::MultiCamerasProjectionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}
MultiCamerasProjectionConfig::MultiCamerasProjectionConfig(const MultiCamerasProjectionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      camera_names_(from.camera_names_),
      camera_focus_config_(from.camera_focus_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&MultiCamerasProjectionConfig::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&MultiCamerasProjectionConfig::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&MultiCamerasProjectionConfig::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&MultiCamerasProjectionConfig::_default_version_.get(), from.version_);
  }
  single_projection_.UnsafeSetDefault(&MultiCamerasProjectionConfig::_default_single_projection_.get());
  if (from.has_single_projection()) {
    single_projection_.AssignWithDefault(&MultiCamerasProjectionConfig::_default_single_projection_.get(), from.single_projection_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}

void MultiCamerasProjectionConfig::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&MultiCamerasProjectionConfig::_default_name_.get());
  version_.UnsafeSetDefault(&MultiCamerasProjectionConfig::_default_version_.get());
  single_projection_.UnsafeSetDefault(&MultiCamerasProjectionConfig::_default_single_projection_.get());
}

MultiCamerasProjectionConfig::~MultiCamerasProjectionConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  SharedDtor();
}

void MultiCamerasProjectionConfig::SharedDtor() {
  name_.DestroyNoArena(&MultiCamerasProjectionConfig::_default_name_.get());
  version_.DestroyNoArena(&MultiCamerasProjectionConfig::_default_version_.get());
  single_projection_.DestroyNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get());
}

void MultiCamerasProjectionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiCamerasProjectionConfig::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiCamerasProjectionConfig& MultiCamerasProjectionConfig::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiCamerasProjectionConfig* MultiCamerasProjectionConfig::New(::google::protobuf::Arena* arena) const {
  MultiCamerasProjectionConfig* n = new MultiCamerasProjectionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiCamerasProjectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  camera_names_.Clear();
  camera_focus_config_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&MultiCamerasProjectionConfig::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&MultiCamerasProjectionConfig::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&MultiCamerasProjectionConfig::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&MultiCamerasProjectionConfig::_default_version_.get());
    }
    if (has_single_projection()) {
      GOOGLE_DCHECK(!single_projection_.IsDefault(&MultiCamerasProjectionConfig::_default_single_projection_.get()));
      (*single_projection_.UnsafeRawStringPointer())->assign(*&MultiCamerasProjectionConfig::_default_single_projection_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiCamerasProjectionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "MultiCamerasProjection"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string single_projection = 3 [default = "BoundaryProjection"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_projection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->single_projection().data(), this->single_projection().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string camera_names = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_camera_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_names(this->camera_names_size() - 1).data(),
            this->camera_names(this->camera_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_focus_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return false;
#undef DO_
}

void MultiCamerasProjectionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "MultiCamerasProjection"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_projection().data(), this->single_projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->single_projection(), output);
  }

  // repeated string camera_names = 4;
  for (int i = 0, n = this->camera_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_names(i).data(), this->camera_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->camera_names(i), output);
  }

  // repeated .jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  for (unsigned int i = 0, n = this->camera_focus_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_focus_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
}

::google::protobuf::uint8* MultiCamerasProjectionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "MultiCamerasProjection"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string single_projection = 3 [default = "BoundaryProjection"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_projection().data(), this->single_projection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->single_projection(), target);
  }

  // repeated string camera_names = 4;
  for (int i = 0, n = this->camera_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_names(i).data(), this->camera_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->camera_names(i), target);
  }

  // repeated .jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  for (unsigned int i = 0, n = this->camera_focus_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->camera_focus_config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  return target;
}

size_t MultiCamerasProjectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string camera_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->camera_names_size());
  for (int i = 0, n = this->camera_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->camera_names(i));
  }

  // repeated .jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
  {
    unsigned int count = this->camera_focus_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_focus_config(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1 [default = "MultiCamerasProjection"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string single_projection = 3 [default = "BoundaryProjection"];
    if (has_single_projection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_projection());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiCamerasProjectionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiCamerasProjectionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiCamerasProjectionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
    MergeFrom(*source);
  }
}

void MultiCamerasProjectionConfig::MergeFrom(const MultiCamerasProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_names_.MergeFrom(from.camera_names_);
  camera_focus_config_.MergeFrom(from.camera_focus_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&MultiCamerasProjectionConfig::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&MultiCamerasProjectionConfig::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_single_projection();
      single_projection_.AssignWithDefault(&MultiCamerasProjectionConfig::_default_single_projection_.get(), from.single_projection_);
    }
  }
}

void MultiCamerasProjectionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiCamerasProjectionConfig::CopyFrom(const MultiCamerasProjectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCamerasProjectionConfig::IsInitialized() const {
  return true;
}

void MultiCamerasProjectionConfig::Swap(MultiCamerasProjectionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiCamerasProjectionConfig::InternalSwap(MultiCamerasProjectionConfig* other) {
  camera_names_.InternalSwap(&other->camera_names_);
  camera_focus_config_.InternalSwap(&other->camera_focus_config_);
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  single_projection_.Swap(&other->single_projection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiCamerasProjectionConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiCamerasProjectionConfig

// optional string name = 1 [default = "MultiCamerasProjection"];
bool MultiCamerasProjectionConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultiCamerasProjectionConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MultiCamerasProjectionConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultiCamerasProjectionConfig::clear_name() {
  name_.ClearToDefaultNoArena(&MultiCamerasProjectionConfig::_default_name_.get());
  clear_has_name();
}
const ::std::string& MultiCamerasProjectionConfig::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return name_.GetNoArena();
}
void MultiCamerasProjectionConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&MultiCamerasProjectionConfig::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
#if LANG_CXX11
void MultiCamerasProjectionConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &MultiCamerasProjectionConfig::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
#endif
void MultiCamerasProjectionConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&MultiCamerasProjectionConfig::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
void MultiCamerasProjectionConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&MultiCamerasProjectionConfig::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}
::std::string* MultiCamerasProjectionConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  return name_.MutableNoArena(&MultiCamerasProjectionConfig::_default_name_.get());
}
::std::string* MultiCamerasProjectionConfig::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&MultiCamerasProjectionConfig::_default_name_.get());
}
void MultiCamerasProjectionConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&MultiCamerasProjectionConfig::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.name)
}

// optional string version = 2 [default = "1.0.0"];
bool MultiCamerasProjectionConfig::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MultiCamerasProjectionConfig::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void MultiCamerasProjectionConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void MultiCamerasProjectionConfig::clear_version() {
  version_.ClearToDefaultNoArena(&MultiCamerasProjectionConfig::_default_version_.get());
  clear_has_version();
}
const ::std::string& MultiCamerasProjectionConfig::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return version_.GetNoArena();
}
void MultiCamerasProjectionConfig::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&MultiCamerasProjectionConfig::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
#if LANG_CXX11
void MultiCamerasProjectionConfig::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &MultiCamerasProjectionConfig::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
#endif
void MultiCamerasProjectionConfig::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&MultiCamerasProjectionConfig::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
void MultiCamerasProjectionConfig::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&MultiCamerasProjectionConfig::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}
::std::string* MultiCamerasProjectionConfig::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  return version_.MutableNoArena(&MultiCamerasProjectionConfig::_default_version_.get());
}
::std::string* MultiCamerasProjectionConfig::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
  clear_has_version();
  return version_.ReleaseNoArena(&MultiCamerasProjectionConfig::_default_version_.get());
}
void MultiCamerasProjectionConfig::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&MultiCamerasProjectionConfig::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.version)
}

// optional string single_projection = 3 [default = "BoundaryProjection"];
bool MultiCamerasProjectionConfig::has_single_projection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MultiCamerasProjectionConfig::set_has_single_projection() {
  _has_bits_[0] |= 0x00000004u;
}
void MultiCamerasProjectionConfig::clear_has_single_projection() {
  _has_bits_[0] &= ~0x00000004u;
}
void MultiCamerasProjectionConfig::clear_single_projection() {
  single_projection_.ClearToDefaultNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get());
  clear_has_single_projection();
}
const ::std::string& MultiCamerasProjectionConfig::single_projection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return single_projection_.GetNoArena();
}
void MultiCamerasProjectionConfig::set_single_projection(const ::std::string& value) {
  set_has_single_projection();
  single_projection_.SetNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
#if LANG_CXX11
void MultiCamerasProjectionConfig::set_single_projection(::std::string&& value) {
  set_has_single_projection();
  single_projection_.SetNoArena(
    &MultiCamerasProjectionConfig::_default_single_projection_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
#endif
void MultiCamerasProjectionConfig::set_single_projection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_single_projection();
  single_projection_.SetNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
void MultiCamerasProjectionConfig::set_single_projection(const char* value, size_t size) {
  set_has_single_projection();
  single_projection_.SetNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}
::std::string* MultiCamerasProjectionConfig::mutable_single_projection() {
  set_has_single_projection();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  return single_projection_.MutableNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get());
}
::std::string* MultiCamerasProjectionConfig::release_single_projection() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
  clear_has_single_projection();
  return single_projection_.ReleaseNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get());
}
void MultiCamerasProjectionConfig::set_allocated_single_projection(::std::string* single_projection) {
  if (single_projection != NULL) {
    set_has_single_projection();
  } else {
    clear_has_single_projection();
  }
  single_projection_.SetAllocatedNoArena(&MultiCamerasProjectionConfig::_default_single_projection_.get(), single_projection);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.single_projection)
}

// repeated string camera_names = 4;
int MultiCamerasProjectionConfig::camera_names_size() const {
  return camera_names_.size();
}
void MultiCamerasProjectionConfig::clear_camera_names() {
  camera_names_.Clear();
}
const ::std::string& MultiCamerasProjectionConfig::camera_names(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Get(index);
}
::std::string* MultiCamerasProjectionConfig::mutable_camera_names(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Mutable(index);
}
void MultiCamerasProjectionConfig::set_camera_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  camera_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MultiCamerasProjectionConfig::set_camera_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  camera_names_.Mutable(index)->assign(std::move(value));
}
#endif
void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  camera_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
void MultiCamerasProjectionConfig::set_camera_names(int index, const char* value, size_t size) {
  camera_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
::std::string* MultiCamerasProjectionConfig::add_camera_names() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_.Add();
}
void MultiCamerasProjectionConfig::add_camera_names(const ::std::string& value) {
  camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
#if LANG_CXX11
void MultiCamerasProjectionConfig::add_camera_names(::std::string&& value) {
  camera_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
#endif
void MultiCamerasProjectionConfig::add_camera_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  camera_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
void MultiCamerasProjectionConfig::add_camera_names(const char* value, size_t size) {
  camera_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiCamerasProjectionConfig::camera_names() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return camera_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MultiCamerasProjectionConfig::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_names)
  return &camera_names_;
}

// repeated .jmc_auto.perception.traffic_light.multi_camera_projection_config.CameraFocusConfig camera_focus_config = 5;
int MultiCamerasProjectionConfig::camera_focus_config_size() const {
  return camera_focus_config_.size();
}
void MultiCamerasProjectionConfig::clear_camera_focus_config() {
  camera_focus_config_.Clear();
}
const ::jmc_auto::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig& MultiCamerasProjectionConfig::camera_focus_config(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Get(index);
}
::jmc_auto::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::mutable_camera_focus_config(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Mutable(index);
}
::jmc_auto::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig* MultiCamerasProjectionConfig::add_camera_focus_config() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >*
MultiCamerasProjectionConfig::mutable_camera_focus_config() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return &camera_focus_config_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::traffic_light::multi_camera_projection_config::CameraFocusConfig >&
MultiCamerasProjectionConfig::camera_focus_config() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig.camera_focus_config)
  return camera_focus_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kMultiCameraProjectionConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_multi_camera_projection_config()) {
    multi_camera_projection_config_ = new ::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig(*from.multi_camera_projection_config_);
  } else {
    multi_camera_projection_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  multi_camera_projection_config_ = NULL;
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete multi_camera_projection_config_;
  }
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelConfigs& ModelConfigs::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (has_multi_camera_projection_config()) {
    GOOGLE_DCHECK(multi_camera_projection_config_ != NULL);
    multi_camera_projection_config_->::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multi_camera_projection_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->multi_camera_projection_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->multi_camera_projection_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
  if (has_multi_camera_projection_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->multi_camera_projection_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_multi_camera_projection_config()) {
    mutable_multi_camera_projection_config()->::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::MergeFrom(from.multi_camera_projection_config());
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  std::swap(multi_camera_projection_config_, other->multi_camera_projection_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_2fmulti_5fcamera_5fprojection_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional .jmc_auto.perception.traffic_light.multi_camera_projection_config.MultiCamerasProjectionConfig multi_camera_projection_config = 1;
bool ModelConfigs::has_multi_camera_projection_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_multi_camera_projection_config() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_multi_camera_projection_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_multi_camera_projection_config() {
  if (multi_camera_projection_config_ != NULL) multi_camera_projection_config_->::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::Clear();
  clear_has_multi_camera_projection_config();
}
const ::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig& ModelConfigs::multi_camera_projection_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return multi_camera_projection_config_ != NULL ? *multi_camera_projection_config_
                         : *::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig::internal_default_instance();
}
::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::mutable_multi_camera_projection_config() {
  set_has_multi_camera_projection_config();
  if (multi_camera_projection_config_ == NULL) {
    multi_camera_projection_config_ = new ::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  return multi_camera_projection_config_;
}
::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* ModelConfigs::release_multi_camera_projection_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
  clear_has_multi_camera_projection_config();
  ::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* temp = multi_camera_projection_config_;
  multi_camera_projection_config_ = NULL;
  return temp;
}
void ModelConfigs::set_allocated_multi_camera_projection_config(::jmc_auto::perception::traffic_light::multi_camera_projection_config::MultiCamerasProjectionConfig* multi_camera_projection_config) {
  delete multi_camera_projection_config_;
  multi_camera_projection_config_ = multi_camera_projection_config;
  if (multi_camera_projection_config) {
    set_has_multi_camera_projection_config();
  } else {
    clear_has_multi_camera_projection_config();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.traffic_light.multi_camera_projection_config.ModelConfigs.multi_camera_projection_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace multi_camera_projection_config
}  // namespace traffic_light
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
