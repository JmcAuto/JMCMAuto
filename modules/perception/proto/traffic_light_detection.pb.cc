// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/traffic_light_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
class TrafficLightBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightBox> {
} _TrafficLightBox_default_instance_;
class TrafficLightDebugDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDebug> {
} _TrafficLightDebug_default_instance_;
class TrafficLightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight> {
} _TrafficLight_default_instance_;
class TrafficLightDetectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDetection> {
} _TrafficLightDetection_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightBox, selected_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, cropbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, signal_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, valid_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, ts_diff_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, ts_diff_sys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, project_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, distance_to_stop_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDebug, camera_id_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tracking_time_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, traffic_light_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightDetection, contain_lights_),
  0,
  ~0u,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(TrafficLightBox)},
  { 17, 31, sizeof(TrafficLightDebug)},
  { 40, 49, sizeof(TrafficLight)},
  { 53, 62, sizeof(TrafficLightDetection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLightDetection_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/traffic_light_detection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _TrafficLightBox_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TrafficLightDebug_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TrafficLight_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TrafficLightDetection_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  _TrafficLightBox_default_instance_.DefaultConstruct();
  _TrafficLightDebug_default_instance_.DefaultConstruct();
  _TrafficLight_default_instance_.DefaultConstruct();
  _TrafficLightDetection_default_instance_.DefaultConstruct();
  _TrafficLightDebug_default_instance_.get_mutable()->cropbox_ = const_cast< ::jmc_auto::perception::TrafficLightBox*>(
      ::jmc_auto::perception::TrafficLightBox::internal_default_instance());
  _TrafficLightDetection_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _TrafficLightDetection_default_instance_.get_mutable()->traffic_light_debug_ = const_cast< ::jmc_auto::perception::TrafficLightDebug*>(
      ::jmc_auto::perception::TrafficLightDebug::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n6modules/perception/proto/traffic_light"
      "_detection.proto\022\023jmc_auto.perception\032!m"
      "odules/common/proto/header.proto\"\220\001\n\017Tra"
      "fficLightBox\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005wi"
      "dth\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\0226\n\005color\030\005 \001(\016"
      "2\'.jmc_auto.perception.TrafficLight.Colo"
      "r\022\020\n\010selected\030\006 \001(\010\"\227\002\n\021TrafficLightDebu"
      "g\0225\n\007cropbox\030\001 \001(\0132$.jmc_auto.perception"
      ".TrafficLightBox\0221\n\003box\030\002 \003(\0132$.jmc_auto"
      ".perception.TrafficLightBox\022\022\n\nsignal_nu"
      "m\030\003 \001(\005\022\021\n\tvalid_pos\030\004 \001(\005\022\023\n\013ts_diff_po"
      "s\030\005 \001(\001\022\023\n\013ts_diff_sys\030\006 \001(\001\022\025\n\rproject_"
      "error\030\007 \001(\005\022\035\n\025distance_to_stop_line\030\010 \001"
      "(\001\022\021\n\tcamera_id\030\t \001(\005\"\301\001\n\014TrafficLight\0226"
      "\n\005color\030\001 \001(\0162\'.jmc_auto.perception.Traf"
      "ficLight.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfidence"
      "\030\003 \001(\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\"\?\n\005Colo"
      "r\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005G"
      "REEN\020\003\022\t\n\005BLACK\020\004\"\327\001\n\025TrafficLightDetect"
      "ion\022\'\n\006header\030\002 \001(\0132\027.jmc_auto.common.He"
      "ader\0228\n\rtraffic_light\030\001 \003(\0132!.jmc_auto.p"
      "erception.TrafficLight\022C\n\023traffic_light_"
      "debug\030\003 \001(\0132&.jmc_auto.perception.Traffi"
      "cLightDebug\022\026\n\016contain_lights\030\004 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 955);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/traffic_light_detection.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto

const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_enum_descriptors[0];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::UNKNOWN;
const TrafficLight_Color TrafficLight::RED;
const TrafficLight_Color TrafficLight::YELLOW;
const TrafficLight_Color TrafficLight::GREEN;
const TrafficLight_Color TrafficLight::BLACK;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightBox::kXFieldNumber;
const int TrafficLightBox::kYFieldNumber;
const int TrafficLightBox::kWidthFieldNumber;
const int TrafficLightBox::kHeightFieldNumber;
const int TrafficLightBox::kColorFieldNumber;
const int TrafficLightBox::kSelectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightBox::TrafficLightBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.TrafficLightBox)
}
TrafficLightBox::TrafficLightBox(const TrafficLightBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&selected_) -
    reinterpret_cast<char*>(&x_) + sizeof(selected_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.TrafficLightBox)
}

void TrafficLightBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&selected_) -
    reinterpret_cast<char*>(&x_) + sizeof(selected_));
}

TrafficLightBox::~TrafficLightBox() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.TrafficLightBox)
  SharedDtor();
}

void TrafficLightBox::SharedDtor() {
}

void TrafficLightBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightBox::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightBox& TrafficLightBox::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightBox* TrafficLightBox::New(::google::protobuf::Arena* arena) const {
  TrafficLightBox* n = new TrafficLightBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightBox::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.TrafficLightBox)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&selected_) -
      reinterpret_cast<char*>(&x_) + sizeof(selected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.TrafficLightBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.TrafficLight.Color color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::jmc_auto::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_selected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.TrafficLightBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.TrafficLightBox)
  return false;
#undef DO_
}

void TrafficLightBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.TrafficLightBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional .jmc_auto.perception.TrafficLight.Color color = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->color(), output);
  }

  // optional bool selected = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->selected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.TrafficLightBox)
}

::google::protobuf::uint8* TrafficLightBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.TrafficLightBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional .jmc_auto.perception.TrafficLight.Color color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->color(), target);
  }

  // optional bool selected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->selected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.TrafficLightBox)
  return target;
}

size_t TrafficLightBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.TrafficLightBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .jmc_auto.perception.TrafficLight.Color color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool selected = 6;
    if (has_selected()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.TrafficLightBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.TrafficLightBox)
    MergeFrom(*source);
  }
}

void TrafficLightBox::MergeFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000020u) {
      selected_ = from.selected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightBox::CopyFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightBox::IsInitialized() const {
  return true;
}

void TrafficLightBox::Swap(TrafficLightBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightBox::InternalSwap(TrafficLightBox* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(color_, other->color_);
  std::swap(selected_, other->selected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightBox::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightBox

// optional int32 x = 1;
bool TrafficLightBox::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightBox::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightBox::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightBox::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 TrafficLightBox::x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightBox.x)
  return x_;
}
void TrafficLightBox::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightBox.x)
}

// optional int32 y = 2;
bool TrafficLightBox::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightBox::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightBox::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightBox::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 TrafficLightBox::y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightBox.y)
  return y_;
}
void TrafficLightBox::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightBox.y)
}

// optional int32 width = 3;
bool TrafficLightBox::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightBox::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightBox::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightBox::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 TrafficLightBox::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightBox.width)
  return width_;
}
void TrafficLightBox::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightBox.width)
}

// optional int32 height = 4;
bool TrafficLightBox::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightBox::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightBox::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightBox::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 TrafficLightBox::height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightBox.height)
  return height_;
}
void TrafficLightBox::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightBox.height)
}

// optional .jmc_auto.perception.TrafficLight.Color color = 5;
bool TrafficLightBox::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightBox::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightBox::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightBox::clear_color() {
  color_ = 0;
  clear_has_color();
}
::jmc_auto::perception::TrafficLight_Color TrafficLightBox::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightBox.color)
  return static_cast< ::jmc_auto::perception::TrafficLight_Color >(color_);
}
void TrafficLightBox::set_color(::jmc_auto::perception::TrafficLight_Color value) {
  assert(::jmc_auto::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightBox.color)
}

// optional bool selected = 6;
bool TrafficLightBox::has_selected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLightBox::set_has_selected() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLightBox::clear_has_selected() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLightBox::clear_selected() {
  selected_ = false;
  clear_has_selected();
}
bool TrafficLightBox::selected() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightBox.selected)
  return selected_;
}
void TrafficLightBox::set_selected(bool value) {
  set_has_selected();
  selected_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightBox.selected)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDebug::kCropboxFieldNumber;
const int TrafficLightDebug::kBoxFieldNumber;
const int TrafficLightDebug::kSignalNumFieldNumber;
const int TrafficLightDebug::kValidPosFieldNumber;
const int TrafficLightDebug::kTsDiffPosFieldNumber;
const int TrafficLightDebug::kTsDiffSysFieldNumber;
const int TrafficLightDebug::kProjectErrorFieldNumber;
const int TrafficLightDebug::kDistanceToStopLineFieldNumber;
const int TrafficLightDebug::kCameraIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDebug::TrafficLightDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.TrafficLightDebug)
}
TrafficLightDebug::TrafficLightDebug(const TrafficLightDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      box_(from.box_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cropbox()) {
    cropbox_ = new ::jmc_auto::perception::TrafficLightBox(*from.cropbox_);
  } else {
    cropbox_ = NULL;
  }
  ::memcpy(&signal_num_, &from.signal_num_,
    reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&signal_num_) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.TrafficLightDebug)
}

void TrafficLightDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cropbox_, 0, reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&cropbox_) + sizeof(camera_id_));
}

TrafficLightDebug::~TrafficLightDebug() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.TrafficLightDebug)
  SharedDtor();
}

void TrafficLightDebug::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cropbox_;
  }
}

void TrafficLightDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDebug::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDebug& TrafficLightDebug::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightDebug* TrafficLightDebug::New(::google::protobuf::Arena* arena) const {
  TrafficLightDebug* n = new TrafficLightDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.TrafficLightDebug)
  box_.Clear();
  if (has_cropbox()) {
    GOOGLE_DCHECK(cropbox_ != NULL);
    cropbox_->::jmc_auto::perception::TrafficLightBox::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&signal_num_, 0, reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&signal_num_) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.TrafficLightDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.TrafficLightBox cropbox = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cropbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.perception.TrafficLightBox box = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_signal_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 valid_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_valid_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ts_diff_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ts_diff_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_diff_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ts_diff_sys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_ts_diff_sys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_diff_sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 project_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_project_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_to_stop_line = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_distance_to_stop_line();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_stop_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.TrafficLightDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.TrafficLightDebug)
  return false;
#undef DO_
}

void TrafficLightDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.TrafficLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.TrafficLightBox cropbox = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cropbox_, output);
  }

  // repeated .jmc_auto.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0, n = this->box_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box(i), output);
  }

  // optional int32 signal_num = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_num(), output);
  }

  // optional int32 valid_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->valid_pos(), output);
  }

  // optional double ts_diff_pos = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ts_diff_pos(), output);
  }

  // optional double ts_diff_sys = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ts_diff_sys(), output);
  }

  // optional int32 project_error = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->project_error(), output);
  }

  // optional double distance_to_stop_line = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_to_stop_line(), output);
  }

  // optional int32 camera_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->camera_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.TrafficLightDebug)
}

::google::protobuf::uint8* TrafficLightDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.TrafficLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.TrafficLightBox cropbox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cropbox_, deterministic, target);
  }

  // repeated .jmc_auto.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0, n = this->box_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->box(i), deterministic, target);
  }

  // optional int32 signal_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signal_num(), target);
  }

  // optional int32 valid_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->valid_pos(), target);
  }

  // optional double ts_diff_pos = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ts_diff_pos(), target);
  }

  // optional double ts_diff_sys = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ts_diff_sys(), target);
  }

  // optional int32 project_error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->project_error(), target);
  }

  // optional double distance_to_stop_line = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance_to_stop_line(), target);
  }

  // optional int32 camera_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->camera_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.TrafficLightDebug)
  return target;
}

size_t TrafficLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.TrafficLightDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.perception.TrafficLightBox box = 2;
  {
    unsigned int count = this->box_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.perception.TrafficLightBox cropbox = 1;
    if (has_cropbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cropbox_);
    }

    // optional int32 signal_num = 3;
    if (has_signal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_num());
    }

    // optional int32 valid_pos = 4;
    if (has_valid_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_pos());
    }

    // optional double ts_diff_pos = 5;
    if (has_ts_diff_pos()) {
      total_size += 1 + 8;
    }

    // optional double ts_diff_sys = 6;
    if (has_ts_diff_sys()) {
      total_size += 1 + 8;
    }

    // optional double distance_to_stop_line = 8;
    if (has_distance_to_stop_line()) {
      total_size += 1 + 8;
    }

    // optional int32 project_error = 7;
    if (has_project_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_error());
    }

    // optional int32 camera_id = 9;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.TrafficLightDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.TrafficLightDebug)
    MergeFrom(*source);
  }
}

void TrafficLightDebug::MergeFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_.MergeFrom(from.box_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cropbox()->::jmc_auto::perception::TrafficLightBox::MergeFrom(from.cropbox());
    }
    if (cached_has_bits & 0x00000002u) {
      signal_num_ = from.signal_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_pos_ = from.valid_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      ts_diff_pos_ = from.ts_diff_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      ts_diff_sys_ = from.ts_diff_sys_;
    }
    if (cached_has_bits & 0x00000020u) {
      distance_to_stop_line_ = from.distance_to_stop_line_;
    }
    if (cached_has_bits & 0x00000040u) {
      project_error_ = from.project_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDebug::CopyFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDebug::IsInitialized() const {
  return true;
}

void TrafficLightDebug::Swap(TrafficLightDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDebug::InternalSwap(TrafficLightDebug* other) {
  box_.InternalSwap(&other->box_);
  std::swap(cropbox_, other->cropbox_);
  std::swap(signal_num_, other->signal_num_);
  std::swap(valid_pos_, other->valid_pos_);
  std::swap(ts_diff_pos_, other->ts_diff_pos_);
  std::swap(ts_diff_sys_, other->ts_diff_sys_);
  std::swap(distance_to_stop_line_, other->distance_to_stop_line_);
  std::swap(project_error_, other->project_error_);
  std::swap(camera_id_, other->camera_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDebug::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDebug

// optional .jmc_auto.perception.TrafficLightBox cropbox = 1;
bool TrafficLightDebug::has_cropbox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightDebug::set_has_cropbox() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightDebug::clear_has_cropbox() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightDebug::clear_cropbox() {
  if (cropbox_ != NULL) cropbox_->::jmc_auto::perception::TrafficLightBox::Clear();
  clear_has_cropbox();
}
const ::jmc_auto::perception::TrafficLightBox& TrafficLightDebug::cropbox() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.cropbox)
  return cropbox_ != NULL ? *cropbox_
                         : *::jmc_auto::perception::TrafficLightBox::internal_default_instance();
}
::jmc_auto::perception::TrafficLightBox* TrafficLightDebug::mutable_cropbox() {
  set_has_cropbox();
  if (cropbox_ == NULL) {
    cropbox_ = new ::jmc_auto::perception::TrafficLightBox;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.TrafficLightDebug.cropbox)
  return cropbox_;
}
::jmc_auto::perception::TrafficLightBox* TrafficLightDebug::release_cropbox() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.TrafficLightDebug.cropbox)
  clear_has_cropbox();
  ::jmc_auto::perception::TrafficLightBox* temp = cropbox_;
  cropbox_ = NULL;
  return temp;
}
void TrafficLightDebug::set_allocated_cropbox(::jmc_auto::perception::TrafficLightBox* cropbox) {
  delete cropbox_;
  cropbox_ = cropbox;
  if (cropbox) {
    set_has_cropbox();
  } else {
    clear_has_cropbox();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.TrafficLightDebug.cropbox)
}

// repeated .jmc_auto.perception.TrafficLightBox box = 2;
int TrafficLightDebug::box_size() const {
  return box_.size();
}
void TrafficLightDebug::clear_box() {
  box_.Clear();
}
const ::jmc_auto::perception::TrafficLightBox& TrafficLightDebug::box(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.box)
  return box_.Get(index);
}
::jmc_auto::perception::TrafficLightBox* TrafficLightDebug::mutable_box(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.TrafficLightDebug.box)
  return box_.Mutable(index);
}
::jmc_auto::perception::TrafficLightBox* TrafficLightDebug::add_box() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.TrafficLightDebug.box)
  return box_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::TrafficLightBox >*
TrafficLightDebug::mutable_box() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.TrafficLightDebug.box)
  return &box_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::TrafficLightBox >&
TrafficLightDebug::box() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.TrafficLightDebug.box)
  return box_;
}

// optional int32 signal_num = 3;
bool TrafficLightDebug::has_signal_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightDebug::set_has_signal_num() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightDebug::clear_has_signal_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightDebug::clear_signal_num() {
  signal_num_ = 0;
  clear_has_signal_num();
}
::google::protobuf::int32 TrafficLightDebug::signal_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.signal_num)
  return signal_num_;
}
void TrafficLightDebug::set_signal_num(::google::protobuf::int32 value) {
  set_has_signal_num();
  signal_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.signal_num)
}

// optional int32 valid_pos = 4;
bool TrafficLightDebug::has_valid_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightDebug::set_has_valid_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightDebug::clear_has_valid_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightDebug::clear_valid_pos() {
  valid_pos_ = 0;
  clear_has_valid_pos();
}
::google::protobuf::int32 TrafficLightDebug::valid_pos() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.valid_pos)
  return valid_pos_;
}
void TrafficLightDebug::set_valid_pos(::google::protobuf::int32 value) {
  set_has_valid_pos();
  valid_pos_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.valid_pos)
}

// optional double ts_diff_pos = 5;
bool TrafficLightDebug::has_ts_diff_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLightDebug::set_has_ts_diff_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLightDebug::clear_has_ts_diff_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLightDebug::clear_ts_diff_pos() {
  ts_diff_pos_ = 0;
  clear_has_ts_diff_pos();
}
double TrafficLightDebug::ts_diff_pos() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.ts_diff_pos)
  return ts_diff_pos_;
}
void TrafficLightDebug::set_ts_diff_pos(double value) {
  set_has_ts_diff_pos();
  ts_diff_pos_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.ts_diff_pos)
}

// optional double ts_diff_sys = 6;
bool TrafficLightDebug::has_ts_diff_sys() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficLightDebug::set_has_ts_diff_sys() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficLightDebug::clear_has_ts_diff_sys() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficLightDebug::clear_ts_diff_sys() {
  ts_diff_sys_ = 0;
  clear_has_ts_diff_sys();
}
double TrafficLightDebug::ts_diff_sys() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.ts_diff_sys)
  return ts_diff_sys_;
}
void TrafficLightDebug::set_ts_diff_sys(double value) {
  set_has_ts_diff_sys();
  ts_diff_sys_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.ts_diff_sys)
}

// optional int32 project_error = 7;
bool TrafficLightDebug::has_project_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrafficLightDebug::set_has_project_error() {
  _has_bits_[0] |= 0x00000040u;
}
void TrafficLightDebug::clear_has_project_error() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrafficLightDebug::clear_project_error() {
  project_error_ = 0;
  clear_has_project_error();
}
::google::protobuf::int32 TrafficLightDebug::project_error() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.project_error)
  return project_error_;
}
void TrafficLightDebug::set_project_error(::google::protobuf::int32 value) {
  set_has_project_error();
  project_error_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.project_error)
}

// optional double distance_to_stop_line = 8;
bool TrafficLightDebug::has_distance_to_stop_line() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficLightDebug::set_has_distance_to_stop_line() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficLightDebug::clear_has_distance_to_stop_line() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficLightDebug::clear_distance_to_stop_line() {
  distance_to_stop_line_ = 0;
  clear_has_distance_to_stop_line();
}
double TrafficLightDebug::distance_to_stop_line() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.distance_to_stop_line)
  return distance_to_stop_line_;
}
void TrafficLightDebug::set_distance_to_stop_line(double value) {
  set_has_distance_to_stop_line();
  distance_to_stop_line_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.distance_to_stop_line)
}

// optional int32 camera_id = 9;
bool TrafficLightDebug::has_camera_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrafficLightDebug::set_has_camera_id() {
  _has_bits_[0] |= 0x00000080u;
}
void TrafficLightDebug::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrafficLightDebug::clear_camera_id() {
  camera_id_ = 0;
  clear_has_camera_id();
}
::google::protobuf::int32 TrafficLightDebug::camera_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDebug.camera_id)
  return camera_id_;
}
void TrafficLightDebug::set_camera_id(::google::protobuf::int32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDebug.camera_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kConfidenceFieldNumber;
const int TrafficLight::kTrackingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&tracking_time_, &from.tracking_time_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&tracking_time_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tracking_time_, 0, reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&tracking_time_) + sizeof(color_));
  confidence_ = 1;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.TrafficLight)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&tracking_time_, 0, reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&tracking_time_) + sizeof(color_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.TrafficLight.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::jmc_auto::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.TrafficLight.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.TrafficLight.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.TrafficLight.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.perception.TrafficLight.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional double confidence = 3 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  id_.Swap(&other->id_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(color_, other->color_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// optional .jmc_auto.perception.TrafficLight.Color color = 1;
bool TrafficLight::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLight::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLight::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLight::clear_color() {
  color_ = 0;
  clear_has_color();
}
::jmc_auto::perception::TrafficLight_Color TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLight.color)
  return static_cast< ::jmc_auto::perception::TrafficLight_Color >(color_);
}
void TrafficLight::set_color(::jmc_auto::perception::TrafficLight_Color value) {
  assert(::jmc_auto::perception::TrafficLight_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLight.color)
}

// optional string id = 2;
bool TrafficLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLight.id)
  return id_.GetNoArena();
}
void TrafficLight::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLight.id)
}
#if LANG_CXX11
void TrafficLight::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.TrafficLight.id)
}
#endif
void TrafficLight::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.TrafficLight.id)
}
void TrafficLight::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.TrafficLight.id)
}
::std::string* TrafficLight::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.TrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.TrafficLight.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.TrafficLight.id)
}

// optional double confidence = 3 [default = 1];
bool TrafficLight::has_confidence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficLight::set_has_confidence() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficLight::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficLight::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
double TrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLight.confidence)
  return confidence_;
}
void TrafficLight::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLight.confidence)
}

// optional double tracking_time = 4;
bool TrafficLight::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLight::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLight::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double TrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLight.tracking_time)
  return tracking_time_;
}
void TrafficLight::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLight.tracking_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetection::kHeaderFieldNumber;
const int TrafficLightDetection::kTrafficLightFieldNumber;
const int TrafficLightDetection::kTrafficLightDebugFieldNumber;
const int TrafficLightDetection::kContainLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetection::TrafficLightDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.TrafficLightDetection)
}
TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      traffic_light_(from.traffic_light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_traffic_light_debug()) {
    traffic_light_debug_ = new ::jmc_auto::perception::TrafficLightDebug(*from.traffic_light_debug_);
  } else {
    traffic_light_debug_ = NULL;
  }
  contain_lights_ = from.contain_lights_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&contain_lights_) -
    reinterpret_cast<char*>(&header_) + sizeof(contain_lights_));
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete traffic_light_debug_;
  }
}

void TrafficLightDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDetection::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDetection& TrafficLightDetection::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLightDetection* TrafficLightDetection::New(::google::protobuf::Arena* arena) const {
  TrafficLightDetection* n = new TrafficLightDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.TrafficLightDetection)
  traffic_light_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_traffic_light_debug()) {
      GOOGLE_DCHECK(traffic_light_debug_ != NULL);
      traffic_light_debug_->::jmc_auto::perception::TrafficLightDebug::Clear();
    }
  }
  contain_lights_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.TrafficLightDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.perception.TrafficLight traffic_light = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.TrafficLightDebug traffic_light_debug = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_light_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool contain_lights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_contain_lights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contain_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.TrafficLightDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.TrafficLightDetection)
  return false;
#undef DO_
}

void TrafficLightDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traffic_light(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .jmc_auto.perception.TrafficLightDebug traffic_light_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->traffic_light_debug_, output);
  }

  // optional bool contain_lights = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->contain_lights(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.TrafficLightDetection)
}

::google::protobuf::uint8* TrafficLightDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0, n = this->traffic_light_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traffic_light(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, deterministic, target);
  }

  // optional .jmc_auto.perception.TrafficLightDebug traffic_light_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->traffic_light_debug_, deterministic, target);
  }

  // optional bool contain_lights = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->contain_lights(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.TrafficLightDetection)
  return target;
}

size_t TrafficLightDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.TrafficLightDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.perception.TrafficLight traffic_light = 1;
  {
    unsigned int count = this->traffic_light_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traffic_light(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.perception.TrafficLightDebug traffic_light_debug = 3;
    if (has_traffic_light_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_light_debug_);
    }

    // optional bool contain_lights = 4;
    if (has_contain_lights()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.TrafficLightDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_traffic_light_debug()->::jmc_auto::perception::TrafficLightDebug::MergeFrom(from.traffic_light_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      contain_lights_ = from.contain_lights_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {
  return true;
}

void TrafficLightDetection::Swap(TrafficLightDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  traffic_light_.InternalSwap(&other->traffic_light_);
  std::swap(header_, other->header_);
  std::swap(traffic_light_debug_, other->traffic_light_debug_);
  std::swap(contain_lights_, other->contain_lights_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDetection::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightDetection

// optional .jmc_auto.common.Header header = 2;
bool TrafficLightDetection::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficLightDetection::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficLightDetection::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficLightDetection::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& TrafficLightDetection::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDetection.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* TrafficLightDetection::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.TrafficLightDetection.header)
  return header_;
}
::jmc_auto::common::Header* TrafficLightDetection::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.TrafficLightDetection.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TrafficLightDetection::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.TrafficLightDetection.header)
}

// repeated .jmc_auto.perception.TrafficLight traffic_light = 1;
int TrafficLightDetection::traffic_light_size() const {
  return traffic_light_.size();
}
void TrafficLightDetection::clear_traffic_light() {
  traffic_light_.Clear();
}
const ::jmc_auto::perception::TrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Get(index);
}
::jmc_auto::perception::TrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Mutable(index);
}
::jmc_auto::perception::TrafficLight* TrafficLightDetection::add_traffic_light() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.TrafficLightDetection.traffic_light)
  return traffic_light_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::TrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.TrafficLightDetection.traffic_light)
  return &traffic_light_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::TrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.TrafficLightDetection.traffic_light)
  return traffic_light_;
}

// optional .jmc_auto.perception.TrafficLightDebug traffic_light_debug = 3;
bool TrafficLightDetection::has_traffic_light_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficLightDetection::set_has_traffic_light_debug() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficLightDetection::clear_has_traffic_light_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficLightDetection::clear_traffic_light_debug() {
  if (traffic_light_debug_ != NULL) traffic_light_debug_->::jmc_auto::perception::TrafficLightDebug::Clear();
  clear_has_traffic_light_debug();
}
const ::jmc_auto::perception::TrafficLightDebug& TrafficLightDetection::traffic_light_debug() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDetection.traffic_light_debug)
  return traffic_light_debug_ != NULL ? *traffic_light_debug_
                         : *::jmc_auto::perception::TrafficLightDebug::internal_default_instance();
}
::jmc_auto::perception::TrafficLightDebug* TrafficLightDetection::mutable_traffic_light_debug() {
  set_has_traffic_light_debug();
  if (traffic_light_debug_ == NULL) {
    traffic_light_debug_ = new ::jmc_auto::perception::TrafficLightDebug;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.TrafficLightDetection.traffic_light_debug)
  return traffic_light_debug_;
}
::jmc_auto::perception::TrafficLightDebug* TrafficLightDetection::release_traffic_light_debug() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.TrafficLightDetection.traffic_light_debug)
  clear_has_traffic_light_debug();
  ::jmc_auto::perception::TrafficLightDebug* temp = traffic_light_debug_;
  traffic_light_debug_ = NULL;
  return temp;
}
void TrafficLightDetection::set_allocated_traffic_light_debug(::jmc_auto::perception::TrafficLightDebug* traffic_light_debug) {
  delete traffic_light_debug_;
  traffic_light_debug_ = traffic_light_debug;
  if (traffic_light_debug) {
    set_has_traffic_light_debug();
  } else {
    clear_has_traffic_light_debug();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.TrafficLightDetection.traffic_light_debug)
}

// optional bool contain_lights = 4;
bool TrafficLightDetection::has_contain_lights() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficLightDetection::set_has_contain_lights() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficLightDetection::clear_has_contain_lights() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficLightDetection::clear_contain_lights() {
  contain_lights_ = false;
  clear_has_contain_lights();
}
bool TrafficLightDetection::contain_lights() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.TrafficLightDetection.contain_lights)
  return contain_lights_;
}
void TrafficLightDetection::set_contain_lights(bool value) {
  set_has_contain_lights();
  contain_lights_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.TrafficLightDetection.contain_lights)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
