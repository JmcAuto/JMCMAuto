// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/tracker_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/tracker_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace tracker_config {
class ModelConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelConfigs> {
} _ModelConfigs_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, matcher_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, filter_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, track_cached_history_size_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, track_consecutive_invisible_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, track_visible_ratio_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, collect_age_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, collect_consecutive_invisible_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, acceleration_noise_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, speed_noise_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, match_distance_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, location_distance_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, direction_distance_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, bbox_size_distance_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, point_num_distance_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, histogram_distance_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, histogram_bin_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_adaptive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, measurement_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, initial_velocity_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, xy_propagation_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, z_propagation_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, breakdown_threshold_maximum_),
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  2,
  3,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 29, sizeof(ModelConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/tracker_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ModelConfigs_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  ModelConfigs::_default_name_.Shutdown();
  ModelConfigs::_default_version_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ModelConfigs::_default_name_.DefaultConstruct();
  *ModelConfigs::_default_name_.get_mutable() = ::std::string("HmObjectTracker", 15);
  ModelConfigs::_default_version_.DefaultConstruct();
  *ModelConfigs::_default_version_.get_mutable() = ::std::string("1.1.0", 5);
  _ModelConfigs_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-modules/perception/proto/tracker_confi"
      "g.proto\022\"jmc_auto.perception.tracker_con"
      "fig\"\320\010\n\014ModelConfigs\022\035\n\004name\030\001 \001(\t:\017HmOb"
      "jectTracker\022\026\n\007version\030\002 \001(\t:\0051.1.0\022g\n\016m"
      "atcher_method\030\003 \001(\0162<.jmc_auto.perceptio"
      "n.tracker_config.ModelConfigs.MatcherTyp"
      "e:\021HUNGARIAN_MATCHER\022a\n\rfilter_method\030\004 "
      "\001(\0162;.jmc_auto.perception.tracker_config"
      ".ModelConfigs.FilterType:\rKALMAN_FILTER\022"
      ",\n!track_cached_history_size_maximum\030\005 \001"
      "(\005:\0015\022.\n#track_consecutive_invisible_max"
      "imum\030\006 \001(\005:\0011\022(\n\033track_visible_ratio_min"
      "imum\030\007 \001(\002:\0030.6\022\036\n\023collect_age_minimum\030\010"
      " \001(\005:\0010\0220\n%collect_consecutive_invisible"
      "_maximum\030\t \001(\005:\0010\022%\n\032acceleration_noise_"
      "maximum\030\n \001(\002:\0015\022 \n\023speed_noise_maximum\030"
      "\013 \001(\002:\0030.4\022!\n\026match_distance_maximum\030\014 \001"
      "(\002:\0014\022%\n\030location_distance_weight\030\r \001(\002:"
      "\0030.6\022&\n\031direction_distance_weight\030\016 \001(\002:"
      "\0030.2\022&\n\031bbox_size_distance_weight\030\017 \001(\002:"
      "\0030.1\022&\n\031point_num_distance_weight\030\020 \001(\002:"
      "\0030.1\022&\n\031histogram_distance_weight\030\021 \001(\002:"
      "\0030.5\022\036\n\022histogram_bin_size\030\022 \001(\005:\00210\022\032\n\014"
      "use_adaptive\030\023 \001(\010:\004true\022\036\n\021measurement_"
      "noise\030\024 \001(\002:\0030.4\022!\n\026initial_velocity_noi"
      "se\030\025 \001(\002:\0015\022 \n\024xy_propagation_noise\030\026 \001("
      "\002:\00210\022\037\n\023z_propagation_noise\030\027 \001(\002:\00210\022\'"
      "\n\033breakdown_threshold_maximum\030\030 \001(\002:\00210\""
      "$\n\013MatcherType\022\025\n\021HUNGARIAN_MATCHER\020\001\"\037\n"
      "\nFilterType\022\021\n\rKALMAN_FILTER\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/tracker_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* ModelConfigs_MatcherType_descriptor() {
  protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool ModelConfigs_MatcherType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelConfigs_MatcherType ModelConfigs::HUNGARIAN_MATCHER;
const ModelConfigs_MatcherType ModelConfigs::MatcherType_MIN;
const ModelConfigs_MatcherType ModelConfigs::MatcherType_MAX;
const int ModelConfigs::MatcherType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ModelConfigs_FilterType_descriptor() {
  protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool ModelConfigs_FilterType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelConfigs_FilterType ModelConfigs::KALMAN_FILTER;
const ModelConfigs_FilterType ModelConfigs::FilterType_MIN;
const ModelConfigs_FilterType ModelConfigs::FilterType_MAX;
const int ModelConfigs::FilterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kMatcherMethodFieldNumber;
const int ModelConfigs::kFilterMethodFieldNumber;
const int ModelConfigs::kTrackCachedHistorySizeMaximumFieldNumber;
const int ModelConfigs::kTrackConsecutiveInvisibleMaximumFieldNumber;
const int ModelConfigs::kTrackVisibleRatioMinimumFieldNumber;
const int ModelConfigs::kCollectAgeMinimumFieldNumber;
const int ModelConfigs::kCollectConsecutiveInvisibleMaximumFieldNumber;
const int ModelConfigs::kAccelerationNoiseMaximumFieldNumber;
const int ModelConfigs::kSpeedNoiseMaximumFieldNumber;
const int ModelConfigs::kMatchDistanceMaximumFieldNumber;
const int ModelConfigs::kLocationDistanceWeightFieldNumber;
const int ModelConfigs::kDirectionDistanceWeightFieldNumber;
const int ModelConfigs::kBboxSizeDistanceWeightFieldNumber;
const int ModelConfigs::kPointNumDistanceWeightFieldNumber;
const int ModelConfigs::kHistogramDistanceWeightFieldNumber;
const int ModelConfigs::kHistogramBinSizeFieldNumber;
const int ModelConfigs::kUseAdaptiveFieldNumber;
const int ModelConfigs::kMeasurementNoiseFieldNumber;
const int ModelConfigs::kInitialVelocityNoiseFieldNumber;
const int ModelConfigs::kXyPropagationNoiseFieldNumber;
const int ModelConfigs::kZPropagationNoiseFieldNumber;
const int ModelConfigs::kBreakdownThresholdMaximumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.tracker_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
  }
  ::memcpy(&collect_age_minimum_, &from.collect_age_minimum_,
    reinterpret_cast<char*>(&breakdown_threshold_maximum_) -
    reinterpret_cast<char*>(&collect_age_minimum_) + sizeof(breakdown_threshold_maximum_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.tracker_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  ::memset(&collect_age_minimum_, 0, reinterpret_cast<char*>(&collect_consecutive_invisible_maximum_) -
    reinterpret_cast<char*>(&collect_age_minimum_) + sizeof(collect_consecutive_invisible_maximum_));
  matcher_method_ = 1;
  filter_method_ = 1;
  track_cached_history_size_maximum_ = 5;
  track_consecutive_invisible_maximum_ = 1;
  track_visible_ratio_minimum_ = 0.6f;
  acceleration_noise_maximum_ = 5;
  speed_noise_maximum_ = 0.4f;
  match_distance_maximum_ = 4;
  location_distance_weight_ = 0.6f;
  direction_distance_weight_ = 0.2f;
  bbox_size_distance_weight_ = 0.1f;
  point_num_distance_weight_ = 0.1f;
  histogram_distance_weight_ = 0.5f;
  histogram_bin_size_ = 10;
  use_adaptive_ = true;
  measurement_noise_ = 0.4f;
  initial_velocity_noise_ = 5;
  xy_propagation_noise_ = 10;
  z_propagation_noise_ = 10;
  breakdown_threshold_maximum_ = 10;
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.tracker_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(&ModelConfigs::_default_name_.get());
  version_.DestroyNoArena(&ModelConfigs::_default_version_.get());
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelConfigs& ModelConfigs::default_instance() {
  protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.tracker_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&ModelConfigs::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&ModelConfigs::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_version_.get());
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&collect_age_minimum_, 0, reinterpret_cast<char*>(&collect_consecutive_invisible_maximum_) -
      reinterpret_cast<char*>(&collect_age_minimum_) + sizeof(collect_consecutive_invisible_maximum_));
    matcher_method_ = 1;
    filter_method_ = 1;
    track_cached_history_size_maximum_ = 5;
    track_consecutive_invisible_maximum_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    track_visible_ratio_minimum_ = 0.6f;
    acceleration_noise_maximum_ = 5;
    speed_noise_maximum_ = 0.4f;
    match_distance_maximum_ = 4;
    location_distance_weight_ = 0.6f;
    direction_distance_weight_ = 0.2f;
    bbox_size_distance_weight_ = 0.1f;
    point_num_distance_weight_ = 0.1f;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    histogram_distance_weight_ = 0.5f;
    histogram_bin_size_ = 10;
    use_adaptive_ = true;
    measurement_noise_ = 0.4f;
    initial_velocity_noise_ = 5;
    xy_propagation_noise_ = 10;
    z_propagation_noise_ = 10;
    breakdown_threshold_maximum_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.tracker_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "HmObjectTracker"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.tracker_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.1.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.tracker_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::tracker_config::ModelConfigs_MatcherType_IsValid(value)) {
            set_matcher_method(static_cast< ::jmc_auto::perception::tracker_config::ModelConfigs_MatcherType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::tracker_config::ModelConfigs_FilterType_IsValid(value)) {
            set_filter_method(static_cast< ::jmc_auto::perception::tracker_config::ModelConfigs_FilterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_cached_history_size_maximum = 5 [default = 5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_track_cached_history_size_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_cached_history_size_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_track_consecutive_invisible_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_consecutive_invisible_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float track_visible_ratio_minimum = 7 [default = 0.6];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_track_visible_ratio_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &track_visible_ratio_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 collect_age_minimum = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_collect_age_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_age_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_collect_consecutive_invisible_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_consecutive_invisible_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration_noise_maximum = 10 [default = 5];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_acceleration_noise_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_noise_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_noise_maximum = 11 [default = 0.4];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_speed_noise_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_noise_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float match_distance_maximum = 12 [default = 4];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_match_distance_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &match_distance_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float location_distance_weight = 13 [default = 0.6];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_location_distance_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_distance_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float direction_distance_weight = 14 [default = 0.2];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_direction_distance_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_distance_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bbox_size_distance_weight = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_bbox_size_distance_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bbox_size_distance_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float point_num_distance_weight = 16 [default = 0.1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_point_num_distance_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &point_num_distance_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float histogram_distance_weight = 17 [default = 0.5];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_histogram_distance_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &histogram_distance_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 histogram_bin_size = 18 [default = 10];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_histogram_bin_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &histogram_bin_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_adaptive = 19 [default = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_use_adaptive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_adaptive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float measurement_noise = 20 [default = 0.4];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_measurement_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &measurement_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float initial_velocity_noise = 21 [default = 5];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_initial_velocity_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_velocity_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xy_propagation_noise = 22 [default = 10];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_xy_propagation_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xy_propagation_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z_propagation_noise = 23 [default = 10];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_z_propagation_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_propagation_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float breakdown_threshold_maximum = 24 [default = 10];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_breakdown_threshold_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &breakdown_threshold_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.tracker_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.tracker_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.tracker_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "HmObjectTracker"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.tracker_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.1.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.tracker_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional .jmc_auto.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->matcher_method(), output);
  }

  // optional .jmc_auto.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_method(), output);
  }

  // optional int32 track_cached_history_size_maximum = 5 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->track_cached_history_size_maximum(), output);
  }

  // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->track_consecutive_invisible_maximum(), output);
  }

  // optional float track_visible_ratio_minimum = 7 [default = 0.6];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->track_visible_ratio_minimum(), output);
  }

  // optional int32 collect_age_minimum = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->collect_age_minimum(), output);
  }

  // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->collect_consecutive_invisible_maximum(), output);
  }

  // optional float acceleration_noise_maximum = 10 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->acceleration_noise_maximum(), output);
  }

  // optional float speed_noise_maximum = 11 [default = 0.4];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed_noise_maximum(), output);
  }

  // optional float match_distance_maximum = 12 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->match_distance_maximum(), output);
  }

  // optional float location_distance_weight = 13 [default = 0.6];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->location_distance_weight(), output);
  }

  // optional float direction_distance_weight = 14 [default = 0.2];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->direction_distance_weight(), output);
  }

  // optional float bbox_size_distance_weight = 15 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->bbox_size_distance_weight(), output);
  }

  // optional float point_num_distance_weight = 16 [default = 0.1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->point_num_distance_weight(), output);
  }

  // optional float histogram_distance_weight = 17 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->histogram_distance_weight(), output);
  }

  // optional int32 histogram_bin_size = 18 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->histogram_bin_size(), output);
  }

  // optional bool use_adaptive = 19 [default = true];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->use_adaptive(), output);
  }

  // optional float measurement_noise = 20 [default = 0.4];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->measurement_noise(), output);
  }

  // optional float initial_velocity_noise = 21 [default = 5];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->initial_velocity_noise(), output);
  }

  // optional float xy_propagation_noise = 22 [default = 10];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->xy_propagation_noise(), output);
  }

  // optional float z_propagation_noise = 23 [default = 10];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->z_propagation_noise(), output);
  }

  // optional float breakdown_threshold_maximum = 24 [default = 10];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->breakdown_threshold_maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.tracker_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.tracker_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "HmObjectTracker"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.tracker_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.1.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.tracker_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional .jmc_auto.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->matcher_method(), target);
  }

  // optional .jmc_auto.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_method(), target);
  }

  // optional int32 track_cached_history_size_maximum = 5 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->track_cached_history_size_maximum(), target);
  }

  // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->track_consecutive_invisible_maximum(), target);
  }

  // optional float track_visible_ratio_minimum = 7 [default = 0.6];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->track_visible_ratio_minimum(), target);
  }

  // optional int32 collect_age_minimum = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->collect_age_minimum(), target);
  }

  // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->collect_consecutive_invisible_maximum(), target);
  }

  // optional float acceleration_noise_maximum = 10 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->acceleration_noise_maximum(), target);
  }

  // optional float speed_noise_maximum = 11 [default = 0.4];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->speed_noise_maximum(), target);
  }

  // optional float match_distance_maximum = 12 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->match_distance_maximum(), target);
  }

  // optional float location_distance_weight = 13 [default = 0.6];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->location_distance_weight(), target);
  }

  // optional float direction_distance_weight = 14 [default = 0.2];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->direction_distance_weight(), target);
  }

  // optional float bbox_size_distance_weight = 15 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->bbox_size_distance_weight(), target);
  }

  // optional float point_num_distance_weight = 16 [default = 0.1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->point_num_distance_weight(), target);
  }

  // optional float histogram_distance_weight = 17 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->histogram_distance_weight(), target);
  }

  // optional int32 histogram_bin_size = 18 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->histogram_bin_size(), target);
  }

  // optional bool use_adaptive = 19 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->use_adaptive(), target);
  }

  // optional float measurement_noise = 20 [default = 0.4];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->measurement_noise(), target);
  }

  // optional float initial_velocity_noise = 21 [default = 5];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->initial_velocity_noise(), target);
  }

  // optional float xy_propagation_noise = 22 [default = 10];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->xy_propagation_noise(), target);
  }

  // optional float z_propagation_noise = 23 [default = 10];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->z_propagation_noise(), target);
  }

  // optional float breakdown_threshold_maximum = 24 [default = 10];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->breakdown_threshold_maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.tracker_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.tracker_config.ModelConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = "HmObjectTracker"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.1.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 collect_age_minimum = 8 [default = 0];
    if (has_collect_age_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_age_minimum());
    }

    // optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
    if (has_collect_consecutive_invisible_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_consecutive_invisible_maximum());
    }

    // optional .jmc_auto.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
    if (has_matcher_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matcher_method());
    }

    // optional .jmc_auto.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
    if (has_filter_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_method());
    }

    // optional int32 track_cached_history_size_maximum = 5 [default = 5];
    if (has_track_cached_history_size_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_cached_history_size_maximum());
    }

    // optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
    if (has_track_consecutive_invisible_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_consecutive_invisible_maximum());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float track_visible_ratio_minimum = 7 [default = 0.6];
    if (has_track_visible_ratio_minimum()) {
      total_size += 1 + 4;
    }

    // optional float acceleration_noise_maximum = 10 [default = 5];
    if (has_acceleration_noise_maximum()) {
      total_size += 1 + 4;
    }

    // optional float speed_noise_maximum = 11 [default = 0.4];
    if (has_speed_noise_maximum()) {
      total_size += 1 + 4;
    }

    // optional float match_distance_maximum = 12 [default = 4];
    if (has_match_distance_maximum()) {
      total_size += 1 + 4;
    }

    // optional float location_distance_weight = 13 [default = 0.6];
    if (has_location_distance_weight()) {
      total_size += 1 + 4;
    }

    // optional float direction_distance_weight = 14 [default = 0.2];
    if (has_direction_distance_weight()) {
      total_size += 1 + 4;
    }

    // optional float bbox_size_distance_weight = 15 [default = 0.1];
    if (has_bbox_size_distance_weight()) {
      total_size += 1 + 4;
    }

    // optional float point_num_distance_weight = 16 [default = 0.1];
    if (has_point_num_distance_weight()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float histogram_distance_weight = 17 [default = 0.5];
    if (has_histogram_distance_weight()) {
      total_size += 2 + 4;
    }

    // optional int32 histogram_bin_size = 18 [default = 10];
    if (has_histogram_bin_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->histogram_bin_size());
    }

    // optional bool use_adaptive = 19 [default = true];
    if (has_use_adaptive()) {
      total_size += 2 + 1;
    }

    // optional float measurement_noise = 20 [default = 0.4];
    if (has_measurement_noise()) {
      total_size += 2 + 4;
    }

    // optional float initial_velocity_noise = 21 [default = 5];
    if (has_initial_velocity_noise()) {
      total_size += 2 + 4;
    }

    // optional float xy_propagation_noise = 22 [default = 10];
    if (has_xy_propagation_noise()) {
      total_size += 2 + 4;
    }

    // optional float z_propagation_noise = 23 [default = 10];
    if (has_z_propagation_noise()) {
      total_size += 2 + 4;
    }

    // optional float breakdown_threshold_maximum = 24 [default = 10];
    if (has_breakdown_threshold_maximum()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.tracker_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.tracker_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.tracker_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.tracker_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      collect_age_minimum_ = from.collect_age_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      collect_consecutive_invisible_maximum_ = from.collect_consecutive_invisible_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      matcher_method_ = from.matcher_method_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_method_ = from.filter_method_;
    }
    if (cached_has_bits & 0x00000040u) {
      track_cached_history_size_maximum_ = from.track_cached_history_size_maximum_;
    }
    if (cached_has_bits & 0x00000080u) {
      track_consecutive_invisible_maximum_ = from.track_consecutive_invisible_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      track_visible_ratio_minimum_ = from.track_visible_ratio_minimum_;
    }
    if (cached_has_bits & 0x00000200u) {
      acceleration_noise_maximum_ = from.acceleration_noise_maximum_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_noise_maximum_ = from.speed_noise_maximum_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_distance_maximum_ = from.match_distance_maximum_;
    }
    if (cached_has_bits & 0x00001000u) {
      location_distance_weight_ = from.location_distance_weight_;
    }
    if (cached_has_bits & 0x00002000u) {
      direction_distance_weight_ = from.direction_distance_weight_;
    }
    if (cached_has_bits & 0x00004000u) {
      bbox_size_distance_weight_ = from.bbox_size_distance_weight_;
    }
    if (cached_has_bits & 0x00008000u) {
      point_num_distance_weight_ = from.point_num_distance_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      histogram_distance_weight_ = from.histogram_distance_weight_;
    }
    if (cached_has_bits & 0x00020000u) {
      histogram_bin_size_ = from.histogram_bin_size_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_adaptive_ = from.use_adaptive_;
    }
    if (cached_has_bits & 0x00080000u) {
      measurement_noise_ = from.measurement_noise_;
    }
    if (cached_has_bits & 0x00100000u) {
      initial_velocity_noise_ = from.initial_velocity_noise_;
    }
    if (cached_has_bits & 0x00200000u) {
      xy_propagation_noise_ = from.xy_propagation_noise_;
    }
    if (cached_has_bits & 0x00400000u) {
      z_propagation_noise_ = from.z_propagation_noise_;
    }
    if (cached_has_bits & 0x00800000u) {
      breakdown_threshold_maximum_ = from.breakdown_threshold_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.tracker_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.tracker_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(collect_age_minimum_, other->collect_age_minimum_);
  std::swap(collect_consecutive_invisible_maximum_, other->collect_consecutive_invisible_maximum_);
  std::swap(matcher_method_, other->matcher_method_);
  std::swap(filter_method_, other->filter_method_);
  std::swap(track_cached_history_size_maximum_, other->track_cached_history_size_maximum_);
  std::swap(track_consecutive_invisible_maximum_, other->track_consecutive_invisible_maximum_);
  std::swap(track_visible_ratio_minimum_, other->track_visible_ratio_minimum_);
  std::swap(acceleration_noise_maximum_, other->acceleration_noise_maximum_);
  std::swap(speed_noise_maximum_, other->speed_noise_maximum_);
  std::swap(match_distance_maximum_, other->match_distance_maximum_);
  std::swap(location_distance_weight_, other->location_distance_weight_);
  std::swap(direction_distance_weight_, other->direction_distance_weight_);
  std::swap(bbox_size_distance_weight_, other->bbox_size_distance_weight_);
  std::swap(point_num_distance_weight_, other->point_num_distance_weight_);
  std::swap(histogram_distance_weight_, other->histogram_distance_weight_);
  std::swap(histogram_bin_size_, other->histogram_bin_size_);
  std::swap(use_adaptive_, other->use_adaptive_);
  std::swap(measurement_noise_, other->measurement_noise_);
  std::swap(initial_velocity_noise_, other->initial_velocity_noise_);
  std::swap(xy_propagation_noise_, other->xy_propagation_noise_);
  std::swap(z_propagation_noise_, other->z_propagation_noise_);
  std::swap(breakdown_threshold_maximum_, other->breakdown_threshold_maximum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftracker_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "HmObjectTracker"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(&ModelConfigs::_default_name_.get());
  clear_has_name();
}
const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.name)
  return name_.GetNoArena();
}
void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.name)
}
#if LANG_CXX11
void ModelConfigs::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &ModelConfigs::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.tracker_config.ModelConfigs.name)
}
#endif
void ModelConfigs::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.tracker_config.ModelConfigs.name)
}
void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.tracker_config.ModelConfigs.name)
}
::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.tracker_config.ModelConfigs.name)
  return name_.MutableNoArena(&ModelConfigs::_default_name_.get());
}
::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.tracker_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&ModelConfigs::_default_name_.get());
}
void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&ModelConfigs::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.tracker_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.1.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(&ModelConfigs::_default_version_.get());
  clear_has_version();
}
const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.version)
  return version_.GetNoArena();
}
void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.version)
}
#if LANG_CXX11
void ModelConfigs::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &ModelConfigs::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.tracker_config.ModelConfigs.version)
}
#endif
void ModelConfigs::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.tracker_config.ModelConfigs.version)
}
void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.tracker_config.ModelConfigs.version)
}
::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.tracker_config.ModelConfigs.version)
  return version_.MutableNoArena(&ModelConfigs::_default_version_.get());
}
::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.tracker_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&ModelConfigs::_default_version_.get());
}
void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&ModelConfigs::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.tracker_config.ModelConfigs.version)
}

// optional .jmc_auto.perception.tracker_config.ModelConfigs.MatcherType matcher_method = 3 [default = HUNGARIAN_MATCHER];
bool ModelConfigs::has_matcher_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_matcher_method() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_matcher_method() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_matcher_method() {
  matcher_method_ = 1;
  clear_has_matcher_method();
}
::jmc_auto::perception::tracker_config::ModelConfigs_MatcherType ModelConfigs::matcher_method() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.matcher_method)
  return static_cast< ::jmc_auto::perception::tracker_config::ModelConfigs_MatcherType >(matcher_method_);
}
void ModelConfigs::set_matcher_method(::jmc_auto::perception::tracker_config::ModelConfigs_MatcherType value) {
  assert(::jmc_auto::perception::tracker_config::ModelConfigs_MatcherType_IsValid(value));
  set_has_matcher_method();
  matcher_method_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.matcher_method)
}

// optional .jmc_auto.perception.tracker_config.ModelConfigs.FilterType filter_method = 4 [default = KALMAN_FILTER];
bool ModelConfigs::has_filter_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_filter_method() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_filter_method() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_filter_method() {
  filter_method_ = 1;
  clear_has_filter_method();
}
::jmc_auto::perception::tracker_config::ModelConfigs_FilterType ModelConfigs::filter_method() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.filter_method)
  return static_cast< ::jmc_auto::perception::tracker_config::ModelConfigs_FilterType >(filter_method_);
}
void ModelConfigs::set_filter_method(::jmc_auto::perception::tracker_config::ModelConfigs_FilterType value) {
  assert(::jmc_auto::perception::tracker_config::ModelConfigs_FilterType_IsValid(value));
  set_has_filter_method();
  filter_method_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.filter_method)
}

// optional int32 track_cached_history_size_maximum = 5 [default = 5];
bool ModelConfigs::has_track_cached_history_size_maximum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_track_cached_history_size_maximum() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_track_cached_history_size_maximum() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_track_cached_history_size_maximum() {
  track_cached_history_size_maximum_ = 5;
  clear_has_track_cached_history_size_maximum();
}
::google::protobuf::int32 ModelConfigs::track_cached_history_size_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.track_cached_history_size_maximum)
  return track_cached_history_size_maximum_;
}
void ModelConfigs::set_track_cached_history_size_maximum(::google::protobuf::int32 value) {
  set_has_track_cached_history_size_maximum();
  track_cached_history_size_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.track_cached_history_size_maximum)
}

// optional int32 track_consecutive_invisible_maximum = 6 [default = 1];
bool ModelConfigs::has_track_consecutive_invisible_maximum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_track_consecutive_invisible_maximum() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelConfigs::clear_has_track_consecutive_invisible_maximum() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelConfigs::clear_track_consecutive_invisible_maximum() {
  track_consecutive_invisible_maximum_ = 1;
  clear_has_track_consecutive_invisible_maximum();
}
::google::protobuf::int32 ModelConfigs::track_consecutive_invisible_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.track_consecutive_invisible_maximum)
  return track_consecutive_invisible_maximum_;
}
void ModelConfigs::set_track_consecutive_invisible_maximum(::google::protobuf::int32 value) {
  set_has_track_consecutive_invisible_maximum();
  track_consecutive_invisible_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.track_consecutive_invisible_maximum)
}

// optional float track_visible_ratio_minimum = 7 [default = 0.6];
bool ModelConfigs::has_track_visible_ratio_minimum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_track_visible_ratio_minimum() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelConfigs::clear_has_track_visible_ratio_minimum() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelConfigs::clear_track_visible_ratio_minimum() {
  track_visible_ratio_minimum_ = 0.6f;
  clear_has_track_visible_ratio_minimum();
}
float ModelConfigs::track_visible_ratio_minimum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.track_visible_ratio_minimum)
  return track_visible_ratio_minimum_;
}
void ModelConfigs::set_track_visible_ratio_minimum(float value) {
  set_has_track_visible_ratio_minimum();
  track_visible_ratio_minimum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.track_visible_ratio_minimum)
}

// optional int32 collect_age_minimum = 8 [default = 0];
bool ModelConfigs::has_collect_age_minimum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_collect_age_minimum() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_collect_age_minimum() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_collect_age_minimum() {
  collect_age_minimum_ = 0;
  clear_has_collect_age_minimum();
}
::google::protobuf::int32 ModelConfigs::collect_age_minimum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.collect_age_minimum)
  return collect_age_minimum_;
}
void ModelConfigs::set_collect_age_minimum(::google::protobuf::int32 value) {
  set_has_collect_age_minimum();
  collect_age_minimum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.collect_age_minimum)
}

// optional int32 collect_consecutive_invisible_maximum = 9 [default = 0];
bool ModelConfigs::has_collect_consecutive_invisible_maximum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_collect_consecutive_invisible_maximum() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_collect_consecutive_invisible_maximum() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_collect_consecutive_invisible_maximum() {
  collect_consecutive_invisible_maximum_ = 0;
  clear_has_collect_consecutive_invisible_maximum();
}
::google::protobuf::int32 ModelConfigs::collect_consecutive_invisible_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.collect_consecutive_invisible_maximum)
  return collect_consecutive_invisible_maximum_;
}
void ModelConfigs::set_collect_consecutive_invisible_maximum(::google::protobuf::int32 value) {
  set_has_collect_consecutive_invisible_maximum();
  collect_consecutive_invisible_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.collect_consecutive_invisible_maximum)
}

// optional float acceleration_noise_maximum = 10 [default = 5];
bool ModelConfigs::has_acceleration_noise_maximum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_acceleration_noise_maximum() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelConfigs::clear_has_acceleration_noise_maximum() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelConfigs::clear_acceleration_noise_maximum() {
  acceleration_noise_maximum_ = 5;
  clear_has_acceleration_noise_maximum();
}
float ModelConfigs::acceleration_noise_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.acceleration_noise_maximum)
  return acceleration_noise_maximum_;
}
void ModelConfigs::set_acceleration_noise_maximum(float value) {
  set_has_acceleration_noise_maximum();
  acceleration_noise_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.acceleration_noise_maximum)
}

// optional float speed_noise_maximum = 11 [default = 0.4];
bool ModelConfigs::has_speed_noise_maximum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_speed_noise_maximum() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelConfigs::clear_has_speed_noise_maximum() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelConfigs::clear_speed_noise_maximum() {
  speed_noise_maximum_ = 0.4f;
  clear_has_speed_noise_maximum();
}
float ModelConfigs::speed_noise_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.speed_noise_maximum)
  return speed_noise_maximum_;
}
void ModelConfigs::set_speed_noise_maximum(float value) {
  set_has_speed_noise_maximum();
  speed_noise_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.speed_noise_maximum)
}

// optional float match_distance_maximum = 12 [default = 4];
bool ModelConfigs::has_match_distance_maximum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_match_distance_maximum() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelConfigs::clear_has_match_distance_maximum() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelConfigs::clear_match_distance_maximum() {
  match_distance_maximum_ = 4;
  clear_has_match_distance_maximum();
}
float ModelConfigs::match_distance_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.match_distance_maximum)
  return match_distance_maximum_;
}
void ModelConfigs::set_match_distance_maximum(float value) {
  set_has_match_distance_maximum();
  match_distance_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.match_distance_maximum)
}

// optional float location_distance_weight = 13 [default = 0.6];
bool ModelConfigs::has_location_distance_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_location_distance_weight() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelConfigs::clear_has_location_distance_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelConfigs::clear_location_distance_weight() {
  location_distance_weight_ = 0.6f;
  clear_has_location_distance_weight();
}
float ModelConfigs::location_distance_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.location_distance_weight)
  return location_distance_weight_;
}
void ModelConfigs::set_location_distance_weight(float value) {
  set_has_location_distance_weight();
  location_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.location_distance_weight)
}

// optional float direction_distance_weight = 14 [default = 0.2];
bool ModelConfigs::has_direction_distance_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModelConfigs::set_has_direction_distance_weight() {
  _has_bits_[0] |= 0x00002000u;
}
void ModelConfigs::clear_has_direction_distance_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModelConfigs::clear_direction_distance_weight() {
  direction_distance_weight_ = 0.2f;
  clear_has_direction_distance_weight();
}
float ModelConfigs::direction_distance_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.direction_distance_weight)
  return direction_distance_weight_;
}
void ModelConfigs::set_direction_distance_weight(float value) {
  set_has_direction_distance_weight();
  direction_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.direction_distance_weight)
}

// optional float bbox_size_distance_weight = 15 [default = 0.1];
bool ModelConfigs::has_bbox_size_distance_weight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModelConfigs::set_has_bbox_size_distance_weight() {
  _has_bits_[0] |= 0x00004000u;
}
void ModelConfigs::clear_has_bbox_size_distance_weight() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModelConfigs::clear_bbox_size_distance_weight() {
  bbox_size_distance_weight_ = 0.1f;
  clear_has_bbox_size_distance_weight();
}
float ModelConfigs::bbox_size_distance_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.bbox_size_distance_weight)
  return bbox_size_distance_weight_;
}
void ModelConfigs::set_bbox_size_distance_weight(float value) {
  set_has_bbox_size_distance_weight();
  bbox_size_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.bbox_size_distance_weight)
}

// optional float point_num_distance_weight = 16 [default = 0.1];
bool ModelConfigs::has_point_num_distance_weight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModelConfigs::set_has_point_num_distance_weight() {
  _has_bits_[0] |= 0x00008000u;
}
void ModelConfigs::clear_has_point_num_distance_weight() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModelConfigs::clear_point_num_distance_weight() {
  point_num_distance_weight_ = 0.1f;
  clear_has_point_num_distance_weight();
}
float ModelConfigs::point_num_distance_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.point_num_distance_weight)
  return point_num_distance_weight_;
}
void ModelConfigs::set_point_num_distance_weight(float value) {
  set_has_point_num_distance_weight();
  point_num_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.point_num_distance_weight)
}

// optional float histogram_distance_weight = 17 [default = 0.5];
bool ModelConfigs::has_histogram_distance_weight() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModelConfigs::set_has_histogram_distance_weight() {
  _has_bits_[0] |= 0x00010000u;
}
void ModelConfigs::clear_has_histogram_distance_weight() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModelConfigs::clear_histogram_distance_weight() {
  histogram_distance_weight_ = 0.5f;
  clear_has_histogram_distance_weight();
}
float ModelConfigs::histogram_distance_weight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.histogram_distance_weight)
  return histogram_distance_weight_;
}
void ModelConfigs::set_histogram_distance_weight(float value) {
  set_has_histogram_distance_weight();
  histogram_distance_weight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.histogram_distance_weight)
}

// optional int32 histogram_bin_size = 18 [default = 10];
bool ModelConfigs::has_histogram_bin_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModelConfigs::set_has_histogram_bin_size() {
  _has_bits_[0] |= 0x00020000u;
}
void ModelConfigs::clear_has_histogram_bin_size() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModelConfigs::clear_histogram_bin_size() {
  histogram_bin_size_ = 10;
  clear_has_histogram_bin_size();
}
::google::protobuf::int32 ModelConfigs::histogram_bin_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.histogram_bin_size)
  return histogram_bin_size_;
}
void ModelConfigs::set_histogram_bin_size(::google::protobuf::int32 value) {
  set_has_histogram_bin_size();
  histogram_bin_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.histogram_bin_size)
}

// optional bool use_adaptive = 19 [default = true];
bool ModelConfigs::has_use_adaptive() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModelConfigs::set_has_use_adaptive() {
  _has_bits_[0] |= 0x00040000u;
}
void ModelConfigs::clear_has_use_adaptive() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModelConfigs::clear_use_adaptive() {
  use_adaptive_ = true;
  clear_has_use_adaptive();
}
bool ModelConfigs::use_adaptive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.use_adaptive)
  return use_adaptive_;
}
void ModelConfigs::set_use_adaptive(bool value) {
  set_has_use_adaptive();
  use_adaptive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.use_adaptive)
}

// optional float measurement_noise = 20 [default = 0.4];
bool ModelConfigs::has_measurement_noise() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModelConfigs::set_has_measurement_noise() {
  _has_bits_[0] |= 0x00080000u;
}
void ModelConfigs::clear_has_measurement_noise() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModelConfigs::clear_measurement_noise() {
  measurement_noise_ = 0.4f;
  clear_has_measurement_noise();
}
float ModelConfigs::measurement_noise() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.measurement_noise)
  return measurement_noise_;
}
void ModelConfigs::set_measurement_noise(float value) {
  set_has_measurement_noise();
  measurement_noise_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.measurement_noise)
}

// optional float initial_velocity_noise = 21 [default = 5];
bool ModelConfigs::has_initial_velocity_noise() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModelConfigs::set_has_initial_velocity_noise() {
  _has_bits_[0] |= 0x00100000u;
}
void ModelConfigs::clear_has_initial_velocity_noise() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModelConfigs::clear_initial_velocity_noise() {
  initial_velocity_noise_ = 5;
  clear_has_initial_velocity_noise();
}
float ModelConfigs::initial_velocity_noise() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.initial_velocity_noise)
  return initial_velocity_noise_;
}
void ModelConfigs::set_initial_velocity_noise(float value) {
  set_has_initial_velocity_noise();
  initial_velocity_noise_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.initial_velocity_noise)
}

// optional float xy_propagation_noise = 22 [default = 10];
bool ModelConfigs::has_xy_propagation_noise() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModelConfigs::set_has_xy_propagation_noise() {
  _has_bits_[0] |= 0x00200000u;
}
void ModelConfigs::clear_has_xy_propagation_noise() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModelConfigs::clear_xy_propagation_noise() {
  xy_propagation_noise_ = 10;
  clear_has_xy_propagation_noise();
}
float ModelConfigs::xy_propagation_noise() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.xy_propagation_noise)
  return xy_propagation_noise_;
}
void ModelConfigs::set_xy_propagation_noise(float value) {
  set_has_xy_propagation_noise();
  xy_propagation_noise_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.xy_propagation_noise)
}

// optional float z_propagation_noise = 23 [default = 10];
bool ModelConfigs::has_z_propagation_noise() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModelConfigs::set_has_z_propagation_noise() {
  _has_bits_[0] |= 0x00400000u;
}
void ModelConfigs::clear_has_z_propagation_noise() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModelConfigs::clear_z_propagation_noise() {
  z_propagation_noise_ = 10;
  clear_has_z_propagation_noise();
}
float ModelConfigs::z_propagation_noise() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.z_propagation_noise)
  return z_propagation_noise_;
}
void ModelConfigs::set_z_propagation_noise(float value) {
  set_has_z_propagation_noise();
  z_propagation_noise_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.z_propagation_noise)
}

// optional float breakdown_threshold_maximum = 24 [default = 10];
bool ModelConfigs::has_breakdown_threshold_maximum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModelConfigs::set_has_breakdown_threshold_maximum() {
  _has_bits_[0] |= 0x00800000u;
}
void ModelConfigs::clear_has_breakdown_threshold_maximum() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModelConfigs::clear_breakdown_threshold_maximum() {
  breakdown_threshold_maximum_ = 10;
  clear_has_breakdown_threshold_maximum();
}
float ModelConfigs::breakdown_threshold_maximum() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.tracker_config.ModelConfigs.breakdown_threshold_maximum)
  return breakdown_threshold_maximum_;
}
void ModelConfigs::set_breakdown_threshold_maximum(float value) {
  set_has_breakdown_threshold_maximum();
  breakdown_threshold_maximum_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.tracker_config.ModelConfigs.breakdown_threshold_maximum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker_config
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
