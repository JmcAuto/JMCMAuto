// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/modest_radar_detector_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/proto/modest_radar_detector_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace modest_radar_detector_config {
class ModelConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelConfigs> {
} _ModelConfigs_default_instance_;

namespace protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_had_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, delay_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_fp_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_bicycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, probexist_unknown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_vehicle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_bicycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_bicycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_bicycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_bicycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_vel_rms_unknown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_vel_rms_unknown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lo_dist_rms_unknown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, la_dist_rms_unknown_),
  0,
  1,
  3,
  2,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 31, sizeof(ModelConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/proto/modest_radar_detector_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ModelConfigs_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  ModelConfigs::_default_name_.Shutdown();
  ModelConfigs::_default_version_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ModelConfigs::_default_name_.DefaultConstruct();
  *ModelConfigs::_default_name_.get_mutable() = ::std::string("ModestRadarDetector", 19);
  ModelConfigs::_default_version_.DefaultConstruct();
  *ModelConfigs::_default_version_.get_mutable() = ::std::string("1.0.0", 5);
  _ModelConfigs_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n;modules/perception/proto/modest_radar_"
      "detector_config.proto\0220jmc_auto.percepti"
      "on.modest_radar_detector_config\"\334\006\n\014Mode"
      "lConfigs\022!\n\004name\030\001 \001(\t:\023ModestRadarDetec"
      "tor\022\026\n\007version\030\002 \001(\t:\0051.0.0\022\031\n\013use_had_m"
      "ap\030\003 \001(\010:\004true\022\025\n\tmax_theta\030\004 \001(\001:\00230\022\027\n"
      "\014delay_frames\030\005 \001(\005:\0014\022\033\n\ruse_fp_filter\030"
      "\006 \001(\010:\004true\022\036\n\021probexist_vehicle\030\007 \001(\001:\003"
      "0.9\022\"\n\024probexist_pedestrian\030\010 \001(\001:\0040.25\022"
      "\037\n\021probexist_bicycle\030\t \001(\001:\0040.25\022\037\n\021prob"
      "exist_unknown\030\n \001(\001:\0040.99\022\037\n\022lo_vel_rms_"
      "vehicle\030\013 \001(\001:\0030.2\022\037\n\022la_vel_rms_vehicle"
      "\030\014 \001(\001:\0030.3\022!\n\023lo_dist_rms_vehicle\030\r \001(\001"
      ":\0040.15\022 \n\023la_dist_rms_vehicle\030\016 \001(\001:\0030.2"
      "\022\"\n\025lo_vel_rms_pedestrian\030\017 \001(\001:\0030.5\022\"\n\025"
      "la_vel_rms_pedestrian\030\020 \001(\001:\0030.8\022#\n\026lo_d"
      "ist_rms_pedestrian\030\021 \001(\001:\0030.5\022#\n\026la_dist"
      "_rms_pedestrian\030\022 \001(\001:\0030.8\022\037\n\022lo_vel_rms"
      "_bicycle\030\023 \001(\001:\0030.5\022\037\n\022la_vel_rms_bicycl"
      "e\030\024 \001(\001:\0030.8\022 \n\023lo_dist_rms_bicycle\030\025 \001("
      "\001:\0030.5\022 \n\023la_dist_rms_bicycle\030\026 \001(\001:\0030.8"
      "\022\037\n\022lo_vel_rms_unknown\030\027 \001(\001:\0030.2\022\037\n\022la_"
      "vel_rms_unknown\030\030 \001(\001:\0030.3\022 \n\023lo_dist_rm"
      "s_unknown\030\031 \001(\001:\0030.2\022 \n\023la_dist_rms_unkn"
      "own\030\032 \001(\001:\0030.3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 974);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/modest_radar_detector_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kUseHadMapFieldNumber;
const int ModelConfigs::kMaxThetaFieldNumber;
const int ModelConfigs::kDelayFramesFieldNumber;
const int ModelConfigs::kUseFpFilterFieldNumber;
const int ModelConfigs::kProbexistVehicleFieldNumber;
const int ModelConfigs::kProbexistPedestrianFieldNumber;
const int ModelConfigs::kProbexistBicycleFieldNumber;
const int ModelConfigs::kProbexistUnknownFieldNumber;
const int ModelConfigs::kLoVelRmsVehicleFieldNumber;
const int ModelConfigs::kLaVelRmsVehicleFieldNumber;
const int ModelConfigs::kLoDistRmsVehicleFieldNumber;
const int ModelConfigs::kLaDistRmsVehicleFieldNumber;
const int ModelConfigs::kLoVelRmsPedestrianFieldNumber;
const int ModelConfigs::kLaVelRmsPedestrianFieldNumber;
const int ModelConfigs::kLoDistRmsPedestrianFieldNumber;
const int ModelConfigs::kLaDistRmsPedestrianFieldNumber;
const int ModelConfigs::kLoVelRmsBicycleFieldNumber;
const int ModelConfigs::kLaVelRmsBicycleFieldNumber;
const int ModelConfigs::kLoDistRmsBicycleFieldNumber;
const int ModelConfigs::kLaDistRmsBicycleFieldNumber;
const int ModelConfigs::kLoVelRmsUnknownFieldNumber;
const int ModelConfigs::kLaVelRmsUnknownFieldNumber;
const int ModelConfigs::kLoDistRmsUnknownFieldNumber;
const int ModelConfigs::kLaDistRmsUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
  }
  ::memcpy(&max_theta_, &from.max_theta_,
    reinterpret_cast<char*>(&la_dist_rms_unknown_) -
    reinterpret_cast<char*>(&max_theta_) + sizeof(la_dist_rms_unknown_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  max_theta_ = 30;
  use_had_map_ = true;
  use_fp_filter_ = true;
  delay_frames_ = 4;
  probexist_vehicle_ = 0.9;
  probexist_pedestrian_ = 0.25;
  probexist_bicycle_ = 0.25;
  probexist_unknown_ = 0.99;
  lo_vel_rms_vehicle_ = 0.2;
  la_vel_rms_vehicle_ = 0.3;
  lo_dist_rms_vehicle_ = 0.15;
  la_dist_rms_vehicle_ = 0.2;
  lo_vel_rms_pedestrian_ = 0.5;
  la_vel_rms_pedestrian_ = 0.8;
  lo_dist_rms_pedestrian_ = 0.5;
  la_dist_rms_pedestrian_ = 0.8;
  lo_vel_rms_bicycle_ = 0.5;
  la_vel_rms_bicycle_ = 0.8;
  lo_dist_rms_bicycle_ = 0.5;
  la_dist_rms_bicycle_ = 0.8;
  lo_vel_rms_unknown_ = 0.2;
  la_vel_rms_unknown_ = 0.3;
  lo_dist_rms_unknown_ = 0.2;
  la_dist_rms_unknown_ = 0.3;
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(&ModelConfigs::_default_name_.get());
  version_.DestroyNoArena(&ModelConfigs::_default_version_.get());
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelConfigs& ModelConfigs::default_instance() {
  protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&ModelConfigs::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&ModelConfigs::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_version_.get());
    }
    max_theta_ = 30;
    use_had_map_ = true;
    use_fp_filter_ = true;
    delay_frames_ = 4;
    probexist_vehicle_ = 0.9;
    probexist_pedestrian_ = 0.25;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    probexist_bicycle_ = 0.25;
    probexist_unknown_ = 0.99;
    lo_vel_rms_vehicle_ = 0.2;
    la_vel_rms_vehicle_ = 0.3;
    lo_dist_rms_vehicle_ = 0.15;
    la_dist_rms_vehicle_ = 0.2;
    lo_vel_rms_pedestrian_ = 0.5;
    la_vel_rms_pedestrian_ = 0.8;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    lo_dist_rms_pedestrian_ = 0.5;
    la_dist_rms_pedestrian_ = 0.8;
    lo_vel_rms_bicycle_ = 0.5;
    la_vel_rms_bicycle_ = 0.8;
    lo_dist_rms_bicycle_ = 0.5;
    la_dist_rms_bicycle_ = 0.8;
    lo_vel_rms_unknown_ = 0.2;
    la_vel_rms_unknown_ = 0.3;
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    lo_dist_rms_unknown_ = 0.2;
    la_dist_rms_unknown_ = 0.3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "ModestRadarDetector"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_had_map = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_had_map();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_had_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_theta = 4 [default = 30];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_max_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay_frames = 5 [default = 4];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_delay_frames();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fp_filter = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_use_fp_filter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fp_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probexist_vehicle = 7 [default = 0.9];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_probexist_vehicle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probexist_pedestrian = 8 [default = 0.25];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_probexist_pedestrian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probexist_bicycle = 9 [default = 0.25];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_probexist_bicycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_bicycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probexist_unknown = 10 [default = 0.99];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_probexist_unknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_lo_vel_rms_vehicle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_vel_rms_vehicle = 12 [default = 0.3];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_la_vel_rms_vehicle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_lo_dist_rms_vehicle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_dist_rms_vehicle = 14 [default = 0.2];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_la_dist_rms_vehicle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_lo_vel_rms_pedestrian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_la_vel_rms_pedestrian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_lo_dist_rms_pedestrian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_la_dist_rms_pedestrian();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_lo_vel_rms_bicycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_bicycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_vel_rms_bicycle = 20 [default = 0.8];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_la_vel_rms_bicycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_bicycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_lo_dist_rms_bicycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_bicycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_dist_rms_bicycle = 22 [default = 0.8];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_la_dist_rms_bicycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_bicycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_vel_rms_unknown = 23 [default = 0.2];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_lo_vel_rms_unknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_vel_rms_unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_vel_rms_unknown = 24 [default = 0.3];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_la_vel_rms_unknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_vel_rms_unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lo_dist_rms_unknown = 25 [default = 0.2];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_lo_dist_rms_unknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lo_dist_rms_unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double la_dist_rms_unknown = 26 [default = 0.3];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u)) {
          set_has_la_dist_rms_unknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &la_dist_rms_unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "ModestRadarDetector"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional bool use_had_map = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_had_map(), output);
  }

  // optional double max_theta = 4 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_theta(), output);
  }

  // optional int32 delay_frames = 5 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delay_frames(), output);
  }

  // optional bool use_fp_filter = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_fp_filter(), output);
  }

  // optional double probexist_vehicle = 7 [default = 0.9];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->probexist_vehicle(), output);
  }

  // optional double probexist_pedestrian = 8 [default = 0.25];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->probexist_pedestrian(), output);
  }

  // optional double probexist_bicycle = 9 [default = 0.25];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->probexist_bicycle(), output);
  }

  // optional double probexist_unknown = 10 [default = 0.99];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->probexist_unknown(), output);
  }

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lo_vel_rms_vehicle(), output);
  }

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->la_vel_rms_vehicle(), output);
  }

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lo_dist_rms_vehicle(), output);
  }

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->la_dist_rms_vehicle(), output);
  }

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lo_vel_rms_pedestrian(), output);
  }

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->la_vel_rms_pedestrian(), output);
  }

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lo_dist_rms_pedestrian(), output);
  }

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->la_dist_rms_pedestrian(), output);
  }

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->lo_vel_rms_bicycle(), output);
  }

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->la_vel_rms_bicycle(), output);
  }

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->lo_dist_rms_bicycle(), output);
  }

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->la_dist_rms_bicycle(), output);
  }

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lo_vel_rms_unknown(), output);
  }

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->la_vel_rms_unknown(), output);
  }

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lo_dist_rms_unknown(), output);
  }

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->la_dist_rms_unknown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "ModestRadarDetector"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional bool use_had_map = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_had_map(), target);
  }

  // optional double max_theta = 4 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_theta(), target);
  }

  // optional int32 delay_frames = 5 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delay_frames(), target);
  }

  // optional bool use_fp_filter = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_fp_filter(), target);
  }

  // optional double probexist_vehicle = 7 [default = 0.9];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->probexist_vehicle(), target);
  }

  // optional double probexist_pedestrian = 8 [default = 0.25];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->probexist_pedestrian(), target);
  }

  // optional double probexist_bicycle = 9 [default = 0.25];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->probexist_bicycle(), target);
  }

  // optional double probexist_unknown = 10 [default = 0.99];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->probexist_unknown(), target);
  }

  // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lo_vel_rms_vehicle(), target);
  }

  // optional double la_vel_rms_vehicle = 12 [default = 0.3];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->la_vel_rms_vehicle(), target);
  }

  // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lo_dist_rms_vehicle(), target);
  }

  // optional double la_dist_rms_vehicle = 14 [default = 0.2];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->la_dist_rms_vehicle(), target);
  }

  // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lo_vel_rms_pedestrian(), target);
  }

  // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->la_vel_rms_pedestrian(), target);
  }

  // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lo_dist_rms_pedestrian(), target);
  }

  // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->la_dist_rms_pedestrian(), target);
  }

  // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->lo_vel_rms_bicycle(), target);
  }

  // optional double la_vel_rms_bicycle = 20 [default = 0.8];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->la_vel_rms_bicycle(), target);
  }

  // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->lo_dist_rms_bicycle(), target);
  }

  // optional double la_dist_rms_bicycle = 22 [default = 0.8];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->la_dist_rms_bicycle(), target);
  }

  // optional double lo_vel_rms_unknown = 23 [default = 0.2];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lo_vel_rms_unknown(), target);
  }

  // optional double la_vel_rms_unknown = 24 [default = 0.3];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->la_vel_rms_unknown(), target);
  }

  // optional double lo_dist_rms_unknown = 25 [default = 0.2];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lo_dist_rms_unknown(), target);
  }

  // optional double la_dist_rms_unknown = 26 [default = 0.3];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->la_dist_rms_unknown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = "ModestRadarDetector"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional double max_theta = 4 [default = 30];
    if (has_max_theta()) {
      total_size += 1 + 8;
    }

    // optional bool use_had_map = 3 [default = true];
    if (has_use_had_map()) {
      total_size += 1 + 1;
    }

    // optional bool use_fp_filter = 6 [default = true];
    if (has_use_fp_filter()) {
      total_size += 1 + 1;
    }

    // optional int32 delay_frames = 5 [default = 4];
    if (has_delay_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_frames());
    }

    // optional double probexist_vehicle = 7 [default = 0.9];
    if (has_probexist_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double probexist_pedestrian = 8 [default = 0.25];
    if (has_probexist_pedestrian()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double probexist_bicycle = 9 [default = 0.25];
    if (has_probexist_bicycle()) {
      total_size += 1 + 8;
    }

    // optional double probexist_unknown = 10 [default = 0.99];
    if (has_probexist_unknown()) {
      total_size += 1 + 8;
    }

    // optional double lo_vel_rms_vehicle = 11 [default = 0.2];
    if (has_lo_vel_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double la_vel_rms_vehicle = 12 [default = 0.3];
    if (has_la_vel_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double lo_dist_rms_vehicle = 13 [default = 0.15];
    if (has_lo_dist_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double la_dist_rms_vehicle = 14 [default = 0.2];
    if (has_la_dist_rms_vehicle()) {
      total_size += 1 + 8;
    }

    // optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
    if (has_lo_vel_rms_pedestrian()) {
      total_size += 1 + 8;
    }

    // optional double la_vel_rms_pedestrian = 16 [default = 0.8];
    if (has_la_vel_rms_pedestrian()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
    if (has_lo_dist_rms_pedestrian()) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_pedestrian = 18 [default = 0.8];
    if (has_la_dist_rms_pedestrian()) {
      total_size += 2 + 8;
    }

    // optional double lo_vel_rms_bicycle = 19 [default = 0.5];
    if (has_lo_vel_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double la_vel_rms_bicycle = 20 [default = 0.8];
    if (has_la_vel_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double lo_dist_rms_bicycle = 21 [default = 0.5];
    if (has_lo_dist_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_bicycle = 22 [default = 0.8];
    if (has_la_dist_rms_bicycle()) {
      total_size += 2 + 8;
    }

    // optional double lo_vel_rms_unknown = 23 [default = 0.2];
    if (has_lo_vel_rms_unknown()) {
      total_size += 2 + 8;
    }

    // optional double la_vel_rms_unknown = 24 [default = 0.3];
    if (has_la_vel_rms_unknown()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional double lo_dist_rms_unknown = 25 [default = 0.2];
    if (has_lo_dist_rms_unknown()) {
      total_size += 2 + 8;
    }

    // optional double la_dist_rms_unknown = 26 [default = 0.3];
    if (has_la_dist_rms_unknown()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      max_theta_ = from.max_theta_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_had_map_ = from.use_had_map_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_fp_filter_ = from.use_fp_filter_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_frames_ = from.delay_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      probexist_vehicle_ = from.probexist_vehicle_;
    }
    if (cached_has_bits & 0x00000080u) {
      probexist_pedestrian_ = from.probexist_pedestrian_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      probexist_bicycle_ = from.probexist_bicycle_;
    }
    if (cached_has_bits & 0x00000200u) {
      probexist_unknown_ = from.probexist_unknown_;
    }
    if (cached_has_bits & 0x00000400u) {
      lo_vel_rms_vehicle_ = from.lo_vel_rms_vehicle_;
    }
    if (cached_has_bits & 0x00000800u) {
      la_vel_rms_vehicle_ = from.la_vel_rms_vehicle_;
    }
    if (cached_has_bits & 0x00001000u) {
      lo_dist_rms_vehicle_ = from.lo_dist_rms_vehicle_;
    }
    if (cached_has_bits & 0x00002000u) {
      la_dist_rms_vehicle_ = from.la_dist_rms_vehicle_;
    }
    if (cached_has_bits & 0x00004000u) {
      lo_vel_rms_pedestrian_ = from.lo_vel_rms_pedestrian_;
    }
    if (cached_has_bits & 0x00008000u) {
      la_vel_rms_pedestrian_ = from.la_vel_rms_pedestrian_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      lo_dist_rms_pedestrian_ = from.lo_dist_rms_pedestrian_;
    }
    if (cached_has_bits & 0x00020000u) {
      la_dist_rms_pedestrian_ = from.la_dist_rms_pedestrian_;
    }
    if (cached_has_bits & 0x00040000u) {
      lo_vel_rms_bicycle_ = from.lo_vel_rms_bicycle_;
    }
    if (cached_has_bits & 0x00080000u) {
      la_vel_rms_bicycle_ = from.la_vel_rms_bicycle_;
    }
    if (cached_has_bits & 0x00100000u) {
      lo_dist_rms_bicycle_ = from.lo_dist_rms_bicycle_;
    }
    if (cached_has_bits & 0x00200000u) {
      la_dist_rms_bicycle_ = from.la_dist_rms_bicycle_;
    }
    if (cached_has_bits & 0x00400000u) {
      lo_vel_rms_unknown_ = from.lo_vel_rms_unknown_;
    }
    if (cached_has_bits & 0x00800000u) {
      la_vel_rms_unknown_ = from.la_vel_rms_unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      lo_dist_rms_unknown_ = from.lo_dist_rms_unknown_;
    }
    if (cached_has_bits & 0x02000000u) {
      la_dist_rms_unknown_ = from.la_dist_rms_unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.modest_radar_detector_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(max_theta_, other->max_theta_);
  std::swap(use_had_map_, other->use_had_map_);
  std::swap(use_fp_filter_, other->use_fp_filter_);
  std::swap(delay_frames_, other->delay_frames_);
  std::swap(probexist_vehicle_, other->probexist_vehicle_);
  std::swap(probexist_pedestrian_, other->probexist_pedestrian_);
  std::swap(probexist_bicycle_, other->probexist_bicycle_);
  std::swap(probexist_unknown_, other->probexist_unknown_);
  std::swap(lo_vel_rms_vehicle_, other->lo_vel_rms_vehicle_);
  std::swap(la_vel_rms_vehicle_, other->la_vel_rms_vehicle_);
  std::swap(lo_dist_rms_vehicle_, other->lo_dist_rms_vehicle_);
  std::swap(la_dist_rms_vehicle_, other->la_dist_rms_vehicle_);
  std::swap(lo_vel_rms_pedestrian_, other->lo_vel_rms_pedestrian_);
  std::swap(la_vel_rms_pedestrian_, other->la_vel_rms_pedestrian_);
  std::swap(lo_dist_rms_pedestrian_, other->lo_dist_rms_pedestrian_);
  std::swap(la_dist_rms_pedestrian_, other->la_dist_rms_pedestrian_);
  std::swap(lo_vel_rms_bicycle_, other->lo_vel_rms_bicycle_);
  std::swap(la_vel_rms_bicycle_, other->la_vel_rms_bicycle_);
  std::swap(lo_dist_rms_bicycle_, other->lo_dist_rms_bicycle_);
  std::swap(la_dist_rms_bicycle_, other->la_dist_rms_bicycle_);
  std::swap(lo_vel_rms_unknown_, other->lo_vel_rms_unknown_);
  std::swap(la_vel_rms_unknown_, other->la_vel_rms_unknown_);
  std::swap(lo_dist_rms_unknown_, other->lo_dist_rms_unknown_);
  std::swap(la_dist_rms_unknown_, other->la_dist_rms_unknown_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2fmodest_5fradar_5fdetector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "ModestRadarDetector"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(&ModelConfigs::_default_name_.get());
  clear_has_name();
}
const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
  return name_.GetNoArena();
}
void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
}
#if LANG_CXX11
void ModelConfigs::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &ModelConfigs::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
}
#endif
void ModelConfigs::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
}
void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
}
::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
  return name_.MutableNoArena(&ModelConfigs::_default_name_.get());
}
::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&ModelConfigs::_default_name_.get());
}
void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&ModelConfigs::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(&ModelConfigs::_default_version_.get());
  clear_has_version();
}
const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
  return version_.GetNoArena();
}
void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
}
#if LANG_CXX11
void ModelConfigs::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &ModelConfigs::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
}
#endif
void ModelConfigs::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
}
void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
}
::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
  return version_.MutableNoArena(&ModelConfigs::_default_version_.get());
}
::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&ModelConfigs::_default_version_.get());
}
void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&ModelConfigs::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.version)
}

// optional bool use_had_map = 3 [default = true];
bool ModelConfigs::has_use_had_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_use_had_map() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_use_had_map() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_use_had_map() {
  use_had_map_ = true;
  clear_has_use_had_map();
}
bool ModelConfigs::use_had_map() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
  return use_had_map_;
}
void ModelConfigs::set_use_had_map(bool value) {
  set_has_use_had_map();
  use_had_map_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.use_had_map)
}

// optional double max_theta = 4 [default = 30];
bool ModelConfigs::has_max_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_max_theta() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_max_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_max_theta() {
  max_theta_ = 30;
  clear_has_max_theta();
}
double ModelConfigs::max_theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.max_theta)
  return max_theta_;
}
void ModelConfigs::set_max_theta(double value) {
  set_has_max_theta();
  max_theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.max_theta)
}

// optional int32 delay_frames = 5 [default = 4];
bool ModelConfigs::has_delay_frames() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_delay_frames() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_delay_frames() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_delay_frames() {
  delay_frames_ = 4;
  clear_has_delay_frames();
}
::google::protobuf::int32 ModelConfigs::delay_frames() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
  return delay_frames_;
}
void ModelConfigs::set_delay_frames(::google::protobuf::int32 value) {
  set_has_delay_frames();
  delay_frames_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.delay_frames)
}

// optional bool use_fp_filter = 6 [default = true];
bool ModelConfigs::has_use_fp_filter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_use_fp_filter() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_use_fp_filter() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_use_fp_filter() {
  use_fp_filter_ = true;
  clear_has_use_fp_filter();
}
bool ModelConfigs::use_fp_filter() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
  return use_fp_filter_;
}
void ModelConfigs::set_use_fp_filter(bool value) {
  set_has_use_fp_filter();
  use_fp_filter_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.use_fp_filter)
}

// optional double probexist_vehicle = 7 [default = 0.9];
bool ModelConfigs::has_probexist_vehicle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_probexist_vehicle() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_probexist_vehicle() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_probexist_vehicle() {
  probexist_vehicle_ = 0.9;
  clear_has_probexist_vehicle();
}
double ModelConfigs::probexist_vehicle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
  return probexist_vehicle_;
}
void ModelConfigs::set_probexist_vehicle(double value) {
  set_has_probexist_vehicle();
  probexist_vehicle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_vehicle)
}

// optional double probexist_pedestrian = 8 [default = 0.25];
bool ModelConfigs::has_probexist_pedestrian() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_probexist_pedestrian() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelConfigs::clear_has_probexist_pedestrian() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelConfigs::clear_probexist_pedestrian() {
  probexist_pedestrian_ = 0.25;
  clear_has_probexist_pedestrian();
}
double ModelConfigs::probexist_pedestrian() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
  return probexist_pedestrian_;
}
void ModelConfigs::set_probexist_pedestrian(double value) {
  set_has_probexist_pedestrian();
  probexist_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_pedestrian)
}

// optional double probexist_bicycle = 9 [default = 0.25];
bool ModelConfigs::has_probexist_bicycle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_probexist_bicycle() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelConfigs::clear_has_probexist_bicycle() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelConfigs::clear_probexist_bicycle() {
  probexist_bicycle_ = 0.25;
  clear_has_probexist_bicycle();
}
double ModelConfigs::probexist_bicycle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
  return probexist_bicycle_;
}
void ModelConfigs::set_probexist_bicycle(double value) {
  set_has_probexist_bicycle();
  probexist_bicycle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_bicycle)
}

// optional double probexist_unknown = 10 [default = 0.99];
bool ModelConfigs::has_probexist_unknown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_probexist_unknown() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelConfigs::clear_has_probexist_unknown() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelConfigs::clear_probexist_unknown() {
  probexist_unknown_ = 0.99;
  clear_has_probexist_unknown();
}
double ModelConfigs::probexist_unknown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
  return probexist_unknown_;
}
void ModelConfigs::set_probexist_unknown(double value) {
  set_has_probexist_unknown();
  probexist_unknown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.probexist_unknown)
}

// optional double lo_vel_rms_vehicle = 11 [default = 0.2];
bool ModelConfigs::has_lo_vel_rms_vehicle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_vehicle() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelConfigs::clear_has_lo_vel_rms_vehicle() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelConfigs::clear_lo_vel_rms_vehicle() {
  lo_vel_rms_vehicle_ = 0.2;
  clear_has_lo_vel_rms_vehicle();
}
double ModelConfigs::lo_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
  return lo_vel_rms_vehicle_;
}
void ModelConfigs::set_lo_vel_rms_vehicle(double value) {
  set_has_lo_vel_rms_vehicle();
  lo_vel_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_vehicle)
}

// optional double la_vel_rms_vehicle = 12 [default = 0.3];
bool ModelConfigs::has_la_vel_rms_vehicle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_vehicle() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelConfigs::clear_has_la_vel_rms_vehicle() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelConfigs::clear_la_vel_rms_vehicle() {
  la_vel_rms_vehicle_ = 0.3;
  clear_has_la_vel_rms_vehicle();
}
double ModelConfigs::la_vel_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
  return la_vel_rms_vehicle_;
}
void ModelConfigs::set_la_vel_rms_vehicle(double value) {
  set_has_la_vel_rms_vehicle();
  la_vel_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_vehicle)
}

// optional double lo_dist_rms_vehicle = 13 [default = 0.15];
bool ModelConfigs::has_lo_dist_rms_vehicle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_vehicle() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelConfigs::clear_has_lo_dist_rms_vehicle() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelConfigs::clear_lo_dist_rms_vehicle() {
  lo_dist_rms_vehicle_ = 0.15;
  clear_has_lo_dist_rms_vehicle();
}
double ModelConfigs::lo_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
  return lo_dist_rms_vehicle_;
}
void ModelConfigs::set_lo_dist_rms_vehicle(double value) {
  set_has_lo_dist_rms_vehicle();
  lo_dist_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_vehicle)
}

// optional double la_dist_rms_vehicle = 14 [default = 0.2];
bool ModelConfigs::has_la_dist_rms_vehicle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_vehicle() {
  _has_bits_[0] |= 0x00002000u;
}
void ModelConfigs::clear_has_la_dist_rms_vehicle() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModelConfigs::clear_la_dist_rms_vehicle() {
  la_dist_rms_vehicle_ = 0.2;
  clear_has_la_dist_rms_vehicle();
}
double ModelConfigs::la_dist_rms_vehicle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
  return la_dist_rms_vehicle_;
}
void ModelConfigs::set_la_dist_rms_vehicle(double value) {
  set_has_la_dist_rms_vehicle();
  la_dist_rms_vehicle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_vehicle)
}

// optional double lo_vel_rms_pedestrian = 15 [default = 0.5];
bool ModelConfigs::has_lo_vel_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_pedestrian() {
  _has_bits_[0] |= 0x00004000u;
}
void ModelConfigs::clear_has_lo_vel_rms_pedestrian() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModelConfigs::clear_lo_vel_rms_pedestrian() {
  lo_vel_rms_pedestrian_ = 0.5;
  clear_has_lo_vel_rms_pedestrian();
}
double ModelConfigs::lo_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
  return lo_vel_rms_pedestrian_;
}
void ModelConfigs::set_lo_vel_rms_pedestrian(double value) {
  set_has_lo_vel_rms_pedestrian();
  lo_vel_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_pedestrian)
}

// optional double la_vel_rms_pedestrian = 16 [default = 0.8];
bool ModelConfigs::has_la_vel_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_pedestrian() {
  _has_bits_[0] |= 0x00008000u;
}
void ModelConfigs::clear_has_la_vel_rms_pedestrian() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModelConfigs::clear_la_vel_rms_pedestrian() {
  la_vel_rms_pedestrian_ = 0.8;
  clear_has_la_vel_rms_pedestrian();
}
double ModelConfigs::la_vel_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
  return la_vel_rms_pedestrian_;
}
void ModelConfigs::set_la_vel_rms_pedestrian(double value) {
  set_has_la_vel_rms_pedestrian();
  la_vel_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_pedestrian)
}

// optional double lo_dist_rms_pedestrian = 17 [default = 0.5];
bool ModelConfigs::has_lo_dist_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_pedestrian() {
  _has_bits_[0] |= 0x00010000u;
}
void ModelConfigs::clear_has_lo_dist_rms_pedestrian() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModelConfigs::clear_lo_dist_rms_pedestrian() {
  lo_dist_rms_pedestrian_ = 0.5;
  clear_has_lo_dist_rms_pedestrian();
}
double ModelConfigs::lo_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
  return lo_dist_rms_pedestrian_;
}
void ModelConfigs::set_lo_dist_rms_pedestrian(double value) {
  set_has_lo_dist_rms_pedestrian();
  lo_dist_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_pedestrian)
}

// optional double la_dist_rms_pedestrian = 18 [default = 0.8];
bool ModelConfigs::has_la_dist_rms_pedestrian() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_pedestrian() {
  _has_bits_[0] |= 0x00020000u;
}
void ModelConfigs::clear_has_la_dist_rms_pedestrian() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModelConfigs::clear_la_dist_rms_pedestrian() {
  la_dist_rms_pedestrian_ = 0.8;
  clear_has_la_dist_rms_pedestrian();
}
double ModelConfigs::la_dist_rms_pedestrian() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
  return la_dist_rms_pedestrian_;
}
void ModelConfigs::set_la_dist_rms_pedestrian(double value) {
  set_has_la_dist_rms_pedestrian();
  la_dist_rms_pedestrian_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_pedestrian)
}

// optional double lo_vel_rms_bicycle = 19 [default = 0.5];
bool ModelConfigs::has_lo_vel_rms_bicycle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_bicycle() {
  _has_bits_[0] |= 0x00040000u;
}
void ModelConfigs::clear_has_lo_vel_rms_bicycle() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModelConfigs::clear_lo_vel_rms_bicycle() {
  lo_vel_rms_bicycle_ = 0.5;
  clear_has_lo_vel_rms_bicycle();
}
double ModelConfigs::lo_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
  return lo_vel_rms_bicycle_;
}
void ModelConfigs::set_lo_vel_rms_bicycle(double value) {
  set_has_lo_vel_rms_bicycle();
  lo_vel_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_bicycle)
}

// optional double la_vel_rms_bicycle = 20 [default = 0.8];
bool ModelConfigs::has_la_vel_rms_bicycle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_bicycle() {
  _has_bits_[0] |= 0x00080000u;
}
void ModelConfigs::clear_has_la_vel_rms_bicycle() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModelConfigs::clear_la_vel_rms_bicycle() {
  la_vel_rms_bicycle_ = 0.8;
  clear_has_la_vel_rms_bicycle();
}
double ModelConfigs::la_vel_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
  return la_vel_rms_bicycle_;
}
void ModelConfigs::set_la_vel_rms_bicycle(double value) {
  set_has_la_vel_rms_bicycle();
  la_vel_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_bicycle)
}

// optional double lo_dist_rms_bicycle = 21 [default = 0.5];
bool ModelConfigs::has_lo_dist_rms_bicycle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_bicycle() {
  _has_bits_[0] |= 0x00100000u;
}
void ModelConfigs::clear_has_lo_dist_rms_bicycle() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModelConfigs::clear_lo_dist_rms_bicycle() {
  lo_dist_rms_bicycle_ = 0.5;
  clear_has_lo_dist_rms_bicycle();
}
double ModelConfigs::lo_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
  return lo_dist_rms_bicycle_;
}
void ModelConfigs::set_lo_dist_rms_bicycle(double value) {
  set_has_lo_dist_rms_bicycle();
  lo_dist_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_bicycle)
}

// optional double la_dist_rms_bicycle = 22 [default = 0.8];
bool ModelConfigs::has_la_dist_rms_bicycle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_bicycle() {
  _has_bits_[0] |= 0x00200000u;
}
void ModelConfigs::clear_has_la_dist_rms_bicycle() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModelConfigs::clear_la_dist_rms_bicycle() {
  la_dist_rms_bicycle_ = 0.8;
  clear_has_la_dist_rms_bicycle();
}
double ModelConfigs::la_dist_rms_bicycle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
  return la_dist_rms_bicycle_;
}
void ModelConfigs::set_la_dist_rms_bicycle(double value) {
  set_has_la_dist_rms_bicycle();
  la_dist_rms_bicycle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_bicycle)
}

// optional double lo_vel_rms_unknown = 23 [default = 0.2];
bool ModelConfigs::has_lo_vel_rms_unknown() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModelConfigs::set_has_lo_vel_rms_unknown() {
  _has_bits_[0] |= 0x00400000u;
}
void ModelConfigs::clear_has_lo_vel_rms_unknown() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModelConfigs::clear_lo_vel_rms_unknown() {
  lo_vel_rms_unknown_ = 0.2;
  clear_has_lo_vel_rms_unknown();
}
double ModelConfigs::lo_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
  return lo_vel_rms_unknown_;
}
void ModelConfigs::set_lo_vel_rms_unknown(double value) {
  set_has_lo_vel_rms_unknown();
  lo_vel_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_vel_rms_unknown)
}

// optional double la_vel_rms_unknown = 24 [default = 0.3];
bool ModelConfigs::has_la_vel_rms_unknown() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModelConfigs::set_has_la_vel_rms_unknown() {
  _has_bits_[0] |= 0x00800000u;
}
void ModelConfigs::clear_has_la_vel_rms_unknown() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModelConfigs::clear_la_vel_rms_unknown() {
  la_vel_rms_unknown_ = 0.3;
  clear_has_la_vel_rms_unknown();
}
double ModelConfigs::la_vel_rms_unknown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
  return la_vel_rms_unknown_;
}
void ModelConfigs::set_la_vel_rms_unknown(double value) {
  set_has_la_vel_rms_unknown();
  la_vel_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_vel_rms_unknown)
}

// optional double lo_dist_rms_unknown = 25 [default = 0.2];
bool ModelConfigs::has_lo_dist_rms_unknown() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModelConfigs::set_has_lo_dist_rms_unknown() {
  _has_bits_[0] |= 0x01000000u;
}
void ModelConfigs::clear_has_lo_dist_rms_unknown() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModelConfigs::clear_lo_dist_rms_unknown() {
  lo_dist_rms_unknown_ = 0.2;
  clear_has_lo_dist_rms_unknown();
}
double ModelConfigs::lo_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
  return lo_dist_rms_unknown_;
}
void ModelConfigs::set_lo_dist_rms_unknown(double value) {
  set_has_lo_dist_rms_unknown();
  lo_dist_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.lo_dist_rms_unknown)
}

// optional double la_dist_rms_unknown = 26 [default = 0.3];
bool ModelConfigs::has_la_dist_rms_unknown() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModelConfigs::set_has_la_dist_rms_unknown() {
  _has_bits_[0] |= 0x02000000u;
}
void ModelConfigs::clear_has_la_dist_rms_unknown() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModelConfigs::clear_la_dist_rms_unknown() {
  la_dist_rms_unknown_ = 0.3;
  clear_has_la_dist_rms_unknown();
}
double ModelConfigs::la_dist_rms_unknown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
  return la_dist_rms_unknown_;
}
void ModelConfigs::set_la_dist_rms_unknown(double value) {
  set_has_la_dist_rms_unknown();
  la_dist_rms_unknown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.modest_radar_detector_config.ModelConfigs.la_dist_rms_unknown)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace modest_radar_detector_config
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
