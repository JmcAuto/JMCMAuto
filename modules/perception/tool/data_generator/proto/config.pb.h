// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/tool/data_generator/proto/config.proto

#ifndef PROTOBUF_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace common {
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
namespace perception {
namespace data_generator {
class DataGeneratorInfo;
class DataGeneratorInfoDefaultTypeInternal;
extern DataGeneratorInfoDefaultTypeInternal _DataGeneratorInfo_default_instance_;
class DataGeneratorObstacle;
class DataGeneratorObstacleDefaultTypeInternal;
extern DataGeneratorObstacleDefaultTypeInternal _DataGeneratorObstacle_default_instance_;
class ROI;
class ROIDefaultTypeInternal;
extern ROIDefaultTypeInternal _ROI_default_instance_;
class SensorConfig;
class SensorConfigDefaultTypeInternal;
extern SensorConfigDefaultTypeInternal _SensorConfig_default_instance_;
}  // namespace data_generator
}  // namespace perception
}  // namespace jmc_auto

namespace jmc_auto {
namespace perception {
namespace data_generator {

namespace protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto

enum DataGeneratorObstacle_Type {
  DataGeneratorObstacle_Type_UNKNOWN = 0,
  DataGeneratorObstacle_Type_ROAD_SIGN = 1,
  DataGeneratorObstacle_Type_PEDESTRIAN = 2,
  DataGeneratorObstacle_Type_BICYCLE = 3,
  DataGeneratorObstacle_Type_SEDAN = 4,
  DataGeneratorObstacle_Type_SUV = 5,
  DataGeneratorObstacle_Type_BUS = 6,
  DataGeneratorObstacle_Type_TRUCK = 7
};
bool DataGeneratorObstacle_Type_IsValid(int value);
const DataGeneratorObstacle_Type DataGeneratorObstacle_Type_Type_MIN = DataGeneratorObstacle_Type_UNKNOWN;
const DataGeneratorObstacle_Type DataGeneratorObstacle_Type_Type_MAX = DataGeneratorObstacle_Type_TRUCK;
const int DataGeneratorObstacle_Type_Type_ARRAYSIZE = DataGeneratorObstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataGeneratorObstacle_Type_descriptor();
inline const ::std::string& DataGeneratorObstacle_Type_Name(DataGeneratorObstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataGeneratorObstacle_Type_descriptor(), value);
}
inline bool DataGeneratorObstacle_Type_Parse(
    const ::std::string& name, DataGeneratorObstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataGeneratorObstacle_Type>(
    DataGeneratorObstacle_Type_descriptor(), name, value);
}
enum SensorConfig_SensorId {
  SensorConfig_SensorId_VELODYNE64 = 1,
  SensorConfig_SensorId_VELODYNE16 = 2,
  SensorConfig_SensorId_CONTI_RADAR = 3
};
bool SensorConfig_SensorId_IsValid(int value);
const SensorConfig_SensorId SensorConfig_SensorId_SensorId_MIN = SensorConfig_SensorId_VELODYNE64;
const SensorConfig_SensorId SensorConfig_SensorId_SensorId_MAX = SensorConfig_SensorId_CONTI_RADAR;
const int SensorConfig_SensorId_SensorId_ARRAYSIZE = SensorConfig_SensorId_SensorId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorConfig_SensorId_descriptor();
inline const ::std::string& SensorConfig_SensorId_Name(SensorConfig_SensorId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorConfig_SensorId_descriptor(), value);
}
inline bool SensorConfig_SensorId_Parse(
    const ::std::string& name, SensorConfig_SensorId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorConfig_SensorId>(
    SensorConfig_SensorId_descriptor(), name, value);
}
// ===================================================================

class DataGeneratorObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.data_generator.DataGeneratorObstacle) */ {
 public:
  DataGeneratorObstacle();
  virtual ~DataGeneratorObstacle();

  DataGeneratorObstacle(const DataGeneratorObstacle& from);

  inline DataGeneratorObstacle& operator=(const DataGeneratorObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataGeneratorObstacle& default_instance();

  static inline const DataGeneratorObstacle* internal_default_instance() {
    return reinterpret_cast<const DataGeneratorObstacle*>(
               &_DataGeneratorObstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DataGeneratorObstacle* other);

  // implements Message ----------------------------------------------

  inline DataGeneratorObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  DataGeneratorObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataGeneratorObstacle& from);
  void MergeFrom(const DataGeneratorObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataGeneratorObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DataGeneratorObstacle_Type Type;
  static const Type UNKNOWN =
    DataGeneratorObstacle_Type_UNKNOWN;
  static const Type ROAD_SIGN =
    DataGeneratorObstacle_Type_ROAD_SIGN;
  static const Type PEDESTRIAN =
    DataGeneratorObstacle_Type_PEDESTRIAN;
  static const Type BICYCLE =
    DataGeneratorObstacle_Type_BICYCLE;
  static const Type SEDAN =
    DataGeneratorObstacle_Type_SEDAN;
  static const Type SUV =
    DataGeneratorObstacle_Type_SUV;
  static const Type BUS =
    DataGeneratorObstacle_Type_BUS;
  static const Type TRUCK =
    DataGeneratorObstacle_Type_TRUCK;
  static inline bool Type_IsValid(int value) {
    return DataGeneratorObstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DataGeneratorObstacle_Type_Type_MIN;
  static const Type Type_MAX =
    DataGeneratorObstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DataGeneratorObstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DataGeneratorObstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DataGeneratorObstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DataGeneratorObstacle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Point3D polygon_point = 8;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 8;
  const ::jmc_auto::common::Point3D& polygon_point(int index) const;
  ::jmc_auto::common::Point3D* mutable_polygon_point(int index);
  ::jmc_auto::common::Point3D* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
      polygon_point() const;

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .jmc_auto.common.Point2D position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::jmc_auto::common::Point2D& position() const;
  ::jmc_auto::common::Point2D* mutable_position();
  ::jmc_auto::common::Point2D* release_position();
  void set_allocated_position(::jmc_auto::common::Point2D* position);

  // optional .jmc_auto.common.Point3D velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::jmc_auto::common::Point3D& velocity() const;
  ::jmc_auto::common::Point3D* mutable_velocity();
  ::jmc_auto::common::Point3D* release_velocity();
  void set_allocated_velocity(::jmc_auto::common::Point3D* velocity);

  // optional double theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type type() const;
  void set_type(::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type value);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.data_generator.DataGeneratorObstacle)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_position();
  void clear_has_position();
  void set_has_theta();
  void clear_has_theta();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_length();
  void clear_has_length();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D > polygon_point_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::jmc_auto::common::Point2D* position_;
  ::jmc_auto::common::Point3D* velocity_;
  double theta_;
  double length_;
  double width_;
  double height_;
  int type_;
  friend struct protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ROI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.data_generator.ROI) */ {
 public:
  ROI();
  virtual ~ROI();

  ROI(const ROI& from);

  inline ROI& operator=(const ROI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROI& default_instance();

  static inline const ROI* internal_default_instance() {
    return reinterpret_cast<const ROI*>(
               &_ROI_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ROI* other);

  // implements Message ----------------------------------------------

  inline ROI* New() const PROTOBUF_FINAL { return New(NULL); }

  ROI* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROI& from);
  void MergeFrom(const ROI& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Point3D polygon_point = 1;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 1;
  const ::jmc_auto::common::Point3D& polygon_point(int index) const;
  ::jmc_auto::common::Point3D* mutable_polygon_point(int index);
  ::jmc_auto::common::Point3D* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
      polygon_point() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.data_generator.ROI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D > polygon_point_;
  friend struct protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.data_generator.SensorConfig) */ {
 public:
  SensorConfig();
  virtual ~SensorConfig();

  SensorConfig(const SensorConfig& from);

  inline SensorConfig& operator=(const SensorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorConfig& default_instance();

  static inline const SensorConfig* internal_default_instance() {
    return reinterpret_cast<const SensorConfig*>(
               &_SensorConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SensorConfig* other);

  // implements Message ----------------------------------------------

  inline SensorConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SensorConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SensorConfig& from);
  void MergeFrom(const SensorConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SensorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SensorConfig_SensorId SensorId;
  static const SensorId VELODYNE64 =
    SensorConfig_SensorId_VELODYNE64;
  static const SensorId VELODYNE16 =
    SensorConfig_SensorId_VELODYNE16;
  static const SensorId CONTI_RADAR =
    SensorConfig_SensorId_CONTI_RADAR;
  static inline bool SensorId_IsValid(int value) {
    return SensorConfig_SensorId_IsValid(value);
  }
  static const SensorId SensorId_MIN =
    SensorConfig_SensorId_SensorId_MIN;
  static const SensorId SensorId_MAX =
    SensorConfig_SensorId_SensorId_MAX;
  static const int SensorId_ARRAYSIZE =
    SensorConfig_SensorId_SensorId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorId_descriptor() {
    return SensorConfig_SensorId_descriptor();
  }
  static inline const ::std::string& SensorId_Name(SensorId value) {
    return SensorConfig_SensorId_Name(value);
  }
  static inline bool SensorId_Parse(const ::std::string& name,
      SensorId* value) {
    return SensorConfig_SensorId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string sensor_frame_name = 2;
  bool has_sensor_frame_name() const;
  void clear_sensor_frame_name();
  static const int kSensorFrameNameFieldNumber = 2;
  const ::std::string& sensor_frame_name() const;
  void set_sensor_frame_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_frame_name(::std::string&& value);
  #endif
  void set_sensor_frame_name(const char* value);
  void set_sensor_frame_name(const char* value, size_t size);
  ::std::string* mutable_sensor_frame_name();
  ::std::string* release_sensor_frame_name();
  void set_allocated_sensor_frame_name(::std::string* sensor_frame_name);

  // optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::jmc_auto::perception::data_generator::SensorConfig_SensorId id() const;
  void set_id(::jmc_auto::perception::data_generator::SensorConfig_SensorId value);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.data_generator.SensorConfig)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_sensor_frame_name();
  void clear_has_sensor_frame_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sensor_frame_name_;
  int id_;
  friend struct protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataGeneratorInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.data_generator.DataGeneratorInfo) */ {
 public:
  DataGeneratorInfo();
  virtual ~DataGeneratorInfo();

  DataGeneratorInfo(const DataGeneratorInfo& from);

  inline DataGeneratorInfo& operator=(const DataGeneratorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataGeneratorInfo& default_instance();

  static inline const DataGeneratorInfo* internal_default_instance() {
    return reinterpret_cast<const DataGeneratorInfo*>(
               &_DataGeneratorInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DataGeneratorInfo* other);

  // implements Message ----------------------------------------------

  inline DataGeneratorInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DataGeneratorInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataGeneratorInfo& from);
  void MergeFrom(const DataGeneratorInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataGeneratorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
  int obstacle_size() const;
  void clear_obstacle();
  static const int kObstacleFieldNumber = 2;
  const ::jmc_auto::perception::data_generator::DataGeneratorObstacle& obstacle(int index) const;
  ::jmc_auto::perception::data_generator::DataGeneratorObstacle* mutable_obstacle(int index);
  ::jmc_auto::perception::data_generator::DataGeneratorObstacle* add_obstacle();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle >*
      mutable_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle >&
      obstacle() const;

  // repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
  int config_size() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::jmc_auto::perception::data_generator::SensorConfig& config(int index) const;
  ::jmc_auto::perception::data_generator::SensorConfig* mutable_config(int index);
  ::jmc_auto::perception::data_generator::SensorConfig* add_config();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig >*
      mutable_config();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig >&
      config() const;

  // optional .jmc_auto.perception.data_generator.ROI roi = 1;
  bool has_roi() const;
  void clear_roi();
  static const int kRoiFieldNumber = 1;
  const ::jmc_auto::perception::data_generator::ROI& roi() const;
  ::jmc_auto::perception::data_generator::ROI* mutable_roi();
  ::jmc_auto::perception::data_generator::ROI* release_roi();
  void set_allocated_roi(::jmc_auto::perception::data_generator::ROI* roi);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.data_generator.DataGeneratorInfo)
 private:
  void set_has_roi();
  void clear_has_roi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle > obstacle_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig > config_;
  ::jmc_auto::perception::data_generator::ROI* roi_;
  friend struct protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DataGeneratorObstacle

// optional string id = 1;
inline bool DataGeneratorObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataGeneratorObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataGeneratorObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataGeneratorObstacle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& DataGeneratorObstacle::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
  return id_.GetNoArena();
}
inline void DataGeneratorObstacle::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
#if LANG_CXX11
inline void DataGeneratorObstacle::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
#endif
inline void DataGeneratorObstacle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
inline void DataGeneratorObstacle::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
inline ::std::string* DataGeneratorObstacle::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataGeneratorObstacle::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataGeneratorObstacle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}

// optional .jmc_auto.common.Point2D position = 2;
inline bool DataGeneratorObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataGeneratorObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataGeneratorObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataGeneratorObstacle::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::Point2D::Clear();
  clear_has_position();
}
inline const ::jmc_auto::common::Point2D& DataGeneratorObstacle::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::Point2D::internal_default_instance();
}
inline ::jmc_auto::common::Point2D* DataGeneratorObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
  return position_;
}
inline ::jmc_auto::common::Point2D* DataGeneratorObstacle::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
  clear_has_position();
  ::jmc_auto::common::Point2D* temp = position_;
  position_ = NULL;
  return temp;
}
inline void DataGeneratorObstacle::set_allocated_position(::jmc_auto::common::Point2D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
}

// optional double theta = 3;
inline bool DataGeneratorObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataGeneratorObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataGeneratorObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataGeneratorObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double DataGeneratorObstacle::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.theta)
  return theta_;
}
inline void DataGeneratorObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.theta)
}

// optional .jmc_auto.common.Point3D velocity = 4;
inline bool DataGeneratorObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataGeneratorObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataGeneratorObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataGeneratorObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_velocity();
}
inline const ::jmc_auto::common::Point3D& DataGeneratorObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
inline ::jmc_auto::common::Point3D* DataGeneratorObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
  return velocity_;
}
inline ::jmc_auto::common::Point3D* DataGeneratorObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
  clear_has_velocity();
  ::jmc_auto::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void DataGeneratorObstacle::set_allocated_velocity(::jmc_auto::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
}

// optional double length = 5;
inline bool DataGeneratorObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataGeneratorObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataGeneratorObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataGeneratorObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double DataGeneratorObstacle::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.length)
  return length_;
}
inline void DataGeneratorObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.length)
}

// optional double width = 6;
inline bool DataGeneratorObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataGeneratorObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataGeneratorObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataGeneratorObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double DataGeneratorObstacle::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.width)
  return width_;
}
inline void DataGeneratorObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.width)
}

// optional double height = 7;
inline bool DataGeneratorObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataGeneratorObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataGeneratorObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataGeneratorObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double DataGeneratorObstacle::height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.height)
  return height_;
}
inline void DataGeneratorObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.height)
}

// repeated .jmc_auto.common.Point3D polygon_point = 8;
inline int DataGeneratorObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
inline void DataGeneratorObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::jmc_auto::common::Point3D& DataGeneratorObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_.Get(index);
}
inline ::jmc_auto::common::Point3D* DataGeneratorObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::jmc_auto::common::Point3D* DataGeneratorObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
DataGeneratorObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
DataGeneratorObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_;
}

// optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
inline bool DataGeneratorObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataGeneratorObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataGeneratorObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataGeneratorObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type DataGeneratorObstacle::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.type)
  return static_cast< ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type >(type_);
}
inline void DataGeneratorObstacle::set_type(::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type value) {
  assert(::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.type)
}

// -------------------------------------------------------------------

// ROI

// repeated .jmc_auto.common.Point3D polygon_point = 1;
inline int ROI::polygon_point_size() const {
  return polygon_point_.size();
}
inline void ROI::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::jmc_auto::common::Point3D& ROI::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_.Get(index);
}
inline ::jmc_auto::common::Point3D* ROI::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::jmc_auto::common::Point3D* ROI::add_polygon_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
ROI::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.ROI.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
ROI::polygon_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_;
}

// -------------------------------------------------------------------

// SensorConfig

// optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
inline bool SensorConfig::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorConfig::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorConfig::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::jmc_auto::perception::data_generator::SensorConfig_SensorId SensorConfig::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.SensorConfig.id)
  return static_cast< ::jmc_auto::perception::data_generator::SensorConfig_SensorId >(id_);
}
inline void SensorConfig::set_id(::jmc_auto::perception::data_generator::SensorConfig_SensorId value) {
  assert(::jmc_auto::perception::data_generator::SensorConfig_SensorId_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.SensorConfig.id)
}

// optional string sensor_frame_name = 2;
inline bool SensorConfig::has_sensor_frame_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorConfig::set_has_sensor_frame_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorConfig::clear_has_sensor_frame_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorConfig::clear_sensor_frame_name() {
  sensor_frame_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_frame_name();
}
inline const ::std::string& SensorConfig::sensor_frame_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
  return sensor_frame_name_.GetNoArena();
}
inline void SensorConfig::set_sensor_frame_name(const ::std::string& value) {
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
#if LANG_CXX11
inline void SensorConfig::set_sensor_frame_name(::std::string&& value) {
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
#endif
inline void SensorConfig::set_sensor_frame_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
inline void SensorConfig::set_sensor_frame_name(const char* value, size_t size) {
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
inline ::std::string* SensorConfig::mutable_sensor_frame_name() {
  set_has_sensor_frame_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
  return sensor_frame_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorConfig::release_sensor_frame_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
  clear_has_sensor_frame_name();
  return sensor_frame_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorConfig::set_allocated_sensor_frame_name(::std::string* sensor_frame_name) {
  if (sensor_frame_name != NULL) {
    set_has_sensor_frame_name();
  } else {
    clear_has_sensor_frame_name();
  }
  sensor_frame_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_frame_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}

// -------------------------------------------------------------------

// DataGeneratorInfo

// optional .jmc_auto.perception.data_generator.ROI roi = 1;
inline bool DataGeneratorInfo::has_roi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataGeneratorInfo::set_has_roi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataGeneratorInfo::clear_has_roi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataGeneratorInfo::clear_roi() {
  if (roi_ != NULL) roi_->::jmc_auto::perception::data_generator::ROI::Clear();
  clear_has_roi();
}
inline const ::jmc_auto::perception::data_generator::ROI& DataGeneratorInfo::roi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
  return roi_ != NULL ? *roi_
                         : *::jmc_auto::perception::data_generator::ROI::internal_default_instance();
}
inline ::jmc_auto::perception::data_generator::ROI* DataGeneratorInfo::mutable_roi() {
  set_has_roi();
  if (roi_ == NULL) {
    roi_ = new ::jmc_auto::perception::data_generator::ROI;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
  return roi_;
}
inline ::jmc_auto::perception::data_generator::ROI* DataGeneratorInfo::release_roi() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
  clear_has_roi();
  ::jmc_auto::perception::data_generator::ROI* temp = roi_;
  roi_ = NULL;
  return temp;
}
inline void DataGeneratorInfo::set_allocated_roi(::jmc_auto::perception::data_generator::ROI* roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    set_has_roi();
  } else {
    clear_has_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
}

// repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
inline int DataGeneratorInfo::obstacle_size() const {
  return obstacle_.size();
}
inline void DataGeneratorInfo::clear_obstacle() {
  obstacle_.Clear();
}
inline const ::jmc_auto::perception::data_generator::DataGeneratorObstacle& DataGeneratorInfo::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_.Get(index);
}
inline ::jmc_auto::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_.Mutable(index);
}
inline ::jmc_auto::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::add_obstacle() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle >*
DataGeneratorInfo::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return &obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle >&
DataGeneratorInfo::obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_;
}

// repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
inline int DataGeneratorInfo::config_size() const {
  return config_.size();
}
inline void DataGeneratorInfo::clear_config() {
  config_.Clear();
}
inline const ::jmc_auto::perception::data_generator::SensorConfig& DataGeneratorInfo::config(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_.Get(index);
}
inline ::jmc_auto::perception::data_generator::SensorConfig* DataGeneratorInfo::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_.Mutable(index);
}
inline ::jmc_auto::perception::data_generator::SensorConfig* DataGeneratorInfo::add_config() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig >*
DataGeneratorInfo::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return &config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig >&
DataGeneratorInfo::config() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace data_generator
}  // namespace perception
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type>() {
  return ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::perception::data_generator::SensorConfig_SensorId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::perception::data_generator::SensorConfig_SensorId>() {
  return ::jmc_auto::perception::data_generator::SensorConfig_SensorId_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto__INCLUDED
