// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/tool/data_generator/proto/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/tool/data_generator/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace data_generator {
class DataGeneratorObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataGeneratorObstacle> {
} _DataGeneratorObstacle_default_instance_;
class ROIDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ROI> {
} _ROI_default_instance_;
class SensorConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SensorConfig> {
} _SensorConfig_default_instance_;
class DataGeneratorInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataGeneratorInfo> {
} _DataGeneratorInfo_default_instance_;

namespace protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorObstacle, type_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  ~0u,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, polygon_point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, sensor_frame_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorInfo, roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorInfo, obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGeneratorInfo, config_),
  0,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 14, sizeof(DataGeneratorObstacle)},
  { 23, 29, sizeof(ROI)},
  { 30, 37, sizeof(SensorConfig)},
  { 39, 47, sizeof(DataGeneratorInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataGeneratorObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ROI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataGeneratorInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/tool/data_generator/proto/config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _DataGeneratorObstacle_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ROI_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SensorConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DataGeneratorInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _DataGeneratorObstacle_default_instance_.DefaultConstruct();
  _ROI_default_instance_.DefaultConstruct();
  _SensorConfig_default_instance_.DefaultConstruct();
  _DataGeneratorInfo_default_instance_.DefaultConstruct();
  _DataGeneratorObstacle_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::Point2D*>(
      ::jmc_auto::common::Point2D::internal_default_instance());
  _DataGeneratorObstacle_default_instance_.get_mutable()->velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _DataGeneratorInfo_default_instance_.get_mutable()->roi_ = const_cast< ::jmc_auto::perception::data_generator::ROI*>(
      ::jmc_auto::perception::data_generator::ROI::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n9modules/perception/tool/data_generator"
      "/proto/config.proto\022\"jmc_auto.perception"
      ".data_generator\032#modules/common/proto/ge"
      "ometry.proto\"\241\003\n\025DataGeneratorObstacle\022\n"
      "\n\002id\030\001 \001(\t\022*\n\010position\030\002 \001(\0132\030.jmc_auto."
      "common.Point2D\022\r\n\005theta\030\003 \001(\001\022*\n\010velocit"
      "y\030\004 \001(\0132\030.jmc_auto.common.Point3D\022\016\n\006len"
      "gth\030\005 \001(\001\022\r\n\005width\030\006 \001(\001\022\016\n\006height\030\007 \001(\001"
      "\022/\n\rpolygon_point\030\010 \003(\0132\030.jmc_auto.commo"
      "n.Point3D\022L\n\004type\030\n \001(\0162>.jmc_auto.perce"
      "ption.data_generator.DataGeneratorObstac"
      "le.Type\"g\n\004Type\022\013\n\007UNKNOWN\020\000\022\r\n\tROAD_SIG"
      "N\020\001\022\016\n\nPEDESTRIAN\020\002\022\013\n\007BICYCLE\020\003\022\t\n\005SEDA"
      "N\020\004\022\007\n\003SUV\020\005\022\007\n\003BUS\020\006\022\t\n\005TRUCK\020\007\"6\n\003ROI\022"
      "/\n\rpolygon_point\030\001 \003(\0132\030.jmc_auto.common"
      ".Point3D\"\255\001\n\014SensorConfig\022E\n\002id\030\001 \001(\01629."
      "jmc_auto.perception.data_generator.Senso"
      "rConfig.SensorId\022\031\n\021sensor_frame_name\030\002 "
      "\001(\t\";\n\010SensorId\022\016\n\nVELODYNE64\020\001\022\016\n\nVELOD"
      "YNE16\020\002\022\017\n\013CONTI_RADAR\020\003\"\330\001\n\021DataGenerat"
      "orInfo\0224\n\003roi\030\001 \001(\0132\'.jmc_auto.perceptio"
      "n.data_generator.ROI\022K\n\010obstacle\030\002 \003(\01329"
      ".jmc_auto.perception.data_generator.Data"
      "GeneratorObstacle\022@\n\006config\030\003 \003(\01320.jmc_"
      "auto.perception.data_generator.SensorCon"
      "fig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1003);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/tool/data_generator/proto/config.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto

const ::google::protobuf::EnumDescriptor* DataGeneratorObstacle_Type_descriptor() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_enum_descriptors[0];
}
bool DataGeneratorObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataGeneratorObstacle_Type DataGeneratorObstacle::UNKNOWN;
const DataGeneratorObstacle_Type DataGeneratorObstacle::ROAD_SIGN;
const DataGeneratorObstacle_Type DataGeneratorObstacle::PEDESTRIAN;
const DataGeneratorObstacle_Type DataGeneratorObstacle::BICYCLE;
const DataGeneratorObstacle_Type DataGeneratorObstacle::SEDAN;
const DataGeneratorObstacle_Type DataGeneratorObstacle::SUV;
const DataGeneratorObstacle_Type DataGeneratorObstacle::BUS;
const DataGeneratorObstacle_Type DataGeneratorObstacle::TRUCK;
const DataGeneratorObstacle_Type DataGeneratorObstacle::Type_MIN;
const DataGeneratorObstacle_Type DataGeneratorObstacle::Type_MAX;
const int DataGeneratorObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SensorConfig_SensorId_descriptor() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_enum_descriptors[1];
}
bool SensorConfig_SensorId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorConfig_SensorId SensorConfig::VELODYNE64;
const SensorConfig_SensorId SensorConfig::VELODYNE16;
const SensorConfig_SensorId SensorConfig::CONTI_RADAR;
const SensorConfig_SensorId SensorConfig::SensorId_MIN;
const SensorConfig_SensorId SensorConfig::SensorId_MAX;
const int SensorConfig::SensorId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataGeneratorObstacle::kIdFieldNumber;
const int DataGeneratorObstacle::kPositionFieldNumber;
const int DataGeneratorObstacle::kThetaFieldNumber;
const int DataGeneratorObstacle::kVelocityFieldNumber;
const int DataGeneratorObstacle::kLengthFieldNumber;
const int DataGeneratorObstacle::kWidthFieldNumber;
const int DataGeneratorObstacle::kHeightFieldNumber;
const int DataGeneratorObstacle::kPolygonPointFieldNumber;
const int DataGeneratorObstacle::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataGeneratorObstacle::DataGeneratorObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.data_generator.DataGeneratorObstacle)
}
DataGeneratorObstacle::DataGeneratorObstacle(const DataGeneratorObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::Point2D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::jmc_auto::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&theta_, &from.theta_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&theta_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.data_generator.DataGeneratorObstacle)
}

void DataGeneratorObstacle::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_) + sizeof(type_));
}

DataGeneratorObstacle::~DataGeneratorObstacle() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  SharedDtor();
}

void DataGeneratorObstacle::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void DataGeneratorObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataGeneratorObstacle::descriptor() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataGeneratorObstacle& DataGeneratorObstacle::default_instance() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataGeneratorObstacle* DataGeneratorObstacle::New(::google::protobuf::Arena* arena) const {
  DataGeneratorObstacle* n = new DataGeneratorObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataGeneratorObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  polygon_point_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::jmc_auto::common::Point2D::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::jmc_auto::common::Point3D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&theta_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&theta_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataGeneratorObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.data_generator.DataGeneratorObstacle.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point2D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.Point3D polygon_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  return false;
#undef DO_
}

void DataGeneratorObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.data_generator.DataGeneratorObstacle.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .jmc_auto.common.Point2D position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .jmc_auto.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .jmc_auto.common.Point3D polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon_point(i), output);
  }

  // optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.data_generator.DataGeneratorObstacle)
}

::google::protobuf::uint8* DataGeneratorObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.data_generator.DataGeneratorObstacle.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .jmc_auto.common.Point2D position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .jmc_auto.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, deterministic, target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated .jmc_auto.common.Point3D polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon_point(i), deterministic, target);
  }

  // optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  return target;
}

size_t DataGeneratorObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Point3D polygon_point = 8;
  {
    unsigned int count = this->polygon_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon_point(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .jmc_auto.common.Point2D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .jmc_auto.common.Point3D velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataGeneratorObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const DataGeneratorObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataGeneratorObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.data_generator.DataGeneratorObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.data_generator.DataGeneratorObstacle)
    MergeFrom(*source);
  }
}

void DataGeneratorObstacle::MergeFrom(const DataGeneratorObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::jmc_auto::common::Point2D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000010u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataGeneratorObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataGeneratorObstacle::CopyFrom(const DataGeneratorObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.data_generator.DataGeneratorObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataGeneratorObstacle::IsInitialized() const {
  return true;
}

void DataGeneratorObstacle::Swap(DataGeneratorObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataGeneratorObstacle::InternalSwap(DataGeneratorObstacle* other) {
  polygon_point_.InternalSwap(&other->polygon_point_);
  id_.Swap(&other->id_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(theta_, other->theta_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataGeneratorObstacle::GetMetadata() const {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataGeneratorObstacle

// optional string id = 1;
bool DataGeneratorObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataGeneratorObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DataGeneratorObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataGeneratorObstacle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& DataGeneratorObstacle::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
  return id_.GetNoArena();
}
void DataGeneratorObstacle::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
#if LANG_CXX11
void DataGeneratorObstacle::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
#endif
void DataGeneratorObstacle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
void DataGeneratorObstacle::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}
::std::string* DataGeneratorObstacle::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataGeneratorObstacle::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataGeneratorObstacle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorObstacle.id)
}

// optional .jmc_auto.common.Point2D position = 2;
bool DataGeneratorObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataGeneratorObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void DataGeneratorObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataGeneratorObstacle::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::Point2D::Clear();
  clear_has_position();
}
const ::jmc_auto::common::Point2D& DataGeneratorObstacle::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::Point2D::internal_default_instance();
}
::jmc_auto::common::Point2D* DataGeneratorObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
  return position_;
}
::jmc_auto::common::Point2D* DataGeneratorObstacle::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
  clear_has_position();
  ::jmc_auto::common::Point2D* temp = position_;
  position_ = NULL;
  return temp;
}
void DataGeneratorObstacle::set_allocated_position(::jmc_auto::common::Point2D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorObstacle.position)
}

// optional double theta = 3;
bool DataGeneratorObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataGeneratorObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void DataGeneratorObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataGeneratorObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double DataGeneratorObstacle::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.theta)
  return theta_;
}
void DataGeneratorObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.theta)
}

// optional .jmc_auto.common.Point3D velocity = 4;
bool DataGeneratorObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataGeneratorObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void DataGeneratorObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataGeneratorObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_velocity();
}
const ::jmc_auto::common::Point3D& DataGeneratorObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* DataGeneratorObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
  return velocity_;
}
::jmc_auto::common::Point3D* DataGeneratorObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
  clear_has_velocity();
  ::jmc_auto::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void DataGeneratorObstacle::set_allocated_velocity(::jmc_auto::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorObstacle.velocity)
}

// optional double length = 5;
bool DataGeneratorObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataGeneratorObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
void DataGeneratorObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataGeneratorObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
double DataGeneratorObstacle::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.length)
  return length_;
}
void DataGeneratorObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.length)
}

// optional double width = 6;
bool DataGeneratorObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataGeneratorObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void DataGeneratorObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataGeneratorObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
double DataGeneratorObstacle::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.width)
  return width_;
}
void DataGeneratorObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.width)
}

// optional double height = 7;
bool DataGeneratorObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataGeneratorObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
void DataGeneratorObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataGeneratorObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
double DataGeneratorObstacle::height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.height)
  return height_;
}
void DataGeneratorObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.height)
}

// repeated .jmc_auto.common.Point3D polygon_point = 8;
int DataGeneratorObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void DataGeneratorObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::jmc_auto::common::Point3D& DataGeneratorObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::jmc_auto::common::Point3D* DataGeneratorObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::jmc_auto::common::Point3D* DataGeneratorObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
DataGeneratorObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
DataGeneratorObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.DataGeneratorObstacle.polygon_point)
  return polygon_point_;
}

// optional .jmc_auto.perception.data_generator.DataGeneratorObstacle.Type type = 10;
bool DataGeneratorObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataGeneratorObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void DataGeneratorObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataGeneratorObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type DataGeneratorObstacle::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorObstacle.type)
  return static_cast< ::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type >(type_);
}
void DataGeneratorObstacle::set_type(::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type value) {
  assert(::jmc_auto::perception::data_generator::DataGeneratorObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.DataGeneratorObstacle.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ROI::kPolygonPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ROI::ROI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.data_generator.ROI)
}
ROI::ROI(const ROI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.data_generator.ROI)
}

void ROI::SharedCtor() {
  _cached_size_ = 0;
}

ROI::~ROI() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.data_generator.ROI)
  SharedDtor();
}

void ROI::SharedDtor() {
}

void ROI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROI::descriptor() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ROI& ROI::default_instance() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ROI* ROI::New(::google::protobuf::Arena* arena) const {
  ROI* n = new ROI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROI::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.data_generator.ROI)
  polygon_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ROI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.data_generator.ROI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.common.Point3D polygon_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.data_generator.ROI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.data_generator.ROI)
  return false;
#undef DO_
}

void ROI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.data_generator.ROI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Point3D polygon_point = 1;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->polygon_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.data_generator.ROI)
}

::google::protobuf::uint8* ROI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.data_generator.ROI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.common.Point3D polygon_point = 1;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->polygon_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.data_generator.ROI)
  return target;
}

size_t ROI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.data_generator.ROI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Point3D polygon_point = 1;
  {
    unsigned int count = this->polygon_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon_point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.data_generator.ROI)
  GOOGLE_DCHECK_NE(&from, this);
  const ROI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ROI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.data_generator.ROI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.data_generator.ROI)
    MergeFrom(*source);
  }
}

void ROI::MergeFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.data_generator.ROI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
}

void ROI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.data_generator.ROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROI::CopyFrom(const ROI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.data_generator.ROI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROI::IsInitialized() const {
  return true;
}

void ROI::Swap(ROI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROI::InternalSwap(ROI* other) {
  polygon_point_.InternalSwap(&other->polygon_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROI::GetMetadata() const {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROI

// repeated .jmc_auto.common.Point3D polygon_point = 1;
int ROI::polygon_point_size() const {
  return polygon_point_.size();
}
void ROI::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::jmc_auto::common::Point3D& ROI::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_.Get(index);
}
::jmc_auto::common::Point3D* ROI::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_.Mutable(index);
}
::jmc_auto::common::Point3D* ROI::add_polygon_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >*
ROI::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.ROI.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point3D >&
ROI::polygon_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.ROI.polygon_point)
  return polygon_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorConfig::kIdFieldNumber;
const int SensorConfig::kSensorFrameNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorConfig::SensorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.data_generator.SensorConfig)
}
SensorConfig::SensorConfig(const SensorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_frame_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_frame_name()) {
    sensor_frame_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_frame_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.data_generator.SensorConfig)
}

void SensorConfig::SharedCtor() {
  _cached_size_ = 0;
  sensor_frame_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 1;
}

SensorConfig::~SensorConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.data_generator.SensorConfig)
  SharedDtor();
}

void SensorConfig::SharedDtor() {
  sensor_frame_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorConfig::descriptor() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorConfig& SensorConfig::default_instance() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorConfig* SensorConfig::New(::google::protobuf::Arena* arena) const {
  SensorConfig* n = new SensorConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.data_generator.SensorConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sensor_frame_name()) {
      GOOGLE_DCHECK(!sensor_frame_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sensor_frame_name_.UnsafeRawStringPointer())->clear();
    }
    id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.data_generator.SensorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::data_generator::SensorConfig_SensorId_IsValid(value)) {
            set_id(static_cast< ::jmc_auto::perception::data_generator::SensorConfig_SensorId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sensor_frame_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_frame_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_frame_name().data(), this->sensor_frame_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.data_generator.SensorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.data_generator.SensorConfig)
  return false;
#undef DO_
}

void SensorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.data_generator.SensorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string sensor_frame_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_frame_name().data(), this->sensor_frame_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sensor_frame_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.data_generator.SensorConfig)
}

::google::protobuf::uint8* SensorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.data_generator.SensorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string sensor_frame_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_frame_name().data(), this->sensor_frame_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sensor_frame_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.data_generator.SensorConfig)
  return target;
}

size_t SensorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.data_generator.SensorConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string sensor_frame_name = 2;
    if (has_sensor_frame_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_frame_name());
    }

    // optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.data_generator.SensorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.data_generator.SensorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.data_generator.SensorConfig)
    MergeFrom(*source);
  }
}

void SensorConfig::MergeFrom(const SensorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.data_generator.SensorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sensor_frame_name();
      sensor_frame_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_frame_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.data_generator.SensorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorConfig::CopyFrom(const SensorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.data_generator.SensorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorConfig::IsInitialized() const {
  return true;
}

void SensorConfig::Swap(SensorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorConfig::InternalSwap(SensorConfig* other) {
  sensor_frame_name_.Swap(&other->sensor_frame_name_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorConfig::GetMetadata() const {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorConfig

// optional .jmc_auto.perception.data_generator.SensorConfig.SensorId id = 1;
bool SensorConfig::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SensorConfig::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SensorConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SensorConfig::clear_id() {
  id_ = 1;
  clear_has_id();
}
::jmc_auto::perception::data_generator::SensorConfig_SensorId SensorConfig::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.SensorConfig.id)
  return static_cast< ::jmc_auto::perception::data_generator::SensorConfig_SensorId >(id_);
}
void SensorConfig::set_id(::jmc_auto::perception::data_generator::SensorConfig_SensorId value) {
  assert(::jmc_auto::perception::data_generator::SensorConfig_SensorId_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.SensorConfig.id)
}

// optional string sensor_frame_name = 2;
bool SensorConfig::has_sensor_frame_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorConfig::set_has_sensor_frame_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorConfig::clear_has_sensor_frame_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorConfig::clear_sensor_frame_name() {
  sensor_frame_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_frame_name();
}
const ::std::string& SensorConfig::sensor_frame_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
  return sensor_frame_name_.GetNoArena();
}
void SensorConfig::set_sensor_frame_name(const ::std::string& value) {
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
#if LANG_CXX11
void SensorConfig::set_sensor_frame_name(::std::string&& value) {
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
#endif
void SensorConfig::set_sensor_frame_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
void SensorConfig::set_sensor_frame_name(const char* value, size_t size) {
  set_has_sensor_frame_name();
  sensor_frame_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}
::std::string* SensorConfig::mutable_sensor_frame_name() {
  set_has_sensor_frame_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
  return sensor_frame_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorConfig::release_sensor_frame_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
  clear_has_sensor_frame_name();
  return sensor_frame_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorConfig::set_allocated_sensor_frame_name(::std::string* sensor_frame_name) {
  if (sensor_frame_name != NULL) {
    set_has_sensor_frame_name();
  } else {
    clear_has_sensor_frame_name();
  }
  sensor_frame_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_frame_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.SensorConfig.sensor_frame_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataGeneratorInfo::kRoiFieldNumber;
const int DataGeneratorInfo::kObstacleFieldNumber;
const int DataGeneratorInfo::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataGeneratorInfo::DataGeneratorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.data_generator.DataGeneratorInfo)
}
DataGeneratorInfo::DataGeneratorInfo(const DataGeneratorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      obstacle_(from.obstacle_),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roi()) {
    roi_ = new ::jmc_auto::perception::data_generator::ROI(*from.roi_);
  } else {
    roi_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.data_generator.DataGeneratorInfo)
}

void DataGeneratorInfo::SharedCtor() {
  _cached_size_ = 0;
  roi_ = NULL;
}

DataGeneratorInfo::~DataGeneratorInfo() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.data_generator.DataGeneratorInfo)
  SharedDtor();
}

void DataGeneratorInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete roi_;
  }
}

void DataGeneratorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataGeneratorInfo::descriptor() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataGeneratorInfo& DataGeneratorInfo::default_instance() {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataGeneratorInfo* DataGeneratorInfo::New(::google::protobuf::Arena* arena) const {
  DataGeneratorInfo* n = new DataGeneratorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataGeneratorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  obstacle_.Clear();
  config_.Clear();
  if (has_roi()) {
    GOOGLE_DCHECK(roi_ != NULL);
    roi_->::jmc_auto::perception::data_generator::ROI::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataGeneratorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.data_generator.ROI roi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.data_generator.DataGeneratorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.data_generator.DataGeneratorInfo)
  return false;
#undef DO_
}

void DataGeneratorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.data_generator.ROI roi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->roi_, output);
  }

  // repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obstacle(i), output);
  }

  // repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.data_generator.DataGeneratorInfo)
}

::google::protobuf::uint8* DataGeneratorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.data_generator.ROI roi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->roi_, deterministic, target);
  }

  // repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
  for (unsigned int i = 0, n = this->obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->obstacle(i), deterministic, target);
  }

  // repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.data_generator.DataGeneratorInfo)
  return target;
}

size_t DataGeneratorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
  {
    unsigned int count = this->obstacle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle(i));
    }
  }

  // repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
  {
    unsigned int count = this->config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config(i));
    }
  }

  // optional .jmc_auto.perception.data_generator.ROI roi = 1;
  if (has_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roi_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataGeneratorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DataGeneratorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataGeneratorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.data_generator.DataGeneratorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.data_generator.DataGeneratorInfo)
    MergeFrom(*source);
  }
}

void DataGeneratorInfo::MergeFrom(const DataGeneratorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  config_.MergeFrom(from.config_);
  if (from.has_roi()) {
    mutable_roi()->::jmc_auto::perception::data_generator::ROI::MergeFrom(from.roi());
  }
}

void DataGeneratorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataGeneratorInfo::CopyFrom(const DataGeneratorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.data_generator.DataGeneratorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataGeneratorInfo::IsInitialized() const {
  return true;
}

void DataGeneratorInfo::Swap(DataGeneratorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataGeneratorInfo::InternalSwap(DataGeneratorInfo* other) {
  obstacle_.InternalSwap(&other->obstacle_);
  config_.InternalSwap(&other->config_);
  std::swap(roi_, other->roi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataGeneratorInfo::GetMetadata() const {
  protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2ftool_2fdata_5fgenerator_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataGeneratorInfo

// optional .jmc_auto.perception.data_generator.ROI roi = 1;
bool DataGeneratorInfo::has_roi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataGeneratorInfo::set_has_roi() {
  _has_bits_[0] |= 0x00000001u;
}
void DataGeneratorInfo::clear_has_roi() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataGeneratorInfo::clear_roi() {
  if (roi_ != NULL) roi_->::jmc_auto::perception::data_generator::ROI::Clear();
  clear_has_roi();
}
const ::jmc_auto::perception::data_generator::ROI& DataGeneratorInfo::roi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
  return roi_ != NULL ? *roi_
                         : *::jmc_auto::perception::data_generator::ROI::internal_default_instance();
}
::jmc_auto::perception::data_generator::ROI* DataGeneratorInfo::mutable_roi() {
  set_has_roi();
  if (roi_ == NULL) {
    roi_ = new ::jmc_auto::perception::data_generator::ROI;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
  return roi_;
}
::jmc_auto::perception::data_generator::ROI* DataGeneratorInfo::release_roi() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
  clear_has_roi();
  ::jmc_auto::perception::data_generator::ROI* temp = roi_;
  roi_ = NULL;
  return temp;
}
void DataGeneratorInfo::set_allocated_roi(::jmc_auto::perception::data_generator::ROI* roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    set_has_roi();
  } else {
    clear_has_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.data_generator.DataGeneratorInfo.roi)
}

// repeated .jmc_auto.perception.data_generator.DataGeneratorObstacle obstacle = 2;
int DataGeneratorInfo::obstacle_size() const {
  return obstacle_.size();
}
void DataGeneratorInfo::clear_obstacle() {
  obstacle_.Clear();
}
const ::jmc_auto::perception::data_generator::DataGeneratorObstacle& DataGeneratorInfo::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_.Get(index);
}
::jmc_auto::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_.Mutable(index);
}
::jmc_auto::perception::data_generator::DataGeneratorObstacle* DataGeneratorInfo::add_obstacle() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle >*
DataGeneratorInfo::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return &obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::DataGeneratorObstacle >&
DataGeneratorInfo::obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.DataGeneratorInfo.obstacle)
  return obstacle_;
}

// repeated .jmc_auto.perception.data_generator.SensorConfig config = 3;
int DataGeneratorInfo::config_size() const {
  return config_.size();
}
void DataGeneratorInfo::clear_config() {
  config_.Clear();
}
const ::jmc_auto::perception::data_generator::SensorConfig& DataGeneratorInfo::config(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_.Get(index);
}
::jmc_auto::perception::data_generator::SensorConfig* DataGeneratorInfo::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_.Mutable(index);
}
::jmc_auto::perception::data_generator::SensorConfig* DataGeneratorInfo::add_config() {
  // @@protoc_insertion_point(field_add:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig >*
DataGeneratorInfo::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::perception::data_generator::SensorConfig >&
DataGeneratorInfo::config() const {
  // @@protoc_insertion_point(field_list:jmc_auto.perception.data_generator.DataGeneratorInfo.config)
  return config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data_generator
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
