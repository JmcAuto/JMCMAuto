// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/camera/detector/yolo_camera_detector/proto/yolo.proto

#ifndef PROTOBUF_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto__INCLUDED
#define PROTOBUF_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace perception {
namespace obstacle {
namespace yolo {
class ModelParam;
class ModelParamDefaultTypeInternal;
extern ModelParamDefaultTypeInternal _ModelParam_default_instance_;
class NMSParam;
class NMSParamDefaultTypeInternal;
extern NMSParamDefaultTypeInternal _NMSParam_default_instance_;
class NetworkParam;
class NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
class YoloParam;
class YoloParamDefaultTypeInternal;
extern YoloParamDefaultTypeInternal _YoloParam_default_instance_;
}  // namespace yolo
}  // namespace obstacle
}  // namespace perception
}  // namespace jmc_auto

namespace jmc_auto {
namespace perception {
namespace obstacle {
namespace yolo {

namespace protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto

enum ModelType {
  Caffe = 0
};
bool ModelType_IsValid(int value);
const ModelType ModelType_MIN = Caffe;
const ModelType ModelType_MAX = Caffe;
const int ModelType_ARRAYSIZE = ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelType_descriptor();
inline const ::std::string& ModelType_Name(ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelType_descriptor(), value);
}
inline bool ModelType_Parse(
    const ::std::string& name, ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelType>(
    ModelType_descriptor(), name, value);
}
// ===================================================================

class YoloParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.obstacle.yolo.YoloParam) */ {
 public:
  YoloParam();
  virtual ~YoloParam();

  YoloParam(const YoloParam& from);

  inline YoloParam& operator=(const YoloParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YoloParam& default_instance();

  static inline const YoloParam* internal_default_instance() {
    return reinterpret_cast<const YoloParam*>(
               &_YoloParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(YoloParam* other);

  // implements Message ----------------------------------------------

  inline YoloParam* New() const PROTOBUF_FINAL { return New(NULL); }

  YoloParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YoloParam& from);
  void MergeFrom(const YoloParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YoloParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
  bool has_model_param() const;
  void clear_model_param();
  static const int kModelParamFieldNumber = 1;
  const ::jmc_auto::perception::obstacle::yolo::ModelParam& model_param() const;
  ::jmc_auto::perception::obstacle::yolo::ModelParam* mutable_model_param();
  ::jmc_auto::perception::obstacle::yolo::ModelParam* release_model_param();
  void set_allocated_model_param(::jmc_auto::perception::obstacle::yolo::ModelParam* model_param);

  // required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
  bool has_net_param() const;
  void clear_net_param();
  static const int kNetParamFieldNumber = 2;
  const ::jmc_auto::perception::obstacle::yolo::NetworkParam& net_param() const;
  ::jmc_auto::perception::obstacle::yolo::NetworkParam* mutable_net_param();
  ::jmc_auto::perception::obstacle::yolo::NetworkParam* release_net_param();
  void set_allocated_net_param(::jmc_auto::perception::obstacle::yolo::NetworkParam* net_param);

  // optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 3;
  const ::jmc_auto::perception::obstacle::yolo::NMSParam& nms_param() const;
  ::jmc_auto::perception::obstacle::yolo::NMSParam* mutable_nms_param();
  ::jmc_auto::perception::obstacle::yolo::NMSParam* release_nms_param();
  void set_allocated_nms_param(::jmc_auto::perception::obstacle::yolo::NMSParam* nms_param);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.obstacle.yolo.YoloParam)
 private:
  void set_has_model_param();
  void clear_has_model_param();
  void set_has_net_param();
  void clear_has_net_param();
  void set_has_nms_param();
  void clear_has_nms_param();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::perception::obstacle::yolo::ModelParam* model_param_;
  ::jmc_auto::perception::obstacle::yolo::NetworkParam* net_param_;
  ::jmc_auto::perception::obstacle::yolo::NMSParam* nms_param_;
  friend struct protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModelParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.obstacle.yolo.ModelParam) */ {
 public:
  ModelParam();
  virtual ~ModelParam();

  ModelParam(const ModelParam& from);

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelParam& default_instance();

  static inline const ModelParam* internal_default_instance() {
    return reinterpret_cast<const ModelParam*>(
               &_ModelParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ModelParam* other);

  // implements Message ----------------------------------------------

  inline ModelParam* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModelParam& from);
  void MergeFrom(const ModelParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModelParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string model_name = 1 [default = "yolo-2d"];
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_model_name(::std::string&& value);
  #endif
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // optional string proto_file = 2 [default = "deploy.pt"];
  bool has_proto_file() const;
  void clear_proto_file();
  static const int kProtoFileFieldNumber = 2;
  const ::std::string& proto_file() const;
  void set_proto_file(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_file(::std::string&& value);
  #endif
  void set_proto_file(const char* value);
  void set_proto_file(const char* value, size_t size);
  ::std::string* mutable_proto_file();
  ::std::string* release_proto_file();
  void set_allocated_proto_file(::std::string* proto_file);

  // optional string weight_file = 3 [default = "deploy.md"];
  bool has_weight_file() const;
  void clear_weight_file();
  static const int kWeightFileFieldNumber = 3;
  const ::std::string& weight_file() const;
  void set_weight_file(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_file(::std::string&& value);
  #endif
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  ::std::string* mutable_weight_file();
  ::std::string* release_weight_file();
  void set_allocated_weight_file(::std::string* weight_file);

  // optional string anchors_file = 4 [default = "anchors.txt"];
  bool has_anchors_file() const;
  void clear_anchors_file();
  static const int kAnchorsFileFieldNumber = 4;
  const ::std::string& anchors_file() const;
  void set_anchors_file(const ::std::string& value);
  #if LANG_CXX11
  void set_anchors_file(::std::string&& value);
  #endif
  void set_anchors_file(const char* value);
  void set_anchors_file(const char* value, size_t size);
  ::std::string* mutable_anchors_file();
  ::std::string* release_anchors_file();
  void set_allocated_anchors_file(::std::string* anchors_file);

  // optional string types_file = 5 [default = "types.txt"];
  bool has_types_file() const;
  void clear_types_file();
  static const int kTypesFileFieldNumber = 5;
  const ::std::string& types_file() const;
  void set_types_file(const ::std::string& value);
  #if LANG_CXX11
  void set_types_file(::std::string&& value);
  #endif
  void set_types_file(const char* value);
  void set_types_file(const char* value, size_t size);
  ::std::string* mutable_types_file();
  ::std::string* release_types_file();
  void set_allocated_types_file(::std::string* types_file);

  // optional string feature_file = 6 [default = "feature.pt"];
  bool has_feature_file() const;
  void clear_feature_file();
  static const int kFeatureFileFieldNumber = 6;
  const ::std::string& feature_file() const;
  void set_feature_file(const ::std::string& value);
  #if LANG_CXX11
  void set_feature_file(::std::string&& value);
  #endif
  void set_feature_file(const char* value);
  void set_feature_file(const char* value, size_t size);
  ::std::string* mutable_feature_file();
  ::std::string* release_feature_file();
  void set_allocated_feature_file(::std::string* feature_file);

  // optional string calibratetable_root = 11 [default = "./"];
  bool has_calibratetable_root() const;
  void clear_calibratetable_root();
  static const int kCalibratetableRootFieldNumber = 11;
  const ::std::string& calibratetable_root() const;
  void set_calibratetable_root(const ::std::string& value);
  #if LANG_CXX11
  void set_calibratetable_root(::std::string&& value);
  #endif
  void set_calibratetable_root(const char* value);
  void set_calibratetable_root(const char* value, size_t size);
  ::std::string* mutable_calibratetable_root();
  ::std::string* release_calibratetable_root();
  void set_allocated_calibratetable_root(::std::string* calibratetable_root);

  // optional float min_2d_height = 9 [default = 0];
  bool has_min_2d_height() const;
  void clear_min_2d_height();
  static const int kMin2DHeightFieldNumber = 9;
  float min_2d_height() const;
  void set_min_2d_height(float value);

  // optional float min_3d_height = 10 [default = 0];
  bool has_min_3d_height() const;
  void clear_min_3d_height();
  static const int kMin3DHeightFieldNumber = 10;
  float min_3d_height() const;
  void set_min_3d_height(float value);

  // optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
  bool has_model_type() const;
  void clear_model_type();
  static const int kModelTypeFieldNumber = 12;
  ::jmc_auto::perception::obstacle::yolo::ModelType model_type() const;
  void set_model_type(::jmc_auto::perception::obstacle::yolo::ModelType value);

  // optional float offset_ratio = 7 [default = 0.288889];
  bool has_offset_ratio() const;
  void clear_offset_ratio();
  static const int kOffsetRatioFieldNumber = 7;
  float offset_ratio() const;
  void set_offset_ratio(float value);

  // optional float confidence_threshold = 8 [default = 0.1];
  bool has_confidence_threshold() const;
  void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 8;
  float confidence_threshold() const;
  void set_confidence_threshold(float value);

  // optional float cropped_ratio = 13 [default = 0.711111];
  bool has_cropped_ratio() const;
  void clear_cropped_ratio();
  static const int kCroppedRatioFieldNumber = 13;
  float cropped_ratio() const;
  void set_cropped_ratio(float value);

  // optional int32 resized_width = 14 [default = 1440];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 14;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 aligned_pixel = 15 [default = 32];
  bool has_aligned_pixel() const;
  void clear_aligned_pixel();
  static const int kAlignedPixelFieldNumber = 15;
  ::google::protobuf::int32 aligned_pixel() const;
  void set_aligned_pixel(::google::protobuf::int32 value);

  // optional int32 ignored_height = 16 [default = 100];
  bool has_ignored_height() const;
  void clear_ignored_height();
  static const int kIgnoredHeightFieldNumber = 16;
  ::google::protobuf::int32 ignored_height() const;
  void set_ignored_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.obstacle.yolo.ModelParam)
 private:
  void set_has_model_name();
  void clear_has_model_name();
  void set_has_proto_file();
  void clear_has_proto_file();
  void set_has_weight_file();
  void clear_has_weight_file();
  void set_has_anchors_file();
  void clear_has_anchors_file();
  void set_has_types_file();
  void clear_has_types_file();
  void set_has_feature_file();
  void clear_has_feature_file();
  void set_has_offset_ratio();
  void clear_has_offset_ratio();
  void set_has_cropped_ratio();
  void clear_has_cropped_ratio();
  void set_has_resized_width();
  void clear_has_resized_width();
  void set_has_aligned_pixel();
  void clear_has_aligned_pixel();
  void set_has_confidence_threshold();
  void clear_has_confidence_threshold();
  void set_has_min_2d_height();
  void clear_has_min_2d_height();
  void set_has_min_3d_height();
  void clear_has_min_3d_height();
  void set_has_calibratetable_root();
  void clear_has_calibratetable_root();
  void set_has_model_type();
  void clear_has_model_type();
  void set_has_ignored_height();
  void clear_has_ignored_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_model_name_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_proto_file_;
  ::google::protobuf::internal::ArenaStringPtr proto_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_weight_file_;
  ::google::protobuf::internal::ArenaStringPtr weight_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_anchors_file_;
  ::google::protobuf::internal::ArenaStringPtr anchors_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_types_file_;
  ::google::protobuf::internal::ArenaStringPtr types_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_feature_file_;
  ::google::protobuf::internal::ArenaStringPtr feature_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_calibratetable_root_;
  ::google::protobuf::internal::ArenaStringPtr calibratetable_root_;
  float min_2d_height_;
  float min_3d_height_;
  int model_type_;
  float offset_ratio_;
  float confidence_threshold_;
  float cropped_ratio_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::int32 aligned_pixel_;
  ::google::protobuf::int32 ignored_height_;
  friend struct protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.obstacle.yolo.NetworkParam) */ {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkParam& default_instance();

  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NetworkParam* other);

  // implements Message ----------------------------------------------

  inline NetworkParam* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string loc_blob = 1 [default = "loc_pred"];
  bool has_loc_blob() const;
  void clear_loc_blob();
  static const int kLocBlobFieldNumber = 1;
  const ::std::string& loc_blob() const;
  void set_loc_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_loc_blob(::std::string&& value);
  #endif
  void set_loc_blob(const char* value);
  void set_loc_blob(const char* value, size_t size);
  ::std::string* mutable_loc_blob();
  ::std::string* release_loc_blob();
  void set_allocated_loc_blob(::std::string* loc_blob);

  // optional string obj_blob = 2 [default = "obj_pred"];
  bool has_obj_blob() const;
  void clear_obj_blob();
  static const int kObjBlobFieldNumber = 2;
  const ::std::string& obj_blob() const;
  void set_obj_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_blob(::std::string&& value);
  #endif
  void set_obj_blob(const char* value);
  void set_obj_blob(const char* value, size_t size);
  ::std::string* mutable_obj_blob();
  ::std::string* release_obj_blob();
  void set_allocated_obj_blob(::std::string* obj_blob);

  // optional string cls_blob = 3 [default = "cls_pred"];
  bool has_cls_blob() const;
  void clear_cls_blob();
  static const int kClsBlobFieldNumber = 3;
  const ::std::string& cls_blob() const;
  void set_cls_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_cls_blob(::std::string&& value);
  #endif
  void set_cls_blob(const char* value);
  void set_cls_blob(const char* value, size_t size);
  ::std::string* mutable_cls_blob();
  ::std::string* release_cls_blob();
  void set_allocated_cls_blob(::std::string* cls_blob);

  // optional string ori_blob = 4 [default = "ori_pred"];
  bool has_ori_blob() const;
  void clear_ori_blob();
  static const int kOriBlobFieldNumber = 4;
  const ::std::string& ori_blob() const;
  void set_ori_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_ori_blob(::std::string&& value);
  #endif
  void set_ori_blob(const char* value);
  void set_ori_blob(const char* value, size_t size);
  ::std::string* mutable_ori_blob();
  ::std::string* release_ori_blob();
  void set_allocated_ori_blob(::std::string* ori_blob);

  // optional string dim_blob = 5 [default = "dim_pred"];
  bool has_dim_blob() const;
  void clear_dim_blob();
  static const int kDimBlobFieldNumber = 5;
  const ::std::string& dim_blob() const;
  void set_dim_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_dim_blob(::std::string&& value);
  #endif
  void set_dim_blob(const char* value);
  void set_dim_blob(const char* value, size_t size);
  ::std::string* mutable_dim_blob();
  ::std::string* release_dim_blob();
  void set_allocated_dim_blob(::std::string* dim_blob);

  // optional string lof_blob = 6 [default = "lof_pred"];
  bool has_lof_blob() const;
  void clear_lof_blob();
  static const int kLofBlobFieldNumber = 6;
  const ::std::string& lof_blob() const;
  void set_lof_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_lof_blob(::std::string&& value);
  #endif
  void set_lof_blob(const char* value);
  void set_lof_blob(const char* value, size_t size);
  ::std::string* mutable_lof_blob();
  ::std::string* release_lof_blob();
  void set_allocated_lof_blob(::std::string* lof_blob);

  // optional string lor_blob = 7 [default = "lor_pred"];
  bool has_lor_blob() const;
  void clear_lor_blob();
  static const int kLorBlobFieldNumber = 7;
  const ::std::string& lor_blob() const;
  void set_lor_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_lor_blob(::std::string&& value);
  #endif
  void set_lor_blob(const char* value);
  void set_lor_blob(const char* value, size_t size);
  ::std::string* mutable_lor_blob();
  ::std::string* release_lor_blob();
  void set_allocated_lor_blob(::std::string* lor_blob);

  // optional string seg_blob = 8 [default = "seg_pred"];
  bool has_seg_blob() const;
  void clear_seg_blob();
  static const int kSegBlobFieldNumber = 8;
  const ::std::string& seg_blob() const;
  void set_seg_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_seg_blob(::std::string&& value);
  #endif
  void set_seg_blob(const char* value);
  void set_seg_blob(const char* value, size_t size);
  ::std::string* mutable_seg_blob();
  ::std::string* release_seg_blob();
  void set_allocated_seg_blob(::std::string* seg_blob);

  // optional string input_blob = 10 [default = "data"];
  bool has_input_blob() const;
  void clear_input_blob();
  static const int kInputBlobFieldNumber = 10;
  const ::std::string& input_blob() const;
  void set_input_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_input_blob(::std::string&& value);
  #endif
  void set_input_blob(const char* value);
  void set_input_blob(const char* value, size_t size);
  ::std::string* mutable_input_blob();
  ::std::string* release_input_blob();
  void set_allocated_input_blob(::std::string* input_blob);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.obstacle.yolo.NetworkParam)
 private:
  void set_has_loc_blob();
  void clear_has_loc_blob();
  void set_has_obj_blob();
  void clear_has_obj_blob();
  void set_has_cls_blob();
  void clear_has_cls_blob();
  void set_has_ori_blob();
  void clear_has_ori_blob();
  void set_has_dim_blob();
  void clear_has_dim_blob();
  void set_has_lof_blob();
  void clear_has_lof_blob();
  void set_has_lor_blob();
  void clear_has_lor_blob();
  void set_has_seg_blob();
  void clear_has_seg_blob();
  void set_has_input_blob();
  void clear_has_input_blob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_loc_blob_;
  ::google::protobuf::internal::ArenaStringPtr loc_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_obj_blob_;
  ::google::protobuf::internal::ArenaStringPtr obj_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_cls_blob_;
  ::google::protobuf::internal::ArenaStringPtr cls_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_ori_blob_;
  ::google::protobuf::internal::ArenaStringPtr ori_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_dim_blob_;
  ::google::protobuf::internal::ArenaStringPtr dim_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_lof_blob_;
  ::google::protobuf::internal::ArenaStringPtr lof_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_lor_blob_;
  ::google::protobuf::internal::ArenaStringPtr lor_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_seg_blob_;
  ::google::protobuf::internal::ArenaStringPtr seg_blob_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_input_blob_;
  ::google::protobuf::internal::ArenaStringPtr input_blob_;
  friend struct protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NMSParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.perception.obstacle.yolo.NMSParam) */ {
 public:
  NMSParam();
  virtual ~NMSParam();

  NMSParam(const NMSParam& from);

  inline NMSParam& operator=(const NMSParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NMSParam& default_instance();

  static inline const NMSParam* internal_default_instance() {
    return reinterpret_cast<const NMSParam*>(
               &_NMSParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NMSParam* other);

  // implements Message ----------------------------------------------

  inline NMSParam* New() const PROTOBUF_FINAL { return New(NULL); }

  NMSParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NMSParam& from);
  void MergeFrom(const NMSParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NMSParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "NormalNMS"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float threshold = 2 [default = 0.4];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  float threshold() const;
  void set_threshold(float value);

  // optional float sigma = 3 [default = 0.4];
  bool has_sigma() const;
  void clear_sigma();
  static const int kSigmaFieldNumber = 3;
  float sigma() const;
  void set_sigma(float value);

  // optional float inter_cls_nms_thresh = 4 [default = 1];
  bool has_inter_cls_nms_thresh() const;
  void clear_inter_cls_nms_thresh();
  static const int kInterClsNmsThreshFieldNumber = 4;
  float inter_cls_nms_thresh() const;
  void set_inter_cls_nms_thresh(float value);

  // optional float cross_class_merge_thresh = 5 [default = 0.8];
  bool has_cross_class_merge_thresh() const;
  void clear_cross_class_merge_thresh();
  static const int kCrossClassMergeThreshFieldNumber = 5;
  float cross_class_merge_thresh() const;
  void set_cross_class_merge_thresh(float value);

  // @@protoc_insertion_point(class_scope:jmc_auto.perception.obstacle.yolo.NMSParam)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_threshold();
  void clear_has_threshold();
  void set_has_sigma();
  void clear_has_sigma();
  void set_has_inter_cls_nms_thresh();
  void clear_has_inter_cls_nms_thresh();
  void set_has_cross_class_merge_thresh();
  void clear_has_cross_class_merge_thresh();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float threshold_;
  float sigma_;
  float inter_cls_nms_thresh_;
  float cross_class_merge_thresh_;
  friend struct protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// YoloParam

// required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
inline bool YoloParam::has_model_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YoloParam::set_has_model_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YoloParam::clear_has_model_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YoloParam::clear_model_param() {
  if (model_param_ != NULL) model_param_->::jmc_auto::perception::obstacle::yolo::ModelParam::Clear();
  clear_has_model_param();
}
inline const ::jmc_auto::perception::obstacle::yolo::ModelParam& YoloParam::model_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
  return model_param_ != NULL ? *model_param_
                         : *::jmc_auto::perception::obstacle::yolo::ModelParam::internal_default_instance();
}
inline ::jmc_auto::perception::obstacle::yolo::ModelParam* YoloParam::mutable_model_param() {
  set_has_model_param();
  if (model_param_ == NULL) {
    model_param_ = new ::jmc_auto::perception::obstacle::yolo::ModelParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
  return model_param_;
}
inline ::jmc_auto::perception::obstacle::yolo::ModelParam* YoloParam::release_model_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
  clear_has_model_param();
  ::jmc_auto::perception::obstacle::yolo::ModelParam* temp = model_param_;
  model_param_ = NULL;
  return temp;
}
inline void YoloParam::set_allocated_model_param(::jmc_auto::perception::obstacle::yolo::ModelParam* model_param) {
  delete model_param_;
  model_param_ = model_param;
  if (model_param) {
    set_has_model_param();
  } else {
    clear_has_model_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
}

// required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
inline bool YoloParam::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YoloParam::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YoloParam::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YoloParam::clear_net_param() {
  if (net_param_ != NULL) net_param_->::jmc_auto::perception::obstacle::yolo::NetworkParam::Clear();
  clear_has_net_param();
}
inline const ::jmc_auto::perception::obstacle::yolo::NetworkParam& YoloParam::net_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::jmc_auto::perception::obstacle::yolo::NetworkParam::internal_default_instance();
}
inline ::jmc_auto::perception::obstacle::yolo::NetworkParam* YoloParam::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::jmc_auto::perception::obstacle::yolo::NetworkParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
  return net_param_;
}
inline ::jmc_auto::perception::obstacle::yolo::NetworkParam* YoloParam::release_net_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
  clear_has_net_param();
  ::jmc_auto::perception::obstacle::yolo::NetworkParam* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void YoloParam::set_allocated_net_param(::jmc_auto::perception::obstacle::yolo::NetworkParam* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
}

// optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
inline bool YoloParam::has_nms_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YoloParam::set_has_nms_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YoloParam::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YoloParam::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::jmc_auto::perception::obstacle::yolo::NMSParam::Clear();
  clear_has_nms_param();
}
inline const ::jmc_auto::perception::obstacle::yolo::NMSParam& YoloParam::nms_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::jmc_auto::perception::obstacle::yolo::NMSParam::internal_default_instance();
}
inline ::jmc_auto::perception::obstacle::yolo::NMSParam* YoloParam::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::jmc_auto::perception::obstacle::yolo::NMSParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
  return nms_param_;
}
inline ::jmc_auto::perception::obstacle::yolo::NMSParam* YoloParam::release_nms_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
  clear_has_nms_param();
  ::jmc_auto::perception::obstacle::yolo::NMSParam* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void YoloParam::set_allocated_nms_param(::jmc_auto::perception::obstacle::yolo::NMSParam* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
}

// -------------------------------------------------------------------

// ModelParam

// required string model_name = 1 [default = "yolo-2d"];
inline bool ModelParam::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelParam::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelParam::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelParam::clear_model_name() {
  model_name_.ClearToDefaultNoArena(&ModelParam::_default_model_name_.get());
  clear_has_model_name();
}
inline const ::std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
  return model_name_.GetNoArena();
}
inline void ModelParam::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&ModelParam::_default_model_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
#if LANG_CXX11
inline void ModelParam::set_model_name(::std::string&& value) {
  set_has_model_name();
  model_name_.SetNoArena(
    &ModelParam::_default_model_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
#endif
inline void ModelParam::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model_name();
  model_name_.SetNoArena(&ModelParam::_default_model_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&ModelParam::_default_model_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
inline ::std::string* ModelParam::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
  return model_name_.MutableNoArena(&ModelParam::_default_model_name_.get());
}
inline ::std::string* ModelParam::release_model_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&ModelParam::_default_model_name_.get());
}
inline void ModelParam::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&ModelParam::_default_model_name_.get(), model_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "deploy.pt"];
inline bool ModelParam::has_proto_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelParam::set_has_proto_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelParam::clear_has_proto_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelParam::clear_proto_file() {
  proto_file_.ClearToDefaultNoArena(&ModelParam::_default_proto_file_.get());
  clear_has_proto_file();
}
inline const ::std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
  return proto_file_.GetNoArena();
}
inline void ModelParam::set_proto_file(const ::std::string& value) {
  set_has_proto_file();
  proto_file_.SetNoArena(&ModelParam::_default_proto_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
#if LANG_CXX11
inline void ModelParam::set_proto_file(::std::string&& value) {
  set_has_proto_file();
  proto_file_.SetNoArena(
    &ModelParam::_default_proto_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
#endif
inline void ModelParam::set_proto_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_file();
  proto_file_.SetNoArena(&ModelParam::_default_proto_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value, size_t size) {
  set_has_proto_file();
  proto_file_.SetNoArena(&ModelParam::_default_proto_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
inline ::std::string* ModelParam::mutable_proto_file() {
  set_has_proto_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
  return proto_file_.MutableNoArena(&ModelParam::_default_proto_file_.get());
}
inline ::std::string* ModelParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
  clear_has_proto_file();
  return proto_file_.ReleaseNoArena(&ModelParam::_default_proto_file_.get());
}
inline void ModelParam::set_allocated_proto_file(::std::string* proto_file) {
  if (proto_file != NULL) {
    set_has_proto_file();
  } else {
    clear_has_proto_file();
  }
  proto_file_.SetAllocatedNoArena(&ModelParam::_default_proto_file_.get(), proto_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "deploy.md"];
inline bool ModelParam::has_weight_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelParam::set_has_weight_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelParam::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelParam::clear_weight_file() {
  weight_file_.ClearToDefaultNoArena(&ModelParam::_default_weight_file_.get());
  clear_has_weight_file();
}
inline const ::std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
  return weight_file_.GetNoArena();
}
inline void ModelParam::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&ModelParam::_default_weight_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
#if LANG_CXX11
inline void ModelParam::set_weight_file(::std::string&& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(
    &ModelParam::_default_weight_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
#endif
inline void ModelParam::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weight_file();
  weight_file_.SetNoArena(&ModelParam::_default_weight_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  weight_file_.SetNoArena(&ModelParam::_default_weight_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
inline ::std::string* ModelParam::mutable_weight_file() {
  set_has_weight_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
  return weight_file_.MutableNoArena(&ModelParam::_default_weight_file_.get());
}
inline ::std::string* ModelParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
  clear_has_weight_file();
  return weight_file_.ReleaseNoArena(&ModelParam::_default_weight_file_.get());
}
inline void ModelParam::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file != NULL) {
    set_has_weight_file();
  } else {
    clear_has_weight_file();
  }
  weight_file_.SetAllocatedNoArena(&ModelParam::_default_weight_file_.get(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}

// optional string anchors_file = 4 [default = "anchors.txt"];
inline bool ModelParam::has_anchors_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelParam::set_has_anchors_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelParam::clear_has_anchors_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelParam::clear_anchors_file() {
  anchors_file_.ClearToDefaultNoArena(&ModelParam::_default_anchors_file_.get());
  clear_has_anchors_file();
}
inline const ::std::string& ModelParam::anchors_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
  return anchors_file_.GetNoArena();
}
inline void ModelParam::set_anchors_file(const ::std::string& value) {
  set_has_anchors_file();
  anchors_file_.SetNoArena(&ModelParam::_default_anchors_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
#if LANG_CXX11
inline void ModelParam::set_anchors_file(::std::string&& value) {
  set_has_anchors_file();
  anchors_file_.SetNoArena(
    &ModelParam::_default_anchors_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
#endif
inline void ModelParam::set_anchors_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_anchors_file();
  anchors_file_.SetNoArena(&ModelParam::_default_anchors_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
inline void ModelParam::set_anchors_file(const char* value, size_t size) {
  set_has_anchors_file();
  anchors_file_.SetNoArena(&ModelParam::_default_anchors_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
inline ::std::string* ModelParam::mutable_anchors_file() {
  set_has_anchors_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
  return anchors_file_.MutableNoArena(&ModelParam::_default_anchors_file_.get());
}
inline ::std::string* ModelParam::release_anchors_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
  clear_has_anchors_file();
  return anchors_file_.ReleaseNoArena(&ModelParam::_default_anchors_file_.get());
}
inline void ModelParam::set_allocated_anchors_file(::std::string* anchors_file) {
  if (anchors_file != NULL) {
    set_has_anchors_file();
  } else {
    clear_has_anchors_file();
  }
  anchors_file_.SetAllocatedNoArena(&ModelParam::_default_anchors_file_.get(), anchors_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}

// optional string types_file = 5 [default = "types.txt"];
inline bool ModelParam::has_types_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelParam::set_has_types_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelParam::clear_has_types_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelParam::clear_types_file() {
  types_file_.ClearToDefaultNoArena(&ModelParam::_default_types_file_.get());
  clear_has_types_file();
}
inline const ::std::string& ModelParam::types_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
  return types_file_.GetNoArena();
}
inline void ModelParam::set_types_file(const ::std::string& value) {
  set_has_types_file();
  types_file_.SetNoArena(&ModelParam::_default_types_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
#if LANG_CXX11
inline void ModelParam::set_types_file(::std::string&& value) {
  set_has_types_file();
  types_file_.SetNoArena(
    &ModelParam::_default_types_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
#endif
inline void ModelParam::set_types_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_types_file();
  types_file_.SetNoArena(&ModelParam::_default_types_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
inline void ModelParam::set_types_file(const char* value, size_t size) {
  set_has_types_file();
  types_file_.SetNoArena(&ModelParam::_default_types_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
inline ::std::string* ModelParam::mutable_types_file() {
  set_has_types_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
  return types_file_.MutableNoArena(&ModelParam::_default_types_file_.get());
}
inline ::std::string* ModelParam::release_types_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
  clear_has_types_file();
  return types_file_.ReleaseNoArena(&ModelParam::_default_types_file_.get());
}
inline void ModelParam::set_allocated_types_file(::std::string* types_file) {
  if (types_file != NULL) {
    set_has_types_file();
  } else {
    clear_has_types_file();
  }
  types_file_.SetAllocatedNoArena(&ModelParam::_default_types_file_.get(), types_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}

// optional string feature_file = 6 [default = "feature.pt"];
inline bool ModelParam::has_feature_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelParam::set_has_feature_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelParam::clear_has_feature_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelParam::clear_feature_file() {
  feature_file_.ClearToDefaultNoArena(&ModelParam::_default_feature_file_.get());
  clear_has_feature_file();
}
inline const ::std::string& ModelParam::feature_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
  return feature_file_.GetNoArena();
}
inline void ModelParam::set_feature_file(const ::std::string& value) {
  set_has_feature_file();
  feature_file_.SetNoArena(&ModelParam::_default_feature_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
#if LANG_CXX11
inline void ModelParam::set_feature_file(::std::string&& value) {
  set_has_feature_file();
  feature_file_.SetNoArena(
    &ModelParam::_default_feature_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
#endif
inline void ModelParam::set_feature_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_feature_file();
  feature_file_.SetNoArena(&ModelParam::_default_feature_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
inline void ModelParam::set_feature_file(const char* value, size_t size) {
  set_has_feature_file();
  feature_file_.SetNoArena(&ModelParam::_default_feature_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
inline ::std::string* ModelParam::mutable_feature_file() {
  set_has_feature_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
  return feature_file_.MutableNoArena(&ModelParam::_default_feature_file_.get());
}
inline ::std::string* ModelParam::release_feature_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
  clear_has_feature_file();
  return feature_file_.ReleaseNoArena(&ModelParam::_default_feature_file_.get());
}
inline void ModelParam::set_allocated_feature_file(::std::string* feature_file) {
  if (feature_file != NULL) {
    set_has_feature_file();
  } else {
    clear_has_feature_file();
  }
  feature_file_.SetAllocatedNoArena(&ModelParam::_default_feature_file_.get(), feature_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}

// optional float offset_ratio = 7 [default = 0.288889];
inline bool ModelParam::has_offset_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModelParam::set_has_offset_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModelParam::clear_has_offset_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModelParam::clear_offset_ratio() {
  offset_ratio_ = 0.288889f;
  clear_has_offset_ratio();
}
inline float ModelParam::offset_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.offset_ratio)
  return offset_ratio_;
}
inline void ModelParam::set_offset_ratio(float value) {
  set_has_offset_ratio();
  offset_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.offset_ratio)
}

// optional float cropped_ratio = 13 [default = 0.711111];
inline bool ModelParam::has_cropped_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModelParam::set_has_cropped_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModelParam::clear_has_cropped_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModelParam::clear_cropped_ratio() {
  cropped_ratio_ = 0.711111f;
  clear_has_cropped_ratio();
}
inline float ModelParam::cropped_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.cropped_ratio)
  return cropped_ratio_;
}
inline void ModelParam::set_cropped_ratio(float value) {
  set_has_cropped_ratio();
  cropped_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.cropped_ratio)
}

// optional int32 resized_width = 14 [default = 1440];
inline bool ModelParam::has_resized_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModelParam::set_has_resized_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModelParam::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModelParam::clear_resized_width() {
  resized_width_ = 1440;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 ModelParam::resized_width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.resized_width)
  return resized_width_;
}
inline void ModelParam::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.resized_width)
}

// optional int32 aligned_pixel = 15 [default = 32];
inline bool ModelParam::has_aligned_pixel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModelParam::set_has_aligned_pixel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModelParam::clear_has_aligned_pixel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModelParam::clear_aligned_pixel() {
  aligned_pixel_ = 32;
  clear_has_aligned_pixel();
}
inline ::google::protobuf::int32 ModelParam::aligned_pixel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.aligned_pixel)
  return aligned_pixel_;
}
inline void ModelParam::set_aligned_pixel(::google::protobuf::int32 value) {
  set_has_aligned_pixel();
  aligned_pixel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.aligned_pixel)
}

// optional float confidence_threshold = 8 [default = 0.1];
inline bool ModelParam::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModelParam::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModelParam::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModelParam::clear_confidence_threshold() {
  confidence_threshold_ = 0.1f;
  clear_has_confidence_threshold();
}
inline float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.confidence_threshold)
  return confidence_threshold_;
}
inline void ModelParam::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.confidence_threshold)
}

// optional float min_2d_height = 9 [default = 0];
inline bool ModelParam::has_min_2d_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModelParam::set_has_min_2d_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModelParam::clear_has_min_2d_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModelParam::clear_min_2d_height() {
  min_2d_height_ = 0;
  clear_has_min_2d_height();
}
inline float ModelParam::min_2d_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.min_2d_height)
  return min_2d_height_;
}
inline void ModelParam::set_min_2d_height(float value) {
  set_has_min_2d_height();
  min_2d_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.min_2d_height)
}

// optional float min_3d_height = 10 [default = 0];
inline bool ModelParam::has_min_3d_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModelParam::set_has_min_3d_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModelParam::clear_has_min_3d_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModelParam::clear_min_3d_height() {
  min_3d_height_ = 0;
  clear_has_min_3d_height();
}
inline float ModelParam::min_3d_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.min_3d_height)
  return min_3d_height_;
}
inline void ModelParam::set_min_3d_height(float value) {
  set_has_min_3d_height();
  min_3d_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.min_3d_height)
}

// optional string calibratetable_root = 11 [default = "./"];
inline bool ModelParam::has_calibratetable_root() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelParam::set_has_calibratetable_root() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelParam::clear_has_calibratetable_root() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelParam::clear_calibratetable_root() {
  calibratetable_root_.ClearToDefaultNoArena(&ModelParam::_default_calibratetable_root_.get());
  clear_has_calibratetable_root();
}
inline const ::std::string& ModelParam::calibratetable_root() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
  return calibratetable_root_.GetNoArena();
}
inline void ModelParam::set_calibratetable_root(const ::std::string& value) {
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(&ModelParam::_default_calibratetable_root_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
#if LANG_CXX11
inline void ModelParam::set_calibratetable_root(::std::string&& value) {
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(
    &ModelParam::_default_calibratetable_root_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
#endif
inline void ModelParam::set_calibratetable_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(&ModelParam::_default_calibratetable_root_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
inline void ModelParam::set_calibratetable_root(const char* value, size_t size) {
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(&ModelParam::_default_calibratetable_root_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
inline ::std::string* ModelParam::mutable_calibratetable_root() {
  set_has_calibratetable_root();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
  return calibratetable_root_.MutableNoArena(&ModelParam::_default_calibratetable_root_.get());
}
inline ::std::string* ModelParam::release_calibratetable_root() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
  clear_has_calibratetable_root();
  return calibratetable_root_.ReleaseNoArena(&ModelParam::_default_calibratetable_root_.get());
}
inline void ModelParam::set_allocated_calibratetable_root(::std::string* calibratetable_root) {
  if (calibratetable_root != NULL) {
    set_has_calibratetable_root();
  } else {
    clear_has_calibratetable_root();
  }
  calibratetable_root_.SetAllocatedNoArena(&ModelParam::_default_calibratetable_root_.get(), calibratetable_root);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}

// optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
inline bool ModelParam::has_model_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModelParam::set_has_model_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModelParam::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModelParam::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::jmc_auto::perception::obstacle::yolo::ModelType ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.model_type)
  return static_cast< ::jmc_auto::perception::obstacle::yolo::ModelType >(model_type_);
}
inline void ModelParam::set_model_type(::jmc_auto::perception::obstacle::yolo::ModelType value) {
  assert(::jmc_auto::perception::obstacle::yolo::ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.model_type)
}

// optional int32 ignored_height = 16 [default = 100];
inline bool ModelParam::has_ignored_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModelParam::set_has_ignored_height() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModelParam::clear_has_ignored_height() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModelParam::clear_ignored_height() {
  ignored_height_ = 100;
  clear_has_ignored_height();
}
inline ::google::protobuf::int32 ModelParam::ignored_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.ignored_height)
  return ignored_height_;
}
inline void ModelParam::set_ignored_height(::google::protobuf::int32 value) {
  set_has_ignored_height();
  ignored_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.ignored_height)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string loc_blob = 1 [default = "loc_pred"];
inline bool NetworkParam::has_loc_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkParam::set_has_loc_blob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkParam::clear_has_loc_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkParam::clear_loc_blob() {
  loc_blob_.ClearToDefaultNoArena(&NetworkParam::_default_loc_blob_.get());
  clear_has_loc_blob();
}
inline const ::std::string& NetworkParam::loc_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
  return loc_blob_.GetNoArena();
}
inline void NetworkParam::set_loc_blob(const ::std::string& value) {
  set_has_loc_blob();
  loc_blob_.SetNoArena(&NetworkParam::_default_loc_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_loc_blob(::std::string&& value) {
  set_has_loc_blob();
  loc_blob_.SetNoArena(
    &NetworkParam::_default_loc_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
#endif
inline void NetworkParam::set_loc_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loc_blob();
  loc_blob_.SetNoArena(&NetworkParam::_default_loc_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
inline void NetworkParam::set_loc_blob(const char* value, size_t size) {
  set_has_loc_blob();
  loc_blob_.SetNoArena(&NetworkParam::_default_loc_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
inline ::std::string* NetworkParam::mutable_loc_blob() {
  set_has_loc_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
  return loc_blob_.MutableNoArena(&NetworkParam::_default_loc_blob_.get());
}
inline ::std::string* NetworkParam::release_loc_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
  clear_has_loc_blob();
  return loc_blob_.ReleaseNoArena(&NetworkParam::_default_loc_blob_.get());
}
inline void NetworkParam::set_allocated_loc_blob(::std::string* loc_blob) {
  if (loc_blob != NULL) {
    set_has_loc_blob();
  } else {
    clear_has_loc_blob();
  }
  loc_blob_.SetAllocatedNoArena(&NetworkParam::_default_loc_blob_.get(), loc_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}

// optional string obj_blob = 2 [default = "obj_pred"];
inline bool NetworkParam::has_obj_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkParam::set_has_obj_blob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkParam::clear_has_obj_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkParam::clear_obj_blob() {
  obj_blob_.ClearToDefaultNoArena(&NetworkParam::_default_obj_blob_.get());
  clear_has_obj_blob();
}
inline const ::std::string& NetworkParam::obj_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
  return obj_blob_.GetNoArena();
}
inline void NetworkParam::set_obj_blob(const ::std::string& value) {
  set_has_obj_blob();
  obj_blob_.SetNoArena(&NetworkParam::_default_obj_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_obj_blob(::std::string&& value) {
  set_has_obj_blob();
  obj_blob_.SetNoArena(
    &NetworkParam::_default_obj_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
#endif
inline void NetworkParam::set_obj_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_obj_blob();
  obj_blob_.SetNoArena(&NetworkParam::_default_obj_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
inline void NetworkParam::set_obj_blob(const char* value, size_t size) {
  set_has_obj_blob();
  obj_blob_.SetNoArena(&NetworkParam::_default_obj_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
inline ::std::string* NetworkParam::mutable_obj_blob() {
  set_has_obj_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
  return obj_blob_.MutableNoArena(&NetworkParam::_default_obj_blob_.get());
}
inline ::std::string* NetworkParam::release_obj_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
  clear_has_obj_blob();
  return obj_blob_.ReleaseNoArena(&NetworkParam::_default_obj_blob_.get());
}
inline void NetworkParam::set_allocated_obj_blob(::std::string* obj_blob) {
  if (obj_blob != NULL) {
    set_has_obj_blob();
  } else {
    clear_has_obj_blob();
  }
  obj_blob_.SetAllocatedNoArena(&NetworkParam::_default_obj_blob_.get(), obj_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}

// optional string cls_blob = 3 [default = "cls_pred"];
inline bool NetworkParam::has_cls_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkParam::set_has_cls_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkParam::clear_has_cls_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkParam::clear_cls_blob() {
  cls_blob_.ClearToDefaultNoArena(&NetworkParam::_default_cls_blob_.get());
  clear_has_cls_blob();
}
inline const ::std::string& NetworkParam::cls_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
  return cls_blob_.GetNoArena();
}
inline void NetworkParam::set_cls_blob(const ::std::string& value) {
  set_has_cls_blob();
  cls_blob_.SetNoArena(&NetworkParam::_default_cls_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_cls_blob(::std::string&& value) {
  set_has_cls_blob();
  cls_blob_.SetNoArena(
    &NetworkParam::_default_cls_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
#endif
inline void NetworkParam::set_cls_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cls_blob();
  cls_blob_.SetNoArena(&NetworkParam::_default_cls_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
inline void NetworkParam::set_cls_blob(const char* value, size_t size) {
  set_has_cls_blob();
  cls_blob_.SetNoArena(&NetworkParam::_default_cls_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
inline ::std::string* NetworkParam::mutable_cls_blob() {
  set_has_cls_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
  return cls_blob_.MutableNoArena(&NetworkParam::_default_cls_blob_.get());
}
inline ::std::string* NetworkParam::release_cls_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
  clear_has_cls_blob();
  return cls_blob_.ReleaseNoArena(&NetworkParam::_default_cls_blob_.get());
}
inline void NetworkParam::set_allocated_cls_blob(::std::string* cls_blob) {
  if (cls_blob != NULL) {
    set_has_cls_blob();
  } else {
    clear_has_cls_blob();
  }
  cls_blob_.SetAllocatedNoArena(&NetworkParam::_default_cls_blob_.get(), cls_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}

// optional string ori_blob = 4 [default = "ori_pred"];
inline bool NetworkParam::has_ori_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkParam::set_has_ori_blob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkParam::clear_has_ori_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkParam::clear_ori_blob() {
  ori_blob_.ClearToDefaultNoArena(&NetworkParam::_default_ori_blob_.get());
  clear_has_ori_blob();
}
inline const ::std::string& NetworkParam::ori_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
  return ori_blob_.GetNoArena();
}
inline void NetworkParam::set_ori_blob(const ::std::string& value) {
  set_has_ori_blob();
  ori_blob_.SetNoArena(&NetworkParam::_default_ori_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_ori_blob(::std::string&& value) {
  set_has_ori_blob();
  ori_blob_.SetNoArena(
    &NetworkParam::_default_ori_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
#endif
inline void NetworkParam::set_ori_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ori_blob();
  ori_blob_.SetNoArena(&NetworkParam::_default_ori_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
inline void NetworkParam::set_ori_blob(const char* value, size_t size) {
  set_has_ori_blob();
  ori_blob_.SetNoArena(&NetworkParam::_default_ori_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
inline ::std::string* NetworkParam::mutable_ori_blob() {
  set_has_ori_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
  return ori_blob_.MutableNoArena(&NetworkParam::_default_ori_blob_.get());
}
inline ::std::string* NetworkParam::release_ori_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
  clear_has_ori_blob();
  return ori_blob_.ReleaseNoArena(&NetworkParam::_default_ori_blob_.get());
}
inline void NetworkParam::set_allocated_ori_blob(::std::string* ori_blob) {
  if (ori_blob != NULL) {
    set_has_ori_blob();
  } else {
    clear_has_ori_blob();
  }
  ori_blob_.SetAllocatedNoArena(&NetworkParam::_default_ori_blob_.get(), ori_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}

// optional string dim_blob = 5 [default = "dim_pred"];
inline bool NetworkParam::has_dim_blob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkParam::set_has_dim_blob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkParam::clear_has_dim_blob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkParam::clear_dim_blob() {
  dim_blob_.ClearToDefaultNoArena(&NetworkParam::_default_dim_blob_.get());
  clear_has_dim_blob();
}
inline const ::std::string& NetworkParam::dim_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
  return dim_blob_.GetNoArena();
}
inline void NetworkParam::set_dim_blob(const ::std::string& value) {
  set_has_dim_blob();
  dim_blob_.SetNoArena(&NetworkParam::_default_dim_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_dim_blob(::std::string&& value) {
  set_has_dim_blob();
  dim_blob_.SetNoArena(
    &NetworkParam::_default_dim_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
#endif
inline void NetworkParam::set_dim_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dim_blob();
  dim_blob_.SetNoArena(&NetworkParam::_default_dim_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
inline void NetworkParam::set_dim_blob(const char* value, size_t size) {
  set_has_dim_blob();
  dim_blob_.SetNoArena(&NetworkParam::_default_dim_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
inline ::std::string* NetworkParam::mutable_dim_blob() {
  set_has_dim_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
  return dim_blob_.MutableNoArena(&NetworkParam::_default_dim_blob_.get());
}
inline ::std::string* NetworkParam::release_dim_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
  clear_has_dim_blob();
  return dim_blob_.ReleaseNoArena(&NetworkParam::_default_dim_blob_.get());
}
inline void NetworkParam::set_allocated_dim_blob(::std::string* dim_blob) {
  if (dim_blob != NULL) {
    set_has_dim_blob();
  } else {
    clear_has_dim_blob();
  }
  dim_blob_.SetAllocatedNoArena(&NetworkParam::_default_dim_blob_.get(), dim_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}

// optional string lof_blob = 6 [default = "lof_pred"];
inline bool NetworkParam::has_lof_blob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkParam::set_has_lof_blob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkParam::clear_has_lof_blob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkParam::clear_lof_blob() {
  lof_blob_.ClearToDefaultNoArena(&NetworkParam::_default_lof_blob_.get());
  clear_has_lof_blob();
}
inline const ::std::string& NetworkParam::lof_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
  return lof_blob_.GetNoArena();
}
inline void NetworkParam::set_lof_blob(const ::std::string& value) {
  set_has_lof_blob();
  lof_blob_.SetNoArena(&NetworkParam::_default_lof_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_lof_blob(::std::string&& value) {
  set_has_lof_blob();
  lof_blob_.SetNoArena(
    &NetworkParam::_default_lof_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
#endif
inline void NetworkParam::set_lof_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lof_blob();
  lof_blob_.SetNoArena(&NetworkParam::_default_lof_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
inline void NetworkParam::set_lof_blob(const char* value, size_t size) {
  set_has_lof_blob();
  lof_blob_.SetNoArena(&NetworkParam::_default_lof_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
inline ::std::string* NetworkParam::mutable_lof_blob() {
  set_has_lof_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
  return lof_blob_.MutableNoArena(&NetworkParam::_default_lof_blob_.get());
}
inline ::std::string* NetworkParam::release_lof_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
  clear_has_lof_blob();
  return lof_blob_.ReleaseNoArena(&NetworkParam::_default_lof_blob_.get());
}
inline void NetworkParam::set_allocated_lof_blob(::std::string* lof_blob) {
  if (lof_blob != NULL) {
    set_has_lof_blob();
  } else {
    clear_has_lof_blob();
  }
  lof_blob_.SetAllocatedNoArena(&NetworkParam::_default_lof_blob_.get(), lof_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}

// optional string lor_blob = 7 [default = "lor_pred"];
inline bool NetworkParam::has_lor_blob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetworkParam::set_has_lor_blob() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetworkParam::clear_has_lor_blob() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetworkParam::clear_lor_blob() {
  lor_blob_.ClearToDefaultNoArena(&NetworkParam::_default_lor_blob_.get());
  clear_has_lor_blob();
}
inline const ::std::string& NetworkParam::lor_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
  return lor_blob_.GetNoArena();
}
inline void NetworkParam::set_lor_blob(const ::std::string& value) {
  set_has_lor_blob();
  lor_blob_.SetNoArena(&NetworkParam::_default_lor_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_lor_blob(::std::string&& value) {
  set_has_lor_blob();
  lor_blob_.SetNoArena(
    &NetworkParam::_default_lor_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
#endif
inline void NetworkParam::set_lor_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lor_blob();
  lor_blob_.SetNoArena(&NetworkParam::_default_lor_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
inline void NetworkParam::set_lor_blob(const char* value, size_t size) {
  set_has_lor_blob();
  lor_blob_.SetNoArena(&NetworkParam::_default_lor_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
inline ::std::string* NetworkParam::mutable_lor_blob() {
  set_has_lor_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
  return lor_blob_.MutableNoArena(&NetworkParam::_default_lor_blob_.get());
}
inline ::std::string* NetworkParam::release_lor_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
  clear_has_lor_blob();
  return lor_blob_.ReleaseNoArena(&NetworkParam::_default_lor_blob_.get());
}
inline void NetworkParam::set_allocated_lor_blob(::std::string* lor_blob) {
  if (lor_blob != NULL) {
    set_has_lor_blob();
  } else {
    clear_has_lor_blob();
  }
  lor_blob_.SetAllocatedNoArena(&NetworkParam::_default_lor_blob_.get(), lor_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}

// optional string seg_blob = 8 [default = "seg_pred"];
inline bool NetworkParam::has_seg_blob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetworkParam::set_has_seg_blob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetworkParam::clear_has_seg_blob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetworkParam::clear_seg_blob() {
  seg_blob_.ClearToDefaultNoArena(&NetworkParam::_default_seg_blob_.get());
  clear_has_seg_blob();
}
inline const ::std::string& NetworkParam::seg_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
  return seg_blob_.GetNoArena();
}
inline void NetworkParam::set_seg_blob(const ::std::string& value) {
  set_has_seg_blob();
  seg_blob_.SetNoArena(&NetworkParam::_default_seg_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_seg_blob(::std::string&& value) {
  set_has_seg_blob();
  seg_blob_.SetNoArena(
    &NetworkParam::_default_seg_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
#endif
inline void NetworkParam::set_seg_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seg_blob();
  seg_blob_.SetNoArena(&NetworkParam::_default_seg_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
inline void NetworkParam::set_seg_blob(const char* value, size_t size) {
  set_has_seg_blob();
  seg_blob_.SetNoArena(&NetworkParam::_default_seg_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
inline ::std::string* NetworkParam::mutable_seg_blob() {
  set_has_seg_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
  return seg_blob_.MutableNoArena(&NetworkParam::_default_seg_blob_.get());
}
inline ::std::string* NetworkParam::release_seg_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
  clear_has_seg_blob();
  return seg_blob_.ReleaseNoArena(&NetworkParam::_default_seg_blob_.get());
}
inline void NetworkParam::set_allocated_seg_blob(::std::string* seg_blob) {
  if (seg_blob != NULL) {
    set_has_seg_blob();
  } else {
    clear_has_seg_blob();
  }
  seg_blob_.SetAllocatedNoArena(&NetworkParam::_default_seg_blob_.get(), seg_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}

// optional string input_blob = 10 [default = "data"];
inline bool NetworkParam::has_input_blob() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetworkParam::set_has_input_blob() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetworkParam::clear_has_input_blob() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetworkParam::clear_input_blob() {
  input_blob_.ClearToDefaultNoArena(&NetworkParam::_default_input_blob_.get());
  clear_has_input_blob();
}
inline const ::std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
  return input_blob_.GetNoArena();
}
inline void NetworkParam::set_input_blob(const ::std::string& value) {
  set_has_input_blob();
  input_blob_.SetNoArena(&NetworkParam::_default_input_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
#if LANG_CXX11
inline void NetworkParam::set_input_blob(::std::string&& value) {
  set_has_input_blob();
  input_blob_.SetNoArena(
    &NetworkParam::_default_input_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
#endif
inline void NetworkParam::set_input_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_blob();
  input_blob_.SetNoArena(&NetworkParam::_default_input_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value, size_t size) {
  set_has_input_blob();
  input_blob_.SetNoArena(&NetworkParam::_default_input_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
inline ::std::string* NetworkParam::mutable_input_blob() {
  set_has_input_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
  return input_blob_.MutableNoArena(&NetworkParam::_default_input_blob_.get());
}
inline ::std::string* NetworkParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
  clear_has_input_blob();
  return input_blob_.ReleaseNoArena(&NetworkParam::_default_input_blob_.get());
}
inline void NetworkParam::set_allocated_input_blob(::std::string* input_blob) {
  if (input_blob != NULL) {
    set_has_input_blob();
  } else {
    clear_has_input_blob();
  }
  input_blob_.SetAllocatedNoArena(&NetworkParam::_default_input_blob_.get(), input_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}

// -------------------------------------------------------------------

// NMSParam

// optional string type = 1 [default = "NormalNMS"];
inline bool NMSParam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NMSParam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NMSParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NMSParam::clear_type() {
  type_.ClearToDefaultNoArena(&NMSParam::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& NMSParam::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.type)
  return type_.GetNoArena();
}
inline void NMSParam::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&NMSParam::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
#if LANG_CXX11
inline void NMSParam::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &NMSParam::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
#endif
inline void NMSParam::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&NMSParam::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
inline void NMSParam::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&NMSParam::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
inline ::std::string* NMSParam::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NMSParam.type)
  return type_.MutableNoArena(&NMSParam::_default_type_.get());
}
inline ::std::string* NMSParam::release_type() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NMSParam.type)
  clear_has_type();
  return type_.ReleaseNoArena(&NMSParam::_default_type_.get());
}
inline void NMSParam::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&NMSParam::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}

// optional float threshold = 2 [default = 0.4];
inline bool NMSParam::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NMSParam::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NMSParam::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NMSParam::clear_threshold() {
  threshold_ = 0.4f;
  clear_has_threshold();
}
inline float NMSParam::threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.threshold)
  return threshold_;
}
inline void NMSParam::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.threshold)
}

// optional float sigma = 3 [default = 0.4];
inline bool NMSParam::has_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NMSParam::set_has_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NMSParam::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NMSParam::clear_sigma() {
  sigma_ = 0.4f;
  clear_has_sigma();
}
inline float NMSParam::sigma() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.sigma)
  return sigma_;
}
inline void NMSParam::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.sigma)
}

// optional float inter_cls_nms_thresh = 4 [default = 1];
inline bool NMSParam::has_inter_cls_nms_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NMSParam::set_has_inter_cls_nms_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NMSParam::clear_has_inter_cls_nms_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NMSParam::clear_inter_cls_nms_thresh() {
  inter_cls_nms_thresh_ = 1;
  clear_has_inter_cls_nms_thresh();
}
inline float NMSParam::inter_cls_nms_thresh() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.inter_cls_nms_thresh)
  return inter_cls_nms_thresh_;
}
inline void NMSParam::set_inter_cls_nms_thresh(float value) {
  set_has_inter_cls_nms_thresh();
  inter_cls_nms_thresh_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.inter_cls_nms_thresh)
}

// optional float cross_class_merge_thresh = 5 [default = 0.8];
inline bool NMSParam::has_cross_class_merge_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NMSParam::set_has_cross_class_merge_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NMSParam::clear_has_cross_class_merge_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NMSParam::clear_cross_class_merge_thresh() {
  cross_class_merge_thresh_ = 0.8f;
  clear_has_cross_class_merge_thresh();
}
inline float NMSParam::cross_class_merge_thresh() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.cross_class_merge_thresh)
  return cross_class_merge_thresh_;
}
inline void NMSParam::set_cross_class_merge_thresh(float value) {
  set_has_cross_class_merge_thresh();
  cross_class_merge_thresh_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.cross_class_merge_thresh)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace yolo
}  // namespace obstacle
}  // namespace perception
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::perception::obstacle::yolo::ModelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::perception::obstacle::yolo::ModelType>() {
  return ::jmc_auto::perception::obstacle::yolo::ModelType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto__INCLUDED
