// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/obstacle/camera/detector/yolo_camera_detector/proto/yolo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/perception/obstacle/camera/detector/yolo_camera_detector/proto/yolo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace perception {
namespace obstacle {
namespace yolo {
class YoloParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YoloParam> {
} _YoloParam_default_instance_;
class ModelParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelParam> {
} _ModelParam_default_instance_;
class NetworkParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkParam> {
} _NetworkParam_default_instance_;
class NMSParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NMSParam> {
} _NMSParam_default_instance_;

namespace protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, model_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, net_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoloParam, nms_param_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, model_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, proto_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, weight_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, anchors_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, types_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, feature_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, offset_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, cropped_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, resized_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, aligned_pixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, confidence_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, min_2d_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, min_3d_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, calibratetable_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, model_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParam, ignored_height_),
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  12,
  13,
  14,
  11,
  7,
  8,
  6,
  9,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, loc_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, obj_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, cls_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, ori_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, dim_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, lof_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, lor_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, seg_blob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParam, input_blob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, sigma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, inter_cls_nms_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NMSParam, cross_class_merge_thresh_),
  0,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(YoloParam)},
  { 11, 32, sizeof(ModelParam)},
  { 48, 62, sizeof(NetworkParam)},
  { 71, 81, sizeof(NMSParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_YoloParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NMSParam_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/perception/obstacle/camera/detector/yolo_camera_detector/proto/yolo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _YoloParam_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ModelParam_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  ModelParam::_default_model_name_.Shutdown();
  ModelParam::_default_proto_file_.Shutdown();
  ModelParam::_default_weight_file_.Shutdown();
  ModelParam::_default_anchors_file_.Shutdown();
  ModelParam::_default_types_file_.Shutdown();
  ModelParam::_default_feature_file_.Shutdown();
  ModelParam::_default_calibratetable_root_.Shutdown();
  _NetworkParam_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  NetworkParam::_default_loc_blob_.Shutdown();
  NetworkParam::_default_obj_blob_.Shutdown();
  NetworkParam::_default_cls_blob_.Shutdown();
  NetworkParam::_default_ori_blob_.Shutdown();
  NetworkParam::_default_dim_blob_.Shutdown();
  NetworkParam::_default_lof_blob_.Shutdown();
  NetworkParam::_default_lor_blob_.Shutdown();
  NetworkParam::_default_seg_blob_.Shutdown();
  NetworkParam::_default_input_blob_.Shutdown();
  _NMSParam_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  NMSParam::_default_type_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _YoloParam_default_instance_.DefaultConstruct();
  ModelParam::_default_model_name_.DefaultConstruct();
  *ModelParam::_default_model_name_.get_mutable() = ::std::string("yolo-2d", 7);
  ModelParam::_default_proto_file_.DefaultConstruct();
  *ModelParam::_default_proto_file_.get_mutable() = ::std::string("deploy.pt", 9);
  ModelParam::_default_weight_file_.DefaultConstruct();
  *ModelParam::_default_weight_file_.get_mutable() = ::std::string("deploy.md", 9);
  ModelParam::_default_anchors_file_.DefaultConstruct();
  *ModelParam::_default_anchors_file_.get_mutable() = ::std::string("anchors.txt", 11);
  ModelParam::_default_types_file_.DefaultConstruct();
  *ModelParam::_default_types_file_.get_mutable() = ::std::string("types.txt", 9);
  ModelParam::_default_feature_file_.DefaultConstruct();
  *ModelParam::_default_feature_file_.get_mutable() = ::std::string("feature.pt", 10);
  ModelParam::_default_calibratetable_root_.DefaultConstruct();
  *ModelParam::_default_calibratetable_root_.get_mutable() = ::std::string("./", 2);
  _ModelParam_default_instance_.DefaultConstruct();
  NetworkParam::_default_loc_blob_.DefaultConstruct();
  *NetworkParam::_default_loc_blob_.get_mutable() = ::std::string("loc_pred", 8);
  NetworkParam::_default_obj_blob_.DefaultConstruct();
  *NetworkParam::_default_obj_blob_.get_mutable() = ::std::string("obj_pred", 8);
  NetworkParam::_default_cls_blob_.DefaultConstruct();
  *NetworkParam::_default_cls_blob_.get_mutable() = ::std::string("cls_pred", 8);
  NetworkParam::_default_ori_blob_.DefaultConstruct();
  *NetworkParam::_default_ori_blob_.get_mutable() = ::std::string("ori_pred", 8);
  NetworkParam::_default_dim_blob_.DefaultConstruct();
  *NetworkParam::_default_dim_blob_.get_mutable() = ::std::string("dim_pred", 8);
  NetworkParam::_default_lof_blob_.DefaultConstruct();
  *NetworkParam::_default_lof_blob_.get_mutable() = ::std::string("lof_pred", 8);
  NetworkParam::_default_lor_blob_.DefaultConstruct();
  *NetworkParam::_default_lor_blob_.get_mutable() = ::std::string("lor_pred", 8);
  NetworkParam::_default_seg_blob_.DefaultConstruct();
  *NetworkParam::_default_seg_blob_.get_mutable() = ::std::string("seg_pred", 8);
  NetworkParam::_default_input_blob_.DefaultConstruct();
  *NetworkParam::_default_input_blob_.get_mutable() = ::std::string("data", 4);
  _NetworkParam_default_instance_.DefaultConstruct();
  NMSParam::_default_type_.DefaultConstruct();
  *NMSParam::_default_type_.get_mutable() = ::std::string("NormalNMS", 9);
  _NMSParam_default_instance_.DefaultConstruct();
  _YoloParam_default_instance_.get_mutable()->model_param_ = const_cast< ::jmc_auto::perception::obstacle::yolo::ModelParam*>(
      ::jmc_auto::perception::obstacle::yolo::ModelParam::internal_default_instance());
  _YoloParam_default_instance_.get_mutable()->net_param_ = const_cast< ::jmc_auto::perception::obstacle::yolo::NetworkParam*>(
      ::jmc_auto::perception::obstacle::yolo::NetworkParam::internal_default_instance());
  _YoloParam_default_instance_.get_mutable()->nms_param_ = const_cast< ::jmc_auto::perception::obstacle::yolo::NMSParam*>(
      ::jmc_auto::perception::obstacle::yolo::NMSParam::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nQmodules/perception/obstacle/camera/det"
      "ector/yolo_camera_detector/proto/yolo.pr"
      "oto\022!jmc_auto.perception.obstacle.yolo\"\323"
      "\001\n\tYoloParam\022B\n\013model_param\030\001 \002(\0132-.jmc_"
      "auto.perception.obstacle.yolo.ModelParam"
      "\022B\n\tnet_param\030\002 \002(\0132/.jmc_auto.perceptio"
      "n.obstacle.yolo.NetworkParam\022>\n\tnms_para"
      "m\030\003 \001(\0132+.jmc_auto.perception.obstacle.y"
      "olo.NMSParam\"\243\004\n\nModelParam\022\033\n\nmodel_nam"
      "e\030\001 \002(\t:\007yolo-2d\022\035\n\nproto_file\030\002 \001(\t:\tde"
      "ploy.pt\022\036\n\013weight_file\030\003 \001(\t:\tdeploy.md\022"
      "!\n\014anchors_file\030\004 \001(\t:\013anchors.txt\022\035\n\nty"
      "pes_file\030\005 \001(\t:\ttypes.txt\022 \n\014feature_fil"
      "e\030\006 \001(\t:\nfeature.pt\022\036\n\014offset_ratio\030\007 \001("
      "\002:\0100.288889\022\037\n\rcropped_ratio\030\r \001(\002:\0100.71"
      "1111\022\033\n\rresized_width\030\016 \001(\005:\0041440\022\031\n\rali"
      "gned_pixel\030\017 \001(\005:\00232\022!\n\024confidence_thres"
      "hold\030\010 \001(\002:\0030.1\022\030\n\rmin_2d_height\030\t \001(\002:\001"
      "0\022\030\n\rmin_3d_height\030\n \001(\002:\0010\022\037\n\023calibrate"
      "table_root\030\013 \001(\t:\002./\022G\n\nmodel_type\030\014 \001(\016"
      "2,.jmc_auto.perception.obstacle.yolo.Mod"
      "elType:\005Caffe\022\033\n\016ignored_height\030\020 \001(\005:\0031"
      "00\"\210\002\n\014NetworkParam\022\032\n\010loc_blob\030\001 \001(\t:\010l"
      "oc_pred\022\032\n\010obj_blob\030\002 \001(\t:\010obj_pred\022\032\n\010c"
      "ls_blob\030\003 \001(\t:\010cls_pred\022\032\n\010ori_blob\030\004 \001("
      "\t:\010ori_pred\022\032\n\010dim_blob\030\005 \001(\t:\010dim_pred\022"
      "\032\n\010lof_blob\030\006 \001(\t:\010lof_pred\022\032\n\010lor_blob\030"
      "\007 \001(\t:\010lor_pred\022\032\n\010seg_blob\030\010 \001(\t:\010seg_p"
      "red\022\030\n\ninput_blob\030\n \001(\t:\004data\"\227\001\n\010NMSPar"
      "am\022\027\n\004type\030\001 \001(\t:\tNormalNMS\022\026\n\tthreshold"
      "\030\002 \001(\002:\0030.4\022\022\n\005sigma\030\003 \001(\002:\0030.4\022\037\n\024inter"
      "_cls_nms_thresh\030\004 \001(\002:\0011\022%\n\030cross_class_"
      "merge_thresh\030\005 \001(\002:\0030.8*\026\n\tModelType\022\t\n\005"
      "Caffe\020\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/obstacle/camera/detector/yolo_camera_detector/proto/yolo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto

const ::google::protobuf::EnumDescriptor* ModelType_descriptor() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_enum_descriptors[0];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YoloParam::kModelParamFieldNumber;
const int YoloParam::kNetParamFieldNumber;
const int YoloParam::kNmsParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YoloParam::YoloParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.obstacle.yolo.YoloParam)
}
YoloParam::YoloParam(const YoloParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_param()) {
    model_param_ = new ::jmc_auto::perception::obstacle::yolo::ModelParam(*from.model_param_);
  } else {
    model_param_ = NULL;
  }
  if (from.has_net_param()) {
    net_param_ = new ::jmc_auto::perception::obstacle::yolo::NetworkParam(*from.net_param_);
  } else {
    net_param_ = NULL;
  }
  if (from.has_nms_param()) {
    nms_param_ = new ::jmc_auto::perception::obstacle::yolo::NMSParam(*from.nms_param_);
  } else {
    nms_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.obstacle.yolo.YoloParam)
}

void YoloParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&model_param_, 0, reinterpret_cast<char*>(&nms_param_) -
    reinterpret_cast<char*>(&model_param_) + sizeof(nms_param_));
}

YoloParam::~YoloParam() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.obstacle.yolo.YoloParam)
  SharedDtor();
}

void YoloParam::SharedDtor() {
  if (this != internal_default_instance()) {
    delete model_param_;
  }
  if (this != internal_default_instance()) {
    delete net_param_;
  }
  if (this != internal_default_instance()) {
    delete nms_param_;
  }
}

void YoloParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YoloParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YoloParam& YoloParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  return *internal_default_instance();
}

YoloParam* YoloParam::New(::google::protobuf::Arena* arena) const {
  YoloParam* n = new YoloParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YoloParam::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_model_param()) {
      GOOGLE_DCHECK(model_param_ != NULL);
      model_param_->::jmc_auto::perception::obstacle::yolo::ModelParam::Clear();
    }
    if (has_net_param()) {
      GOOGLE_DCHECK(net_param_ != NULL);
      net_param_->::jmc_auto::perception::obstacle::yolo::NetworkParam::Clear();
    }
    if (has_nms_param()) {
      GOOGLE_DCHECK(nms_param_ != NULL);
      nms_param_->::jmc_auto::perception::obstacle::yolo::NMSParam::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YoloParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nms_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.obstacle.yolo.YoloParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.obstacle.yolo.YoloParam)
  return false;
#undef DO_
}

void YoloParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_param_, output);
  }

  // required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->net_param_, output);
  }

  // optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->nms_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.obstacle.yolo.YoloParam)
}

::google::protobuf::uint8* YoloParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->model_param_, deterministic, target);
  }

  // required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->net_param_, deterministic, target);
  }

  // optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->nms_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.obstacle.yolo.YoloParam)
  return target;
}

size_t YoloParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  size_t total_size = 0;

  if (has_model_param()) {
    // required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_param_);
  }

  if (has_net_param()) {
    // required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->net_param_);
  }

  return total_size;
}
size_t YoloParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_param_);

    // required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->net_param_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
  if (has_nms_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nms_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoloParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YoloParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.obstacle.yolo.YoloParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.obstacle.yolo.YoloParam)
    MergeFrom(*source);
  }
}

void YoloParam::MergeFrom(const YoloParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_model_param()->::jmc_auto::perception::obstacle::yolo::ModelParam::MergeFrom(from.model_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_net_param()->::jmc_auto::perception::obstacle::yolo::NetworkParam::MergeFrom(from.net_param());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_nms_param()->::jmc_auto::perception::obstacle::yolo::NMSParam::MergeFrom(from.nms_param());
    }
  }
}

void YoloParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloParam::CopyFrom(const YoloParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.obstacle.yolo.YoloParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_model_param()) {
    if (!this->model_param_->IsInitialized()) return false;
  }
  return true;
}

void YoloParam::Swap(YoloParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YoloParam::InternalSwap(YoloParam* other) {
  std::swap(model_param_, other->model_param_);
  std::swap(net_param_, other->net_param_);
  std::swap(nms_param_, other->nms_param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YoloParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YoloParam

// required .jmc_auto.perception.obstacle.yolo.ModelParam model_param = 1;
bool YoloParam::has_model_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YoloParam::set_has_model_param() {
  _has_bits_[0] |= 0x00000001u;
}
void YoloParam::clear_has_model_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void YoloParam::clear_model_param() {
  if (model_param_ != NULL) model_param_->::jmc_auto::perception::obstacle::yolo::ModelParam::Clear();
  clear_has_model_param();
}
const ::jmc_auto::perception::obstacle::yolo::ModelParam& YoloParam::model_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
  return model_param_ != NULL ? *model_param_
                         : *::jmc_auto::perception::obstacle::yolo::ModelParam::internal_default_instance();
}
::jmc_auto::perception::obstacle::yolo::ModelParam* YoloParam::mutable_model_param() {
  set_has_model_param();
  if (model_param_ == NULL) {
    model_param_ = new ::jmc_auto::perception::obstacle::yolo::ModelParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
  return model_param_;
}
::jmc_auto::perception::obstacle::yolo::ModelParam* YoloParam::release_model_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
  clear_has_model_param();
  ::jmc_auto::perception::obstacle::yolo::ModelParam* temp = model_param_;
  model_param_ = NULL;
  return temp;
}
void YoloParam::set_allocated_model_param(::jmc_auto::perception::obstacle::yolo::ModelParam* model_param) {
  delete model_param_;
  model_param_ = model_param;
  if (model_param) {
    set_has_model_param();
  } else {
    clear_has_model_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.YoloParam.model_param)
}

// required .jmc_auto.perception.obstacle.yolo.NetworkParam net_param = 2;
bool YoloParam::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YoloParam::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
void YoloParam::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void YoloParam::clear_net_param() {
  if (net_param_ != NULL) net_param_->::jmc_auto::perception::obstacle::yolo::NetworkParam::Clear();
  clear_has_net_param();
}
const ::jmc_auto::perception::obstacle::yolo::NetworkParam& YoloParam::net_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
  return net_param_ != NULL ? *net_param_
                         : *::jmc_auto::perception::obstacle::yolo::NetworkParam::internal_default_instance();
}
::jmc_auto::perception::obstacle::yolo::NetworkParam* YoloParam::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::jmc_auto::perception::obstacle::yolo::NetworkParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
  return net_param_;
}
::jmc_auto::perception::obstacle::yolo::NetworkParam* YoloParam::release_net_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
  clear_has_net_param();
  ::jmc_auto::perception::obstacle::yolo::NetworkParam* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
void YoloParam::set_allocated_net_param(::jmc_auto::perception::obstacle::yolo::NetworkParam* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.YoloParam.net_param)
}

// optional .jmc_auto.perception.obstacle.yolo.NMSParam nms_param = 3;
bool YoloParam::has_nms_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YoloParam::set_has_nms_param() {
  _has_bits_[0] |= 0x00000004u;
}
void YoloParam::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000004u;
}
void YoloParam::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::jmc_auto::perception::obstacle::yolo::NMSParam::Clear();
  clear_has_nms_param();
}
const ::jmc_auto::perception::obstacle::yolo::NMSParam& YoloParam::nms_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
  return nms_param_ != NULL ? *nms_param_
                         : *::jmc_auto::perception::obstacle::yolo::NMSParam::internal_default_instance();
}
::jmc_auto::perception::obstacle::yolo::NMSParam* YoloParam::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::jmc_auto::perception::obstacle::yolo::NMSParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
  return nms_param_;
}
::jmc_auto::perception::obstacle::yolo::NMSParam* YoloParam::release_nms_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
  clear_has_nms_param();
  ::jmc_auto::perception::obstacle::yolo::NMSParam* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
void YoloParam::set_allocated_nms_param(::jmc_auto::perception::obstacle::yolo::NMSParam* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.YoloParam.nms_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_model_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_proto_file_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_weight_file_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_anchors_file_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_types_file_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_feature_file_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelParam::_default_calibratetable_root_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelParam::kModelNameFieldNumber;
const int ModelParam::kProtoFileFieldNumber;
const int ModelParam::kWeightFileFieldNumber;
const int ModelParam::kAnchorsFileFieldNumber;
const int ModelParam::kTypesFileFieldNumber;
const int ModelParam::kFeatureFileFieldNumber;
const int ModelParam::kOffsetRatioFieldNumber;
const int ModelParam::kCroppedRatioFieldNumber;
const int ModelParam::kResizedWidthFieldNumber;
const int ModelParam::kAlignedPixelFieldNumber;
const int ModelParam::kConfidenceThresholdFieldNumber;
const int ModelParam::kMin2DHeightFieldNumber;
const int ModelParam::kMin3DHeightFieldNumber;
const int ModelParam::kCalibratetableRootFieldNumber;
const int ModelParam::kModelTypeFieldNumber;
const int ModelParam::kIgnoredHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelParam::ModelParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.obstacle.yolo.ModelParam)
}
ModelParam::ModelParam(const ModelParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&ModelParam::_default_model_name_.get());
  if (from.has_model_name()) {
    model_name_.AssignWithDefault(&ModelParam::_default_model_name_.get(), from.model_name_);
  }
  proto_file_.UnsafeSetDefault(&ModelParam::_default_proto_file_.get());
  if (from.has_proto_file()) {
    proto_file_.AssignWithDefault(&ModelParam::_default_proto_file_.get(), from.proto_file_);
  }
  weight_file_.UnsafeSetDefault(&ModelParam::_default_weight_file_.get());
  if (from.has_weight_file()) {
    weight_file_.AssignWithDefault(&ModelParam::_default_weight_file_.get(), from.weight_file_);
  }
  anchors_file_.UnsafeSetDefault(&ModelParam::_default_anchors_file_.get());
  if (from.has_anchors_file()) {
    anchors_file_.AssignWithDefault(&ModelParam::_default_anchors_file_.get(), from.anchors_file_);
  }
  types_file_.UnsafeSetDefault(&ModelParam::_default_types_file_.get());
  if (from.has_types_file()) {
    types_file_.AssignWithDefault(&ModelParam::_default_types_file_.get(), from.types_file_);
  }
  feature_file_.UnsafeSetDefault(&ModelParam::_default_feature_file_.get());
  if (from.has_feature_file()) {
    feature_file_.AssignWithDefault(&ModelParam::_default_feature_file_.get(), from.feature_file_);
  }
  calibratetable_root_.UnsafeSetDefault(&ModelParam::_default_calibratetable_root_.get());
  if (from.has_calibratetable_root()) {
    calibratetable_root_.AssignWithDefault(&ModelParam::_default_calibratetable_root_.get(), from.calibratetable_root_);
  }
  ::memcpy(&min_2d_height_, &from.min_2d_height_,
    reinterpret_cast<char*>(&ignored_height_) -
    reinterpret_cast<char*>(&min_2d_height_) + sizeof(ignored_height_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.obstacle.yolo.ModelParam)
}

void ModelParam::SharedCtor() {
  _cached_size_ = 0;
  model_name_.UnsafeSetDefault(&ModelParam::_default_model_name_.get());
  proto_file_.UnsafeSetDefault(&ModelParam::_default_proto_file_.get());
  weight_file_.UnsafeSetDefault(&ModelParam::_default_weight_file_.get());
  anchors_file_.UnsafeSetDefault(&ModelParam::_default_anchors_file_.get());
  types_file_.UnsafeSetDefault(&ModelParam::_default_types_file_.get());
  feature_file_.UnsafeSetDefault(&ModelParam::_default_feature_file_.get());
  calibratetable_root_.UnsafeSetDefault(&ModelParam::_default_calibratetable_root_.get());
  ::memset(&min_2d_height_, 0, reinterpret_cast<char*>(&model_type_) -
    reinterpret_cast<char*>(&min_2d_height_) + sizeof(model_type_));
  offset_ratio_ = 0.288889f;
  confidence_threshold_ = 0.1f;
  cropped_ratio_ = 0.711111f;
  resized_width_ = 1440;
  aligned_pixel_ = 32;
  ignored_height_ = 100;
}

ModelParam::~ModelParam() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.obstacle.yolo.ModelParam)
  SharedDtor();
}

void ModelParam::SharedDtor() {
  model_name_.DestroyNoArena(&ModelParam::_default_model_name_.get());
  proto_file_.DestroyNoArena(&ModelParam::_default_proto_file_.get());
  weight_file_.DestroyNoArena(&ModelParam::_default_weight_file_.get());
  anchors_file_.DestroyNoArena(&ModelParam::_default_anchors_file_.get());
  types_file_.DestroyNoArena(&ModelParam::_default_types_file_.get());
  feature_file_.DestroyNoArena(&ModelParam::_default_feature_file_.get());
  calibratetable_root_.DestroyNoArena(&ModelParam::_default_calibratetable_root_.get());
}

void ModelParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelParam& ModelParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelParam* ModelParam::New(::google::protobuf::Arena* arena) const {
  ModelParam* n = new ModelParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelParam::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_model_name()) {
      GOOGLE_DCHECK(!model_name_.IsDefault(&ModelParam::_default_model_name_.get()));
      (*model_name_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_model_name_.get());
    }
    if (has_proto_file()) {
      GOOGLE_DCHECK(!proto_file_.IsDefault(&ModelParam::_default_proto_file_.get()));
      (*proto_file_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_proto_file_.get());
    }
    if (has_weight_file()) {
      GOOGLE_DCHECK(!weight_file_.IsDefault(&ModelParam::_default_weight_file_.get()));
      (*weight_file_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_weight_file_.get());
    }
    if (has_anchors_file()) {
      GOOGLE_DCHECK(!anchors_file_.IsDefault(&ModelParam::_default_anchors_file_.get()));
      (*anchors_file_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_anchors_file_.get());
    }
    if (has_types_file()) {
      GOOGLE_DCHECK(!types_file_.IsDefault(&ModelParam::_default_types_file_.get()));
      (*types_file_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_types_file_.get());
    }
    if (has_feature_file()) {
      GOOGLE_DCHECK(!feature_file_.IsDefault(&ModelParam::_default_feature_file_.get()));
      (*feature_file_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_feature_file_.get());
    }
    if (has_calibratetable_root()) {
      GOOGLE_DCHECK(!calibratetable_root_.IsDefault(&ModelParam::_default_calibratetable_root_.get()));
      (*calibratetable_root_.UnsafeRawStringPointer())->assign(*&ModelParam::_default_calibratetable_root_.get());
    }
  }
  min_2d_height_ = 0;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&min_3d_height_, 0, reinterpret_cast<char*>(&model_type_) -
      reinterpret_cast<char*>(&min_3d_height_) + sizeof(model_type_));
    offset_ratio_ = 0.288889f;
    confidence_threshold_ = 0.1f;
    cropped_ratio_ = 0.711111f;
    resized_width_ = 1440;
    aligned_pixel_ = 32;
    ignored_height_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1 [default = "yolo-2d"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.model_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proto_file = 2 [default = "deploy.pt"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_file().data(), this->proto_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.proto_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string weight_file = 3 [default = "deploy.md"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight_file().data(), this->weight_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.weight_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string anchors_file = 4 [default = "anchors.txt"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anchors_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anchors_file().data(), this->anchors_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string types_file = 5 [default = "types.txt"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_types_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->types_file().data(), this->types_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.types_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string feature_file = 6 [default = "feature.pt"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature_file().data(), this->feature_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.feature_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float offset_ratio = 7 [default = 0.288889];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_offset_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence_threshold = 8 [default = 0.1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_confidence_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_2d_height = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_min_2d_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_2d_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_3d_height = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_min_3d_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_3d_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string calibratetable_root = 11 [default = "./"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calibratetable_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calibratetable_root().data(), this->calibratetable_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::obstacle::yolo::ModelType_IsValid(value)) {
            set_model_type(static_cast< ::jmc_auto::perception::obstacle::yolo::ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cropped_ratio = 13 [default = 0.711111];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_cropped_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cropped_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 resized_width = 14 [default = 1440];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_resized_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resized_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 aligned_pixel = 15 [default = 32];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_aligned_pixel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aligned_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ignored_height = 16 [default = 100];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_ignored_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignored_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.obstacle.yolo.ModelParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.obstacle.yolo.ModelParam)
  return false;
#undef DO_
}

void ModelParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1 [default = "yolo-2d"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional string proto_file = 2 [default = "deploy.pt"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.proto_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_file(), output);
  }

  // optional string weight_file = 3 [default = "deploy.md"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.weight_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight_file(), output);
  }

  // optional string anchors_file = 4 [default = "anchors.txt"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anchors_file().data(), this->anchors_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->anchors_file(), output);
  }

  // optional string types_file = 5 [default = "types.txt"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->types_file().data(), this->types_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.types_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->types_file(), output);
  }

  // optional string feature_file = 6 [default = "feature.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_file().data(), this->feature_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.feature_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->feature_file(), output);
  }

  // optional float offset_ratio = 7 [default = 0.288889];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->offset_ratio(), output);
  }

  // optional float confidence_threshold = 8 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->confidence_threshold(), output);
  }

  // optional float min_2d_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_2d_height(), output);
  }

  // optional float min_3d_height = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->min_3d_height(), output);
  }

  // optional string calibratetable_root = 11 [default = "./"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibratetable_root().data(), this->calibratetable_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->calibratetable_root(), output);
  }

  // optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->model_type(), output);
  }

  // optional float cropped_ratio = 13 [default = 0.711111];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->cropped_ratio(), output);
  }

  // optional int32 resized_width = 14 [default = 1440];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->resized_width(), output);
  }

  // optional int32 aligned_pixel = 15 [default = 32];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->aligned_pixel(), output);
  }

  // optional int32 ignored_height = 16 [default = 100];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ignored_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.obstacle.yolo.ModelParam)
}

::google::protobuf::uint8* ModelParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string model_name = 1 [default = "yolo-2d"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string proto_file = 2 [default = "deploy.pt"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_file().data(), this->proto_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.proto_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_file(), target);
  }

  // optional string weight_file = 3 [default = "deploy.md"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight_file().data(), this->weight_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.weight_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight_file(), target);
  }

  // optional string anchors_file = 4 [default = "anchors.txt"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anchors_file().data(), this->anchors_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->anchors_file(), target);
  }

  // optional string types_file = 5 [default = "types.txt"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->types_file().data(), this->types_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.types_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->types_file(), target);
  }

  // optional string feature_file = 6 [default = "feature.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_file().data(), this->feature_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.feature_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->feature_file(), target);
  }

  // optional float offset_ratio = 7 [default = 0.288889];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->offset_ratio(), target);
  }

  // optional float confidence_threshold = 8 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->confidence_threshold(), target);
  }

  // optional float min_2d_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_2d_height(), target);
  }

  // optional float min_3d_height = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->min_3d_height(), target);
  }

  // optional string calibratetable_root = 11 [default = "./"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibratetable_root().data(), this->calibratetable_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->calibratetable_root(), target);
  }

  // optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->model_type(), target);
  }

  // optional float cropped_ratio = 13 [default = 0.711111];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->cropped_ratio(), target);
  }

  // optional int32 resized_width = 14 [default = 1440];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->resized_width(), target);
  }

  // optional int32 aligned_pixel = 15 [default = 32];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->aligned_pixel(), target);
  }

  // optional int32 ignored_height = 16 [default = 100];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ignored_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.obstacle.yolo.ModelParam)
  return target;
}

size_t ModelParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string model_name = 1 [default = "yolo-2d"];
  if (has_model_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional string proto_file = 2 [default = "deploy.pt"];
    if (has_proto_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto_file());
    }

    // optional string weight_file = 3 [default = "deploy.md"];
    if (has_weight_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight_file());
    }

    // optional string anchors_file = 4 [default = "anchors.txt"];
    if (has_anchors_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anchors_file());
    }

    // optional string types_file = 5 [default = "types.txt"];
    if (has_types_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->types_file());
    }

    // optional string feature_file = 6 [default = "feature.pt"];
    if (has_feature_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_file());
    }

    // optional string calibratetable_root = 11 [default = "./"];
    if (has_calibratetable_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calibratetable_root());
    }

    // optional float min_2d_height = 9 [default = 0];
    if (has_min_2d_height()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float min_3d_height = 10 [default = 0];
    if (has_min_3d_height()) {
      total_size += 1 + 4;
    }

    // optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional float offset_ratio = 7 [default = 0.288889];
    if (has_offset_ratio()) {
      total_size += 1 + 4;
    }

    // optional float confidence_threshold = 8 [default = 0.1];
    if (has_confidence_threshold()) {
      total_size += 1 + 4;
    }

    // optional float cropped_ratio = 13 [default = 0.711111];
    if (has_cropped_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 resized_width = 14 [default = 1440];
    if (has_resized_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resized_width());
    }

    // optional int32 aligned_pixel = 15 [default = 32];
    if (has_aligned_pixel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aligned_pixel());
    }

    // optional int32 ignored_height = 16 [default = 100];
    if (has_ignored_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignored_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.obstacle.yolo.ModelParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.obstacle.yolo.ModelParam)
    MergeFrom(*source);
  }
}

void ModelParam::MergeFrom(const ModelParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_model_name();
      model_name_.AssignWithDefault(&ModelParam::_default_model_name_.get(), from.model_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_proto_file();
      proto_file_.AssignWithDefault(&ModelParam::_default_proto_file_.get(), from.proto_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_weight_file();
      weight_file_.AssignWithDefault(&ModelParam::_default_weight_file_.get(), from.weight_file_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_anchors_file();
      anchors_file_.AssignWithDefault(&ModelParam::_default_anchors_file_.get(), from.anchors_file_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_types_file();
      types_file_.AssignWithDefault(&ModelParam::_default_types_file_.get(), from.types_file_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_feature_file();
      feature_file_.AssignWithDefault(&ModelParam::_default_feature_file_.get(), from.feature_file_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_calibratetable_root();
      calibratetable_root_.AssignWithDefault(&ModelParam::_default_calibratetable_root_.get(), from.calibratetable_root_);
    }
    if (cached_has_bits & 0x00000080u) {
      min_2d_height_ = from.min_2d_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      min_3d_height_ = from.min_3d_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      model_type_ = from.model_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      offset_ratio_ = from.offset_ratio_;
    }
    if (cached_has_bits & 0x00000800u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      cropped_ratio_ = from.cropped_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      resized_width_ = from.resized_width_;
    }
    if (cached_has_bits & 0x00004000u) {
      aligned_pixel_ = from.aligned_pixel_;
    }
    if (cached_has_bits & 0x00008000u) {
      ignored_height_ = from.ignored_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParam::CopyFrom(const ModelParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.obstacle.yolo.ModelParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ModelParam::Swap(ModelParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelParam::InternalSwap(ModelParam* other) {
  model_name_.Swap(&other->model_name_);
  proto_file_.Swap(&other->proto_file_);
  weight_file_.Swap(&other->weight_file_);
  anchors_file_.Swap(&other->anchors_file_);
  types_file_.Swap(&other->types_file_);
  feature_file_.Swap(&other->feature_file_);
  calibratetable_root_.Swap(&other->calibratetable_root_);
  std::swap(min_2d_height_, other->min_2d_height_);
  std::swap(min_3d_height_, other->min_3d_height_);
  std::swap(model_type_, other->model_type_);
  std::swap(offset_ratio_, other->offset_ratio_);
  std::swap(confidence_threshold_, other->confidence_threshold_);
  std::swap(cropped_ratio_, other->cropped_ratio_);
  std::swap(resized_width_, other->resized_width_);
  std::swap(aligned_pixel_, other->aligned_pixel_);
  std::swap(ignored_height_, other->ignored_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelParam

// required string model_name = 1 [default = "yolo-2d"];
bool ModelParam::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelParam::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelParam::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelParam::clear_model_name() {
  model_name_.ClearToDefaultNoArena(&ModelParam::_default_model_name_.get());
  clear_has_model_name();
}
const ::std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
  return model_name_.GetNoArena();
}
void ModelParam::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&ModelParam::_default_model_name_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
#if LANG_CXX11
void ModelParam::set_model_name(::std::string&& value) {
  set_has_model_name();
  model_name_.SetNoArena(
    &ModelParam::_default_model_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
#endif
void ModelParam::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model_name();
  model_name_.SetNoArena(&ModelParam::_default_model_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
void ModelParam::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&ModelParam::_default_model_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}
::std::string* ModelParam::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
  return model_name_.MutableNoArena(&ModelParam::_default_model_name_.get());
}
::std::string* ModelParam::release_model_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&ModelParam::_default_model_name_.get());
}
void ModelParam::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&ModelParam::_default_model_name_.get(), model_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "deploy.pt"];
bool ModelParam::has_proto_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelParam::set_has_proto_file() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelParam::clear_has_proto_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelParam::clear_proto_file() {
  proto_file_.ClearToDefaultNoArena(&ModelParam::_default_proto_file_.get());
  clear_has_proto_file();
}
const ::std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
  return proto_file_.GetNoArena();
}
void ModelParam::set_proto_file(const ::std::string& value) {
  set_has_proto_file();
  proto_file_.SetNoArena(&ModelParam::_default_proto_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
#if LANG_CXX11
void ModelParam::set_proto_file(::std::string&& value) {
  set_has_proto_file();
  proto_file_.SetNoArena(
    &ModelParam::_default_proto_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
#endif
void ModelParam::set_proto_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proto_file();
  proto_file_.SetNoArena(&ModelParam::_default_proto_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
void ModelParam::set_proto_file(const char* value, size_t size) {
  set_has_proto_file();
  proto_file_.SetNoArena(&ModelParam::_default_proto_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}
::std::string* ModelParam::mutable_proto_file() {
  set_has_proto_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
  return proto_file_.MutableNoArena(&ModelParam::_default_proto_file_.get());
}
::std::string* ModelParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
  clear_has_proto_file();
  return proto_file_.ReleaseNoArena(&ModelParam::_default_proto_file_.get());
}
void ModelParam::set_allocated_proto_file(::std::string* proto_file) {
  if (proto_file != NULL) {
    set_has_proto_file();
  } else {
    clear_has_proto_file();
  }
  proto_file_.SetAllocatedNoArena(&ModelParam::_default_proto_file_.get(), proto_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "deploy.md"];
bool ModelParam::has_weight_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelParam::set_has_weight_file() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelParam::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelParam::clear_weight_file() {
  weight_file_.ClearToDefaultNoArena(&ModelParam::_default_weight_file_.get());
  clear_has_weight_file();
}
const ::std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
  return weight_file_.GetNoArena();
}
void ModelParam::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&ModelParam::_default_weight_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
#if LANG_CXX11
void ModelParam::set_weight_file(::std::string&& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(
    &ModelParam::_default_weight_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
#endif
void ModelParam::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weight_file();
  weight_file_.SetNoArena(&ModelParam::_default_weight_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
void ModelParam::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  weight_file_.SetNoArena(&ModelParam::_default_weight_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}
::std::string* ModelParam::mutable_weight_file() {
  set_has_weight_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
  return weight_file_.MutableNoArena(&ModelParam::_default_weight_file_.get());
}
::std::string* ModelParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
  clear_has_weight_file();
  return weight_file_.ReleaseNoArena(&ModelParam::_default_weight_file_.get());
}
void ModelParam::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file != NULL) {
    set_has_weight_file();
  } else {
    clear_has_weight_file();
  }
  weight_file_.SetAllocatedNoArena(&ModelParam::_default_weight_file_.get(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.weight_file)
}

// optional string anchors_file = 4 [default = "anchors.txt"];
bool ModelParam::has_anchors_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelParam::set_has_anchors_file() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelParam::clear_has_anchors_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelParam::clear_anchors_file() {
  anchors_file_.ClearToDefaultNoArena(&ModelParam::_default_anchors_file_.get());
  clear_has_anchors_file();
}
const ::std::string& ModelParam::anchors_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
  return anchors_file_.GetNoArena();
}
void ModelParam::set_anchors_file(const ::std::string& value) {
  set_has_anchors_file();
  anchors_file_.SetNoArena(&ModelParam::_default_anchors_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
#if LANG_CXX11
void ModelParam::set_anchors_file(::std::string&& value) {
  set_has_anchors_file();
  anchors_file_.SetNoArena(
    &ModelParam::_default_anchors_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
#endif
void ModelParam::set_anchors_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_anchors_file();
  anchors_file_.SetNoArena(&ModelParam::_default_anchors_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
void ModelParam::set_anchors_file(const char* value, size_t size) {
  set_has_anchors_file();
  anchors_file_.SetNoArena(&ModelParam::_default_anchors_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}
::std::string* ModelParam::mutable_anchors_file() {
  set_has_anchors_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
  return anchors_file_.MutableNoArena(&ModelParam::_default_anchors_file_.get());
}
::std::string* ModelParam::release_anchors_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
  clear_has_anchors_file();
  return anchors_file_.ReleaseNoArena(&ModelParam::_default_anchors_file_.get());
}
void ModelParam::set_allocated_anchors_file(::std::string* anchors_file) {
  if (anchors_file != NULL) {
    set_has_anchors_file();
  } else {
    clear_has_anchors_file();
  }
  anchors_file_.SetAllocatedNoArena(&ModelParam::_default_anchors_file_.get(), anchors_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.anchors_file)
}

// optional string types_file = 5 [default = "types.txt"];
bool ModelParam::has_types_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelParam::set_has_types_file() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelParam::clear_has_types_file() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelParam::clear_types_file() {
  types_file_.ClearToDefaultNoArena(&ModelParam::_default_types_file_.get());
  clear_has_types_file();
}
const ::std::string& ModelParam::types_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
  return types_file_.GetNoArena();
}
void ModelParam::set_types_file(const ::std::string& value) {
  set_has_types_file();
  types_file_.SetNoArena(&ModelParam::_default_types_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
#if LANG_CXX11
void ModelParam::set_types_file(::std::string&& value) {
  set_has_types_file();
  types_file_.SetNoArena(
    &ModelParam::_default_types_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
#endif
void ModelParam::set_types_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_types_file();
  types_file_.SetNoArena(&ModelParam::_default_types_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
void ModelParam::set_types_file(const char* value, size_t size) {
  set_has_types_file();
  types_file_.SetNoArena(&ModelParam::_default_types_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}
::std::string* ModelParam::mutable_types_file() {
  set_has_types_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
  return types_file_.MutableNoArena(&ModelParam::_default_types_file_.get());
}
::std::string* ModelParam::release_types_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
  clear_has_types_file();
  return types_file_.ReleaseNoArena(&ModelParam::_default_types_file_.get());
}
void ModelParam::set_allocated_types_file(::std::string* types_file) {
  if (types_file != NULL) {
    set_has_types_file();
  } else {
    clear_has_types_file();
  }
  types_file_.SetAllocatedNoArena(&ModelParam::_default_types_file_.get(), types_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.types_file)
}

// optional string feature_file = 6 [default = "feature.pt"];
bool ModelParam::has_feature_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelParam::set_has_feature_file() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelParam::clear_has_feature_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelParam::clear_feature_file() {
  feature_file_.ClearToDefaultNoArena(&ModelParam::_default_feature_file_.get());
  clear_has_feature_file();
}
const ::std::string& ModelParam::feature_file() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
  return feature_file_.GetNoArena();
}
void ModelParam::set_feature_file(const ::std::string& value) {
  set_has_feature_file();
  feature_file_.SetNoArena(&ModelParam::_default_feature_file_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
#if LANG_CXX11
void ModelParam::set_feature_file(::std::string&& value) {
  set_has_feature_file();
  feature_file_.SetNoArena(
    &ModelParam::_default_feature_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
#endif
void ModelParam::set_feature_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_feature_file();
  feature_file_.SetNoArena(&ModelParam::_default_feature_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
void ModelParam::set_feature_file(const char* value, size_t size) {
  set_has_feature_file();
  feature_file_.SetNoArena(&ModelParam::_default_feature_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}
::std::string* ModelParam::mutable_feature_file() {
  set_has_feature_file();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
  return feature_file_.MutableNoArena(&ModelParam::_default_feature_file_.get());
}
::std::string* ModelParam::release_feature_file() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
  clear_has_feature_file();
  return feature_file_.ReleaseNoArena(&ModelParam::_default_feature_file_.get());
}
void ModelParam::set_allocated_feature_file(::std::string* feature_file) {
  if (feature_file != NULL) {
    set_has_feature_file();
  } else {
    clear_has_feature_file();
  }
  feature_file_.SetAllocatedNoArena(&ModelParam::_default_feature_file_.get(), feature_file);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.feature_file)
}

// optional float offset_ratio = 7 [default = 0.288889];
bool ModelParam::has_offset_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelParam::set_has_offset_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelParam::clear_has_offset_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelParam::clear_offset_ratio() {
  offset_ratio_ = 0.288889f;
  clear_has_offset_ratio();
}
float ModelParam::offset_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.offset_ratio)
  return offset_ratio_;
}
void ModelParam::set_offset_ratio(float value) {
  set_has_offset_ratio();
  offset_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.offset_ratio)
}

// optional float cropped_ratio = 13 [default = 0.711111];
bool ModelParam::has_cropped_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelParam::set_has_cropped_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelParam::clear_has_cropped_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelParam::clear_cropped_ratio() {
  cropped_ratio_ = 0.711111f;
  clear_has_cropped_ratio();
}
float ModelParam::cropped_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.cropped_ratio)
  return cropped_ratio_;
}
void ModelParam::set_cropped_ratio(float value) {
  set_has_cropped_ratio();
  cropped_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.cropped_ratio)
}

// optional int32 resized_width = 14 [default = 1440];
bool ModelParam::has_resized_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModelParam::set_has_resized_width() {
  _has_bits_[0] |= 0x00002000u;
}
void ModelParam::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModelParam::clear_resized_width() {
  resized_width_ = 1440;
  clear_has_resized_width();
}
::google::protobuf::int32 ModelParam::resized_width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.resized_width)
  return resized_width_;
}
void ModelParam::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.resized_width)
}

// optional int32 aligned_pixel = 15 [default = 32];
bool ModelParam::has_aligned_pixel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModelParam::set_has_aligned_pixel() {
  _has_bits_[0] |= 0x00004000u;
}
void ModelParam::clear_has_aligned_pixel() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModelParam::clear_aligned_pixel() {
  aligned_pixel_ = 32;
  clear_has_aligned_pixel();
}
::google::protobuf::int32 ModelParam::aligned_pixel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.aligned_pixel)
  return aligned_pixel_;
}
void ModelParam::set_aligned_pixel(::google::protobuf::int32 value) {
  set_has_aligned_pixel();
  aligned_pixel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.aligned_pixel)
}

// optional float confidence_threshold = 8 [default = 0.1];
bool ModelParam::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelParam::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelParam::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelParam::clear_confidence_threshold() {
  confidence_threshold_ = 0.1f;
  clear_has_confidence_threshold();
}
float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.confidence_threshold)
  return confidence_threshold_;
}
void ModelParam::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.confidence_threshold)
}

// optional float min_2d_height = 9 [default = 0];
bool ModelParam::has_min_2d_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelParam::set_has_min_2d_height() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelParam::clear_has_min_2d_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelParam::clear_min_2d_height() {
  min_2d_height_ = 0;
  clear_has_min_2d_height();
}
float ModelParam::min_2d_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.min_2d_height)
  return min_2d_height_;
}
void ModelParam::set_min_2d_height(float value) {
  set_has_min_2d_height();
  min_2d_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.min_2d_height)
}

// optional float min_3d_height = 10 [default = 0];
bool ModelParam::has_min_3d_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelParam::set_has_min_3d_height() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelParam::clear_has_min_3d_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelParam::clear_min_3d_height() {
  min_3d_height_ = 0;
  clear_has_min_3d_height();
}
float ModelParam::min_3d_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.min_3d_height)
  return min_3d_height_;
}
void ModelParam::set_min_3d_height(float value) {
  set_has_min_3d_height();
  min_3d_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.min_3d_height)
}

// optional string calibratetable_root = 11 [default = "./"];
bool ModelParam::has_calibratetable_root() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelParam::set_has_calibratetable_root() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelParam::clear_has_calibratetable_root() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelParam::clear_calibratetable_root() {
  calibratetable_root_.ClearToDefaultNoArena(&ModelParam::_default_calibratetable_root_.get());
  clear_has_calibratetable_root();
}
const ::std::string& ModelParam::calibratetable_root() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
  return calibratetable_root_.GetNoArena();
}
void ModelParam::set_calibratetable_root(const ::std::string& value) {
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(&ModelParam::_default_calibratetable_root_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
#if LANG_CXX11
void ModelParam::set_calibratetable_root(::std::string&& value) {
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(
    &ModelParam::_default_calibratetable_root_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
#endif
void ModelParam::set_calibratetable_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(&ModelParam::_default_calibratetable_root_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
void ModelParam::set_calibratetable_root(const char* value, size_t size) {
  set_has_calibratetable_root();
  calibratetable_root_.SetNoArena(&ModelParam::_default_calibratetable_root_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}
::std::string* ModelParam::mutable_calibratetable_root() {
  set_has_calibratetable_root();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
  return calibratetable_root_.MutableNoArena(&ModelParam::_default_calibratetable_root_.get());
}
::std::string* ModelParam::release_calibratetable_root() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
  clear_has_calibratetable_root();
  return calibratetable_root_.ReleaseNoArena(&ModelParam::_default_calibratetable_root_.get());
}
void ModelParam::set_allocated_calibratetable_root(::std::string* calibratetable_root) {
  if (calibratetable_root != NULL) {
    set_has_calibratetable_root();
  } else {
    clear_has_calibratetable_root();
  }
  calibratetable_root_.SetAllocatedNoArena(&ModelParam::_default_calibratetable_root_.get(), calibratetable_root);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.ModelParam.calibratetable_root)
}

// optional .jmc_auto.perception.obstacle.yolo.ModelType model_type = 12 [default = Caffe];
bool ModelParam::has_model_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelParam::set_has_model_type() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelParam::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelParam::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
::jmc_auto::perception::obstacle::yolo::ModelType ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.model_type)
  return static_cast< ::jmc_auto::perception::obstacle::yolo::ModelType >(model_type_);
}
void ModelParam::set_model_type(::jmc_auto::perception::obstacle::yolo::ModelType value) {
  assert(::jmc_auto::perception::obstacle::yolo::ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.model_type)
}

// optional int32 ignored_height = 16 [default = 100];
bool ModelParam::has_ignored_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModelParam::set_has_ignored_height() {
  _has_bits_[0] |= 0x00008000u;
}
void ModelParam::clear_has_ignored_height() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModelParam::clear_ignored_height() {
  ignored_height_ = 100;
  clear_has_ignored_height();
}
::google::protobuf::int32 ModelParam::ignored_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.ModelParam.ignored_height)
  return ignored_height_;
}
void ModelParam::set_ignored_height(::google::protobuf::int32 value) {
  set_has_ignored_height();
  ignored_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.ModelParam.ignored_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_loc_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_obj_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_cls_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_ori_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_dim_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_lof_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_lor_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_seg_blob_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NetworkParam::_default_input_blob_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkParam::kLocBlobFieldNumber;
const int NetworkParam::kObjBlobFieldNumber;
const int NetworkParam::kClsBlobFieldNumber;
const int NetworkParam::kOriBlobFieldNumber;
const int NetworkParam::kDimBlobFieldNumber;
const int NetworkParam::kLofBlobFieldNumber;
const int NetworkParam::kLorBlobFieldNumber;
const int NetworkParam::kSegBlobFieldNumber;
const int NetworkParam::kInputBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkParam::NetworkParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.obstacle.yolo.NetworkParam)
}
NetworkParam::NetworkParam(const NetworkParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loc_blob_.UnsafeSetDefault(&NetworkParam::_default_loc_blob_.get());
  if (from.has_loc_blob()) {
    loc_blob_.AssignWithDefault(&NetworkParam::_default_loc_blob_.get(), from.loc_blob_);
  }
  obj_blob_.UnsafeSetDefault(&NetworkParam::_default_obj_blob_.get());
  if (from.has_obj_blob()) {
    obj_blob_.AssignWithDefault(&NetworkParam::_default_obj_blob_.get(), from.obj_blob_);
  }
  cls_blob_.UnsafeSetDefault(&NetworkParam::_default_cls_blob_.get());
  if (from.has_cls_blob()) {
    cls_blob_.AssignWithDefault(&NetworkParam::_default_cls_blob_.get(), from.cls_blob_);
  }
  ori_blob_.UnsafeSetDefault(&NetworkParam::_default_ori_blob_.get());
  if (from.has_ori_blob()) {
    ori_blob_.AssignWithDefault(&NetworkParam::_default_ori_blob_.get(), from.ori_blob_);
  }
  dim_blob_.UnsafeSetDefault(&NetworkParam::_default_dim_blob_.get());
  if (from.has_dim_blob()) {
    dim_blob_.AssignWithDefault(&NetworkParam::_default_dim_blob_.get(), from.dim_blob_);
  }
  lof_blob_.UnsafeSetDefault(&NetworkParam::_default_lof_blob_.get());
  if (from.has_lof_blob()) {
    lof_blob_.AssignWithDefault(&NetworkParam::_default_lof_blob_.get(), from.lof_blob_);
  }
  lor_blob_.UnsafeSetDefault(&NetworkParam::_default_lor_blob_.get());
  if (from.has_lor_blob()) {
    lor_blob_.AssignWithDefault(&NetworkParam::_default_lor_blob_.get(), from.lor_blob_);
  }
  seg_blob_.UnsafeSetDefault(&NetworkParam::_default_seg_blob_.get());
  if (from.has_seg_blob()) {
    seg_blob_.AssignWithDefault(&NetworkParam::_default_seg_blob_.get(), from.seg_blob_);
  }
  input_blob_.UnsafeSetDefault(&NetworkParam::_default_input_blob_.get());
  if (from.has_input_blob()) {
    input_blob_.AssignWithDefault(&NetworkParam::_default_input_blob_.get(), from.input_blob_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.obstacle.yolo.NetworkParam)
}

void NetworkParam::SharedCtor() {
  _cached_size_ = 0;
  loc_blob_.UnsafeSetDefault(&NetworkParam::_default_loc_blob_.get());
  obj_blob_.UnsafeSetDefault(&NetworkParam::_default_obj_blob_.get());
  cls_blob_.UnsafeSetDefault(&NetworkParam::_default_cls_blob_.get());
  ori_blob_.UnsafeSetDefault(&NetworkParam::_default_ori_blob_.get());
  dim_blob_.UnsafeSetDefault(&NetworkParam::_default_dim_blob_.get());
  lof_blob_.UnsafeSetDefault(&NetworkParam::_default_lof_blob_.get());
  lor_blob_.UnsafeSetDefault(&NetworkParam::_default_lor_blob_.get());
  seg_blob_.UnsafeSetDefault(&NetworkParam::_default_seg_blob_.get());
  input_blob_.UnsafeSetDefault(&NetworkParam::_default_input_blob_.get());
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.obstacle.yolo.NetworkParam)
  SharedDtor();
}

void NetworkParam::SharedDtor() {
  loc_blob_.DestroyNoArena(&NetworkParam::_default_loc_blob_.get());
  obj_blob_.DestroyNoArena(&NetworkParam::_default_obj_blob_.get());
  cls_blob_.DestroyNoArena(&NetworkParam::_default_cls_blob_.get());
  ori_blob_.DestroyNoArena(&NetworkParam::_default_ori_blob_.get());
  dim_blob_.DestroyNoArena(&NetworkParam::_default_dim_blob_.get());
  lof_blob_.DestroyNoArena(&NetworkParam::_default_lof_blob_.get());
  lor_blob_.DestroyNoArena(&NetworkParam::_default_lor_blob_.get());
  seg_blob_.DestroyNoArena(&NetworkParam::_default_seg_blob_.get());
  input_blob_.DestroyNoArena(&NetworkParam::_default_input_blob_.get());
}

void NetworkParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkParam& NetworkParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkParam* NetworkParam::New(::google::protobuf::Arena* arena) const {
  NetworkParam* n = new NetworkParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkParam::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_loc_blob()) {
      GOOGLE_DCHECK(!loc_blob_.IsDefault(&NetworkParam::_default_loc_blob_.get()));
      (*loc_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_loc_blob_.get());
    }
    if (has_obj_blob()) {
      GOOGLE_DCHECK(!obj_blob_.IsDefault(&NetworkParam::_default_obj_blob_.get()));
      (*obj_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_obj_blob_.get());
    }
    if (has_cls_blob()) {
      GOOGLE_DCHECK(!cls_blob_.IsDefault(&NetworkParam::_default_cls_blob_.get()));
      (*cls_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_cls_blob_.get());
    }
    if (has_ori_blob()) {
      GOOGLE_DCHECK(!ori_blob_.IsDefault(&NetworkParam::_default_ori_blob_.get()));
      (*ori_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_ori_blob_.get());
    }
    if (has_dim_blob()) {
      GOOGLE_DCHECK(!dim_blob_.IsDefault(&NetworkParam::_default_dim_blob_.get()));
      (*dim_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_dim_blob_.get());
    }
    if (has_lof_blob()) {
      GOOGLE_DCHECK(!lof_blob_.IsDefault(&NetworkParam::_default_lof_blob_.get()));
      (*lof_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_lof_blob_.get());
    }
    if (has_lor_blob()) {
      GOOGLE_DCHECK(!lor_blob_.IsDefault(&NetworkParam::_default_lor_blob_.get()));
      (*lor_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_lor_blob_.get());
    }
    if (has_seg_blob()) {
      GOOGLE_DCHECK(!seg_blob_.IsDefault(&NetworkParam::_default_seg_blob_.get()));
      (*seg_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_seg_blob_.get());
    }
  }
  if (has_input_blob()) {
    GOOGLE_DCHECK(!input_blob_.IsDefault(&NetworkParam::_default_input_blob_.get()));
    (*input_blob_.UnsafeRawStringPointer())->assign(*&NetworkParam::_default_input_blob_.get());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string loc_blob = 1 [default = "loc_pred"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loc_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loc_blob().data(), this->loc_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string obj_blob = 2 [default = "obj_pred"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->obj_blob().data(), this->obj_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cls_blob = 3 [default = "cls_pred"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cls_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cls_blob().data(), this->cls_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ori_blob = 4 [default = "ori_pred"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ori_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ori_blob().data(), this->ori_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dim_blob = 5 [default = "dim_pred"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dim_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dim_blob().data(), this->dim_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lof_blob = 6 [default = "lof_pred"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lof_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lof_blob().data(), this->lof_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lor_blob = 7 [default = "lor_pred"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lor_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lor_blob().data(), this->lor_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string seg_blob = 8 [default = "seg_pred"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seg_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seg_blob().data(), this->seg_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_blob = 10 [default = "data"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_blob().data(), this->input_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.obstacle.yolo.NetworkParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.obstacle.yolo.NetworkParam)
  return false;
#undef DO_
}

void NetworkParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loc_blob = 1 [default = "loc_pred"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_blob().data(), this->loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loc_blob(), output);
  }

  // optional string obj_blob = 2 [default = "obj_pred"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_blob().data(), this->obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->obj_blob(), output);
  }

  // optional string cls_blob = 3 [default = "cls_pred"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cls_blob().data(), this->cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cls_blob(), output);
  }

  // optional string ori_blob = 4 [default = "ori_pred"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ori_blob().data(), this->ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ori_blob(), output);
  }

  // optional string dim_blob = 5 [default = "dim_pred"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dim_blob().data(), this->dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dim_blob(), output);
  }

  // optional string lof_blob = 6 [default = "lof_pred"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lof_blob().data(), this->lof_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lof_blob(), output);
  }

  // optional string lor_blob = 7 [default = "lor_pred"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lor_blob().data(), this->lor_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->lor_blob(), output);
  }

  // optional string seg_blob = 8 [default = "seg_pred"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seg_blob().data(), this->seg_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->seg_blob(), output);
  }

  // optional string input_blob = 10 [default = "data"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_blob().data(), this->input_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->input_blob(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.obstacle.yolo.NetworkParam)
}

::google::protobuf::uint8* NetworkParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string loc_blob = 1 [default = "loc_pred"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loc_blob().data(), this->loc_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loc_blob(), target);
  }

  // optional string obj_blob = 2 [default = "obj_pred"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->obj_blob().data(), this->obj_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->obj_blob(), target);
  }

  // optional string cls_blob = 3 [default = "cls_pred"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cls_blob().data(), this->cls_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cls_blob(), target);
  }

  // optional string ori_blob = 4 [default = "ori_pred"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ori_blob().data(), this->ori_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ori_blob(), target);
  }

  // optional string dim_blob = 5 [default = "dim_pred"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dim_blob().data(), this->dim_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dim_blob(), target);
  }

  // optional string lof_blob = 6 [default = "lof_pred"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lof_blob().data(), this->lof_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lof_blob(), target);
  }

  // optional string lor_blob = 7 [default = "lor_pred"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lor_blob().data(), this->lor_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lor_blob(), target);
  }

  // optional string seg_blob = 8 [default = "seg_pred"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seg_blob().data(), this->seg_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->seg_blob(), target);
  }

  // optional string input_blob = 10 [default = "data"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_blob().data(), this->input_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->input_blob(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.obstacle.yolo.NetworkParam)
  return target;
}

size_t NetworkParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string loc_blob = 1 [default = "loc_pred"];
    if (has_loc_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loc_blob());
    }

    // optional string obj_blob = 2 [default = "obj_pred"];
    if (has_obj_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->obj_blob());
    }

    // optional string cls_blob = 3 [default = "cls_pred"];
    if (has_cls_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cls_blob());
    }

    // optional string ori_blob = 4 [default = "ori_pred"];
    if (has_ori_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ori_blob());
    }

    // optional string dim_blob = 5 [default = "dim_pred"];
    if (has_dim_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dim_blob());
    }

    // optional string lof_blob = 6 [default = "lof_pred"];
    if (has_lof_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lof_blob());
    }

    // optional string lor_blob = 7 [default = "lor_pred"];
    if (has_lor_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lor_blob());
    }

    // optional string seg_blob = 8 [default = "seg_pred"];
    if (has_seg_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seg_blob());
    }

  }
  // optional string input_blob = 10 [default = "data"];
  if (has_input_blob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_blob());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.obstacle.yolo.NetworkParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.obstacle.yolo.NetworkParam)
    MergeFrom(*source);
  }
}

void NetworkParam::MergeFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_loc_blob();
      loc_blob_.AssignWithDefault(&NetworkParam::_default_loc_blob_.get(), from.loc_blob_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_obj_blob();
      obj_blob_.AssignWithDefault(&NetworkParam::_default_obj_blob_.get(), from.obj_blob_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_cls_blob();
      cls_blob_.AssignWithDefault(&NetworkParam::_default_cls_blob_.get(), from.cls_blob_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ori_blob();
      ori_blob_.AssignWithDefault(&NetworkParam::_default_ori_blob_.get(), from.ori_blob_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_dim_blob();
      dim_blob_.AssignWithDefault(&NetworkParam::_default_dim_blob_.get(), from.dim_blob_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_lof_blob();
      lof_blob_.AssignWithDefault(&NetworkParam::_default_lof_blob_.get(), from.lof_blob_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_lor_blob();
      lor_blob_.AssignWithDefault(&NetworkParam::_default_lor_blob_.get(), from.lor_blob_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_seg_blob();
      seg_blob_.AssignWithDefault(&NetworkParam::_default_seg_blob_.get(), from.seg_blob_);
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_has_input_blob();
    input_blob_.AssignWithDefault(&NetworkParam::_default_input_blob_.get(), from.input_blob_);
  }
}

void NetworkParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.obstacle.yolo.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {
  return true;
}

void NetworkParam::Swap(NetworkParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkParam::InternalSwap(NetworkParam* other) {
  loc_blob_.Swap(&other->loc_blob_);
  obj_blob_.Swap(&other->obj_blob_);
  cls_blob_.Swap(&other->cls_blob_);
  ori_blob_.Swap(&other->ori_blob_);
  dim_blob_.Swap(&other->dim_blob_);
  lof_blob_.Swap(&other->lof_blob_);
  lor_blob_.Swap(&other->lor_blob_);
  seg_blob_.Swap(&other->seg_blob_);
  input_blob_.Swap(&other->input_blob_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkParam

// optional string loc_blob = 1 [default = "loc_pred"];
bool NetworkParam::has_loc_blob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkParam::set_has_loc_blob() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkParam::clear_has_loc_blob() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkParam::clear_loc_blob() {
  loc_blob_.ClearToDefaultNoArena(&NetworkParam::_default_loc_blob_.get());
  clear_has_loc_blob();
}
const ::std::string& NetworkParam::loc_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
  return loc_blob_.GetNoArena();
}
void NetworkParam::set_loc_blob(const ::std::string& value) {
  set_has_loc_blob();
  loc_blob_.SetNoArena(&NetworkParam::_default_loc_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
#if LANG_CXX11
void NetworkParam::set_loc_blob(::std::string&& value) {
  set_has_loc_blob();
  loc_blob_.SetNoArena(
    &NetworkParam::_default_loc_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
#endif
void NetworkParam::set_loc_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loc_blob();
  loc_blob_.SetNoArena(&NetworkParam::_default_loc_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
void NetworkParam::set_loc_blob(const char* value, size_t size) {
  set_has_loc_blob();
  loc_blob_.SetNoArena(&NetworkParam::_default_loc_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}
::std::string* NetworkParam::mutable_loc_blob() {
  set_has_loc_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
  return loc_blob_.MutableNoArena(&NetworkParam::_default_loc_blob_.get());
}
::std::string* NetworkParam::release_loc_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
  clear_has_loc_blob();
  return loc_blob_.ReleaseNoArena(&NetworkParam::_default_loc_blob_.get());
}
void NetworkParam::set_allocated_loc_blob(::std::string* loc_blob) {
  if (loc_blob != NULL) {
    set_has_loc_blob();
  } else {
    clear_has_loc_blob();
  }
  loc_blob_.SetAllocatedNoArena(&NetworkParam::_default_loc_blob_.get(), loc_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.loc_blob)
}

// optional string obj_blob = 2 [default = "obj_pred"];
bool NetworkParam::has_obj_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkParam::set_has_obj_blob() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkParam::clear_has_obj_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkParam::clear_obj_blob() {
  obj_blob_.ClearToDefaultNoArena(&NetworkParam::_default_obj_blob_.get());
  clear_has_obj_blob();
}
const ::std::string& NetworkParam::obj_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
  return obj_blob_.GetNoArena();
}
void NetworkParam::set_obj_blob(const ::std::string& value) {
  set_has_obj_blob();
  obj_blob_.SetNoArena(&NetworkParam::_default_obj_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
#if LANG_CXX11
void NetworkParam::set_obj_blob(::std::string&& value) {
  set_has_obj_blob();
  obj_blob_.SetNoArena(
    &NetworkParam::_default_obj_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
#endif
void NetworkParam::set_obj_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_obj_blob();
  obj_blob_.SetNoArena(&NetworkParam::_default_obj_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
void NetworkParam::set_obj_blob(const char* value, size_t size) {
  set_has_obj_blob();
  obj_blob_.SetNoArena(&NetworkParam::_default_obj_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}
::std::string* NetworkParam::mutable_obj_blob() {
  set_has_obj_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
  return obj_blob_.MutableNoArena(&NetworkParam::_default_obj_blob_.get());
}
::std::string* NetworkParam::release_obj_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
  clear_has_obj_blob();
  return obj_blob_.ReleaseNoArena(&NetworkParam::_default_obj_blob_.get());
}
void NetworkParam::set_allocated_obj_blob(::std::string* obj_blob) {
  if (obj_blob != NULL) {
    set_has_obj_blob();
  } else {
    clear_has_obj_blob();
  }
  obj_blob_.SetAllocatedNoArena(&NetworkParam::_default_obj_blob_.get(), obj_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.obj_blob)
}

// optional string cls_blob = 3 [default = "cls_pred"];
bool NetworkParam::has_cls_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkParam::set_has_cls_blob() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkParam::clear_has_cls_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkParam::clear_cls_blob() {
  cls_blob_.ClearToDefaultNoArena(&NetworkParam::_default_cls_blob_.get());
  clear_has_cls_blob();
}
const ::std::string& NetworkParam::cls_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
  return cls_blob_.GetNoArena();
}
void NetworkParam::set_cls_blob(const ::std::string& value) {
  set_has_cls_blob();
  cls_blob_.SetNoArena(&NetworkParam::_default_cls_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
#if LANG_CXX11
void NetworkParam::set_cls_blob(::std::string&& value) {
  set_has_cls_blob();
  cls_blob_.SetNoArena(
    &NetworkParam::_default_cls_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
#endif
void NetworkParam::set_cls_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cls_blob();
  cls_blob_.SetNoArena(&NetworkParam::_default_cls_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
void NetworkParam::set_cls_blob(const char* value, size_t size) {
  set_has_cls_blob();
  cls_blob_.SetNoArena(&NetworkParam::_default_cls_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}
::std::string* NetworkParam::mutable_cls_blob() {
  set_has_cls_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
  return cls_blob_.MutableNoArena(&NetworkParam::_default_cls_blob_.get());
}
::std::string* NetworkParam::release_cls_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
  clear_has_cls_blob();
  return cls_blob_.ReleaseNoArena(&NetworkParam::_default_cls_blob_.get());
}
void NetworkParam::set_allocated_cls_blob(::std::string* cls_blob) {
  if (cls_blob != NULL) {
    set_has_cls_blob();
  } else {
    clear_has_cls_blob();
  }
  cls_blob_.SetAllocatedNoArena(&NetworkParam::_default_cls_blob_.get(), cls_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.cls_blob)
}

// optional string ori_blob = 4 [default = "ori_pred"];
bool NetworkParam::has_ori_blob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkParam::set_has_ori_blob() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkParam::clear_has_ori_blob() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkParam::clear_ori_blob() {
  ori_blob_.ClearToDefaultNoArena(&NetworkParam::_default_ori_blob_.get());
  clear_has_ori_blob();
}
const ::std::string& NetworkParam::ori_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
  return ori_blob_.GetNoArena();
}
void NetworkParam::set_ori_blob(const ::std::string& value) {
  set_has_ori_blob();
  ori_blob_.SetNoArena(&NetworkParam::_default_ori_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
#if LANG_CXX11
void NetworkParam::set_ori_blob(::std::string&& value) {
  set_has_ori_blob();
  ori_blob_.SetNoArena(
    &NetworkParam::_default_ori_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
#endif
void NetworkParam::set_ori_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ori_blob();
  ori_blob_.SetNoArena(&NetworkParam::_default_ori_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
void NetworkParam::set_ori_blob(const char* value, size_t size) {
  set_has_ori_blob();
  ori_blob_.SetNoArena(&NetworkParam::_default_ori_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}
::std::string* NetworkParam::mutable_ori_blob() {
  set_has_ori_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
  return ori_blob_.MutableNoArena(&NetworkParam::_default_ori_blob_.get());
}
::std::string* NetworkParam::release_ori_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
  clear_has_ori_blob();
  return ori_blob_.ReleaseNoArena(&NetworkParam::_default_ori_blob_.get());
}
void NetworkParam::set_allocated_ori_blob(::std::string* ori_blob) {
  if (ori_blob != NULL) {
    set_has_ori_blob();
  } else {
    clear_has_ori_blob();
  }
  ori_blob_.SetAllocatedNoArena(&NetworkParam::_default_ori_blob_.get(), ori_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.ori_blob)
}

// optional string dim_blob = 5 [default = "dim_pred"];
bool NetworkParam::has_dim_blob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkParam::set_has_dim_blob() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkParam::clear_has_dim_blob() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkParam::clear_dim_blob() {
  dim_blob_.ClearToDefaultNoArena(&NetworkParam::_default_dim_blob_.get());
  clear_has_dim_blob();
}
const ::std::string& NetworkParam::dim_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
  return dim_blob_.GetNoArena();
}
void NetworkParam::set_dim_blob(const ::std::string& value) {
  set_has_dim_blob();
  dim_blob_.SetNoArena(&NetworkParam::_default_dim_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
#if LANG_CXX11
void NetworkParam::set_dim_blob(::std::string&& value) {
  set_has_dim_blob();
  dim_blob_.SetNoArena(
    &NetworkParam::_default_dim_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
#endif
void NetworkParam::set_dim_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dim_blob();
  dim_blob_.SetNoArena(&NetworkParam::_default_dim_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
void NetworkParam::set_dim_blob(const char* value, size_t size) {
  set_has_dim_blob();
  dim_blob_.SetNoArena(&NetworkParam::_default_dim_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}
::std::string* NetworkParam::mutable_dim_blob() {
  set_has_dim_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
  return dim_blob_.MutableNoArena(&NetworkParam::_default_dim_blob_.get());
}
::std::string* NetworkParam::release_dim_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
  clear_has_dim_blob();
  return dim_blob_.ReleaseNoArena(&NetworkParam::_default_dim_blob_.get());
}
void NetworkParam::set_allocated_dim_blob(::std::string* dim_blob) {
  if (dim_blob != NULL) {
    set_has_dim_blob();
  } else {
    clear_has_dim_blob();
  }
  dim_blob_.SetAllocatedNoArena(&NetworkParam::_default_dim_blob_.get(), dim_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.dim_blob)
}

// optional string lof_blob = 6 [default = "lof_pred"];
bool NetworkParam::has_lof_blob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetworkParam::set_has_lof_blob() {
  _has_bits_[0] |= 0x00000020u;
}
void NetworkParam::clear_has_lof_blob() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetworkParam::clear_lof_blob() {
  lof_blob_.ClearToDefaultNoArena(&NetworkParam::_default_lof_blob_.get());
  clear_has_lof_blob();
}
const ::std::string& NetworkParam::lof_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
  return lof_blob_.GetNoArena();
}
void NetworkParam::set_lof_blob(const ::std::string& value) {
  set_has_lof_blob();
  lof_blob_.SetNoArena(&NetworkParam::_default_lof_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
#if LANG_CXX11
void NetworkParam::set_lof_blob(::std::string&& value) {
  set_has_lof_blob();
  lof_blob_.SetNoArena(
    &NetworkParam::_default_lof_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
#endif
void NetworkParam::set_lof_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lof_blob();
  lof_blob_.SetNoArena(&NetworkParam::_default_lof_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
void NetworkParam::set_lof_blob(const char* value, size_t size) {
  set_has_lof_blob();
  lof_blob_.SetNoArena(&NetworkParam::_default_lof_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}
::std::string* NetworkParam::mutable_lof_blob() {
  set_has_lof_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
  return lof_blob_.MutableNoArena(&NetworkParam::_default_lof_blob_.get());
}
::std::string* NetworkParam::release_lof_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
  clear_has_lof_blob();
  return lof_blob_.ReleaseNoArena(&NetworkParam::_default_lof_blob_.get());
}
void NetworkParam::set_allocated_lof_blob(::std::string* lof_blob) {
  if (lof_blob != NULL) {
    set_has_lof_blob();
  } else {
    clear_has_lof_blob();
  }
  lof_blob_.SetAllocatedNoArena(&NetworkParam::_default_lof_blob_.get(), lof_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.lof_blob)
}

// optional string lor_blob = 7 [default = "lor_pred"];
bool NetworkParam::has_lor_blob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NetworkParam::set_has_lor_blob() {
  _has_bits_[0] |= 0x00000040u;
}
void NetworkParam::clear_has_lor_blob() {
  _has_bits_[0] &= ~0x00000040u;
}
void NetworkParam::clear_lor_blob() {
  lor_blob_.ClearToDefaultNoArena(&NetworkParam::_default_lor_blob_.get());
  clear_has_lor_blob();
}
const ::std::string& NetworkParam::lor_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
  return lor_blob_.GetNoArena();
}
void NetworkParam::set_lor_blob(const ::std::string& value) {
  set_has_lor_blob();
  lor_blob_.SetNoArena(&NetworkParam::_default_lor_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
#if LANG_CXX11
void NetworkParam::set_lor_blob(::std::string&& value) {
  set_has_lor_blob();
  lor_blob_.SetNoArena(
    &NetworkParam::_default_lor_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
#endif
void NetworkParam::set_lor_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lor_blob();
  lor_blob_.SetNoArena(&NetworkParam::_default_lor_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
void NetworkParam::set_lor_blob(const char* value, size_t size) {
  set_has_lor_blob();
  lor_blob_.SetNoArena(&NetworkParam::_default_lor_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}
::std::string* NetworkParam::mutable_lor_blob() {
  set_has_lor_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
  return lor_blob_.MutableNoArena(&NetworkParam::_default_lor_blob_.get());
}
::std::string* NetworkParam::release_lor_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
  clear_has_lor_blob();
  return lor_blob_.ReleaseNoArena(&NetworkParam::_default_lor_blob_.get());
}
void NetworkParam::set_allocated_lor_blob(::std::string* lor_blob) {
  if (lor_blob != NULL) {
    set_has_lor_blob();
  } else {
    clear_has_lor_blob();
  }
  lor_blob_.SetAllocatedNoArena(&NetworkParam::_default_lor_blob_.get(), lor_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.lor_blob)
}

// optional string seg_blob = 8 [default = "seg_pred"];
bool NetworkParam::has_seg_blob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NetworkParam::set_has_seg_blob() {
  _has_bits_[0] |= 0x00000080u;
}
void NetworkParam::clear_has_seg_blob() {
  _has_bits_[0] &= ~0x00000080u;
}
void NetworkParam::clear_seg_blob() {
  seg_blob_.ClearToDefaultNoArena(&NetworkParam::_default_seg_blob_.get());
  clear_has_seg_blob();
}
const ::std::string& NetworkParam::seg_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
  return seg_blob_.GetNoArena();
}
void NetworkParam::set_seg_blob(const ::std::string& value) {
  set_has_seg_blob();
  seg_blob_.SetNoArena(&NetworkParam::_default_seg_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
#if LANG_CXX11
void NetworkParam::set_seg_blob(::std::string&& value) {
  set_has_seg_blob();
  seg_blob_.SetNoArena(
    &NetworkParam::_default_seg_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
#endif
void NetworkParam::set_seg_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seg_blob();
  seg_blob_.SetNoArena(&NetworkParam::_default_seg_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
void NetworkParam::set_seg_blob(const char* value, size_t size) {
  set_has_seg_blob();
  seg_blob_.SetNoArena(&NetworkParam::_default_seg_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}
::std::string* NetworkParam::mutable_seg_blob() {
  set_has_seg_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
  return seg_blob_.MutableNoArena(&NetworkParam::_default_seg_blob_.get());
}
::std::string* NetworkParam::release_seg_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
  clear_has_seg_blob();
  return seg_blob_.ReleaseNoArena(&NetworkParam::_default_seg_blob_.get());
}
void NetworkParam::set_allocated_seg_blob(::std::string* seg_blob) {
  if (seg_blob != NULL) {
    set_has_seg_blob();
  } else {
    clear_has_seg_blob();
  }
  seg_blob_.SetAllocatedNoArena(&NetworkParam::_default_seg_blob_.get(), seg_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.seg_blob)
}

// optional string input_blob = 10 [default = "data"];
bool NetworkParam::has_input_blob() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NetworkParam::set_has_input_blob() {
  _has_bits_[0] |= 0x00000100u;
}
void NetworkParam::clear_has_input_blob() {
  _has_bits_[0] &= ~0x00000100u;
}
void NetworkParam::clear_input_blob() {
  input_blob_.ClearToDefaultNoArena(&NetworkParam::_default_input_blob_.get());
  clear_has_input_blob();
}
const ::std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
  return input_blob_.GetNoArena();
}
void NetworkParam::set_input_blob(const ::std::string& value) {
  set_has_input_blob();
  input_blob_.SetNoArena(&NetworkParam::_default_input_blob_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
#if LANG_CXX11
void NetworkParam::set_input_blob(::std::string&& value) {
  set_has_input_blob();
  input_blob_.SetNoArena(
    &NetworkParam::_default_input_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
#endif
void NetworkParam::set_input_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_blob();
  input_blob_.SetNoArena(&NetworkParam::_default_input_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
void NetworkParam::set_input_blob(const char* value, size_t size) {
  set_has_input_blob();
  input_blob_.SetNoArena(&NetworkParam::_default_input_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}
::std::string* NetworkParam::mutable_input_blob() {
  set_has_input_blob();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
  return input_blob_.MutableNoArena(&NetworkParam::_default_input_blob_.get());
}
::std::string* NetworkParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
  clear_has_input_blob();
  return input_blob_.ReleaseNoArena(&NetworkParam::_default_input_blob_.get());
}
void NetworkParam::set_allocated_input_blob(::std::string* input_blob) {
  if (input_blob != NULL) {
    set_has_input_blob();
  } else {
    clear_has_input_blob();
  }
  input_blob_.SetAllocatedNoArena(&NetworkParam::_default_input_blob_.get(), input_blob);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NetworkParam.input_blob)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> NMSParam::_default_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NMSParam::kTypeFieldNumber;
const int NMSParam::kThresholdFieldNumber;
const int NMSParam::kSigmaFieldNumber;
const int NMSParam::kInterClsNmsThreshFieldNumber;
const int NMSParam::kCrossClassMergeThreshFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NMSParam::NMSParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.perception.obstacle.yolo.NMSParam)
}
NMSParam::NMSParam(const NMSParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&NMSParam::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&NMSParam::_default_type_.get(), from.type_);
  }
  ::memcpy(&threshold_, &from.threshold_,
    reinterpret_cast<char*>(&cross_class_merge_thresh_) -
    reinterpret_cast<char*>(&threshold_) + sizeof(cross_class_merge_thresh_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.perception.obstacle.yolo.NMSParam)
}

void NMSParam::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&NMSParam::_default_type_.get());
  threshold_ = 0.4f;
  sigma_ = 0.4f;
  inter_cls_nms_thresh_ = 1;
  cross_class_merge_thresh_ = 0.8f;
}

NMSParam::~NMSParam() {
  // @@protoc_insertion_point(destructor:jmc_auto.perception.obstacle.yolo.NMSParam)
  SharedDtor();
}

void NMSParam::SharedDtor() {
  type_.DestroyNoArena(&NMSParam::_default_type_.get());
}

void NMSParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NMSParam::descriptor() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NMSParam& NMSParam::default_instance() {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::InitDefaults();
  return *internal_default_instance();
}

NMSParam* NMSParam::New(::google::protobuf::Arena* arena) const {
  NMSParam* n = new NMSParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NMSParam::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&NMSParam::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&NMSParam::_default_type_.get());
    }
    threshold_ = 0.4f;
    sigma_ = 0.4f;
    inter_cls_nms_thresh_ = 1;
    cross_class_merge_thresh_ = 0.8f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NMSParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1 [default = "NormalNMS"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.perception.obstacle.yolo.NMSParam.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float threshold = 2 [default = 0.4];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sigma = 3 [default = 0.4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_sigma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float inter_cls_nms_thresh = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_inter_cls_nms_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inter_cls_nms_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cross_class_merge_thresh = 5 [default = 0.8];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_cross_class_merge_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cross_class_merge_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.perception.obstacle.yolo.NMSParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.perception.obstacle.yolo.NMSParam)
  return false;
#undef DO_
}

void NMSParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "NormalNMS"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NMSParam.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float threshold = 2 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->threshold(), output);
  }

  // optional float sigma = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sigma(), output);
  }

  // optional float inter_cls_nms_thresh = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->inter_cls_nms_thresh(), output);
  }

  // optional float cross_class_merge_thresh = 5 [default = 0.8];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cross_class_merge_thresh(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.perception.obstacle.yolo.NMSParam)
}

::google::protobuf::uint8* NMSParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "NormalNMS"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.perception.obstacle.yolo.NMSParam.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float threshold = 2 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->threshold(), target);
  }

  // optional float sigma = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sigma(), target);
  }

  // optional float inter_cls_nms_thresh = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->inter_cls_nms_thresh(), target);
  }

  // optional float cross_class_merge_thresh = 5 [default = 0.8];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cross_class_merge_thresh(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.perception.obstacle.yolo.NMSParam)
  return target;
}

size_t NMSParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string type = 1 [default = "NormalNMS"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional float threshold = 2 [default = 0.4];
    if (has_threshold()) {
      total_size += 1 + 4;
    }

    // optional float sigma = 3 [default = 0.4];
    if (has_sigma()) {
      total_size += 1 + 4;
    }

    // optional float inter_cls_nms_thresh = 4 [default = 1];
    if (has_inter_cls_nms_thresh()) {
      total_size += 1 + 4;
    }

    // optional float cross_class_merge_thresh = 5 [default = 0.8];
    if (has_cross_class_merge_thresh()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NMSParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NMSParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NMSParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.perception.obstacle.yolo.NMSParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.perception.obstacle.yolo.NMSParam)
    MergeFrom(*source);
  }
}

void NMSParam::MergeFrom(const NMSParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&NMSParam::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      sigma_ = from.sigma_;
    }
    if (cached_has_bits & 0x00000008u) {
      inter_cls_nms_thresh_ = from.inter_cls_nms_thresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      cross_class_merge_thresh_ = from.cross_class_merge_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NMSParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NMSParam::CopyFrom(const NMSParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.perception.obstacle.yolo.NMSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NMSParam::IsInitialized() const {
  return true;
}

void NMSParam::Swap(NMSParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NMSParam::InternalSwap(NMSParam* other) {
  type_.Swap(&other->type_);
  std::swap(threshold_, other->threshold_);
  std::swap(sigma_, other->sigma_);
  std::swap(inter_cls_nms_thresh_, other->inter_cls_nms_thresh_);
  std::swap(cross_class_merge_thresh_, other->cross_class_merge_thresh_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NMSParam::GetMetadata() const {
  protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fobstacle_2fcamera_2fdetector_2fyolo_5fcamera_5fdetector_2fproto_2fyolo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NMSParam

// optional string type = 1 [default = "NormalNMS"];
bool NMSParam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NMSParam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NMSParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NMSParam::clear_type() {
  type_.ClearToDefaultNoArena(&NMSParam::_default_type_.get());
  clear_has_type();
}
const ::std::string& NMSParam::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.type)
  return type_.GetNoArena();
}
void NMSParam::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&NMSParam::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
#if LANG_CXX11
void NMSParam::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &NMSParam::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
#endif
void NMSParam::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&NMSParam::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
void NMSParam::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&NMSParam::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}
::std::string* NMSParam::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:jmc_auto.perception.obstacle.yolo.NMSParam.type)
  return type_.MutableNoArena(&NMSParam::_default_type_.get());
}
::std::string* NMSParam::release_type() {
  // @@protoc_insertion_point(field_release:jmc_auto.perception.obstacle.yolo.NMSParam.type)
  clear_has_type();
  return type_.ReleaseNoArena(&NMSParam::_default_type_.get());
}
void NMSParam::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&NMSParam::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.perception.obstacle.yolo.NMSParam.type)
}

// optional float threshold = 2 [default = 0.4];
bool NMSParam::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NMSParam::set_has_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
void NMSParam::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
void NMSParam::clear_threshold() {
  threshold_ = 0.4f;
  clear_has_threshold();
}
float NMSParam::threshold() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.threshold)
  return threshold_;
}
void NMSParam::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.threshold)
}

// optional float sigma = 3 [default = 0.4];
bool NMSParam::has_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NMSParam::set_has_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
void NMSParam::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
void NMSParam::clear_sigma() {
  sigma_ = 0.4f;
  clear_has_sigma();
}
float NMSParam::sigma() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.sigma)
  return sigma_;
}
void NMSParam::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.sigma)
}

// optional float inter_cls_nms_thresh = 4 [default = 1];
bool NMSParam::has_inter_cls_nms_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NMSParam::set_has_inter_cls_nms_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
void NMSParam::clear_has_inter_cls_nms_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
void NMSParam::clear_inter_cls_nms_thresh() {
  inter_cls_nms_thresh_ = 1;
  clear_has_inter_cls_nms_thresh();
}
float NMSParam::inter_cls_nms_thresh() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.inter_cls_nms_thresh)
  return inter_cls_nms_thresh_;
}
void NMSParam::set_inter_cls_nms_thresh(float value) {
  set_has_inter_cls_nms_thresh();
  inter_cls_nms_thresh_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.inter_cls_nms_thresh)
}

// optional float cross_class_merge_thresh = 5 [default = 0.8];
bool NMSParam::has_cross_class_merge_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NMSParam::set_has_cross_class_merge_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
void NMSParam::clear_has_cross_class_merge_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
void NMSParam::clear_cross_class_merge_thresh() {
  cross_class_merge_thresh_ = 0.8f;
  clear_has_cross_class_merge_thresh();
}
float NMSParam::cross_class_merge_thresh() const {
  // @@protoc_insertion_point(field_get:jmc_auto.perception.obstacle.yolo.NMSParam.cross_class_merge_thresh)
  return cross_class_merge_thresh_;
}
void NMSParam::set_cross_class_merge_thresh(float value) {
  set_has_cross_class_merge_thresh();
  cross_class_merge_thresh_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.perception.obstacle.yolo.NMSParam.cross_class_merge_thresh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yolo
}  // namespace obstacle
}  // namespace perception
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
