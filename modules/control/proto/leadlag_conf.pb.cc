// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/leadlag_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/control/proto/leadlag_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace control {
class LeadlagConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeadlagConf> {
} _LeadlagConf_default_instance_;

namespace protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeadlagConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeadlagConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeadlagConf, innerstate_saturation_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeadlagConf, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeadlagConf, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeadlagConf, tau_),
  1,
  2,
  3,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(LeadlagConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeadlagConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/control/proto/leadlag_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _LeadlagConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LeadlagConf_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/control/proto/leadlag_conf.pro"
      "to\022\020jmc_auto.control\"l\n\013LeadlagConf\022(\n\033i"
      "nnerstate_saturation_level\030\001 \001(\001:\003300\022\022\n"
      "\005alpha\030\002 \001(\001:\0030.1\022\017\n\004beta\030\003 \001(\001:\0011\022\016\n\003ta"
      "u\030\004 \001(\001:\0010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/control/proto/leadlag_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeadlagConf::kInnerstateSaturationLevelFieldNumber;
const int LeadlagConf::kAlphaFieldNumber;
const int LeadlagConf::kBetaFieldNumber;
const int LeadlagConf::kTauFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeadlagConf::LeadlagConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.control.LeadlagConf)
}
LeadlagConf::LeadlagConf(const LeadlagConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tau_, &from.tau_,
    reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&tau_) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.control.LeadlagConf)
}

void LeadlagConf::SharedCtor() {
  _cached_size_ = 0;
  tau_ = 0;
  innerstate_saturation_level_ = 300;
  alpha_ = 0.1;
  beta_ = 1;
}

LeadlagConf::~LeadlagConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.control.LeadlagConf)
  SharedDtor();
}

void LeadlagConf::SharedDtor() {
}

void LeadlagConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeadlagConf::descriptor() {
  protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeadlagConf& LeadlagConf::default_instance() {
  protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeadlagConf* LeadlagConf::New(::google::protobuf::Arena* arena) const {
  LeadlagConf* n = new LeadlagConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeadlagConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.control.LeadlagConf)
  if (_has_bits_[0 / 32] & 15u) {
    tau_ = 0;
    innerstate_saturation_level_ = 300;
    alpha_ = 0.1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeadlagConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.control.LeadlagConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double innerstate_saturation_level = 1 [default = 300];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_innerstate_saturation_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &innerstate_saturation_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double alpha = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beta = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tau = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_tau();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tau_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.control.LeadlagConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.control.LeadlagConf)
  return false;
#undef DO_
}

void LeadlagConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.control.LeadlagConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double innerstate_saturation_level = 1 [default = 300];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->innerstate_saturation_level(), output);
  }

  // optional double alpha = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->alpha(), output);
  }

  // optional double beta = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->beta(), output);
  }

  // optional double tau = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tau(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.control.LeadlagConf)
}

::google::protobuf::uint8* LeadlagConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.control.LeadlagConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double innerstate_saturation_level = 1 [default = 300];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->innerstate_saturation_level(), target);
  }

  // optional double alpha = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->alpha(), target);
  }

  // optional double beta = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->beta(), target);
  }

  // optional double tau = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tau(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.control.LeadlagConf)
  return target;
}

size_t LeadlagConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.control.LeadlagConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double tau = 4 [default = 0];
    if (has_tau()) {
      total_size += 1 + 8;
    }

    // optional double innerstate_saturation_level = 1 [default = 300];
    if (has_innerstate_saturation_level()) {
      total_size += 1 + 8;
    }

    // optional double alpha = 2 [default = 0.1];
    if (has_alpha()) {
      total_size += 1 + 8;
    }

    // optional double beta = 3 [default = 1];
    if (has_beta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeadlagConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.control.LeadlagConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LeadlagConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeadlagConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.control.LeadlagConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.control.LeadlagConf)
    MergeFrom(*source);
  }
}

void LeadlagConf::MergeFrom(const LeadlagConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.control.LeadlagConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      tau_ = from.tau_;
    }
    if (cached_has_bits & 0x00000002u) {
      innerstate_saturation_level_ = from.innerstate_saturation_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000008u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeadlagConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.control.LeadlagConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeadlagConf::CopyFrom(const LeadlagConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.control.LeadlagConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeadlagConf::IsInitialized() const {
  return true;
}

void LeadlagConf::Swap(LeadlagConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeadlagConf::InternalSwap(LeadlagConf* other) {
  std::swap(tau_, other->tau_);
  std::swap(innerstate_saturation_level_, other->innerstate_saturation_level_);
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeadlagConf::GetMetadata() const {
  protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeadlagConf

// optional double innerstate_saturation_level = 1 [default = 300];
bool LeadlagConf::has_innerstate_saturation_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeadlagConf::set_has_innerstate_saturation_level() {
  _has_bits_[0] |= 0x00000002u;
}
void LeadlagConf::clear_has_innerstate_saturation_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeadlagConf::clear_innerstate_saturation_level() {
  innerstate_saturation_level_ = 300;
  clear_has_innerstate_saturation_level();
}
double LeadlagConf::innerstate_saturation_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.LeadlagConf.innerstate_saturation_level)
  return innerstate_saturation_level_;
}
void LeadlagConf::set_innerstate_saturation_level(double value) {
  set_has_innerstate_saturation_level();
  innerstate_saturation_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.LeadlagConf.innerstate_saturation_level)
}

// optional double alpha = 2 [default = 0.1];
bool LeadlagConf::has_alpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LeadlagConf::set_has_alpha() {
  _has_bits_[0] |= 0x00000004u;
}
void LeadlagConf::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000004u;
}
void LeadlagConf::clear_alpha() {
  alpha_ = 0.1;
  clear_has_alpha();
}
double LeadlagConf::alpha() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.LeadlagConf.alpha)
  return alpha_;
}
void LeadlagConf::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.LeadlagConf.alpha)
}

// optional double beta = 3 [default = 1];
bool LeadlagConf::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LeadlagConf::set_has_beta() {
  _has_bits_[0] |= 0x00000008u;
}
void LeadlagConf::clear_has_beta() {
  _has_bits_[0] &= ~0x00000008u;
}
void LeadlagConf::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
double LeadlagConf::beta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.LeadlagConf.beta)
  return beta_;
}
void LeadlagConf::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.LeadlagConf.beta)
}

// optional double tau = 4 [default = 0];
bool LeadlagConf::has_tau() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeadlagConf::set_has_tau() {
  _has_bits_[0] |= 0x00000001u;
}
void LeadlagConf::clear_has_tau() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeadlagConf::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
double LeadlagConf::tau() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.LeadlagConf.tau)
  return tau_;
}
void LeadlagConf::set_tau(double value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.LeadlagConf.tau)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
