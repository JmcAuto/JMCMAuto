// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/steer_torque_calibration.proto

#ifndef PROTOBUF_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto__INCLUDED
#define PROTOBUF_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace control {
namespace steertorquecalibration {
class Steer_Torque_CalibrationInfo;
class Steer_Torque_CalibrationInfoDefaultTypeInternal;
extern Steer_Torque_CalibrationInfoDefaultTypeInternal _Steer_Torque_CalibrationInfo_default_instance_;
class Steer_Torque_CalibrationTable;
class Steer_Torque_CalibrationTableDefaultTypeInternal;
extern Steer_Torque_CalibrationTableDefaultTypeInternal _Steer_Torque_CalibrationTable_default_instance_;
}  // namespace steertorquecalibration
}  // namespace control
}  // namespace jmc_auto

namespace jmc_auto {
namespace control {
namespace steertorquecalibration {

namespace protobuf_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto

// ===================================================================

class Steer_Torque_CalibrationTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable) */ {
 public:
  Steer_Torque_CalibrationTable();
  virtual ~Steer_Torque_CalibrationTable();

  Steer_Torque_CalibrationTable(const Steer_Torque_CalibrationTable& from);

  inline Steer_Torque_CalibrationTable& operator=(const Steer_Torque_CalibrationTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Steer_Torque_CalibrationTable& default_instance();

  static inline const Steer_Torque_CalibrationTable* internal_default_instance() {
    return reinterpret_cast<const Steer_Torque_CalibrationTable*>(
               &_Steer_Torque_CalibrationTable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Steer_Torque_CalibrationTable* other);

  // implements Message ----------------------------------------------

  inline Steer_Torque_CalibrationTable* New() const PROTOBUF_FINAL { return New(NULL); }

  Steer_Torque_CalibrationTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Steer_Torque_CalibrationTable& from);
  void MergeFrom(const Steer_Torque_CalibrationTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Steer_Torque_CalibrationTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo steer_calibration = 1;
  int steer_calibration_size() const;
  void clear_steer_calibration();
  static const int kSteerCalibrationFieldNumber = 1;
  const ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo& steer_calibration(int index) const;
  ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo* mutable_steer_calibration(int index);
  ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo* add_steer_calibration();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo >*
      mutable_steer_calibration();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo >&
      steer_calibration() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo > steer_calibration_;
  friend struct protobuf_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Steer_Torque_CalibrationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo) */ {
 public:
  Steer_Torque_CalibrationInfo();
  virtual ~Steer_Torque_CalibrationInfo();

  Steer_Torque_CalibrationInfo(const Steer_Torque_CalibrationInfo& from);

  inline Steer_Torque_CalibrationInfo& operator=(const Steer_Torque_CalibrationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Steer_Torque_CalibrationInfo& default_instance();

  static inline const Steer_Torque_CalibrationInfo* internal_default_instance() {
    return reinterpret_cast<const Steer_Torque_CalibrationInfo*>(
               &_Steer_Torque_CalibrationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Steer_Torque_CalibrationInfo* other);

  // implements Message ----------------------------------------------

  inline Steer_Torque_CalibrationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  Steer_Torque_CalibrationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Steer_Torque_CalibrationInfo& from);
  void MergeFrom(const Steer_Torque_CalibrationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Steer_Torque_CalibrationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double speed = 1;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 1;
  double speed() const;
  void set_speed(double value);

  // optional double angle = 2;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 2;
  double angle() const;
  void set_angle(double value);

  // optional double torque = 3;
  bool has_torque() const;
  void clear_torque();
  static const int kTorqueFieldNumber = 3;
  double torque() const;
  void set_torque(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo)
 private:
  void set_has_speed();
  void clear_has_speed();
  void set_has_angle();
  void clear_has_angle();
  void set_has_torque();
  void clear_has_torque();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double speed_;
  double angle_;
  double torque_;
  friend struct protobuf_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Steer_Torque_CalibrationTable

// repeated .jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo steer_calibration = 1;
inline int Steer_Torque_CalibrationTable::steer_calibration_size() const {
  return steer_calibration_.size();
}
inline void Steer_Torque_CalibrationTable::clear_steer_calibration() {
  steer_calibration_.Clear();
}
inline const ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo& Steer_Torque_CalibrationTable::steer_calibration(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable.steer_calibration)
  return steer_calibration_.Get(index);
}
inline ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo* Steer_Torque_CalibrationTable::mutable_steer_calibration(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable.steer_calibration)
  return steer_calibration_.Mutable(index);
}
inline ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo* Steer_Torque_CalibrationTable::add_steer_calibration() {
  // @@protoc_insertion_point(field_add:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable.steer_calibration)
  return steer_calibration_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo >*
Steer_Torque_CalibrationTable::mutable_steer_calibration() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable.steer_calibration)
  return &steer_calibration_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::control::steertorquecalibration::Steer_Torque_CalibrationInfo >&
Steer_Torque_CalibrationTable::steer_calibration() const {
  // @@protoc_insertion_point(field_list:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationTable.steer_calibration)
  return steer_calibration_;
}

// -------------------------------------------------------------------

// Steer_Torque_CalibrationInfo

// optional double speed = 1;
inline bool Steer_Torque_CalibrationInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Steer_Torque_CalibrationInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Steer_Torque_CalibrationInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Steer_Torque_CalibrationInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Steer_Torque_CalibrationInfo::speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo.speed)
  return speed_;
}
inline void Steer_Torque_CalibrationInfo::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo.speed)
}

// optional double angle = 2;
inline bool Steer_Torque_CalibrationInfo::has_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Steer_Torque_CalibrationInfo::set_has_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Steer_Torque_CalibrationInfo::clear_has_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Steer_Torque_CalibrationInfo::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double Steer_Torque_CalibrationInfo::angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo.angle)
  return angle_;
}
inline void Steer_Torque_CalibrationInfo::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo.angle)
}

// optional double torque = 3;
inline bool Steer_Torque_CalibrationInfo::has_torque() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Steer_Torque_CalibrationInfo::set_has_torque() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Steer_Torque_CalibrationInfo::clear_has_torque() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Steer_Torque_CalibrationInfo::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline double Steer_Torque_CalibrationInfo::torque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo.torque)
  return torque_;
}
inline void Steer_Torque_CalibrationInfo::set_torque(double value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.control.steertorquecalibration.Steer_Torque_CalibrationInfo.torque)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace steertorquecalibration
}  // namespace control
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcontrol_2fproto_2fsteer_5ftorque_5fcalibration_2eproto__INCLUDED
