// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/warehouse_query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/data/proto/warehouse_query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace data {
class SearchRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchRequest> {
} _SearchRequest_default_instance_;
class SearchResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchResponse> {
} _SearchResponse_default_instance_;

namespace protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, vehicle_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, loop_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, topics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchRequest, offset_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResponse, total_count_),
  ~0u,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(SearchRequest)},
  { 19, 26, sizeof(SearchResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/data/proto/warehouse_query.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SearchRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SearchResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::data::protobuf_modules_2fdata_2fproto_2ftask_2eproto::InitDefaults();
  _SearchRequest_default_instance_.DefaultConstruct();
  _SearchResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/data/proto/warehouse_query.pro"
      "to\022\rjmc_auto.data\032\035modules/data/proto/ta"
      "sk.proto\"\253\001\n\rSearchRequest\022\024\n\014vehicle_na"
      "me\030\001 \001(\t\022\020\n\010map_name\030\002 \001(\t\022/\n\tloop_type\030"
      "\003 \001(\0162\034.jmc_auto.data.Task.LoopType\022\016\n\006t"
      "opics\030\004 \003(\t\022\016\n\006fields\030\005 \003(\t\022\021\n\005count\030\006 \001"
      "(\005:\00220\022\016\n\006offset\030\007 \001(\005\"I\n\016SearchResponse"
      "\022\"\n\005tasks\030\001 \003(\0132\023.jmc_auto.data.Task\022\023\n\013"
      "total_count\030\002 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/data/proto/warehouse_query.proto", &protobuf_RegisterTypes);
  ::jmc_auto::data::protobuf_modules_2fdata_2fproto_2ftask_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRequest::kVehicleNameFieldNumber;
const int SearchRequest::kMapNameFieldNumber;
const int SearchRequest::kLoopTypeFieldNumber;
const int SearchRequest::kTopicsFieldNumber;
const int SearchRequest::kFieldsFieldNumber;
const int SearchRequest::kCountFieldNumber;
const int SearchRequest::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRequest::SearchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.data.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      topics_(from.topics_),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicle_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicle_name()) {
    vehicle_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&loop_type_, &from.loop_type_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&loop_type_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.data.SearchRequest)
}

void SearchRequest::SharedCtor() {
  _cached_size_ = 0;
  vehicle_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&loop_type_, 0, reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&loop_type_) + sizeof(offset_));
  count_ = 20;
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:jmc_auto.data.SearchRequest)
  SharedDtor();
}

void SearchRequest::SharedDtor() {
  vehicle_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRequest::descriptor() {
  protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRequest& SearchRequest::default_instance() {
  protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchRequest* SearchRequest::New(::google::protobuf::Arena* arena) const {
  SearchRequest* n = new SearchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.data.SearchRequest)
  topics_.Clear();
  fields_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_vehicle_name()) {
      GOOGLE_DCHECK(!vehicle_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vehicle_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_map_name()) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&loop_type_, 0, reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&loop_type_) + sizeof(offset_));
    count_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.data.SearchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vehicle_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_name().data(), this->vehicle_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.data.SearchRequest.vehicle_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.data.SearchRequest.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.data.Task.LoopType loop_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::data::Task_LoopType_IsValid(value)) {
            set_loop_type(static_cast< ::jmc_auto::data::Task_LoopType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topics(this->topics_size() - 1).data(),
            this->topics(this->topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.data.SearchRequest.topics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.data.SearchRequest.fields");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 6 [default = 20];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.data.SearchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.data.SearchRequest)
  return false;
#undef DO_
}

void SearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.data.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vehicle_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_name().data(), this->vehicle_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.vehicle_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vehicle_name(), output);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_name(), output);
  }

  // optional .jmc_auto.data.Task.LoopType loop_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->loop_type(), output);
  }

  // repeated string topics = 4;
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topics(i).data(), this->topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topics(i), output);
  }

  // repeated string fields = 5;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fields(i), output);
  }

  // optional int32 count = 6 [default = 20];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // optional int32 offset = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.data.SearchRequest)
}

::google::protobuf::uint8* SearchRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.data.SearchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vehicle_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_name().data(), this->vehicle_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.vehicle_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vehicle_name(), target);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_name(), target);
  }

  // optional .jmc_auto.data.Task.LoopType loop_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->loop_type(), target);
  }

  // repeated string topics = 4;
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topics(i).data(), this->topics(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topics(i), target);
  }

  // repeated string fields = 5;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.data.SearchRequest.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->fields(i), target);
  }

  // optional int32 count = 6 [default = 20];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // optional int32 offset = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.data.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.data.SearchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string topics = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topics_size());
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topics(i));
  }

  // repeated string fields = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string vehicle_name = 1;
    if (has_vehicle_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_name());
    }

    // optional string map_name = 2;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional .jmc_auto.data.Task.LoopType loop_type = 3;
    if (has_loop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_type());
    }

    // optional int32 offset = 7;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 count = 6 [default = 20];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.data.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.data.SearchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.data.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.data.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  fields_.MergeFrom(from.fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vehicle_name();
      vehicle_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      loop_type_ = from.loop_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.data.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.data.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::Swap(SearchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRequest::InternalSwap(SearchRequest* other) {
  topics_.InternalSwap(&other->topics_);
  fields_.InternalSwap(&other->fields_);
  vehicle_name_.Swap(&other->vehicle_name_);
  map_name_.Swap(&other->map_name_);
  std::swap(loop_type_, other->loop_type_);
  std::swap(offset_, other->offset_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRequest::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// optional string vehicle_name = 1;
bool SearchRequest::has_vehicle_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchRequest::set_has_vehicle_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchRequest::clear_has_vehicle_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchRequest::clear_vehicle_name() {
  vehicle_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_name();
}
const ::std::string& SearchRequest::vehicle_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.vehicle_name)
  return vehicle_name_.GetNoArena();
}
void SearchRequest::set_vehicle_name(const ::std::string& value) {
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.vehicle_name)
}
#if LANG_CXX11
void SearchRequest::set_vehicle_name(::std::string&& value) {
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.data.SearchRequest.vehicle_name)
}
#endif
void SearchRequest::set_vehicle_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.vehicle_name)
}
void SearchRequest::set_vehicle_name(const char* value, size_t size) {
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.vehicle_name)
}
::std::string* SearchRequest::mutable_vehicle_name() {
  set_has_vehicle_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.vehicle_name)
  return vehicle_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchRequest::release_vehicle_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.data.SearchRequest.vehicle_name)
  clear_has_vehicle_name();
  return vehicle_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchRequest::set_allocated_vehicle_name(::std::string* vehicle_name) {
  if (vehicle_name != NULL) {
    set_has_vehicle_name();
  } else {
    clear_has_vehicle_name();
  }
  vehicle_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.data.SearchRequest.vehicle_name)
}

// optional string map_name = 2;
bool SearchRequest::has_map_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchRequest::set_has_map_name() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchRequest::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchRequest::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& SearchRequest::map_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.map_name)
  return map_name_.GetNoArena();
}
void SearchRequest::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.map_name)
}
#if LANG_CXX11
void SearchRequest::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.data.SearchRequest.map_name)
}
#endif
void SearchRequest::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.map_name)
}
void SearchRequest::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.map_name)
}
::std::string* SearchRequest::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchRequest::release_map_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.data.SearchRequest.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchRequest::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.data.SearchRequest.map_name)
}

// optional .jmc_auto.data.Task.LoopType loop_type = 3;
bool SearchRequest::has_loop_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchRequest::set_has_loop_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchRequest::clear_has_loop_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchRequest::clear_loop_type() {
  loop_type_ = 0;
  clear_has_loop_type();
}
::jmc_auto::data::Task_LoopType SearchRequest::loop_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.loop_type)
  return static_cast< ::jmc_auto::data::Task_LoopType >(loop_type_);
}
void SearchRequest::set_loop_type(::jmc_auto::data::Task_LoopType value) {
  assert(::jmc_auto::data::Task_LoopType_IsValid(value));
  set_has_loop_type();
  loop_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.loop_type)
}

// repeated string topics = 4;
int SearchRequest::topics_size() const {
  return topics_.size();
}
void SearchRequest::clear_topics() {
  topics_.Clear();
}
const ::std::string& SearchRequest::topics(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.topics)
  return topics_.Get(index);
}
::std::string* SearchRequest::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.topics)
  return topics_.Mutable(index);
}
void SearchRequest::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.topics)
  topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchRequest::set_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchRequest::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.topics)
}
void SearchRequest::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.topics)
}
::std::string* SearchRequest::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.data.SearchRequest.topics)
  return topics_.Add();
}
void SearchRequest::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.topics)
}
#if LANG_CXX11
void SearchRequest::add_topics(::std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.topics)
}
#endif
void SearchRequest::add_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.data.SearchRequest.topics)
}
void SearchRequest::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.data.SearchRequest.topics)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::topics() const {
  // @@protoc_insertion_point(field_list:jmc_auto.data.SearchRequest.topics)
  return topics_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.data.SearchRequest.topics)
  return &topics_;
}

// repeated string fields = 5;
int SearchRequest::fields_size() const {
  return fields_.size();
}
void SearchRequest::clear_fields() {
  fields_.Clear();
}
const ::std::string& SearchRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.fields)
  return fields_.Get(index);
}
::std::string* SearchRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.fields)
  return fields_.Mutable(index);
}
void SearchRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchRequest::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.fields)
}
void SearchRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.fields)
}
::std::string* SearchRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.data.SearchRequest.fields)
  return fields_.Add();
}
void SearchRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.fields)
}
#if LANG_CXX11
void SearchRequest::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.fields)
}
#endif
void SearchRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.data.SearchRequest.fields)
}
void SearchRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.data.SearchRequest.fields)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::fields() const {
  // @@protoc_insertion_point(field_list:jmc_auto.data.SearchRequest.fields)
  return fields_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.data.SearchRequest.fields)
  return &fields_;
}

// optional int32 count = 6 [default = 20];
bool SearchRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SearchRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
void SearchRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void SearchRequest::clear_count() {
  count_ = 20;
  clear_has_count();
}
::google::protobuf::int32 SearchRequest::count() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.count)
  return count_;
}
void SearchRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.count)
}

// optional int32 offset = 7;
bool SearchRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SearchRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void SearchRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void SearchRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
::google::protobuf::int32 SearchRequest::offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.offset)
  return offset_;
}
void SearchRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResponse::kTasksFieldNumber;
const int SearchResponse::kTotalCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResponse::SearchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.data.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_count_ = from.total_count_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.data.SearchResponse)
}

void SearchResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0;
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:jmc_auto.data.SearchResponse)
  SharedDtor();
}

void SearchResponse::SharedDtor() {
}

void SearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResponse::descriptor() {
  protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchResponse& SearchResponse::default_instance() {
  protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchResponse* SearchResponse::New(::google::protobuf::Arena* arena) const {
  SearchResponse* n = new SearchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.data.SearchResponse)
  tasks_.Clear();
  total_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.data.SearchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.data.Task tasks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.data.SearchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.data.SearchResponse)
  return false;
#undef DO_
}

void SearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.data.SearchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.data.Task tasks = 1;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 total_count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.data.SearchResponse)
}

::google::protobuf::uint8* SearchResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.data.SearchResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.data.Task tasks = 1;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tasks(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 total_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.data.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.data.SearchResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.data.Task tasks = 1;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  // optional int32 total_count = 2;
  if (has_total_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.data.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.data.SearchResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.data.SearchResponse)
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.data.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_total_count()) {
    set_total_count(from.total_count());
  }
}

void SearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.data.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.data.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::Swap(SearchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResponse::InternalSwap(SearchResponse* other) {
  tasks_.InternalSwap(&other->tasks_);
  std::swap(total_count_, other->total_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResponse::GetMetadata() const {
  protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResponse

// repeated .jmc_auto.data.Task tasks = 1;
int SearchResponse::tasks_size() const {
  return tasks_.size();
}
void SearchResponse::clear_tasks() {
  tasks_.Clear();
}
const ::jmc_auto::data::Task& SearchResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchResponse.tasks)
  return tasks_.Get(index);
}
::jmc_auto::data::Task* SearchResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchResponse.tasks)
  return tasks_.Mutable(index);
}
::jmc_auto::data::Task* SearchResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchResponse.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task >*
SearchResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.data.SearchResponse.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task >&
SearchResponse::tasks() const {
  // @@protoc_insertion_point(field_list:jmc_auto.data.SearchResponse.tasks)
  return tasks_;
}

// optional int32 total_count = 2;
bool SearchResponse::has_total_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchResponse::set_has_total_count() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchResponse::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchResponse::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
::google::protobuf::int32 SearchResponse::total_count() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchResponse.total_count)
  return total_count_;
}
void SearchResponse::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchResponse.total_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
