// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/warehouse_query.proto

#ifndef PROTOBUF_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto__INCLUDED
#define PROTOBUF_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/data/proto/task.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace data {
class Disengagement;
class DisengagementDefaultTypeInternal;
extern DisengagementDefaultTypeInternal _Disengagement_default_instance_;
class MapPoint;
class MapPointDefaultTypeInternal;
extern MapPointDefaultTypeInternal _MapPoint_default_instance_;
class Rosbag;
class RosbagDefaultTypeInternal;
extern RosbagDefaultTypeInternal _Rosbag_default_instance_;
class Rosbag_Topic;
class Rosbag_TopicDefaultTypeInternal;
extern Rosbag_TopicDefaultTypeInternal _Rosbag_Topic_default_instance_;
class Rosbag_TopicsEntry;
class Rosbag_TopicsEntryDefaultTypeInternal;
extern Rosbag_TopicsEntryDefaultTypeInternal _Rosbag_TopicsEntry_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class Task_MileageEntry;
class Task_MileageEntryDefaultTypeInternal;
extern Task_MileageEntryDefaultTypeInternal _Task_MileageEntry_default_instance_;
}  // namespace data
}  // namespace jmc_auto

namespace jmc_auto {
namespace data {

namespace protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto

// ===================================================================

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.data.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SearchRequest* other);

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topics = 4;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 4;
  const ::std::string& topics(int index) const;
  ::std::string* mutable_topics(int index);
  void set_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_topics(int index, ::std::string&& value);
  #endif
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  ::std::string* add_topics();
  void add_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_topics(::std::string&& value);
  #endif
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // repeated string fields = 5;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 5;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // optional string vehicle_name = 1;
  bool has_vehicle_name() const;
  void clear_vehicle_name();
  static const int kVehicleNameFieldNumber = 1;
  const ::std::string& vehicle_name() const;
  void set_vehicle_name(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicle_name(::std::string&& value);
  #endif
  void set_vehicle_name(const char* value);
  void set_vehicle_name(const char* value, size_t size);
  ::std::string* mutable_vehicle_name();
  ::std::string* release_vehicle_name();
  void set_allocated_vehicle_name(::std::string* vehicle_name);

  // optional string map_name = 2;
  bool has_map_name() const;
  void clear_map_name();
  static const int kMapNameFieldNumber = 2;
  const ::std::string& map_name() const;
  void set_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_map_name(::std::string&& value);
  #endif
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  ::std::string* mutable_map_name();
  ::std::string* release_map_name();
  void set_allocated_map_name(::std::string* map_name);

  // optional .jmc_auto.data.Task.LoopType loop_type = 3;
  bool has_loop_type() const;
  void clear_loop_type();
  static const int kLoopTypeFieldNumber = 3;
  ::jmc_auto::data::Task_LoopType loop_type() const;
  void set_loop_type(::jmc_auto::data::Task_LoopType value);

  // optional int32 offset = 7;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 7;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // optional int32 count = 6 [default = 20];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.data.SearchRequest)
 private:
  void set_has_vehicle_name();
  void clear_has_vehicle_name();
  void set_has_map_name();
  void clear_has_map_name();
  void set_has_loop_type();
  void clear_has_loop_type();
  void set_has_count();
  void clear_has_count();
  void set_has_offset();
  void clear_has_offset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_name_;
  ::google::protobuf::internal::ArenaStringPtr map_name_;
  int loop_type_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.data.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SearchResponse* other);

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.data.Task tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  const ::jmc_auto::data::Task& tasks(int index) const;
  ::jmc_auto::data::Task* mutable_tasks(int index);
  ::jmc_auto::data::Task* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task >&
      tasks() const;

  // optional int32 total_count = 2;
  bool has_total_count() const;
  void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  ::google::protobuf::int32 total_count() const;
  void set_total_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.data.SearchResponse)
 private:
  void set_has_total_count();
  void clear_has_total_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task > tasks_;
  ::google::protobuf::int32 total_count_;
  friend struct protobuf_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchRequest

// optional string vehicle_name = 1;
inline bool SearchRequest::has_vehicle_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchRequest::set_has_vehicle_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchRequest::clear_has_vehicle_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchRequest::clear_vehicle_name() {
  vehicle_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_name();
}
inline const ::std::string& SearchRequest::vehicle_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.vehicle_name)
  return vehicle_name_.GetNoArena();
}
inline void SearchRequest::set_vehicle_name(const ::std::string& value) {
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.vehicle_name)
}
#if LANG_CXX11
inline void SearchRequest::set_vehicle_name(::std::string&& value) {
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.data.SearchRequest.vehicle_name)
}
#endif
inline void SearchRequest::set_vehicle_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.vehicle_name)
}
inline void SearchRequest::set_vehicle_name(const char* value, size_t size) {
  set_has_vehicle_name();
  vehicle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.vehicle_name)
}
inline ::std::string* SearchRequest::mutable_vehicle_name() {
  set_has_vehicle_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.vehicle_name)
  return vehicle_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_vehicle_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.data.SearchRequest.vehicle_name)
  clear_has_vehicle_name();
  return vehicle_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_vehicle_name(::std::string* vehicle_name) {
  if (vehicle_name != NULL) {
    set_has_vehicle_name();
  } else {
    clear_has_vehicle_name();
  }
  vehicle_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.data.SearchRequest.vehicle_name)
}

// optional string map_name = 2;
inline bool SearchRequest::has_map_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchRequest::set_has_map_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchRequest::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchRequest::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
inline const ::std::string& SearchRequest::map_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.map_name)
  return map_name_.GetNoArena();
}
inline void SearchRequest::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.map_name)
}
#if LANG_CXX11
inline void SearchRequest::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.data.SearchRequest.map_name)
}
#endif
inline void SearchRequest::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.map_name)
}
inline void SearchRequest::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.map_name)
}
inline ::std::string* SearchRequest::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_map_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.data.SearchRequest.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.data.SearchRequest.map_name)
}

// optional .jmc_auto.data.Task.LoopType loop_type = 3;
inline bool SearchRequest::has_loop_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchRequest::set_has_loop_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchRequest::clear_has_loop_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchRequest::clear_loop_type() {
  loop_type_ = 0;
  clear_has_loop_type();
}
inline ::jmc_auto::data::Task_LoopType SearchRequest::loop_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.loop_type)
  return static_cast< ::jmc_auto::data::Task_LoopType >(loop_type_);
}
inline void SearchRequest::set_loop_type(::jmc_auto::data::Task_LoopType value) {
  assert(::jmc_auto::data::Task_LoopType_IsValid(value));
  set_has_loop_type();
  loop_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.loop_type)
}

// repeated string topics = 4;
inline int SearchRequest::topics_size() const {
  return topics_.size();
}
inline void SearchRequest::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& SearchRequest::topics(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.topics)
  return topics_.Get(index);
}
inline ::std::string* SearchRequest::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.topics)
  return topics_.Mutable(index);
}
inline void SearchRequest::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.topics)
  topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchRequest::set_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchRequest::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.topics)
}
inline void SearchRequest::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.topics)
}
inline ::std::string* SearchRequest::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.data.SearchRequest.topics)
  return topics_.Add();
}
inline void SearchRequest::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.topics)
}
#if LANG_CXX11
inline void SearchRequest::add_topics(::std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.topics)
}
#endif
inline void SearchRequest::add_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.data.SearchRequest.topics)
}
inline void SearchRequest::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.data.SearchRequest.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::topics() const {
  // @@protoc_insertion_point(field_list:jmc_auto.data.SearchRequest.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.data.SearchRequest.topics)
  return &topics_;
}

// repeated string fields = 5;
inline int SearchRequest::fields_size() const {
  return fields_.size();
}
inline void SearchRequest::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& SearchRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.fields)
  return fields_.Get(index);
}
inline ::std::string* SearchRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchRequest.fields)
  return fields_.Mutable(index);
}
inline void SearchRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SearchRequest::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SearchRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.data.SearchRequest.fields)
}
inline void SearchRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.data.SearchRequest.fields)
}
inline ::std::string* SearchRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.data.SearchRequest.fields)
  return fields_.Add();
}
inline void SearchRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.fields)
}
#if LANG_CXX11
inline void SearchRequest::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchRequest.fields)
}
#endif
inline void SearchRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.data.SearchRequest.fields)
}
inline void SearchRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.data.SearchRequest.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::fields() const {
  // @@protoc_insertion_point(field_list:jmc_auto.data.SearchRequest.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.data.SearchRequest.fields)
  return &fields_;
}

// optional int32 count = 6 [default = 20];
inline bool SearchRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchRequest::clear_count() {
  count_ = 20;
  clear_has_count();
}
inline ::google::protobuf::int32 SearchRequest::count() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.count)
  return count_;
}
inline void SearchRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.count)
}

// optional int32 offset = 7;
inline bool SearchRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 SearchRequest::offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchRequest.offset)
  return offset_;
}
inline void SearchRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchRequest.offset)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .jmc_auto.data.Task tasks = 1;
inline int SearchResponse::tasks_size() const {
  return tasks_.size();
}
inline void SearchResponse::clear_tasks() {
  tasks_.Clear();
}
inline const ::jmc_auto::data::Task& SearchResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchResponse.tasks)
  return tasks_.Get(index);
}
inline ::jmc_auto::data::Task* SearchResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.data.SearchResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::jmc_auto::data::Task* SearchResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:jmc_auto.data.SearchResponse.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task >*
SearchResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.data.SearchResponse.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::data::Task >&
SearchResponse::tasks() const {
  // @@protoc_insertion_point(field_list:jmc_auto.data.SearchResponse.tasks)
  return tasks_;
}

// optional int32 total_count = 2;
inline bool SearchResponse::has_total_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchResponse::set_has_total_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchResponse::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchResponse::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 SearchResponse::total_count() const {
  // @@protoc_insertion_point(field_get:jmc_auto.data.SearchResponse.total_count)
  return total_count_;
}
inline void SearchResponse::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.data.SearchResponse.total_count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace data
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto__INCLUDED
