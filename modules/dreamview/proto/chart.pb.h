// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/chart.proto

#ifndef PROTOBUF_modules_2fdreamview_2fproto_2fchart_2eproto__INCLUDED
#define PROTOBUF_modules_2fdreamview_2fproto_2fchart_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace common {
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
namespace dreamview {
class Car;
class CarDefaultTypeInternal;
extern CarDefaultTypeInternal _Car_default_instance_;
class Chart;
class ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Line_PropertiesEntry;
class Line_PropertiesEntryDefaultTypeInternal;
extern Line_PropertiesEntryDefaultTypeInternal _Line_PropertiesEntry_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class Options_Axis;
class Options_AxisDefaultTypeInternal;
extern Options_AxisDefaultTypeInternal _Options_Axis_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Polygon_PropertiesEntry;
class Polygon_PropertiesEntryDefaultTypeInternal;
extern Polygon_PropertiesEntryDefaultTypeInternal _Polygon_PropertiesEntry_default_instance_;
}  // namespace dreamview
}  // namespace jmc_auto

namespace jmc_auto {
namespace dreamview {

namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto

// ===================================================================

class Options_Axis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.Options.Axis) */ {
 public:
  Options_Axis();
  virtual ~Options_Axis();

  Options_Axis(const Options_Axis& from);

  inline Options_Axis& operator=(const Options_Axis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Options_Axis& default_instance();

  static inline const Options_Axis* internal_default_instance() {
    return reinterpret_cast<const Options_Axis*>(
               &_Options_Axis_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Options_Axis* other);

  // implements Message ----------------------------------------------

  inline Options_Axis* New() const PROTOBUF_FINAL { return New(NULL); }

  Options_Axis* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Options_Axis& from);
  void MergeFrom(const Options_Axis& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Options_Axis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label_string = 3;
  bool has_label_string() const;
  void clear_label_string();
  static const int kLabelStringFieldNumber = 3;
  const ::std::string& label_string() const;
  void set_label_string(const ::std::string& value);
  #if LANG_CXX11
  void set_label_string(::std::string&& value);
  #endif
  void set_label_string(const char* value);
  void set_label_string(const char* value, size_t size);
  ::std::string* mutable_label_string();
  ::std::string* release_label_string();
  void set_allocated_label_string(::std::string* label_string);

  // optional double min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  double min() const;
  void set_min(double value);

  // optional double max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // optional double window_size = 4;
  bool has_window_size() const;
  void clear_window_size();
  static const int kWindowSizeFieldNumber = 4;
  double window_size() const;
  void set_window_size(double value);

  // optional double step_size = 5;
  bool has_step_size() const;
  void clear_step_size();
  static const int kStepSizeFieldNumber = 5;
  double step_size() const;
  void set_step_size(double value);

  // optional double mid_value = 6;
  bool has_mid_value() const;
  void clear_mid_value();
  static const int kMidValueFieldNumber = 6;
  double mid_value() const;
  void set_mid_value(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.Options.Axis)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_label_string();
  void clear_has_label_string();
  void set_has_window_size();
  void clear_has_window_size();
  void set_has_step_size();
  void clear_has_step_size();
  void set_has_mid_value();
  void clear_has_mid_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_string_;
  double min_;
  double max_;
  double window_size_;
  double step_size_;
  double mid_value_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Options : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.Options) */ {
 public:
  Options();
  virtual ~Options();

  Options(const Options& from);

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Options& default_instance();

  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Options* other);

  // implements Message ----------------------------------------------

  inline Options* New() const PROTOBUF_FINAL { return New(NULL); }

  Options* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Options& from);
  void MergeFrom(const Options& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Options* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Options_Axis Axis;

  // accessors -------------------------------------------------------

  // optional .jmc_auto.dreamview.Options.Axis x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  const ::jmc_auto::dreamview::Options_Axis& x() const;
  ::jmc_auto::dreamview::Options_Axis* mutable_x();
  ::jmc_auto::dreamview::Options_Axis* release_x();
  void set_allocated_x(::jmc_auto::dreamview::Options_Axis* x);

  // optional .jmc_auto.dreamview.Options.Axis y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  const ::jmc_auto::dreamview::Options_Axis& y() const;
  ::jmc_auto::dreamview::Options_Axis* mutable_y();
  ::jmc_auto::dreamview::Options_Axis* release_y();
  void set_allocated_y(::jmc_auto::dreamview::Options_Axis* y);

  // optional double aspect_ratio = 4;
  bool has_aspect_ratio() const;
  void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 4;
  double aspect_ratio() const;
  void set_aspect_ratio(double value);

  // optional bool sync_xy_window_size = 5 [default = false];
  bool has_sync_xy_window_size() const;
  void clear_sync_xy_window_size();
  static const int kSyncXyWindowSizeFieldNumber = 5;
  bool sync_xy_window_size() const;
  void set_sync_xy_window_size(bool value);

  // optional bool legend_display = 1 [default = true];
  bool has_legend_display() const;
  void clear_legend_display();
  static const int kLegendDisplayFieldNumber = 1;
  bool legend_display() const;
  void set_legend_display(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.Options)
 private:
  void set_has_legend_display();
  void clear_has_legend_display();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_aspect_ratio();
  void clear_has_aspect_ratio();
  void set_has_sync_xy_window_size();
  void clear_has_sync_xy_window_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::dreamview::Options_Axis* x_;
  ::jmc_auto::dreamview::Options_Axis* y_;
  double aspect_ratio_;
  bool sync_xy_window_size_;
  bool legend_display_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();

  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Line* other);

  // implements Message ----------------------------------------------

  inline Line* New() const PROTOBUF_FINAL { return New(NULL); }

  Line* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Point2D point = 3;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 3;
  const ::jmc_auto::common::Point2D& point(int index) const;
  ::jmc_auto::common::Point2D* mutable_point(int index);
  ::jmc_auto::common::Point2D* add_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >&
      point() const;

  // map<string, string> properties = 4;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional bool hide_label_in_legend = 2 [default = false];
  bool has_hide_label_in_legend() const;
  void clear_hide_label_in_legend();
  static const int kHideLabelInLegendFieldNumber = 2;
  bool hide_label_in_legend() const;
  void set_hide_label_in_legend(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.Line)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_hide_label_in_legend();
  void clear_has_hide_label_in_legend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D > point_;
  public:
  class Line_PropertiesEntry : public ::google::protobuf::internal::MapEntry<Line_PropertiesEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Line_PropertiesEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Line_PropertiesEntry();
    Line_PropertiesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Line_PropertiesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Line_PropertiesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Line_PropertiesEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  private:
  ::google::protobuf::internal::ArenaStringPtr label_;
  bool hide_label_in_legend_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  inline Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .jmc_auto.common.Point2D point = 3;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 3;
  const ::jmc_auto::common::Point2D& point(int index) const;
  ::jmc_auto::common::Point2D* mutable_point(int index);
  ::jmc_auto::common::Point2D* add_point();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >&
      point() const;

  // map<string, string> properties = 4;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional bool hide_label_in_legend = 2 [default = false];
  bool has_hide_label_in_legend() const;
  void clear_hide_label_in_legend();
  static const int kHideLabelInLegendFieldNumber = 2;
  bool hide_label_in_legend() const;
  void set_hide_label_in_legend(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.Polygon)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_hide_label_in_legend();
  void clear_has_hide_label_in_legend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D > point_;
  public:
  class Polygon_PropertiesEntry : public ::google::protobuf::internal::MapEntry<Polygon_PropertiesEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Polygon_PropertiesEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    Polygon_PropertiesEntry();
    Polygon_PropertiesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Polygon_PropertiesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Polygon_PropertiesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Polygon_PropertiesEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  private:
  ::google::protobuf::internal::ArenaStringPtr label_;
  bool hide_label_in_legend_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Car : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.Car) */ {
 public:
  Car();
  virtual ~Car();

  Car(const Car& from);

  inline Car& operator=(const Car& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Car& default_instance();

  static inline const Car* internal_default_instance() {
    return reinterpret_cast<const Car*>(
               &_Car_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Car* other);

  // implements Message ----------------------------------------------

  inline Car* New() const PROTOBUF_FINAL { return New(NULL); }

  Car* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Car& from);
  void MergeFrom(const Car& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Car* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional string color = 6;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 6;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional double x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // optional double y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // optional double heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // optional bool hide_label_in_legend = 2 [default = false];
  bool has_hide_label_in_legend() const;
  void clear_hide_label_in_legend();
  static const int kHideLabelInLegendFieldNumber = 2;
  bool hide_label_in_legend() const;
  void set_hide_label_in_legend(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.Car)
 private:
  void set_has_label();
  void clear_has_label();
  void set_has_hide_label_in_legend();
  void clear_has_hide_label_in_legend();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_heading();
  void clear_has_heading();
  void set_has_color();
  void clear_has_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  double x_;
  double y_;
  double heading_;
  bool hide_label_in_legend_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.Chart) */ {
 public:
  Chart();
  virtual ~Chart();

  Chart(const Chart& from);

  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart& default_instance();

  static inline const Chart* internal_default_instance() {
    return reinterpret_cast<const Chart*>(
               &_Chart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Chart* other);

  // implements Message ----------------------------------------------

  inline Chart* New() const PROTOBUF_FINAL { return New(NULL); }

  Chart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Chart& from);
  void MergeFrom(const Chart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Chart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.dreamview.Line line = 3;
  int line_size() const;
  void clear_line();
  static const int kLineFieldNumber = 3;
  const ::jmc_auto::dreamview::Line& line(int index) const;
  ::jmc_auto::dreamview::Line* mutable_line(int index);
  ::jmc_auto::dreamview::Line* add_line();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line >*
      mutable_line();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line >&
      line() const;

  // repeated .jmc_auto.dreamview.Polygon polygon = 4;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 4;
  const ::jmc_auto::dreamview::Polygon& polygon(int index) const;
  ::jmc_auto::dreamview::Polygon* mutable_polygon(int index);
  ::jmc_auto::dreamview::Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon >&
      polygon() const;

  // repeated .jmc_auto.dreamview.Car car = 5;
  int car_size() const;
  void clear_car();
  static const int kCarFieldNumber = 5;
  const ::jmc_auto::dreamview::Car& car(int index) const;
  ::jmc_auto::dreamview::Car* mutable_car(int index);
  ::jmc_auto::dreamview::Car* add_car();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car >*
      mutable_car();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car >&
      car() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional .jmc_auto.dreamview.Options options = 2;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::jmc_auto::dreamview::Options& options() const;
  ::jmc_auto::dreamview::Options* mutable_options();
  ::jmc_auto::dreamview::Options* release_options();
  void set_allocated_options(::jmc_auto::dreamview::Options* options);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.Chart)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_options();
  void clear_has_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line > line_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon > polygon_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car > car_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::jmc_auto::dreamview::Options* options_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Options_Axis

// optional double min = 1;
inline bool Options_Axis::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Options_Axis::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Options_Axis::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Options_Axis::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double Options_Axis::min() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.min)
  return min_;
}
inline void Options_Axis::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.min)
}

// optional double max = 2;
inline bool Options_Axis::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Options_Axis::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Options_Axis::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Options_Axis::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double Options_Axis::max() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.max)
  return max_;
}
inline void Options_Axis::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.max)
}

// optional string label_string = 3;
inline bool Options_Axis::has_label_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Options_Axis::set_has_label_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Options_Axis::clear_has_label_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Options_Axis::clear_label_string() {
  label_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_string();
}
inline const ::std::string& Options_Axis::label_string() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.label_string)
  return label_string_.GetNoArena();
}
inline void Options_Axis::set_label_string(const ::std::string& value) {
  set_has_label_string();
  label_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.label_string)
}
#if LANG_CXX11
inline void Options_Axis::set_label_string(::std::string&& value) {
  set_has_label_string();
  label_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Options.Axis.label_string)
}
#endif
inline void Options_Axis::set_label_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_string();
  label_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Options.Axis.label_string)
}
inline void Options_Axis::set_label_string(const char* value, size_t size) {
  set_has_label_string();
  label_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Options.Axis.label_string)
}
inline ::std::string* Options_Axis::mutable_label_string() {
  set_has_label_string();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Options.Axis.label_string)
  return label_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Options_Axis::release_label_string() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Options.Axis.label_string)
  clear_has_label_string();
  return label_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Options_Axis::set_allocated_label_string(::std::string* label_string) {
  if (label_string != NULL) {
    set_has_label_string();
  } else {
    clear_has_label_string();
  }
  label_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_string);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Options.Axis.label_string)
}

// optional double window_size = 4;
inline bool Options_Axis::has_window_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Options_Axis::set_has_window_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Options_Axis::clear_has_window_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Options_Axis::clear_window_size() {
  window_size_ = 0;
  clear_has_window_size();
}
inline double Options_Axis::window_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.window_size)
  return window_size_;
}
inline void Options_Axis::set_window_size(double value) {
  set_has_window_size();
  window_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.window_size)
}

// optional double step_size = 5;
inline bool Options_Axis::has_step_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Options_Axis::set_has_step_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Options_Axis::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Options_Axis::clear_step_size() {
  step_size_ = 0;
  clear_has_step_size();
}
inline double Options_Axis::step_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.step_size)
  return step_size_;
}
inline void Options_Axis::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.step_size)
}

// optional double mid_value = 6;
inline bool Options_Axis::has_mid_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Options_Axis::set_has_mid_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Options_Axis::clear_has_mid_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Options_Axis::clear_mid_value() {
  mid_value_ = 0;
  clear_has_mid_value();
}
inline double Options_Axis::mid_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.mid_value)
  return mid_value_;
}
inline void Options_Axis::set_mid_value(double value) {
  set_has_mid_value();
  mid_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.mid_value)
}

// -------------------------------------------------------------------

// Options

// optional bool legend_display = 1 [default = true];
inline bool Options::has_legend_display() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Options::set_has_legend_display() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Options::clear_has_legend_display() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Options::clear_legend_display() {
  legend_display_ = true;
  clear_has_legend_display();
}
inline bool Options::legend_display() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.legend_display)
  return legend_display_;
}
inline void Options::set_legend_display(bool value) {
  set_has_legend_display();
  legend_display_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.legend_display)
}

// optional .jmc_auto.dreamview.Options.Axis x = 2;
inline bool Options::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Options::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Options::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Options::clear_x() {
  if (x_ != NULL) x_->::jmc_auto::dreamview::Options_Axis::Clear();
  clear_has_x();
}
inline const ::jmc_auto::dreamview::Options_Axis& Options::x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.x)
  return x_ != NULL ? *x_
                         : *::jmc_auto::dreamview::Options_Axis::internal_default_instance();
}
inline ::jmc_auto::dreamview::Options_Axis* Options::mutable_x() {
  set_has_x();
  if (x_ == NULL) {
    x_ = new ::jmc_auto::dreamview::Options_Axis;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Options.x)
  return x_;
}
inline ::jmc_auto::dreamview::Options_Axis* Options::release_x() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Options.x)
  clear_has_x();
  ::jmc_auto::dreamview::Options_Axis* temp = x_;
  x_ = NULL;
  return temp;
}
inline void Options::set_allocated_x(::jmc_auto::dreamview::Options_Axis* x) {
  delete x_;
  x_ = x;
  if (x) {
    set_has_x();
  } else {
    clear_has_x();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Options.x)
}

// optional .jmc_auto.dreamview.Options.Axis y = 3;
inline bool Options::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Options::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Options::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Options::clear_y() {
  if (y_ != NULL) y_->::jmc_auto::dreamview::Options_Axis::Clear();
  clear_has_y();
}
inline const ::jmc_auto::dreamview::Options_Axis& Options::y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.y)
  return y_ != NULL ? *y_
                         : *::jmc_auto::dreamview::Options_Axis::internal_default_instance();
}
inline ::jmc_auto::dreamview::Options_Axis* Options::mutable_y() {
  set_has_y();
  if (y_ == NULL) {
    y_ = new ::jmc_auto::dreamview::Options_Axis;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Options.y)
  return y_;
}
inline ::jmc_auto::dreamview::Options_Axis* Options::release_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Options.y)
  clear_has_y();
  ::jmc_auto::dreamview::Options_Axis* temp = y_;
  y_ = NULL;
  return temp;
}
inline void Options::set_allocated_y(::jmc_auto::dreamview::Options_Axis* y) {
  delete y_;
  y_ = y;
  if (y) {
    set_has_y();
  } else {
    clear_has_y();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Options.y)
}

// optional double aspect_ratio = 4;
inline bool Options::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Options::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Options::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Options::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  clear_has_aspect_ratio();
}
inline double Options::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.aspect_ratio)
  return aspect_ratio_;
}
inline void Options::set_aspect_ratio(double value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.aspect_ratio)
}

// optional bool sync_xy_window_size = 5 [default = false];
inline bool Options::has_sync_xy_window_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Options::set_has_sync_xy_window_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Options::clear_has_sync_xy_window_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Options::clear_sync_xy_window_size() {
  sync_xy_window_size_ = false;
  clear_has_sync_xy_window_size();
}
inline bool Options::sync_xy_window_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.sync_xy_window_size)
  return sync_xy_window_size_;
}
inline void Options::set_sync_xy_window_size(bool value) {
  set_has_sync_xy_window_size();
  sync_xy_window_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.sync_xy_window_size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Line

// optional string label = 1;
inline bool Line::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Line::label() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Line.label)
  return label_.GetNoArena();
}
inline void Line::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Line.label)
}
#if LANG_CXX11
inline void Line::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Line.label)
}
#endif
inline void Line::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Line.label)
}
inline void Line::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Line.label)
}
inline ::std::string* Line::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Line.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Line::release_label() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Line.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Line.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
inline bool Line::has_hide_label_in_legend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_hide_label_in_legend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_hide_label_in_legend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  clear_has_hide_label_in_legend();
}
inline bool Line::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Line.hide_label_in_legend)
  return hide_label_in_legend_;
}
inline void Line::set_hide_label_in_legend(bool value) {
  set_has_hide_label_in_legend();
  hide_label_in_legend_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Line.hide_label_in_legend)
}

// repeated .jmc_auto.common.Point2D point = 3;
inline int Line::point_size() const {
  return point_.size();
}
inline void Line::clear_point() {
  point_.Clear();
}
inline const ::jmc_auto::common::Point2D& Line::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Line.point)
  return point_.Get(index);
}
inline ::jmc_auto::common::Point2D* Line::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Line.point)
  return point_.Mutable(index);
}
inline ::jmc_auto::common::Point2D* Line::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Line.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >*
Line::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Line.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >&
Line::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Line.point)
  return point_;
}

// map<string, string> properties = 4;
inline int Line::properties_size() const {
  return properties_.size();
}
inline void Line::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Line::properties() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.Line.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Line::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.Line.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Polygon

// optional string label = 1;
inline bool Polygon::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Polygon::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Polygon::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Polygon::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Polygon::label() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Polygon.label)
  return label_.GetNoArena();
}
inline void Polygon::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Polygon.label)
}
#if LANG_CXX11
inline void Polygon::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Polygon.label)
}
#endif
inline void Polygon::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Polygon.label)
}
inline void Polygon::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Polygon.label)
}
inline ::std::string* Polygon::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Polygon.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polygon::release_label() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Polygon.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Polygon.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
inline bool Polygon::has_hide_label_in_legend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Polygon::set_has_hide_label_in_legend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Polygon::clear_has_hide_label_in_legend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Polygon::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  clear_has_hide_label_in_legend();
}
inline bool Polygon::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Polygon.hide_label_in_legend)
  return hide_label_in_legend_;
}
inline void Polygon::set_hide_label_in_legend(bool value) {
  set_has_hide_label_in_legend();
  hide_label_in_legend_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Polygon.hide_label_in_legend)
}

// repeated .jmc_auto.common.Point2D point = 3;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline const ::jmc_auto::common::Point2D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Polygon.point)
  return point_.Get(index);
}
inline ::jmc_auto::common::Point2D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Polygon.point)
  return point_.Mutable(index);
}
inline ::jmc_auto::common::Point2D* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Polygon.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Polygon.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Polygon.point)
  return point_;
}

// map<string, string> properties = 4;
inline int Polygon::properties_size() const {
  return properties_.size();
}
inline void Polygon::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Polygon::properties() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.Polygon.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Polygon::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.Polygon.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// Car

// optional string label = 1;
inline bool Car::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Car::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Car::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Car::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Car::label() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.label)
  return label_.GetNoArena();
}
inline void Car::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.label)
}
#if LANG_CXX11
inline void Car::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Car.label)
}
#endif
inline void Car::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Car.label)
}
inline void Car::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Car.label)
}
inline ::std::string* Car::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Car.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Car::release_label() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Car.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Car::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Car.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
inline bool Car::has_hide_label_in_legend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Car::set_has_hide_label_in_legend() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Car::clear_has_hide_label_in_legend() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Car::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  clear_has_hide_label_in_legend();
}
inline bool Car::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.hide_label_in_legend)
  return hide_label_in_legend_;
}
inline void Car::set_hide_label_in_legend(bool value) {
  set_has_hide_label_in_legend();
  hide_label_in_legend_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.hide_label_in_legend)
}

// optional double x = 3;
inline bool Car::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Car::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Car::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Car::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Car::x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.x)
  return x_;
}
inline void Car::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.x)
}

// optional double y = 4;
inline bool Car::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Car::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Car::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Car::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Car::y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.y)
  return y_;
}
inline void Car::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.y)
}

// optional double heading = 5;
inline bool Car::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Car::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Car::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Car::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double Car::heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.heading)
  return heading_;
}
inline void Car::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.heading)
}

// optional string color = 6;
inline bool Car::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Car::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Car::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Car::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& Car::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.color)
  return color_.GetNoArena();
}
inline void Car::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.color)
}
#if LANG_CXX11
inline void Car::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Car.color)
}
#endif
inline void Car::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Car.color)
}
inline void Car::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Car.color)
}
inline ::std::string* Car::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Car.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Car::release_color() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Car.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Car::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Car.color)
}

// -------------------------------------------------------------------

// Chart

// optional string title = 1;
inline bool Chart::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.title)
  return title_.GetNoArena();
}
inline void Chart::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Chart.title)
}
#if LANG_CXX11
inline void Chart::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Chart.title)
}
#endif
inline void Chart::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Chart.title)
}
inline void Chart::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Chart.title)
}
inline ::std::string* Chart::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Chart.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chart::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Chart.title)
}

// optional .jmc_auto.dreamview.Options options = 2;
inline bool Chart::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart::clear_options() {
  if (options_ != NULL) options_->::jmc_auto::dreamview::Options::Clear();
  clear_has_options();
}
inline const ::jmc_auto::dreamview::Options& Chart::options() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.options)
  return options_ != NULL ? *options_
                         : *::jmc_auto::dreamview::Options::internal_default_instance();
}
inline ::jmc_auto::dreamview::Options* Chart::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::jmc_auto::dreamview::Options;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.options)
  return options_;
}
inline ::jmc_auto::dreamview::Options* Chart::release_options() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Chart.options)
  clear_has_options();
  ::jmc_auto::dreamview::Options* temp = options_;
  options_ = NULL;
  return temp;
}
inline void Chart::set_allocated_options(::jmc_auto::dreamview::Options* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Chart.options)
}

// repeated .jmc_auto.dreamview.Line line = 3;
inline int Chart::line_size() const {
  return line_.size();
}
inline void Chart::clear_line() {
  line_.Clear();
}
inline const ::jmc_auto::dreamview::Line& Chart::line(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.line)
  return line_.Get(index);
}
inline ::jmc_auto::dreamview::Line* Chart::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.line)
  return line_.Mutable(index);
}
inline ::jmc_auto::dreamview::Line* Chart::add_line() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Chart.line)
  return line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line >*
Chart::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Chart.line)
  return &line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line >&
Chart::line() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Chart.line)
  return line_;
}

// repeated .jmc_auto.dreamview.Polygon polygon = 4;
inline int Chart::polygon_size() const {
  return polygon_.size();
}
inline void Chart::clear_polygon() {
  polygon_.Clear();
}
inline const ::jmc_auto::dreamview::Polygon& Chart::polygon(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.polygon)
  return polygon_.Get(index);
}
inline ::jmc_auto::dreamview::Polygon* Chart::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.polygon)
  return polygon_.Mutable(index);
}
inline ::jmc_auto::dreamview::Polygon* Chart::add_polygon() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Chart.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon >*
Chart::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Chart.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon >&
Chart::polygon() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Chart.polygon)
  return polygon_;
}

// repeated .jmc_auto.dreamview.Car car = 5;
inline int Chart::car_size() const {
  return car_.size();
}
inline void Chart::clear_car() {
  car_.Clear();
}
inline const ::jmc_auto::dreamview::Car& Chart::car(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.car)
  return car_.Get(index);
}
inline ::jmc_auto::dreamview::Car* Chart::mutable_car(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.car)
  return car_.Mutable(index);
}
inline ::jmc_auto::dreamview::Car* Chart::add_car() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Chart.car)
  return car_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car >*
Chart::mutable_car() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Chart.car)
  return &car_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car >&
Chart::car() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Chart.car)
  return car_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dreamview
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdreamview_2fproto_2fchart_2eproto__INCLUDED
