// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/voice_detection.proto

#ifndef PROTOBUF_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto__INCLUDED
#define PROTOBUF_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/dreamview/proto/hmi_config.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace dreamview {
class AudioCapturingConfig;
class AudioCapturingConfigDefaultTypeInternal;
extern AudioCapturingConfigDefaultTypeInternal _AudioCapturingConfig_default_instance_;
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Component_SupportedCommandsEntry;
class Component_SupportedCommandsEntryDefaultTypeInternal;
extern Component_SupportedCommandsEntryDefaultTypeInternal _Component_SupportedCommandsEntry_default_instance_;
class HMIConfig;
class HMIConfigDefaultTypeInternal;
extern HMIConfigDefaultTypeInternal _HMIConfig_default_instance_;
class HMIConfig_AvailableMapsEntry;
class HMIConfig_AvailableMapsEntryDefaultTypeInternal;
extern HMIConfig_AvailableMapsEntryDefaultTypeInternal _HMIConfig_AvailableMapsEntry_default_instance_;
class HMIConfig_AvailableVehiclesEntry;
class HMIConfig_AvailableVehiclesEntryDefaultTypeInternal;
extern HMIConfig_AvailableVehiclesEntryDefaultTypeInternal _HMIConfig_AvailableVehiclesEntry_default_instance_;
class HMIConfig_HardwareEntry;
class HMIConfig_HardwareEntryDefaultTypeInternal;
extern HMIConfig_HardwareEntryDefaultTypeInternal _HMIConfig_HardwareEntry_default_instance_;
class HMIConfig_ModesEntry;
class HMIConfig_ModesEntryDefaultTypeInternal;
extern HMIConfig_ModesEntryDefaultTypeInternal _HMIConfig_ModesEntry_default_instance_;
class HMIConfig_ModulesEntry;
class HMIConfig_ModulesEntryDefaultTypeInternal;
extern HMIConfig_ModulesEntryDefaultTypeInternal _HMIConfig_ModulesEntry_default_instance_;
class HMIConfig_ToolsEntry;
class HMIConfig_ToolsEntryDefaultTypeInternal;
extern HMIConfig_ToolsEntryDefaultTypeInternal _HMIConfig_ToolsEntry_default_instance_;
class Mode;
class ModeDefaultTypeInternal;
extern ModeDefaultTypeInternal _Mode_default_instance_;
class VehicleData;
class VehicleDataDefaultTypeInternal;
extern VehicleDataDefaultTypeInternal _VehicleData_default_instance_;
class VehicleData_DataFile;
class VehicleData_DataFileDefaultTypeInternal;
extern VehicleData_DataFileDefaultTypeInternal _VehicleData_DataFile_default_instance_;
class VoiceDetectionConf;
class VoiceDetectionConfDefaultTypeInternal;
extern VoiceDetectionConfDefaultTypeInternal _VoiceDetectionConf_default_instance_;
class VoiceDetectionConf_SnowboyModel;
class VoiceDetectionConf_SnowboyModelDefaultTypeInternal;
extern VoiceDetectionConf_SnowboyModelDefaultTypeInternal _VoiceDetectionConf_SnowboyModel_default_instance_;
class VoiceDetectionConf_SnowboyModel_Hotword;
class VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal;
extern VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal _VoiceDetectionConf_SnowboyModel_Hotword_default_instance_;
class VoiceDetectionRequest;
class VoiceDetectionRequestDefaultTypeInternal;
extern VoiceDetectionRequestDefaultTypeInternal _VoiceDetectionRequest_default_instance_;
class VoiceDetectionResponse;
class VoiceDetectionResponseDefaultTypeInternal;
extern VoiceDetectionResponseDefaultTypeInternal _VoiceDetectionResponse_default_instance_;
}  // namespace dreamview
}  // namespace jmc_auto

namespace jmc_auto {
namespace dreamview {

namespace protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto

// ===================================================================

class VoiceDetectionConf_SnowboyModel_Hotword : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword) */ {
 public:
  VoiceDetectionConf_SnowboyModel_Hotword();
  virtual ~VoiceDetectionConf_SnowboyModel_Hotword();

  VoiceDetectionConf_SnowboyModel_Hotword(const VoiceDetectionConf_SnowboyModel_Hotword& from);

  inline VoiceDetectionConf_SnowboyModel_Hotword& operator=(const VoiceDetectionConf_SnowboyModel_Hotword& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceDetectionConf_SnowboyModel_Hotword& default_instance();

  static inline const VoiceDetectionConf_SnowboyModel_Hotword* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionConf_SnowboyModel_Hotword*>(
               &_VoiceDetectionConf_SnowboyModel_Hotword_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VoiceDetectionConf_SnowboyModel_Hotword* other);

  // implements Message ----------------------------------------------

  inline VoiceDetectionConf_SnowboyModel_Hotword* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceDetectionConf_SnowboyModel_Hotword* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from);
  void MergeFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceDetectionConf_SnowboyModel_Hotword* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string word = 1;
  bool has_word() const;
  void clear_word();
  static const int kWordFieldNumber = 1;
  const ::std::string& word() const;
  void set_word(const ::std::string& value);
  #if LANG_CXX11
  void set_word(::std::string&& value);
  #endif
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  ::std::string* mutable_word();
  ::std::string* release_word();
  void set_allocated_word(::std::string* word);

  // optional string response_message = 3;
  bool has_response_message() const;
  void clear_response_message();
  static const int kResponseMessageFieldNumber = 3;
  const ::std::string& response_message() const;
  void set_response_message(const ::std::string& value);
  #if LANG_CXX11
  void set_response_message(::std::string&& value);
  #endif
  void set_response_message(const char* value);
  void set_response_message(const char* value, size_t size);
  ::std::string* mutable_response_message();
  ::std::string* release_response_message();
  void set_allocated_response_message(::std::string* response_message);

  // optional .jmc_auto.dreamview.HMIAction action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::jmc_auto::dreamview::HMIAction action() const;
  void set_action(::jmc_auto::dreamview::HMIAction value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
 private:
  void set_has_word();
  void clear_has_word();
  void set_has_action();
  void clear_has_action();
  void set_has_response_message();
  void clear_has_response_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr word_;
  ::google::protobuf::internal::ArenaStringPtr response_message_;
  int action_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoiceDetectionConf_SnowboyModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel) */ {
 public:
  VoiceDetectionConf_SnowboyModel();
  virtual ~VoiceDetectionConf_SnowboyModel();

  VoiceDetectionConf_SnowboyModel(const VoiceDetectionConf_SnowboyModel& from);

  inline VoiceDetectionConf_SnowboyModel& operator=(const VoiceDetectionConf_SnowboyModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceDetectionConf_SnowboyModel& default_instance();

  static inline const VoiceDetectionConf_SnowboyModel* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionConf_SnowboyModel*>(
               &_VoiceDetectionConf_SnowboyModel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VoiceDetectionConf_SnowboyModel* other);

  // implements Message ----------------------------------------------

  inline VoiceDetectionConf_SnowboyModel* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceDetectionConf_SnowboyModel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceDetectionConf_SnowboyModel& from);
  void MergeFrom(const VoiceDetectionConf_SnowboyModel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceDetectionConf_SnowboyModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VoiceDetectionConf_SnowboyModel_Hotword Hotword;

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  int hotwords_size() const;
  void clear_hotwords();
  static const int kHotwordsFieldNumber = 2;
  const ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& hotwords(int index) const;
  ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* mutable_hotwords(int index);
  ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* add_hotwords();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >*
      mutable_hotwords();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >&
      hotwords() const;

  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
 private:
  void set_has_path();
  void clear_has_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword > hotwords_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoiceDetectionConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.VoiceDetectionConf) */ {
 public:
  VoiceDetectionConf();
  virtual ~VoiceDetectionConf();

  VoiceDetectionConf(const VoiceDetectionConf& from);

  inline VoiceDetectionConf& operator=(const VoiceDetectionConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceDetectionConf& default_instance();

  static inline const VoiceDetectionConf* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionConf*>(
               &_VoiceDetectionConf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VoiceDetectionConf* other);

  // implements Message ----------------------------------------------

  inline VoiceDetectionConf* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceDetectionConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceDetectionConf& from);
  void MergeFrom(const VoiceDetectionConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceDetectionConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VoiceDetectionConf_SnowboyModel SnowboyModel;

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  int snowboy_models_size() const;
  void clear_snowboy_models();
  static const int kSnowboyModelsFieldNumber = 4;
  const ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel& snowboy_models(int index) const;
  ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel* mutable_snowboy_models(int index);
  ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel* add_snowboy_models();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel >*
      mutable_snowboy_models();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel >&
      snowboy_models() const;

  // optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
  bool has_snowboy_resource() const;
  void clear_snowboy_resource();
  static const int kSnowboyResourceFieldNumber = 1;
  const ::std::string& snowboy_resource() const;
  void set_snowboy_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_snowboy_resource(::std::string&& value);
  #endif
  void set_snowboy_resource(const char* value);
  void set_snowboy_resource(const char* value, size_t size);
  ::std::string* mutable_snowboy_resource();
  ::std::string* release_snowboy_resource();
  void set_allocated_snowboy_resource(::std::string* snowboy_resource);

  // optional float audio_gain = 2 [default = 1];
  bool has_audio_gain() const;
  void clear_audio_gain();
  static const int kAudioGainFieldNumber = 2;
  float audio_gain() const;
  void set_audio_gain(float value);

  // optional float sensitivity = 3 [default = 0.75];
  bool has_sensitivity() const;
  void clear_sensitivity();
  static const int kSensitivityFieldNumber = 3;
  float sensitivity() const;
  void set_sensitivity(float value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.VoiceDetectionConf)
 private:
  void set_has_snowboy_resource();
  void clear_has_snowboy_resource();
  void set_has_audio_gain();
  void clear_has_audio_gain();
  void set_has_sensitivity();
  void clear_has_sensitivity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel > snowboy_models_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_snowboy_resource_;
  ::google::protobuf::internal::ArenaStringPtr snowboy_resource_;
  float audio_gain_;
  float sensitivity_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoiceDetectionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.VoiceDetectionRequest) */ {
 public:
  VoiceDetectionRequest();
  virtual ~VoiceDetectionRequest();

  VoiceDetectionRequest(const VoiceDetectionRequest& from);

  inline VoiceDetectionRequest& operator=(const VoiceDetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceDetectionRequest& default_instance();

  static inline const VoiceDetectionRequest* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionRequest*>(
               &_VoiceDetectionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(VoiceDetectionRequest* other);

  // implements Message ----------------------------------------------

  inline VoiceDetectionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceDetectionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceDetectionRequest& from);
  void MergeFrom(const VoiceDetectionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceDetectionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes wav_stream = 2;
  bool has_wav_stream() const;
  void clear_wav_stream();
  static const int kWavStreamFieldNumber = 2;
  const ::std::string& wav_stream() const;
  void set_wav_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_wav_stream(::std::string&& value);
  #endif
  void set_wav_stream(const char* value);
  void set_wav_stream(const void* value, size_t size);
  ::std::string* mutable_wav_stream();
  ::std::string* release_wav_stream();
  void set_allocated_wav_stream(::std::string* wav_stream);

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.VoiceDetectionRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_wav_stream();
  void clear_has_wav_stream();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr wav_stream_;
  ::google::protobuf::uint64 id_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoiceDetectionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.dreamview.VoiceDetectionResponse) */ {
 public:
  VoiceDetectionResponse();
  virtual ~VoiceDetectionResponse();

  VoiceDetectionResponse(const VoiceDetectionResponse& from);

  inline VoiceDetectionResponse& operator=(const VoiceDetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoiceDetectionResponse& default_instance();

  static inline const VoiceDetectionResponse* internal_default_instance() {
    return reinterpret_cast<const VoiceDetectionResponse*>(
               &_VoiceDetectionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(VoiceDetectionResponse* other);

  // implements Message ----------------------------------------------

  inline VoiceDetectionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VoiceDetectionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoiceDetectionResponse& from);
  void MergeFrom(const VoiceDetectionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoiceDetectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .jmc_auto.dreamview.HMIAction action = 2;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::jmc_auto::dreamview::HMIAction action() const;
  void set_action(::jmc_auto::dreamview::HMIAction value);

  // @@protoc_insertion_point(class_scope:jmc_auto.dreamview.VoiceDetectionResponse)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_action();
  void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  int action_;
  friend struct protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceDetectionConf_SnowboyModel_Hotword

// optional string word = 1;
inline bool VoiceDetectionConf_SnowboyModel_Hotword::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_word();
}
inline const ::std::string& VoiceDetectionConf_SnowboyModel_Hotword::word() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  return word_.GetNoArena();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_word(const ::std::string& value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
#if LANG_CXX11
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_word(::std::string&& value) {
  set_has_word();
  word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
#endif
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_word(const char* value, size_t size) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
inline ::std::string* VoiceDetectionConf_SnowboyModel_Hotword::mutable_word() {
  set_has_word();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoiceDetectionConf_SnowboyModel_Hotword::release_word() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  clear_has_word();
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    set_has_word();
  } else {
    clear_has_word();
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}

// optional .jmc_auto.dreamview.HMIAction action = 2;
inline bool VoiceDetectionConf_SnowboyModel_Hotword::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::jmc_auto::dreamview::HMIAction VoiceDetectionConf_SnowboyModel_Hotword::action() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.action)
  return static_cast< ::jmc_auto::dreamview::HMIAction >(action_);
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_action(::jmc_auto::dreamview::HMIAction value) {
  assert(::jmc_auto::dreamview::HMIAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.action)
}

// optional string response_message = 3;
inline bool VoiceDetectionConf_SnowboyModel_Hotword::has_response_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_has_response_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_has_response_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::clear_response_message() {
  response_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response_message();
}
inline const ::std::string& VoiceDetectionConf_SnowboyModel_Hotword::response_message() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  return response_message_.GetNoArena();
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(const ::std::string& value) {
  set_has_response_message();
  response_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
#if LANG_CXX11
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(::std::string&& value) {
  set_has_response_message();
  response_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
#endif
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response_message();
  response_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(const char* value, size_t size) {
  set_has_response_message();
  response_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
inline ::std::string* VoiceDetectionConf_SnowboyModel_Hotword::mutable_response_message() {
  set_has_response_message();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  return response_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoiceDetectionConf_SnowboyModel_Hotword::release_response_message() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  clear_has_response_message();
  return response_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceDetectionConf_SnowboyModel_Hotword::set_allocated_response_message(::std::string* response_message) {
  if (response_message != NULL) {
    set_has_response_message();
  } else {
    clear_has_response_message();
  }
  response_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_message);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}

// -------------------------------------------------------------------

// VoiceDetectionConf_SnowboyModel

// optional string path = 1;
inline bool VoiceDetectionConf_SnowboyModel::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoiceDetectionConf_SnowboyModel::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoiceDetectionConf_SnowboyModel::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoiceDetectionConf_SnowboyModel::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& VoiceDetectionConf_SnowboyModel::path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
  return path_.GetNoArena();
}
inline void VoiceDetectionConf_SnowboyModel::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
#if LANG_CXX11
inline void VoiceDetectionConf_SnowboyModel::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
#endif
inline void VoiceDetectionConf_SnowboyModel::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
inline void VoiceDetectionConf_SnowboyModel::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
inline ::std::string* VoiceDetectionConf_SnowboyModel::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoiceDetectionConf_SnowboyModel::release_path() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceDetectionConf_SnowboyModel::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}

// repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
inline int VoiceDetectionConf_SnowboyModel::hotwords_size() const {
  return hotwords_.size();
}
inline void VoiceDetectionConf_SnowboyModel::clear_hotwords() {
  hotwords_.Clear();
}
inline const ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& VoiceDetectionConf_SnowboyModel::hotwords(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_.Get(index);
}
inline ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::mutable_hotwords(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_.Mutable(index);
}
inline ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::add_hotwords() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >*
VoiceDetectionConf_SnowboyModel::mutable_hotwords() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return &hotwords_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >&
VoiceDetectionConf_SnowboyModel::hotwords() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_;
}

// -------------------------------------------------------------------

// VoiceDetectionConf

// optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
inline bool VoiceDetectionConf::has_snowboy_resource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoiceDetectionConf::set_has_snowboy_resource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoiceDetectionConf::clear_has_snowboy_resource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoiceDetectionConf::clear_snowboy_resource() {
  snowboy_resource_.ClearToDefaultNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
  clear_has_snowboy_resource();
}
inline const ::std::string& VoiceDetectionConf::snowboy_resource() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
  return snowboy_resource_.GetNoArena();
}
inline void VoiceDetectionConf::set_snowboy_resource(const ::std::string& value) {
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
#if LANG_CXX11
inline void VoiceDetectionConf::set_snowboy_resource(::std::string&& value) {
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(
    &VoiceDetectionConf::_default_snowboy_resource_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
#endif
inline void VoiceDetectionConf::set_snowboy_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
inline void VoiceDetectionConf::set_snowboy_resource(const char* value, size_t size) {
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
inline ::std::string* VoiceDetectionConf::mutable_snowboy_resource() {
  set_has_snowboy_resource();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
  return snowboy_resource_.MutableNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
}
inline ::std::string* VoiceDetectionConf::release_snowboy_resource() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
  clear_has_snowboy_resource();
  return snowboy_resource_.ReleaseNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
}
inline void VoiceDetectionConf::set_allocated_snowboy_resource(::std::string* snowboy_resource) {
  if (snowboy_resource != NULL) {
    set_has_snowboy_resource();
  } else {
    clear_has_snowboy_resource();
  }
  snowboy_resource_.SetAllocatedNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(), snowboy_resource);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}

// optional float audio_gain = 2 [default = 1];
inline bool VoiceDetectionConf::has_audio_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoiceDetectionConf::set_has_audio_gain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoiceDetectionConf::clear_has_audio_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoiceDetectionConf::clear_audio_gain() {
  audio_gain_ = 1;
  clear_has_audio_gain();
}
inline float VoiceDetectionConf::audio_gain() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.audio_gain)
  return audio_gain_;
}
inline void VoiceDetectionConf::set_audio_gain(float value) {
  set_has_audio_gain();
  audio_gain_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.audio_gain)
}

// optional float sensitivity = 3 [default = 0.75];
inline bool VoiceDetectionConf::has_sensitivity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoiceDetectionConf::set_has_sensitivity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoiceDetectionConf::clear_has_sensitivity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoiceDetectionConf::clear_sensitivity() {
  sensitivity_ = 0.75f;
  clear_has_sensitivity();
}
inline float VoiceDetectionConf::sensitivity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.sensitivity)
  return sensitivity_;
}
inline void VoiceDetectionConf::set_sensitivity(float value) {
  set_has_sensitivity();
  sensitivity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.sensitivity)
}

// repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
inline int VoiceDetectionConf::snowboy_models_size() const {
  return snowboy_models_.size();
}
inline void VoiceDetectionConf::clear_snowboy_models() {
  snowboy_models_.Clear();
}
inline const ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel& VoiceDetectionConf::snowboy_models(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_.Get(index);
}
inline ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::mutable_snowboy_models(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_.Mutable(index);
}
inline ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::add_snowboy_models() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel >*
VoiceDetectionConf::mutable_snowboy_models() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return &snowboy_models_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel >&
VoiceDetectionConf::snowboy_models() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_;
}

// -------------------------------------------------------------------

// VoiceDetectionRequest

// optional uint64 id = 1;
inline bool VoiceDetectionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoiceDetectionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoiceDetectionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoiceDetectionRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 VoiceDetectionRequest::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionRequest.id)
  return id_;
}
inline void VoiceDetectionRequest::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionRequest.id)
}

// optional bytes wav_stream = 2;
inline bool VoiceDetectionRequest::has_wav_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoiceDetectionRequest::set_has_wav_stream() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoiceDetectionRequest::clear_has_wav_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoiceDetectionRequest::clear_wav_stream() {
  wav_stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wav_stream();
}
inline const ::std::string& VoiceDetectionRequest::wav_stream() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
  return wav_stream_.GetNoArena();
}
inline void VoiceDetectionRequest::set_wav_stream(const ::std::string& value) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
#if LANG_CXX11
inline void VoiceDetectionRequest::set_wav_stream(::std::string&& value) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
#endif
inline void VoiceDetectionRequest::set_wav_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
inline void VoiceDetectionRequest::set_wav_stream(const void* value, size_t size) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
inline ::std::string* VoiceDetectionRequest::mutable_wav_stream() {
  set_has_wav_stream();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
  return wav_stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoiceDetectionRequest::release_wav_stream() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
  clear_has_wav_stream();
  return wav_stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoiceDetectionRequest::set_allocated_wav_stream(::std::string* wav_stream) {
  if (wav_stream != NULL) {
    set_has_wav_stream();
  } else {
    clear_has_wav_stream();
  }
  wav_stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wav_stream);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}

// -------------------------------------------------------------------

// VoiceDetectionResponse

// optional uint64 id = 1;
inline bool VoiceDetectionResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoiceDetectionResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoiceDetectionResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoiceDetectionResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 VoiceDetectionResponse::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionResponse.id)
  return id_;
}
inline void VoiceDetectionResponse::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionResponse.id)
}

// optional .jmc_auto.dreamview.HMIAction action = 2;
inline bool VoiceDetectionResponse::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoiceDetectionResponse::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoiceDetectionResponse::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoiceDetectionResponse::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::jmc_auto::dreamview::HMIAction VoiceDetectionResponse::action() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionResponse.action)
  return static_cast< ::jmc_auto::dreamview::HMIAction >(action_);
}
inline void VoiceDetectionResponse::set_action(::jmc_auto::dreamview::HMIAction value) {
  assert(::jmc_auto::dreamview::HMIAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionResponse.action)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dreamview
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto__INCLUDED
