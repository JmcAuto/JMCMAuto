// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/voice_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/dreamview/proto/voice_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace dreamview {
class VoiceDetectionConf_SnowboyModel_HotwordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceDetectionConf_SnowboyModel_Hotword> {
} _VoiceDetectionConf_SnowboyModel_Hotword_default_instance_;
class VoiceDetectionConf_SnowboyModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceDetectionConf_SnowboyModel> {
} _VoiceDetectionConf_SnowboyModel_default_instance_;
class VoiceDetectionConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceDetectionConf> {
} _VoiceDetectionConf_default_instance_;
class VoiceDetectionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceDetectionRequest> {
} _VoiceDetectionRequest_default_instance_;
class VoiceDetectionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VoiceDetectionResponse> {
} _VoiceDetectionResponse_default_instance_;

namespace protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel_Hotword, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel_Hotword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel_Hotword, word_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel_Hotword, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel_Hotword, response_message_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf_SnowboyModel, hotwords_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf, snowboy_resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf, audio_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf, sensitivity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionConf, snowboy_models_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionRequest, wav_stream_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoiceDetectionResponse, action_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(VoiceDetectionConf_SnowboyModel_Hotword)},
  { 11, 18, sizeof(VoiceDetectionConf_SnowboyModel)},
  { 20, 29, sizeof(VoiceDetectionConf)},
  { 33, 40, sizeof(VoiceDetectionRequest)},
  { 42, 49, sizeof(VoiceDetectionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceDetectionConf_SnowboyModel_Hotword_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceDetectionConf_SnowboyModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceDetectionConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceDetectionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VoiceDetectionResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/dreamview/proto/voice_detection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _VoiceDetectionConf_SnowboyModel_Hotword_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _VoiceDetectionConf_SnowboyModel_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VoiceDetectionConf_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  VoiceDetectionConf::_default_snowboy_resource_.Shutdown();
  _VoiceDetectionRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _VoiceDetectionResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::dreamview::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  _VoiceDetectionConf_SnowboyModel_Hotword_default_instance_.DefaultConstruct();
  _VoiceDetectionConf_SnowboyModel_default_instance_.DefaultConstruct();
  VoiceDetectionConf::_default_snowboy_resource_.DefaultConstruct();
  *VoiceDetectionConf::_default_snowboy_resource_.get_mutable() = ::std::string("/usr/local/jmc_auto/snowboy/resources/common.res", 48);
  _VoiceDetectionConf_default_instance_.DefaultConstruct();
  _VoiceDetectionRequest_default_instance_.DefaultConstruct();
  _VoiceDetectionResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-modules/dreamview/proto/voice_detectio"
      "n.proto\022\022jmc_auto.dreamview\032(modules/dre"
      "amview/proto/hmi_config.proto\"\257\003\n\022VoiceD"
      "etectionConf\022J\n\020snowboy_resource\030\001 \001(\t:0"
      "/usr/local/jmc_auto/snowboy/resources/co"
      "mmon.res\022\025\n\naudio_gain\030\002 \001(\002:\0011\022\031\n\013sensi"
      "tivity\030\003 \001(\002:\0040.75\022K\n\016snowboy_models\030\004 \003"
      "(\01323.jmc_auto.dreamview.VoiceDetectionCo"
      "nf.SnowboyModel\032\315\001\n\014SnowboyModel\022\014\n\004path"
      "\030\001 \001(\t\022M\n\010hotwords\030\002 \003(\0132;.jmc_auto.drea"
      "mview.VoiceDetectionConf.SnowboyModel.Ho"
      "tword\032`\n\007Hotword\022\014\n\004word\030\001 \001(\t\022-\n\006action"
      "\030\002 \001(\0162\035.jmc_auto.dreamview.HMIAction\022\030\n"
      "\020response_message\030\003 \001(\t\"7\n\025VoiceDetectio"
      "nRequest\022\n\n\002id\030\001 \001(\004\022\022\n\nwav_stream\030\002 \001(\014"
      "\"S\n\026VoiceDetectionResponse\022\n\n\002id\030\001 \001(\004\022-"
      "\n\006action\030\002 \001(\0162\035.jmc_auto.dreamview.HMIA"
      "ction"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 685);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/voice_detection.proto", &protobuf_RegisterTypes);
  ::jmc_auto::dreamview::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceDetectionConf_SnowboyModel_Hotword::kWordFieldNumber;
const int VoiceDetectionConf_SnowboyModel_Hotword::kActionFieldNumber;
const int VoiceDetectionConf_SnowboyModel_Hotword::kResponseMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceDetectionConf_SnowboyModel_Hotword::VoiceDetectionConf_SnowboyModel_Hotword()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
}
VoiceDetectionConf_SnowboyModel_Hotword::VoiceDetectionConf_SnowboyModel_Hotword(const VoiceDetectionConf_SnowboyModel_Hotword& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_word()) {
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  response_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response_message()) {
    response_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_message_);
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
}

void VoiceDetectionConf_SnowboyModel_Hotword::SharedCtor() {
  _cached_size_ = 0;
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
}

VoiceDetectionConf_SnowboyModel_Hotword::~VoiceDetectionConf_SnowboyModel_Hotword() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  SharedDtor();
}

void VoiceDetectionConf_SnowboyModel_Hotword::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoiceDetectionConf_SnowboyModel_Hotword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceDetectionConf_SnowboyModel_Hotword::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceDetectionConf_SnowboyModel_Hotword& VoiceDetectionConf_SnowboyModel_Hotword::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel_Hotword::New(::google::protobuf::Arena* arena) const {
  VoiceDetectionConf_SnowboyModel_Hotword* n = new VoiceDetectionConf_SnowboyModel_Hotword;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceDetectionConf_SnowboyModel_Hotword::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_word()) {
      GOOGLE_DCHECK(!word_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*word_.UnsafeRawStringPointer())->clear();
    }
    if (has_response_message()) {
      GOOGLE_DCHECK(!response_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*response_message_.UnsafeRawStringPointer())->clear();
    }
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceDetectionConf_SnowboyModel_Hotword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string word = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.HMIAction action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::dreamview::HMIAction_IsValid(value)) {
            set_action(static_cast< ::jmc_auto::dreamview::HMIAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string response_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_message().data(), this->response_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  return false;
#undef DO_
}

void VoiceDetectionConf_SnowboyModel_Hotword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // optional .jmc_auto.dreamview.HMIAction action = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional string response_message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_message().data(), this->response_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->response_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
}

::google::protobuf::uint8* VoiceDetectionConf_SnowboyModel_Hotword::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // optional .jmc_auto.dreamview.HMIAction action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional string response_message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_message().data(), this->response_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  return target;
}

size_t VoiceDetectionConf_SnowboyModel_Hotword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

    // optional string response_message = 3;
    if (has_response_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_message());
    }

    // optional .jmc_auto.dreamview.HMIAction action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceDetectionConf_SnowboyModel_Hotword::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceDetectionConf_SnowboyModel_Hotword* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceDetectionConf_SnowboyModel_Hotword>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
    MergeFrom(*source);
  }
}

void VoiceDetectionConf_SnowboyModel_Hotword::MergeFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_word();
      word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_response_message();
      response_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceDetectionConf_SnowboyModel_Hotword::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceDetectionConf_SnowboyModel_Hotword::CopyFrom(const VoiceDetectionConf_SnowboyModel_Hotword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionConf_SnowboyModel_Hotword::IsInitialized() const {
  return true;
}

void VoiceDetectionConf_SnowboyModel_Hotword::Swap(VoiceDetectionConf_SnowboyModel_Hotword* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceDetectionConf_SnowboyModel_Hotword::InternalSwap(VoiceDetectionConf_SnowboyModel_Hotword* other) {
  word_.Swap(&other->word_);
  response_message_.Swap(&other->response_message_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceDetectionConf_SnowboyModel_Hotword::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceDetectionConf_SnowboyModel_Hotword

// optional string word = 1;
bool VoiceDetectionConf_SnowboyModel_Hotword::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceDetectionConf_SnowboyModel_Hotword::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceDetectionConf_SnowboyModel_Hotword::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_word();
}
const ::std::string& VoiceDetectionConf_SnowboyModel_Hotword::word() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  return word_.GetNoArena();
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_word(const ::std::string& value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
#if LANG_CXX11
void VoiceDetectionConf_SnowboyModel_Hotword::set_word(::std::string&& value) {
  set_has_word();
  word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
#endif
void VoiceDetectionConf_SnowboyModel_Hotword::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_word(const char* value, size_t size) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}
::std::string* VoiceDetectionConf_SnowboyModel_Hotword::mutable_word() {
  set_has_word();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceDetectionConf_SnowboyModel_Hotword::release_word() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
  clear_has_word();
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    set_has_word();
  } else {
    clear_has_word();
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.word)
}

// optional .jmc_auto.dreamview.HMIAction action = 2;
bool VoiceDetectionConf_SnowboyModel_Hotword::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void VoiceDetectionConf_SnowboyModel_Hotword::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoiceDetectionConf_SnowboyModel_Hotword::clear_action() {
  action_ = 0;
  clear_has_action();
}
::jmc_auto::dreamview::HMIAction VoiceDetectionConf_SnowboyModel_Hotword::action() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.action)
  return static_cast< ::jmc_auto::dreamview::HMIAction >(action_);
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_action(::jmc_auto::dreamview::HMIAction value) {
  assert(::jmc_auto::dreamview::HMIAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.action)
}

// optional string response_message = 3;
bool VoiceDetectionConf_SnowboyModel_Hotword::has_response_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_has_response_message() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceDetectionConf_SnowboyModel_Hotword::clear_has_response_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceDetectionConf_SnowboyModel_Hotword::clear_response_message() {
  response_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response_message();
}
const ::std::string& VoiceDetectionConf_SnowboyModel_Hotword::response_message() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  return response_message_.GetNoArena();
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(const ::std::string& value) {
  set_has_response_message();
  response_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
#if LANG_CXX11
void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(::std::string&& value) {
  set_has_response_message();
  response_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
#endif
void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response_message();
  response_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_response_message(const char* value, size_t size) {
  set_has_response_message();
  response_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}
::std::string* VoiceDetectionConf_SnowboyModel_Hotword::mutable_response_message() {
  set_has_response_message();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  return response_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceDetectionConf_SnowboyModel_Hotword::release_response_message() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
  clear_has_response_message();
  return response_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceDetectionConf_SnowboyModel_Hotword::set_allocated_response_message(::std::string* response_message) {
  if (response_message != NULL) {
    set_has_response_message();
  } else {
    clear_has_response_message();
  }
  response_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_message);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword.response_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceDetectionConf_SnowboyModel::kPathFieldNumber;
const int VoiceDetectionConf_SnowboyModel::kHotwordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceDetectionConf_SnowboyModel::VoiceDetectionConf_SnowboyModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
}
VoiceDetectionConf_SnowboyModel::VoiceDetectionConf_SnowboyModel(const VoiceDetectionConf_SnowboyModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hotwords_(from.hotwords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
}

void VoiceDetectionConf_SnowboyModel::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VoiceDetectionConf_SnowboyModel::~VoiceDetectionConf_SnowboyModel() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  SharedDtor();
}

void VoiceDetectionConf_SnowboyModel::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoiceDetectionConf_SnowboyModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceDetectionConf_SnowboyModel::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceDetectionConf_SnowboyModel& VoiceDetectionConf_SnowboyModel::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceDetectionConf_SnowboyModel* VoiceDetectionConf_SnowboyModel::New(::google::protobuf::Arena* arena) const {
  VoiceDetectionConf_SnowboyModel* n = new VoiceDetectionConf_SnowboyModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceDetectionConf_SnowboyModel::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  hotwords_.Clear();
  if (has_path()) {
    GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*path_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceDetectionConf_SnowboyModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hotwords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  return false;
#undef DO_
}

void VoiceDetectionConf_SnowboyModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  for (unsigned int i = 0, n = this->hotwords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hotwords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
}

::google::protobuf::uint8* VoiceDetectionConf_SnowboyModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  for (unsigned int i = 0, n = this->hotwords_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->hotwords(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  return target;
}

size_t VoiceDetectionConf_SnowboyModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
  {
    unsigned int count = this->hotwords_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotwords(i));
    }
  }

  // optional string path = 1;
  if (has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceDetectionConf_SnowboyModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceDetectionConf_SnowboyModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceDetectionConf_SnowboyModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
    MergeFrom(*source);
  }
}

void VoiceDetectionConf_SnowboyModel::MergeFrom(const VoiceDetectionConf_SnowboyModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hotwords_.MergeFrom(from.hotwords_);
  if (from.has_path()) {
    set_has_path();
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void VoiceDetectionConf_SnowboyModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceDetectionConf_SnowboyModel::CopyFrom(const VoiceDetectionConf_SnowboyModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionConf_SnowboyModel::IsInitialized() const {
  return true;
}

void VoiceDetectionConf_SnowboyModel::Swap(VoiceDetectionConf_SnowboyModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceDetectionConf_SnowboyModel::InternalSwap(VoiceDetectionConf_SnowboyModel* other) {
  hotwords_.InternalSwap(&other->hotwords_);
  path_.Swap(&other->path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceDetectionConf_SnowboyModel::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceDetectionConf_SnowboyModel

// optional string path = 1;
bool VoiceDetectionConf_SnowboyModel::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceDetectionConf_SnowboyModel::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceDetectionConf_SnowboyModel::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceDetectionConf_SnowboyModel::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& VoiceDetectionConf_SnowboyModel::path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
  return path_.GetNoArena();
}
void VoiceDetectionConf_SnowboyModel::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
#if LANG_CXX11
void VoiceDetectionConf_SnowboyModel::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
#endif
void VoiceDetectionConf_SnowboyModel::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
void VoiceDetectionConf_SnowboyModel::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}
::std::string* VoiceDetectionConf_SnowboyModel::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceDetectionConf_SnowboyModel::release_path() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceDetectionConf_SnowboyModel::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.path)
}

// repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.Hotword hotwords = 2;
int VoiceDetectionConf_SnowboyModel::hotwords_size() const {
  return hotwords_.size();
}
void VoiceDetectionConf_SnowboyModel::clear_hotwords() {
  hotwords_.Clear();
}
const ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword& VoiceDetectionConf_SnowboyModel::hotwords(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_.Get(index);
}
::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::mutable_hotwords(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_.Mutable(index);
}
::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword* VoiceDetectionConf_SnowboyModel::add_hotwords() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >*
VoiceDetectionConf_SnowboyModel::mutable_hotwords() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return &hotwords_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel_Hotword >&
VoiceDetectionConf_SnowboyModel::hotwords() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel.hotwords)
  return hotwords_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> VoiceDetectionConf::_default_snowboy_resource_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceDetectionConf::kSnowboyResourceFieldNumber;
const int VoiceDetectionConf::kAudioGainFieldNumber;
const int VoiceDetectionConf::kSensitivityFieldNumber;
const int VoiceDetectionConf::kSnowboyModelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceDetectionConf::VoiceDetectionConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VoiceDetectionConf)
}
VoiceDetectionConf::VoiceDetectionConf(const VoiceDetectionConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      snowboy_models_(from.snowboy_models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snowboy_resource_.UnsafeSetDefault(&VoiceDetectionConf::_default_snowboy_resource_.get());
  if (from.has_snowboy_resource()) {
    snowboy_resource_.AssignWithDefault(&VoiceDetectionConf::_default_snowboy_resource_.get(), from.snowboy_resource_);
  }
  ::memcpy(&audio_gain_, &from.audio_gain_,
    reinterpret_cast<char*>(&sensitivity_) -
    reinterpret_cast<char*>(&audio_gain_) + sizeof(sensitivity_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VoiceDetectionConf)
}

void VoiceDetectionConf::SharedCtor() {
  _cached_size_ = 0;
  snowboy_resource_.UnsafeSetDefault(&VoiceDetectionConf::_default_snowboy_resource_.get());
  audio_gain_ = 1;
  sensitivity_ = 0.75f;
}

VoiceDetectionConf::~VoiceDetectionConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VoiceDetectionConf)
  SharedDtor();
}

void VoiceDetectionConf::SharedDtor() {
  snowboy_resource_.DestroyNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
}

void VoiceDetectionConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceDetectionConf::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceDetectionConf& VoiceDetectionConf::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceDetectionConf* VoiceDetectionConf::New(::google::protobuf::Arena* arena) const {
  VoiceDetectionConf* n = new VoiceDetectionConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceDetectionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VoiceDetectionConf)
  snowboy_models_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_snowboy_resource()) {
      GOOGLE_DCHECK(!snowboy_resource_.IsDefault(&VoiceDetectionConf::_default_snowboy_resource_.get()));
      (*snowboy_resource_.UnsafeRawStringPointer())->assign(*&VoiceDetectionConf::_default_snowboy_resource_.get());
    }
    audio_gain_ = 1;
    sensitivity_ = 0.75f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceDetectionConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VoiceDetectionConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snowboy_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snowboy_resource().data(), this->snowboy_resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float audio_gain = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_audio_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &audio_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sensitivity = 3 [default = 0.75];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_sensitivity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensitivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snowboy_models()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VoiceDetectionConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VoiceDetectionConf)
  return false;
#undef DO_
}

void VoiceDetectionConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VoiceDetectionConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snowboy_resource().data(), this->snowboy_resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->snowboy_resource(), output);
  }

  // optional float audio_gain = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->audio_gain(), output);
  }

  // optional float sensitivity = 3 [default = 0.75];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sensitivity(), output);
  }

  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  for (unsigned int i = 0, n = this->snowboy_models_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->snowboy_models(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VoiceDetectionConf)
}

::google::protobuf::uint8* VoiceDetectionConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VoiceDetectionConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snowboy_resource().data(), this->snowboy_resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snowboy_resource(), target);
  }

  // optional float audio_gain = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->audio_gain(), target);
  }

  // optional float sensitivity = 3 [default = 0.75];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sensitivity(), target);
  }

  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  for (unsigned int i = 0, n = this->snowboy_models_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->snowboy_models(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VoiceDetectionConf)
  return target;
}

size_t VoiceDetectionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VoiceDetectionConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
  {
    unsigned int count = this->snowboy_models_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snowboy_models(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
    if (has_snowboy_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snowboy_resource());
    }

    // optional float audio_gain = 2 [default = 1];
    if (has_audio_gain()) {
      total_size += 1 + 4;
    }

    // optional float sensitivity = 3 [default = 0.75];
    if (has_sensitivity()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceDetectionConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VoiceDetectionConf)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceDetectionConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceDetectionConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VoiceDetectionConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VoiceDetectionConf)
    MergeFrom(*source);
  }
}

void VoiceDetectionConf::MergeFrom(const VoiceDetectionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VoiceDetectionConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snowboy_models_.MergeFrom(from.snowboy_models_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_snowboy_resource();
      snowboy_resource_.AssignWithDefault(&VoiceDetectionConf::_default_snowboy_resource_.get(), from.snowboy_resource_);
    }
    if (cached_has_bits & 0x00000002u) {
      audio_gain_ = from.audio_gain_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensitivity_ = from.sensitivity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceDetectionConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VoiceDetectionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceDetectionConf::CopyFrom(const VoiceDetectionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VoiceDetectionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionConf::IsInitialized() const {
  return true;
}

void VoiceDetectionConf::Swap(VoiceDetectionConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceDetectionConf::InternalSwap(VoiceDetectionConf* other) {
  snowboy_models_.InternalSwap(&other->snowboy_models_);
  snowboy_resource_.Swap(&other->snowboy_resource_);
  std::swap(audio_gain_, other->audio_gain_);
  std::swap(sensitivity_, other->sensitivity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceDetectionConf::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceDetectionConf

// optional string snowboy_resource = 1 [default = "/usr/local/jmc_auto/snowboy/resources/common.res"];
bool VoiceDetectionConf::has_snowboy_resource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceDetectionConf::set_has_snowboy_resource() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceDetectionConf::clear_has_snowboy_resource() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceDetectionConf::clear_snowboy_resource() {
  snowboy_resource_.ClearToDefaultNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
  clear_has_snowboy_resource();
}
const ::std::string& VoiceDetectionConf::snowboy_resource() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
  return snowboy_resource_.GetNoArena();
}
void VoiceDetectionConf::set_snowboy_resource(const ::std::string& value) {
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
#if LANG_CXX11
void VoiceDetectionConf::set_snowboy_resource(::std::string&& value) {
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(
    &VoiceDetectionConf::_default_snowboy_resource_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
#endif
void VoiceDetectionConf::set_snowboy_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
void VoiceDetectionConf::set_snowboy_resource(const char* value, size_t size) {
  set_has_snowboy_resource();
  snowboy_resource_.SetNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}
::std::string* VoiceDetectionConf::mutable_snowboy_resource() {
  set_has_snowboy_resource();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
  return snowboy_resource_.MutableNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
}
::std::string* VoiceDetectionConf::release_snowboy_resource() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
  clear_has_snowboy_resource();
  return snowboy_resource_.ReleaseNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get());
}
void VoiceDetectionConf::set_allocated_snowboy_resource(::std::string* snowboy_resource) {
  if (snowboy_resource != NULL) {
    set_has_snowboy_resource();
  } else {
    clear_has_snowboy_resource();
  }
  snowboy_resource_.SetAllocatedNoArena(&VoiceDetectionConf::_default_snowboy_resource_.get(), snowboy_resource);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionConf.snowboy_resource)
}

// optional float audio_gain = 2 [default = 1];
bool VoiceDetectionConf::has_audio_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceDetectionConf::set_has_audio_gain() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceDetectionConf::clear_has_audio_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceDetectionConf::clear_audio_gain() {
  audio_gain_ = 1;
  clear_has_audio_gain();
}
float VoiceDetectionConf::audio_gain() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.audio_gain)
  return audio_gain_;
}
void VoiceDetectionConf::set_audio_gain(float value) {
  set_has_audio_gain();
  audio_gain_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.audio_gain)
}

// optional float sensitivity = 3 [default = 0.75];
bool VoiceDetectionConf::has_sensitivity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VoiceDetectionConf::set_has_sensitivity() {
  _has_bits_[0] |= 0x00000004u;
}
void VoiceDetectionConf::clear_has_sensitivity() {
  _has_bits_[0] &= ~0x00000004u;
}
void VoiceDetectionConf::clear_sensitivity() {
  sensitivity_ = 0.75f;
  clear_has_sensitivity();
}
float VoiceDetectionConf::sensitivity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.sensitivity)
  return sensitivity_;
}
void VoiceDetectionConf::set_sensitivity(float value) {
  set_has_sensitivity();
  sensitivity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionConf.sensitivity)
}

// repeated .jmc_auto.dreamview.VoiceDetectionConf.SnowboyModel snowboy_models = 4;
int VoiceDetectionConf::snowboy_models_size() const {
  return snowboy_models_.size();
}
void VoiceDetectionConf::clear_snowboy_models() {
  snowboy_models_.Clear();
}
const ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel& VoiceDetectionConf::snowboy_models(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_.Get(index);
}
::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::mutable_snowboy_models(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_.Mutable(index);
}
::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel* VoiceDetectionConf::add_snowboy_models() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel >*
VoiceDetectionConf::mutable_snowboy_models() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return &snowboy_models_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VoiceDetectionConf_SnowboyModel >&
VoiceDetectionConf::snowboy_models() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.VoiceDetectionConf.snowboy_models)
  return snowboy_models_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceDetectionRequest::kIdFieldNumber;
const int VoiceDetectionRequest::kWavStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceDetectionRequest::VoiceDetectionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VoiceDetectionRequest)
}
VoiceDetectionRequest::VoiceDetectionRequest(const VoiceDetectionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wav_stream_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wav_stream()) {
    wav_stream_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wav_stream_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VoiceDetectionRequest)
}

void VoiceDetectionRequest::SharedCtor() {
  _cached_size_ = 0;
  wav_stream_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

VoiceDetectionRequest::~VoiceDetectionRequest() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VoiceDetectionRequest)
  SharedDtor();
}

void VoiceDetectionRequest::SharedDtor() {
  wav_stream_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VoiceDetectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceDetectionRequest::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceDetectionRequest& VoiceDetectionRequest::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceDetectionRequest* VoiceDetectionRequest::New(::google::protobuf::Arena* arena) const {
  VoiceDetectionRequest* n = new VoiceDetectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceDetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VoiceDetectionRequest)
  if (has_wav_stream()) {
    GOOGLE_DCHECK(!wav_stream_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*wav_stream_.UnsafeRawStringPointer())->clear();
  }
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceDetectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VoiceDetectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes wav_stream = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wav_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VoiceDetectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VoiceDetectionRequest)
  return false;
#undef DO_
}

void VoiceDetectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VoiceDetectionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes wav_stream = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->wav_stream(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VoiceDetectionRequest)
}

::google::protobuf::uint8* VoiceDetectionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VoiceDetectionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes wav_stream = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->wav_stream(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VoiceDetectionRequest)
  return target;
}

size_t VoiceDetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VoiceDetectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes wav_stream = 2;
    if (has_wav_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->wav_stream());
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceDetectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VoiceDetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceDetectionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceDetectionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VoiceDetectionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VoiceDetectionRequest)
    MergeFrom(*source);
  }
}

void VoiceDetectionRequest::MergeFrom(const VoiceDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VoiceDetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wav_stream();
      wav_stream_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wav_stream_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceDetectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VoiceDetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceDetectionRequest::CopyFrom(const VoiceDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VoiceDetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionRequest::IsInitialized() const {
  return true;
}

void VoiceDetectionRequest::Swap(VoiceDetectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceDetectionRequest::InternalSwap(VoiceDetectionRequest* other) {
  wav_stream_.Swap(&other->wav_stream_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceDetectionRequest::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceDetectionRequest

// optional uint64 id = 1;
bool VoiceDetectionRequest::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceDetectionRequest::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceDetectionRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceDetectionRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 VoiceDetectionRequest::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionRequest.id)
  return id_;
}
void VoiceDetectionRequest::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionRequest.id)
}

// optional bytes wav_stream = 2;
bool VoiceDetectionRequest::has_wav_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceDetectionRequest::set_has_wav_stream() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceDetectionRequest::clear_has_wav_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceDetectionRequest::clear_wav_stream() {
  wav_stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wav_stream();
}
const ::std::string& VoiceDetectionRequest::wav_stream() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
  return wav_stream_.GetNoArena();
}
void VoiceDetectionRequest::set_wav_stream(const ::std::string& value) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
#if LANG_CXX11
void VoiceDetectionRequest::set_wav_stream(::std::string&& value) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
#endif
void VoiceDetectionRequest::set_wav_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
void VoiceDetectionRequest::set_wav_stream(const void* value, size_t size) {
  set_has_wav_stream();
  wav_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}
::std::string* VoiceDetectionRequest::mutable_wav_stream() {
  set_has_wav_stream();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
  return wav_stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VoiceDetectionRequest::release_wav_stream() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
  clear_has_wav_stream();
  return wav_stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VoiceDetectionRequest::set_allocated_wav_stream(::std::string* wav_stream) {
  if (wav_stream != NULL) {
    set_has_wav_stream();
  } else {
    clear_has_wav_stream();
  }
  wav_stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wav_stream);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VoiceDetectionRequest.wav_stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoiceDetectionResponse::kIdFieldNumber;
const int VoiceDetectionResponse::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoiceDetectionResponse::VoiceDetectionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VoiceDetectionResponse)
}
VoiceDetectionResponse::VoiceDetectionResponse(const VoiceDetectionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VoiceDetectionResponse)
}

void VoiceDetectionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
}

VoiceDetectionResponse::~VoiceDetectionResponse() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VoiceDetectionResponse)
  SharedDtor();
}

void VoiceDetectionResponse::SharedDtor() {
}

void VoiceDetectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoiceDetectionResponse::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoiceDetectionResponse& VoiceDetectionResponse::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::InitDefaults();
  return *internal_default_instance();
}

VoiceDetectionResponse* VoiceDetectionResponse::New(::google::protobuf::Arena* arena) const {
  VoiceDetectionResponse* n = new VoiceDetectionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoiceDetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VoiceDetectionResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&id_) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VoiceDetectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VoiceDetectionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.HMIAction action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::dreamview::HMIAction_IsValid(value)) {
            set_action(static_cast< ::jmc_auto::dreamview::HMIAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VoiceDetectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VoiceDetectionResponse)
  return false;
#undef DO_
}

void VoiceDetectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VoiceDetectionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .jmc_auto.dreamview.HMIAction action = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VoiceDetectionResponse)
}

::google::protobuf::uint8* VoiceDetectionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VoiceDetectionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .jmc_auto.dreamview.HMIAction action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VoiceDetectionResponse)
  return target;
}

size_t VoiceDetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VoiceDetectionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .jmc_auto.dreamview.HMIAction action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoiceDetectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VoiceDetectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceDetectionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoiceDetectionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VoiceDetectionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VoiceDetectionResponse)
    MergeFrom(*source);
  }
}

void VoiceDetectionResponse::MergeFrom(const VoiceDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VoiceDetectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoiceDetectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VoiceDetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceDetectionResponse::CopyFrom(const VoiceDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VoiceDetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceDetectionResponse::IsInitialized() const {
  return true;
}

void VoiceDetectionResponse::Swap(VoiceDetectionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoiceDetectionResponse::InternalSwap(VoiceDetectionResponse* other) {
  std::swap(id_, other->id_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoiceDetectionResponse::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fvoice_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoiceDetectionResponse

// optional uint64 id = 1;
bool VoiceDetectionResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VoiceDetectionResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VoiceDetectionResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VoiceDetectionResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 VoiceDetectionResponse::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionResponse.id)
  return id_;
}
void VoiceDetectionResponse::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionResponse.id)
}

// optional .jmc_auto.dreamview.HMIAction action = 2;
bool VoiceDetectionResponse::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VoiceDetectionResponse::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
void VoiceDetectionResponse::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
void VoiceDetectionResponse::clear_action() {
  action_ = 0;
  clear_has_action();
}
::jmc_auto::dreamview::HMIAction VoiceDetectionResponse::action() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VoiceDetectionResponse.action)
  return static_cast< ::jmc_auto::dreamview::HMIAction >(action_);
}
void VoiceDetectionResponse::set_action(::jmc_auto::dreamview::HMIAction value) {
  assert(::jmc_auto::dreamview::HMIAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VoiceDetectionResponse.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
