// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/chart.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/dreamview/proto/chart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace dreamview {
class Options_AxisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Options_Axis> {
} _Options_Axis_default_instance_;
class OptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Options> {
} _Options_default_instance_;
class Line_PropertiesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Line::Line_PropertiesEntry> {
} _Line_PropertiesEntry_default_instance_;
class LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Line> {
} _Line_default_instance_;
class Polygon_PropertiesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Polygon::Polygon_PropertiesEntry> {
} _Polygon_PropertiesEntry_default_instance_;
class PolygonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Polygon> {
} _Polygon_default_instance_;
class CarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Car> {
} _Car_default_instance_;
class ChartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chart> {
} _Chart_default_instance_;

namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, label_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options_Axis, mid_value_),
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, legend_display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Options, sync_xy_window_size_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, hide_label_in_legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, properties_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, hide_label_in_legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, properties_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, hide_label_in_legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, color_),
  0,
  5,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chart, car_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(Options_Axis)},
  { 17, 27, sizeof(Options)},
  { 32, 41, sizeof(Line)},
  { 45, 54, sizeof(Polygon)},
  { 58, 69, sizeof(Car)},
  { 75, 85, sizeof(Chart)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Options_Axis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Options_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Line_PropertiesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Polygon_PropertiesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Car_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chart_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/dreamview/proto/chart.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[2].reflection = Line::Line_PropertiesEntry::CreateReflection(file_level_metadata[2].descriptor, _Line_PropertiesEntry_default_instance_.get_mutable());
file_level_metadata[4].reflection = Polygon::Polygon_PropertiesEntry::CreateReflection(file_level_metadata[4].descriptor, _Polygon_PropertiesEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Options_Axis_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Options_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Line_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Polygon_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Car_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Chart_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  delete file_level_metadata[2].reflection;
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _Options_Axis_default_instance_.DefaultConstruct();
  _Options_default_instance_.DefaultConstruct();
  _Line_PropertiesEntry_default_instance_.DefaultConstruct();
  _Line_default_instance_.DefaultConstruct();
  _Polygon_PropertiesEntry_default_instance_.DefaultConstruct();
  _Polygon_default_instance_.DefaultConstruct();
  _Car_default_instance_.DefaultConstruct();
  _Chart_default_instance_.DefaultConstruct();
  _Options_default_instance_.get_mutable()->x_ = const_cast< ::jmc_auto::dreamview::Options_Axis*>(
      ::jmc_auto::dreamview::Options_Axis::internal_default_instance());
  _Options_default_instance_.get_mutable()->y_ = const_cast< ::jmc_auto::dreamview::Options_Axis*>(
      ::jmc_auto::dreamview::Options_Axis::internal_default_instance());
  _Line_PropertiesEntry_default_instance_.get_mutable()->set_default_instance(_Line_PropertiesEntry_default_instance_.get_mutable());
  _Line_PropertiesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Polygon_PropertiesEntry_default_instance_.get_mutable()->set_default_instance(_Polygon_PropertiesEntry_default_instance_.get_mutable());
  _Polygon_PropertiesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Chart_default_instance_.get_mutable()->options_ = const_cast< ::jmc_auto::dreamview::Options*>(
      ::jmc_auto::dreamview::Options::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n#modules/dreamview/proto/chart.proto\022\022j"
      "mc_auto.dreamview\032#modules/common/proto/"
      "geometry.proto\"\256\002\n\007Options\022\034\n\016legend_dis"
      "play\030\001 \001(\010:\004true\022+\n\001x\030\002 \001(\0132 .jmc_auto.d"
      "reamview.Options.Axis\022+\n\001y\030\003 \001(\0132 .jmc_a"
      "uto.dreamview.Options.Axis\022\024\n\014aspect_rat"
      "io\030\004 \001(\001\022\"\n\023sync_xy_window_size\030\005 \001(\010:\005f"
      "alse\032q\n\004Axis\022\013\n\003min\030\001 \001(\001\022\013\n\003max\030\002 \001(\001\022\024"
      "\n\014label_string\030\003 \001(\t\022\023\n\013window_size\030\004 \001("
      "\001\022\021\n\tstep_size\030\005 \001(\001\022\021\n\tmid_value\030\006 \001(\001\""
      "\324\001\n\004Line\022\r\n\005label\030\001 \001(\t\022#\n\024hide_label_in"
      "_legend\030\002 \001(\010:\005false\022\'\n\005point\030\003 \003(\0132\030.jm"
      "c_auto.common.Point2D\022<\n\nproperties\030\004 \003("
      "\0132(.jmc_auto.dreamview.Line.PropertiesEn"
      "try\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
      "alue\030\002 \001(\t:\0028\001\"\332\001\n\007Polygon\022\r\n\005label\030\001 \001("
      "\t\022#\n\024hide_label_in_legend\030\002 \001(\010:\005false\022\'"
      "\n\005point\030\003 \003(\0132\030.jmc_auto.common.Point2D\022"
      "\?\n\nproperties\030\004 \003(\0132+.jmc_auto.dreamview"
      ".Polygon.PropertiesEntry\0321\n\017PropertiesEn"
      "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"o\n\003C"
      "ar\022\r\n\005label\030\001 \001(\t\022#\n\024hide_label_in_legen"
      "d\030\002 \001(\010:\005false\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007"
      "heading\030\005 \001(\001\022\r\n\005color\030\006 \001(\t\"\300\001\n\005Chart\022\r"
      "\n\005title\030\001 \001(\t\022,\n\007options\030\002 \001(\0132\033.jmc_aut"
      "o.dreamview.Options\022&\n\004line\030\003 \003(\0132\030.jmc_"
      "auto.dreamview.Line\022,\n\007polygon\030\004 \003(\0132\033.j"
      "mc_auto.dreamview.Polygon\022$\n\003car\030\005 \003(\0132\027"
      ".jmc_auto.dreamview.Car"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/chart.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options_Axis::kMinFieldNumber;
const int Options_Axis::kMaxFieldNumber;
const int Options_Axis::kLabelStringFieldNumber;
const int Options_Axis::kWindowSizeFieldNumber;
const int Options_Axis::kStepSizeFieldNumber;
const int Options_Axis::kMidValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options_Axis::Options_Axis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Options.Axis)
}
Options_Axis::Options_Axis(const Options_Axis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_string()) {
    label_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_string_);
  }
  ::memcpy(&min_, &from.min_,
    reinterpret_cast<char*>(&mid_value_) -
    reinterpret_cast<char*>(&min_) + sizeof(mid_value_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Options.Axis)
}

void Options_Axis::SharedCtor() {
  _cached_size_ = 0;
  label_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_, 0, reinterpret_cast<char*>(&mid_value_) -
    reinterpret_cast<char*>(&min_) + sizeof(mid_value_));
}

Options_Axis::~Options_Axis() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Options.Axis)
  SharedDtor();
}

void Options_Axis::SharedDtor() {
  label_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Options_Axis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Options_Axis::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Options_Axis& Options_Axis::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Options_Axis* Options_Axis::New(::google::protobuf::Arena* arena) const {
  Options_Axis* n = new Options_Axis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Options_Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Options.Axis)
  if (has_label_string()) {
    GOOGLE_DCHECK(!label_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*label_string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&min_, 0, reinterpret_cast<char*>(&mid_value_) -
      reinterpret_cast<char*>(&min_) + sizeof(mid_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Options_Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Options.Axis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_string().data(), this->label_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Options.Axis.label_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double window_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_window_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mid_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_mid_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mid_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Options.Axis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Options.Axis)
  return false;
#undef DO_
}

void Options_Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Options.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // optional double max = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  // optional string label_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_string().data(), this->label_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Options.Axis.label_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label_string(), output);
  }

  // optional double window_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->window_size(), output);
  }

  // optional double step_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->step_size(), output);
  }

  // optional double mid_value = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mid_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Options.Axis)
}

::google::protobuf::uint8* Options_Axis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Options.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // optional double max = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  // optional string label_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_string().data(), this->label_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Options.Axis.label_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label_string(), target);
  }

  // optional double window_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->window_size(), target);
  }

  // optional double step_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->step_size(), target);
  }

  // optional double mid_value = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mid_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Options.Axis)
  return target;
}

size_t Options_Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Options.Axis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string label_string = 3;
    if (has_label_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_string());
    }

    // optional double min = 1;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 2;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double window_size = 4;
    if (has_window_size()) {
      total_size += 1 + 8;
    }

    // optional double step_size = 5;
    if (has_step_size()) {
      total_size += 1 + 8;
    }

    // optional double mid_value = 6;
    if (has_mid_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Options_Axis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Options.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const Options_Axis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Options_Axis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Options.Axis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Options.Axis)
    MergeFrom(*source);
  }
}

void Options_Axis::MergeFrom(const Options_Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Options.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label_string();
      label_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000008u) {
      window_size_ = from.window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      mid_value_ = from.mid_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Options_Axis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Options.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options_Axis::CopyFrom(const Options_Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Options.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options_Axis::IsInitialized() const {
  return true;
}

void Options_Axis::Swap(Options_Axis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options_Axis::InternalSwap(Options_Axis* other) {
  label_string_.Swap(&other->label_string_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(window_size_, other->window_size_);
  std::swap(step_size_, other->step_size_);
  std::swap(mid_value_, other->mid_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Options_Axis::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Options_Axis

// optional double min = 1;
bool Options_Axis::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Options_Axis::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void Options_Axis::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void Options_Axis::clear_min() {
  min_ = 0;
  clear_has_min();
}
double Options_Axis::min() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.min)
  return min_;
}
void Options_Axis::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.min)
}

// optional double max = 2;
bool Options_Axis::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Options_Axis::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void Options_Axis::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void Options_Axis::clear_max() {
  max_ = 0;
  clear_has_max();
}
double Options_Axis::max() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.max)
  return max_;
}
void Options_Axis::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.max)
}

// optional string label_string = 3;
bool Options_Axis::has_label_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Options_Axis::set_has_label_string() {
  _has_bits_[0] |= 0x00000001u;
}
void Options_Axis::clear_has_label_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void Options_Axis::clear_label_string() {
  label_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_string();
}
const ::std::string& Options_Axis::label_string() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.label_string)
  return label_string_.GetNoArena();
}
void Options_Axis::set_label_string(const ::std::string& value) {
  set_has_label_string();
  label_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.label_string)
}
#if LANG_CXX11
void Options_Axis::set_label_string(::std::string&& value) {
  set_has_label_string();
  label_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Options.Axis.label_string)
}
#endif
void Options_Axis::set_label_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_string();
  label_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Options.Axis.label_string)
}
void Options_Axis::set_label_string(const char* value, size_t size) {
  set_has_label_string();
  label_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Options.Axis.label_string)
}
::std::string* Options_Axis::mutable_label_string() {
  set_has_label_string();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Options.Axis.label_string)
  return label_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Options_Axis::release_label_string() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Options.Axis.label_string)
  clear_has_label_string();
  return label_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Options_Axis::set_allocated_label_string(::std::string* label_string) {
  if (label_string != NULL) {
    set_has_label_string();
  } else {
    clear_has_label_string();
  }
  label_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_string);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Options.Axis.label_string)
}

// optional double window_size = 4;
bool Options_Axis::has_window_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Options_Axis::set_has_window_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Options_Axis::clear_has_window_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Options_Axis::clear_window_size() {
  window_size_ = 0;
  clear_has_window_size();
}
double Options_Axis::window_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.window_size)
  return window_size_;
}
void Options_Axis::set_window_size(double value) {
  set_has_window_size();
  window_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.window_size)
}

// optional double step_size = 5;
bool Options_Axis::has_step_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Options_Axis::set_has_step_size() {
  _has_bits_[0] |= 0x00000010u;
}
void Options_Axis::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void Options_Axis::clear_step_size() {
  step_size_ = 0;
  clear_has_step_size();
}
double Options_Axis::step_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.step_size)
  return step_size_;
}
void Options_Axis::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.step_size)
}

// optional double mid_value = 6;
bool Options_Axis::has_mid_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Options_Axis::set_has_mid_value() {
  _has_bits_[0] |= 0x00000020u;
}
void Options_Axis::clear_has_mid_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void Options_Axis::clear_mid_value() {
  mid_value_ = 0;
  clear_has_mid_value();
}
double Options_Axis::mid_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.Axis.mid_value)
  return mid_value_;
}
void Options_Axis::set_mid_value(double value) {
  set_has_mid_value();
  mid_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.Axis.mid_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options::kLegendDisplayFieldNumber;
const int Options::kXFieldNumber;
const int Options::kYFieldNumber;
const int Options::kAspectRatioFieldNumber;
const int Options::kSyncXyWindowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options::Options()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Options)
}
Options::Options(const Options& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::jmc_auto::dreamview::Options_Axis(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::jmc_auto::dreamview::Options_Axis(*from.y_);
  } else {
    y_ = NULL;
  }
  ::memcpy(&aspect_ratio_, &from.aspect_ratio_,
    reinterpret_cast<char*>(&legend_display_) -
    reinterpret_cast<char*>(&aspect_ratio_) + sizeof(legend_display_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Options)
}

void Options::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&sync_xy_window_size_) -
    reinterpret_cast<char*>(&x_) + sizeof(sync_xy_window_size_));
  legend_display_ = true;
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Options)
  SharedDtor();
}

void Options::SharedDtor() {
  if (this != internal_default_instance()) {
    delete x_;
  }
  if (this != internal_default_instance()) {
    delete y_;
  }
}

void Options::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Options::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Options& Options::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Options* Options::New(::google::protobuf::Arena* arena) const {
  Options* n = new Options;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Options)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_x()) {
      GOOGLE_DCHECK(x_ != NULL);
      x_->::jmc_auto::dreamview::Options_Axis::Clear();
    }
    if (has_y()) {
      GOOGLE_DCHECK(y_ != NULL);
      y_->::jmc_auto::dreamview::Options_Axis::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&aspect_ratio_, 0, reinterpret_cast<char*>(&sync_xy_window_size_) -
      reinterpret_cast<char*>(&aspect_ratio_) + sizeof(sync_xy_window_size_));
    legend_display_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Options)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool legend_display = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_legend_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legend_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.Options.Axis x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.Options.Axis y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double aspect_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_xy_window_size = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sync_xy_window_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_xy_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Options)
  return false;
#undef DO_
}

void Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool legend_display = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->legend_display(), output);
  }

  // optional .jmc_auto.dreamview.Options.Axis x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->x_, output);
  }

  // optional .jmc_auto.dreamview.Options.Axis y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->y_, output);
  }

  // optional double aspect_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->aspect_ratio(), output);
  }

  // optional bool sync_xy_window_size = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sync_xy_window_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Options)
}

::google::protobuf::uint8* Options::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool legend_display = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->legend_display(), target);
  }

  // optional .jmc_auto.dreamview.Options.Axis x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->x_, deterministic, target);
  }

  // optional .jmc_auto.dreamview.Options.Axis y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->y_, deterministic, target);
  }

  // optional double aspect_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->aspect_ratio(), target);
  }

  // optional bool sync_xy_window_size = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sync_xy_window_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Options)
  return target;
}

size_t Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Options)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.dreamview.Options.Axis x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->x_);
    }

    // optional .jmc_auto.dreamview.Options.Axis y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->y_);
    }

    // optional double aspect_ratio = 4;
    if (has_aspect_ratio()) {
      total_size += 1 + 8;
    }

    // optional bool sync_xy_window_size = 5 [default = false];
    if (has_sync_xy_window_size()) {
      total_size += 1 + 1;
    }

    // optional bool legend_display = 1 [default = true];
    if (has_legend_display()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Options::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const Options* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Options>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Options)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Options)
    MergeFrom(*source);
  }
}

void Options::MergeFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_x()->::jmc_auto::dreamview::Options_Axis::MergeFrom(from.x());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_y()->::jmc_auto::dreamview::Options_Axis::MergeFrom(from.y());
    }
    if (cached_has_bits & 0x00000004u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      sync_xy_window_size_ = from.sync_xy_window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      legend_display_ = from.legend_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Options::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {
  return true;
}

void Options::Swap(Options* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options::InternalSwap(Options* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(aspect_ratio_, other->aspect_ratio_);
  std::swap(sync_xy_window_size_, other->sync_xy_window_size_);
  std::swap(legend_display_, other->legend_display_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Options::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Options

// optional bool legend_display = 1 [default = true];
bool Options::has_legend_display() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Options::set_has_legend_display() {
  _has_bits_[0] |= 0x00000010u;
}
void Options::clear_has_legend_display() {
  _has_bits_[0] &= ~0x00000010u;
}
void Options::clear_legend_display() {
  legend_display_ = true;
  clear_has_legend_display();
}
bool Options::legend_display() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.legend_display)
  return legend_display_;
}
void Options::set_legend_display(bool value) {
  set_has_legend_display();
  legend_display_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.legend_display)
}

// optional .jmc_auto.dreamview.Options.Axis x = 2;
bool Options::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Options::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Options::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Options::clear_x() {
  if (x_ != NULL) x_->::jmc_auto::dreamview::Options_Axis::Clear();
  clear_has_x();
}
const ::jmc_auto::dreamview::Options_Axis& Options::x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.x)
  return x_ != NULL ? *x_
                         : *::jmc_auto::dreamview::Options_Axis::internal_default_instance();
}
::jmc_auto::dreamview::Options_Axis* Options::mutable_x() {
  set_has_x();
  if (x_ == NULL) {
    x_ = new ::jmc_auto::dreamview::Options_Axis;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Options.x)
  return x_;
}
::jmc_auto::dreamview::Options_Axis* Options::release_x() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Options.x)
  clear_has_x();
  ::jmc_auto::dreamview::Options_Axis* temp = x_;
  x_ = NULL;
  return temp;
}
void Options::set_allocated_x(::jmc_auto::dreamview::Options_Axis* x) {
  delete x_;
  x_ = x;
  if (x) {
    set_has_x();
  } else {
    clear_has_x();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Options.x)
}

// optional .jmc_auto.dreamview.Options.Axis y = 3;
bool Options::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Options::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Options::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Options::clear_y() {
  if (y_ != NULL) y_->::jmc_auto::dreamview::Options_Axis::Clear();
  clear_has_y();
}
const ::jmc_auto::dreamview::Options_Axis& Options::y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.y)
  return y_ != NULL ? *y_
                         : *::jmc_auto::dreamview::Options_Axis::internal_default_instance();
}
::jmc_auto::dreamview::Options_Axis* Options::mutable_y() {
  set_has_y();
  if (y_ == NULL) {
    y_ = new ::jmc_auto::dreamview::Options_Axis;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Options.y)
  return y_;
}
::jmc_auto::dreamview::Options_Axis* Options::release_y() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Options.y)
  clear_has_y();
  ::jmc_auto::dreamview::Options_Axis* temp = y_;
  y_ = NULL;
  return temp;
}
void Options::set_allocated_y(::jmc_auto::dreamview::Options_Axis* y) {
  delete y_;
  y_ = y;
  if (y) {
    set_has_y();
  } else {
    clear_has_y();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Options.y)
}

// optional double aspect_ratio = 4;
bool Options::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Options::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void Options::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void Options::clear_aspect_ratio() {
  aspect_ratio_ = 0;
  clear_has_aspect_ratio();
}
double Options::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.aspect_ratio)
  return aspect_ratio_;
}
void Options::set_aspect_ratio(double value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.aspect_ratio)
}

// optional bool sync_xy_window_size = 5 [default = false];
bool Options::has_sync_xy_window_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Options::set_has_sync_xy_window_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Options::clear_has_sync_xy_window_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Options::clear_sync_xy_window_size() {
  sync_xy_window_size_ = false;
  clear_has_sync_xy_window_size();
}
bool Options::sync_xy_window_size() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Options.sync_xy_window_size)
  return sync_xy_window_size_;
}
void Options::set_sync_xy_window_size(bool value) {
  set_has_sync_xy_window_size();
  sync_xy_window_size_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Options.sync_xy_window_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Line::Line_PropertiesEntry::Line_PropertiesEntry() {}
Line::Line_PropertiesEntry::Line_PropertiesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Line::Line_PropertiesEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[2];
}
void Line::Line_PropertiesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Line::Line_PropertiesEntry::MergeFrom(const Line_PropertiesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kLabelFieldNumber;
const int Line::kHideLabelInLegendFieldNumber;
const int Line::kPointFieldNumber;
const int Line::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  hide_label_in_legend_ = from.hide_label_in_legend_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Line)
}

void Line::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hide_label_in_legend_ = false;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Line)
  point_.Clear();
  properties_.Clear();
  if (has_label()) {
    GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*label_.UnsafeRawStringPointer())->clear();
  }
  hide_label_in_legend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Line.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_label_in_legend = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hide_label_in_legend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_label_in_legend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.Point2D point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Line_PropertiesEntry::Parser< ::google::protobuf::internal::MapField<
              Line_PropertiesEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Line.PropertiesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Line.PropertiesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Line.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_label_in_legend(), output);
  }

  // repeated .jmc_auto.common.Point2D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(i), output);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Line.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Line.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Line_PropertiesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Line_PropertiesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Line.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_label_in_legend(), target);
  }

  // repeated .jmc_auto.common.Point2D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->point(i), deterministic, target);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Line.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Line.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Line_PropertiesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Line_PropertiesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Point2D point = 3;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  // map<string, string> properties = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::google::protobuf::scoped_ptr<Line_PropertiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool hide_label_in_legend = 2 [default = false];
    if (has_hide_label_in_legend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      hide_label_in_legend_ = from.hide_label_in_legend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  point_.InternalSwap(&other->point_);
  properties_.Swap(&other->properties_);
  label_.Swap(&other->label_);
  std::swap(hide_label_in_legend_, other->hide_label_in_legend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Line

// optional string label = 1;
bool Line::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Line::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void Line::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void Line::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& Line::label() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Line.label)
  return label_.GetNoArena();
}
void Line::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Line.label)
}
#if LANG_CXX11
void Line::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Line.label)
}
#endif
void Line::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Line.label)
}
void Line::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Line.label)
}
::std::string* Line::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Line.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Line::release_label() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Line.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Line::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Line.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
bool Line::has_hide_label_in_legend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Line::set_has_hide_label_in_legend() {
  _has_bits_[0] |= 0x00000002u;
}
void Line::clear_has_hide_label_in_legend() {
  _has_bits_[0] &= ~0x00000002u;
}
void Line::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  clear_has_hide_label_in_legend();
}
bool Line::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Line.hide_label_in_legend)
  return hide_label_in_legend_;
}
void Line::set_hide_label_in_legend(bool value) {
  set_has_hide_label_in_legend();
  hide_label_in_legend_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Line.hide_label_in_legend)
}

// repeated .jmc_auto.common.Point2D point = 3;
int Line::point_size() const {
  return point_.size();
}
void Line::clear_point() {
  point_.Clear();
}
const ::jmc_auto::common::Point2D& Line::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Line.point)
  return point_.Get(index);
}
::jmc_auto::common::Point2D* Line::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Line.point)
  return point_.Mutable(index);
}
::jmc_auto::common::Point2D* Line::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Line.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >*
Line::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Line.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >&
Line::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Line.point)
  return point_;
}

// map<string, string> properties = 4;
int Line::properties_size() const {
  return properties_.size();
}
void Line::clear_properties() {
  properties_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Line::properties() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.Line.properties)
  return properties_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Line::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.Line.properties)
  return properties_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Polygon::Polygon_PropertiesEntry::Polygon_PropertiesEntry() {}
Polygon::Polygon_PropertiesEntry::Polygon_PropertiesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Polygon::Polygon_PropertiesEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[4];
}
void Polygon::Polygon_PropertiesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Polygon::Polygon_PropertiesEntry::MergeFrom(const Polygon_PropertiesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kLabelFieldNumber;
const int Polygon::kHideLabelInLegendFieldNumber;
const int Polygon::kPointFieldNumber;
const int Polygon::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  hide_label_in_legend_ = from.hide_label_in_legend_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hide_label_in_legend_ = false;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Polygon)
  point_.Clear();
  properties_.Clear();
  if (has_label()) {
    GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*label_.UnsafeRawStringPointer())->clear();
  }
  hide_label_in_legend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Polygon.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_label_in_legend = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hide_label_in_legend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_label_in_legend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.Point2D point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Polygon_PropertiesEntry::Parser< ::google::protobuf::internal::MapField<
              Polygon_PropertiesEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Polygon.PropertiesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Polygon.PropertiesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Polygon.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_label_in_legend(), output);
  }

  // repeated .jmc_auto.common.Point2D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(i), output);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Polygon.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Polygon.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Polygon_PropertiesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Polygon_PropertiesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Polygon.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_label_in_legend(), target);
  }

  // repeated .jmc_auto.common.Point2D point = 3;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->point(i), deterministic, target);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Polygon.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Polygon.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Polygon_PropertiesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Polygon_PropertiesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.Point2D point = 3;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  // map<string, string> properties = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::google::protobuf::scoped_ptr<Polygon_PropertiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool hide_label_in_legend = 2 [default = false];
    if (has_hide_label_in_legend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      hide_label_in_legend_ = from.hide_label_in_legend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  point_.InternalSwap(&other->point_);
  properties_.Swap(&other->properties_);
  label_.Swap(&other->label_);
  std::swap(hide_label_in_legend_, other->hide_label_in_legend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// optional string label = 1;
bool Polygon::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Polygon::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void Polygon::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void Polygon::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& Polygon::label() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Polygon.label)
  return label_.GetNoArena();
}
void Polygon::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Polygon.label)
}
#if LANG_CXX11
void Polygon::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Polygon.label)
}
#endif
void Polygon::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Polygon.label)
}
void Polygon::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Polygon.label)
}
::std::string* Polygon::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Polygon.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Polygon::release_label() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Polygon.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Polygon::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Polygon.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
bool Polygon::has_hide_label_in_legend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Polygon::set_has_hide_label_in_legend() {
  _has_bits_[0] |= 0x00000002u;
}
void Polygon::clear_has_hide_label_in_legend() {
  _has_bits_[0] &= ~0x00000002u;
}
void Polygon::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  clear_has_hide_label_in_legend();
}
bool Polygon::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Polygon.hide_label_in_legend)
  return hide_label_in_legend_;
}
void Polygon::set_hide_label_in_legend(bool value) {
  set_has_hide_label_in_legend();
  hide_label_in_legend_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Polygon.hide_label_in_legend)
}

// repeated .jmc_auto.common.Point2D point = 3;
int Polygon::point_size() const {
  return point_.size();
}
void Polygon::clear_point() {
  point_.Clear();
}
const ::jmc_auto::common::Point2D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Polygon.point)
  return point_.Get(index);
}
::jmc_auto::common::Point2D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Polygon.point)
  return point_.Mutable(index);
}
::jmc_auto::common::Point2D* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Polygon.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Polygon.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::Point2D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Polygon.point)
  return point_;
}

// map<string, string> properties = 4;
int Polygon::properties_size() const {
  return properties_.size();
}
void Polygon::clear_properties() {
  properties_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Polygon::properties() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.Polygon.properties)
  return properties_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Polygon::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.Polygon.properties)
  return properties_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Car::kLabelFieldNumber;
const int Car::kHideLabelInLegendFieldNumber;
const int Car::kXFieldNumber;
const int Car::kYFieldNumber;
const int Car::kHeadingFieldNumber;
const int Car::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Car::Car()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Car)
}
Car::Car(const Car& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&hide_label_in_legend_) -
    reinterpret_cast<char*>(&x_) + sizeof(hide_label_in_legend_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Car)
}

void Car::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, reinterpret_cast<char*>(&hide_label_in_legend_) -
    reinterpret_cast<char*>(&x_) + sizeof(hide_label_in_legend_));
}

Car::~Car() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Car)
  SharedDtor();
}

void Car::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Car::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Car::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Car& Car::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Car* Car::New(::google::protobuf::Arena* arena) const {
  Car* n = new Car;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Car::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Car)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_label()) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
    if (has_color()) {
      GOOGLE_DCHECK(!color_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*color_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&hide_label_in_legend_) -
      reinterpret_cast<char*>(&x_) + sizeof(hide_label_in_legend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Car::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Car)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Car.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_label_in_legend = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hide_label_in_legend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_label_in_legend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Car.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Car)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Car)
  return false;
#undef DO_
}

void Car::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Car)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Car.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_label_in_legend(), output);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // optional string color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Car.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Car)
}

::google::protobuf::uint8* Car::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Car)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Car.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_label_in_legend(), target);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // optional string color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Car.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Car)
  return target;
}

size_t Car::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Car)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional bool hide_label_in_legend = 2 [default = false];
    if (has_hide_label_in_legend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Car::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Car)
  GOOGLE_DCHECK_NE(&from, this);
  const Car* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Car>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Car)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Car)
    MergeFrom(*source);
  }
}

void Car::MergeFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Car)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      hide_label_in_legend_ = from.hide_label_in_legend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Car::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Car::CopyFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car::IsInitialized() const {
  return true;
}

void Car::Swap(Car* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Car::InternalSwap(Car* other) {
  label_.Swap(&other->label_);
  color_.Swap(&other->color_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(heading_, other->heading_);
  std::swap(hide_label_in_legend_, other->hide_label_in_legend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Car::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Car

// optional string label = 1;
bool Car::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Car::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void Car::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void Car::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& Car::label() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.label)
  return label_.GetNoArena();
}
void Car::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.label)
}
#if LANG_CXX11
void Car::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Car.label)
}
#endif
void Car::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Car.label)
}
void Car::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Car.label)
}
::std::string* Car::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Car.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Car::release_label() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Car.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Car::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Car.label)
}

// optional bool hide_label_in_legend = 2 [default = false];
bool Car::has_hide_label_in_legend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Car::set_has_hide_label_in_legend() {
  _has_bits_[0] |= 0x00000020u;
}
void Car::clear_has_hide_label_in_legend() {
  _has_bits_[0] &= ~0x00000020u;
}
void Car::clear_hide_label_in_legend() {
  hide_label_in_legend_ = false;
  clear_has_hide_label_in_legend();
}
bool Car::hide_label_in_legend() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.hide_label_in_legend)
  return hide_label_in_legend_;
}
void Car::set_hide_label_in_legend(bool value) {
  set_has_hide_label_in_legend();
  hide_label_in_legend_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.hide_label_in_legend)
}

// optional double x = 3;
bool Car::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Car::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void Car::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void Car::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Car::x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.x)
  return x_;
}
void Car::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.x)
}

// optional double y = 4;
bool Car::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Car::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void Car::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void Car::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Car::y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.y)
  return y_;
}
void Car::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.y)
}

// optional double heading = 5;
bool Car::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Car::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
void Car::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
void Car::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double Car::heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.heading)
  return heading_;
}
void Car::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.heading)
}

// optional string color = 6;
bool Car::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Car::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void Car::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void Car::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
const ::std::string& Car::color() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Car.color)
  return color_.GetNoArena();
}
void Car::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Car.color)
}
#if LANG_CXX11
void Car::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Car.color)
}
#endif
void Car::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Car.color)
}
void Car::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Car.color)
}
::std::string* Car::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Car.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Car::release_color() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Car.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Car::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Car.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chart::kTitleFieldNumber;
const int Chart::kOptionsFieldNumber;
const int Chart::kLineFieldNumber;
const int Chart::kPolygonFieldNumber;
const int Chart::kCarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chart::Chart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Chart)
}
Chart::Chart(const Chart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      line_(from.line_),
      polygon_(from.polygon_),
      car_(from.car_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_options()) {
    options_ = new ::jmc_auto::dreamview::Options(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Chart)
}

void Chart::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Chart)
  SharedDtor();
}

void Chart::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete options_;
  }
}

void Chart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chart::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chart& Chart::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chart* Chart::New(::google::protobuf::Arena* arena) const {
  Chart* n = new Chart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Chart)
  line_.Clear();
  polygon_.Clear();
  car_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_options()) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->::jmc_auto::dreamview::Options::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Chart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Chart.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.Options options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.dreamview.Line line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.dreamview.Polygon polygon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.dreamview.Car car = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_car()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Chart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Chart)
  return false;
#undef DO_
}

void Chart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Chart.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional .jmc_auto.dreamview.Options options = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->options_, output);
  }

  // repeated .jmc_auto.dreamview.Line line = 3;
  for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->line(i), output);
  }

  // repeated .jmc_auto.dreamview.Polygon polygon = 4;
  for (unsigned int i = 0, n = this->polygon_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->polygon(i), output);
  }

  // repeated .jmc_auto.dreamview.Car car = 5;
  for (unsigned int i = 0, n = this->car_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->car(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Chart)
}

::google::protobuf::uint8* Chart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Chart.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional .jmc_auto.dreamview.Options options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->options_, deterministic, target);
  }

  // repeated .jmc_auto.dreamview.Line line = 3;
  for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->line(i), deterministic, target);
  }

  // repeated .jmc_auto.dreamview.Polygon polygon = 4;
  for (unsigned int i = 0, n = this->polygon_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->polygon(i), deterministic, target);
  }

  // repeated .jmc_auto.dreamview.Car car = 5;
  for (unsigned int i = 0, n = this->car_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->car(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Chart)
  return target;
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Chart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.dreamview.Line line = 3;
  {
    unsigned int count = this->line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line(i));
    }
  }

  // repeated .jmc_auto.dreamview.Polygon polygon = 4;
  {
    unsigned int count = this->polygon_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon(i));
    }
  }

  // repeated .jmc_auto.dreamview.Car car = 5;
  {
    unsigned int count = this->car_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->car(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .jmc_auto.dreamview.Options options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->options_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  const Chart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Chart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Chart)
    MergeFrom(*source);
  }
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_.MergeFrom(from.line_);
  polygon_.MergeFrom(from.polygon_);
  car_.MergeFrom(from.car_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_options()->::jmc_auto::dreamview::Options::MergeFrom(from.options());
    }
  }
}

void Chart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  return true;
}

void Chart::Swap(Chart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chart::InternalSwap(Chart* other) {
  line_.InternalSwap(&other->line_);
  polygon_.InternalSwap(&other->polygon_);
  car_.InternalSwap(&other->car_);
  title_.Swap(&other->title_);
  std::swap(options_, other->options_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chart::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chart

// optional string title = 1;
bool Chart::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chart::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void Chart::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chart::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Chart::title() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.title)
  return title_.GetNoArena();
}
void Chart::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Chart.title)
}
#if LANG_CXX11
void Chart::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Chart.title)
}
#endif
void Chart::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Chart.title)
}
void Chart::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Chart.title)
}
::std::string* Chart::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chart::release_title() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Chart.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chart::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Chart.title)
}

// optional .jmc_auto.dreamview.Options options = 2;
bool Chart::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chart::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
void Chart::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chart::clear_options() {
  if (options_ != NULL) options_->::jmc_auto::dreamview::Options::Clear();
  clear_has_options();
}
const ::jmc_auto::dreamview::Options& Chart::options() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.options)
  return options_ != NULL ? *options_
                         : *::jmc_auto::dreamview::Options::internal_default_instance();
}
::jmc_auto::dreamview::Options* Chart::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::jmc_auto::dreamview::Options;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.options)
  return options_;
}
::jmc_auto::dreamview::Options* Chart::release_options() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Chart.options)
  clear_has_options();
  ::jmc_auto::dreamview::Options* temp = options_;
  options_ = NULL;
  return temp;
}
void Chart::set_allocated_options(::jmc_auto::dreamview::Options* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Chart.options)
}

// repeated .jmc_auto.dreamview.Line line = 3;
int Chart::line_size() const {
  return line_.size();
}
void Chart::clear_line() {
  line_.Clear();
}
const ::jmc_auto::dreamview::Line& Chart::line(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.line)
  return line_.Get(index);
}
::jmc_auto::dreamview::Line* Chart::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.line)
  return line_.Mutable(index);
}
::jmc_auto::dreamview::Line* Chart::add_line() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Chart.line)
  return line_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line >*
Chart::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Chart.line)
  return &line_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Line >&
Chart::line() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Chart.line)
  return line_;
}

// repeated .jmc_auto.dreamview.Polygon polygon = 4;
int Chart::polygon_size() const {
  return polygon_.size();
}
void Chart::clear_polygon() {
  polygon_.Clear();
}
const ::jmc_auto::dreamview::Polygon& Chart::polygon(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.polygon)
  return polygon_.Get(index);
}
::jmc_auto::dreamview::Polygon* Chart::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.polygon)
  return polygon_.Mutable(index);
}
::jmc_auto::dreamview::Polygon* Chart::add_polygon() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Chart.polygon)
  return polygon_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon >*
Chart::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Chart.polygon)
  return &polygon_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Polygon >&
Chart::polygon() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Chart.polygon)
  return polygon_;
}

// repeated .jmc_auto.dreamview.Car car = 5;
int Chart::car_size() const {
  return car_.size();
}
void Chart::clear_car() {
  car_.Clear();
}
const ::jmc_auto::dreamview::Car& Chart::car(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Chart.car)
  return car_.Get(index);
}
::jmc_auto::dreamview::Car* Chart::mutable_car(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Chart.car)
  return car_.Mutable(index);
}
::jmc_auto::dreamview::Car* Chart::add_car() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Chart.car)
  return car_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car >*
Chart::mutable_car() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Chart.car)
  return &car_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::Car >&
Chart::car() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Chart.car)
  return car_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
