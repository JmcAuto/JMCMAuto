// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/dreamview/proto/hmi_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace dreamview {
class Component_SupportedCommandsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Component::Component_SupportedCommandsEntry> {
} _Component_SupportedCommandsEntry_default_instance_;
class ComponentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Component> {
} _Component_default_instance_;
class ModeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mode> {
} _Mode_default_instance_;
class AudioCapturingConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioCapturingConfig> {
} _AudioCapturingConfig_default_instance_;
class HMIConfig_ModulesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig::HMIConfig_ModulesEntry> {
} _HMIConfig_ModulesEntry_default_instance_;
class HMIConfig_HardwareEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig::HMIConfig_HardwareEntry> {
} _HMIConfig_HardwareEntry_default_instance_;
class HMIConfig_ToolsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig::HMIConfig_ToolsEntry> {
} _HMIConfig_ToolsEntry_default_instance_;
class HMIConfig_AvailableMapsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig::HMIConfig_AvailableMapsEntry> {
} _HMIConfig_AvailableMapsEntry_default_instance_;
class HMIConfig_AvailableVehiclesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig::HMIConfig_AvailableVehiclesEntry> {
} _HMIConfig_AvailableVehiclesEntry_default_instance_;
class HMIConfig_ModesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig::HMIConfig_ModesEntry> {
} _HMIConfig_ModesEntry_default_instance_;
class HMIConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig> {
} _HMIConfig_default_instance_;
class VehicleData_DataFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleData_DataFile> {
} _VehicleData_DataFile_default_instance_;
class VehicleDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleData> {
} _VehicleData_default_instance_;

namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, supported_commands_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, live_modules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mode, live_hardware_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioCapturingConfig, bits_per_sample_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, docker_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, modules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, hardware_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, tools_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, available_maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, available_vehicles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, modes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, utm_zone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, audio_capturing_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HMIConfig, chassis_high_beam_action_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, source_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData_DataFile, dest_path_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleData, data_files_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(Component)},
  { 11, 18, sizeof(Mode)},
  { 20, 28, sizeof(AudioCapturingConfig)},
  { 31, 46, sizeof(HMIConfig)},
  { 56, 63, sizeof(VehicleData_DataFile)},
  { 65, 71, sizeof(VehicleData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Component_SupportedCommandsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Component_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioCapturingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_ModulesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_HardwareEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_ToolsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_AvailableMapsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_AvailableVehiclesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_ModesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HMIConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleData_DataFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/dreamview/proto/hmi_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = Component::Component_SupportedCommandsEntry::CreateReflection(file_level_metadata[0].descriptor, _Component_SupportedCommandsEntry_default_instance_.get_mutable());
file_level_metadata[4].reflection = HMIConfig::HMIConfig_ModulesEntry::CreateReflection(file_level_metadata[4].descriptor, _HMIConfig_ModulesEntry_default_instance_.get_mutable());
file_level_metadata[5].reflection = HMIConfig::HMIConfig_HardwareEntry::CreateReflection(file_level_metadata[5].descriptor, _HMIConfig_HardwareEntry_default_instance_.get_mutable());
file_level_metadata[6].reflection = HMIConfig::HMIConfig_ToolsEntry::CreateReflection(file_level_metadata[6].descriptor, _HMIConfig_ToolsEntry_default_instance_.get_mutable());
file_level_metadata[7].reflection = HMIConfig::HMIConfig_AvailableMapsEntry::CreateReflection(file_level_metadata[7].descriptor, _HMIConfig_AvailableMapsEntry_default_instance_.get_mutable());
file_level_metadata[8].reflection = HMIConfig::HMIConfig_AvailableVehiclesEntry::CreateReflection(file_level_metadata[8].descriptor, _HMIConfig_AvailableVehiclesEntry_default_instance_.get_mutable());
file_level_metadata[9].reflection = HMIConfig::HMIConfig_ModesEntry::CreateReflection(file_level_metadata[9].descriptor, _HMIConfig_ModesEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _Component_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Mode_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AudioCapturingConfig_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _HMIConfig_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _VehicleData_DataFile_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _VehicleData_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  delete file_level_metadata[0].reflection;
  delete file_level_metadata[4].reflection;
  delete file_level_metadata[5].reflection;
  delete file_level_metadata[6].reflection;
  delete file_level_metadata[7].reflection;
  delete file_level_metadata[8].reflection;
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Component_SupportedCommandsEntry_default_instance_.DefaultConstruct();
  _Component_default_instance_.DefaultConstruct();
  _Mode_default_instance_.DefaultConstruct();
  _AudioCapturingConfig_default_instance_.DefaultConstruct();
  _HMIConfig_ModulesEntry_default_instance_.DefaultConstruct();
  _HMIConfig_HardwareEntry_default_instance_.DefaultConstruct();
  _HMIConfig_ToolsEntry_default_instance_.DefaultConstruct();
  _HMIConfig_AvailableMapsEntry_default_instance_.DefaultConstruct();
  _HMIConfig_AvailableVehiclesEntry_default_instance_.DefaultConstruct();
  _HMIConfig_ModesEntry_default_instance_.DefaultConstruct();
  _HMIConfig_default_instance_.DefaultConstruct();
  _VehicleData_DataFile_default_instance_.DefaultConstruct();
  _VehicleData_default_instance_.DefaultConstruct();
  _Component_SupportedCommandsEntry_default_instance_.get_mutable()->set_default_instance(_Component_SupportedCommandsEntry_default_instance_.get_mutable());
  _Component_SupportedCommandsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_ModulesEntry_default_instance_.get_mutable()->set_default_instance(_HMIConfig_ModulesEntry_default_instance_.get_mutable());
  _HMIConfig_ModulesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_HardwareEntry_default_instance_.get_mutable()->set_default_instance(_HMIConfig_HardwareEntry_default_instance_.get_mutable());
  _HMIConfig_HardwareEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_ToolsEntry_default_instance_.get_mutable()->set_default_instance(_HMIConfig_ToolsEntry_default_instance_.get_mutable());
  _HMIConfig_ToolsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_AvailableMapsEntry_default_instance_.get_mutable()->set_default_instance(_HMIConfig_AvailableMapsEntry_default_instance_.get_mutable());
  _HMIConfig_AvailableMapsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_AvailableVehiclesEntry_default_instance_.get_mutable()->set_default_instance(_HMIConfig_AvailableVehiclesEntry_default_instance_.get_mutable());
  _HMIConfig_AvailableVehiclesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_ModesEntry_default_instance_.get_mutable()->set_default_instance(_HMIConfig_ModesEntry_default_instance_.get_mutable());
  _HMIConfig_ModesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _HMIConfig_default_instance_.get_mutable()->audio_capturing_conf_ = const_cast< ::jmc_auto::dreamview::AudioCapturingConfig*>(
      ::jmc_auto::dreamview::AudioCapturingConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/dreamview/proto/hmi_config.pro"
      "to\022\022jmc_auto.dreamview\"\273\001\n\tComponent\022\024\n\014"
      "display_name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022P\n\022supp"
      "orted_commands\030\003 \003(\01324.jmc_auto.dreamvie"
      "w.Component.SupportedCommandsEntry\0328\n\026Su"
      "pportedCommandsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001\"3\n\004Mode\022\024\n\014live_modules\030\001 \003"
      "(\t\022\025\n\rlive_hardware\030\002 \003(\t\"Y\n\024AudioCaptur"
      "ingConfig\022\023\n\010channels\030\001 \001(\005:\0011\022\023\n\013sample"
      "_rate\030\002 \001(\005\022\027\n\017bits_per_sample\030\003 \001(\005\"\355\007\n"
      "\tHMIConfig\022\024\n\014docker_image\030\001 \001(\t\022;\n\007modu"
      "les\030\002 \003(\0132*.jmc_auto.dreamview.HMIConfig"
      ".ModulesEntry\022=\n\010hardware\030\003 \003(\0132+.jmc_au"
      "to.dreamview.HMIConfig.HardwareEntry\0227\n\005"
      "tools\030\004 \003(\0132(.jmc_auto.dreamview.HMIConf"
      "ig.ToolsEntry\022H\n\016available_maps\030\005 \003(\01320."
      "jmc_auto.dreamview.HMIConfig.AvailableMa"
      "psEntry\022P\n\022available_vehicles\030\006 \003(\01324.jm"
      "c_auto.dreamview.HMIConfig.AvailableVehi"
      "clesEntry\0227\n\005modes\030\007 \003(\0132(.jmc_auto.drea"
      "mview.HMIConfig.ModesEntry\022\023\n\013utm_zone_i"
      "d\030\010 \001(\005\022F\n\024audio_capturing_conf\030\t \001(\0132(."
      "jmc_auto.dreamview.AudioCapturingConfig\022"
      "\?\n\030chassis_high_beam_action\030\n \001(\0162\035.jmc_"
      "auto.dreamview.HMIAction\032M\n\014ModulesEntry"
      "\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.jmc_auto."
      "dreamview.Component:\0028\001\032N\n\rHardwareEntry"
      "\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.jmc_auto."
      "dreamview.Component:\0028\001\032K\n\nToolsEntry\022\013\n"
      "\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.jmc_auto.dre"
      "amview.Component:\0028\001\0324\n\022AvailableMapsEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026Av"
      "ailableVehiclesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
      "ue\030\002 \001(\t:\0028\001\032F\n\nModesEntry\022\013\n\003key\030\001 \001(\t\022"
      "\'\n\005value\030\002 \001(\0132\030.jmc_auto.dreamview.Mode"
      ":\0028\001\"\177\n\013VehicleData\022<\n\ndata_files\030\001 \003(\0132"
      "(.jmc_auto.dreamview.VehicleData.DataFil"
      "e\0322\n\010DataFile\022\023\n\013source_path\030\001 \001(\t\022\021\n\tde"
      "st_path\030\002 \001(\t*>\n\tHMIAction\022\010\n\004NONE\020\000\022\t\n\005"
      "SETUP\020\001\022\r\n\tAUTO_MODE\020\002\022\r\n\tDISENGAGE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/hmi_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* HMIAction_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool HMIAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Component::Component_SupportedCommandsEntry::Component_SupportedCommandsEntry() {}
Component::Component_SupportedCommandsEntry::Component_SupportedCommandsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Component::Component_SupportedCommandsEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[0];
}
void Component::Component_SupportedCommandsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Component::Component_SupportedCommandsEntry::MergeFrom(const Component_SupportedCommandsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Component::kDisplayNameFieldNumber;
const int Component::kPathFieldNumber;
const int Component::kSupportedCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Component::Component()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Component)
}
Component::Component(const Component& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  supported_commands_.MergeFrom(from.supported_commands_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Component)
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Component& Component::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Component* Component::New(::google::protobuf::Arena* arena) const {
  Component* n = new Component;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Component)
  supported_commands_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_display_name()) {
      GOOGLE_DCHECK(!display_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Component.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Component.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> supported_commands = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          Component_SupportedCommandsEntry::Parser< ::google::protobuf::internal::MapField<
              Component_SupportedCommandsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&supported_commands_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Component.SupportedCommandsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Component.SupportedCommandsEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Component)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Component.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Component.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // map<string, string> supported_commands = 3;
  if (!this->supported_commands().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Component.SupportedCommandsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Component.SupportedCommandsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->supported_commands().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->supported_commands().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->supported_commands().begin();
          it != this->supported_commands().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Component_SupportedCommandsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(supported_commands_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Component_SupportedCommandsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->supported_commands().begin();
          it != this->supported_commands().end(); ++it) {
        entry.reset(supported_commands_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Component)
}

::google::protobuf::uint8* Component::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Component)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Component.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Component.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // map<string, string> supported_commands = 3;
  if (!this->supported_commands().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Component.SupportedCommandsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.Component.SupportedCommandsEntry.value");
      }
    };

    if (deterministic &&
        this->supported_commands().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->supported_commands().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->supported_commands().begin();
          it != this->supported_commands().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Component_SupportedCommandsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(supported_commands_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Component_SupportedCommandsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->supported_commands().begin();
          it != this->supported_commands().end(); ++it) {
        entry.reset(supported_commands_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Component)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<string, string> supported_commands = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->supported_commands_size());
  {
    ::google::protobuf::scoped_ptr<Component_SupportedCommandsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->supported_commands().begin();
        it != this->supported_commands().end(); ++it) {
      entry.reset(supported_commands_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string display_name = 1;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const Component* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Component>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Component)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_commands_.MergeFrom(from.supported_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
  }
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::Swap(Component* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Component::InternalSwap(Component* other) {
  supported_commands_.Swap(&other->supported_commands_);
  display_name_.Swap(&other->display_name_);
  path_.Swap(&other->path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Component

// optional string display_name = 1;
bool Component::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Component::set_has_display_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Component::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Component::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
const ::std::string& Component::display_name() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Component.display_name)
  return display_name_.GetNoArena();
}
void Component::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Component.display_name)
}
#if LANG_CXX11
void Component::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Component.display_name)
}
#endif
void Component::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Component.display_name)
}
void Component::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Component.display_name)
}
::std::string* Component::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Component.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Component::release_display_name() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Component.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Component::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Component.display_name)
}

// optional string path = 2;
bool Component::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Component::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void Component::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void Component::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& Component::path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Component.path)
  return path_.GetNoArena();
}
void Component::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Component.path)
}
#if LANG_CXX11
void Component::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.Component.path)
}
#endif
void Component::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Component.path)
}
void Component::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Component.path)
}
::std::string* Component::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Component.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Component::release_path() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.Component.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Component::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.Component.path)
}

// map<string, string> supported_commands = 3;
int Component::supported_commands_size() const {
  return supported_commands_.size();
}
void Component::clear_supported_commands() {
  supported_commands_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Component::supported_commands() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.Component.supported_commands)
  return supported_commands_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Component::mutable_supported_commands() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.Component.supported_commands)
  return supported_commands_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mode::kLiveModulesFieldNumber;
const int Mode::kLiveHardwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mode::Mode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.Mode)
}
Mode::Mode(const Mode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      live_modules_(from.live_modules_),
      live_hardware_(from.live_hardware_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.Mode)
}

void Mode::SharedCtor() {
  _cached_size_ = 0;
}

Mode::~Mode() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.Mode)
  SharedDtor();
}

void Mode::SharedDtor() {
}

void Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mode::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mode& Mode::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mode* Mode::New(::google::protobuf::Arena* arena) const {
  Mode* n = new Mode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.Mode)
  live_modules_.Clear();
  live_hardware_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.Mode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string live_modules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_live_modules()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->live_modules(this->live_modules_size() - 1).data(),
            this->live_modules(this->live_modules_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Mode.live_modules");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string live_hardware = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_live_hardware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->live_hardware(this->live_hardware_size() - 1).data(),
            this->live_hardware(this->live_hardware_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.Mode.live_hardware");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.Mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.Mode)
  return false;
#undef DO_
}

void Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string live_modules = 1;
  for (int i = 0, n = this->live_modules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_modules(i).data(), this->live_modules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Mode.live_modules");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->live_modules(i), output);
  }

  // repeated string live_hardware = 2;
  for (int i = 0, n = this->live_hardware_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_hardware(i).data(), this->live_hardware(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Mode.live_hardware");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->live_hardware(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.Mode)
}

::google::protobuf::uint8* Mode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string live_modules = 1;
  for (int i = 0, n = this->live_modules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_modules(i).data(), this->live_modules(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Mode.live_modules");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->live_modules(i), target);
  }

  // repeated string live_hardware = 2;
  for (int i = 0, n = this->live_hardware_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->live_hardware(i).data(), this->live_hardware(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.Mode.live_hardware");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->live_hardware(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.Mode)
  return target;
}

size_t Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.Mode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string live_modules = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->live_modules_size());
  for (int i = 0, n = this->live_modules_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->live_modules(i));
  }

  // repeated string live_hardware = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->live_hardware_size());
  for (int i = 0, n = this->live_hardware_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->live_hardware(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  const Mode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.Mode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.Mode)
    MergeFrom(*source);
  }
}

void Mode::MergeFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  live_modules_.MergeFrom(from.live_modules_);
  live_hardware_.MergeFrom(from.live_hardware_);
}

void Mode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mode::CopyFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mode::IsInitialized() const {
  return true;
}

void Mode::Swap(Mode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mode::InternalSwap(Mode* other) {
  live_modules_.InternalSwap(&other->live_modules_);
  live_hardware_.InternalSwap(&other->live_hardware_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mode::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mode

// repeated string live_modules = 1;
int Mode::live_modules_size() const {
  return live_modules_.size();
}
void Mode::clear_live_modules() {
  live_modules_.Clear();
}
const ::std::string& Mode::live_modules(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Mode.live_modules)
  return live_modules_.Get(index);
}
::std::string* Mode::mutable_live_modules(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Mode.live_modules)
  return live_modules_.Mutable(index);
}
void Mode::set_live_modules(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Mode.live_modules)
  live_modules_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Mode::set_live_modules(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Mode.live_modules)
  live_modules_.Mutable(index)->assign(std::move(value));
}
#endif
void Mode::set_live_modules(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_modules_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Mode.live_modules)
}
void Mode::set_live_modules(int index, const char* value, size_t size) {
  live_modules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Mode.live_modules)
}
::std::string* Mode::add_live_modules() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.dreamview.Mode.live_modules)
  return live_modules_.Add();
}
void Mode::add_live_modules(const ::std::string& value) {
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Mode.live_modules)
}
#if LANG_CXX11
void Mode::add_live_modules(::std::string&& value) {
  live_modules_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Mode.live_modules)
}
#endif
void Mode::add_live_modules(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_modules_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.dreamview.Mode.live_modules)
}
void Mode::add_live_modules(const char* value, size_t size) {
  live_modules_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.dreamview.Mode.live_modules)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_modules() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Mode.live_modules)
  return live_modules_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_modules() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Mode.live_modules)
  return &live_modules_;
}

// repeated string live_hardware = 2;
int Mode::live_hardware_size() const {
  return live_hardware_.size();
}
void Mode::clear_live_hardware() {
  live_hardware_.Clear();
}
const ::std::string& Mode::live_hardware(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.Mode.live_hardware)
  return live_hardware_.Get(index);
}
::std::string* Mode::mutable_live_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.Mode.live_hardware)
  return live_hardware_.Mutable(index);
}
void Mode::set_live_hardware(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Mode.live_hardware)
  live_hardware_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Mode::set_live_hardware(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.Mode.live_hardware)
  live_hardware_.Mutable(index)->assign(std::move(value));
}
#endif
void Mode::set_live_hardware(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_hardware_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.Mode.live_hardware)
}
void Mode::set_live_hardware(int index, const char* value, size_t size) {
  live_hardware_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.Mode.live_hardware)
}
::std::string* Mode::add_live_hardware() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.dreamview.Mode.live_hardware)
  return live_hardware_.Add();
}
void Mode::add_live_hardware(const ::std::string& value) {
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Mode.live_hardware)
}
#if LANG_CXX11
void Mode::add_live_hardware(::std::string&& value) {
  live_hardware_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.Mode.live_hardware)
}
#endif
void Mode::add_live_hardware(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  live_hardware_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.dreamview.Mode.live_hardware)
}
void Mode::add_live_hardware(const char* value, size_t size) {
  live_hardware_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.dreamview.Mode.live_hardware)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mode::live_hardware() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.Mode.live_hardware)
  return live_hardware_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Mode::mutable_live_hardware() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.Mode.live_hardware)
  return &live_hardware_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioCapturingConfig::kChannelsFieldNumber;
const int AudioCapturingConfig::kSampleRateFieldNumber;
const int AudioCapturingConfig::kBitsPerSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioCapturingConfig::AudioCapturingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.AudioCapturingConfig)
}
AudioCapturingConfig::AudioCapturingConfig(const AudioCapturingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sample_rate_, &from.sample_rate_,
    reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(channels_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.AudioCapturingConfig)
}

void AudioCapturingConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sample_rate_, 0, reinterpret_cast<char*>(&bits_per_sample_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(bits_per_sample_));
  channels_ = 1;
}

AudioCapturingConfig::~AudioCapturingConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.AudioCapturingConfig)
  SharedDtor();
}

void AudioCapturingConfig::SharedDtor() {
}

void AudioCapturingConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioCapturingConfig::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioCapturingConfig& AudioCapturingConfig::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioCapturingConfig* AudioCapturingConfig::New(::google::protobuf::Arena* arena) const {
  AudioCapturingConfig* n = new AudioCapturingConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioCapturingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.AudioCapturingConfig)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sample_rate_, 0, reinterpret_cast<char*>(&bits_per_sample_) -
      reinterpret_cast<char*>(&sample_rate_) + sizeof(bits_per_sample_));
    channels_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AudioCapturingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.AudioCapturingConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sample_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bits_per_sample = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bits_per_sample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_per_sample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.AudioCapturingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.AudioCapturingConfig)
  return false;
#undef DO_
}

void AudioCapturingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.AudioCapturingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  // optional int32 sample_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sample_rate(), output);
  }

  // optional int32 bits_per_sample = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bits_per_sample(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.AudioCapturingConfig)
}

::google::protobuf::uint8* AudioCapturingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.AudioCapturingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  // optional int32 sample_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sample_rate(), target);
  }

  // optional int32 bits_per_sample = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bits_per_sample(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.AudioCapturingConfig)
  return target;
}

size_t AudioCapturingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.AudioCapturingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 sample_rate = 2;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_rate());
    }

    // optional int32 bits_per_sample = 3;
    if (has_bits_per_sample()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_per_sample());
    }

    // optional int32 channels = 1 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioCapturingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.AudioCapturingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioCapturingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioCapturingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.AudioCapturingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.AudioCapturingConfig)
    MergeFrom(*source);
  }
}

void AudioCapturingConfig::MergeFrom(const AudioCapturingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.AudioCapturingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sample_rate_ = from.sample_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      bits_per_sample_ = from.bits_per_sample_;
    }
    if (cached_has_bits & 0x00000004u) {
      channels_ = from.channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioCapturingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.AudioCapturingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioCapturingConfig::CopyFrom(const AudioCapturingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.AudioCapturingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCapturingConfig::IsInitialized() const {
  return true;
}

void AudioCapturingConfig::Swap(AudioCapturingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioCapturingConfig::InternalSwap(AudioCapturingConfig* other) {
  std::swap(sample_rate_, other->sample_rate_);
  std::swap(bits_per_sample_, other->bits_per_sample_);
  std::swap(channels_, other->channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioCapturingConfig::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioCapturingConfig

// optional int32 channels = 1 [default = 1];
bool AudioCapturingConfig::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AudioCapturingConfig::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
void AudioCapturingConfig::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
void AudioCapturingConfig::clear_channels() {
  channels_ = 1;
  clear_has_channels();
}
::google::protobuf::int32 AudioCapturingConfig::channels() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.AudioCapturingConfig.channels)
  return channels_;
}
void AudioCapturingConfig::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.AudioCapturingConfig.channels)
}

// optional int32 sample_rate = 2;
bool AudioCapturingConfig::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AudioCapturingConfig::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000001u;
}
void AudioCapturingConfig::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
void AudioCapturingConfig::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
::google::protobuf::int32 AudioCapturingConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.AudioCapturingConfig.sample_rate)
  return sample_rate_;
}
void AudioCapturingConfig::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.AudioCapturingConfig.sample_rate)
}

// optional int32 bits_per_sample = 3;
bool AudioCapturingConfig::has_bits_per_sample() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AudioCapturingConfig::set_has_bits_per_sample() {
  _has_bits_[0] |= 0x00000002u;
}
void AudioCapturingConfig::clear_has_bits_per_sample() {
  _has_bits_[0] &= ~0x00000002u;
}
void AudioCapturingConfig::clear_bits_per_sample() {
  bits_per_sample_ = 0;
  clear_has_bits_per_sample();
}
::google::protobuf::int32 AudioCapturingConfig::bits_per_sample() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.AudioCapturingConfig.bits_per_sample)
  return bits_per_sample_;
}
void AudioCapturingConfig::set_bits_per_sample(::google::protobuf::int32 value) {
  set_has_bits_per_sample();
  bits_per_sample_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.AudioCapturingConfig.bits_per_sample)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HMIConfig::HMIConfig_ModulesEntry::HMIConfig_ModulesEntry() {}
HMIConfig::HMIConfig_ModulesEntry::HMIConfig_ModulesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HMIConfig::HMIConfig_ModulesEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[4];
}
void HMIConfig::HMIConfig_ModulesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HMIConfig::HMIConfig_ModulesEntry::MergeFrom(const HMIConfig_ModulesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HMIConfig::HMIConfig_HardwareEntry::HMIConfig_HardwareEntry() {}
HMIConfig::HMIConfig_HardwareEntry::HMIConfig_HardwareEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HMIConfig::HMIConfig_HardwareEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[5];
}
void HMIConfig::HMIConfig_HardwareEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HMIConfig::HMIConfig_HardwareEntry::MergeFrom(const HMIConfig_HardwareEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HMIConfig::HMIConfig_ToolsEntry::HMIConfig_ToolsEntry() {}
HMIConfig::HMIConfig_ToolsEntry::HMIConfig_ToolsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HMIConfig::HMIConfig_ToolsEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[6];
}
void HMIConfig::HMIConfig_ToolsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HMIConfig::HMIConfig_ToolsEntry::MergeFrom(const HMIConfig_ToolsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HMIConfig::HMIConfig_AvailableMapsEntry::HMIConfig_AvailableMapsEntry() {}
HMIConfig::HMIConfig_AvailableMapsEntry::HMIConfig_AvailableMapsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HMIConfig::HMIConfig_AvailableMapsEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[7];
}
void HMIConfig::HMIConfig_AvailableMapsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HMIConfig::HMIConfig_AvailableMapsEntry::MergeFrom(const HMIConfig_AvailableMapsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HMIConfig::HMIConfig_AvailableVehiclesEntry::HMIConfig_AvailableVehiclesEntry() {}
HMIConfig::HMIConfig_AvailableVehiclesEntry::HMIConfig_AvailableVehiclesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HMIConfig::HMIConfig_AvailableVehiclesEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[8];
}
void HMIConfig::HMIConfig_AvailableVehiclesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HMIConfig::HMIConfig_AvailableVehiclesEntry::MergeFrom(const HMIConfig_AvailableVehiclesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

HMIConfig::HMIConfig_ModesEntry::HMIConfig_ModesEntry() {}
HMIConfig::HMIConfig_ModesEntry::HMIConfig_ModesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata HMIConfig::HMIConfig_ModesEntry::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[9];
}
void HMIConfig::HMIConfig_ModesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void HMIConfig::HMIConfig_ModesEntry::MergeFrom(const HMIConfig_ModesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HMIConfig::kDockerImageFieldNumber;
const int HMIConfig::kModulesFieldNumber;
const int HMIConfig::kHardwareFieldNumber;
const int HMIConfig::kToolsFieldNumber;
const int HMIConfig::kAvailableMapsFieldNumber;
const int HMIConfig::kAvailableVehiclesFieldNumber;
const int HMIConfig::kModesFieldNumber;
const int HMIConfig::kUtmZoneIdFieldNumber;
const int HMIConfig::kAudioCapturingConfFieldNumber;
const int HMIConfig::kChassisHighBeamActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HMIConfig::HMIConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.HMIConfig)
}
HMIConfig::HMIConfig(const HMIConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modules_.MergeFrom(from.modules_);
  hardware_.MergeFrom(from.hardware_);
  tools_.MergeFrom(from.tools_);
  available_maps_.MergeFrom(from.available_maps_);
  available_vehicles_.MergeFrom(from.available_vehicles_);
  modes_.MergeFrom(from.modes_);
  docker_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_docker_image()) {
    docker_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docker_image_);
  }
  if (from.has_audio_capturing_conf()) {
    audio_capturing_conf_ = new ::jmc_auto::dreamview::AudioCapturingConfig(*from.audio_capturing_conf_);
  } else {
    audio_capturing_conf_ = NULL;
  }
  ::memcpy(&utm_zone_id_, &from.utm_zone_id_,
    reinterpret_cast<char*>(&chassis_high_beam_action_) -
    reinterpret_cast<char*>(&utm_zone_id_) + sizeof(chassis_high_beam_action_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.HMIConfig)
}

void HMIConfig::SharedCtor() {
  _cached_size_ = 0;
  docker_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_capturing_conf_, 0, reinterpret_cast<char*>(&chassis_high_beam_action_) -
    reinterpret_cast<char*>(&audio_capturing_conf_) + sizeof(chassis_high_beam_action_));
}

HMIConfig::~HMIConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.HMIConfig)
  SharedDtor();
}

void HMIConfig::SharedDtor() {
  docker_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete audio_capturing_conf_;
  }
}

void HMIConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HMIConfig::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HMIConfig& HMIConfig::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

HMIConfig* HMIConfig::New(::google::protobuf::Arena* arena) const {
  HMIConfig* n = new HMIConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HMIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.HMIConfig)
  modules_.Clear();
  hardware_.Clear();
  tools_.Clear();
  available_maps_.Clear();
  available_vehicles_.Clear();
  modes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_docker_image()) {
      GOOGLE_DCHECK(!docker_image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*docker_image_.UnsafeRawStringPointer())->clear();
    }
    if (has_audio_capturing_conf()) {
      GOOGLE_DCHECK(audio_capturing_conf_ != NULL);
      audio_capturing_conf_->::jmc_auto::dreamview::AudioCapturingConfig::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&utm_zone_id_, 0, reinterpret_cast<char*>(&chassis_high_beam_action_) -
      reinterpret_cast<char*>(&utm_zone_id_) + sizeof(chassis_high_beam_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HMIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.HMIConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docker_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docker_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docker_image().data(), this->docker_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.docker_image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .jmc_auto.dreamview.Component> modules = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          HMIConfig_ModulesEntry::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_ModulesEntry,
              ::std::string, ::jmc_auto::dreamview::Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component > > parser(&modules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.ModulesEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .jmc_auto.dreamview.Component> hardware = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          HMIConfig_HardwareEntry::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_HardwareEntry,
              ::std::string, ::jmc_auto::dreamview::Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component > > parser(&hardware_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.HardwareEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .jmc_auto.dreamview.Component> tools = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          HMIConfig_ToolsEntry::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_ToolsEntry,
              ::std::string, ::jmc_auto::dreamview::Component,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component > > parser(&tools_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.ToolsEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> available_maps = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          HMIConfig_AvailableMapsEntry::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_AvailableMapsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&available_maps_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.AvailableMapsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.AvailableMapsEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> available_vehicles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          HMIConfig_AvailableVehiclesEntry::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_AvailableVehiclesEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&available_vehicles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.AvailableVehiclesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.AvailableVehiclesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .jmc_auto.dreamview.Mode> modes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          HMIConfig_ModesEntry::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_ModesEntry,
              ::std::string, ::jmc_auto::dreamview::Mode,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode > > parser(&modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.HMIConfig.ModesEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 utm_zone_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_utm_zone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utm_zone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_capturing_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.dreamview.HMIAction chassis_high_beam_action = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::dreamview::HMIAction_IsValid(value)) {
            set_chassis_high_beam_action(static_cast< ::jmc_auto::dreamview::HMIAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.HMIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.HMIConfig)
  return false;
#undef DO_
}

void HMIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.HMIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string docker_image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_image().data(), this->docker_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.HMIConfig.docker_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->docker_image(), output);
  }

  // map<string, .jmc_auto.dreamview.Component> modules = 2;
  if (!this->modules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.ModulesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->modules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it) {
        entry.reset(modules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .jmc_auto.dreamview.Component> hardware = 3;
  if (!this->hardware().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.HardwareEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->hardware().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hardware().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hardware_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it) {
        entry.reset(hardware_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .jmc_auto.dreamview.Component> tools = 4;
  if (!this->tools().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.ToolsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tools().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tools().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tools_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it) {
        entry.reset(tools_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_maps = 5;
  if (!this->available_maps().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableMapsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableMapsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->available_maps().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_maps().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_maps_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it) {
        entry.reset(available_maps_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_vehicles = 6;
  if (!this->available_vehicles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableVehiclesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableVehiclesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->available_vehicles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_vehicles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .jmc_auto.dreamview.Mode> modes = 7;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.ModesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->modes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 utm_zone_id = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->utm_zone_id(), output);
  }

  // optional .jmc_auto.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->audio_capturing_conf_, output);
  }

  // optional .jmc_auto.dreamview.HMIAction chassis_high_beam_action = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->chassis_high_beam_action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.HMIConfig)
}

::google::protobuf::uint8* HMIConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.HMIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string docker_image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_image().data(), this->docker_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.HMIConfig.docker_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docker_image(), target);
  }

  // map<string, .jmc_auto.dreamview.Component> modules = 2;
  if (!this->modules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.ModulesEntry.key");
      }
    };

    if (deterministic &&
        this->modules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it) {
        entry.reset(modules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .jmc_auto.dreamview.Component> hardware = 3;
  if (!this->hardware().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.HardwareEntry.key");
      }
    };

    if (deterministic &&
        this->hardware().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hardware().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hardware_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it) {
        entry.reset(hardware_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .jmc_auto.dreamview.Component> tools = 4;
  if (!this->tools().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.ToolsEntry.key");
      }
    };

    if (deterministic &&
        this->tools().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tools().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tools_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
          it = this->tools().begin();
          it != this->tools().end(); ++it) {
        entry.reset(tools_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_maps = 5;
  if (!this->available_maps().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableMapsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableMapsEntry.value");
      }
    };

    if (deterministic &&
        this->available_maps().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_maps().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_maps_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_maps().begin();
          it != this->available_maps().end(); ++it) {
        entry.reset(available_maps_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> available_vehicles = 6;
  if (!this->available_vehicles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableVehiclesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.AvailableVehiclesEntry.value");
      }
    };

    if (deterministic &&
        this->available_vehicles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->available_vehicles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->available_vehicles().begin();
          it != this->available_vehicles().end(); ++it) {
        entry.reset(available_vehicles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .jmc_auto.dreamview.Mode> modes = 7;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.dreamview.HMIConfig.ModesEntry.key");
      }
    };

    if (deterministic &&
        this->modes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional int32 utm_zone_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->utm_zone_id(), target);
  }

  // optional .jmc_auto.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->audio_capturing_conf_, deterministic, target);
  }

  // optional .jmc_auto.dreamview.HMIAction chassis_high_beam_action = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->chassis_high_beam_action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.HMIConfig)
  return target;
}

size_t HMIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.HMIConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<string, .jmc_auto.dreamview.Component> modules = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modules_size());
  {
    ::google::protobuf::scoped_ptr<HMIConfig_ModulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
        it = this->modules().begin();
        it != this->modules().end(); ++it) {
      entry.reset(modules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .jmc_auto.dreamview.Component> hardware = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hardware_size());
  {
    ::google::protobuf::scoped_ptr<HMIConfig_HardwareEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
        it = this->hardware().begin();
        it != this->hardware().end(); ++it) {
      entry.reset(hardware_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .jmc_auto.dreamview.Component> tools = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tools_size());
  {
    ::google::protobuf::scoped_ptr<HMIConfig_ToolsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >::const_iterator
        it = this->tools().begin();
        it != this->tools().end(); ++it) {
      entry.reset(tools_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> available_maps = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->available_maps_size());
  {
    ::google::protobuf::scoped_ptr<HMIConfig_AvailableMapsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->available_maps().begin();
        it != this->available_maps().end(); ++it) {
      entry.reset(available_maps_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> available_vehicles = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->available_vehicles_size());
  {
    ::google::protobuf::scoped_ptr<HMIConfig_AvailableVehiclesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->available_vehicles().begin();
        it != this->available_vehicles().end(); ++it) {
      entry.reset(available_vehicles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .jmc_auto.dreamview.Mode> modes = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modes_size());
  {
    ::google::protobuf::scoped_ptr<HMIConfig_ModesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >::const_iterator
        it = this->modes().begin();
        it != this->modes().end(); ++it) {
      entry.reset(modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string docker_image = 1;
    if (has_docker_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docker_image());
    }

    // optional .jmc_auto.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
    if (has_audio_capturing_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->audio_capturing_conf_);
    }

    // optional int32 utm_zone_id = 8;
    if (has_utm_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utm_zone_id());
    }

    // optional .jmc_auto.dreamview.HMIAction chassis_high_beam_action = 10;
    if (has_chassis_high_beam_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chassis_high_beam_action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HMIConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HMIConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.HMIConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.HMIConfig)
    MergeFrom(*source);
  }
}

void HMIConfig::MergeFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  hardware_.MergeFrom(from.hardware_);
  tools_.MergeFrom(from.tools_);
  available_maps_.MergeFrom(from.available_maps_);
  available_vehicles_.MergeFrom(from.available_vehicles_);
  modes_.MergeFrom(from.modes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_docker_image();
      docker_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.docker_image_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_audio_capturing_conf()->::jmc_auto::dreamview::AudioCapturingConfig::MergeFrom(from.audio_capturing_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      utm_zone_id_ = from.utm_zone_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      chassis_high_beam_action_ = from.chassis_high_beam_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HMIConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIConfig::CopyFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIConfig::IsInitialized() const {
  return true;
}

void HMIConfig::Swap(HMIConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HMIConfig::InternalSwap(HMIConfig* other) {
  modules_.Swap(&other->modules_);
  hardware_.Swap(&other->hardware_);
  tools_.Swap(&other->tools_);
  available_maps_.Swap(&other->available_maps_);
  available_vehicles_.Swap(&other->available_vehicles_);
  modes_.Swap(&other->modes_);
  docker_image_.Swap(&other->docker_image_);
  std::swap(audio_capturing_conf_, other->audio_capturing_conf_);
  std::swap(utm_zone_id_, other->utm_zone_id_);
  std::swap(chassis_high_beam_action_, other->chassis_high_beam_action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HMIConfig::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HMIConfig

// optional string docker_image = 1;
bool HMIConfig::has_docker_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HMIConfig::set_has_docker_image() {
  _has_bits_[0] |= 0x00000001u;
}
void HMIConfig::clear_has_docker_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void HMIConfig::clear_docker_image() {
  docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docker_image();
}
const ::std::string& HMIConfig::docker_image() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.HMIConfig.docker_image)
  return docker_image_.GetNoArena();
}
void HMIConfig::set_docker_image(const ::std::string& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.HMIConfig.docker_image)
}
#if LANG_CXX11
void HMIConfig::set_docker_image(::std::string&& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.HMIConfig.docker_image)
}
#endif
void HMIConfig::set_docker_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.HMIConfig.docker_image)
}
void HMIConfig::set_docker_image(const char* value, size_t size) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.HMIConfig.docker_image)
}
::std::string* HMIConfig::mutable_docker_image() {
  set_has_docker_image();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.HMIConfig.docker_image)
  return docker_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HMIConfig::release_docker_image() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.HMIConfig.docker_image)
  clear_has_docker_image();
  return docker_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HMIConfig::set_allocated_docker_image(::std::string* docker_image) {
  if (docker_image != NULL) {
    set_has_docker_image();
  } else {
    clear_has_docker_image();
  }
  docker_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docker_image);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.HMIConfig.docker_image)
}

// map<string, .jmc_auto.dreamview.Component> modules = 2;
int HMIConfig::modules_size() const {
  return modules_.size();
}
void HMIConfig::clear_modules() {
  modules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >&
HMIConfig::modules() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.HMIConfig.modules)
  return modules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >*
HMIConfig::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.HMIConfig.modules)
  return modules_.MutableMap();
}

// map<string, .jmc_auto.dreamview.Component> hardware = 3;
int HMIConfig::hardware_size() const {
  return hardware_.size();
}
void HMIConfig::clear_hardware() {
  hardware_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >&
HMIConfig::hardware() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.HMIConfig.hardware)
  return hardware_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >*
HMIConfig::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.HMIConfig.hardware)
  return hardware_.MutableMap();
}

// map<string, .jmc_auto.dreamview.Component> tools = 4;
int HMIConfig::tools_size() const {
  return tools_.size();
}
void HMIConfig::clear_tools() {
  tools_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >&
HMIConfig::tools() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.HMIConfig.tools)
  return tools_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Component >*
HMIConfig::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.HMIConfig.tools)
  return tools_.MutableMap();
}

// map<string, string> available_maps = 5;
int HMIConfig::available_maps_size() const {
  return available_maps_.size();
}
void HMIConfig::clear_available_maps() {
  available_maps_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_maps() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.HMIConfig.available_maps)
  return available_maps_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_maps() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.HMIConfig.available_maps)
  return available_maps_.MutableMap();
}

// map<string, string> available_vehicles = 6;
int HMIConfig::available_vehicles_size() const {
  return available_vehicles_.size();
}
void HMIConfig::clear_available_vehicles() {
  available_vehicles_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
HMIConfig::available_vehicles() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
HMIConfig::mutable_available_vehicles() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.HMIConfig.available_vehicles)
  return available_vehicles_.MutableMap();
}

// map<string, .jmc_auto.dreamview.Mode> modes = 7;
int HMIConfig::modes_size() const {
  return modes_.size();
}
void HMIConfig::clear_modes() {
  modes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >&
HMIConfig::modes() const {
  // @@protoc_insertion_point(field_map:jmc_auto.dreamview.HMIConfig.modes)
  return modes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::jmc_auto::dreamview::Mode >*
HMIConfig::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.dreamview.HMIConfig.modes)
  return modes_.MutableMap();
}

// optional int32 utm_zone_id = 8;
bool HMIConfig::has_utm_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HMIConfig::set_has_utm_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
void HMIConfig::clear_has_utm_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void HMIConfig::clear_utm_zone_id() {
  utm_zone_id_ = 0;
  clear_has_utm_zone_id();
}
::google::protobuf::int32 HMIConfig::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.HMIConfig.utm_zone_id)
  return utm_zone_id_;
}
void HMIConfig::set_utm_zone_id(::google::protobuf::int32 value) {
  set_has_utm_zone_id();
  utm_zone_id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.HMIConfig.utm_zone_id)
}

// optional .jmc_auto.dreamview.AudioCapturingConfig audio_capturing_conf = 9;
bool HMIConfig::has_audio_capturing_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HMIConfig::set_has_audio_capturing_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void HMIConfig::clear_has_audio_capturing_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void HMIConfig::clear_audio_capturing_conf() {
  if (audio_capturing_conf_ != NULL) audio_capturing_conf_->::jmc_auto::dreamview::AudioCapturingConfig::Clear();
  clear_has_audio_capturing_conf();
}
const ::jmc_auto::dreamview::AudioCapturingConfig& HMIConfig::audio_capturing_conf() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.HMIConfig.audio_capturing_conf)
  return audio_capturing_conf_ != NULL ? *audio_capturing_conf_
                         : *::jmc_auto::dreamview::AudioCapturingConfig::internal_default_instance();
}
::jmc_auto::dreamview::AudioCapturingConfig* HMIConfig::mutable_audio_capturing_conf() {
  set_has_audio_capturing_conf();
  if (audio_capturing_conf_ == NULL) {
    audio_capturing_conf_ = new ::jmc_auto::dreamview::AudioCapturingConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.HMIConfig.audio_capturing_conf)
  return audio_capturing_conf_;
}
::jmc_auto::dreamview::AudioCapturingConfig* HMIConfig::release_audio_capturing_conf() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.HMIConfig.audio_capturing_conf)
  clear_has_audio_capturing_conf();
  ::jmc_auto::dreamview::AudioCapturingConfig* temp = audio_capturing_conf_;
  audio_capturing_conf_ = NULL;
  return temp;
}
void HMIConfig::set_allocated_audio_capturing_conf(::jmc_auto::dreamview::AudioCapturingConfig* audio_capturing_conf) {
  delete audio_capturing_conf_;
  audio_capturing_conf_ = audio_capturing_conf;
  if (audio_capturing_conf) {
    set_has_audio_capturing_conf();
  } else {
    clear_has_audio_capturing_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.HMIConfig.audio_capturing_conf)
}

// optional .jmc_auto.dreamview.HMIAction chassis_high_beam_action = 10;
bool HMIConfig::has_chassis_high_beam_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HMIConfig::set_has_chassis_high_beam_action() {
  _has_bits_[0] |= 0x00000008u;
}
void HMIConfig::clear_has_chassis_high_beam_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void HMIConfig::clear_chassis_high_beam_action() {
  chassis_high_beam_action_ = 0;
  clear_has_chassis_high_beam_action();
}
::jmc_auto::dreamview::HMIAction HMIConfig::chassis_high_beam_action() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.HMIConfig.chassis_high_beam_action)
  return static_cast< ::jmc_auto::dreamview::HMIAction >(chassis_high_beam_action_);
}
void HMIConfig::set_chassis_high_beam_action(::jmc_auto::dreamview::HMIAction value) {
  assert(::jmc_auto::dreamview::HMIAction_IsValid(value));
  set_has_chassis_high_beam_action();
  chassis_high_beam_action_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.HMIConfig.chassis_high_beam_action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleData_DataFile::kSourcePathFieldNumber;
const int VehicleData_DataFile::kDestPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleData_DataFile::VehicleData_DataFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VehicleData.DataFile)
}
VehicleData_DataFile::VehicleData_DataFile(const VehicleData_DataFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_path()) {
    source_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_path_);
  }
  dest_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_path()) {
    dest_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VehicleData.DataFile)
}

void VehicleData_DataFile::SharedCtor() {
  _cached_size_ = 0;
  source_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleData_DataFile::~VehicleData_DataFile() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VehicleData.DataFile)
  SharedDtor();
}

void VehicleData_DataFile::SharedDtor() {
  source_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleData_DataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleData_DataFile::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleData_DataFile& VehicleData_DataFile::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleData_DataFile* VehicleData_DataFile::New(::google::protobuf::Arena* arena) const {
  VehicleData_DataFile* n = new VehicleData_DataFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleData_DataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VehicleData.DataFile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_source_path()) {
      GOOGLE_DCHECK(!source_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_dest_path()) {
      GOOGLE_DCHECK(!dest_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_path_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleData_DataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VehicleData.DataFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_path().data(), this->source_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.VehicleData.DataFile.source_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_path().data(), this->dest_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.dreamview.VehicleData.DataFile.dest_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VehicleData.DataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VehicleData.DataFile)
  return false;
#undef DO_
}

void VehicleData_DataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VehicleData.DataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VehicleData.DataFile.source_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_path(), output);
  }

  // optional string dest_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_path().data(), this->dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VehicleData.DataFile.dest_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VehicleData.DataFile)
}

::google::protobuf::uint8* VehicleData_DataFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VehicleData.DataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VehicleData.DataFile.source_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_path(), target);
  }

  // optional string dest_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_path().data(), this->dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.dreamview.VehicleData.DataFile.dest_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VehicleData.DataFile)
  return target;
}

size_t VehicleData_DataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VehicleData.DataFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string source_path = 1;
    if (has_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_path());
    }

    // optional string dest_path = 2;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleData_DataFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData_DataFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleData_DataFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VehicleData.DataFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VehicleData.DataFile)
    MergeFrom(*source);
  }
}

void VehicleData_DataFile::MergeFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_path();
      source_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest_path();
      dest_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
    }
  }
}

void VehicleData_DataFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData_DataFile::CopyFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData_DataFile::IsInitialized() const {
  return true;
}

void VehicleData_DataFile::Swap(VehicleData_DataFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleData_DataFile::InternalSwap(VehicleData_DataFile* other) {
  source_path_.Swap(&other->source_path_);
  dest_path_.Swap(&other->dest_path_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleData_DataFile::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleData_DataFile

// optional string source_path = 1;
bool VehicleData_DataFile::has_source_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleData_DataFile::set_has_source_path() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleData_DataFile::clear_has_source_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleData_DataFile::clear_source_path() {
  source_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_path();
}
const ::std::string& VehicleData_DataFile::source_path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VehicleData.DataFile.source_path)
  return source_path_.GetNoArena();
}
void VehicleData_DataFile::set_source_path(const ::std::string& value) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VehicleData.DataFile.source_path)
}
#if LANG_CXX11
void VehicleData_DataFile::set_source_path(::std::string&& value) {
  set_has_source_path();
  source_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VehicleData.DataFile.source_path)
}
#endif
void VehicleData_DataFile::set_source_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VehicleData.DataFile.source_path)
}
void VehicleData_DataFile::set_source_path(const char* value, size_t size) {
  set_has_source_path();
  source_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VehicleData.DataFile.source_path)
}
::std::string* VehicleData_DataFile::mutable_source_path() {
  set_has_source_path();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VehicleData.DataFile.source_path)
  return source_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleData_DataFile::release_source_path() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VehicleData.DataFile.source_path)
  clear_has_source_path();
  return source_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleData_DataFile::set_allocated_source_path(::std::string* source_path) {
  if (source_path != NULL) {
    set_has_source_path();
  } else {
    clear_has_source_path();
  }
  source_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_path);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VehicleData.DataFile.source_path)
}

// optional string dest_path = 2;
bool VehicleData_DataFile::has_dest_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleData_DataFile::set_has_dest_path() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleData_DataFile::clear_has_dest_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleData_DataFile::clear_dest_path() {
  dest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest_path();
}
const ::std::string& VehicleData_DataFile::dest_path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.GetNoArena();
}
void VehicleData_DataFile::set_dest_path(const ::std::string& value) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
}
#if LANG_CXX11
void VehicleData_DataFile::set_dest_path(::std::string&& value) {
  set_has_dest_path();
  dest_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
}
#endif
void VehicleData_DataFile::set_dest_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
}
void VehicleData_DataFile::set_dest_path(const char* value, size_t size) {
  set_has_dest_path();
  dest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
}
::std::string* VehicleData_DataFile::mutable_dest_path() {
  set_has_dest_path();
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
  return dest_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleData_DataFile::release_dest_path() {
  // @@protoc_insertion_point(field_release:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
  clear_has_dest_path();
  return dest_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleData_DataFile::set_allocated_dest_path(::std::string* dest_path) {
  if (dest_path != NULL) {
    set_has_dest_path();
  } else {
    clear_has_dest_path();
  }
  dest_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_path);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.dreamview.VehicleData.DataFile.dest_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleData::kDataFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleData::VehicleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.dreamview.VehicleData)
}
VehicleData::VehicleData(const VehicleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_files_(from.data_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.dreamview.VehicleData)
}

void VehicleData::SharedCtor() {
  _cached_size_ = 0;
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:jmc_auto.dreamview.VehicleData)
  SharedDtor();
}

void VehicleData::SharedDtor() {
}

void VehicleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleData::descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleData& VehicleData::default_instance() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleData* VehicleData::New(::google::protobuf::Arena* arena) const {
  VehicleData* n = new VehicleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.dreamview.VehicleData)
  data_files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.dreamview.VehicleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.dreamview.VehicleData.DataFile data_files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.dreamview.VehicleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.dreamview.VehicleData)
  return false;
#undef DO_
}

void VehicleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.dreamview.VehicleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0, n = this->data_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.dreamview.VehicleData)
}

::google::protobuf::uint8* VehicleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.dreamview.VehicleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0, n = this->data_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_files(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.dreamview.VehicleData)
  return target;
}

size_t VehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.dreamview.VehicleData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.dreamview.VehicleData.DataFile data_files = 1;
  {
    unsigned int count = this->data_files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_files(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.dreamview.VehicleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.dreamview.VehicleData)
    MergeFrom(*source);
  }
}

void VehicleData::MergeFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_files_.MergeFrom(from.data_files_);
}

void VehicleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  return true;
}

void VehicleData::Swap(VehicleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleData::InternalSwap(VehicleData* other) {
  data_files_.InternalSwap(&other->data_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleData::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleData

// repeated .jmc_auto.dreamview.VehicleData.DataFile data_files = 1;
int VehicleData::data_files_size() const {
  return data_files_.size();
}
void VehicleData::clear_data_files() {
  data_files_.Clear();
}
const ::jmc_auto::dreamview::VehicleData_DataFile& VehicleData::data_files(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.dreamview.VehicleData.data_files)
  return data_files_.Get(index);
}
::jmc_auto::dreamview::VehicleData_DataFile* VehicleData::mutable_data_files(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.dreamview.VehicleData.data_files)
  return data_files_.Mutable(index);
}
::jmc_auto::dreamview::VehicleData_DataFile* VehicleData::add_data_files() {
  // @@protoc_insertion_point(field_add:jmc_auto.dreamview.VehicleData.data_files)
  return data_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VehicleData_DataFile >*
VehicleData::mutable_data_files() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.dreamview.VehicleData.data_files)
  return &data_files_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::dreamview::VehicleData_DataFile >&
VehicleData::data_files() const {
  // @@protoc_insertion_point(field_list:jmc_auto.dreamview.VehicleData.data_files)
  return data_files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
