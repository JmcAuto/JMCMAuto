// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/prediction/proto/prediction_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace prediction {
class ObstacleConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleConf> {
} _ObstacleConf_default_instance_;
class PredictionConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PredictionConf> {
} _PredictionConf_default_instance_;

namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, obstacle_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, obstacle_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, evaluator_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleConf, predictor_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionConf, obstacle_conf_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(ObstacleConf)},
  { 13, 19, sizeof(PredictionConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictionConf_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/prediction/proto/prediction_conf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ObstacleConf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PredictionConf_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::InitDefaults();
  _ObstacleConf_default_instance_.DefaultConstruct();
  _PredictionConf_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n.modules/prediction/proto/prediction_co"
      "nf.proto\022\023jmc_auto.prediction\0322modules/p"
      "erception/proto/perception_obstacle.prot"
      "o\"\361\004\n\014ObstacleConf\022C\n\robstacle_type\030\001 \001("
      "\0162,.jmc_auto.perception.PerceptionObstac"
      "le.Type\022I\n\017obstacle_status\030\002 \001(\01620.jmc_a"
      "uto.prediction.ObstacleConf.ObstacleStat"
      "us\022G\n\016evaluator_type\030\003 \001(\0162/.jmc_auto.pr"
      "ediction.ObstacleConf.EvaluatorType\022G\n\016p"
      "redictor_type\030\004 \001(\0162/.jmc_auto.predictio"
      "n.ObstacleConf.PredictorType\"G\n\016Obstacle"
      "Status\022\013\n\007ON_LANE\020\000\022\014\n\010OFF_LANE\020\001\022\016\n\nSTA"
      "TIONARY\020\003\022\n\n\006MOVING\020\004\"I\n\rEvaluatorType\022\021"
      "\n\rMLP_EVALUATOR\020\000\022\021\n\rRNN_EVALUATOR\020\001\022\022\n\016"
      "COST_EVALUATOR\020\002\"\252\001\n\rPredictorType\022\033\n\027LA"
      "NE_SEQUENCE_PREDICTOR\020\000\022\027\n\023FREE_MOVE_PRE"
      "DICTOR\020\001\022\026\n\022REGIONAL_PREDICTOR\020\002\022\033\n\027MOVE"
      "_SEQUENCE_PREDICTOR\020\003\022\023\n\017EMPTY_PREDICTOR"
      "\020\004\022\031\n\025SINGLE_LANE_PREDICTOR\020\005\"J\n\016Predict"
      "ionConf\0228\n\robstacle_conf\030\001 \003(\0132!.jmc_aut"
      "o.prediction.ObstacleConf"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 825);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/prediction_conf.proto", &protobuf_RegisterTypes);
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto

const ::google::protobuf::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool ObstacleConf_ObstacleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleConf_ObstacleStatus ObstacleConf::ON_LANE;
const ObstacleConf_ObstacleStatus ObstacleConf::OFF_LANE;
const ObstacleConf_ObstacleStatus ObstacleConf::STATIONARY;
const ObstacleConf_ObstacleStatus ObstacleConf::MOVING;
const ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MIN;
const ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MAX;
const int ObstacleConf::ObstacleStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_enum_descriptors[1];
}
bool ObstacleConf_EvaluatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleConf_EvaluatorType ObstacleConf::MLP_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf::RNN_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf::COST_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MIN;
const ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MAX;
const int ObstacleConf::EvaluatorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleConf_PredictorType_descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_enum_descriptors[2];
}
bool ObstacleConf_PredictorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleConf_PredictorType ObstacleConf::LANE_SEQUENCE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::FREE_MOVE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::REGIONAL_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::MOVE_SEQUENCE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::EMPTY_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::SINGLE_LANE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf::PredictorType_MIN;
const ObstacleConf_PredictorType ObstacleConf::PredictorType_MAX;
const int ObstacleConf::PredictorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleConf::kObstacleTypeFieldNumber;
const int ObstacleConf::kObstacleStatusFieldNumber;
const int ObstacleConf::kEvaluatorTypeFieldNumber;
const int ObstacleConf::kPredictorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleConf::ObstacleConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.ObstacleConf)
}
ObstacleConf::ObstacleConf(const ObstacleConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obstacle_type_, &from.obstacle_type_,
    reinterpret_cast<char*>(&predictor_type_) -
    reinterpret_cast<char*>(&obstacle_type_) + sizeof(predictor_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.ObstacleConf)
}

void ObstacleConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&obstacle_type_, 0, reinterpret_cast<char*>(&predictor_type_) -
    reinterpret_cast<char*>(&obstacle_type_) + sizeof(predictor_type_));
}

ObstacleConf::~ObstacleConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.ObstacleConf)
  SharedDtor();
}

void ObstacleConf::SharedDtor() {
}

void ObstacleConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleConf::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleConf& ObstacleConf::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleConf* ObstacleConf::New(::google::protobuf::Arena* arena) const {
  ObstacleConf* n = new ObstacleConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.ObstacleConf)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&obstacle_type_, 0, reinterpret_cast<char*>(&predictor_type_) -
      reinterpret_cast<char*>(&obstacle_type_) + sizeof(predictor_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.ObstacleConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.PerceptionObstacle.Type obstacle_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_obstacle_type(static_cast< ::jmc_auto::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::prediction::ObstacleConf_ObstacleStatus_IsValid(value)) {
            set_obstacle_status(static_cast< ::jmc_auto::prediction::ObstacleConf_ObstacleStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::prediction::ObstacleConf_EvaluatorType_IsValid(value)) {
            set_evaluator_type(static_cast< ::jmc_auto::prediction::ObstacleConf_EvaluatorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstacleConf.PredictorType predictor_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::prediction::ObstacleConf_PredictorType_IsValid(value)) {
            set_predictor_type(static_cast< ::jmc_auto::prediction::ObstacleConf_PredictorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.ObstacleConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.ObstacleConf)
  return false;
#undef DO_
}

void ObstacleConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.ObstacleConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.PerceptionObstacle.Type obstacle_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->obstacle_type(), output);
  }

  // optional .jmc_auto.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->obstacle_status(), output);
  }

  // optional .jmc_auto.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->evaluator_type(), output);
  }

  // optional .jmc_auto.prediction.ObstacleConf.PredictorType predictor_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->predictor_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.ObstacleConf)
}

::google::protobuf::uint8* ObstacleConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.ObstacleConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.PerceptionObstacle.Type obstacle_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->obstacle_type(), target);
  }

  // optional .jmc_auto.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->obstacle_status(), target);
  }

  // optional .jmc_auto.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->evaluator_type(), target);
  }

  // optional .jmc_auto.prediction.ObstacleConf.PredictorType predictor_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->predictor_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.ObstacleConf)
  return target;
}

size_t ObstacleConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.ObstacleConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.perception.PerceptionObstacle.Type obstacle_type = 1;
    if (has_obstacle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_type());
    }

    // optional .jmc_auto.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
    if (has_obstacle_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacle_status());
    }

    // optional .jmc_auto.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
    if (has_evaluator_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->evaluator_type());
    }

    // optional .jmc_auto.prediction.ObstacleConf.PredictorType predictor_type = 4;
    if (has_predictor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->predictor_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.ObstacleConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.ObstacleConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.ObstacleConf)
    MergeFrom(*source);
  }
}

void ObstacleConf::MergeFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.ObstacleConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_type_ = from.obstacle_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_status_ = from.obstacle_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      evaluator_type_ = from.evaluator_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      predictor_type_ = from.predictor_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleConf::CopyFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleConf::IsInitialized() const {
  return true;
}

void ObstacleConf::Swap(ObstacleConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleConf::InternalSwap(ObstacleConf* other) {
  std::swap(obstacle_type_, other->obstacle_type_);
  std::swap(obstacle_status_, other->obstacle_status_);
  std::swap(evaluator_type_, other->evaluator_type_);
  std::swap(predictor_type_, other->predictor_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleConf::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleConf

// optional .jmc_auto.perception.PerceptionObstacle.Type obstacle_type = 1;
bool ObstacleConf::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleConf::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleConf::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleConf::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
::jmc_auto::perception::PerceptionObstacle_Type ObstacleConf::obstacle_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.ObstacleConf.obstacle_type)
  return static_cast< ::jmc_auto::perception::PerceptionObstacle_Type >(obstacle_type_);
}
void ObstacleConf::set_obstacle_type(::jmc_auto::perception::PerceptionObstacle_Type value) {
  assert(::jmc_auto::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.ObstacleConf.obstacle_type)
}

// optional .jmc_auto.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
bool ObstacleConf::has_obstacle_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObstacleConf::set_has_obstacle_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ObstacleConf::clear_has_obstacle_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObstacleConf::clear_obstacle_status() {
  obstacle_status_ = 0;
  clear_has_obstacle_status();
}
::jmc_auto::prediction::ObstacleConf_ObstacleStatus ObstacleConf::obstacle_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.ObstacleConf.obstacle_status)
  return static_cast< ::jmc_auto::prediction::ObstacleConf_ObstacleStatus >(obstacle_status_);
}
void ObstacleConf::set_obstacle_status(::jmc_auto::prediction::ObstacleConf_ObstacleStatus value) {
  assert(::jmc_auto::prediction::ObstacleConf_ObstacleStatus_IsValid(value));
  set_has_obstacle_status();
  obstacle_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.ObstacleConf.obstacle_status)
}

// optional .jmc_auto.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
bool ObstacleConf::has_evaluator_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObstacleConf::set_has_evaluator_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ObstacleConf::clear_has_evaluator_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObstacleConf::clear_evaluator_type() {
  evaluator_type_ = 0;
  clear_has_evaluator_type();
}
::jmc_auto::prediction::ObstacleConf_EvaluatorType ObstacleConf::evaluator_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.ObstacleConf.evaluator_type)
  return static_cast< ::jmc_auto::prediction::ObstacleConf_EvaluatorType >(evaluator_type_);
}
void ObstacleConf::set_evaluator_type(::jmc_auto::prediction::ObstacleConf_EvaluatorType value) {
  assert(::jmc_auto::prediction::ObstacleConf_EvaluatorType_IsValid(value));
  set_has_evaluator_type();
  evaluator_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.ObstacleConf.evaluator_type)
}

// optional .jmc_auto.prediction.ObstacleConf.PredictorType predictor_type = 4;
bool ObstacleConf::has_predictor_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObstacleConf::set_has_predictor_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ObstacleConf::clear_has_predictor_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObstacleConf::clear_predictor_type() {
  predictor_type_ = 0;
  clear_has_predictor_type();
}
::jmc_auto::prediction::ObstacleConf_PredictorType ObstacleConf::predictor_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.ObstacleConf.predictor_type)
  return static_cast< ::jmc_auto::prediction::ObstacleConf_PredictorType >(predictor_type_);
}
void ObstacleConf::set_predictor_type(::jmc_auto::prediction::ObstacleConf_PredictorType value) {
  assert(::jmc_auto::prediction::ObstacleConf_PredictorType_IsValid(value));
  set_has_predictor_type();
  predictor_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.ObstacleConf.predictor_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionConf::kObstacleConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionConf::PredictionConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.PredictionConf)
}
PredictionConf::PredictionConf(const PredictionConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      obstacle_conf_(from.obstacle_conf_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.PredictionConf)
}

void PredictionConf::SharedCtor() {
  _cached_size_ = 0;
}

PredictionConf::~PredictionConf() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.PredictionConf)
  SharedDtor();
}

void PredictionConf::SharedDtor() {
}

void PredictionConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionConf::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionConf& PredictionConf::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictionConf* PredictionConf::New(::google::protobuf::Arena* arena) const {
  PredictionConf* n = new PredictionConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.PredictionConf)
  obstacle_conf_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.PredictionConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.prediction.ObstacleConf obstacle_conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.PredictionConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.PredictionConf)
  return false;
#undef DO_
}

void PredictionConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.PredictionConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.prediction.ObstacleConf obstacle_conf = 1;
  for (unsigned int i = 0, n = this->obstacle_conf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obstacle_conf(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.PredictionConf)
}

::google::protobuf::uint8* PredictionConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.PredictionConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.prediction.ObstacleConf obstacle_conf = 1;
  for (unsigned int i = 0, n = this->obstacle_conf_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->obstacle_conf(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.PredictionConf)
  return target;
}

size_t PredictionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.PredictionConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.prediction.ObstacleConf obstacle_conf = 1;
  {
    unsigned int count = this->obstacle_conf_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle_conf(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.PredictionConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.PredictionConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.PredictionConf)
    MergeFrom(*source);
  }
}

void PredictionConf::MergeFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.PredictionConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_conf_.MergeFrom(from.obstacle_conf_);
}

void PredictionConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionConf::CopyFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionConf::IsInitialized() const {
  return true;
}

void PredictionConf::Swap(PredictionConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionConf::InternalSwap(PredictionConf* other) {
  obstacle_conf_.InternalSwap(&other->obstacle_conf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionConf::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionConf

// repeated .jmc_auto.prediction.ObstacleConf obstacle_conf = 1;
int PredictionConf::obstacle_conf_size() const {
  return obstacle_conf_.size();
}
void PredictionConf::clear_obstacle_conf() {
  obstacle_conf_.Clear();
}
const ::jmc_auto::prediction::ObstacleConf& PredictionConf::obstacle_conf(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Get(index);
}
::jmc_auto::prediction::ObstacleConf* PredictionConf::mutable_obstacle_conf(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Mutable(index);
}
::jmc_auto::prediction::ObstacleConf* PredictionConf::add_obstacle_conf() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::ObstacleConf >*
PredictionConf::mutable_obstacle_conf() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.PredictionConf.obstacle_conf)
  return &obstacle_conf_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::ObstacleConf >&
PredictionConf::obstacle_conf() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
