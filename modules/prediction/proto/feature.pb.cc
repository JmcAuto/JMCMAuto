// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/prediction/proto/feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace prediction {
class LaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lane> {
} _Lane_default_instance_;
class LaneFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneFeature> {
} _LaneFeature_default_instance_;
class ObstaclePriorityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstaclePriority> {
} _ObstaclePriority_default_instance_;
class FeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feature> {
} _Feature_default_instance_;

namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, current_lane_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, lane_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, nearby_lane_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, lane_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, label_update_time_delta_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, lane_turn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, lane_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, lane_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, angle_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, dist_to_left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneFeature, dist_to_right_boundary_),
  0,
  6,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstaclePriority, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstaclePriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstaclePriority, priority_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, velocity_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, t_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, t_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, t_velocity_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, t_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, t_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, t_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, is_still_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, label_update_time_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, priority_),
  15,
  0,
  1,
  2,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  17,
  18,
  3,
  4,
  5,
  19,
  20,
  6,
  21,
  16,
  23,
  22,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(Lane)},
  { 15, 27, sizeof(LaneFeature)},
  { 34, 40, sizeof(ObstaclePriority)},
  { 41, 70, sizeof(Feature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstaclePriority_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feature_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/prediction/proto/feature.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Lane_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LaneFeature_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ObstaclePriority_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Feature_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::InitDefaults();
  _Lane_default_instance_.DefaultConstruct();
  _LaneFeature_default_instance_.DefaultConstruct();
  _ObstaclePriority_default_instance_.DefaultConstruct();
  _Feature_default_instance_.DefaultConstruct();
  _Lane_default_instance_.get_mutable()->lane_feature_ = const_cast< ::jmc_auto::prediction::LaneFeature*>(
      ::jmc_auto::prediction::LaneFeature::internal_default_instance());
  _Lane_default_instance_.get_mutable()->lane_graph_ = const_cast< ::jmc_auto::prediction::LaneGraph*>(
      ::jmc_auto::prediction::LaneGraph::internal_default_instance());
  _Feature_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Feature_default_instance_.get_mutable()->velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Feature_default_instance_.get_mutable()->acceleration_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Feature_default_instance_.get_mutable()->lane_ = const_cast< ::jmc_auto::prediction::Lane*>(
      ::jmc_auto::prediction::Lane::internal_default_instance());
  _Feature_default_instance_.get_mutable()->t_position_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Feature_default_instance_.get_mutable()->t_velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Feature_default_instance_.get_mutable()->t_acceleration_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Feature_default_instance_.get_mutable()->priority_ = const_cast< ::jmc_auto::prediction::ObstaclePriority*>(
      ::jmc_auto::prediction::ObstaclePriority::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&modules/prediction/proto/feature.proto"
      "\022\023jmc_auto.prediction\032)modules/predictio"
      "n/proto/lane_graph.proto\032#modules/common"
      "/proto/geometry.proto\0322modules/perceptio"
      "n/proto/perception_obstacle.proto\"\222\002\n\004La"
      "ne\022>\n\024current_lane_feature\030\001 \003(\0132 .jmc_a"
      "uto.prediction.LaneFeature\0226\n\014lane_featu"
      "re\030\002 \001(\0132 .jmc_auto.prediction.LaneFeatu"
      "re\022=\n\023nearby_lane_feature\030\003 \003(\0132 .jmc_au"
      "to.prediction.LaneFeature\0222\n\nlane_graph\030"
      "\004 \001(\0132\036.jmc_auto.prediction.LaneGraph\022\037\n"
      "\027label_update_time_delta\030\032 \001(\001\"\251\001\n\013LaneF"
      "eature\022\017\n\007lane_id\030\001 \001(\t\022\026\n\016lane_turn_typ"
      "e\030\002 \001(\r\022\016\n\006lane_s\030\003 \001(\001\022\016\n\006lane_l\030\004 \001(\001\022"
      "\022\n\nangle_diff\030\005 \001(\001\022\035\n\025dist_to_left_boun"
      "dary\030\006 \001(\001\022\036\n\026dist_to_right_boundary\030\007 \001"
      "(\001\"\215\001\n\020ObstaclePriority\022H\n\010priority\030\031 \001("
      "\0162..jmc_auto.prediction.ObstaclePriority"
      ".Priority:\006NORMAL\"/\n\010Priority\022\013\n\007CAUTION"
      "\020\001\022\n\n\006NORMAL\020\002\022\n\n\006IGNORE\020\003\"\361\005\n\007Feature\022\n"
      "\n\002id\030\001 \001(\005\022*\n\010position\030\002 \001(\0132\030.jmc_auto."
      "common.Point3D\022*\n\010velocity\030\003 \001(\0132\030.jmc_a"
      "uto.common.Point3D\022.\n\014acceleration\030\004 \001(\013"
      "2\030.jmc_auto.common.Point3D\022\030\n\020velocity_h"
      "eading\030\005 \001(\001\022\r\n\005speed\030\006 \001(\001\022\013\n\003acc\030\007 \001(\001"
      "\022\r\n\005theta\030\010 \001(\001\022\016\n\006length\030\t \001(\001\022\r\n\005width"
      "\030\n \001(\001\022\016\n\006height\030\013 \001(\001\022\025\n\rtracking_time\030"
      "\014 \001(\001\022\021\n\ttimestamp\030\r \001(\001\022\'\n\004lane\030\016 \001(\0132\031"
      ".jmc_auto.prediction.Lane\022,\n\nt_position\030"
      "\020 \001(\0132\030.jmc_auto.common.Point3D\0220\n\nt_vel"
      "ocity\030\021 \001(\0132\030.jmc_auto.common.Point3DB\002\030"
      "\001\022\036\n\022t_velocity_heading\030\022 \001(\001B\002\030\001\022\023\n\007t_s"
      "peed\030\023 \001(\001B\002\030\001\0224\n\016t_acceleration\030\024 \001(\0132\030"
      ".jmc_auto.common.Point3DB\002\030\001\022\021\n\005t_acc\030\025 "
      "\001(\001B\002\030\001\022\027\n\010is_still\030\026 \001(\010:\005false\022:\n\004type"
      "\030\027 \001(\0162,.jmc_auto.perception.PerceptionO"
      "bstacle.Type\022\037\n\027label_update_time_delta\030"
      "\030 \001(\001\0227\n\010priority\030\031 \001(\0132%.jmc_auto.predi"
      "ction.ObstaclePriority"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/feature.proto", &protobuf_RegisterTypes);
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto

const ::google::protobuf::EnumDescriptor* ObstaclePriority_Priority_descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_enum_descriptors[0];
}
bool ObstaclePriority_Priority_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstaclePriority_Priority ObstaclePriority::CAUTION;
const ObstaclePriority_Priority ObstaclePriority::NORMAL;
const ObstaclePriority_Priority ObstaclePriority::IGNORE;
const ObstaclePriority_Priority ObstaclePriority::Priority_MIN;
const ObstaclePriority_Priority ObstaclePriority::Priority_MAX;
const int ObstaclePriority::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kCurrentLaneFeatureFieldNumber;
const int Lane::kLaneFeatureFieldNumber;
const int Lane::kNearbyLaneFeatureFieldNumber;
const int Lane::kLaneGraphFieldNumber;
const int Lane::kLabelUpdateTimeDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      current_lane_feature_(from.current_lane_feature_),
      nearby_lane_feature_(from.nearby_lane_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_feature()) {
    lane_feature_ = new ::jmc_auto::prediction::LaneFeature(*from.lane_feature_);
  } else {
    lane_feature_ = NULL;
  }
  if (from.has_lane_graph()) {
    lane_graph_ = new ::jmc_auto::prediction::LaneGraph(*from.lane_graph_);
  } else {
    lane_graph_ = NULL;
  }
  label_update_time_delta_ = from.label_update_time_delta_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.Lane)
}

void Lane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_feature_, 0, reinterpret_cast<char*>(&label_update_time_delta_) -
    reinterpret_cast<char*>(&lane_feature_) + sizeof(label_update_time_delta_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) {
    delete lane_feature_;
  }
  if (this != internal_default_instance()) {
    delete lane_graph_;
  }
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.Lane)
  current_lane_feature_.Clear();
  nearby_lane_feature_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_lane_feature()) {
      GOOGLE_DCHECK(lane_feature_ != NULL);
      lane_feature_->::jmc_auto::prediction::LaneFeature::Clear();
    }
    if (has_lane_graph()) {
      GOOGLE_DCHECK(lane_graph_ != NULL);
      lane_graph_->::jmc_auto::prediction::LaneGraph::Clear();
    }
  }
  label_update_time_delta_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.prediction.LaneFeature current_lane_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_current_lane_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.LaneFeature lane_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.prediction.LaneFeature nearby_lane_feature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nearby_lane_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.LaneGraph lane_graph = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double label_update_time_delta = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u)) {
          set_has_label_update_time_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &label_update_time_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned int i = 0, n = this->current_lane_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->current_lane_feature(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lane_feature_, output);
  }

  // repeated .jmc_auto.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned int i = 0, n = this->nearby_lane_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nearby_lane_feature(i), output);
  }

  // optional .jmc_auto.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lane_graph_, output);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->label_update_time_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned int i = 0, n = this->current_lane_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->current_lane_feature(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lane_feature_, deterministic, target);
  }

  // repeated .jmc_auto.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned int i = 0, n = this->nearby_lane_feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nearby_lane_feature(i), deterministic, target);
  }

  // optional .jmc_auto.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lane_graph_, deterministic, target);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->label_update_time_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.prediction.LaneFeature current_lane_feature = 1;
  {
    unsigned int count = this->current_lane_feature_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_lane_feature(i));
    }
  }

  // repeated .jmc_auto.prediction.LaneFeature nearby_lane_feature = 3;
  {
    unsigned int count = this->nearby_lane_feature_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nearby_lane_feature(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.prediction.LaneFeature lane_feature = 2;
    if (has_lane_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_feature_);
    }

    // optional .jmc_auto.prediction.LaneGraph lane_graph = 4;
    if (has_lane_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_graph_);
    }

    // optional double label_update_time_delta = 26;
    if (has_label_update_time_delta()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_lane_feature_.MergeFrom(from.current_lane_feature_);
  nearby_lane_feature_.MergeFrom(from.nearby_lane_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lane_feature()->::jmc_auto::prediction::LaneFeature::MergeFrom(from.lane_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_graph()->::jmc_auto::prediction::LaneGraph::MergeFrom(from.lane_graph());
    }
    if (cached_has_bits & 0x00000004u) {
      label_update_time_delta_ = from.label_update_time_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  current_lane_feature_.InternalSwap(&other->current_lane_feature_);
  nearby_lane_feature_.InternalSwap(&other->nearby_lane_feature_);
  std::swap(lane_feature_, other->lane_feature_);
  std::swap(lane_graph_, other->lane_graph_);
  std::swap(label_update_time_delta_, other->label_update_time_delta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane

// repeated .jmc_auto.prediction.LaneFeature current_lane_feature = 1;
int Lane::current_lane_feature_size() const {
  return current_lane_feature_.size();
}
void Lane::clear_current_lane_feature() {
  current_lane_feature_.Clear();
}
const ::jmc_auto::prediction::LaneFeature& Lane::current_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Lane.current_lane_feature)
  return current_lane_feature_.Get(index);
}
::jmc_auto::prediction::LaneFeature* Lane::mutable_current_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Lane.current_lane_feature)
  return current_lane_feature_.Mutable(index);
}
::jmc_auto::prediction::LaneFeature* Lane::add_current_lane_feature() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.Lane.current_lane_feature)
  return current_lane_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::LaneFeature >*
Lane::mutable_current_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.Lane.current_lane_feature)
  return &current_lane_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::LaneFeature >&
Lane::current_lane_feature() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.Lane.current_lane_feature)
  return current_lane_feature_;
}

// optional .jmc_auto.prediction.LaneFeature lane_feature = 2;
bool Lane::has_lane_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lane::set_has_lane_feature() {
  _has_bits_[0] |= 0x00000001u;
}
void Lane::clear_has_lane_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_lane_feature() {
  if (lane_feature_ != NULL) lane_feature_->::jmc_auto::prediction::LaneFeature::Clear();
  clear_has_lane_feature();
}
const ::jmc_auto::prediction::LaneFeature& Lane::lane_feature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Lane.lane_feature)
  return lane_feature_ != NULL ? *lane_feature_
                         : *::jmc_auto::prediction::LaneFeature::internal_default_instance();
}
::jmc_auto::prediction::LaneFeature* Lane::mutable_lane_feature() {
  set_has_lane_feature();
  if (lane_feature_ == NULL) {
    lane_feature_ = new ::jmc_auto::prediction::LaneFeature;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Lane.lane_feature)
  return lane_feature_;
}
::jmc_auto::prediction::LaneFeature* Lane::release_lane_feature() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Lane.lane_feature)
  clear_has_lane_feature();
  ::jmc_auto::prediction::LaneFeature* temp = lane_feature_;
  lane_feature_ = NULL;
  return temp;
}
void Lane::set_allocated_lane_feature(::jmc_auto::prediction::LaneFeature* lane_feature) {
  delete lane_feature_;
  lane_feature_ = lane_feature;
  if (lane_feature) {
    set_has_lane_feature();
  } else {
    clear_has_lane_feature();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Lane.lane_feature)
}

// repeated .jmc_auto.prediction.LaneFeature nearby_lane_feature = 3;
int Lane::nearby_lane_feature_size() const {
  return nearby_lane_feature_.size();
}
void Lane::clear_nearby_lane_feature() {
  nearby_lane_feature_.Clear();
}
const ::jmc_auto::prediction::LaneFeature& Lane::nearby_lane_feature(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_.Get(index);
}
::jmc_auto::prediction::LaneFeature* Lane::mutable_nearby_lane_feature(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_.Mutable(index);
}
::jmc_auto::prediction::LaneFeature* Lane::add_nearby_lane_feature() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::LaneFeature >*
Lane::mutable_nearby_lane_feature() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.Lane.nearby_lane_feature)
  return &nearby_lane_feature_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::LaneFeature >&
Lane::nearby_lane_feature() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.Lane.nearby_lane_feature)
  return nearby_lane_feature_;
}

// optional .jmc_auto.prediction.LaneGraph lane_graph = 4;
bool Lane::has_lane_graph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lane::set_has_lane_graph() {
  _has_bits_[0] |= 0x00000002u;
}
void Lane::clear_has_lane_graph() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_lane_graph() {
  if (lane_graph_ != NULL) lane_graph_->::jmc_auto::prediction::LaneGraph::Clear();
  clear_has_lane_graph();
}
const ::jmc_auto::prediction::LaneGraph& Lane::lane_graph() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Lane.lane_graph)
  return lane_graph_ != NULL ? *lane_graph_
                         : *::jmc_auto::prediction::LaneGraph::internal_default_instance();
}
::jmc_auto::prediction::LaneGraph* Lane::mutable_lane_graph() {
  set_has_lane_graph();
  if (lane_graph_ == NULL) {
    lane_graph_ = new ::jmc_auto::prediction::LaneGraph;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Lane.lane_graph)
  return lane_graph_;
}
::jmc_auto::prediction::LaneGraph* Lane::release_lane_graph() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Lane.lane_graph)
  clear_has_lane_graph();
  ::jmc_auto::prediction::LaneGraph* temp = lane_graph_;
  lane_graph_ = NULL;
  return temp;
}
void Lane::set_allocated_lane_graph(::jmc_auto::prediction::LaneGraph* lane_graph) {
  delete lane_graph_;
  lane_graph_ = lane_graph;
  if (lane_graph) {
    set_has_lane_graph();
  } else {
    clear_has_lane_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Lane.lane_graph)
}

// optional double label_update_time_delta = 26;
bool Lane::has_label_update_time_delta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lane::set_has_label_update_time_delta() {
  _has_bits_[0] |= 0x00000004u;
}
void Lane::clear_has_label_update_time_delta() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lane::clear_label_update_time_delta() {
  label_update_time_delta_ = 0;
  clear_has_label_update_time_delta();
}
double Lane::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Lane.label_update_time_delta)
  return label_update_time_delta_;
}
void Lane::set_label_update_time_delta(double value) {
  set_has_label_update_time_delta();
  label_update_time_delta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Lane.label_update_time_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneFeature::kLaneIdFieldNumber;
const int LaneFeature::kLaneTurnTypeFieldNumber;
const int LaneFeature::kLaneSFieldNumber;
const int LaneFeature::kLaneLFieldNumber;
const int LaneFeature::kAngleDiffFieldNumber;
const int LaneFeature::kDistToLeftBoundaryFieldNumber;
const int LaneFeature::kDistToRightBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneFeature::LaneFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.LaneFeature)
}
LaneFeature::LaneFeature(const LaneFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    reinterpret_cast<char*>(&lane_turn_type_) -
    reinterpret_cast<char*>(&lane_s_) + sizeof(lane_turn_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.LaneFeature)
}

void LaneFeature::SharedCtor() {
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_s_, 0, reinterpret_cast<char*>(&lane_turn_type_) -
    reinterpret_cast<char*>(&lane_s_) + sizeof(lane_turn_type_));
}

LaneFeature::~LaneFeature() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.LaneFeature)
  SharedDtor();
}

void LaneFeature::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneFeature::descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneFeature& LaneFeature::default_instance() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneFeature* LaneFeature::New(::google::protobuf::Arena* arena) const {
  LaneFeature* n = new LaneFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.LaneFeature)
  if (has_lane_id()) {
    GOOGLE_DCHECK(!lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lane_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&lane_s_, 0, reinterpret_cast<char*>(&lane_turn_type_) -
      reinterpret_cast<char*>(&lane_s_) + sizeof(lane_turn_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.LaneFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.prediction.LaneFeature.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_turn_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lane_turn_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_turn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_lane_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_l = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_lane_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle_diff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_angle_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dist_to_left_boundary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_dist_to_left_boundary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_left_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dist_to_right_boundary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_dist_to_right_boundary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_right_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.LaneFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.LaneFeature)
  return false;
#undef DO_
}

void LaneFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.LaneFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.prediction.LaneFeature.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lane_turn_type(), output);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_s(), output);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lane_l(), output);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle_diff(), output);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dist_to_left_boundary(), output);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dist_to_right_boundary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.LaneFeature)
}

::google::protobuf::uint8* LaneFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.LaneFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.prediction.LaneFeature.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lane_turn_type(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lane_l(), target);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->angle_diff(), target);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dist_to_left_boundary(), target);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dist_to_right_boundary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.LaneFeature)
  return target;
}

size_t LaneFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.LaneFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double lane_s = 3;
    if (has_lane_s()) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (has_lane_l()) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 5;
    if (has_angle_diff()) {
      total_size += 1 + 8;
    }

    // optional double dist_to_left_boundary = 6;
    if (has_dist_to_left_boundary()) {
      total_size += 1 + 8;
    }

    // optional double dist_to_right_boundary = 7;
    if (has_dist_to_right_boundary()) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 2;
    if (has_lane_turn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_turn_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.LaneFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.LaneFeature)
    MergeFrom(*source);
  }
}

void LaneFeature::MergeFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      angle_diff_ = from.angle_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      dist_to_left_boundary_ = from.dist_to_left_boundary_;
    }
    if (cached_has_bits & 0x00000020u) {
      dist_to_right_boundary_ = from.dist_to_right_boundary_;
    }
    if (cached_has_bits & 0x00000040u) {
      lane_turn_type_ = from.lane_turn_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneFeature::CopyFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeature::IsInitialized() const {
  return true;
}

void LaneFeature::Swap(LaneFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneFeature::InternalSwap(LaneFeature* other) {
  lane_id_.Swap(&other->lane_id_);
  std::swap(lane_s_, other->lane_s_);
  std::swap(lane_l_, other->lane_l_);
  std::swap(angle_diff_, other->angle_diff_);
  std::swap(dist_to_left_boundary_, other->dist_to_left_boundary_);
  std::swap(dist_to_right_boundary_, other->dist_to_right_boundary_);
  std::swap(lane_turn_type_, other->lane_turn_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneFeature::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneFeature

// optional string lane_id = 1;
bool LaneFeature::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneFeature::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneFeature::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneFeature::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
const ::std::string& LaneFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.lane_id)
  return lane_id_.GetNoArena();
}
void LaneFeature::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.lane_id)
}
#if LANG_CXX11
void LaneFeature::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.prediction.LaneFeature.lane_id)
}
#endif
void LaneFeature::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.prediction.LaneFeature.lane_id)
}
void LaneFeature::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.prediction.LaneFeature.lane_id)
}
::std::string* LaneFeature::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.LaneFeature.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaneFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.LaneFeature.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaneFeature::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.LaneFeature.lane_id)
}

// optional uint32 lane_turn_type = 2;
bool LaneFeature::has_lane_turn_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaneFeature::set_has_lane_turn_type() {
  _has_bits_[0] |= 0x00000040u;
}
void LaneFeature::clear_has_lane_turn_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaneFeature::clear_lane_turn_type() {
  lane_turn_type_ = 0u;
  clear_has_lane_turn_type();
}
::google::protobuf::uint32 LaneFeature::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.lane_turn_type)
  return lane_turn_type_;
}
void LaneFeature::set_lane_turn_type(::google::protobuf::uint32 value) {
  set_has_lane_turn_type();
  lane_turn_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.lane_turn_type)
}

// optional double lane_s = 3;
bool LaneFeature::has_lane_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneFeature::set_has_lane_s() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneFeature::clear_has_lane_s() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneFeature::clear_lane_s() {
  lane_s_ = 0;
  clear_has_lane_s();
}
double LaneFeature::lane_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.lane_s)
  return lane_s_;
}
void LaneFeature::set_lane_s(double value) {
  set_has_lane_s();
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.lane_s)
}

// optional double lane_l = 4;
bool LaneFeature::has_lane_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneFeature::set_has_lane_l() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneFeature::clear_has_lane_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneFeature::clear_lane_l() {
  lane_l_ = 0;
  clear_has_lane_l();
}
double LaneFeature::lane_l() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.lane_l)
  return lane_l_;
}
void LaneFeature::set_lane_l(double value) {
  set_has_lane_l();
  lane_l_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.lane_l)
}

// optional double angle_diff = 5;
bool LaneFeature::has_angle_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneFeature::set_has_angle_diff() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneFeature::clear_has_angle_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneFeature::clear_angle_diff() {
  angle_diff_ = 0;
  clear_has_angle_diff();
}
double LaneFeature::angle_diff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.angle_diff)
  return angle_diff_;
}
void LaneFeature::set_angle_diff(double value) {
  set_has_angle_diff();
  angle_diff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.angle_diff)
}

// optional double dist_to_left_boundary = 6;
bool LaneFeature::has_dist_to_left_boundary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneFeature::set_has_dist_to_left_boundary() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneFeature::clear_has_dist_to_left_boundary() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneFeature::clear_dist_to_left_boundary() {
  dist_to_left_boundary_ = 0;
  clear_has_dist_to_left_boundary();
}
double LaneFeature::dist_to_left_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.dist_to_left_boundary)
  return dist_to_left_boundary_;
}
void LaneFeature::set_dist_to_left_boundary(double value) {
  set_has_dist_to_left_boundary();
  dist_to_left_boundary_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.dist_to_left_boundary)
}

// optional double dist_to_right_boundary = 7;
bool LaneFeature::has_dist_to_right_boundary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneFeature::set_has_dist_to_right_boundary() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneFeature::clear_has_dist_to_right_boundary() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneFeature::clear_dist_to_right_boundary() {
  dist_to_right_boundary_ = 0;
  clear_has_dist_to_right_boundary();
}
double LaneFeature::dist_to_right_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.LaneFeature.dist_to_right_boundary)
  return dist_to_right_boundary_;
}
void LaneFeature::set_dist_to_right_boundary(double value) {
  set_has_dist_to_right_boundary();
  dist_to_right_boundary_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.LaneFeature.dist_to_right_boundary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstaclePriority::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstaclePriority::ObstaclePriority()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.ObstaclePriority)
}
ObstaclePriority::ObstaclePriority(const ObstaclePriority& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.ObstaclePriority)
}

void ObstaclePriority::SharedCtor() {
  _cached_size_ = 0;
  priority_ = 2;
}

ObstaclePriority::~ObstaclePriority() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.ObstaclePriority)
  SharedDtor();
}

void ObstaclePriority::SharedDtor() {
}

void ObstaclePriority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstaclePriority::descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstaclePriority& ObstaclePriority::default_instance() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstaclePriority* ObstaclePriority::New(::google::protobuf::Arena* arena) const {
  ObstaclePriority* n = new ObstaclePriority;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstaclePriority::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.ObstaclePriority)
  priority_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstaclePriority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.ObstaclePriority)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::prediction::ObstaclePriority_Priority_IsValid(value)) {
            set_priority(static_cast< ::jmc_auto::prediction::ObstaclePriority_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.ObstaclePriority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.ObstaclePriority)
  return false;
#undef DO_
}

void ObstaclePriority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.ObstaclePriority)
}

::google::protobuf::uint8* ObstaclePriority::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.ObstaclePriority)
  return target;
}

size_t ObstaclePriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.ObstaclePriority)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (has_priority()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstaclePriority::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstaclePriority* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstaclePriority>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.ObstaclePriority)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.ObstaclePriority)
    MergeFrom(*source);
  }
}

void ObstaclePriority::MergeFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_priority()) {
    set_priority(from.priority());
  }
}

void ObstaclePriority::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstaclePriority::CopyFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePriority::IsInitialized() const {
  return true;
}

void ObstaclePriority::Swap(ObstaclePriority* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstaclePriority::InternalSwap(ObstaclePriority* other) {
  std::swap(priority_, other->priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstaclePriority::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstaclePriority

// optional .jmc_auto.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
bool ObstaclePriority::has_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstaclePriority::set_has_priority() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstaclePriority::clear_has_priority() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstaclePriority::clear_priority() {
  priority_ = 2;
  clear_has_priority();
}
::jmc_auto::prediction::ObstaclePriority_Priority ObstaclePriority::priority() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.ObstaclePriority.priority)
  return static_cast< ::jmc_auto::prediction::ObstaclePriority_Priority >(priority_);
}
void ObstaclePriority::set_priority(::jmc_auto::prediction::ObstaclePriority_Priority value) {
  assert(::jmc_auto::prediction::ObstaclePriority_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.ObstaclePriority.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kIdFieldNumber;
const int Feature::kPositionFieldNumber;
const int Feature::kVelocityFieldNumber;
const int Feature::kAccelerationFieldNumber;
const int Feature::kVelocityHeadingFieldNumber;
const int Feature::kSpeedFieldNumber;
const int Feature::kAccFieldNumber;
const int Feature::kThetaFieldNumber;
const int Feature::kLengthFieldNumber;
const int Feature::kWidthFieldNumber;
const int Feature::kHeightFieldNumber;
const int Feature::kTrackingTimeFieldNumber;
const int Feature::kTimestampFieldNumber;
const int Feature::kLaneFieldNumber;
const int Feature::kTPositionFieldNumber;
const int Feature::kTVelocityFieldNumber;
const int Feature::kTVelocityHeadingFieldNumber;
const int Feature::kTSpeedFieldNumber;
const int Feature::kTAccelerationFieldNumber;
const int Feature::kTAccFieldNumber;
const int Feature::kIsStillFieldNumber;
const int Feature::kTypeFieldNumber;
const int Feature::kLabelUpdateTimeDeltaFieldNumber;
const int Feature::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::jmc_auto::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::jmc_auto::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_lane()) {
    lane_ = new ::jmc_auto::prediction::Lane(*from.lane_);
  } else {
    lane_ = NULL;
  }
  if (from.has_t_position()) {
    t_position_ = new ::jmc_auto::common::Point3D(*from.t_position_);
  } else {
    t_position_ = NULL;
  }
  if (from.has_t_velocity()) {
    t_velocity_ = new ::jmc_auto::common::Point3D(*from.t_velocity_);
  } else {
    t_velocity_ = NULL;
  }
  if (from.has_t_acceleration()) {
    t_acceleration_ = new ::jmc_auto::common::Point3D(*from.t_acceleration_);
  } else {
    t_acceleration_ = NULL;
  }
  if (from.has_priority()) {
    priority_ = new ::jmc_auto::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = NULL;
  }
  ::memcpy(&velocity_heading_, &from.velocity_heading_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&velocity_heading_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.Feature)
}

void Feature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&position_) + sizeof(type_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
  if (this != internal_default_instance()) {
    delete lane_;
  }
  if (this != internal_default_instance()) {
    delete t_position_;
  }
  if (this != internal_default_instance()) {
    delete t_velocity_;
  }
  if (this != internal_default_instance()) {
    delete t_acceleration_;
  }
  if (this != internal_default_instance()) {
    delete priority_;
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feature& Feature::default_instance() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.Feature)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_acceleration()) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_lane()) {
      GOOGLE_DCHECK(lane_ != NULL);
      lane_->::jmc_auto::prediction::Lane::Clear();
    }
    if (has_t_position()) {
      GOOGLE_DCHECK(t_position_ != NULL);
      t_position_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_t_velocity()) {
      GOOGLE_DCHECK(t_velocity_ != NULL);
      t_velocity_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_t_acceleration()) {
      GOOGLE_DCHECK(t_acceleration_ != NULL);
      t_acceleration_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_priority()) {
      GOOGLE_DCHECK(priority_ != NULL);
      priority_->::jmc_auto::prediction::ObstaclePriority::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&velocity_heading_, 0, reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&velocity_heading_) + sizeof(id_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&is_still_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&is_still_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_velocity_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.Lane lane = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D t_position = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D t_velocity = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_velocity_heading = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_t_velocity_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_velocity_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_speed = 19 [deprecated = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_t_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D t_acceleration = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_acc = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_t_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_still = 22 [default = false];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_is_still();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_still_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.PerceptionObstacle.Type type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double label_update_time_delta = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_label_update_time_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &label_update_time_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstaclePriority priority = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .jmc_auto.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .jmc_auto.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // optional .jmc_auto.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->acceleration_, output);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->velocity_heading(), output);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc(), output);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->theta(), output);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->width(), output);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->height(), output);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->tracking_time(), output);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->timestamp(), output);
  }

  // optional .jmc_auto.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->lane_, output);
  }

  // optional .jmc_auto.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->t_position_, output);
  }

  // optional .jmc_auto.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->t_velocity_, output);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->t_velocity_heading(), output);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->t_speed(), output);
  }

  // optional .jmc_auto.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->t_acceleration_, output);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->t_acc(), output);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_still(), output);
  }

  // optional .jmc_auto.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->type(), output);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->label_update_time_delta(), output);
  }

  // optional .jmc_auto.prediction.ObstaclePriority priority = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->priority_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.Feature)
}

::google::protobuf::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .jmc_auto.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->velocity_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->acceleration_, deterministic, target);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->velocity_heading(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc(), target);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->theta(), target);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->width(), target);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->height(), target);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->tracking_time(), target);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->timestamp(), target);
  }

  // optional .jmc_auto.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->lane_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->t_position_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->t_velocity_, deterministic, target);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->t_velocity_heading(), target);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->t_speed(), target);
  }

  // optional .jmc_auto.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->t_acceleration_, deterministic, target);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->t_acc(), target);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_still(), target);
  }

  // optional .jmc_auto.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->type(), target);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->label_update_time_delta(), target);
  }

  // optional .jmc_auto.prediction.ObstaclePriority priority = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->priority_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.Feature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.common.Point3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .jmc_auto.common.Point3D velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .jmc_auto.common.Point3D acceleration = 4;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acceleration_);
    }

    // optional .jmc_auto.prediction.Lane lane = 14;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_);
    }

    // optional .jmc_auto.common.Point3D t_position = 16;
    if (has_t_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->t_position_);
    }

    // optional .jmc_auto.common.Point3D t_velocity = 17 [deprecated = true];
    if (has_t_velocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->t_velocity_);
    }

    // optional .jmc_auto.common.Point3D t_acceleration = 20 [deprecated = true];
    if (has_t_acceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->t_acceleration_);
    }

    // optional .jmc_auto.prediction.ObstaclePriority priority = 25;
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->priority_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double velocity_heading = 5;
    if (has_velocity_heading()) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acc = 7;
    if (has_acc()) {
      total_size += 1 + 8;
    }

    // optional double theta = 8;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 10;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 11;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool is_still = 22 [default = false];
    if (has_is_still()) {
      total_size += 2 + 1;
    }

    // optional double tracking_time = 12;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 13;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double t_velocity_heading = 18 [deprecated = true];
    if (has_t_velocity_heading()) {
      total_size += 2 + 8;
    }

    // optional double t_speed = 19 [deprecated = true];
    if (has_t_speed()) {
      total_size += 2 + 8;
    }

    // optional double t_acc = 21 [deprecated = true];
    if (has_t_acc()) {
      total_size += 2 + 8;
    }

    // optional double label_update_time_delta = 24;
    if (has_label_update_time_delta()) {
      total_size += 2 + 8;
    }

    // optional .jmc_auto.perception.PerceptionObstacle.Type type = 23;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::jmc_auto::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::jmc_auto::common::Point3D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lane()->::jmc_auto::prediction::Lane::MergeFrom(from.lane());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_t_position()->::jmc_auto::common::Point3D::MergeFrom(from.t_position());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_t_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.t_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_t_acceleration()->::jmc_auto::common::Point3D::MergeFrom(from.t_acceleration());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_priority()->::jmc_auto::prediction::ObstaclePriority::MergeFrom(from.priority());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      velocity_heading_ = from.velocity_heading_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      acc_ = from.acc_;
    }
    if (cached_has_bits & 0x00000800u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00001000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00002000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00004000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00008000u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      is_still_ = from.is_still_;
    }
    if (cached_has_bits & 0x00020000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      t_velocity_heading_ = from.t_velocity_heading_;
    }
    if (cached_has_bits & 0x00100000u) {
      t_speed_ = from.t_speed_;
    }
    if (cached_has_bits & 0x00200000u) {
      t_acc_ = from.t_acc_;
    }
    if (cached_has_bits & 0x00400000u) {
      label_update_time_delta_ = from.label_update_time_delta_;
    }
    if (cached_has_bits & 0x00800000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(lane_, other->lane_);
  std::swap(t_position_, other->t_position_);
  std::swap(t_velocity_, other->t_velocity_);
  std::swap(t_acceleration_, other->t_acceleration_);
  std::swap(priority_, other->priority_);
  std::swap(velocity_heading_, other->velocity_heading_);
  std::swap(speed_, other->speed_);
  std::swap(acc_, other->acc_);
  std::swap(theta_, other->theta_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(id_, other->id_);
  std::swap(is_still_, other->is_still_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(t_velocity_heading_, other->t_velocity_heading_);
  std::swap(t_speed_, other->t_speed_);
  std::swap(t_acc_, other->t_acc_);
  std::swap(label_update_time_delta_, other->label_update_time_delta_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional int32 id = 1;
bool Feature::has_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Feature::set_has_id() {
  _has_bits_[0] |= 0x00008000u;
}
void Feature::clear_has_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void Feature::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Feature::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.id)
  return id_;
}
void Feature::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.id)
}

// optional .jmc_auto.common.Point3D position = 2;
bool Feature::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Feature::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void Feature::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void Feature::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::Point3D::Clear();
  clear_has_position();
}
const ::jmc_auto::common::Point3D& Feature::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Feature::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.position)
  return position_;
}
::jmc_auto::common::Point3D* Feature::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.position)
  clear_has_position();
  ::jmc_auto::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
void Feature::set_allocated_position(::jmc_auto::common::Point3D* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.position)
}

// optional .jmc_auto.common.Point3D velocity = 3;
bool Feature::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Feature::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void Feature::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Feature::clear_velocity() {
  if (velocity_ != NULL) velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_velocity();
}
const ::jmc_auto::common::Point3D& Feature::velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Feature::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.velocity)
  return velocity_;
}
::jmc_auto::common::Point3D* Feature::release_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.velocity)
  clear_has_velocity();
  ::jmc_auto::common::Point3D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Feature::set_allocated_velocity(::jmc_auto::common::Point3D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.velocity)
}

// optional .jmc_auto.common.Point3D acceleration = 4;
bool Feature::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Feature::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void Feature::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void Feature::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::jmc_auto::common::Point3D::Clear();
  clear_has_acceleration();
}
const ::jmc_auto::common::Point3D& Feature::acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Feature::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.acceleration)
  return acceleration_;
}
::jmc_auto::common::Point3D* Feature::release_acceleration() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.acceleration)
  clear_has_acceleration();
  ::jmc_auto::common::Point3D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void Feature::set_allocated_acceleration(::jmc_auto::common::Point3D* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.acceleration)
}

// optional double velocity_heading = 5;
bool Feature::has_velocity_heading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Feature::set_has_velocity_heading() {
  _has_bits_[0] |= 0x00000100u;
}
void Feature::clear_has_velocity_heading() {
  _has_bits_[0] &= ~0x00000100u;
}
void Feature::clear_velocity_heading() {
  velocity_heading_ = 0;
  clear_has_velocity_heading();
}
double Feature::velocity_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.velocity_heading)
  return velocity_heading_;
}
void Feature::set_velocity_heading(double value) {
  set_has_velocity_heading();
  velocity_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.velocity_heading)
}

// optional double speed = 6;
bool Feature::has_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Feature::set_has_speed() {
  _has_bits_[0] |= 0x00000200u;
}
void Feature::clear_has_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
void Feature::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double Feature::speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.speed)
  return speed_;
}
void Feature::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.speed)
}

// optional double acc = 7;
bool Feature::has_acc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Feature::set_has_acc() {
  _has_bits_[0] |= 0x00000400u;
}
void Feature::clear_has_acc() {
  _has_bits_[0] &= ~0x00000400u;
}
void Feature::clear_acc() {
  acc_ = 0;
  clear_has_acc();
}
double Feature::acc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.acc)
  return acc_;
}
void Feature::set_acc(double value) {
  set_has_acc();
  acc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.acc)
}

// optional double theta = 8;
bool Feature::has_theta() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Feature::set_has_theta() {
  _has_bits_[0] |= 0x00000800u;
}
void Feature::clear_has_theta() {
  _has_bits_[0] &= ~0x00000800u;
}
void Feature::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double Feature::theta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.theta)
  return theta_;
}
void Feature::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.theta)
}

// optional double length = 9;
bool Feature::has_length() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Feature::set_has_length() {
  _has_bits_[0] |= 0x00001000u;
}
void Feature::clear_has_length() {
  _has_bits_[0] &= ~0x00001000u;
}
void Feature::clear_length() {
  length_ = 0;
  clear_has_length();
}
double Feature::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.length)
  return length_;
}
void Feature::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.length)
}

// optional double width = 10;
bool Feature::has_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Feature::set_has_width() {
  _has_bits_[0] |= 0x00002000u;
}
void Feature::clear_has_width() {
  _has_bits_[0] &= ~0x00002000u;
}
void Feature::clear_width() {
  width_ = 0;
  clear_has_width();
}
double Feature::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.width)
  return width_;
}
void Feature::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.width)
}

// optional double height = 11;
bool Feature::has_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Feature::set_has_height() {
  _has_bits_[0] |= 0x00004000u;
}
void Feature::clear_has_height() {
  _has_bits_[0] &= ~0x00004000u;
}
void Feature::clear_height() {
  height_ = 0;
  clear_has_height();
}
double Feature::height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.height)
  return height_;
}
void Feature::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.height)
}

// optional double tracking_time = 12;
bool Feature::has_tracking_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Feature::set_has_tracking_time() {
  _has_bits_[0] |= 0x00020000u;
}
void Feature::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00020000u;
}
void Feature::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double Feature::tracking_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.tracking_time)
  return tracking_time_;
}
void Feature::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.tracking_time)
}

// optional double timestamp = 13;
bool Feature::has_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Feature::set_has_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
void Feature::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void Feature::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double Feature::timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.timestamp)
  return timestamp_;
}
void Feature::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.timestamp)
}

// optional .jmc_auto.prediction.Lane lane = 14;
bool Feature::has_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Feature::set_has_lane() {
  _has_bits_[0] |= 0x00000008u;
}
void Feature::clear_has_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
void Feature::clear_lane() {
  if (lane_ != NULL) lane_->::jmc_auto::prediction::Lane::Clear();
  clear_has_lane();
}
const ::jmc_auto::prediction::Lane& Feature::lane() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.lane)
  return lane_ != NULL ? *lane_
                         : *::jmc_auto::prediction::Lane::internal_default_instance();
}
::jmc_auto::prediction::Lane* Feature::mutable_lane() {
  set_has_lane();
  if (lane_ == NULL) {
    lane_ = new ::jmc_auto::prediction::Lane;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.lane)
  return lane_;
}
::jmc_auto::prediction::Lane* Feature::release_lane() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.lane)
  clear_has_lane();
  ::jmc_auto::prediction::Lane* temp = lane_;
  lane_ = NULL;
  return temp;
}
void Feature::set_allocated_lane(::jmc_auto::prediction::Lane* lane) {
  delete lane_;
  lane_ = lane;
  if (lane) {
    set_has_lane();
  } else {
    clear_has_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.lane)
}

// optional .jmc_auto.common.Point3D t_position = 16;
bool Feature::has_t_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Feature::set_has_t_position() {
  _has_bits_[0] |= 0x00000010u;
}
void Feature::clear_has_t_position() {
  _has_bits_[0] &= ~0x00000010u;
}
void Feature::clear_t_position() {
  if (t_position_ != NULL) t_position_->::jmc_auto::common::Point3D::Clear();
  clear_has_t_position();
}
const ::jmc_auto::common::Point3D& Feature::t_position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.t_position)
  return t_position_ != NULL ? *t_position_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Feature::mutable_t_position() {
  set_has_t_position();
  if (t_position_ == NULL) {
    t_position_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.t_position)
  return t_position_;
}
::jmc_auto::common::Point3D* Feature::release_t_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.t_position)
  clear_has_t_position();
  ::jmc_auto::common::Point3D* temp = t_position_;
  t_position_ = NULL;
  return temp;
}
void Feature::set_allocated_t_position(::jmc_auto::common::Point3D* t_position) {
  delete t_position_;
  t_position_ = t_position;
  if (t_position) {
    set_has_t_position();
  } else {
    clear_has_t_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.t_position)
}

// optional .jmc_auto.common.Point3D t_velocity = 17 [deprecated = true];
bool Feature::has_t_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Feature::set_has_t_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
void Feature::clear_has_t_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
void Feature::clear_t_velocity() {
  if (t_velocity_ != NULL) t_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_t_velocity();
}
const ::jmc_auto::common::Point3D& Feature::t_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.t_velocity)
  return t_velocity_ != NULL ? *t_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Feature::mutable_t_velocity() {
  set_has_t_velocity();
  if (t_velocity_ == NULL) {
    t_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.t_velocity)
  return t_velocity_;
}
::jmc_auto::common::Point3D* Feature::release_t_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.t_velocity)
  clear_has_t_velocity();
  ::jmc_auto::common::Point3D* temp = t_velocity_;
  t_velocity_ = NULL;
  return temp;
}
void Feature::set_allocated_t_velocity(::jmc_auto::common::Point3D* t_velocity) {
  delete t_velocity_;
  t_velocity_ = t_velocity;
  if (t_velocity) {
    set_has_t_velocity();
  } else {
    clear_has_t_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.t_velocity)
}

// optional double t_velocity_heading = 18 [deprecated = true];
bool Feature::has_t_velocity_heading() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Feature::set_has_t_velocity_heading() {
  _has_bits_[0] |= 0x00080000u;
}
void Feature::clear_has_t_velocity_heading() {
  _has_bits_[0] &= ~0x00080000u;
}
void Feature::clear_t_velocity_heading() {
  t_velocity_heading_ = 0;
  clear_has_t_velocity_heading();
}
double Feature::t_velocity_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.t_velocity_heading)
  return t_velocity_heading_;
}
void Feature::set_t_velocity_heading(double value) {
  set_has_t_velocity_heading();
  t_velocity_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.t_velocity_heading)
}

// optional double t_speed = 19 [deprecated = true];
bool Feature::has_t_speed() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Feature::set_has_t_speed() {
  _has_bits_[0] |= 0x00100000u;
}
void Feature::clear_has_t_speed() {
  _has_bits_[0] &= ~0x00100000u;
}
void Feature::clear_t_speed() {
  t_speed_ = 0;
  clear_has_t_speed();
}
double Feature::t_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.t_speed)
  return t_speed_;
}
void Feature::set_t_speed(double value) {
  set_has_t_speed();
  t_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.t_speed)
}

// optional .jmc_auto.common.Point3D t_acceleration = 20 [deprecated = true];
bool Feature::has_t_acceleration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Feature::set_has_t_acceleration() {
  _has_bits_[0] |= 0x00000040u;
}
void Feature::clear_has_t_acceleration() {
  _has_bits_[0] &= ~0x00000040u;
}
void Feature::clear_t_acceleration() {
  if (t_acceleration_ != NULL) t_acceleration_->::jmc_auto::common::Point3D::Clear();
  clear_has_t_acceleration();
}
const ::jmc_auto::common::Point3D& Feature::t_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.t_acceleration)
  return t_acceleration_ != NULL ? *t_acceleration_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Feature::mutable_t_acceleration() {
  set_has_t_acceleration();
  if (t_acceleration_ == NULL) {
    t_acceleration_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.t_acceleration)
  return t_acceleration_;
}
::jmc_auto::common::Point3D* Feature::release_t_acceleration() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.t_acceleration)
  clear_has_t_acceleration();
  ::jmc_auto::common::Point3D* temp = t_acceleration_;
  t_acceleration_ = NULL;
  return temp;
}
void Feature::set_allocated_t_acceleration(::jmc_auto::common::Point3D* t_acceleration) {
  delete t_acceleration_;
  t_acceleration_ = t_acceleration;
  if (t_acceleration) {
    set_has_t_acceleration();
  } else {
    clear_has_t_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.t_acceleration)
}

// optional double t_acc = 21 [deprecated = true];
bool Feature::has_t_acc() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Feature::set_has_t_acc() {
  _has_bits_[0] |= 0x00200000u;
}
void Feature::clear_has_t_acc() {
  _has_bits_[0] &= ~0x00200000u;
}
void Feature::clear_t_acc() {
  t_acc_ = 0;
  clear_has_t_acc();
}
double Feature::t_acc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.t_acc)
  return t_acc_;
}
void Feature::set_t_acc(double value) {
  set_has_t_acc();
  t_acc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.t_acc)
}

// optional bool is_still = 22 [default = false];
bool Feature::has_is_still() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Feature::set_has_is_still() {
  _has_bits_[0] |= 0x00010000u;
}
void Feature::clear_has_is_still() {
  _has_bits_[0] &= ~0x00010000u;
}
void Feature::clear_is_still() {
  is_still_ = false;
  clear_has_is_still();
}
bool Feature::is_still() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.is_still)
  return is_still_;
}
void Feature::set_is_still(bool value) {
  set_has_is_still();
  is_still_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.is_still)
}

// optional .jmc_auto.perception.PerceptionObstacle.Type type = 23;
bool Feature::has_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Feature::set_has_type() {
  _has_bits_[0] |= 0x00800000u;
}
void Feature::clear_has_type() {
  _has_bits_[0] &= ~0x00800000u;
}
void Feature::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::perception::PerceptionObstacle_Type Feature::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.type)
  return static_cast< ::jmc_auto::perception::PerceptionObstacle_Type >(type_);
}
void Feature::set_type(::jmc_auto::perception::PerceptionObstacle_Type value) {
  assert(::jmc_auto::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.type)
}

// optional double label_update_time_delta = 24;
bool Feature::has_label_update_time_delta() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Feature::set_has_label_update_time_delta() {
  _has_bits_[0] |= 0x00400000u;
}
void Feature::clear_has_label_update_time_delta() {
  _has_bits_[0] &= ~0x00400000u;
}
void Feature::clear_label_update_time_delta() {
  label_update_time_delta_ = 0;
  clear_has_label_update_time_delta();
}
double Feature::label_update_time_delta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.label_update_time_delta)
  return label_update_time_delta_;
}
void Feature::set_label_update_time_delta(double value) {
  set_has_label_update_time_delta();
  label_update_time_delta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Feature.label_update_time_delta)
}

// optional .jmc_auto.prediction.ObstaclePriority priority = 25;
bool Feature::has_priority() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Feature::set_has_priority() {
  _has_bits_[0] |= 0x00000080u;
}
void Feature::clear_has_priority() {
  _has_bits_[0] &= ~0x00000080u;
}
void Feature::clear_priority() {
  if (priority_ != NULL) priority_->::jmc_auto::prediction::ObstaclePriority::Clear();
  clear_has_priority();
}
const ::jmc_auto::prediction::ObstaclePriority& Feature::priority() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Feature.priority)
  return priority_ != NULL ? *priority_
                         : *::jmc_auto::prediction::ObstaclePriority::internal_default_instance();
}
::jmc_auto::prediction::ObstaclePriority* Feature::mutable_priority() {
  set_has_priority();
  if (priority_ == NULL) {
    priority_ = new ::jmc_auto::prediction::ObstaclePriority;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Feature.priority)
  return priority_;
}
::jmc_auto::prediction::ObstaclePriority* Feature::release_priority() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.Feature.priority)
  clear_has_priority();
  ::jmc_auto::prediction::ObstaclePriority* temp = priority_;
  priority_ = NULL;
  return temp;
}
void Feature::set_allocated_priority(::jmc_auto::prediction::ObstaclePriority* priority) {
  delete priority_;
  priority_ = priority;
  if (priority) {
    set_has_priority();
  } else {
    clear_has_priority();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.Feature.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
