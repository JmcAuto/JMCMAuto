// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/prediction/proto/prediction_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace prediction {
class ObstacleIntentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObstacleIntent> {
} _ObstacleIntent_default_instance_;
class IntentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Intent> {
} _Intent_default_instance_;
class TrajectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Trajectory> {
} _Trajectory_default_instance_;
class PredictionObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PredictionObstacle> {
} _PredictionObstacle_default_instance_;
class PredictionObstaclesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PredictionObstacles> {
} _PredictionObstacles_default_instance_;

namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleIntent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleIntent, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, predicted_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, intent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacle, feature_),
  0,
  3,
  4,
  ~0u,
  1,
  2,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, prediction_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, perception_error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, end_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionObstacles, intent_),
  0,
  ~0u,
  4,
  2,
  3,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ObstacleIntent)},
  { 7, 13, sizeof(Intent)},
  { 14, 21, sizeof(Trajectory)},
  { 23, 36, sizeof(PredictionObstacle)},
  { 44, 55, sizeof(PredictionObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObstacleIntent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Intent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictionObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PredictionObstacles_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/prediction/proto/prediction_obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _ObstacleIntent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Intent_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Trajectory_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PredictionObstacle_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PredictionObstacles_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::InitDefaults();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::InitDefaults();
  _ObstacleIntent_default_instance_.DefaultConstruct();
  _Intent_default_instance_.DefaultConstruct();
  _Trajectory_default_instance_.DefaultConstruct();
  _PredictionObstacle_default_instance_.DefaultConstruct();
  _PredictionObstacles_default_instance_.DefaultConstruct();
  _PredictionObstacle_default_instance_.get_mutable()->perception_obstacle_ = const_cast< ::jmc_auto::perception::PerceptionObstacle*>(
      ::jmc_auto::perception::PerceptionObstacle::internal_default_instance());
  _PredictionObstacle_default_instance_.get_mutable()->intent_ = const_cast< ::jmc_auto::prediction::ObstacleIntent*>(
      ::jmc_auto::prediction::ObstacleIntent::internal_default_instance());
  _PredictionObstacle_default_instance_.get_mutable()->priority_ = const_cast< ::jmc_auto::prediction::ObstaclePriority*>(
      ::jmc_auto::prediction::ObstaclePriority::internal_default_instance());
  _PredictionObstacles_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _PredictionObstacles_default_instance_.get_mutable()->intent_ = const_cast< ::jmc_auto::prediction::Intent*>(
      ::jmc_auto::prediction::Intent::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n2modules/prediction/proto/prediction_ob"
      "stacle.proto\022\023jmc_auto.prediction\032%modul"
      "es/common/proto/error_code.proto\032!module"
      "s/common/proto/header.proto\032$modules/com"
      "mon/proto/pnc_point.proto\0322modules/perce"
      "ption/proto/perception_obstacle.proto\032&m"
      "odules/prediction/proto/feature.proto\"\370\001"
      "\n\016ObstacleIntent\022\?\n\004type\030\001 \001(\0162(.jmc_aut"
      "o.prediction.ObstacleIntent.Type:\007UNKNOW"
      "N\"\244\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\016\n\nSTA"
      "TIONARY\020\002\022\n\n\006MOVING\020\003\022\017\n\013CHANGE_LANE\020\004\022\024"
      "\n\020LOW_ACCELERATION\020\005\022\025\n\021HIGH_ACCELERATIO"
      "N\020\006\022\024\n\020LOW_DECELERATION\020\007\022\025\n\021HIGH_DECELE"
      "RATION\020\010\"}\n\006Intent\0227\n\004type\030\001 \001(\0162 .jmc_a"
      "uto.prediction.Intent.Type:\007UNKNOWN\":\n\004T"
      "ype\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\n\n\006CRUISE\020\002\022\017"
      "\n\013CHANGE_LANE\020\003\"]\n\nTrajectory\022\023\n\013probabi"
      "lity\030\001 \001(\001\022:\n\020trajectory_point\030\002 \003(\0132 .j"
      "mc_auto.common.TrajectoryPoint\"\363\002\n\022Predi"
      "ctionObstacle\022D\n\023perception_obstacle\030\001 \001"
      "(\0132\'.jmc_auto.perception.PerceptionObsta"
      "cle\022\021\n\ttimestamp\030\002 \001(\001\022\030\n\020predicted_peri"
      "od\030\003 \001(\001\0223\n\ntrajectory\030\004 \003(\0132\037.jmc_auto."
      "prediction.Trajectory\0223\n\006intent\030\005 \001(\0132#."
      "jmc_auto.prediction.ObstacleIntent\0227\n\010pr"
      "iority\030\006 \001(\0132%.jmc_auto.prediction.Obsta"
      "clePriority\022\030\n\tis_static\030\007 \001(\010:\005false\022-\n"
      "\007feature\030\010 \003(\0132\034.jmc_auto.prediction.Fea"
      "ture\"\234\002\n\023PredictionObstacles\022\'\n\006header\030\001"
      " \001(\0132\027.jmc_auto.common.Header\022D\n\023predict"
      "ion_obstacle\030\002 \003(\0132\'.jmc_auto.prediction"
      ".PredictionObstacle\0229\n\025perception_error_"
      "code\030\003 \001(\0162\032.jmc_auto.common.ErrorCode\022\027"
      "\n\017start_timestamp\030\004 \001(\001\022\025\n\rend_timestamp"
      "\030\005 \001(\001\022+\n\006intent\030\006 \001(\0132\033.jmc_auto.predic"
      "tion.Intent"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/prediction_obstacle.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::jmc_auto::prediction::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto

const ::google::protobuf::EnumDescriptor* ObstacleIntent_Type_descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_enum_descriptors[0];
}
bool ObstacleIntent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleIntent_Type ObstacleIntent::UNKNOWN;
const ObstacleIntent_Type ObstacleIntent::STOP;
const ObstacleIntent_Type ObstacleIntent::STATIONARY;
const ObstacleIntent_Type ObstacleIntent::MOVING;
const ObstacleIntent_Type ObstacleIntent::CHANGE_LANE;
const ObstacleIntent_Type ObstacleIntent::LOW_ACCELERATION;
const ObstacleIntent_Type ObstacleIntent::HIGH_ACCELERATION;
const ObstacleIntent_Type ObstacleIntent::LOW_DECELERATION;
const ObstacleIntent_Type ObstacleIntent::HIGH_DECELERATION;
const ObstacleIntent_Type ObstacleIntent::Type_MIN;
const ObstacleIntent_Type ObstacleIntent::Type_MAX;
const int ObstacleIntent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Intent_Type_descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_enum_descriptors[1];
}
bool Intent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Intent_Type Intent::UNKNOWN;
const Intent_Type Intent::STOP;
const Intent_Type Intent::CRUISE;
const Intent_Type Intent::CHANGE_LANE;
const Intent_Type Intent::Type_MIN;
const Intent_Type Intent::Type_MAX;
const int Intent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleIntent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleIntent::ObstacleIntent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.ObstacleIntent)
}
ObstacleIntent::ObstacleIntent(const ObstacleIntent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.ObstacleIntent)
}

void ObstacleIntent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

ObstacleIntent::~ObstacleIntent() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.ObstacleIntent)
  SharedDtor();
}

void ObstacleIntent::SharedDtor() {
}

void ObstacleIntent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleIntent::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleIntent& ObstacleIntent::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObstacleIntent* ObstacleIntent::New(::google::protobuf::Arena* arena) const {
  ObstacleIntent* n = new ObstacleIntent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.ObstacleIntent)
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleIntent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.ObstacleIntent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::prediction::ObstacleIntent_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::prediction::ObstacleIntent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.ObstacleIntent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.ObstacleIntent)
  return false;
#undef DO_
}

void ObstacleIntent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.ObstacleIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.ObstacleIntent)
}

::google::protobuf::uint8* ObstacleIntent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.ObstacleIntent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.ObstacleIntent)
  return target;
}

size_t ObstacleIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.ObstacleIntent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleIntent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleIntent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleIntent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.ObstacleIntent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.ObstacleIntent)
    MergeFrom(*source);
  }
}

void ObstacleIntent::MergeFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ObstacleIntent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleIntent::CopyFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleIntent::IsInitialized() const {
  return true;
}

void ObstacleIntent::Swap(ObstacleIntent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleIntent::InternalSwap(ObstacleIntent* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleIntent::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObstacleIntent

// optional .jmc_auto.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
bool ObstacleIntent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObstacleIntent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObstacleIntent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObstacleIntent::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::prediction::ObstacleIntent_Type ObstacleIntent::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.ObstacleIntent.type)
  return static_cast< ::jmc_auto::prediction::ObstacleIntent_Type >(type_);
}
void ObstacleIntent::set_type(::jmc_auto::prediction::ObstacleIntent_Type value) {
  assert(::jmc_auto::prediction::ObstacleIntent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.ObstacleIntent.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.Intent)
}
Intent::Intent(const Intent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.Intent)
}

void Intent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Intent::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Intent& Intent::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Intent* Intent::New(::google::protobuf::Arena* arena) const {
  Intent* n = new Intent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.Intent)
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.Intent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.prediction.Intent.Type type = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::prediction::Intent_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::prediction::Intent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.Intent)
}

::google::protobuf::uint8* Intent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.Intent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.Intent)
  return target;
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.Intent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  const Intent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Intent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.Intent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.Intent)
    MergeFrom(*source);
  }
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void Intent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Intent::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Intent

// optional .jmc_auto.prediction.Intent.Type type = 1 [default = UNKNOWN];
bool Intent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Intent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Intent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Intent::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::prediction::Intent_Type Intent::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Intent.type)
  return static_cast< ::jmc_auto::prediction::Intent_Type >(type_);
}
void Intent::set_type(::jmc_auto::prediction::Intent_Type value) {
  assert(::jmc_auto::prediction::Intent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Intent.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kProbabilityFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.Trajectory)
  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = this->trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(i));
    }
  }

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  std::swap(probability_, other->probability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional double probability = 1;
bool Trajectory::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trajectory::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void Trajectory::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
double Trajectory::probability() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Trajectory.probability)
  return probability_;
}
void Trajectory::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.Trajectory.probability)
}

// repeated .jmc_auto.common.TrajectoryPoint trajectory_point = 2;
int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::jmc_auto::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::jmc_auto::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::jmc_auto::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.Trajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.Trajectory.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacle::kPerceptionObstacleFieldNumber;
const int PredictionObstacle::kTimestampFieldNumber;
const int PredictionObstacle::kPredictedPeriodFieldNumber;
const int PredictionObstacle::kTrajectoryFieldNumber;
const int PredictionObstacle::kIntentFieldNumber;
const int PredictionObstacle::kPriorityFieldNumber;
const int PredictionObstacle::kIsStaticFieldNumber;
const int PredictionObstacle::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacle::PredictionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.PredictionObstacle)
}
PredictionObstacle::PredictionObstacle(const PredictionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_(from.trajectory_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_perception_obstacle()) {
    perception_obstacle_ = new ::jmc_auto::perception::PerceptionObstacle(*from.perception_obstacle_);
  } else {
    perception_obstacle_ = NULL;
  }
  if (from.has_intent()) {
    intent_ = new ::jmc_auto::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  if (from.has_priority()) {
    priority_ = new ::jmc_auto::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.PredictionObstacle)
}

void PredictionObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&perception_obstacle_, 0, reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&perception_obstacle_) + sizeof(is_static_));
}

PredictionObstacle::~PredictionObstacle() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.PredictionObstacle)
  SharedDtor();
}

void PredictionObstacle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete perception_obstacle_;
  }
  if (this != internal_default_instance()) {
    delete intent_;
  }
  if (this != internal_default_instance()) {
    delete priority_;
  }
}

void PredictionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionObstacle::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionObstacle& PredictionObstacle::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictionObstacle* PredictionObstacle::New(::google::protobuf::Arena* arena) const {
  PredictionObstacle* n = new PredictionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.PredictionObstacle)
  trajectory_.Clear();
  feature_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_perception_obstacle()) {
      GOOGLE_DCHECK(perception_obstacle_ != NULL);
      perception_obstacle_->::jmc_auto::perception::PerceptionObstacle::Clear();
    }
    if (has_intent()) {
      GOOGLE_DCHECK(intent_ != NULL);
      intent_->::jmc_auto::prediction::ObstacleIntent::Clear();
    }
    if (has_priority()) {
      GOOGLE_DCHECK(priority_ != NULL);
      priority_->::jmc_auto::prediction::ObstaclePriority::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(is_static_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.PredictionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double predicted_period = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_predicted_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predicted_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.prediction.Trajectory trajectory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstacleIntent intent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.ObstaclePriority priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_static = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_static();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.prediction.Feature feature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.PredictionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.PredictionObstacle)
  return false;
#undef DO_
}

void PredictionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.PredictionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->perception_obstacle_, output);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // optional double predicted_period = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->predicted_period(), output);
  }

  // repeated .jmc_auto.prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trajectory(i), output);
  }

  // optional .jmc_auto.prediction.ObstacleIntent intent = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->intent_, output);
  }

  // optional .jmc_auto.prediction.ObstaclePriority priority = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->priority_, output);
  }

  // optional bool is_static = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_static(), output);
  }

  // repeated .jmc_auto.prediction.Feature feature = 8;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->feature(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.PredictionObstacle)
}

::google::protobuf::uint8* PredictionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.PredictionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->perception_obstacle_, deterministic, target);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // optional double predicted_period = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->predicted_period(), target);
  }

  // repeated .jmc_auto.prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0, n = this->trajectory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->trajectory(i), deterministic, target);
  }

  // optional .jmc_auto.prediction.ObstacleIntent intent = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->intent_, deterministic, target);
  }

  // optional .jmc_auto.prediction.ObstaclePriority priority = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->priority_, deterministic, target);
  }

  // optional bool is_static = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_static(), target);
  }

  // repeated .jmc_auto.prediction.Feature feature = 8;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->feature(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.PredictionObstacle)
  return target;
}

size_t PredictionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.PredictionObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.prediction.Trajectory trajectory = 4;
  {
    unsigned int count = this->trajectory_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(i));
    }
  }

  // repeated .jmc_auto.prediction.Feature feature = 8;
  {
    unsigned int count = this->feature_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.perception.PerceptionObstacle perception_obstacle = 1;
    if (has_perception_obstacle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->perception_obstacle_);
    }

    // optional .jmc_auto.prediction.ObstacleIntent intent = 5;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->intent_);
    }

    // optional .jmc_auto.prediction.ObstaclePriority priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->priority_);
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 3;
    if (has_predicted_period()) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 7 [default = false];
    if (has_is_static()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.PredictionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.PredictionObstacle)
    MergeFrom(*source);
  }
}

void PredictionObstacle::MergeFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  feature_.MergeFrom(from.feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perception_obstacle()->::jmc_auto::perception::PerceptionObstacle::MergeFrom(from.perception_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intent()->::jmc_auto::prediction::ObstacleIntent::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_priority()->::jmc_auto::prediction::ObstaclePriority::MergeFrom(from.priority());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      predicted_period_ = from.predicted_period_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_static_ = from.is_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacle::CopyFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacle::IsInitialized() const {
  return true;
}

void PredictionObstacle::Swap(PredictionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacle::InternalSwap(PredictionObstacle* other) {
  trajectory_.InternalSwap(&other->trajectory_);
  feature_.InternalSwap(&other->feature_);
  std::swap(perception_obstacle_, other->perception_obstacle_);
  std::swap(intent_, other->intent_);
  std::swap(priority_, other->priority_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(predicted_period_, other->predicted_period_);
  std::swap(is_static_, other->is_static_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionObstacle::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionObstacle

// optional .jmc_auto.perception.PerceptionObstacle perception_obstacle = 1;
bool PredictionObstacle::has_perception_obstacle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictionObstacle::set_has_perception_obstacle() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictionObstacle::clear_has_perception_obstacle() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacle::clear_perception_obstacle() {
  if (perception_obstacle_ != NULL) perception_obstacle_->::jmc_auto::perception::PerceptionObstacle::Clear();
  clear_has_perception_obstacle();
}
const ::jmc_auto::perception::PerceptionObstacle& PredictionObstacle::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.perception_obstacle)
  return perception_obstacle_ != NULL ? *perception_obstacle_
                         : *::jmc_auto::perception::PerceptionObstacle::internal_default_instance();
}
::jmc_auto::perception::PerceptionObstacle* PredictionObstacle::mutable_perception_obstacle() {
  set_has_perception_obstacle();
  if (perception_obstacle_ == NULL) {
    perception_obstacle_ = new ::jmc_auto::perception::PerceptionObstacle;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacle.perception_obstacle)
  return perception_obstacle_;
}
::jmc_auto::perception::PerceptionObstacle* PredictionObstacle::release_perception_obstacle() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.PredictionObstacle.perception_obstacle)
  clear_has_perception_obstacle();
  ::jmc_auto::perception::PerceptionObstacle* temp = perception_obstacle_;
  perception_obstacle_ = NULL;
  return temp;
}
void PredictionObstacle::set_allocated_perception_obstacle(::jmc_auto::perception::PerceptionObstacle* perception_obstacle) {
  delete perception_obstacle_;
  perception_obstacle_ = perception_obstacle;
  if (perception_obstacle) {
    set_has_perception_obstacle();
  } else {
    clear_has_perception_obstacle();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.PredictionObstacle.perception_obstacle)
}

// optional double timestamp = 2;
bool PredictionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double PredictionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.timestamp)
  return timestamp_;
}
void PredictionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.PredictionObstacle.timestamp)
}

// optional double predicted_period = 3;
bool PredictionObstacle::has_predicted_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictionObstacle::set_has_predicted_period() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictionObstacle::clear_has_predicted_period() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictionObstacle::clear_predicted_period() {
  predicted_period_ = 0;
  clear_has_predicted_period();
}
double PredictionObstacle::predicted_period() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.predicted_period)
  return predicted_period_;
}
void PredictionObstacle::set_predicted_period(double value) {
  set_has_predicted_period();
  predicted_period_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.PredictionObstacle.predicted_period)
}

// repeated .jmc_auto.prediction.Trajectory trajectory = 4;
int PredictionObstacle::trajectory_size() const {
  return trajectory_.size();
}
void PredictionObstacle::clear_trajectory() {
  trajectory_.Clear();
}
const ::jmc_auto::prediction::Trajectory& PredictionObstacle::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.trajectory)
  return trajectory_.Get(index);
}
::jmc_auto::prediction::Trajectory* PredictionObstacle::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacle.trajectory)
  return trajectory_.Mutable(index);
}
::jmc_auto::prediction::Trajectory* PredictionObstacle::add_trajectory() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.PredictionObstacle.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::Trajectory >*
PredictionObstacle::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.PredictionObstacle.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::Trajectory >&
PredictionObstacle::trajectory() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.PredictionObstacle.trajectory)
  return trajectory_;
}

// optional .jmc_auto.prediction.ObstacleIntent intent = 5;
bool PredictionObstacle::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictionObstacle::set_has_intent() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictionObstacle::clear_has_intent() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictionObstacle::clear_intent() {
  if (intent_ != NULL) intent_->::jmc_auto::prediction::ObstacleIntent::Clear();
  clear_has_intent();
}
const ::jmc_auto::prediction::ObstacleIntent& PredictionObstacle::intent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.intent)
  return intent_ != NULL ? *intent_
                         : *::jmc_auto::prediction::ObstacleIntent::internal_default_instance();
}
::jmc_auto::prediction::ObstacleIntent* PredictionObstacle::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    intent_ = new ::jmc_auto::prediction::ObstacleIntent;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacle.intent)
  return intent_;
}
::jmc_auto::prediction::ObstacleIntent* PredictionObstacle::release_intent() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.PredictionObstacle.intent)
  clear_has_intent();
  ::jmc_auto::prediction::ObstacleIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void PredictionObstacle::set_allocated_intent(::jmc_auto::prediction::ObstacleIntent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.PredictionObstacle.intent)
}

// optional .jmc_auto.prediction.ObstaclePriority priority = 6;
bool PredictionObstacle::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictionObstacle::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictionObstacle::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictionObstacle::clear_priority() {
  if (priority_ != NULL) priority_->::jmc_auto::prediction::ObstaclePriority::Clear();
  clear_has_priority();
}
const ::jmc_auto::prediction::ObstaclePriority& PredictionObstacle::priority() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.priority)
  return priority_ != NULL ? *priority_
                         : *::jmc_auto::prediction::ObstaclePriority::internal_default_instance();
}
::jmc_auto::prediction::ObstaclePriority* PredictionObstacle::mutable_priority() {
  set_has_priority();
  if (priority_ == NULL) {
    priority_ = new ::jmc_auto::prediction::ObstaclePriority;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacle.priority)
  return priority_;
}
::jmc_auto::prediction::ObstaclePriority* PredictionObstacle::release_priority() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.PredictionObstacle.priority)
  clear_has_priority();
  ::jmc_auto::prediction::ObstaclePriority* temp = priority_;
  priority_ = NULL;
  return temp;
}
void PredictionObstacle::set_allocated_priority(::jmc_auto::prediction::ObstaclePriority* priority) {
  delete priority_;
  priority_ = priority;
  if (priority) {
    set_has_priority();
  } else {
    clear_has_priority();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.PredictionObstacle.priority)
}

// optional bool is_static = 7 [default = false];
bool PredictionObstacle::has_is_static() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PredictionObstacle::set_has_is_static() {
  _has_bits_[0] |= 0x00000020u;
}
void PredictionObstacle::clear_has_is_static() {
  _has_bits_[0] &= ~0x00000020u;
}
void PredictionObstacle::clear_is_static() {
  is_static_ = false;
  clear_has_is_static();
}
bool PredictionObstacle::is_static() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.is_static)
  return is_static_;
}
void PredictionObstacle::set_is_static(bool value) {
  set_has_is_static();
  is_static_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.PredictionObstacle.is_static)
}

// repeated .jmc_auto.prediction.Feature feature = 8;
int PredictionObstacle::feature_size() const {
  return feature_.size();
}
void PredictionObstacle::clear_feature() {
  feature_.Clear();
}
const ::jmc_auto::prediction::Feature& PredictionObstacle::feature(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacle.feature)
  return feature_.Get(index);
}
::jmc_auto::prediction::Feature* PredictionObstacle::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacle.feature)
  return feature_.Mutable(index);
}
::jmc_auto::prediction::Feature* PredictionObstacle::add_feature() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.PredictionObstacle.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::Feature >*
PredictionObstacle::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.PredictionObstacle.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::Feature >&
PredictionObstacle::feature() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.PredictionObstacle.feature)
  return feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacles::kHeaderFieldNumber;
const int PredictionObstacles::kPredictionObstacleFieldNumber;
const int PredictionObstacles::kPerceptionErrorCodeFieldNumber;
const int PredictionObstacles::kStartTimestampFieldNumber;
const int PredictionObstacles::kEndTimestampFieldNumber;
const int PredictionObstacles::kIntentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacles::PredictionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.prediction.PredictionObstacles)
}
PredictionObstacles::PredictionObstacles(const PredictionObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      prediction_obstacle_(from.prediction_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_intent()) {
    intent_ = new ::jmc_auto::prediction::Intent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    reinterpret_cast<char*>(&perception_error_code_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(perception_error_code_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.prediction.PredictionObstacles)
}

void PredictionObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&perception_error_code_) -
    reinterpret_cast<char*>(&header_) + sizeof(perception_error_code_));
}

PredictionObstacles::~PredictionObstacles() {
  // @@protoc_insertion_point(destructor:jmc_auto.prediction.PredictionObstacles)
  SharedDtor();
}

void PredictionObstacles::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete intent_;
  }
}

void PredictionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionObstacles::descriptor() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionObstacles& PredictionObstacles::default_instance() {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PredictionObstacles* PredictionObstacles::New(::google::protobuf::Arena* arena) const {
  PredictionObstacles* n = new PredictionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.prediction.PredictionObstacles)
  prediction_obstacle_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_intent()) {
      GOOGLE_DCHECK(intent_ != NULL);
      intent_->::jmc_auto::prediction::Intent::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&start_timestamp_, 0, reinterpret_cast<char*>(&perception_error_code_) -
      reinterpret_cast<char*>(&start_timestamp_) + sizeof(perception_error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.prediction.PredictionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.prediction.PredictionObstacle prediction_obstacle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prediction_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.ErrorCode perception_error_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::common::ErrorCode_IsValid(value)) {
            set_perception_error_code(static_cast< ::jmc_auto::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_start_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_end_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.prediction.Intent intent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.prediction.PredictionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.prediction.PredictionObstacles)
  return false;
#undef DO_
}

void PredictionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.prediction.PredictionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .jmc_auto.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned int i = 0, n = this->prediction_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prediction_obstacle(i), output);
  }

  // optional .jmc_auto.common.ErrorCode perception_error_code = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->perception_error_code(), output);
  }

  // optional double start_timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start_timestamp(), output);
  }

  // optional double end_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->end_timestamp(), output);
  }

  // optional .jmc_auto.prediction.Intent intent = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->intent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.prediction.PredictionObstacles)
}

::google::protobuf::uint8* PredictionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.prediction.PredictionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .jmc_auto.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned int i = 0, n = this->prediction_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->prediction_obstacle(i), deterministic, target);
  }

  // optional .jmc_auto.common.ErrorCode perception_error_code = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->perception_error_code(), target);
  }

  // optional double start_timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start_timestamp(), target);
  }

  // optional double end_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->end_timestamp(), target);
  }

  // optional .jmc_auto.prediction.Intent intent = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->intent_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.prediction.PredictionObstacles)
  return target;
}

size_t PredictionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.prediction.PredictionObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.prediction.PredictionObstacle prediction_obstacle = 2;
  {
    unsigned int count = this->prediction_obstacle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prediction_obstacle(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.prediction.Intent intent = 6;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->intent_);
    }

    // optional double start_timestamp = 4;
    if (has_start_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double end_timestamp = 5;
    if (has_end_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.common.ErrorCode perception_error_code = 3;
    if (has_perception_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->perception_error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.prediction.PredictionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.prediction.PredictionObstacles)
    MergeFrom(*source);
  }
}

void PredictionObstacles::MergeFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prediction_obstacle_.MergeFrom(from.prediction_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intent()->::jmc_auto::prediction::Intent::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000004u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      perception_error_code_ = from.perception_error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacles::CopyFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacles::IsInitialized() const {
  return true;
}

void PredictionObstacles::Swap(PredictionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacles::InternalSwap(PredictionObstacles* other) {
  prediction_obstacle_.InternalSwap(&other->prediction_obstacle_);
  std::swap(header_, other->header_);
  std::swap(intent_, other->intent_);
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(end_timestamp_, other->end_timestamp_);
  std::swap(perception_error_code_, other->perception_error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictionObstacles::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictionObstacles

// optional .jmc_auto.common.Header header = 1;
bool PredictionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacles::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& PredictionObstacles::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacles.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* PredictionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacles.header)
  return header_;
}
::jmc_auto::common::Header* PredictionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.PredictionObstacles.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PredictionObstacles::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.PredictionObstacles.header)
}

// repeated .jmc_auto.prediction.PredictionObstacle prediction_obstacle = 2;
int PredictionObstacles::prediction_obstacle_size() const {
  return prediction_obstacle_.size();
}
void PredictionObstacles::clear_prediction_obstacle() {
  prediction_obstacle_.Clear();
}
const ::jmc_auto::prediction::PredictionObstacle& PredictionObstacles::prediction_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Get(index);
}
::jmc_auto::prediction::PredictionObstacle* PredictionObstacles::mutable_prediction_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Mutable(index);
}
::jmc_auto::prediction::PredictionObstacle* PredictionObstacles::add_prediction_obstacle() {
  // @@protoc_insertion_point(field_add:jmc_auto.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::PredictionObstacle >*
PredictionObstacles::mutable_prediction_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.prediction.PredictionObstacles.prediction_obstacle)
  return &prediction_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::prediction::PredictionObstacle >&
PredictionObstacles::prediction_obstacle() const {
  // @@protoc_insertion_point(field_list:jmc_auto.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_;
}

// optional .jmc_auto.common.ErrorCode perception_error_code = 3;
bool PredictionObstacles::has_perception_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictionObstacles::set_has_perception_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictionObstacles::clear_has_perception_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictionObstacles::clear_perception_error_code() {
  perception_error_code_ = 0;
  clear_has_perception_error_code();
}
::jmc_auto::common::ErrorCode PredictionObstacles::perception_error_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacles.perception_error_code)
  return static_cast< ::jmc_auto::common::ErrorCode >(perception_error_code_);
}
void PredictionObstacles::set_perception_error_code(::jmc_auto::common::ErrorCode value) {
  assert(::jmc_auto::common::ErrorCode_IsValid(value));
  set_has_perception_error_code();
  perception_error_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.PredictionObstacles.perception_error_code)
}

// optional double start_timestamp = 4;
bool PredictionObstacles::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictionObstacles::set_has_start_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictionObstacles::clear_has_start_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictionObstacles::clear_start_timestamp() {
  start_timestamp_ = 0;
  clear_has_start_timestamp();
}
double PredictionObstacles::start_timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacles.start_timestamp)
  return start_timestamp_;
}
void PredictionObstacles::set_start_timestamp(double value) {
  set_has_start_timestamp();
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.PredictionObstacles.start_timestamp)
}

// optional double end_timestamp = 5;
bool PredictionObstacles::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictionObstacles::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictionObstacles::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictionObstacles::clear_end_timestamp() {
  end_timestamp_ = 0;
  clear_has_end_timestamp();
}
double PredictionObstacles::end_timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacles.end_timestamp)
  return end_timestamp_;
}
void PredictionObstacles::set_end_timestamp(double value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.prediction.PredictionObstacles.end_timestamp)
}

// optional .jmc_auto.prediction.Intent intent = 6;
bool PredictionObstacles::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictionObstacles::set_has_intent() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictionObstacles::clear_has_intent() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictionObstacles::clear_intent() {
  if (intent_ != NULL) intent_->::jmc_auto::prediction::Intent::Clear();
  clear_has_intent();
}
const ::jmc_auto::prediction::Intent& PredictionObstacles::intent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.prediction.PredictionObstacles.intent)
  return intent_ != NULL ? *intent_
                         : *::jmc_auto::prediction::Intent::internal_default_instance();
}
::jmc_auto::prediction::Intent* PredictionObstacles::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    intent_ = new ::jmc_auto::prediction::Intent;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.prediction.PredictionObstacles.intent)
  return intent_;
}
::jmc_auto::prediction::Intent* PredictionObstacles::release_intent() {
  // @@protoc_insertion_point(field_release:jmc_auto.prediction.PredictionObstacles.intent)
  clear_has_intent();
  ::jmc_auto::prediction::Intent* temp = intent_;
  intent_ = NULL;
  return temp;
}
void PredictionObstacles::set_allocated_intent(::jmc_auto::prediction::Intent* intent) {
  delete intent_;
  intent_ = intent;
  if (intent) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.prediction.PredictionObstacles.intent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
