/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef jmc_auto_controlcommandserviceinterface_skeleton_h
#define jmc_auto_controlcommandserviceinterface_skeleton_h

#include "ara/com/internal/skeleton/SkeletonAdapter.h"
#include "ara/com/internal/skeleton/EventAdapter.h"
#include "ara/com/internal/skeleton/FieldAdapter.h"
#include "jmc_auto/controlcommandserviceinterface_common.h"
#include "impl_type_controlcommand.h"
#include <cstdint>

namespace jmc_auto {
namespace skeleton {
namespace events
{
    using ControlCommandEvent = ara::com::internal::skeleton::event::EventAdapter<::ControlCommand>;
    static constexpr ara::com::internal::EntityId ControlCommandEventId = 57416; //ControlCommandEvent_event_hash
}

namespace methods
{
}

namespace fields
{
}

class ControlCommandServiceInterfaceSkeleton : public ara::com::internal::skeleton::SkeletonAdapter {
public:

    explicit ControlCommandServiceInterfaceSkeleton(ara::com::InstanceIdentifier instanceId,
                           ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent)
        :ara::com::internal::skeleton::SkeletonAdapter(::jmc_auto::ControlCommandServiceInterface::ServiceIdentifier, instanceId, mode),
        ControlCommandEvent(GetSkeleton(), events::ControlCommandEventId)
    {
    }

    ControlCommandServiceInterfaceSkeleton(const ControlCommandServiceInterfaceSkeleton&) = delete;
    ControlCommandServiceInterfaceSkeleton& operator=(const ControlCommandServiceInterfaceSkeleton&) = delete;

    ControlCommandServiceInterfaceSkeleton(ControlCommandServiceInterfaceSkeleton&& other) = default;
    ControlCommandServiceInterfaceSkeleton& operator=(ControlCommandServiceInterfaceSkeleton&& other) = default;

    virtual ~ControlCommandServiceInterfaceSkeleton()
    {
        ara::com::internal::skeleton::SkeletonAdapter::StopOfferService();
    }

    void OfferService()
    {
        InitializeEvent(ControlCommandEvent);
        ara::com::internal::skeleton::SkeletonAdapter::OfferService();
    }


    events::ControlCommandEvent ControlCommandEvent;
};
} // namespace skeleton
} // namespace jmc_auto

#endif // jmc_auto_controlcommandserviceinterface_skeleton_h
