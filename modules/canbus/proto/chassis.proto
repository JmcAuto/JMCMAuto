syntax = "proto2";

package jmc_auto.canbus;

import "modules/common/proto/header.proto";
import "modules/common/proto/vehicle_signal.proto";
import "modules/common/proto/drive_state.proto";
import "modules/common/proto/geometry.proto";

message Signal {
  enum TurnSignal {
    TURN_NONE = 0;
    TURN_LEFT = 1;
    TURN_RIGHT = 2;
  };
  optional TurnSignal turn_signal = 1;
  // lights enable command
  optional bool high_beam = 2;
  optional bool low_beam = 3;
  optional bool horn = 4;
  optional bool emergency_light = 5;
}


// next id :31
message Chassis {
  enum DrivingMode {
    COMPLETE_MANUAL = 0;  // human drive
    COMPLETE_AUTO_DRIVE = 1;
    AUTO_STEER_ONLY = 2;  // only steer
    AUTO_SPEED_ONLY = 3;  // include throttle and brake

    // security mode when manual intervention happens, only response status
    EMERGENCY_MODE = 4;
    REMOTE_MODE=5;
    APA_MODE=6;
  }

  enum ErrorCode {
    NO_ERROR = 0;

    CMD_NOT_IN_PERIOD = 1;  // control cmd not in period

    // car chassis report error, like steer, brake, throttle, gear fault
    CHASSIS_ERROR = 2;

    MANUAL_INTERVENTION = 3;  // human manual intervention

    // receive car chassis can frame not in period
    CHASSIS_CAN_NOT_IN_PERIOD = 4;

    UNKNOWN_ERROR = 5;
  }

  enum GearPosition {
    GEAR_NEUTRAL = 0;
    GEAR_DRIVE = 1;
    GEAR_REVERSE = 2;
    GEAR_PARKING = 3;
    GEAR_LOW = 4;
    GEAR_INVALID = 5;
    GEAR_NONE = 6;
  }

  enum BrkPedalStasus {
    NOT_PRESSED=0;
    PRESSED=1;
    RESERRVED=2;
    ERROR=3;
  }

  optional bool engine_started = 3;
  // Engine speed in RPM.
  optional float engine_rpm = 4 [default = nan];
  // Vehicle Speed in meters per second.
  optional float speed_mps = 5 [default = nan];
  // Vehicle odometer in meters.
  optional float odometer_m = 6 [default = nan];
  // Fuel range in meters.
  optional int32 fuel_range_m = 7;
  // Real throttle location in [%], ranging from 0 to 100.
  optional float throttle_percentage = 8 [default = nan];
  // Real brake location in [%], ranging from 0 to 100.
  optional float brake_percentage = 9 [default = nan];
  // Real gear location.
  // optional int32 gear_location = 10; deprecated use enum replace this [id 23]
  // Real steering location.is deg angle
  optional float steering_percentage = 11 [default = nan];
  // Applied steering torque in [Nm].
  optional float steering_torque_nm = 12 [default = nan];

  // Parking brake status.
  optional bool parking_brake = 13;

  // Light signals.
  optional bool high_beam_signal = 14 [deprecated = true];
  optional bool low_beam_signal = 15 [deprecated = true];
  optional bool left_turn_signal = 16 [deprecated = true];
  optional bool right_turn_signal = 17 [deprecated = true];
  optional bool horn = 18 [deprecated = true];

  optional bool wiper = 19;
  optional bool disengage_status = 20 [deprecated = true];
  optional DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  optional ErrorCode error_code = 22 [default = NO_ERROR];
  optional GearPosition gear_location = 23;

  // timestamp for steering module
  optional double steering_timestamp = 24;  // In seconds, with 1e-6 accuracy

  // chassis also needs it own sending timestamp
  optional jmc_auto.common.Header header = 25;

  optional int32 chassis_error_mask = 26 [default = 0];

  optional jmc_auto.common.VehicleSignal signal = 27;

  // Only available for Lincoln now
  optional ChassisGPS chassis_gps = 28;

  optional jmc_auto.common.EngageAdvice engage_advice = 29;

  optional WheelSpeed wheel_speed = 30;

  optional Surround surround = 31;

  // Vehicle registration information
  //optional License license = 32;  
 //CX756
  optional float lon_acc=33;
   
  optional float steer_wheel_rot_spd=34;

  optional bool abs_vehspdlgt_valid=35;

  optional bool esp_algtstatus_valid=36;

  optional bool sas_sasstssnsr_valid=37;

  optional bool steerwheelrotspd_valid=38;

  optional bool eps_lkaresponsetorque_valid=39;
  
  optional float eps_torsionbartorque=40;//��ʻԱ������
  
  optional bool eps_tosionbartorquevalid=41;//��ʻԱ������
 //221
  optional int32 abs_whlmilgfrntri=42;//右前轮累积上升沿和下降沿之和

  optional int32 abs_whlmilgfrntle=43;//左前轮累积上升沿和下降沿之和
//235
  optional int32 abs_whlmilgrearre=44;//右后轮累积上升沿和下降沿之和

  optional int32 abs_whlmilgrearle=45;//左后轮累积上升沿和下降沿之和
//236
  optional int32 esp_wheelpulse_fl=46;//左前轮速度脉冲以20ms为单位

  optional int32 esp_wheelpulse_fr=47;//右前轮速度脉冲以20ms为单位

  optional int32 esp_wheelpulse_rl=48;//左后轮速度脉冲以20ms为单位

  optional int32 esp_wheelpulse_rr=49;//右后轮速度脉冲以20ms为单位
//107
  optional double ems_accpedalratio=50;

  optional BrkPedalStasus brkpedalstasus=51;
//211
  optional double abs_whlspdfrntle=52;//左前轮速度

  optional double abs_whlspdfrntri=53;//右前轮速度

  optional double abs_whlspdrele=54;//左后轮速度

  optional double abs_whlspdreri=55;//右后轮速度

//500
  optional double acc_x=56;
  optional double acc_y=57;
  optional double acc_z=58;
//501
  optional double gyro_x=59;
  optional double gyro_y=60;
  optional double gyro_z=61;
//502
  optional double ins_pitchangle=62;
  optional double ins_rollangle=63;
  optional double ins_headingangle=64;
//503
  optional double ins_locatheight=65;
  optional double ins_time=66;
//504
  optional double ins_latitude=67;
  optional double ins_longitude=68;
//505
  optional double ins_northspd=69;
  optional double ins_eastspd=70;
  optional double ins_togroundspd=71;
//506
  optional int32 ins_gpsflag_pos=72;
  optional int32 ins_numsv=73;
  optional int32 ins_gpsflag_heading=74;
  optional int32 ins_gps_age=75;
  optional int32 ins_car_status=76;
  optional int32 ins_status=77;
//507
  optional double ins_std_lat=78;
  optional double ins_std_lon=79;
  optional double ins_std_locat_height=80;
  optional double ins_std_heading=81;

  //底盘可用状态，是否能激活
  optional int32 eps_lkacontrolstatus=82;//LKA的控制状态，0无请求，1有力矩请求，2、3无法进入自动驾驶
  optional int32 esp_vlc_active=83;//VLC的控制是否激活，0未激活，1激活
  optional int32 esp_vlc_available=84;//VLC的是否可用，0不可用，1可用
  //APA
  optional int32 esp_apa_gearboxenable=85;//apa换挡使能，0无请求，1换挡请求
  optional int32 esp_vlc_apactive=86;//APA下VLC状态激活标志位，0未激活，1激活
  optional int32 esp_vlcapa_available=87;//APA下VLC是否可用，0不可用，1可用
    optional int32 eps_epspamsts=89;//转向状态
	optional int32 eps_epspaminh=90;//eps错误状态
  //EPB状态0x243
  optional int32 esp_epbstatus=88;//0已经放下，1已经拉起，2正在放下，3正在拉起，4不知道，5错误

}

message ChassisGPS {
  optional double latitude = 1;
  optional double longitude = 2;
  optional bool gps_valid = 3;

  optional int32 year = 4;
  optional int32 month = 5;
  optional int32 day = 6;
  optional int32 hours = 7;
  optional int32 minutes = 8;
  optional int32 seconds = 9;
  optional double compass_direction = 10;
  optional double pdop = 11;
  optional bool is_gps_fault = 12;
  optional bool is_inferred = 13;

  optional double altitude = 14;
  optional double heading = 15;
  optional double hdop = 16;
  optional double vdop = 17;
  optional GpsQuality quality = 18;
  optional int32 num_satellites = 19;
  optional double gps_speed = 20;
}

enum GpsQuality {
  FIX_NO = 0;
  FIX_2D = 1;
  FIX_3D = 2;
  FIX_INVALID = 3;
}

message WheelSpeed {
enum WheelSpeedType {
  FORWARD = 0;
  BACKWARD = 1;
  STANDSTILL = 2;
  INVALID = 3;
}
  optional bool is_wheel_spd_rr_valid = 1 [default = false];
  optional WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  optional double wheel_spd_rr = 3 [default = 0.0];
  optional bool is_wheel_spd_rl_valid = 4 [default = false];
  optional WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  optional double wheel_spd_rl = 6 [default = 0.0];
  optional bool is_wheel_spd_fr_valid = 7 [default = false];
  optional WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  optional double wheel_spd_fr = 9 [default = 0.0];
  optional bool is_wheel_spd_fl_valid = 10 [default = false];
  optional WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  optional double wheel_spd_fl = 12 [default = 0.0];
}

message Sonar {
  optional double range = 1;  // Meter
  optional jmc_auto.common.Point3D translation = 2;  // Meter
  optional jmc_auto.common.Quaternion rotation = 3;
}

message Surround {
  optional bool cross_traffic_alert_left = 1;
  optional bool cross_traffic_alert_left_enabled = 2;
  optional bool blind_spot_left_alert = 3;
  optional bool blind_spot_left_alert_enabled = 4;
  optional bool cross_traffic_alert_right = 5;
  optional bool cross_traffic_alert_right_enabled = 6;
  optional bool blind_spot_right_alert = 7;
  optional bool blind_spot_right_alert_enabled = 8;
  optional double sonar00 = 9;
  optional double sonar01 = 10;
  optional double sonar02 = 11;
  optional double sonar03 = 12;
  optional double sonar04 = 13;
  optional double sonar05 = 14;
  optional double sonar06 = 15;
  optional double sonar07 = 16;
  optional double sonar08 = 17;
  optional double sonar09 = 18;
  optional double sonar10 = 19;
  optional double sonar11 = 20;
  optional bool sonar_enabled = 21;
  optional bool sonar_fault = 22;
  repeated double sonar_range = 23;
  repeated Sonar sonar = 24;
}

message License {
  optional string vin = 1;
}
