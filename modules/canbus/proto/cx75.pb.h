// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/cx75.proto

#ifndef PROTOBUF_modules_2fcanbus_2fproto_2fcx75_2eproto__INCLUDED
#define PROTOBUF_modules_2fcanbus_2fproto_2fcx75_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Abs_sts_0x221_221;
class Abs_sts_0x221_221DefaultTypeInternal;
extern Abs_sts_0x221_221DefaultTypeInternal _Abs_sts_0x221_221_default_instance_;
class Abs_whlspd_0x211_211;
class Abs_whlspd_0x211_211DefaultTypeInternal;
extern Abs_whlspd_0x211_211DefaultTypeInternal _Abs_whlspd_0x211_211_default_instance_;
class Afs_0x5a0_5a0;
class Afs_0x5a0_5a0DefaultTypeInternal;
extern Afs_0x5a0_5a0DefaultTypeInternal _Afs_0x5a0_5a0_default_instance_;
class Cx75;
class Cx75DefaultTypeInternal;
extern Cx75DefaultTypeInternal _Cx75_default_instance_;
class Eps_0x260_260;
class Eps_0x260_260DefaultTypeInternal;
extern Eps_0x260_260DefaultTypeInternal _Eps_0x260_260_default_instance_;
class Eps_advanced_0x176_176;
class Eps_advanced_0x176_176DefaultTypeInternal;
extern Eps_advanced_0x176_176DefaultTypeInternal _Eps_advanced_0x176_176_default_instance_;
class Esp_advanced_0x234_234;
class Esp_advanced_0x234_234DefaultTypeInternal;
extern Esp_advanced_0x234_234DefaultTypeInternal _Esp_advanced_0x234_234_default_instance_;
class Esp_axay_0x242_242;
class Esp_axay_0x242_242DefaultTypeInternal;
extern Esp_axay_0x242_242DefaultTypeInternal _Esp_axay_0x242_242_default_instance_;
class Esp_direction_0x235_235;
class Esp_direction_0x235_235DefaultTypeInternal;
extern Esp_direction_0x235_235DefaultTypeInternal _Esp_direction_0x235_235_default_instance_;
class Esp_pressure_0x241_241;
class Esp_pressure_0x241_241DefaultTypeInternal;
extern Esp_pressure_0x241_241DefaultTypeInternal _Esp_pressure_0x241_241_default_instance_;
class Esp_raw_0x212_212;
class Esp_raw_0x212_212DefaultTypeInternal;
extern Esp_raw_0x212_212DefaultTypeInternal _Esp_raw_0x212_212_default_instance_;
class Esp_rpmf_0x213_213;
class Esp_rpmf_0x213_213DefaultTypeInternal;
extern Esp_rpmf_0x213_213DefaultTypeInternal _Esp_rpmf_0x213_213_default_instance_;
class Esp_status_0x243_243;
class Esp_status_0x243_243DefaultTypeInternal;
extern Esp_status_0x243_243DefaultTypeInternal _Esp_status_0x243_243_default_instance_;
class Esp_tq_0x217_217;
class Esp_tq_0x217_217DefaultTypeInternal;
extern Esp_tq_0x217_217DefaultTypeInternal _Esp_tq_0x217_217_default_instance_;
class Esp_vlc_0x223_223;
class Esp_vlc_0x223_223DefaultTypeInternal;
extern Esp_vlc_0x223_223DefaultTypeInternal _Esp_vlc_0x223_223_default_instance_;
class Esp_whlpulse_0x236_236;
class Esp_whlpulse_0x236_236DefaultTypeInternal;
extern Esp_whlpulse_0x236_236DefaultTypeInternal _Esp_whlpulse_0x236_236_default_instance_;
class Gw_bcm_door_0x310_310;
class Gw_bcm_door_0x310_310DefaultTypeInternal;
extern Gw_bcm_door_0x310_310DefaultTypeInternal _Gw_bcm_door_0x310_310_default_instance_;
class Gw_body_0x321_321;
class Gw_body_0x321_321DefaultTypeInternal;
extern Gw_body_0x321_321DefaultTypeInternal _Gw_body_0x321_321_default_instance_;
class Gw_ems_engstatus_0x142_142;
class Gw_ems_engstatus_0x142_142DefaultTypeInternal;
extern Gw_ems_engstatus_0x142_142DefaultTypeInternal _Gw_ems_engstatus_0x142_142_default_instance_;
class Gw_ems_sts_0x151_151;
class Gw_ems_sts_0x151_151DefaultTypeInternal;
extern Gw_ems_sts_0x151_151DefaultTypeInternal _Gw_ems_sts_0x151_151_default_instance_;
class Gw_ems_tq_0x101_101;
class Gw_ems_tq_0x101_101DefaultTypeInternal;
extern Gw_ems_tq_0x101_101DefaultTypeInternal _Gw_ems_tq_0x101_101_default_instance_;
class Gw_ems_tqwhl_0x111_111;
class Gw_ems_tqwhl_0x111_111DefaultTypeInternal;
extern Gw_ems_tqwhl_0x111_111DefaultTypeInternal _Gw_ems_tqwhl_0x111_111_default_instance_;
class Gw_ems_whltq_0x107_107;
class Gw_ems_whltq_0x107_107DefaultTypeInternal;
extern Gw_ems_whltq_0x107_107DefaultTypeInternal _Gw_ems_whltq_0x107_107_default_instance_;
class Gw_ic_0x510_510;
class Gw_ic_0x510_510DefaultTypeInternal;
extern Gw_ic_0x510_510DefaultTypeInternal _Gw_ic_0x510_510_default_instance_;
class Gw_ic_time_0x581_581;
class Gw_ic_time_0x581_581DefaultTypeInternal;
extern Gw_ic_time_0x581_581DefaultTypeInternal _Gw_ic_time_0x581_581_default_instance_;
class Gw_mp5_0x530_530;
class Gw_mp5_0x530_530DefaultTypeInternal;
extern Gw_mp5_0x530_530DefaultTypeInternal _Gw_mp5_0x530_530_default_instance_;
class Gw_mp5_nav_0x533_533;
class Gw_mp5_nav_0x533_533DefaultTypeInternal;
extern Gw_mp5_nav_0x533_533DefaultTypeInternal _Gw_mp5_nav_0x533_533_default_instance_;
class Gw_nm_0x460_460;
class Gw_nm_0x460_460DefaultTypeInternal;
extern Gw_nm_0x460_460DefaultTypeInternal _Gw_nm_0x460_460_default_instance_;
class Gw_swm_body_0x31a_31a;
class Gw_swm_body_0x31a_31aDefaultTypeInternal;
extern Gw_swm_body_0x31a_31aDefaultTypeInternal _Gw_swm_body_0x31a_31a_default_instance_;
class Gw_swm_mrr_0x31b_31b;
class Gw_swm_mrr_0x31b_31bDefaultTypeInternal;
extern Gw_swm_mrr_0x31b_31bDefaultTypeInternal _Gw_swm_mrr_0x31b_31b_default_instance_;
class Gw_tbox_location_0x580_580;
class Gw_tbox_location_0x580_580DefaultTypeInternal;
extern Gw_tbox_location_0x580_580DefaultTypeInternal _Gw_tbox_location_0x580_580_default_instance_;
class Gw_tcu_gearinfo_0x123_123;
class Gw_tcu_gearinfo_0x123_123DefaultTypeInternal;
extern Gw_tcu_gearinfo_0x123_123DefaultTypeInternal _Gw_tcu_gearinfo_0x123_123_default_instance_;
class Gw_tpms_tire_0x361_361;
class Gw_tpms_tire_0x361_361DefaultTypeInternal;
extern Gw_tpms_tire_0x361_361DefaultTypeInternal _Gw_tpms_tire_0x361_361_default_instance_;
class Ins_acc_500;
class Ins_acc_500DefaultTypeInternal;
extern Ins_acc_500DefaultTypeInternal _Ins_acc_500_default_instance_;
class Ins_datainfo_506;
class Ins_datainfo_506DefaultTypeInternal;
extern Ins_datainfo_506DefaultTypeInternal _Ins_datainfo_506_default_instance_;
class Ins_gyro_501;
class Ins_gyro_501DefaultTypeInternal;
extern Ins_gyro_501DefaultTypeInternal _Ins_gyro_501_default_instance_;
class Ins_headingpitchroll_502;
class Ins_headingpitchroll_502DefaultTypeInternal;
extern Ins_headingpitchroll_502DefaultTypeInternal _Ins_headingpitchroll_502_default_instance_;
class Ins_heightandtime_503;
class Ins_heightandtime_503DefaultTypeInternal;
extern Ins_heightandtime_503DefaultTypeInternal _Ins_heightandtime_503_default_instance_;
class Ins_latitudelongitude_504;
class Ins_latitudelongitude_504DefaultTypeInternal;
extern Ins_latitudelongitude_504DefaultTypeInternal _Ins_latitudelongitude_504_default_instance_;
class Ins_speed_505;
class Ins_speed_505DefaultTypeInternal;
extern Ins_speed_505DefaultTypeInternal _Ins_speed_505_default_instance_;
class Ins_std_507;
class Ins_std_507DefaultTypeInternal;
extern Ins_std_507DefaultTypeInternal _Ins_std_507_default_instance_;
class Ipm_0x245_245;
class Ipm_0x245_245DefaultTypeInternal;
extern Ipm_0x245_245DefaultTypeInternal _Ipm_0x245_245_default_instance_;
class Ipm_leftline_0x278_278;
class Ipm_leftline_0x278_278DefaultTypeInternal;
extern Ipm_leftline_0x278_278DefaultTypeInternal _Ipm_leftline_0x278_278_default_instance_;
class Ipm_rightline_0x490_490;
class Ipm_rightline_0x490_490DefaultTypeInternal;
extern Ipm_rightline_0x490_490DefaultTypeInternal _Ipm_rightline_0x490_490_default_instance_;
class Mrr_0x238_238;
class Mrr_0x238_238DefaultTypeInternal;
extern Mrr_0x238_238DefaultTypeInternal _Mrr_0x238_238_default_instance_;
class Mrr_0x239_239;
class Mrr_0x239_239DefaultTypeInternal;
extern Mrr_0x239_239DefaultTypeInternal _Mrr_0x239_239_default_instance_;
class Mrr_0x246_246;
class Mrr_0x246_246DefaultTypeInternal;
extern Mrr_0x246_246DefaultTypeInternal _Mrr_0x246_246_default_instance_;
class Mrr_frobj_0x279_279;
class Mrr_frobj_0x279_279DefaultTypeInternal;
extern Mrr_frobj_0x279_279DefaultTypeInternal _Mrr_frobj_0x279_279_default_instance_;
class Mrr_frobj_0x480_480;
class Mrr_frobj_0x480_480DefaultTypeInternal;
extern Mrr_frobj_0x480_480DefaultTypeInternal _Mrr_frobj_0x480_480_default_instance_;
class Pam_0x270_270;
class Pam_0x270_270DefaultTypeInternal;
extern Pam_0x270_270DefaultTypeInternal _Pam_0x270_270_default_instance_;
class Pam_0x271_271;
class Pam_0x271_271DefaultTypeInternal;
extern Pam_0x271_271DefaultTypeInternal _Pam_0x271_271_default_instance_;
class Pam_0x272_272;
class Pam_0x272_272DefaultTypeInternal;
extern Pam_0x272_272DefaultTypeInternal _Pam_0x272_272_default_instance_;
class Sas_sensor_0x175_175;
class Sas_sensor_0x175_175DefaultTypeInternal;
extern Sas_sensor_0x175_175DefaultTypeInternal _Sas_sensor_0x175_175_default_instance_;
class Sod_0x275_275;
class Sod_0x275_275DefaultTypeInternal;
extern Sod_0x275_275DefaultTypeInternal _Sod_0x275_275_default_instance_;
class Sod_nm_0x440_440;
class Sod_nm_0x440_440DefaultTypeInternal;
extern Sod_nm_0x440_440DefaultTypeInternal _Sod_nm_0x440_440_default_instance_;
class Srs_0x350_350;
class Srs_0x350_350DefaultTypeInternal;
extern Srs_0x350_350DefaultTypeInternal _Srs_0x350_350_default_instance_;
}  // namespace canbus
}  // namespace jmc_auto

namespace jmc_auto {
namespace canbus {

namespace protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto

enum Abs_whlspd_0x211_211_Abs_whlspdreristatusType {
  Abs_whlspd_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_VALID = 0,
  Abs_whlspd_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_INVALID = 1
};
bool Abs_whlspd_0x211_211_Abs_whlspdreristatusType_IsValid(int value);
const Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MIN = Abs_whlspd_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MAX = Abs_whlspd_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_INVALID;
const int Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_ARRAYSIZE = Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdreristatusType_descriptor();
inline const ::std::string& Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Name(Abs_whlspd_0x211_211_Abs_whlspdreristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_descriptor(), value);
}
inline bool Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Parse(
    const ::std::string& name, Abs_whlspd_0x211_211_Abs_whlspdreristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_whlspd_0x211_211_Abs_whlspdreristatusType>(
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_descriptor(), name, value);
}
enum Abs_whlspd_0x211_211_Abs_whlspdrelestatusType {
  Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_VALID = 0,
  Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_INVALID = 1
};
bool Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_IsValid(int value);
const Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MIN = Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MAX = Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_INVALID;
const int Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_ARRAYSIZE = Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_descriptor();
inline const ::std::string& Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Name(Abs_whlspd_0x211_211_Abs_whlspdrelestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_descriptor(), value);
}
inline bool Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Parse(
    const ::std::string& name, Abs_whlspd_0x211_211_Abs_whlspdrelestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_whlspd_0x211_211_Abs_whlspdrelestatusType>(
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_descriptor(), name, value);
}
enum Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType {
  Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_VALID = 0,
  Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_INVALID = 1
};
bool Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_IsValid(int value);
const Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MIN = Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MAX = Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_INVALID;
const int Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_ARRAYSIZE = Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_descriptor();
inline const ::std::string& Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Name(Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_descriptor(), value);
}
inline bool Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Parse(
    const ::std::string& name, Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType>(
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_descriptor(), name, value);
}
enum Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType {
  Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_VALID = 0,
  Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_INVALID = 1
};
bool Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_IsValid(int value);
const Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MIN = Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MAX = Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_INVALID;
const int Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_ARRAYSIZE = Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_descriptor();
inline const ::std::string& Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Name(Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_descriptor(), value);
}
inline bool Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Parse(
    const ::std::string& name, Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType>(
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_descriptor(), name, value);
}
enum Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType {
  Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_STANDARD = 0,
  Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_SPORT = 1,
  Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_ECO = 2,
  Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_INVALID = 3
};
bool Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_IsValid(int value);
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_MIN = Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_STANDARD;
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_MAX = Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_INVALID;
const int Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_ARRAYSIZE = Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_descriptor();
inline const ::std::string& Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Name(Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_descriptor(), value);
}
inline bool Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Parse(
    const ::std::string& name, Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType>(
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_descriptor(), name, value);
}
enum Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType {
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_NON_START_STOPMODE = 0,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINESTANDBY = 1,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINESTOPPED = 2,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_STARTERRESTART = 3,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINERESTART = 4,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINEOPERATION = 5,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINEAUTO_STOPPING = 6,
  Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_RESERVED = 7
};
bool Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_IsValid(int value);
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_MIN = Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_NON_START_STOPMODE;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_MAX = Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_RESERVED;
const int Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_ARRAYSIZE = Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_descriptor();
inline const ::std::string& Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Name(Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_descriptor(), value);
}
inline bool Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Parse(
    const ::std::string& name, Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType>(
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_descriptor(), name, value);
}
enum Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType {
  Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_CRUISECONTROLOOFF = 0,
  Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_ACTIVE = 1,
  Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_STANDBY = 2,
  Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_ERROR = 3
};
bool Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_IsValid(int value);
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_MIN = Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_CRUISECONTROLOOFF;
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_MAX = Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_ERROR;
const int Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_ARRAYSIZE = Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_descriptor();
inline const ::std::string& Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Name(Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_descriptor(), value);
}
inline bool Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Parse(
    const ::std::string& name, Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType>(
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_descriptor(), name, value);
}
enum Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType {
  Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_EMS_DRIVINGMODECHANGE_FAULT_FLAG_NORMAL = 0,
  Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_EMS_DRIVINGMODECHANGE_FAULT_FLAG_FAULT = 1
};
bool Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_IsValid(int value);
const Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_MIN = Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_EMS_DRIVINGMODECHANGE_FAULT_FLAG_NORMAL;
const Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_MAX = Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_EMS_DRIVINGMODECHANGE_FAULT_FLAG_FAULT;
const int Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_ARRAYSIZE = Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_descriptor();
inline const ::std::string& Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Name(Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_descriptor(), value);
}
inline bool Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Parse(
    const ::std::string& name, Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType>(
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_descriptor(), name, value);
}
enum Esp_raw_0x212_212_Esp_vxwwheelrrvalidType {
  Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_ESP_VXWWHEELRRVALID_VALID = 0,
  Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_ESP_VXWWHEELRRVALID_INVALID = 1
};
bool Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_IsValid(int value);
const Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_MIN = Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_ESP_VXWWHEELRRVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_MAX = Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_ESP_VXWWHEELRRVALID_INVALID;
const int Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_ARRAYSIZE = Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_descriptor();
inline const ::std::string& Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Name(Esp_raw_0x212_212_Esp_vxwwheelrrvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_descriptor(), value);
}
inline bool Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Parse(
    const ::std::string& name, Esp_raw_0x212_212_Esp_vxwwheelrrvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_raw_0x212_212_Esp_vxwwheelrrvalidType>(
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_descriptor(), name, value);
}
enum Esp_raw_0x212_212_Esp_vxwwheelrlvalidType {
  Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_ESP_VXWWHEELRLVALID_VALID = 0,
  Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_ESP_VXWWHEELRLVALID_INVALID = 1
};
bool Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_IsValid(int value);
const Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_MIN = Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_ESP_VXWWHEELRLVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_MAX = Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_ESP_VXWWHEELRLVALID_INVALID;
const int Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_ARRAYSIZE = Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_descriptor();
inline const ::std::string& Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Name(Esp_raw_0x212_212_Esp_vxwwheelrlvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_descriptor(), value);
}
inline bool Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Parse(
    const ::std::string& name, Esp_raw_0x212_212_Esp_vxwwheelrlvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_raw_0x212_212_Esp_vxwwheelrlvalidType>(
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_descriptor(), name, value);
}
enum Esp_raw_0x212_212_Esp_vxwwheelfrvalidType {
  Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_ESP_VXWWHEELFRVALID_VALID = 0,
  Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_ESP_VXWWHEELFRVALID_INVALID = 1
};
bool Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_IsValid(int value);
const Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_MIN = Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_ESP_VXWWHEELFRVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_MAX = Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_ESP_VXWWHEELFRVALID_INVALID;
const int Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_ARRAYSIZE = Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_descriptor();
inline const ::std::string& Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Name(Esp_raw_0x212_212_Esp_vxwwheelfrvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_descriptor(), value);
}
inline bool Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Parse(
    const ::std::string& name, Esp_raw_0x212_212_Esp_vxwwheelfrvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_raw_0x212_212_Esp_vxwwheelfrvalidType>(
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_descriptor(), name, value);
}
enum Esp_raw_0x212_212_Esp_vxwwheelflvalidType {
  Esp_raw_0x212_212_Esp_vxwwheelflvalidType_ESP_VXWWHEELFLVALID_VALID = 0,
  Esp_raw_0x212_212_Esp_vxwwheelflvalidType_ESP_VXWWHEELFLVALID_INVALID = 1
};
bool Esp_raw_0x212_212_Esp_vxwwheelflvalidType_IsValid(int value);
const Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_MIN = Esp_raw_0x212_212_Esp_vxwwheelflvalidType_ESP_VXWWHEELFLVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_MAX = Esp_raw_0x212_212_Esp_vxwwheelflvalidType_ESP_VXWWHEELFLVALID_INVALID;
const int Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_ARRAYSIZE = Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelflvalidType_descriptor();
inline const ::std::string& Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Name(Esp_raw_0x212_212_Esp_vxwwheelflvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_descriptor(), value);
}
inline bool Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Parse(
    const ::std::string& name, Esp_raw_0x212_212_Esp_vxwwheelflvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_raw_0x212_212_Esp_vxwwheelflvalidType>(
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorstsrearriType {
  Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_CLOSED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_OPEN = 2,
  Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MIN = Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MAX = Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Name(Gw_bcm_door_0x310_310_Bcm_doorstsrearriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorstsrearriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorstsrearriType>(
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType {
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_LOCKED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_UNLOCKED = 2,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MIN = Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MAX = Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Name(Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType>(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType {
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_LOCKED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_UNLOCKED = 2,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MIN = Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MAX = Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Name(Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType>(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType {
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_LOCKED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_UNLOCKED = 2,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MIN = Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MAX = Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Name(Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType>(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_antitheftstsType {
  Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_FORTIFY = 0,
  Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_LIFT_THE_FORTIFICATION = 1,
  Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_WARNING = 2,
  Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ABNORMAL_FORTIFICATION = 3
};
bool Gw_bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MIN = Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_FORTIFY;
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MAX = Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ABNORMAL_FORTIFICATION;
const int Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_antitheftstsType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Name(Gw_bcm_door_0x310_310_Bcm_antitheftstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_antitheftstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_antitheftstsType>(
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_loadsensitivityType {
  Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_BCM_LOADSENSITIVITY_INACITVE = 0,
  Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_BCM_LOADSENSITIVITY_ACTIVE = 1
};
bool Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_MIN = Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_BCM_LOADSENSITIVITY_INACITVE;
const Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_MAX = Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_BCM_LOADSENSITIVITY_ACTIVE;
const int Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Name(Gw_bcm_door_0x310_310_Bcm_loadsensitivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_loadsensitivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_loadsensitivityType>(
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType {
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION = 0,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_LOCK = 1,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK = 2,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK = 3,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK = 4,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK = 5,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK = 6,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK = 7,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK = 8,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_TBOX_LOCK = 9,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_SPEEDLOCK = 10,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_LOCK = 11,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_TBOX_30S_AUTOLOCK = 12,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK = 15,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK = 17,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK = 18,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK = 19,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK = 20,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK = 21,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK = 22,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK = 23,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK = 24,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_TBOX_UNLCOK = 25,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_UNLOCK = 26,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_KEY_FORGOTTEN_TO_UNLOCK_THE_CAR = 27,
  Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK = 31
};
bool Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MIN = Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MAX = Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK;
const int Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Name(Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType>(
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType {
  Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_LOCKED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_UNLOCKED = 2,
  Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MIN = Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MAX = Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Name(Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType>(
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorststrunkType {
  Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_CLOSED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_OPEN = 2,
  Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MIN = Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MAX = Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorststrunkType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Name(Gw_bcm_door_0x310_310_Bcm_doorststrunkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorststrunkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorststrunkType>(
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType {
  Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION = 0,
  Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED = 1
};
bool Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MIN = Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION;
const Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MAX = Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED;
const int Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Name(Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType>(
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorstsrearleType {
  Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_CLOSED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_OPEN = 2,
  Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MIN = Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MAX = Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Name(Gw_bcm_door_0x310_310_Bcm_doorstsrearleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorstsrearleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorstsrearleType>(
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_frontwiperstsType {
  Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_OFF = 1,
  Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_LOW = 2,
  Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_HIGH = 3
};
bool Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MIN = Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MAX = Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_HIGH;
const int Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Name(Gw_bcm_door_0x310_310_Bcm_frontwiperstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_frontwiperstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_frontwiperstsType>(
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_enginehoodstsType {
  Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_CLOSED = 1,
  Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_OPEN = 2,
  Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MIN = Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MAX = Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Name(Gw_bcm_door_0x310_310_Bcm_enginehoodstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_enginehoodstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_enginehoodstsType>(
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_plg_driverswType {
  Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_RELEASE = 0,
  Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_PRESS = 1,
  Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_STUCK = 2,
  Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_RESERVED = 3
};
bool Gw_bcm_door_0x310_310_Bcm_plg_driverswType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_MIN = Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_RELEASE;
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_MAX = Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_RESERVED;
const int Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_plg_driverswType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Name(Gw_bcm_door_0x310_310_Bcm_plg_driverswType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_plg_driverswType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_plg_driverswType>(
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_windowscmdType {
  Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_INVALID = 0,
  Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_UP = 1,
  Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_DOWN = 2,
  Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_VENT = 3,
  Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_STOP = 4
};
bool Gw_bcm_door_0x310_310_Bcm_windowscmdType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_MIN = Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_INVALID;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_MAX = Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_STOP;
const int Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_windowscmdType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_windowscmdType_Name(Gw_bcm_door_0x310_310_Bcm_windowscmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_windowscmdType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_windowscmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_windowscmdType>(
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_rearwiperstsType {
  Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_OFF = 1,
  Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_ON = 2,
  Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_RESERVED = 3
};
bool Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MIN = Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MAX = Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_RESERVED;
const int Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Name(Gw_bcm_door_0x310_310_Bcm_rearwiperstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_rearwiperstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_rearwiperstsType>(
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType {
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_CLOSED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_OPEN = 2,
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MIN = Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MAX = Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Name(Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType>(
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType {
  Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_OFF = 0,
  Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_LEON = 1,
  Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_RION = 2,
  Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_LEANDRION = 3
};
bool Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_MIN = Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_OFF;
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_MAX = Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_LEANDRION;
const int Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Name(Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType>(
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType {
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_CLOSED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_OPEN = 2,
  Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MIN = Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MAX = Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Name(Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType>(
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor(), name, value);
}
enum Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType {
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_NO_USED = 0,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_LOCKED = 1,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_UNLOCKED = 2,
  Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_FAULT = 3
};
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(int value);
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MIN = Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MAX = Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_FAULT;
const int Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_ARRAYSIZE = Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor();
inline const ::std::string& Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Name(Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor(), value);
}
inline bool Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Parse(
    const ::std::string& name, Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType>(
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_esp_target_gear_requestType {
  Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_NO_REQUEST = 0,
  Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_PARK = 1,
  Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_REVERSE = 2,
  Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_NEUTRAL = 3,
  Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_DRIVE = 4
};
bool Pam_0x270_270_Pam_esp_target_gear_requestType_IsValid(int value);
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_MIN = Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_NO_REQUEST;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_MAX = Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_DRIVE;
const int Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_ARRAYSIZE = Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_esp_target_gear_requestType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_esp_target_gear_requestType_Name(Pam_0x270_270_Pam_esp_target_gear_requestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_esp_target_gear_requestType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_esp_target_gear_requestType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_esp_target_gear_requestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_esp_target_gear_requestType>(
    Pam_0x270_270_Pam_esp_target_gear_requestType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_brakefunctionmodeType {
  Pam_0x270_270_Pam_brakefunctionmodeType_PAM_BRAKEFUNCTIONMODE_NO_ACTION = 0,
  Pam_0x270_270_Pam_brakefunctionmodeType_PAM_BRAKEFUNCTIONMODE_AUTOMATICPARK = 1
};
bool Pam_0x270_270_Pam_brakefunctionmodeType_IsValid(int value);
const Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_MIN = Pam_0x270_270_Pam_brakefunctionmodeType_PAM_BRAKEFUNCTIONMODE_NO_ACTION;
const Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_MAX = Pam_0x270_270_Pam_brakefunctionmodeType_PAM_BRAKEFUNCTIONMODE_AUTOMATICPARK;
const int Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_ARRAYSIZE = Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_brakefunctionmodeType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_brakefunctionmodeType_Name(Pam_0x270_270_Pam_brakefunctionmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_brakefunctionmodeType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_brakefunctionmodeType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_brakefunctionmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_brakefunctionmodeType>(
    Pam_0x270_270_Pam_brakefunctionmodeType_descriptor(), name, value);
}
enum Pam_0x270_270_Stopstartinhibit_apaType {
  Pam_0x270_270_Stopstartinhibit_apaType_STOPSTARTINHIBIT_APA_FALSE = 0,
  Pam_0x270_270_Stopstartinhibit_apaType_STOPSTARTINHIBIT_APA_TRUE = 1
};
bool Pam_0x270_270_Stopstartinhibit_apaType_IsValid(int value);
const Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_MIN = Pam_0x270_270_Stopstartinhibit_apaType_STOPSTARTINHIBIT_APA_FALSE;
const Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_MAX = Pam_0x270_270_Stopstartinhibit_apaType_STOPSTARTINHIBIT_APA_TRUE;
const int Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_ARRAYSIZE = Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Stopstartinhibit_apaType_descriptor();
inline const ::std::string& Pam_0x270_270_Stopstartinhibit_apaType_Name(Pam_0x270_270_Stopstartinhibit_apaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Stopstartinhibit_apaType_descriptor(), value);
}
inline bool Pam_0x270_270_Stopstartinhibit_apaType_Parse(
    const ::std::string& name, Pam_0x270_270_Stopstartinhibit_apaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Stopstartinhibit_apaType>(
    Pam_0x270_270_Stopstartinhibit_apaType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_apafType {
  Pam_0x270_270_Pam_apafType_PAM_APAF_NORMAL = 0,
  Pam_0x270_270_Pam_apafType_PAM_APAF_APA_FAILURE = 1
};
bool Pam_0x270_270_Pam_apafType_IsValid(int value);
const Pam_0x270_270_Pam_apafType Pam_0x270_270_Pam_apafType_Pam_apafType_MIN = Pam_0x270_270_Pam_apafType_PAM_APAF_NORMAL;
const Pam_0x270_270_Pam_apafType Pam_0x270_270_Pam_apafType_Pam_apafType_MAX = Pam_0x270_270_Pam_apafType_PAM_APAF_APA_FAILURE;
const int Pam_0x270_270_Pam_apafType_Pam_apafType_ARRAYSIZE = Pam_0x270_270_Pam_apafType_Pam_apafType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_apafType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_apafType_Name(Pam_0x270_270_Pam_apafType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_apafType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_apafType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_apafType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_apafType>(
    Pam_0x270_270_Pam_apafType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_cmdepsstsType {
  Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_NO_REQUEST = 0,
  Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_CONTROL_EPS_REQUEST = 1,
  Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_EPS_CONTROL = 2
};
bool Pam_0x270_270_Pam_cmdepsstsType_IsValid(int value);
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_MIN = Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_NO_REQUEST;
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_MAX = Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_EPS_CONTROL;
const int Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_ARRAYSIZE = Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_cmdepsstsType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_cmdepsstsType_Name(Pam_0x270_270_Pam_cmdepsstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_cmdepsstsType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_cmdepsstsType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_cmdepsstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_cmdepsstsType>(
    Pam_0x270_270_Pam_cmdepsstsType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_stsType {
  Pam_0x270_270_Pam_stsType_PAM_STS_OFF = 0,
  Pam_0x270_270_Pam_stsType_PAM_STS_STANDBY_STANDBY_ENABLE = 1,
  Pam_0x270_270_Pam_stsType_PAM_STS_SEARCHING_ENABLE = 2,
  Pam_0x270_270_Pam_stsType_PAM_STS_GUIDANCE_ACTIVE_ACTIVE = 3,
  Pam_0x270_270_Pam_stsType_PAM_STS_COMPLETED = 4,
  Pam_0x270_270_Pam_stsType_PAM_STS_FAILURE_DISABLE = 5,
  Pam_0x270_270_Pam_stsType_PAM_STS_TERMINATED = 6,
  Pam_0x270_270_Pam_stsType_PAM_STS_RESERVED = 7
};
bool Pam_0x270_270_Pam_stsType_IsValid(int value);
const Pam_0x270_270_Pam_stsType Pam_0x270_270_Pam_stsType_Pam_stsType_MIN = Pam_0x270_270_Pam_stsType_PAM_STS_OFF;
const Pam_0x270_270_Pam_stsType Pam_0x270_270_Pam_stsType_Pam_stsType_MAX = Pam_0x270_270_Pam_stsType_PAM_STS_RESERVED;
const int Pam_0x270_270_Pam_stsType_Pam_stsType_ARRAYSIZE = Pam_0x270_270_Pam_stsType_Pam_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_stsType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_stsType_Name(Pam_0x270_270_Pam_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_stsType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_stsType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_stsType>(
    Pam_0x270_270_Pam_stsType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_brakemodestsType {
  Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_INIT = 0,
  Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_STANDBY = 1,
  Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_ACTIVE = 2,
  Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_MANEUVERFINISHED = 3,
  Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_SUSPEND = 4,
  Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_ABORT = 5
};
bool Pam_0x270_270_Pam_brakemodestsType_IsValid(int value);
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_MIN = Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_INIT;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_MAX = Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_ABORT;
const int Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_ARRAYSIZE = Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_brakemodestsType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_brakemodestsType_Name(Pam_0x270_270_Pam_brakemodestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_brakemodestsType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_brakemodestsType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_brakemodestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_brakemodestsType>(
    Pam_0x270_270_Pam_brakemodestsType_descriptor(), name, value);
}
enum Pam_0x270_270_Pam_failurebrakemodeType {
  Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_IDLE_NO_BRAKING = 0,
  Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_COMFORTABLE_RESERVED = 1,
  Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_EMERGENCY = 2,
  Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_RESERVED = 3
};
bool Pam_0x270_270_Pam_failurebrakemodeType_IsValid(int value);
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_MIN = Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_IDLE_NO_BRAKING;
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_MAX = Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_RESERVED;
const int Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_ARRAYSIZE = Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_failurebrakemodeType_descriptor();
inline const ::std::string& Pam_0x270_270_Pam_failurebrakemodeType_Name(Pam_0x270_270_Pam_failurebrakemodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x270_270_Pam_failurebrakemodeType_descriptor(), value);
}
inline bool Pam_0x270_270_Pam_failurebrakemodeType_Parse(
    const ::std::string& name, Pam_0x270_270_Pam_failurebrakemodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x270_270_Pam_failurebrakemodeType>(
    Pam_0x270_270_Pam_failurebrakemodeType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_infodisplayreqType {
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_NO_REQUEST = 0,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FORWARD_AGAIN = 1,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_TURN_LEVER = 2,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_P = 3,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_CONFIRM_SWITCH = 4,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_SEARCHINGPROCESS = 5,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_DRIVE_FW = 6,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_STOP = 7,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_SELECT = 8,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_OFF = 9,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_PROCESS_BAR = 10,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_PPSC_REQUEST_ONLY = 11,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_CPSC_REQUEST_ONLY = 12,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_PPSC_CPSC_REQUEST = 13,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_R = 14,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_D = 15,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_DRIVE_BW = 16,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_SLOW_DOWN = 17,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_RELEASE_BRAKE_ANDSTEERING_WHEEL = 18,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_CLOSE_DOOR = 19,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_BUCKLE_SEAT_BELT = 20,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_REPRESS_DEAD_MAN_SWITCH = 21,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_PRESS_BRAKE_PEDAL = 22,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_R_AND_BRAKE = 23,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_COMPLETE = 24,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_NOT_AVAILABLE = 25,
  Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_RESERVED = 26
};
bool Pam_0x271_271_Pam_infodisplayreqType_IsValid(int value);
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_MIN = Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_NO_REQUEST;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_MAX = Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_RESERVED;
const int Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_ARRAYSIZE = Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_infodisplayreqType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_infodisplayreqType_Name(Pam_0x271_271_Pam_infodisplayreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_infodisplayreqType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_infodisplayreqType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_infodisplayreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_infodisplayreqType>(
    Pam_0x271_271_Pam_infodisplayreqType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsflmType {
  Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_3 = 3,
  Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_4 = 4,
  Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_5 = 5
};
bool Pam_0x271_271_Pam_objectstsflmType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_MIN = Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_MAX = Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_5;
const int Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsflmType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsflmType_Name(Pam_0x271_271_Pam_objectstsflmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsflmType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsflmType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsflmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsflmType>(
    Pam_0x271_271_Pam_objectstsflmType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsflcType {
  Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_ZONE_3 = 3
};
bool Pam_0x271_271_Pam_objectstsflcType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_MIN = Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_MAX = Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_ZONE_3;
const int Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsflcType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsflcType_Name(Pam_0x271_271_Pam_objectstsflcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsflcType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsflcType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsflcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsflcType>(
    Pam_0x271_271_Pam_objectstsflcType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsfrcType {
  Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_ZONE_3 = 3
};
bool Pam_0x271_271_Pam_objectstsfrcType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_MIN = Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_MAX = Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_ZONE_3;
const int Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsfrcType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsfrcType_Name(Pam_0x271_271_Pam_objectstsfrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsfrcType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsfrcType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsfrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsfrcType>(
    Pam_0x271_271_Pam_objectstsfrcType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsfrmType {
  Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_3 = 3,
  Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_4 = 4,
  Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_5 = 5
};
bool Pam_0x271_271_Pam_objectstsfrmType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_MIN = Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_MAX = Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_5;
const int Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsfrmType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsfrmType_Name(Pam_0x271_271_Pam_objectstsfrmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsfrmType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsfrmType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsfrmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsfrmType>(
    Pam_0x271_271_Pam_objectstsfrmType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsrlmType {
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_IN_ZONE1 = 1,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE2 = 2,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE3 = 3,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE4 = 4,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE5 = 5,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE6 = 6,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE7 = 7,
  Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_RESERVED = 8
};
bool Pam_0x271_271_Pam_objectstsrlmType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_MIN = Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_MAX = Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_RESERVED;
const int Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrlmType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsrlmType_Name(Pam_0x271_271_Pam_objectstsrlmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsrlmType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsrlmType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsrlmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsrlmType>(
    Pam_0x271_271_Pam_objectstsrlmType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsrlcType {
  Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_ZONE_3 = 3
};
bool Pam_0x271_271_Pam_objectstsrlcType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_MIN = Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_MAX = Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_ZONE_3;
const int Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrlcType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsrlcType_Name(Pam_0x271_271_Pam_objectstsrlcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsrlcType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsrlcType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsrlcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsrlcType>(
    Pam_0x271_271_Pam_objectstsrlcType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsrrcType {
  Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_ZONE_3 = 3
};
bool Pam_0x271_271_Pam_objectstsrrcType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_MIN = Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_MAX = Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_ZONE_3;
const int Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrrcType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsrrcType_Name(Pam_0x271_271_Pam_objectstsrrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsrrcType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsrrcType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsrrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsrrcType>(
    Pam_0x271_271_Pam_objectstsrrcType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_objectstsrrmType {
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_NO_OBJECT = 0,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_IN_ZONE_1 = 1,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_2 = 2,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_3 = 3,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_4 = 4,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_5 = 5,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_6 = 6,
  Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_7 = 7
};
bool Pam_0x271_271_Pam_objectstsrrmType_IsValid(int value);
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_MIN = Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_MAX = Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_7;
const int Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_ARRAYSIZE = Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrrmType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_objectstsrrmType_Name(Pam_0x271_271_Pam_objectstsrrmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_objectstsrrmType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_objectstsrrmType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_objectstsrrmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_objectstsrrmType>(
    Pam_0x271_271_Pam_objectstsrrmType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_chimecmdsoundstatusType {
  Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_NOWARNING = 0,
  Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_FRONTSYSTEMWARNING = 1,
  Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_REARSYSTEMWARNING = 2,
  Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_APA = 3
};
bool Pam_0x271_271_Pam_chimecmdsoundstatusType_IsValid(int value);
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_MIN = Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_NOWARNING;
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_MAX = Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_APA;
const int Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_ARRAYSIZE = Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_chimecmdsoundstatusType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_chimecmdsoundstatusType_Name(Pam_0x271_271_Pam_chimecmdsoundstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_chimecmdsoundstatusType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_chimecmdsoundstatusType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_chimecmdsoundstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_chimecmdsoundstatusType>(
    Pam_0x271_271_Pam_chimecmdsoundstatusType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_rearsystemworkstsType {
  Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_DISABLE = 0,
  Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_ENABLE = 1,
  Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_ACTIVE = 2,
  Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_FAILED = 3
};
bool Pam_0x271_271_Pam_rearsystemworkstsType_IsValid(int value);
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_MIN = Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_DISABLE;
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_MAX = Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_FAILED;
const int Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_ARRAYSIZE = Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_rearsystemworkstsType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_rearsystemworkstsType_Name(Pam_0x271_271_Pam_rearsystemworkstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_rearsystemworkstsType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_rearsystemworkstsType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_rearsystemworkstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_rearsystemworkstsType>(
    Pam_0x271_271_Pam_rearsystemworkstsType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_frontsystemworkstsType {
  Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_DISABLE = 0,
  Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_ENABLE = 1,
  Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_ACTIVE = 2,
  Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_FAILED = 3
};
bool Pam_0x271_271_Pam_frontsystemworkstsType_IsValid(int value);
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_MIN = Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_DISABLE;
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_MAX = Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_FAILED;
const int Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_ARRAYSIZE = Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_frontsystemworkstsType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_frontsystemworkstsType_Name(Pam_0x271_271_Pam_frontsystemworkstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_frontsystemworkstsType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_frontsystemworkstsType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_frontsystemworkstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_frontsystemworkstsType>(
    Pam_0x271_271_Pam_frontsystemworkstsType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_parkingbarstsType {
  Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_OFF = 0,
  Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_ON_FROM_TOP_TO_BOTTOM = 1,
  Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_ON_FROM_BOTTOM_TO_TOP = 2
};
bool Pam_0x271_271_Pam_parkingbarstsType_IsValid(int value);
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_MIN = Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_OFF;
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_MAX = Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_ON_FROM_BOTTOM_TO_TOP;
const int Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_ARRAYSIZE = Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_parkingbarstsType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_parkingbarstsType_Name(Pam_0x271_271_Pam_parkingbarstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_parkingbarstsType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_parkingbarstsType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_parkingbarstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_parkingbarstsType>(
    Pam_0x271_271_Pam_parkingbarstsType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_chimecmdsoundcadenceType {
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_0_NO_WARNING = 0,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_1 = 1,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_2 = 2,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_3 = 3,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_4 = 4,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_5 = 5,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_6 = 6,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_7 = 7,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_RPA_NOK = 8,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_RPA_OK = 9,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_10_PAM_FAILED_TONE = 10,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_11_PAM_WARNING_TONE = 11,
  Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_12_PAM_SUCCESSFUL_TONE = 12
};
bool Pam_0x271_271_Pam_chimecmdsoundcadenceType_IsValid(int value);
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_MIN = Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_0_NO_WARNING;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_MAX = Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_12_PAM_SUCCESSFUL_TONE;
const int Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_ARRAYSIZE = Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_chimecmdsoundcadenceType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_chimecmdsoundcadenceType_Name(Pam_0x271_271_Pam_chimecmdsoundcadenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_chimecmdsoundcadenceType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_chimecmdsoundcadenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_chimecmdsoundcadenceType>(
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_descriptor(), name, value);
}
enum Pam_0x271_271_Pam_parkingbarpercentType {
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_0PERCENT = 0,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_1PERCENT = 1,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_2PERCENT = 2,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_3PERCENT = 3,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_4PERCENT = 4,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_5PERCENT = 5,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_6PERCENT = 6,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_7PERCENT = 7,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_8PERCENT = 8,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_9PERCENT = 9,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_10PERCENT = 10,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_11PERCENT = 11,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_12PERCENT = 12,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_13PERCENT = 13,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_14PERCENT = 14,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_15PERCENT = 15,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_16PERCENT = 16,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_17PERCENT = 17,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_18PERCENT = 18,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_19PERCENT = 19,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_20PERCENT = 20,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_21PERCENT = 21,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_22PERCENT = 22,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_23PERCENT = 23,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_24PERCENT = 24,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_25PERCENT = 25,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_26PERCENT = 26,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_27PERCENT = 27,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_28PERCENT = 28,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_29PERCENT = 29,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_30PERCENT = 30,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_31PERCENT = 31,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_32PERCENT = 32,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_33PERCENT = 33,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_34PERCENT = 34,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_35PERCENT = 35,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_36PERCENT = 36,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_37PERCENT = 37,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_38PERCENT = 38,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_39PERCENT = 39,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_40PERCENT = 40,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_41PERCENT = 41,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_42PERCENT = 42,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_43PERCENT = 43,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_44PERCENT = 44,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_45PERCENT = 45,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_46PERCENT = 46,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_47PERCENT = 47,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_48PERCENT = 48,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_49PERCENT = 49,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_50PERCENT = 50,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_51PERCENT = 51,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_52PERCENT = 52,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_53PERCENT = 53,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_54PERCENT = 54,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_55PERCENT = 55,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_56PERCENT = 56,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_57PERCENT = 57,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_58PERCENT = 58,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_59PERCENT = 59,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_60PERCENT = 60,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_61PERCENT = 61,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_62PERCENT = 62,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_63PERCENT = 63,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_64PERCENT = 64,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_65PERCENT = 65,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_66PERCENT = 66,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_67PERCENT = 67,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_68PERCENT = 68,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_69PERCENT = 69,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_70PERCENT = 70,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_71PERCENT = 71,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_72PERCENT = 72,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_73PERCENT = 73,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_74PERCENT = 74,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_75PERCENT = 75,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_76PERCENT = 76,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_77PERCENT = 77,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_78PERCENT = 78,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_79PERCENT = 79,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_80PERCENT = 80,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_81PERCENT = 81,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_82PERCENT = 82,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_83PERCENT = 83,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_84PERCENT = 84,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_85PERCENT = 85,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_86PERCENT = 86,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_87PERCENT = 87,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_88PERCENT = 88,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_89PERCENT = 89,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_90PERCENT = 90,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_91PERCENT = 91,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_92PERCENT = 92,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_93PERCENT = 93,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_94PERCENT = 94,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_95PERCENT = 95,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_96PERCENT = 96,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_97PERCENT = 97,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_98PERCENT = 98,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_99PERCENT = 99,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_100PERCENT = 100,
  Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_NO_DISPLAY_APA = 101
};
bool Pam_0x271_271_Pam_parkingbarpercentType_IsValid(int value);
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_MIN = Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_0PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_MAX = Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_NO_DISPLAY_APA;
const int Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_ARRAYSIZE = Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_parkingbarpercentType_descriptor();
inline const ::std::string& Pam_0x271_271_Pam_parkingbarpercentType_Name(Pam_0x271_271_Pam_parkingbarpercentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x271_271_Pam_parkingbarpercentType_descriptor(), value);
}
inline bool Pam_0x271_271_Pam_parkingbarpercentType_Parse(
    const ::std::string& name, Pam_0x271_271_Pam_parkingbarpercentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x271_271_Pam_parkingbarpercentType>(
    Pam_0x271_271_Pam_parkingbarpercentType_descriptor(), name, value);
}
enum Pam_0x272_272_Apa_parkslot_stateType {
  Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_NO_SLOT = 0,
  Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_SLOT_LEFT = 1,
  Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_SLOT_RIGHT = 2,
  Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_INVALID = 3
};
bool Pam_0x272_272_Apa_parkslot_stateType_IsValid(int value);
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_MIN = Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_NO_SLOT;
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_MAX = Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_INVALID;
const int Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_ARRAYSIZE = Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_parkslot_stateType_descriptor();
inline const ::std::string& Pam_0x272_272_Apa_parkslot_stateType_Name(Pam_0x272_272_Apa_parkslot_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Apa_parkslot_stateType_descriptor(), value);
}
inline bool Pam_0x272_272_Apa_parkslot_stateType_Parse(
    const ::std::string& name, Pam_0x272_272_Apa_parkslot_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Apa_parkslot_stateType>(
    Pam_0x272_272_Apa_parkslot_stateType_descriptor(), name, value);
}
enum Pam_0x272_272_Sdg_objectsts_frsType {
  Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_NO_OBJECT = 0,
  Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_1 = 1,
  Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_2 = 2,
  Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_3 = 3
};
bool Pam_0x272_272_Sdg_objectsts_frsType_IsValid(int value);
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_MIN = Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_MAX = Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_3;
const int Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_ARRAYSIZE = Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectsts_frsType_descriptor();
inline const ::std::string& Pam_0x272_272_Sdg_objectsts_frsType_Name(Pam_0x272_272_Sdg_objectsts_frsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Sdg_objectsts_frsType_descriptor(), value);
}
inline bool Pam_0x272_272_Sdg_objectsts_frsType_Parse(
    const ::std::string& name, Pam_0x272_272_Sdg_objectsts_frsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Sdg_objectsts_frsType>(
    Pam_0x272_272_Sdg_objectsts_frsType_descriptor(), name, value);
}
enum Pam_0x272_272_Sdg_objectstsrlsType {
  Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_NO_OBJECT = 0,
  Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_1 = 1,
  Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_2 = 2,
  Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_3 = 3
};
bool Pam_0x272_272_Sdg_objectstsrlsType_IsValid(int value);
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_MIN = Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_MAX = Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_3;
const int Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_ARRAYSIZE = Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsrlsType_descriptor();
inline const ::std::string& Pam_0x272_272_Sdg_objectstsrlsType_Name(Pam_0x272_272_Sdg_objectstsrlsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Sdg_objectstsrlsType_descriptor(), value);
}
inline bool Pam_0x272_272_Sdg_objectstsrlsType_Parse(
    const ::std::string& name, Pam_0x272_272_Sdg_objectstsrlsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Sdg_objectstsrlsType>(
    Pam_0x272_272_Sdg_objectstsrlsType_descriptor(), name, value);
}
enum Pam_0x272_272_Apa_selectedsideType {
  Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_NONE = 0,
  Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_LEFT = 1,
  Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_RIGHT = 2,
  Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_RESERVED = 3
};
bool Pam_0x272_272_Apa_selectedsideType_IsValid(int value);
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_MIN = Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_NONE;
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_MAX = Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_RESERVED;
const int Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_ARRAYSIZE = Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_selectedsideType_descriptor();
inline const ::std::string& Pam_0x272_272_Apa_selectedsideType_Name(Pam_0x272_272_Apa_selectedsideType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Apa_selectedsideType_descriptor(), value);
}
inline bool Pam_0x272_272_Apa_selectedsideType_Parse(
    const ::std::string& name, Pam_0x272_272_Apa_selectedsideType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Apa_selectedsideType>(
    Pam_0x272_272_Apa_selectedsideType_descriptor(), name, value);
}
enum Pam_0x272_272_Sdg_objectstsrrsType {
  Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_NO_OBJECT = 0,
  Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_1 = 1,
  Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_2 = 2,
  Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_3 = 3
};
bool Pam_0x272_272_Sdg_objectstsrrsType_IsValid(int value);
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_MIN = Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_MAX = Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_3;
const int Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_ARRAYSIZE = Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsrrsType_descriptor();
inline const ::std::string& Pam_0x272_272_Sdg_objectstsrrsType_Name(Pam_0x272_272_Sdg_objectstsrrsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Sdg_objectstsrrsType_descriptor(), value);
}
inline bool Pam_0x272_272_Sdg_objectstsrrsType_Parse(
    const ::std::string& name, Pam_0x272_272_Sdg_objectstsrrsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Sdg_objectstsrrsType>(
    Pam_0x272_272_Sdg_objectstsrrsType_descriptor(), name, value);
}
enum Pam_0x272_272_Sdg_objectstsfrs_rrsType {
  Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_NO_OBJECT = 0,
  Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_1 = 1,
  Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_2 = 2,
  Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_3 = 3
};
bool Pam_0x272_272_Sdg_objectstsfrs_rrsType_IsValid(int value);
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_MIN = Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_MAX = Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_3;
const int Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_ARRAYSIZE = Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsfrs_rrsType_descriptor();
inline const ::std::string& Pam_0x272_272_Sdg_objectstsfrs_rrsType_Name(Pam_0x272_272_Sdg_objectstsfrs_rrsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_descriptor(), value);
}
inline bool Pam_0x272_272_Sdg_objectstsfrs_rrsType_Parse(
    const ::std::string& name, Pam_0x272_272_Sdg_objectstsfrs_rrsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Sdg_objectstsfrs_rrsType>(
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_descriptor(), name, value);
}
enum Pam_0x272_272_Apa_quit_indicationType {
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_NO_REQUEST = 0,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_FAILURE = 1,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_APA_FAILURE = 2,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_SPEED_HIGH = 3,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_TIMING_OVERFLOW = 4,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_MOVE_TIMES_OVERFLOW = 5,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_RECOVER_INT_TIMS_OVERFLOW = 6,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_GAS_PEDAL = 7,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERVENTION = 8,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_ACTVIE = 9,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_ACC = 10,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_TRAJECTORY = 11,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_SPACE_LIMIT = 12,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_NO_OBJECT_IN_FRONT = 13,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_SEAT_BELT_UNBUCKLE = 14,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_DRIVER_DOOR = 15,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_EPB_APPLY = 16,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_VEHICLE_BLOCK = 17,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERRUPT = 18,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_STEERING_WHEEL_HANDS_ON = 19,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_ABOVE_SLOPE_LIMT = 20,
  Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_RESERVED = 21
};
bool Pam_0x272_272_Apa_quit_indicationType_IsValid(int value);
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_MIN = Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_NO_REQUEST;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_MAX = Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_RESERVED;
const int Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_ARRAYSIZE = Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_quit_indicationType_descriptor();
inline const ::std::string& Pam_0x272_272_Apa_quit_indicationType_Name(Pam_0x272_272_Apa_quit_indicationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Apa_quit_indicationType_descriptor(), value);
}
inline bool Pam_0x272_272_Apa_quit_indicationType_Parse(
    const ::std::string& name, Pam_0x272_272_Apa_quit_indicationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Apa_quit_indicationType>(
    Pam_0x272_272_Apa_quit_indicationType_descriptor(), name, value);
}
enum Pam_0x272_272_Apa_recover_int_indicationType {
  Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_NO_REQUEST = 0,
  Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_DEAD_MAN_SWITCH_RELEASE = 1,
  Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_FOUND_OBSTACLE_IN_TRAJECTORY = 2,
  Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_NON_DRIVER_DOOR_OPEN = 3,
  Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_BRAKE_PEDAL_RELEASE = 4,
  Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_RESERVED = 5
};
bool Pam_0x272_272_Apa_recover_int_indicationType_IsValid(int value);
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_MIN = Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_NO_REQUEST;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_MAX = Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_RESERVED;
const int Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_ARRAYSIZE = Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_recover_int_indicationType_descriptor();
inline const ::std::string& Pam_0x272_272_Apa_recover_int_indicationType_Name(Pam_0x272_272_Apa_recover_int_indicationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Apa_recover_int_indicationType_descriptor(), value);
}
inline bool Pam_0x272_272_Apa_recover_int_indicationType_Parse(
    const ::std::string& name, Pam_0x272_272_Apa_recover_int_indicationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Apa_recover_int_indicationType>(
    Pam_0x272_272_Apa_recover_int_indicationType_descriptor(), name, value);
}
enum Pam_0x272_272_Sdg_objectstsfls_rlsType {
  Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_NO_OBJECT = 0,
  Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_1 = 1,
  Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_2 = 2,
  Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_3 = 3
};
bool Pam_0x272_272_Sdg_objectstsfls_rlsType_IsValid(int value);
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_MIN = Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_MAX = Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_3;
const int Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_ARRAYSIZE = Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsfls_rlsType_descriptor();
inline const ::std::string& Pam_0x272_272_Sdg_objectstsfls_rlsType_Name(Pam_0x272_272_Sdg_objectstsfls_rlsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Sdg_objectstsfls_rlsType_descriptor(), value);
}
inline bool Pam_0x272_272_Sdg_objectstsfls_rlsType_Parse(
    const ::std::string& name, Pam_0x272_272_Sdg_objectstsfls_rlsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Sdg_objectstsfls_rlsType>(
    Pam_0x272_272_Sdg_objectstsfls_rlsType_descriptor(), name, value);
}
enum Pam_0x272_272_Apa_indicationType {
  Pam_0x272_272_Apa_indicationType_APA_INDICATION_NO_ACTIVE = 0,
  Pam_0x272_272_Apa_indicationType_APA_INDICATION_PPSC_ACTIVE = 1,
  Pam_0x272_272_Apa_indicationType_APA_INDICATION_CPSC_ACTIVE = 2,
  Pam_0x272_272_Apa_indicationType_APA_INDICATION_POC_ACTIVE = 3,
  Pam_0x272_272_Apa_indicationType_APA_INDICATION_RESERVED = 4
};
bool Pam_0x272_272_Apa_indicationType_IsValid(int value);
const Pam_0x272_272_Apa_indicationType Pam_0x272_272_Apa_indicationType_Apa_indicationType_MIN = Pam_0x272_272_Apa_indicationType_APA_INDICATION_NO_ACTIVE;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272_Apa_indicationType_Apa_indicationType_MAX = Pam_0x272_272_Apa_indicationType_APA_INDICATION_RESERVED;
const int Pam_0x272_272_Apa_indicationType_Apa_indicationType_ARRAYSIZE = Pam_0x272_272_Apa_indicationType_Apa_indicationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_indicationType_descriptor();
inline const ::std::string& Pam_0x272_272_Apa_indicationType_Name(Pam_0x272_272_Apa_indicationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Apa_indicationType_descriptor(), value);
}
inline bool Pam_0x272_272_Apa_indicationType_Parse(
    const ::std::string& name, Pam_0x272_272_Apa_indicationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Apa_indicationType>(
    Pam_0x272_272_Apa_indicationType_descriptor(), name, value);
}
enum Pam_0x272_272_Sdg_objectstsflsType {
  Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_NO_OBJECT = 0,
  Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_1 = 1,
  Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_2 = 2,
  Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_3 = 3
};
bool Pam_0x272_272_Sdg_objectstsflsType_IsValid(int value);
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_MIN = Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_MAX = Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_3;
const int Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_ARRAYSIZE = Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsflsType_descriptor();
inline const ::std::string& Pam_0x272_272_Sdg_objectstsflsType_Name(Pam_0x272_272_Sdg_objectstsflsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pam_0x272_272_Sdg_objectstsflsType_descriptor(), value);
}
inline bool Pam_0x272_272_Sdg_objectstsflsType_Parse(
    const ::std::string& name, Pam_0x272_272_Sdg_objectstsflsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pam_0x272_272_Sdg_objectstsflsType>(
    Pam_0x272_272_Sdg_objectstsflsType_descriptor(), name, value);
}
enum Mrr_0x239_239_Acc_uppercomftbandreqType {
  Mrr_0x239_239_Acc_uppercomftbandreqType_ACC_UPPERCOMFTBANDREQ_NO_DEMAND = 0,
  Mrr_0x239_239_Acc_uppercomftbandreqType_ACC_UPPERCOMFTBANDREQ_DEMAND = 1
};
bool Mrr_0x239_239_Acc_uppercomftbandreqType_IsValid(int value);
const Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_MIN = Mrr_0x239_239_Acc_uppercomftbandreqType_ACC_UPPERCOMFTBANDREQ_NO_DEMAND;
const Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_MAX = Mrr_0x239_239_Acc_uppercomftbandreqType_ACC_UPPERCOMFTBANDREQ_DEMAND;
const int Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_ARRAYSIZE = Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_uppercomftbandreqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Acc_uppercomftbandreqType_Name(Mrr_0x239_239_Acc_uppercomftbandreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Acc_uppercomftbandreqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Acc_uppercomftbandreqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Acc_uppercomftbandreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Acc_uppercomftbandreqType>(
    Mrr_0x239_239_Acc_uppercomftbandreqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Acc_brakepreferredType {
  Mrr_0x239_239_Acc_brakepreferredType_ACC_BRAKEPREFERRED_NO_DEMAND = 0,
  Mrr_0x239_239_Acc_brakepreferredType_ACC_BRAKEPREFERRED_DEMAND = 1
};
bool Mrr_0x239_239_Acc_brakepreferredType_IsValid(int value);
const Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_MIN = Mrr_0x239_239_Acc_brakepreferredType_ACC_BRAKEPREFERRED_NO_DEMAND;
const Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_MAX = Mrr_0x239_239_Acc_brakepreferredType_ACC_BRAKEPREFERRED_DEMAND;
const int Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_ARRAYSIZE = Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_brakepreferredType_descriptor();
inline const ::std::string& Mrr_0x239_239_Acc_brakepreferredType_Name(Mrr_0x239_239_Acc_brakepreferredType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Acc_brakepreferredType_descriptor(), value);
}
inline bool Mrr_0x239_239_Acc_brakepreferredType_Parse(
    const ::std::string& name, Mrr_0x239_239_Acc_brakepreferredType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Acc_brakepreferredType>(
    Mrr_0x239_239_Acc_brakepreferredType_descriptor(), name, value);
}
enum Mrr_0x239_239_Eba_reqType {
  Mrr_0x239_239_Eba_reqType_EBA_REQ_NO_DEMAND = 0,
  Mrr_0x239_239_Eba_reqType_EBA_REQ_DEMAND = 1
};
bool Mrr_0x239_239_Eba_reqType_IsValid(int value);
const Mrr_0x239_239_Eba_reqType Mrr_0x239_239_Eba_reqType_Eba_reqType_MIN = Mrr_0x239_239_Eba_reqType_EBA_REQ_NO_DEMAND;
const Mrr_0x239_239_Eba_reqType Mrr_0x239_239_Eba_reqType_Eba_reqType_MAX = Mrr_0x239_239_Eba_reqType_EBA_REQ_DEMAND;
const int Mrr_0x239_239_Eba_reqType_Eba_reqType_ARRAYSIZE = Mrr_0x239_239_Eba_reqType_Eba_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Eba_reqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Eba_reqType_Name(Mrr_0x239_239_Eba_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Eba_reqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Eba_reqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Eba_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Eba_reqType>(
    Mrr_0x239_239_Eba_reqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Aeb_reqType {
  Mrr_0x239_239_Aeb_reqType_AEB_REQ_NO_DEMAND = 0,
  Mrr_0x239_239_Aeb_reqType_AEB_REQ_DEMAND = 1
};
bool Mrr_0x239_239_Aeb_reqType_IsValid(int value);
const Mrr_0x239_239_Aeb_reqType Mrr_0x239_239_Aeb_reqType_Aeb_reqType_MIN = Mrr_0x239_239_Aeb_reqType_AEB_REQ_NO_DEMAND;
const Mrr_0x239_239_Aeb_reqType Mrr_0x239_239_Aeb_reqType_Aeb_reqType_MAX = Mrr_0x239_239_Aeb_reqType_AEB_REQ_DEMAND;
const int Mrr_0x239_239_Aeb_reqType_Aeb_reqType_ARRAYSIZE = Mrr_0x239_239_Aeb_reqType_Aeb_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Aeb_reqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Aeb_reqType_Name(Mrr_0x239_239_Aeb_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Aeb_reqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Aeb_reqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Aeb_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Aeb_reqType>(
    Mrr_0x239_239_Aeb_reqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Acc_standstillreqType {
  Mrr_0x239_239_Acc_standstillreqType_ACC_STANDSTILLREQ_NO_DEMAND = 0,
  Mrr_0x239_239_Acc_standstillreqType_ACC_STANDSTILLREQ_DEMAND = 1
};
bool Mrr_0x239_239_Acc_standstillreqType_IsValid(int value);
const Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_MIN = Mrr_0x239_239_Acc_standstillreqType_ACC_STANDSTILLREQ_NO_DEMAND;
const Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_MAX = Mrr_0x239_239_Acc_standstillreqType_ACC_STANDSTILLREQ_DEMAND;
const int Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_ARRAYSIZE = Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_standstillreqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Acc_standstillreqType_Name(Mrr_0x239_239_Acc_standstillreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Acc_standstillreqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Acc_standstillreqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Acc_standstillreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Acc_standstillreqType>(
    Mrr_0x239_239_Acc_standstillreqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Acc_driveoffType {
  Mrr_0x239_239_Acc_driveoffType_ACC_DRIVEOFF_NO_DEMAND = 0,
  Mrr_0x239_239_Acc_driveoffType_ACC_DRIVEOFF_DEMAND = 1
};
bool Mrr_0x239_239_Acc_driveoffType_IsValid(int value);
const Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_MIN = Mrr_0x239_239_Acc_driveoffType_ACC_DRIVEOFF_NO_DEMAND;
const Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_MAX = Mrr_0x239_239_Acc_driveoffType_ACC_DRIVEOFF_DEMAND;
const int Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_ARRAYSIZE = Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_driveoffType_descriptor();
inline const ::std::string& Mrr_0x239_239_Acc_driveoffType_Name(Mrr_0x239_239_Acc_driveoffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Acc_driveoffType_descriptor(), value);
}
inline bool Mrr_0x239_239_Acc_driveoffType_Parse(
    const ::std::string& name, Mrr_0x239_239_Acc_driveoffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Acc_driveoffType>(
    Mrr_0x239_239_Acc_driveoffType_descriptor(), name, value);
}
enum Mrr_0x239_239_Awb_levelType {
  Mrr_0x239_239_Awb_levelType_AWB_LEVEL_NO_LEVEL = 0,
  Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_1 = 1,
  Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_2 = 2,
  Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_3 = 3,
  Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_4 = 4
};
bool Mrr_0x239_239_Awb_levelType_IsValid(int value);
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239_Awb_levelType_Awb_levelType_MIN = Mrr_0x239_239_Awb_levelType_AWB_LEVEL_NO_LEVEL;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239_Awb_levelType_Awb_levelType_MAX = Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_4;
const int Mrr_0x239_239_Awb_levelType_Awb_levelType_ARRAYSIZE = Mrr_0x239_239_Awb_levelType_Awb_levelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Awb_levelType_descriptor();
inline const ::std::string& Mrr_0x239_239_Awb_levelType_Name(Mrr_0x239_239_Awb_levelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Awb_levelType_descriptor(), value);
}
inline bool Mrr_0x239_239_Awb_levelType_Parse(
    const ::std::string& name, Mrr_0x239_239_Awb_levelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Awb_levelType>(
    Mrr_0x239_239_Awb_levelType_descriptor(), name, value);
}
enum Mrr_0x239_239_Abp_reqType {
  Mrr_0x239_239_Abp_reqType_ABP_REQ_NO_DEMAND = 0,
  Mrr_0x239_239_Abp_reqType_ABP_REQ_DEMAND = 1
};
bool Mrr_0x239_239_Abp_reqType_IsValid(int value);
const Mrr_0x239_239_Abp_reqType Mrr_0x239_239_Abp_reqType_Abp_reqType_MIN = Mrr_0x239_239_Abp_reqType_ABP_REQ_NO_DEMAND;
const Mrr_0x239_239_Abp_reqType Mrr_0x239_239_Abp_reqType_Abp_reqType_MAX = Mrr_0x239_239_Abp_reqType_ABP_REQ_DEMAND;
const int Mrr_0x239_239_Abp_reqType_Abp_reqType_ARRAYSIZE = Mrr_0x239_239_Abp_reqType_Abp_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Abp_reqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Abp_reqType_Name(Mrr_0x239_239_Abp_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Abp_reqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Abp_reqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Abp_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Abp_reqType>(
    Mrr_0x239_239_Abp_reqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Awb_reqType {
  Mrr_0x239_239_Awb_reqType_AWB_REQ_NO_DEMAND = 0,
  Mrr_0x239_239_Awb_reqType_AWB_REQ_DEMAND = 1
};
bool Mrr_0x239_239_Awb_reqType_IsValid(int value);
const Mrr_0x239_239_Awb_reqType Mrr_0x239_239_Awb_reqType_Awb_reqType_MIN = Mrr_0x239_239_Awb_reqType_AWB_REQ_NO_DEMAND;
const Mrr_0x239_239_Awb_reqType Mrr_0x239_239_Awb_reqType_Awb_reqType_MAX = Mrr_0x239_239_Awb_reqType_AWB_REQ_DEMAND;
const int Mrr_0x239_239_Awb_reqType_Awb_reqType_ARRAYSIZE = Mrr_0x239_239_Awb_reqType_Awb_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Awb_reqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Awb_reqType_Name(Mrr_0x239_239_Awb_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Awb_reqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Awb_reqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Awb_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Awb_reqType>(
    Mrr_0x239_239_Awb_reqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Aba_reqType {
  Mrr_0x239_239_Aba_reqType_ABA_REQ_NO_DEMAND = 0,
  Mrr_0x239_239_Aba_reqType_ABA_REQ_DEMAND = 1
};
bool Mrr_0x239_239_Aba_reqType_IsValid(int value);
const Mrr_0x239_239_Aba_reqType Mrr_0x239_239_Aba_reqType_Aba_reqType_MIN = Mrr_0x239_239_Aba_reqType_ABA_REQ_NO_DEMAND;
const Mrr_0x239_239_Aba_reqType Mrr_0x239_239_Aba_reqType_Aba_reqType_MAX = Mrr_0x239_239_Aba_reqType_ABA_REQ_DEMAND;
const int Mrr_0x239_239_Aba_reqType_Aba_reqType_ARRAYSIZE = Mrr_0x239_239_Aba_reqType_Aba_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Aba_reqType_descriptor();
inline const ::std::string& Mrr_0x239_239_Aba_reqType_Name(Mrr_0x239_239_Aba_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Aba_reqType_descriptor(), value);
}
inline bool Mrr_0x239_239_Aba_reqType_Parse(
    const ::std::string& name, Mrr_0x239_239_Aba_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Aba_reqType>(
    Mrr_0x239_239_Aba_reqType_descriptor(), name, value);
}
enum Mrr_0x239_239_Acc_stateType {
  Mrr_0x239_239_Acc_stateType_ACC_STATE_OFF_MODE = 0,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_PASSIVE_MODE = 1,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_STAND_BY_MODE = 2,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_ACTIVE_CONTROL_MODE = 3,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_BRAKE_ONLY_MODE = 4,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_OVERRIDE = 5,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_STANDSTILL = 6,
  Mrr_0x239_239_Acc_stateType_ACC_STATE_FAILURE_MODE = 7
};
bool Mrr_0x239_239_Acc_stateType_IsValid(int value);
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239_Acc_stateType_Acc_stateType_MIN = Mrr_0x239_239_Acc_stateType_ACC_STATE_OFF_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239_Acc_stateType_Acc_stateType_MAX = Mrr_0x239_239_Acc_stateType_ACC_STATE_FAILURE_MODE;
const int Mrr_0x239_239_Acc_stateType_Acc_stateType_ARRAYSIZE = Mrr_0x239_239_Acc_stateType_Acc_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_stateType_descriptor();
inline const ::std::string& Mrr_0x239_239_Acc_stateType_Name(Mrr_0x239_239_Acc_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Acc_stateType_descriptor(), value);
}
inline bool Mrr_0x239_239_Acc_stateType_Parse(
    const ::std::string& name, Mrr_0x239_239_Acc_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Acc_stateType>(
    Mrr_0x239_239_Acc_stateType_descriptor(), name, value);
}
enum Mrr_0x239_239_ShutdownmodeType {
  Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_SOFT_OFF = 0,
  Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_FAST_OFF = 1,
  Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_RESERVED = 2,
  Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_INITIAL = 3
};
bool Mrr_0x239_239_ShutdownmodeType_IsValid(int value);
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_MIN = Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_SOFT_OFF;
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_MAX = Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_INITIAL;
const int Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_ARRAYSIZE = Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_ShutdownmodeType_descriptor();
inline const ::std::string& Mrr_0x239_239_ShutdownmodeType_Name(Mrr_0x239_239_ShutdownmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_ShutdownmodeType_descriptor(), value);
}
inline bool Mrr_0x239_239_ShutdownmodeType_Parse(
    const ::std::string& name, Mrr_0x239_239_ShutdownmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_ShutdownmodeType>(
    Mrr_0x239_239_ShutdownmodeType_descriptor(), name, value);
}
enum Mrr_0x239_239_Aba_levelType {
  Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_0 = 0,
  Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_1 = 1,
  Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_2 = 2,
  Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_3 = 3
};
bool Mrr_0x239_239_Aba_levelType_IsValid(int value);
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239_Aba_levelType_Aba_levelType_MIN = Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_0;
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239_Aba_levelType_Aba_levelType_MAX = Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_3;
const int Mrr_0x239_239_Aba_levelType_Aba_levelType_ARRAYSIZE = Mrr_0x239_239_Aba_levelType_Aba_levelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Aba_levelType_descriptor();
inline const ::std::string& Mrr_0x239_239_Aba_levelType_Name(Mrr_0x239_239_Aba_levelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x239_239_Aba_levelType_descriptor(), value);
}
inline bool Mrr_0x239_239_Aba_levelType_Parse(
    const ::std::string& name, Mrr_0x239_239_Aba_levelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x239_239_Aba_levelType>(
    Mrr_0x239_239_Aba_levelType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType {
  Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_ESP_FRWHEELDRIVEDIRSTATUS_VALID = 0,
  Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_ESP_FRWHEELDRIVEDIRSTATUS_INVALID = 1
};
bool Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_IsValid(int value);
const Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_MIN = Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_ESP_FRWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_MAX = Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_ESP_FRWHEELDRIVEDIRSTATUS_INVALID;
const int Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_ARRAYSIZE = Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Name(Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType>(
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType {
  Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_ESP_FLWHEELDRIVEDIRSTATUS_VALID = 0,
  Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_ESP_FLWHEELDRIVEDIRSTATUS_INVALID = 1
};
bool Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_IsValid(int value);
const Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_MIN = Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_ESP_FLWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_MAX = Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_ESP_FLWHEELDRIVEDIRSTATUS_INVALID;
const int Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_ARRAYSIZE = Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Name(Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType>(
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType {
  Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_ESP_RRWHEELDRIVEDIRSTATUS_VALID = 0,
  Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_ESP_RRWHEELDRIVEDIRSTATUS_INVALID = 1
};
bool Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_IsValid(int value);
const Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_MIN = Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_ESP_RRWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_MAX = Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_ESP_RRWHEELDRIVEDIRSTATUS_INVALID;
const int Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_ARRAYSIZE = Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Name(Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType>(
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType {
  Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_ESP_RLWHEELDRIVEDIRSTATUS_VALID = 0,
  Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_ESP_RLWHEELDRIVEDIRSTATUS_INVALID = 1
};
bool Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_IsValid(int value);
const Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_MIN = Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_ESP_RLWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_MAX = Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_ESP_RLWHEELDRIVEDIRSTATUS_INVALID;
const int Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_ARRAYSIZE = Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Name(Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType>(
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType {
  Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_UNDEFINED = 0,
  Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_STANDSTILL = 1,
  Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_FORWARD = 2,
  Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_BACKWARD = 3
};
bool Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_IsValid(int value);
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_MIN = Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_MAX = Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_BACKWARD;
const int Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_ARRAYSIZE = Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Name(Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType>(
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType {
  Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_UNDEFINED = 0,
  Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_STANDSTILL = 1,
  Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_FORWARD = 2,
  Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_BACKWARD = 3
};
bool Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_IsValid(int value);
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_MIN = Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_MAX = Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_BACKWARD;
const int Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_ARRAYSIZE = Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Name(Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType>(
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_frwheeldrivedirectionType {
  Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_UNDEFINED = 0,
  Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_STANDSTILL = 1,
  Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_FORWARD = 2,
  Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_BACKWARD = 3
};
bool Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_IsValid(int value);
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_MIN = Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_MAX = Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_BACKWARD;
const int Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_ARRAYSIZE = Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Name(Esp_direction_0x235_235_Esp_frwheeldrivedirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_frwheeldrivedirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_frwheeldrivedirectionType>(
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_flwheeldrivedirectionType {
  Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_UNDEFINED = 0,
  Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_STANDSTILL = 1,
  Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_FORWARD = 2,
  Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_BACKWARD = 3
};
bool Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_IsValid(int value);
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_MIN = Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_MAX = Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_BACKWARD;
const int Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_ARRAYSIZE = Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Name(Esp_direction_0x235_235_Esp_flwheeldrivedirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_flwheeldrivedirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_flwheeldrivedirectionType>(
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_whlmilgrearlestatusType {
  Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_ESP_WHLMILGREARLESTATUS_VALID = 0,
  Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_ESP_WHLMILGREARLESTATUS_INVALID = 1
};
bool Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_IsValid(int value);
const Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_MIN = Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_ESP_WHLMILGREARLESTATUS_VALID;
const Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_MAX = Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_ESP_WHLMILGREARLESTATUS_INVALID;
const int Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_ARRAYSIZE = Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Name(Esp_direction_0x235_235_Esp_whlmilgrearlestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_whlmilgrearlestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_whlmilgrearlestatusType>(
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_whlmilgrearristatusType {
  Esp_direction_0x235_235_Esp_whlmilgrearristatusType_ESP_WHLMILGREARRISTATUS_VALID = 0,
  Esp_direction_0x235_235_Esp_whlmilgrearristatusType_ESP_WHLMILGREARRISTATUS_INVALID = 1
};
bool Esp_direction_0x235_235_Esp_whlmilgrearristatusType_IsValid(int value);
const Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_MIN = Esp_direction_0x235_235_Esp_whlmilgrearristatusType_ESP_WHLMILGREARRISTATUS_VALID;
const Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_MAX = Esp_direction_0x235_235_Esp_whlmilgrearristatusType_ESP_WHLMILGREARRISTATUS_INVALID;
const int Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_ARRAYSIZE = Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_whlmilgrearristatusType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Name(Esp_direction_0x235_235_Esp_whlmilgrearristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_whlmilgrearristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_whlmilgrearristatusType>(
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_descriptor(), name, value);
}
enum Esp_direction_0x235_235_Esp_vehiclestandstillType {
  Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_NOT_STANDSTILL = 0,
  Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_STANDSTILL = 1,
  Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_INVALID = 2
};
bool Esp_direction_0x235_235_Esp_vehiclestandstillType_IsValid(int value);
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_MIN = Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_NOT_STANDSTILL;
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_MAX = Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_INVALID;
const int Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_ARRAYSIZE = Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_vehiclestandstillType_descriptor();
inline const ::std::string& Esp_direction_0x235_235_Esp_vehiclestandstillType_Name(Esp_direction_0x235_235_Esp_vehiclestandstillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_direction_0x235_235_Esp_vehiclestandstillType_descriptor(), value);
}
inline bool Esp_direction_0x235_235_Esp_vehiclestandstillType_Parse(
    const ::std::string& name, Esp_direction_0x235_235_Esp_vehiclestandstillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_direction_0x235_235_Esp_vehiclestandstillType>(
    Esp_direction_0x235_235_Esp_vehiclestandstillType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_vdcactiveType {
  Esp_advanced_0x234_234_Esp_vdcactiveType_ESP_VDCACTIVE_NOT_ACTIVE = 0,
  Esp_advanced_0x234_234_Esp_vdcactiveType_ESP_VDCACTIVE_ACTIVE = 1
};
bool Esp_advanced_0x234_234_Esp_vdcactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_MIN = Esp_advanced_0x234_234_Esp_vdcactiveType_ESP_VDCACTIVE_NOT_ACTIVE;
const Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_MAX = Esp_advanced_0x234_234_Esp_vdcactiveType_ESP_VDCACTIVE_ACTIVE;
const int Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_vdcactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_vdcactiveType_Name(Esp_advanced_0x234_234_Esp_vdcactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_vdcactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_vdcactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_vdcactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_vdcactiveType>(
    Esp_advanced_0x234_234_Esp_vdcactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_ebdactiveType {
  Esp_advanced_0x234_234_Esp_ebdactiveType_ESP_EBDACTIVE_NOT_ACTIVE = 0,
  Esp_advanced_0x234_234_Esp_ebdactiveType_ESP_EBDACTIVE_ACTIVE = 1
};
bool Esp_advanced_0x234_234_Esp_ebdactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_MIN = Esp_advanced_0x234_234_Esp_ebdactiveType_ESP_EBDACTIVE_NOT_ACTIVE;
const Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_MAX = Esp_advanced_0x234_234_Esp_ebdactiveType_ESP_EBDACTIVE_ACTIVE;
const int Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_ebdactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_ebdactiveType_Name(Esp_advanced_0x234_234_Esp_ebdactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_ebdactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_ebdactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_ebdactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_ebdactiveType>(
    Esp_advanced_0x234_234_Esp_ebdactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_ecdtempoffType {
  Esp_advanced_0x234_234_Esp_ecdtempoffType_ESP_ECDTEMPOFF_NOT_HIGH = 0,
  Esp_advanced_0x234_234_Esp_ecdtempoffType_ESP_ECDTEMPOFF_TEMP_TOO_HIGH = 1
};
bool Esp_advanced_0x234_234_Esp_ecdtempoffType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_MIN = Esp_advanced_0x234_234_Esp_ecdtempoffType_ESP_ECDTEMPOFF_NOT_HIGH;
const Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_MAX = Esp_advanced_0x234_234_Esp_ecdtempoffType_ESP_ECDTEMPOFF_TEMP_TOO_HIGH;
const int Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_ecdtempoffType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_ecdtempoffType_Name(Esp_advanced_0x234_234_Esp_ecdtempoffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_ecdtempoffType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_ecdtempoffType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_ecdtempoffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_ecdtempoffType>(
    Esp_advanced_0x234_234_Esp_ecdtempoffType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_nobrakeforceType {
  Esp_advanced_0x234_234_Esp_nobrakeforceType_ESP_NOBRAKEFORCE_EXIST_BRK_FORCE = 0,
  Esp_advanced_0x234_234_Esp_nobrakeforceType_ESP_NOBRAKEFORCE_NO_BRK_FORCE = 1
};
bool Esp_advanced_0x234_234_Esp_nobrakeforceType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_MIN = Esp_advanced_0x234_234_Esp_nobrakeforceType_ESP_NOBRAKEFORCE_EXIST_BRK_FORCE;
const Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_MAX = Esp_advanced_0x234_234_Esp_nobrakeforceType_ESP_NOBRAKEFORCE_NO_BRK_FORCE;
const int Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_nobrakeforceType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_nobrakeforceType_Name(Esp_advanced_0x234_234_Esp_nobrakeforceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_nobrakeforceType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_nobrakeforceType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_nobrakeforceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_nobrakeforceType>(
    Esp_advanced_0x234_234_Esp_nobrakeforceType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType {
  Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_ESP_BRKFRICTQTOTATWHLVAILD_VALID = 0,
  Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_ESP_BRKFRICTQTOTATWHLVAILD_INVALID = 1
};
bool Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_MIN = Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_ESP_BRKFRICTQTOTATWHLVAILD_VALID;
const Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_MAX = Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_ESP_BRKFRICTQTOTATWHLVAILD_INVALID;
const int Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Name(Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType>(
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_aebdecavailableType {
  Esp_advanced_0x234_234_Esp_aebdecavailableType_ESP_AEBDECAVAILABLE_NOT_AVAILABLE = 0,
  Esp_advanced_0x234_234_Esp_aebdecavailableType_ESP_AEBDECAVAILABLE_AVAILABLE = 1
};
bool Esp_advanced_0x234_234_Esp_aebdecavailableType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_MIN = Esp_advanced_0x234_234_Esp_aebdecavailableType_ESP_AEBDECAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_MAX = Esp_advanced_0x234_234_Esp_aebdecavailableType_ESP_AEBDECAVAILABLE_AVAILABLE;
const int Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_aebdecavailableType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_aebdecavailableType_Name(Esp_advanced_0x234_234_Esp_aebdecavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_aebdecavailableType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_aebdecavailableType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_aebdecavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_aebdecavailableType>(
    Esp_advanced_0x234_234_Esp_aebdecavailableType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_aebdecactiveType {
  Esp_advanced_0x234_234_Esp_aebdecactiveType_ESP_AEBDECACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_aebdecactiveType_ESP_AEBDECACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_aebdecactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_MIN = Esp_advanced_0x234_234_Esp_aebdecactiveType_ESP_AEBDECACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_MAX = Esp_advanced_0x234_234_Esp_aebdecactiveType_ESP_AEBDECACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_aebdecactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_aebdecactiveType_Name(Esp_advanced_0x234_234_Esp_aebdecactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_aebdecactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_aebdecactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_aebdecactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_aebdecactiveType>(
    Esp_advanced_0x234_234_Esp_aebdecactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_prefillavailableType {
  Esp_advanced_0x234_234_Esp_prefillavailableType_ESP_PREFILLAVAILABLE_NOT_AVAILABLE = 0,
  Esp_advanced_0x234_234_Esp_prefillavailableType_ESP_PREFILLAVAILABLE_AVAILABLE = 1
};
bool Esp_advanced_0x234_234_Esp_prefillavailableType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_MIN = Esp_advanced_0x234_234_Esp_prefillavailableType_ESP_PREFILLAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_MAX = Esp_advanced_0x234_234_Esp_prefillavailableType_ESP_PREFILLAVAILABLE_AVAILABLE;
const int Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_prefillavailableType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_prefillavailableType_Name(Esp_advanced_0x234_234_Esp_prefillavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_prefillavailableType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_prefillavailableType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_prefillavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_prefillavailableType>(
    Esp_advanced_0x234_234_Esp_prefillavailableType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_prefillactiveType {
  Esp_advanced_0x234_234_Esp_prefillactiveType_ESP_PREFILLACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_prefillactiveType_ESP_PREFILLACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_prefillactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_MIN = Esp_advanced_0x234_234_Esp_prefillactiveType_ESP_PREFILLACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_MAX = Esp_advanced_0x234_234_Esp_prefillactiveType_ESP_PREFILLACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_prefillactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_prefillactiveType_Name(Esp_advanced_0x234_234_Esp_prefillactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_prefillactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_prefillactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_prefillactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_prefillactiveType>(
    Esp_advanced_0x234_234_Esp_prefillactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_abaavailableType {
  Esp_advanced_0x234_234_Esp_abaavailableType_ESP_ABAAVAILABLE_NOT_AVAILABLE = 0,
  Esp_advanced_0x234_234_Esp_abaavailableType_ESP_ABAAVAILABLE_AVAILABLE = 1
};
bool Esp_advanced_0x234_234_Esp_abaavailableType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_MIN = Esp_advanced_0x234_234_Esp_abaavailableType_ESP_ABAAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_MAX = Esp_advanced_0x234_234_Esp_abaavailableType_ESP_ABAAVAILABLE_AVAILABLE;
const int Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_abaavailableType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_abaavailableType_Name(Esp_advanced_0x234_234_Esp_abaavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_abaavailableType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_abaavailableType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_abaavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_abaavailableType>(
    Esp_advanced_0x234_234_Esp_abaavailableType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_abaactiveType {
  Esp_advanced_0x234_234_Esp_abaactiveType_ESP_ABAACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_abaactiveType_ESP_ABAACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_abaactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_MIN = Esp_advanced_0x234_234_Esp_abaactiveType_ESP_ABAACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_MAX = Esp_advanced_0x234_234_Esp_abaactiveType_ESP_ABAACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_abaactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_abaactiveType_Name(Esp_advanced_0x234_234_Esp_abaactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_abaactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_abaactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_abaactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_abaactiveType>(
    Esp_advanced_0x234_234_Esp_abaactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_cddavailableType {
  Esp_advanced_0x234_234_Esp_cddavailableType_ESP_CDDAVAILABLE_NOT_AVAILABLE = 0,
  Esp_advanced_0x234_234_Esp_cddavailableType_ESP_CDDAVAILABLE_AVAILABLE = 1
};
bool Esp_advanced_0x234_234_Esp_cddavailableType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_MIN = Esp_advanced_0x234_234_Esp_cddavailableType_ESP_CDDAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_MAX = Esp_advanced_0x234_234_Esp_cddavailableType_ESP_CDDAVAILABLE_AVAILABLE;
const int Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cddavailableType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_cddavailableType_Name(Esp_advanced_0x234_234_Esp_cddavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_cddavailableType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_cddavailableType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_cddavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_cddavailableType>(
    Esp_advanced_0x234_234_Esp_cddavailableType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_dtcactiveType {
  Esp_advanced_0x234_234_Esp_dtcactiveType_ESP_DTCACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_dtcactiveType_ESP_DTCACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_dtcactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_MIN = Esp_advanced_0x234_234_Esp_dtcactiveType_ESP_DTCACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_MAX = Esp_advanced_0x234_234_Esp_dtcactiveType_ESP_DTCACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_dtcactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_dtcactiveType_Name(Esp_advanced_0x234_234_Esp_dtcactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_dtcactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_dtcactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_dtcactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_dtcactiveType>(
    Esp_advanced_0x234_234_Esp_dtcactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_awbavailableType {
  Esp_advanced_0x234_234_Esp_awbavailableType_ESP_AWBAVAILABLE_NOT_AVAILABLE = 0,
  Esp_advanced_0x234_234_Esp_awbavailableType_ESP_AWBAVAILABLE_AVAILABLE = 1
};
bool Esp_advanced_0x234_234_Esp_awbavailableType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_MIN = Esp_advanced_0x234_234_Esp_awbavailableType_ESP_AWBAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_MAX = Esp_advanced_0x234_234_Esp_awbavailableType_ESP_AWBAVAILABLE_AVAILABLE;
const int Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_awbavailableType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_awbavailableType_Name(Esp_advanced_0x234_234_Esp_awbavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_awbavailableType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_awbavailableType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_awbavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_awbavailableType>(
    Esp_advanced_0x234_234_Esp_awbavailableType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_awbactiveType {
  Esp_advanced_0x234_234_Esp_awbactiveType_ESP_AWBACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_awbactiveType_ESP_AWBACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_awbactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_MIN = Esp_advanced_0x234_234_Esp_awbactiveType_ESP_AWBACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_MAX = Esp_advanced_0x234_234_Esp_awbactiveType_ESP_AWBACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_awbactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_awbactiveType_Name(Esp_advanced_0x234_234_Esp_awbactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_awbactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_awbactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_awbactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_awbactiveType>(
    Esp_advanced_0x234_234_Esp_awbactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_vlcerrorType {
  Esp_advanced_0x234_234_Esp_vlcerrorType_ESP_VLCERROR_NOT_ERROR = 0,
  Esp_advanced_0x234_234_Esp_vlcerrorType_ESP_VLCERROR_ERROR = 1
};
bool Esp_advanced_0x234_234_Esp_vlcerrorType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_MIN = Esp_advanced_0x234_234_Esp_vlcerrorType_ESP_VLCERROR_NOT_ERROR;
const Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_MAX = Esp_advanced_0x234_234_Esp_vlcerrorType_ESP_VLCERROR_ERROR;
const int Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_vlcerrorType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_vlcerrorType_Name(Esp_advanced_0x234_234_Esp_vlcerrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_vlcerrorType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_vlcerrorType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_vlcerrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_vlcerrorType>(
    Esp_advanced_0x234_234_Esp_vlcerrorType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_cdderrorType {
  Esp_advanced_0x234_234_Esp_cdderrorType_ESP_CDDERROR_NOT_ERROR = 0,
  Esp_advanced_0x234_234_Esp_cdderrorType_ESP_CDDERROR_ERROR = 1
};
bool Esp_advanced_0x234_234_Esp_cdderrorType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_MIN = Esp_advanced_0x234_234_Esp_cdderrorType_ESP_CDDERROR_NOT_ERROR;
const Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_MAX = Esp_advanced_0x234_234_Esp_cdderrorType_ESP_CDDERROR_ERROR;
const int Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cdderrorType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_cdderrorType_Name(Esp_advanced_0x234_234_Esp_cdderrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_cdderrorType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_cdderrorType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_cdderrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_cdderrorType>(
    Esp_advanced_0x234_234_Esp_cdderrorType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_cddactiveType {
  Esp_advanced_0x234_234_Esp_cddactiveType_ESP_CDDACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_cddactiveType_ESP_CDDACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_cddactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_MIN = Esp_advanced_0x234_234_Esp_cddactiveType_ESP_CDDACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_MAX = Esp_advanced_0x234_234_Esp_cddactiveType_ESP_CDDACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cddactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_cddactiveType_Name(Esp_advanced_0x234_234_Esp_cddactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_cddactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_cddactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_cddactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_cddactiveType>(
    Esp_advanced_0x234_234_Esp_cddactiveType_descriptor(), name, value);
}
enum Esp_advanced_0x234_234_Esp_cdd_apactiveType {
  Esp_advanced_0x234_234_Esp_cdd_apactiveType_ESP_CDD_APACTIVE_NOT_ACTIVATED = 0,
  Esp_advanced_0x234_234_Esp_cdd_apactiveType_ESP_CDD_APACTIVE_ACTIVATED = 1
};
bool Esp_advanced_0x234_234_Esp_cdd_apactiveType_IsValid(int value);
const Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_MIN = Esp_advanced_0x234_234_Esp_cdd_apactiveType_ESP_CDD_APACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_MAX = Esp_advanced_0x234_234_Esp_cdd_apactiveType_ESP_CDD_APACTIVE_ACTIVATED;
const int Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_ARRAYSIZE = Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cdd_apactiveType_descriptor();
inline const ::std::string& Esp_advanced_0x234_234_Esp_cdd_apactiveType_Name(Esp_advanced_0x234_234_Esp_cdd_apactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_descriptor(), value);
}
inline bool Esp_advanced_0x234_234_Esp_cdd_apactiveType_Parse(
    const ::std::string& name, Esp_advanced_0x234_234_Esp_cdd_apactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_advanced_0x234_234_Esp_cdd_apactiveType>(
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_tosionbartorquevalidType {
  Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_EPS_TOSIONBARTORQUEVALID_VAILD = 0,
  Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_EPS_TOSIONBARTORQUEVALID_INVALID = 1
};
bool Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_MIN = Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_EPS_TOSIONBARTORQUEVALID_VAILD;
const Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_MAX = Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_EPS_TOSIONBARTORQUEVALID_INVALID;
const int Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Name(Eps_advanced_0x176_176_Eps_tosionbartorquevalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_tosionbartorquevalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_tosionbartorquevalidType>(
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType {
  Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_EPS_LKARESPONSETORQUEVALID_VAILD = 0,
  Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_EPS_LKARESPONSETORQUEVALID_INVALID = 1
};
bool Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_MIN = Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_EPS_LKARESPONSETORQUEVALID_VAILD;
const Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_MAX = Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_EPS_LKARESPONSETORQUEVALID_INVALID;
const int Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Name(Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType>(
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_ldwcontrolstatusType {
  Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_DEACTIVATED = 0,
  Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_INACTIVE = 1,
  Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_ACTIVE = 2,
  Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_RESERVED = 3
};
bool Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_MIN = Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_DEACTIVATED;
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_MAX = Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_RESERVED;
const int Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Name(Eps_advanced_0x176_176_Eps_ldwcontrolstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_ldwcontrolstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_ldwcontrolstatusType>(
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType {
  Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_OK = 0,
  Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_ADJUSTING = 1
};
bool Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_MIN = Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_OK;
const Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_MAX = Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_ADJUSTING;
const int Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Name(Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType>(
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_lkacontrolstatusType {
  Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_NO_REQUEST = 0,
  Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_REQUEST_HONORED = 1,
  Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_TEMPORARILY = 2,
  Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_PERMANENT = 3
};
bool Eps_advanced_0x176_176_Eps_lkacontrolstatusType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_MIN = Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_NO_REQUEST;
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_MAX = Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_PERMANENT;
const int Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_lkacontrolstatusType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Name(Eps_advanced_0x176_176_Eps_lkacontrolstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_lkacontrolstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_lkacontrolstatusType>(
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_epspaminhType {
  Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_NORMAL_OPERATION = 0,
  Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_OVER_SPEED = 1,
  Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_DRIVER_INTERFERENCE = 2,
  Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_ABNORMAL_CAN_INPUT = 4,
  Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_EXCESS_ANGLE_DEVIATION = 8,
  Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_EPS_FAILURE = 16
};
bool Eps_advanced_0x176_176_Eps_epspaminhType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_MIN = Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_NORMAL_OPERATION;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_MAX = Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_EPS_FAILURE;
const int Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_epspaminhType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_epspaminhType_Name(Eps_advanced_0x176_176_Eps_epspaminhType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_epspaminhType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_epspaminhType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_epspaminhType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_epspaminhType>(
    Eps_advanced_0x176_176_Eps_epspaminhType_descriptor(), name, value);
}
enum Eps_advanced_0x176_176_Eps_epspamstsType {
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_INHIBIT = 0,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_AVAILABLE = 1,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_ACTIVE = 2,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_ABORT = 3,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_REPLY_FOR_CONTROL = 4,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_NRCD_ACTIVE = 5,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_ADAS_ACTIVE = 6,
  Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_FAILURE = 7
};
bool Eps_advanced_0x176_176_Eps_epspamstsType_IsValid(int value);
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_MIN = Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_INHIBIT;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_MAX = Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_FAILURE;
const int Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_ARRAYSIZE = Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_epspamstsType_descriptor();
inline const ::std::string& Eps_advanced_0x176_176_Eps_epspamstsType_Name(Eps_advanced_0x176_176_Eps_epspamstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_advanced_0x176_176_Eps_epspamstsType_descriptor(), value);
}
inline bool Eps_advanced_0x176_176_Eps_epspamstsType_Parse(
    const ::std::string& name, Eps_advanced_0x176_176_Eps_epspamstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_advanced_0x176_176_Eps_epspamstsType>(
    Eps_advanced_0x176_176_Eps_epspamstsType_descriptor(), name, value);
}
enum Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType {
  Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_ESP_WHEELPULSE_RR_VALID_VALID = 0,
  Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_ESP_WHEELPULSE_RR_VALID_INVALID = 1
};
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_IsValid(int value);
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_MIN = Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_ESP_WHEELPULSE_RR_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_MAX = Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_ESP_WHEELPULSE_RR_VALID_INVALID;
const int Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_ARRAYSIZE = Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_descriptor();
inline const ::std::string& Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Name(Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_descriptor(), value);
}
inline bool Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Parse(
    const ::std::string& name, Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType>(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_descriptor(), name, value);
}
enum Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType {
  Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_ESP_WHEELPULSE_RL_VALID_VALID = 0,
  Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_ESP_WHEELPULSE_RL_VALID_INVALID = 1
};
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_IsValid(int value);
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_MIN = Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_ESP_WHEELPULSE_RL_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_MAX = Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_ESP_WHEELPULSE_RL_VALID_INVALID;
const int Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_ARRAYSIZE = Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_descriptor();
inline const ::std::string& Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Name(Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_descriptor(), value);
}
inline bool Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Parse(
    const ::std::string& name, Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType>(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_descriptor(), name, value);
}
enum Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType {
  Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_ESP_WHEELPULSE_FR_VALID_VALID = 0,
  Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_ESP_WHEELPULSE_FR_VALID_INVALID = 1
};
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_IsValid(int value);
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_MIN = Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_ESP_WHEELPULSE_FR_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_MAX = Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_ESP_WHEELPULSE_FR_VALID_INVALID;
const int Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_ARRAYSIZE = Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_descriptor();
inline const ::std::string& Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Name(Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_descriptor(), value);
}
inline bool Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Parse(
    const ::std::string& name, Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType>(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_descriptor(), name, value);
}
enum Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType {
  Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_ESP_WHEELPULSE_FL_VALID_VALID = 0,
  Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_ESP_WHEELPULSE_FL_VALID_INVALID = 1
};
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_IsValid(int value);
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_MIN = Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_ESP_WHEELPULSE_FL_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_MAX = Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_ESP_WHEELPULSE_FL_VALID_INVALID;
const int Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_ARRAYSIZE = Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_descriptor();
inline const ::std::string& Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Name(Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_descriptor(), value);
}
inline bool Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Parse(
    const ::std::string& name, Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType>(
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_descriptor(), name, value);
}
enum Sas_sensor_0x175_175_Sas_trimmingstsType {
  Sas_sensor_0x175_175_Sas_trimmingstsType_SAS_TRIMMINGSTS_NOT_TRIMMED = 0,
  Sas_sensor_0x175_175_Sas_trimmingstsType_SAS_TRIMMINGSTS_TRIMMED = 1
};
bool Sas_sensor_0x175_175_Sas_trimmingstsType_IsValid(int value);
const Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_MIN = Sas_sensor_0x175_175_Sas_trimmingstsType_SAS_TRIMMINGSTS_NOT_TRIMMED;
const Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_MAX = Sas_sensor_0x175_175_Sas_trimmingstsType_SAS_TRIMMINGSTS_TRIMMED;
const int Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_ARRAYSIZE = Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_trimmingstsType_descriptor();
inline const ::std::string& Sas_sensor_0x175_175_Sas_trimmingstsType_Name(Sas_sensor_0x175_175_Sas_trimmingstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sas_sensor_0x175_175_Sas_trimmingstsType_descriptor(), value);
}
inline bool Sas_sensor_0x175_175_Sas_trimmingstsType_Parse(
    const ::std::string& name, Sas_sensor_0x175_175_Sas_trimmingstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sas_sensor_0x175_175_Sas_trimmingstsType>(
    Sas_sensor_0x175_175_Sas_trimmingstsType_descriptor(), name, value);
}
enum Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType {
  Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_SAS_STEERWHEELROTSPDSTATUS_VALID = 0,
  Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_SAS_STEERWHEELROTSPDSTATUS_INVALID = 1
};
bool Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_IsValid(int value);
const Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_MIN = Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_SAS_STEERWHEELROTSPDSTATUS_VALID;
const Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_MAX = Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_SAS_STEERWHEELROTSPDSTATUS_INVALID;
const int Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_ARRAYSIZE = Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_descriptor();
inline const ::std::string& Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Name(Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_descriptor(), value);
}
inline bool Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Parse(
    const ::std::string& name, Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType>(
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_descriptor(), name, value);
}
enum Sas_sensor_0x175_175_Sas_sasstscalType {
  Sas_sensor_0x175_175_Sas_sasstscalType_SAS_SASSTSCAL_SENSOR_NOT_CALIBRATED = 0,
  Sas_sensor_0x175_175_Sas_sasstscalType_SAS_SASSTSCAL_SENSOR_CALIBRATED = 1
};
bool Sas_sensor_0x175_175_Sas_sasstscalType_IsValid(int value);
const Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_MIN = Sas_sensor_0x175_175_Sas_sasstscalType_SAS_SASSTSCAL_SENSOR_NOT_CALIBRATED;
const Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_MAX = Sas_sensor_0x175_175_Sas_sasstscalType_SAS_SASSTSCAL_SENSOR_CALIBRATED;
const int Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_ARRAYSIZE = Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_sasstscalType_descriptor();
inline const ::std::string& Sas_sensor_0x175_175_Sas_sasstscalType_Name(Sas_sensor_0x175_175_Sas_sasstscalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sas_sensor_0x175_175_Sas_sasstscalType_descriptor(), value);
}
inline bool Sas_sensor_0x175_175_Sas_sasstscalType_Parse(
    const ::std::string& name, Sas_sensor_0x175_175_Sas_sasstscalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sas_sensor_0x175_175_Sas_sasstscalType>(
    Sas_sensor_0x175_175_Sas_sasstscalType_descriptor(), name, value);
}
enum Sas_sensor_0x175_175_Sas_raw_sasstssnsrType {
  Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_SAS_RAW_SASSTSSNSR_SENSOR_VALUE_INVALID = 0,
  Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_SAS_RAW_SASSTSSNSR_SENSOR_VALUE_VALID = 1
};
bool Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_IsValid(int value);
const Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_MIN = Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_SAS_RAW_SASSTSSNSR_SENSOR_VALUE_INVALID;
const Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_MAX = Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_SAS_RAW_SASSTSSNSR_SENSOR_VALUE_VALID;
const int Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_ARRAYSIZE = Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_descriptor();
inline const ::std::string& Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Name(Sas_sensor_0x175_175_Sas_raw_sasstssnsrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_descriptor(), value);
}
inline bool Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Parse(
    const ::std::string& name, Sas_sensor_0x175_175_Sas_raw_sasstssnsrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sas_sensor_0x175_175_Sas_raw_sasstssnsrType>(
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_descriptor(), name, value);
}
enum Sas_sensor_0x175_175_Sas_sasstssnsrType {
  Sas_sensor_0x175_175_Sas_sasstssnsrType_SAS_SASSTSSNSR_SENSOR_VALUE_INVALID = 0,
  Sas_sensor_0x175_175_Sas_sasstssnsrType_SAS_SASSTSSNSR_SENSOR_VALUE_VALID = 1
};
bool Sas_sensor_0x175_175_Sas_sasstssnsrType_IsValid(int value);
const Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_MIN = Sas_sensor_0x175_175_Sas_sasstssnsrType_SAS_SASSTSSNSR_SENSOR_VALUE_INVALID;
const Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_MAX = Sas_sensor_0x175_175_Sas_sasstssnsrType_SAS_SASSTSSNSR_SENSOR_VALUE_VALID;
const int Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_ARRAYSIZE = Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_sasstssnsrType_descriptor();
inline const ::std::string& Sas_sensor_0x175_175_Sas_sasstssnsrType_Name(Sas_sensor_0x175_175_Sas_sasstssnsrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sas_sensor_0x175_175_Sas_sasstssnsrType_descriptor(), value);
}
inline bool Sas_sensor_0x175_175_Sas_sasstssnsrType_Parse(
    const ::std::string& name, Sas_sensor_0x175_175_Sas_sasstssnsrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sas_sensor_0x175_175_Sas_sasstssnsrType>(
    Sas_sensor_0x175_175_Sas_sasstssnsrType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_outsidetempdigType {
  Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_NOFAULT = 0,
  Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_SHORTCIRCUIT = 1,
  Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_OPENCIRCUIT = 2
};
bool Gw_body_0x321_321_Bcm_outsidetempdigType_IsValid(int value);
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_MIN = Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_NOFAULT;
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_MAX = Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_OPENCIRCUIT;
const int Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_ARRAYSIZE = Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_outsidetempdigType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_outsidetempdigType_Name(Gw_body_0x321_321_Bcm_outsidetempdigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_outsidetempdigType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_outsidetempdigType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_outsidetempdigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_outsidetempdigType>(
    Gw_body_0x321_321_Bcm_outsidetempdigType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_driving_mode_req_bcmType {
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_NORMAL = 0,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_SNOW = 1,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_NOUSED = 2,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_SPORT = 3,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_ECO = 4,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_4L = 5,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_ROCK = 6,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_WETMUD = 7,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_SAND = 8,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_GHAT_FORN330L = 9,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_MANUAL_FORN330L = 13,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_ATSFAULTBCM = 14,
  Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_INVALID = 15
};
bool Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_IsValid(int value);
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_MIN = Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_NORMAL;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_MAX = Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_INVALID;
const int Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_ARRAYSIZE = Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Name(Gw_body_0x321_321_Bcm_driving_mode_req_bcmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_driving_mode_req_bcmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_driving_mode_req_bcmType>(
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_powermodeType {
  Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_UNDEFINED = 0,
  Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_OFF = 1,
  Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_ACC = 2,
  Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_ON = 3,
  Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_START = 4
};
bool Gw_body_0x321_321_Bcm_powermodeType_IsValid(int value);
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_MIN = Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_UNDEFINED;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_MAX = Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_START;
const int Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_ARRAYSIZE = Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_powermodeType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_powermodeType_Name(Gw_body_0x321_321_Bcm_powermodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_powermodeType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_powermodeType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_powermodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_powermodeType>(
    Gw_body_0x321_321_Bcm_powermodeType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_frntfoglmpstsType {
  Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_INVALID = 0,
  Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_OFF = 1,
  Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_ON = 2,
  Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_frntfoglmpstsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_MIN = Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_INVALID;
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_MAX = Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_RESERVED;
const int Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_frntfoglmpstsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_frntfoglmpstsType_Name(Gw_body_0x321_321_Bcm_frntfoglmpstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_frntfoglmpstsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_frntfoglmpstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_frntfoglmpstsType>(
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_lowbeamstsType {
  Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_INVALID = 0,
  Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_OFF = 1,
  Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_ON = 2,
  Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_lowbeamstsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_MIN = Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_INVALID;
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_MAX = Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_RESERVED;
const int Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_lowbeamstsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_lowbeamstsType_Name(Gw_body_0x321_321_Bcm_lowbeamstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_lowbeamstsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_lowbeamstsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_lowbeamstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_lowbeamstsType>(
    Gw_body_0x321_321_Bcm_lowbeamstsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_highbeamstsType {
  Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_INVALID = 0,
  Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_OFF = 1,
  Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_ON = 2,
  Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_highbeamstsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_MIN = Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_INVALID;
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_MAX = Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_RESERVED;
const int Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_highbeamstsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_highbeamstsType_Name(Gw_body_0x321_321_Bcm_highbeamstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_highbeamstsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_highbeamstsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_highbeamstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_highbeamstsType>(
    Gw_body_0x321_321_Bcm_highbeamstsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_ss_enablestsType {
  Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_INVALID = 0,
  Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_STARTSTOPISALLOW = 1,
  Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_STARTSTOPISFORBID = 2,
  Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_ss_enablestsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_MIN = Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_INVALID;
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_MAX = Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_RESERVED;
const int Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_ss_enablestsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_ss_enablestsType_Name(Gw_body_0x321_321_Bcm_ss_enablestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_ss_enablestsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_ss_enablestsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_ss_enablestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_ss_enablestsType>(
    Gw_body_0x321_321_Bcm_ss_enablestsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_reardef_statusType {
  Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_INVALID = 0,
  Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_REARDEFINACTIVE = 1,
  Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_REARDEFACTIVE = 2,
  Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_reardef_statusType_IsValid(int value);
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_MIN = Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_INVALID;
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_MAX = Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_RESERVED;
const int Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_ARRAYSIZE = Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_reardef_statusType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_reardef_statusType_Name(Gw_body_0x321_321_Bcm_reardef_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_reardef_statusType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_reardef_statusType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_reardef_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_reardef_statusType>(
    Gw_body_0x321_321_Bcm_reardef_statusType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_brakefluidstsType {
  Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_INVALID = 0,
  Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_NORMAL = 1,
  Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_LOW = 2,
  Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_brakefluidstsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_MIN = Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_INVALID;
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_MAX = Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_RESERVED;
const int Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_brakefluidstsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_brakefluidstsType_Name(Gw_body_0x321_321_Bcm_brakefluidstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_brakefluidstsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_brakefluidstsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_brakefluidstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_brakefluidstsType>(
    Gw_body_0x321_321_Bcm_brakefluidstsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_autolampstsType {
  Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_INVALID = 0,
  Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_INACTIVE = 1,
  Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_ACTIVE = 2,
  Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_autolampstsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_MIN = Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_INVALID;
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_MAX = Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_RESERVED;
const int Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_autolampstsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_autolampstsType_Name(Gw_body_0x321_321_Bcm_autolampstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_autolampstsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_autolampstsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_autolampstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_autolampstsType>(
    Gw_body_0x321_321_Bcm_autolampstsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_poslmpstsType {
  Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_NOUESD = 0,
  Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_OFF = 1,
  Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_ON = 2,
  Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_poslmpstsType_IsValid(int value);
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_MIN = Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_NOUESD;
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_MAX = Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_RESERVED;
const int Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_ARRAYSIZE = Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_poslmpstsType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_poslmpstsType_Name(Gw_body_0x321_321_Bcm_poslmpstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_poslmpstsType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_poslmpstsType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_poslmpstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_poslmpstsType>(
    Gw_body_0x321_321_Bcm_poslmpstsType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_bgllumlvlsettingType {
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_0PERCENT = 0,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_1PERCENT = 1,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_2PERCENT = 2,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_3PERCENT = 3,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_4PERCENT = 4,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_5PERCENT = 5,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_6PERCENT = 6,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_7PERCENT = 7,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_8PERCENT = 8,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_9PERCENT = 9,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_10PERCENT = 10,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_11PERCENT = 11,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_12PERCENT = 12,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_13PERCENT = 13,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_14PERCENT = 14,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_15PERCENT = 15,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_16PERCENT = 16,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_17PERCENT = 17,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_18PERCENT = 18,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_19PERCENT = 19,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_20PERCENT = 20,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_21PERCENT = 21,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_22PERCENT = 22,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_23PERCENT = 23,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_24PERCENT = 24,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_25PERCENT = 25,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_26PERCENT = 26,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_27PERCENT = 27,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_28PERCENT = 28,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_29PERCENT = 29,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_30PERCENT = 30,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_31PERCENT = 31,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_32PERCENT = 32,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_33PERCENT = 33,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_34PERCENT = 34,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_35PERCENT = 35,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_36PERCENT = 36,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_37PERCENT = 37,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_38PERCENT = 38,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_39PERCENT = 39,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_40PERCENT = 40,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_41PERCENT = 41,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_42PERCENT = 42,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_43PERCENT = 43,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_44PERCENT = 44,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_45PERCENT = 45,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_46PERCENT = 46,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_47PERCENT = 47,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_48PERCENT = 48,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_49PERCENT = 49,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_50PERCENT = 50,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_51PERCENT = 51,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_52PERCENT = 52,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_53PERCENT = 53,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_54PERCENT = 54,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_55PERCENT = 55,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_56PERCENT = 56,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_57PERCENT = 57,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_58PERCENT = 58,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_59PERCENT = 59,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_60PERCENT = 60,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_61PERCENT = 61,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_62PERCENT = 62,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_63PERCENT = 63,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_64PERCENT = 64,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_65PERCENT = 65,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_66PERCENT = 66,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_67PERCENT = 67,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_68PERCENT = 68,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_69PERCENT = 69,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_70PERCENT = 70,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_71PERCENT = 71,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_72PERCENT = 72,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_73PERCENT = 73,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_74PERCENT = 74,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_75PERCENT = 75,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_76PERCENT = 76,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_77PERCENT = 77,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_78PERCENT = 78,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_79PERCENT = 79,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_80PERCENT = 80,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_81PERCENT = 81,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_82PERCENT = 82,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_83PERCENT = 83,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_84PERCENT = 84,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_85PERCENT = 85,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_86PERCENT = 86,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_87PERCENT = 87,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_88PERCENT = 88,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_89PERCENT = 89,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_90PERCENT = 90,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_91PERCENT = 91,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_92PERCENT = 92,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_93PERCENT = 93,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_94PERCENT = 94,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_95PERCENT = 95,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_96PERCENT = 96,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_97PERCENT = 97,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_98PERCENT = 98,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_99PERCENT = 99,
  Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_100PERCENT = 100
};
bool Gw_body_0x321_321_Bcm_bgllumlvlsettingType_IsValid(int value);
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_MIN = Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_0PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_MAX = Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_100PERCENT;
const int Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_ARRAYSIZE = Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_bgllumlvlsettingType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Name(Gw_body_0x321_321_Bcm_bgllumlvlsettingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_bgllumlvlsettingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_bgllumlvlsettingType>(
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_descriptor(), name, value);
}
enum Gw_body_0x321_321_Bcm_reverse_gearType {
  Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_UNDEFINED = 0,
  Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_NOTINREVERSEGEAR = 1,
  Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_INREVERSEGEAR = 2,
  Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_RESERVED = 3
};
bool Gw_body_0x321_321_Bcm_reverse_gearType_IsValid(int value);
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_MIN = Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_UNDEFINED;
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_MAX = Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_RESERVED;
const int Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_ARRAYSIZE = Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_reverse_gearType_descriptor();
inline const ::std::string& Gw_body_0x321_321_Bcm_reverse_gearType_Name(Gw_body_0x321_321_Bcm_reverse_gearType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_body_0x321_321_Bcm_reverse_gearType_descriptor(), value);
}
inline bool Gw_body_0x321_321_Bcm_reverse_gearType_Parse(
    const ::std::string& name, Gw_body_0x321_321_Bcm_reverse_gearType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_body_0x321_321_Bcm_reverse_gearType>(
    Gw_body_0x321_321_Bcm_reverse_gearType_descriptor(), name, value);
}
enum Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType {
  Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_STOPPED = 0,
  Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_RUNNING = 1,
  Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_IDLE = 2,
  Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_DFCO_RESERVED = 3,
  Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_CRANKING = 4,
  Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_STALLING = 5
};
bool Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_IsValid(int value);
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_MIN = Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_STOPPED;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_MAX = Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_STALLING;
const int Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_ARRAYSIZE = Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_descriptor();
inline const ::std::string& Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Name(Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_descriptor(), value);
}
inline bool Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Parse(
    const ::std::string& name, Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType>(
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_descriptor(), name, value);
}
enum Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType {
  Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_EMS_AIRCOMPRESSORSTATUS_OFF = 0,
  Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_EMS_AIRCOMPRESSORSTATUS_ON = 1
};
bool Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_IsValid(int value);
const Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_MIN = Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_EMS_AIRCOMPRESSORSTATUS_OFF;
const Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_MAX = Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_EMS_AIRCOMPRESSORSTATUS_ON;
const int Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_ARRAYSIZE = Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_descriptor();
inline const ::std::string& Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Name(Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_descriptor(), value);
}
inline bool Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Parse(
    const ::std::string& name, Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType>(
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_descriptor(), name, value);
}
enum Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType {
  Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_EMS_THROTTLEPLATEPOSITIONERROR_NOERROR = 0,
  Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_EMS_THROTTLEPLATEPOSITIONERROR_ERROR = 1
};
bool Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_IsValid(int value);
const Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_MIN = Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_EMS_THROTTLEPLATEPOSITIONERROR_NOERROR;
const Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_MAX = Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_EMS_THROTTLEPLATEPOSITIONERROR_ERROR;
const int Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_ARRAYSIZE = Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_descriptor();
inline const ::std::string& Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Name(Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_descriptor(), value);
}
inline bool Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Parse(
    const ::std::string& name, Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType>(
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_descriptor(), name, value);
}
enum Gw_ems_engstatus_0x142_142_Ems_startstopmessageType {
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_NOWARNINGMESSAGE = 0,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_CLIMATEREQUEST = 1,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_BRAKELOW = 2,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_START_STOPOFF = 3,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_BATTERYLOW = 4,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_ECTLOW = 5,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_APAINHIBIT = 6,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_ACCINHIBIT = 7,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_TCUINHIBIT = 8,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_STARTPROTECT = 9,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_HOODOPEN = 10,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_DRVIEDOOROPNE = 11,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_STEERINGANGELHIGH = 12,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_STARTSTOPFAILURE = 13,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_MANUALLYRESTART = 14,
  Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_RESERVED = 15
};
bool Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_IsValid(int value);
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_MIN = Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_NOWARNINGMESSAGE;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_MAX = Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_RESERVED;
const int Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_ARRAYSIZE = Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_descriptor();
inline const ::std::string& Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Name(Gw_ems_engstatus_0x142_142_Ems_startstopmessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_descriptor(), value);
}
inline bool Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Parse(
    const ::std::string& name, Gw_ems_engstatus_0x142_142_Ems_startstopmessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_engstatus_0x142_142_Ems_startstopmessageType>(
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_descriptor(), name, value);
}
enum Gw_ems_engstatus_0x142_142_Ems_ignswtstsType {
  Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_EMS_IGNSWTSTS_IGNITIONOFF = 0,
  Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_EMS_IGNSWTSTS_IGNITIONON = 1
};
bool Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_IsValid(int value);
const Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_MIN = Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_EMS_IGNSWTSTS_IGNITIONOFF;
const Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_MAX = Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_EMS_IGNSWTSTS_IGNITIONON;
const int Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_ARRAYSIZE = Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_descriptor();
inline const ::std::string& Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Name(Gw_ems_engstatus_0x142_142_Ems_ignswtstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_descriptor(), value);
}
inline bool Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Parse(
    const ::std::string& name, Gw_ems_engstatus_0x142_142_Ems_ignswtstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_engstatus_0x142_142_Ems_ignswtstsType>(
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_descriptor(), name, value);
}
enum Gw_tbox_location_0x580_580_Tbox_gps_ubType {
  Gw_tbox_location_0x580_580_Tbox_gps_ubType_TBOX_GPS_UB_NOT_UPDATE_GPS = 0,
  Gw_tbox_location_0x580_580_Tbox_gps_ubType_TBOX_GPS_UB_UPDATE_GPS = 1
};
bool Gw_tbox_location_0x580_580_Tbox_gps_ubType_IsValid(int value);
const Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_MIN = Gw_tbox_location_0x580_580_Tbox_gps_ubType_TBOX_GPS_UB_NOT_UPDATE_GPS;
const Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_MAX = Gw_tbox_location_0x580_580_Tbox_gps_ubType_TBOX_GPS_UB_UPDATE_GPS;
const int Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_ARRAYSIZE = Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tbox_location_0x580_580_Tbox_gps_ubType_descriptor();
inline const ::std::string& Gw_tbox_location_0x580_580_Tbox_gps_ubType_Name(Gw_tbox_location_0x580_580_Tbox_gps_ubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_descriptor(), value);
}
inline bool Gw_tbox_location_0x580_580_Tbox_gps_ubType_Parse(
    const ::std::string& name, Gw_tbox_location_0x580_580_Tbox_gps_ubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tbox_location_0x580_580_Tbox_gps_ubType>(
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_descriptor(), name, value);
}
enum Gw_tbox_location_0x580_580_Tbox_locationstsType {
  Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_NORTH_LATITUDE_EAST_LONGITUDE = 0,
  Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_NORTH_LATITUDE_WEST_LONGITUDE = 1,
  Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_SOUTH_LATITUDE_EAST_LONGITUDE = 2,
  Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_SOUTH_LATITUDE_WEST_LONGITUDE = 3,
  Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_INVALID = 7
};
bool Gw_tbox_location_0x580_580_Tbox_locationstsType_IsValid(int value);
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_MIN = Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_NORTH_LATITUDE_EAST_LONGITUDE;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_MAX = Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_INVALID;
const int Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_ARRAYSIZE = Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tbox_location_0x580_580_Tbox_locationstsType_descriptor();
inline const ::std::string& Gw_tbox_location_0x580_580_Tbox_locationstsType_Name(Gw_tbox_location_0x580_580_Tbox_locationstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tbox_location_0x580_580_Tbox_locationstsType_descriptor(), value);
}
inline bool Gw_tbox_location_0x580_580_Tbox_locationstsType_Parse(
    const ::std::string& name, Gw_tbox_location_0x580_580_Tbox_locationstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tbox_location_0x580_580_Tbox_locationstsType>(
    Gw_tbox_location_0x580_580_Tbox_locationstsType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_sbr_secondrowrightType {
  Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_OFF = 0,
  Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_FLASHING_RESERVED = 1,
  Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_ON = 2,
  Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_FAULT_RESERVED = 3
};
bool Srs_0x350_350_Srs_sbr_secondrowrightType_IsValid(int value);
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_MIN = Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_MAX = Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_FAULT_RESERVED;
const int Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_ARRAYSIZE = Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_secondrowrightType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_sbr_secondrowrightType_Name(Srs_0x350_350_Srs_sbr_secondrowrightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_sbr_secondrowrightType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_sbr_secondrowrightType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_sbr_secondrowrightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_sbr_secondrowrightType>(
    Srs_0x350_350_Srs_sbr_secondrowrightType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_sbr_secondrowmidType {
  Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_OFF = 0,
  Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_FLASHING_RESERVED = 1,
  Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_ON = 2,
  Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_FAULT_RESERVED = 3
};
bool Srs_0x350_350_Srs_sbr_secondrowmidType_IsValid(int value);
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_MIN = Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_MAX = Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_FAULT_RESERVED;
const int Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_ARRAYSIZE = Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_secondrowmidType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_sbr_secondrowmidType_Name(Srs_0x350_350_Srs_sbr_secondrowmidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_sbr_secondrowmidType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_sbr_secondrowmidType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_sbr_secondrowmidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_sbr_secondrowmidType>(
    Srs_0x350_350_Srs_sbr_secondrowmidType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_sbr_secondrowleftType {
  Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_OFF = 0,
  Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_FLASHING_RESERVED = 1,
  Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_ON = 2,
  Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_FAULT_RESERVED = 3
};
bool Srs_0x350_350_Srs_sbr_secondrowleftType_IsValid(int value);
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_MIN = Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_MAX = Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_FAULT_RESERVED;
const int Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_ARRAYSIZE = Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_secondrowleftType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_sbr_secondrowleftType_Name(Srs_0x350_350_Srs_sbr_secondrowleftType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_sbr_secondrowleftType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_sbr_secondrowleftType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_sbr_secondrowleftType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_sbr_secondrowleftType>(
    Srs_0x350_350_Srs_sbr_secondrowleftType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_sbr_pamsengerType {
  Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_OFF = 0,
  Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_FLASHING_RESERVED = 1,
  Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_ON = 2,
  Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_FAULT_RESERVED = 3
};
bool Srs_0x350_350_Srs_sbr_pamsengerType_IsValid(int value);
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_MIN = Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_MAX = Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_FAULT_RESERVED;
const int Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_ARRAYSIZE = Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_pamsengerType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_sbr_pamsengerType_Name(Srs_0x350_350_Srs_sbr_pamsengerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_sbr_pamsengerType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_sbr_pamsengerType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_sbr_pamsengerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_sbr_pamsengerType>(
    Srs_0x350_350_Srs_sbr_pamsengerType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_sbr_driverType {
  Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_OFF = 0,
  Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_FLASHING_RESERVED = 1,
  Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_ON = 2,
  Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_FAULT_RESERVED = 3
};
bool Srs_0x350_350_Srs_sbr_driverType_IsValid(int value);
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_MIN = Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_MAX = Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_FAULT_RESERVED;
const int Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_ARRAYSIZE = Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_driverType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_sbr_driverType_Name(Srs_0x350_350_Srs_sbr_driverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_sbr_driverType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_sbr_driverType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_sbr_driverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_sbr_driverType>(
    Srs_0x350_350_Srs_sbr_driverType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_crashoutputstsType {
  Srs_0x350_350_Srs_crashoutputstsType_SRS_CRASHOUTPUTSTS_NO_CRASH = 0,
  Srs_0x350_350_Srs_crashoutputstsType_SRS_CRASHOUTPUTSTS_CRASH = 1
};
bool Srs_0x350_350_Srs_crashoutputstsType_IsValid(int value);
const Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_MIN = Srs_0x350_350_Srs_crashoutputstsType_SRS_CRASHOUTPUTSTS_NO_CRASH;
const Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_MAX = Srs_0x350_350_Srs_crashoutputstsType_SRS_CRASHOUTPUTSTS_CRASH;
const int Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_ARRAYSIZE = Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_crashoutputstsType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_crashoutputstsType_Name(Srs_0x350_350_Srs_crashoutputstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_crashoutputstsType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_crashoutputstsType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_crashoutputstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_crashoutputstsType>(
    Srs_0x350_350_Srs_crashoutputstsType_descriptor(), name, value);
}
enum Srs_0x350_350_Srs_airbagfailstsType {
  Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_OFF = 0,
  Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_FLASH = 1,
  Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_ON = 2,
  Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_RESERVED = 3
};
bool Srs_0x350_350_Srs_airbagfailstsType_IsValid(int value);
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_MIN = Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_OFF;
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_MAX = Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_RESERVED;
const int Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_ARRAYSIZE = Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_airbagfailstsType_descriptor();
inline const ::std::string& Srs_0x350_350_Srs_airbagfailstsType_Name(Srs_0x350_350_Srs_airbagfailstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Srs_0x350_350_Srs_airbagfailstsType_descriptor(), value);
}
inline bool Srs_0x350_350_Srs_airbagfailstsType_Parse(
    const ::std::string& name, Srs_0x350_350_Srs_airbagfailstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Srs_0x350_350_Srs_airbagfailstsType>(
    Srs_0x350_350_Srs_airbagfailstsType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_torquereqstatusType {
  Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_NO_REQUEST = 0,
  Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_TORQUE_REQUEST = 1,
  Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_RESERVED = 2
};
bool Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_MIN = Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_NO_REQUEST;
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_MAX = Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_RESERVED;
const int Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Name(Ipm_0x245_245_Ipm_laneassit_torquereqstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_torquereqstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_torquereqstatusType>(
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_torquevalidityType {
  Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IPM_LANEASSIT_TORQUEVALIDITY_VALID = 0,
  Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IPM_LANEASSIT_TORQUEVALIDITY_INVALID = 1
};
bool Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_MIN = Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IPM_LANEASSIT_TORQUEVALIDITY_VALID;
const Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_MAX = Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IPM_LANEASSIT_TORQUEVALIDITY_INVALID;
const int Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_torquevalidityType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Name(Ipm_0x245_245_Ipm_laneassit_torquevalidityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_torquevalidityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_torquevalidityType>(
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_sensitivityType {
  Ipm_0x245_245_Ipm_laneassit_sensitivityType_IPM_LANEASSIT_SENSITIVITY_HIGHSENSITIVITY = 0,
  Ipm_0x245_245_Ipm_laneassit_sensitivityType_IPM_LANEASSIT_SENSITIVITY_LOWSENSITIVITY = 1
};
bool Ipm_0x245_245_Ipm_laneassit_sensitivityType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_MIN = Ipm_0x245_245_Ipm_laneassit_sensitivityType_IPM_LANEASSIT_SENSITIVITY_HIGHSENSITIVITY;
const Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_MAX = Ipm_0x245_245_Ipm_laneassit_sensitivityType_IPM_LANEASSIT_SENSITIVITY_LOWSENSITIVITY;
const int Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_sensitivityType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_sensitivityType_Name(Ipm_0x245_245_Ipm_laneassit_sensitivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_sensitivityType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_sensitivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_sensitivityType>(
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_warningaudioType {
  Ipm_0x245_245_Ipm_laneassit_warningaudioType_IPM_LANEASSIT_WARNINGAUDIO_INACTIVE = 0,
  Ipm_0x245_245_Ipm_laneassit_warningaudioType_IPM_LANEASSIT_WARNINGAUDIO_ACTIVE = 1
};
bool Ipm_0x245_245_Ipm_laneassit_warningaudioType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_MIN = Ipm_0x245_245_Ipm_laneassit_warningaudioType_IPM_LANEASSIT_WARNINGAUDIO_INACTIVE;
const Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_MAX = Ipm_0x245_245_Ipm_laneassit_warningaudioType_IPM_LANEASSIT_WARNINGAUDIO_ACTIVE;
const int Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_warningaudioType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_warningaudioType_Name(Ipm_0x245_245_Ipm_laneassit_warningaudioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_warningaudioType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_warningaudioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_warningaudioType>(
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_leftvisualizationType {
  Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_NO_DISPLAY = 0,
  Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_LINE_TRACKING = 1,
  Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_INTERVENTION = 2,
  Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_WARNING = 3
};
bool Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_MIN = Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_NO_DISPLAY;
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_MAX = Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_WARNING;
const int Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Name(Ipm_0x245_245_Ipm_laneassit_leftvisualizationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_leftvisualizationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_leftvisualizationType>(
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_rightvisualizationType {
  Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_NO_DISPLAY = 0,
  Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_LINE_TRACKING = 1,
  Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_INTERVENTION = 2,
  Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_WARNING = 3
};
bool Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_MIN = Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_NO_DISPLAY;
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_MAX = Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_WARNING;
const int Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Name(Ipm_0x245_245_Ipm_laneassit_rightvisualizationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_rightvisualizationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_rightvisualizationType>(
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_slaspdlimitunitsType {
  Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_UNKNOWN = 0,
  Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_KMH = 1,
  Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_MPH = 2,
  Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_RESERVED = 3
};
bool Ipm_0x245_245_Ipm_slaspdlimitunitsType_IsValid(int value);
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_MIN = Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_UNKNOWN;
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_MAX = Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_RESERVED;
const int Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_ARRAYSIZE = Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_slaspdlimitunitsType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_slaspdlimitunitsType_Name(Ipm_0x245_245_Ipm_slaspdlimitunitsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_slaspdlimitunitsType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_slaspdlimitunitsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_slaspdlimitunitsType>(
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_slastateType {
  Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_OFF = 0,
  Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_FUSION_MODE = 1,
  Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_VISION_MODE = 2,
  Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_NAVIGATION_ONLY_MODE = 3,
  Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_DEFECT = 4
};
bool Ipm_0x245_245_Ipm_slastateType_IsValid(int value);
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_MIN = Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_OFF;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_MAX = Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_DEFECT;
const int Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_ARRAYSIZE = Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_slastateType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_slastateType_Name(Ipm_0x245_245_Ipm_slastateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_slastateType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_slastateType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_slastateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_slastateType>(
    Ipm_0x245_245_Ipm_slastateType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_statusType {
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_OFF = 0,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_STANDBY = 1,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_LDW_ACTIVE_LKA_STANDBY = 2,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_LDW_STANDBY_LKA_ACTIVE = 3,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_ACTIVE = 4,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_FAULT = 5,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_CAMERA_BLOCKED = 6,
  Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_CAMERA_UNCALIBRATED = 7
};
bool Ipm_0x245_245_Ipm_laneassit_statusType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_MIN = Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_OFF;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_MAX = Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_CAMERA_UNCALIBRATED;
const int Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_statusType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_statusType_Name(Ipm_0x245_245_Ipm_laneassit_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_statusType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_statusType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_statusType>(
    Ipm_0x245_245_Ipm_laneassit_statusType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_slaspdlimitType {
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_NO_DISPLAY = 0,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_CANCELLED = 1,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_5 = 2,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_10 = 3,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_15 = 4,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_20 = 5,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_25 = 6,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_30 = 7,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_35 = 8,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_40 = 9,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_45 = 10,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_50 = 11,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_55 = 12,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_60 = 13,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_65 = 14,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_70 = 15,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_75 = 16,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_80 = 17,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_85 = 18,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_90 = 19,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_95 = 20,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_100 = 21,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_105 = 22,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_110 = 23,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_115 = 24,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_120 = 25,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_125 = 26,
  Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_130 = 27
};
bool Ipm_0x245_245_Ipm_slaspdlimitType_IsValid(int value);
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_MIN = Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_NO_DISPLAY;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_MAX = Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_130;
const int Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_ARRAYSIZE = Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_slaspdlimitType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_slaspdlimitType_Name(Ipm_0x245_245_Ipm_slaspdlimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_slaspdlimitType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_slaspdlimitType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_slaspdlimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_slaspdlimitType>(
    Ipm_0x245_245_Ipm_slaspdlimitType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_hma_statusType {
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_OFF = 0,
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_PASSIVE = 1,
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_STANDBY = 2,
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_ACTIVE = 3,
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_FAULT = 4,
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_CAMERA_BLOCKED = 5,
  Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_RESERVED = 6
};
bool Ipm_0x245_245_Ipm_hma_statusType_IsValid(int value);
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_MIN = Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_OFF;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_MAX = Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_RESERVED;
const int Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_ARRAYSIZE = Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_hma_statusType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_hma_statusType_Name(Ipm_0x245_245_Ipm_hma_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_hma_statusType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_hma_statusType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_hma_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_hma_statusType>(
    Ipm_0x245_245_Ipm_hma_statusType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_tjaica_statusType {
  Ipm_0x245_245_Ipm_tjaica_statusType_IPM_TJAICA_STATUS_INACTIVE = 0,
  Ipm_0x245_245_Ipm_tjaica_statusType_IPM_TJAICA_STATUS_ACTIVE = 1
};
bool Ipm_0x245_245_Ipm_tjaica_statusType_IsValid(int value);
const Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_MIN = Ipm_0x245_245_Ipm_tjaica_statusType_IPM_TJAICA_STATUS_INACTIVE;
const Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_MAX = Ipm_0x245_245_Ipm_tjaica_statusType_IPM_TJAICA_STATUS_ACTIVE;
const int Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_ARRAYSIZE = Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_tjaica_statusType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_tjaica_statusType_Name(Ipm_0x245_245_Ipm_tjaica_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_tjaica_statusType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_tjaica_statusType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_tjaica_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_tjaica_statusType>(
    Ipm_0x245_245_Ipm_tjaica_statusType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_ldwwarningtypeType {
  Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE = 0,
  Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_AUDIBLE_WARNING = 1,
  Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_WHEELSTEER_SHAKE = 2,
  Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_RESERVED = 3
};
bool Ipm_0x245_245_Ipm_ldwwarningtypeType_IsValid(int value);
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_MIN = Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE;
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_MAX = Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_RESERVED;
const int Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_ARRAYSIZE = Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_ldwwarningtypeType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_ldwwarningtypeType_Name(Ipm_0x245_245_Ipm_ldwwarningtypeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_ldwwarningtypeType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_ldwwarningtypeType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_ldwwarningtypeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_ldwwarningtypeType>(
    Ipm_0x245_245_Ipm_ldwwarningtypeType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_handsonreqType {
  Ipm_0x245_245_Ipm_laneassit_handsonreqType_IPM_LANEASSIT_HANDSONREQ_INACTIVE = 0,
  Ipm_0x245_245_Ipm_laneassit_handsonreqType_IPM_LANEASSIT_HANDSONREQ_ACTIVE = 1
};
bool Ipm_0x245_245_Ipm_laneassit_handsonreqType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_MIN = Ipm_0x245_245_Ipm_laneassit_handsonreqType_IPM_LANEASSIT_HANDSONREQ_INACTIVE;
const Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_MAX = Ipm_0x245_245_Ipm_laneassit_handsonreqType_IPM_LANEASSIT_HANDSONREQ_ACTIVE;
const int Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_handsonreqType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_handsonreqType_Name(Ipm_0x245_245_Ipm_laneassit_handsonreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_handsonreqType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_handsonreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_handsonreqType>(
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_hma_highbeamreqType {
  Ipm_0x245_245_Ipm_hma_highbeamreqType_IPM_HMA_HIGHBEAMREQ_NO_REQUEST = 0,
  Ipm_0x245_245_Ipm_hma_highbeamreqType_IPM_HMA_HIGHBEAMREQ_HIGH_BEAM_REQUEST = 1
};
bool Ipm_0x245_245_Ipm_hma_highbeamreqType_IsValid(int value);
const Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_MIN = Ipm_0x245_245_Ipm_hma_highbeamreqType_IPM_HMA_HIGHBEAMREQ_NO_REQUEST;
const Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_MAX = Ipm_0x245_245_Ipm_hma_highbeamreqType_IPM_HMA_HIGHBEAMREQ_HIGH_BEAM_REQUEST;
const int Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_ARRAYSIZE = Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_hma_highbeamreqType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_hma_highbeamreqType_Name(Ipm_0x245_245_Ipm_hma_highbeamreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_hma_highbeamreqType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_hma_highbeamreqType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_hma_highbeamreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_hma_highbeamreqType>(
    Ipm_0x245_245_Ipm_hma_highbeamreqType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassittypeType {
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_UNAVAILABLE = 0,
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_LDW = 1,
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_LKA = 2,
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_LDW_LKA = 3,
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_TJA_ICA = 4,
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_TJA_ICA_LDW = 5,
  Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_RESERVED = 6
};
bool Ipm_0x245_245_Ipm_laneassittypeType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_MIN = Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_UNAVAILABLE;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_MAX = Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_RESERVED;
const int Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassittypeType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassittypeType_Name(Ipm_0x245_245_Ipm_laneassittypeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassittypeType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassittypeType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassittypeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassittypeType>(
    Ipm_0x245_245_Ipm_laneassittypeType_descriptor(), name, value);
}
enum Ipm_0x245_245_Ipm_laneassit_warningvibrationType {
  Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IPM_LANEASSIT_WARNINGVIBRATION_INACTIVE = 0,
  Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IPM_LANEASSIT_WARNINGVIBRATION_ACTIVE = 1
};
bool Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IsValid(int value);
const Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_MIN = Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IPM_LANEASSIT_WARNINGVIBRATION_INACTIVE;
const Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_MAX = Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IPM_LANEASSIT_WARNINGVIBRATION_ACTIVE;
const int Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_ARRAYSIZE = Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_warningvibrationType_descriptor();
inline const ::std::string& Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Name(Ipm_0x245_245_Ipm_laneassit_warningvibrationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_descriptor(), value);
}
inline bool Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Parse(
    const ::std::string& name, Ipm_0x245_245_Ipm_laneassit_warningvibrationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ipm_0x245_245_Ipm_laneassit_warningvibrationType>(
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_descriptor(), name, value);
}
enum Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType {
  Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_NOEERROR = 0,
  Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_REVERSIBLE_ERROR = 1,
  Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_IRREVERSIBLE_ERROR = 2,
  Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_NOTDEFINED = 3
};
bool Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_IsValid(int value);
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_MIN = Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_NOEERROR;
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_MAX = Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_NOTDEFINED;
const int Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_ARRAYSIZE = Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_descriptor();
inline const ::std::string& Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Name(Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_descriptor(), value);
}
inline bool Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Parse(
    const ::std::string& name, Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType>(
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_descriptor(), name, value);
}
enum Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType {
  Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_EMS_INDICATEDDRIVEROVERRIDE_NOOVERRIDE = 0,
  Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_EMS_INDICATEDDRIVEROVERRIDE_DRIVEROVERRIDE = 1
};
bool Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_IsValid(int value);
const Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_MIN = Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_EMS_INDICATEDDRIVEROVERRIDE_NOOVERRIDE;
const Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_MAX = Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_EMS_INDICATEDDRIVEROVERRIDE_DRIVEROVERRIDE;
const int Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_ARRAYSIZE = Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_descriptor();
inline const ::std::string& Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Name(Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_descriptor(), value);
}
inline bool Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Parse(
    const ::std::string& name, Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType>(
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType {
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_N = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_1 = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_2 = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_3 = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_4 = 4,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_5 = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_6 = 6,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_7 = 7,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_8 = 8,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_D = 9,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_L = 10,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_R = 11,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_RESERVED = 12,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_P = 13,
  Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_INVALID = 15
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_N;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType {
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_P = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_L_RESERVED = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_2_RESERVED = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_3_RESERVED = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_D = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_N = 6,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_R = 7,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_M = 8,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_INVALID = 15
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_P;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType {
  Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_TCU_TRANSPMOTOPARKREQINVALID_VALID = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_TCU_TRANSPMOTOPARKREQINVALID_INVALID = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_TCU_TRANSPMOTOPARKREQINVALID_VALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_TCU_TRANSPMOTOPARKREQINVALID_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType {
  Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_TCU_GEARSHIFTINPROGRESS_NOGEARSHIFTINPROGRESS = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_TCU_GEARSHIFTINPROGRESS_GEARSHIFTINPROGRESS = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_TCU_GEARSHIFTINPROGRESS_NOGEARSHIFTINPROGRESS;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_TCU_GEARSHIFTINPROGRESS_GEARSHIFTINPROGRESS;
const int Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType {
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_P = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_D = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_N = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_R = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_M = 4,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_BLANK = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_RESERVED = 6,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_INVALID = 7
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_P;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType {
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_DRIVETRAINOPEN_GEARN = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_1STGEAR = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_2NDGEAR = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_3RDGEAR = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_4THGEAR = 4,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_5THGEAR = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_6THGEAR = 6,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_7THGEAR = 7,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_8THGEAR = 8,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_REVERSEGEAR = 14,
  Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_INVALID = 15
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_DRIVETRAINOPEN_GEARN;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_availableType {
  Gw_tcu_gearinfo_0x123_123_Tcu_availableType_TCU_AVAILABLE_NOTAVAILABLE = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_availableType_TCU_AVAILABLE_AVAILABLE = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_availableType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_availableType_TCU_AVAILABLE_NOTAVAILABLE;
const Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_availableType_TCU_AVAILABLE_AVAILABLE;
const int Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_availableType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_availableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_availableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_availableType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType {
  Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_TCU_DRIVERINTERVENTION_NOINTERVENTION = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_TCU_DRIVERINTERVENTION_DRIVERINTERVENTION = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_TCU_DRIVERINTERVENTION_NOINTERVENTION;
const Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_TCU_DRIVERINTERVENTION_DRIVERINTERVENTION;
const int Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType {
  Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_NORMAL = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_FAILURE_NOLIMP_HOME = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_FAIL_LIMP_HOMEACTIVATED = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_RESERVED = 3
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_NORMAL;
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_RESERVED;
const int Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType {
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_STANDARD = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_SNOW = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_MANUAL_RESERVED = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_SPORT = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_ECO = 4,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_4L = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_WETMUD = 7,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_SAND = 8,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_GHAT = 9,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_MANUAL = 13,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_ATSFAULTTCU = 14,
  Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_INVALID = 15
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_STANDARD;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType {
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_NORMAL = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SNOW = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_NOUSED = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SPORT = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_ECO = 4,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_4L = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_ROCK = 6,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_WETMUD = 7,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SAND = 8,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SWITCHFAULT = 14,
  Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_INVALID = 15
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_NORMAL;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType {
  Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_TCU_EPBLOCKREQ_NO_REQUEST = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_TCU_EPBLOCKREQ_REQUEST_PARK_BRAKE_ENGAGE = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_TCU_EPBLOCKREQ_NO_REQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_TCU_EPBLOCKREQ_REQUEST_PARK_BRAKE_ENGAGE;
const int Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType {
  Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_TCU_HIGHRESISTANCE_NO_HIGHRESISTANCE = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_TCU_HIGHRESISTANCE_HIGHRESISTANCE = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_TCU_HIGHRESISTANCE_NO_HIGHRESISTANCE;
const Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_TCU_HIGHRESISTANCE_HIGHRESISTANCE;
const int Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType {
  Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_TCU_DRIVINGMODECHANGE_FAULT_FLAG_NOFAULT = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_TCU_DRIVINGMODECHANGE_FAULT_FLAG_FAULT = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_TCU_DRIVINGMODECHANGE_FAULT_FLAG_NOFAULT;
const Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_TCU_DRIVINGMODECHANGE_FAULT_FLAG_FAULT;
const int Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType {
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_TCU_SHIFTLEVERTOPREQINVALID_VALID = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_TCU_SHIFTLEVERTOPREQINVALID_INVALID = 1
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_TCU_SHIFTLEVERTOPREQINVALID_VALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_TCU_SHIFTLEVERTOPREQINVALID_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType {
  Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_NOREQUEST = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_UNPARKREQUEST = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_PARKREQUEST = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_RESERVED = 3
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_NOREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_RESERVED;
const int Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType {
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_NOREQUEST = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_PARKREQUEST = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_RESERVED = 2
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_NOREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_RESERVED;
const int Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_descriptor(), name, value);
}
enum Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType {
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_DRIVETRAINOPEN_GEARN = 0,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_1STGEAR = 1,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_2NDGEAR = 2,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_3RDGEAR = 3,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_4THGEAR = 4,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_5THGEAR = 5,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_6THGEAR = 6,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_7THGEAR = 7,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_8THGEAR = 8,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_REVERSEGEAR = 14,
  Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_INVALID = 15
};
bool Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_IsValid(int value);
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_MIN = Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_DRIVETRAINOPEN_GEARN;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_MAX = Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_INVALID;
const int Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_ARRAYSIZE = Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_descriptor();
inline const ::std::string& Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Name(Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_descriptor(), value);
}
inline bool Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Parse(
    const ::std::string& name, Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType>(
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_descriptor(), name, value);
}
enum Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType {
  Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_NO_REQUEST = 0,
  Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_FAST_OPEN_REQUEST = 1,
  Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_TORQUE_UPPER_LIMIT_REQUEST = 2,
  Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_FAILURE = 3
};
bool Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_IsValid(int value);
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_MIN = Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_NO_REQUEST;
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_MAX = Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_FAILURE;
const int Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_ARRAYSIZE = Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_descriptor();
inline const ::std::string& Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Name(Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_descriptor(), value);
}
inline bool Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Parse(
    const ::std::string& name, Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType>(
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_descriptor(), name, value);
}
enum Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType {
  Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_ESP_PRESOFFSETMASTERCYLINDERVALI_VALID = 0,
  Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_ESP_PRESOFFSETMASTERCYLINDERVALI_INVALID = 1
};
bool Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_IsValid(int value);
const Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_MIN = Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_ESP_PRESOFFSETMASTERCYLINDERVALI_VALID;
const Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_MAX = Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_ESP_PRESOFFSETMASTERCYLINDERVALI_INVALID;
const int Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_ARRAYSIZE = Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_descriptor();
inline const ::std::string& Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Name(Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_descriptor(), value);
}
inline bool Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Parse(
    const ::std::string& name, Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType>(
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_descriptor(), name, value);
}
enum Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType {
  Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_ESP_MASTER_CYLINDER_PRESSURE_STA_VALID = 0,
  Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_ESP_MASTER_CYLINDER_PRESSURE_STA_INVALID = 1
};
bool Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_IsValid(int value);
const Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_MIN = Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_ESP_MASTER_CYLINDER_PRESSURE_STA_VALID;
const Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_MAX = Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_ESP_MASTER_CYLINDER_PRESSURE_STA_INVALID;
const int Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_ARRAYSIZE = Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_descriptor();
inline const ::std::string& Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Name(Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_descriptor(), value);
}
inline bool Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Parse(
    const ::std::string& name, Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType>(
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_hhcavailableType {
  Esp_status_0x243_243_Esp_hhcavailableType_ESP_HHCAVAILABLE_AVAILABLE = 0,
  Esp_status_0x243_243_Esp_hhcavailableType_ESP_HHCAVAILABLE_NOT_AVAILABLE = 1
};
bool Esp_status_0x243_243_Esp_hhcavailableType_IsValid(int value);
const Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_MIN = Esp_status_0x243_243_Esp_hhcavailableType_ESP_HHCAVAILABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_MAX = Esp_status_0x243_243_Esp_hhcavailableType_ESP_HHCAVAILABLE_NOT_AVAILABLE;
const int Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_ARRAYSIZE = Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hhcavailableType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_hhcavailableType_Name(Esp_status_0x243_243_Esp_hhcavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_hhcavailableType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_hhcavailableType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_hhcavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_hhcavailableType>(
    Esp_status_0x243_243_Esp_hhcavailableType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_hhcactiveType {
  Esp_status_0x243_243_Esp_hhcactiveType_ESP_HHCACTIVE_NOT_ACTIVE = 0,
  Esp_status_0x243_243_Esp_hhcactiveType_ESP_HHCACTIVE_ACTIVE = 1
};
bool Esp_status_0x243_243_Esp_hhcactiveType_IsValid(int value);
const Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_MIN = Esp_status_0x243_243_Esp_hhcactiveType_ESP_HHCACTIVE_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_MAX = Esp_status_0x243_243_Esp_hhcactiveType_ESP_HHCACTIVE_ACTIVE;
const int Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_ARRAYSIZE = Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hhcactiveType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_hhcactiveType_Name(Esp_status_0x243_243_Esp_hhcactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_hhcactiveType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_hhcactiveType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_hhcactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_hhcactiveType>(
    Esp_status_0x243_243_Esp_hhcactiveType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_hdcactiveType {
  Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_OFF = 0,
  Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_ON_ACTIVE_BRAKING = 1,
  Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_ON_NOT_ACTIVE_BRAKING = 2
};
bool Esp_status_0x243_243_Esp_hdcactiveType_IsValid(int value);
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_MIN = Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_OFF;
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_MAX = Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_ON_NOT_ACTIVE_BRAKING;
const int Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_ARRAYSIZE = Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hdcactiveType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_hdcactiveType_Name(Esp_status_0x243_243_Esp_hdcactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_hdcactiveType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_hdcactiveType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_hdcactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_hdcactiveType>(
    Esp_status_0x243_243_Esp_hdcactiveType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType {
  Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_ESP_LDMBLC_BLREQUESTCONTROLLER_NOT_ILLUMINATE = 0,
  Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_ESP_LDMBLC_BLREQUESTCONTROLLER_ILLUMINATE = 1
};
bool Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_IsValid(int value);
const Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_MIN = Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_ESP_LDMBLC_BLREQUESTCONTROLLER_NOT_ILLUMINATE;
const Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_MAX = Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_ESP_LDMBLC_BLREQUESTCONTROLLER_ILLUMINATE;
const int Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_ARRAYSIZE = Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Name(Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType>(
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_cdpavailableType {
  Esp_status_0x243_243_Esp_cdpavailableType_ESP_CDPAVAILABLE_AVAILABLE = 0,
  Esp_status_0x243_243_Esp_cdpavailableType_ESP_CDPAVAILABLE_NOT_AVAILABLE = 1
};
bool Esp_status_0x243_243_Esp_cdpavailableType_IsValid(int value);
const Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_MIN = Esp_status_0x243_243_Esp_cdpavailableType_ESP_CDPAVAILABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_MAX = Esp_status_0x243_243_Esp_cdpavailableType_ESP_CDPAVAILABLE_NOT_AVAILABLE;
const int Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_ARRAYSIZE = Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_cdpavailableType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_cdpavailableType_Name(Esp_status_0x243_243_Esp_cdpavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_cdpavailableType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_cdpavailableType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_cdpavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_cdpavailableType>(
    Esp_status_0x243_243_Esp_cdpavailableType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_cdpactiveType {
  Esp_status_0x243_243_Esp_cdpactiveType_ESP_CDPACTIVE_NOT_ACTIVE = 0,
  Esp_status_0x243_243_Esp_cdpactiveType_ESP_CDPACTIVE_ACTIVE = 1
};
bool Esp_status_0x243_243_Esp_cdpactiveType_IsValid(int value);
const Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_MIN = Esp_status_0x243_243_Esp_cdpactiveType_ESP_CDPACTIVE_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_MAX = Esp_status_0x243_243_Esp_cdpactiveType_ESP_CDPACTIVE_ACTIVE;
const int Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_ARRAYSIZE = Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_cdpactiveType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_cdpactiveType_Name(Esp_status_0x243_243_Esp_cdpactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_cdpactiveType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_cdpactiveType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_cdpactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_cdpactiveType>(
    Esp_status_0x243_243_Esp_cdpactiveType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_epbwarningmessage3Type {
  Esp_status_0x243_243_Esp_epbwarningmessage3Type_ESP_EPBWARNINGMESSAGE3_NO_DISPLAY = 0,
  Esp_status_0x243_243_Esp_epbwarningmessage3Type_ESP_EPBWARNINGMESSAGE3_WHEN_APPLIED_THE_EPB_THE_SLOPE_OF_VEHICLE_IS_MORE_THAN_20_FOR_PK_30_FOR_SUV = 1
};
bool Esp_status_0x243_243_Esp_epbwarningmessage3Type_IsValid(int value);
const Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_MIN = Esp_status_0x243_243_Esp_epbwarningmessage3Type_ESP_EPBWARNINGMESSAGE3_NO_DISPLAY;
const Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_MAX = Esp_status_0x243_243_Esp_epbwarningmessage3Type_ESP_EPBWARNINGMESSAGE3_WHEN_APPLIED_THE_EPB_THE_SLOPE_OF_VEHICLE_IS_MORE_THAN_20_FOR_PK_30_FOR_SUV;
const int Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_ARRAYSIZE = Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbwarningmessage3Type_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_epbwarningmessage3Type_Name(Esp_status_0x243_243_Esp_epbwarningmessage3Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_epbwarningmessage3Type_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_epbwarningmessage3Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_epbwarningmessage3Type>(
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_epbwarningmessage2Type {
  Esp_status_0x243_243_Esp_epbwarningmessage2Type_ESP_EPBWARNINGMESSAGE2_NO_DISPLAY = 0,
  Esp_status_0x243_243_Esp_epbwarningmessage2Type_ESP_EPBWARNINGMESSAGE2_EPB_DRIVEROFF_WITHOUT_SEATBLET_OR_DRIVER_DOOR = 1
};
bool Esp_status_0x243_243_Esp_epbwarningmessage2Type_IsValid(int value);
const Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_MIN = Esp_status_0x243_243_Esp_epbwarningmessage2Type_ESP_EPBWARNINGMESSAGE2_NO_DISPLAY;
const Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_MAX = Esp_status_0x243_243_Esp_epbwarningmessage2Type_ESP_EPBWARNINGMESSAGE2_EPB_DRIVEROFF_WITHOUT_SEATBLET_OR_DRIVER_DOOR;
const int Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_ARRAYSIZE = Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbwarningmessage2Type_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_epbwarningmessage2Type_Name(Esp_status_0x243_243_Esp_epbwarningmessage2Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_epbwarningmessage2Type_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_epbwarningmessage2Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_epbwarningmessage2Type>(
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_epbwarningmessage1Type {
  Esp_status_0x243_243_Esp_epbwarningmessage1Type_ESP_EPBWARNINGMESSAGE1_NO_DISPLAY = 0,
  Esp_status_0x243_243_Esp_epbwarningmessage1Type_ESP_EPBWARNINGMESSAGE1_NO_BRAKE_PEDAL_PRESSED_AND_RELEASE_THE_EPB = 1
};
bool Esp_status_0x243_243_Esp_epbwarningmessage1Type_IsValid(int value);
const Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_MIN = Esp_status_0x243_243_Esp_epbwarningmessage1Type_ESP_EPBWARNINGMESSAGE1_NO_DISPLAY;
const Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_MAX = Esp_status_0x243_243_Esp_epbwarningmessage1Type_ESP_EPBWARNINGMESSAGE1_NO_BRAKE_PEDAL_PRESSED_AND_RELEASE_THE_EPB;
const int Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_ARRAYSIZE = Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbwarningmessage1Type_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_epbwarningmessage1Type_Name(Esp_status_0x243_243_Esp_epbwarningmessage1Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_epbwarningmessage1Type_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_epbwarningmessage1Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_epbwarningmessage1Type>(
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_avhwarningmessageType {
  Esp_status_0x243_243_Esp_avhwarningmessageType_ESP_AVHWARNINGMESSAGE_NO_WARNING = 0,
  Esp_status_0x243_243_Esp_avhwarningmessageType_ESP_AVHWARNINGMESSAGE_PLEASE_CLOSE_THE_DOOR_OR_SEATBLET_THEN_PRESSURE_THE_AVH_BUTTON = 1
};
bool Esp_status_0x243_243_Esp_avhwarningmessageType_IsValid(int value);
const Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_MIN = Esp_status_0x243_243_Esp_avhwarningmessageType_ESP_AVHWARNINGMESSAGE_NO_WARNING;
const Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_MAX = Esp_status_0x243_243_Esp_avhwarningmessageType_ESP_AVHWARNINGMESSAGE_PLEASE_CLOSE_THE_DOOR_OR_SEATBLET_THEN_PRESSURE_THE_AVH_BUTTON;
const int Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_ARRAYSIZE = Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhwarningmessageType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_avhwarningmessageType_Name(Esp_status_0x243_243_Esp_avhwarningmessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_avhwarningmessageType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_avhwarningmessageType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_avhwarningmessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_avhwarningmessageType>(
    Esp_status_0x243_243_Esp_avhwarningmessageType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_avhactiveType {
  Esp_status_0x243_243_Esp_avhactiveType_ESP_AVHACTIVE_INACTIVE = 0,
  Esp_status_0x243_243_Esp_avhactiveType_ESP_AVHACTIVE_ACTIVE = 1
};
bool Esp_status_0x243_243_Esp_avhactiveType_IsValid(int value);
const Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_MIN = Esp_status_0x243_243_Esp_avhactiveType_ESP_AVHACTIVE_INACTIVE;
const Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_MAX = Esp_status_0x243_243_Esp_avhactiveType_ESP_AVHACTIVE_ACTIVE;
const int Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_ARRAYSIZE = Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhactiveType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_avhactiveType_Name(Esp_status_0x243_243_Esp_avhactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_avhactiveType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_avhactiveType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_avhactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_avhactiveType>(
    Esp_status_0x243_243_Esp_avhactiveType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_avhstandbyType {
  Esp_status_0x243_243_Esp_avhstandbyType_ESP_AVHSTANDBY_NOT_STANDBY = 0,
  Esp_status_0x243_243_Esp_avhstandbyType_ESP_AVHSTANDBY_STANDBY = 1
};
bool Esp_status_0x243_243_Esp_avhstandbyType_IsValid(int value);
const Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_MIN = Esp_status_0x243_243_Esp_avhstandbyType_ESP_AVHSTANDBY_NOT_STANDBY;
const Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_MAX = Esp_status_0x243_243_Esp_avhstandbyType_ESP_AVHSTANDBY_STANDBY;
const int Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_ARRAYSIZE = Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhstandbyType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_avhstandbyType_Name(Esp_status_0x243_243_Esp_avhstandbyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_avhstandbyType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_avhstandbyType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_avhstandbyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_avhstandbyType>(
    Esp_status_0x243_243_Esp_avhstandbyType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_avhavabliableType {
  Esp_status_0x243_243_Esp_avhavabliableType_ESP_AVHAVABLIABLE_AVAILABLE = 0,
  Esp_status_0x243_243_Esp_avhavabliableType_ESP_AVHAVABLIABLE_NOT_AVAILABLE = 1
};
bool Esp_status_0x243_243_Esp_avhavabliableType_IsValid(int value);
const Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_MIN = Esp_status_0x243_243_Esp_avhavabliableType_ESP_AVHAVABLIABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_MAX = Esp_status_0x243_243_Esp_avhavabliableType_ESP_AVHAVABLIABLE_NOT_AVAILABLE;
const int Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_ARRAYSIZE = Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhavabliableType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_avhavabliableType_Name(Esp_status_0x243_243_Esp_avhavabliableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_avhavabliableType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_avhavabliableType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_avhavabliableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_avhavabliableType>(
    Esp_status_0x243_243_Esp_avhavabliableType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_vdcflgfltType {
  Esp_status_0x243_243_Esp_vdcflgfltType_ESP_VDCFLGFLT_NO_FAILURE = 0,
  Esp_status_0x243_243_Esp_vdcflgfltType_ESP_VDCFLGFLT_FAILURE = 1
};
bool Esp_status_0x243_243_Esp_vdcflgfltType_IsValid(int value);
const Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_MIN = Esp_status_0x243_243_Esp_vdcflgfltType_ESP_VDCFLGFLT_NO_FAILURE;
const Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_MAX = Esp_status_0x243_243_Esp_vdcflgfltType_ESP_VDCFLGFLT_FAILURE;
const int Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_ARRAYSIZE = Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_vdcflgfltType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_vdcflgfltType_Name(Esp_status_0x243_243_Esp_vdcflgfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_vdcflgfltType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_vdcflgfltType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_vdcflgfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_vdcflgfltType>(
    Esp_status_0x243_243_Esp_vdcflgfltType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_tcsflgfltType {
  Esp_status_0x243_243_Esp_tcsflgfltType_ESP_TCSFLGFLT_NO_FAILURE = 0,
  Esp_status_0x243_243_Esp_tcsflgfltType_ESP_TCSFLGFLT_FAILURE = 1
};
bool Esp_status_0x243_243_Esp_tcsflgfltType_IsValid(int value);
const Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_MIN = Esp_status_0x243_243_Esp_tcsflgfltType_ESP_TCSFLGFLT_NO_FAILURE;
const Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_MAX = Esp_status_0x243_243_Esp_tcsflgfltType_ESP_TCSFLGFLT_FAILURE;
const int Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_ARRAYSIZE = Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_tcsflgfltType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_tcsflgfltType_Name(Esp_status_0x243_243_Esp_tcsflgfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_tcsflgfltType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_tcsflgfltType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_tcsflgfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_tcsflgfltType>(
    Esp_status_0x243_243_Esp_tcsflgfltType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_tcsctrlactvType {
  Esp_status_0x243_243_Esp_tcsctrlactvType_ESP_TCSCTRLACTV_NOT_ACTIVE = 0,
  Esp_status_0x243_243_Esp_tcsctrlactvType_ESP_TCSCTRLACTV_ACTIVE = 1
};
bool Esp_status_0x243_243_Esp_tcsctrlactvType_IsValid(int value);
const Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_MIN = Esp_status_0x243_243_Esp_tcsctrlactvType_ESP_TCSCTRLACTV_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_MAX = Esp_status_0x243_243_Esp_tcsctrlactvType_ESP_TCSCTRLACTV_ACTIVE;
const int Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_ARRAYSIZE = Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_tcsctrlactvType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_tcsctrlactvType_Name(Esp_status_0x243_243_Esp_tcsctrlactvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_tcsctrlactvType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_tcsctrlactvType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_tcsctrlactvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_tcsctrlactvType>(
    Esp_status_0x243_243_Esp_tcsctrlactvType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_espctrlactvType {
  Esp_status_0x243_243_Esp_espctrlactvType_ESP_ESPCTRLACTV_NOT_ACTIVE = 0,
  Esp_status_0x243_243_Esp_espctrlactvType_ESP_ESPCTRLACTV_ACTIVE = 1
};
bool Esp_status_0x243_243_Esp_espctrlactvType_IsValid(int value);
const Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_MIN = Esp_status_0x243_243_Esp_espctrlactvType_ESP_ESPCTRLACTV_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_MAX = Esp_status_0x243_243_Esp_espctrlactvType_ESP_ESPCTRLACTV_ACTIVE;
const int Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_ARRAYSIZE = Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_espctrlactvType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_espctrlactvType_Name(Esp_status_0x243_243_Esp_espctrlactvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_espctrlactvType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_espctrlactvType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_espctrlactvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_espctrlactvType>(
    Esp_status_0x243_243_Esp_espctrlactvType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_driving_mode_reqType {
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_AUTO = 0,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_SNOW = 1,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_NO_USED = 2,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_SPORT = 3,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ECO = 4,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_4L = 5,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ROCK = 6,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_WETMUD = 7,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_SAND = 8,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ATS_SHIFTING = 13,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ATS_SHIFT_FAILURE = 14,
  Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_INVALID = 15
};
bool Esp_status_0x243_243_Esp_driving_mode_reqType_IsValid(int value);
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_MIN = Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_AUTO;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_MAX = Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_INVALID;
const int Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_ARRAYSIZE = Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_driving_mode_reqType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_driving_mode_reqType_Name(Esp_status_0x243_243_Esp_driving_mode_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_driving_mode_reqType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_driving_mode_reqType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_driving_mode_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_driving_mode_reqType>(
    Esp_status_0x243_243_Esp_driving_mode_reqType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_espinfolampType {
  Esp_status_0x243_243_Esp_espinfolampType_ESP_ESPINFOLAMP_OFF = 0,
  Esp_status_0x243_243_Esp_espinfolampType_ESP_ESPINFOLAMP_ON = 1
};
bool Esp_status_0x243_243_Esp_espinfolampType_IsValid(int value);
const Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_MIN = Esp_status_0x243_243_Esp_espinfolampType_ESP_ESPINFOLAMP_OFF;
const Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_MAX = Esp_status_0x243_243_Esp_espinfolampType_ESP_ESPINFOLAMP_ON;
const int Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_ARRAYSIZE = Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_espinfolampType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_espinfolampType_Name(Esp_status_0x243_243_Esp_espinfolampType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_espinfolampType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_espinfolampType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_espinfolampType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_espinfolampType>(
    Esp_status_0x243_243_Esp_espinfolampType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_espenablestsType {
  Esp_status_0x243_243_Esp_espenablestsType_ESP_ESPENABLESTS_ESP_DISABLED = 0,
  Esp_status_0x243_243_Esp_espenablestsType_ESP_ESPENABLESTS_ESP_ENABLED = 1
};
bool Esp_status_0x243_243_Esp_espenablestsType_IsValid(int value);
const Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_MIN = Esp_status_0x243_243_Esp_espenablestsType_ESP_ESPENABLESTS_ESP_DISABLED;
const Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_MAX = Esp_status_0x243_243_Esp_espenablestsType_ESP_ESPENABLESTS_ESP_ENABLED;
const int Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_ARRAYSIZE = Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_espenablestsType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_espenablestsType_Name(Esp_status_0x243_243_Esp_espenablestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_espenablestsType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_espenablestsType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_espenablestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_espenablestsType>(
    Esp_status_0x243_243_Esp_espenablestsType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_gearshiftprevnType {
  Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_NO_REQUEST = 0,
  Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_UPSHIFT = 1,
  Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_DOWN_SHIFT = 2,
  Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_ALL_SHIFTS = 3
};
bool Esp_status_0x243_243_Esp_gearshiftprevnType_IsValid(int value);
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_MIN = Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_NO_REQUEST;
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_MAX = Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_ALL_SHIFTS;
const int Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_ARRAYSIZE = Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_gearshiftprevnType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_gearshiftprevnType_Name(Esp_status_0x243_243_Esp_gearshiftprevnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_gearshiftprevnType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_gearshiftprevnType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_gearshiftprevnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_gearshiftprevnType>(
    Esp_status_0x243_243_Esp_gearshiftprevnType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_epbstatusType {
  Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_RELEASED = 0,
  Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_APPLIED = 1,
  Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_RELEASINGR = 2,
  Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_APPLYING = 3,
  Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_UNKNOWN = 4,
  Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_ERROR = 5
};
bool Esp_status_0x243_243_Esp_epbstatusType_IsValid(int value);
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_MIN = Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_RELEASED;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_MAX = Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_ERROR;
const int Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_ARRAYSIZE = Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbstatusType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_epbstatusType_Name(Esp_status_0x243_243_Esp_epbstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_epbstatusType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_epbstatusType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_epbstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_epbstatusType>(
    Esp_status_0x243_243_Esp_epbstatusType_descriptor(), name, value);
}
enum Esp_status_0x243_243_RollerbenchmodestsType {
  Esp_status_0x243_243_RollerbenchmodestsType_ROLLERBENCHMODESTS_ROLLERBENCH_MODE_INACTIVE = 0,
  Esp_status_0x243_243_RollerbenchmodestsType_ROLLERBENCHMODESTS_ROLLERBENCH_MODE_ACTIVE = 1
};
bool Esp_status_0x243_243_RollerbenchmodestsType_IsValid(int value);
const Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_MIN = Esp_status_0x243_243_RollerbenchmodestsType_ROLLERBENCHMODESTS_ROLLERBENCH_MODE_INACTIVE;
const Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_MAX = Esp_status_0x243_243_RollerbenchmodestsType_ROLLERBENCHMODESTS_ROLLERBENCH_MODE_ACTIVE;
const int Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_ARRAYSIZE = Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_RollerbenchmodestsType_descriptor();
inline const ::std::string& Esp_status_0x243_243_RollerbenchmodestsType_Name(Esp_status_0x243_243_RollerbenchmodestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_RollerbenchmodestsType_descriptor(), value);
}
inline bool Esp_status_0x243_243_RollerbenchmodestsType_Parse(
    const ::std::string& name, Esp_status_0x243_243_RollerbenchmodestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_RollerbenchmodestsType>(
    Esp_status_0x243_243_RollerbenchmodestsType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_epberrorstatusType {
  Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_UNDEFINED = 0,
  Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_NO_ERROR = 1,
  Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_ERROR = 2,
  Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_DIAGNOSIS = 3
};
bool Esp_status_0x243_243_Esp_epberrorstatusType_IsValid(int value);
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_MIN = Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_UNDEFINED;
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_MAX = Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_DIAGNOSIS;
const int Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_ARRAYSIZE = Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epberrorstatusType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_epberrorstatusType_Name(Esp_status_0x243_243_Esp_epberrorstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_epberrorstatusType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_epberrorstatusType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_epberrorstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_epberrorstatusType>(
    Esp_status_0x243_243_Esp_epberrorstatusType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_ccswitchoffType {
  Esp_status_0x243_243_Esp_ccswitchoffType_ESP_CCSWITCHOFF_NOT_SWITCH_OFF_CRUISE_CONTROL = 0,
  Esp_status_0x243_243_Esp_ccswitchoffType_ESP_CCSWITCHOFF_SWITCH_OFF_CRUISE_CONTROL = 1
};
bool Esp_status_0x243_243_Esp_ccswitchoffType_IsValid(int value);
const Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_MIN = Esp_status_0x243_243_Esp_ccswitchoffType_ESP_CCSWITCHOFF_NOT_SWITCH_OFF_CRUISE_CONTROL;
const Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_MAX = Esp_status_0x243_243_Esp_ccswitchoffType_ESP_CCSWITCHOFF_SWITCH_OFF_CRUISE_CONTROL;
const int Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_ARRAYSIZE = Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_ccswitchoffType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_ccswitchoffType_Name(Esp_status_0x243_243_Esp_ccswitchoffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_ccswitchoffType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_ccswitchoffType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_ccswitchoffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_ccswitchoffType>(
    Esp_status_0x243_243_Esp_ccswitchoffType_descriptor(), name, value);
}
enum Esp_status_0x243_243_Esp_hdcavailableType {
  Esp_status_0x243_243_Esp_hdcavailableType_ESP_HDCAVAILABLE_AVAILABLE = 0,
  Esp_status_0x243_243_Esp_hdcavailableType_ESP_HDCAVAILABLE_NOT_AVAILABLE = 1
};
bool Esp_status_0x243_243_Esp_hdcavailableType_IsValid(int value);
const Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_MIN = Esp_status_0x243_243_Esp_hdcavailableType_ESP_HDCAVAILABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_MAX = Esp_status_0x243_243_Esp_hdcavailableType_ESP_HDCAVAILABLE_NOT_AVAILABLE;
const int Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_ARRAYSIZE = Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hdcavailableType_descriptor();
inline const ::std::string& Esp_status_0x243_243_Esp_hdcavailableType_Name(Esp_status_0x243_243_Esp_hdcavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_status_0x243_243_Esp_hdcavailableType_descriptor(), value);
}
inline bool Esp_status_0x243_243_Esp_hdcavailableType_Parse(
    const ::std::string& name, Esp_status_0x243_243_Esp_hdcavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_status_0x243_243_Esp_hdcavailableType>(
    Esp_status_0x243_243_Esp_hdcavailableType_descriptor(), name, value);
}
enum Esp_axay_0x242_242_Esp_yawratestatusType {
  Esp_axay_0x242_242_Esp_yawratestatusType_ESP_YAWRATESTATUS_OK = 0,
  Esp_axay_0x242_242_Esp_yawratestatusType_ESP_YAWRATESTATUS_FAULT = 1
};
bool Esp_axay_0x242_242_Esp_yawratestatusType_IsValid(int value);
const Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_MIN = Esp_axay_0x242_242_Esp_yawratestatusType_ESP_YAWRATESTATUS_OK;
const Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_MAX = Esp_axay_0x242_242_Esp_yawratestatusType_ESP_YAWRATESTATUS_FAULT;
const int Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_ARRAYSIZE = Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_axay_0x242_242_Esp_yawratestatusType_descriptor();
inline const ::std::string& Esp_axay_0x242_242_Esp_yawratestatusType_Name(Esp_axay_0x242_242_Esp_yawratestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_axay_0x242_242_Esp_yawratestatusType_descriptor(), value);
}
inline bool Esp_axay_0x242_242_Esp_yawratestatusType_Parse(
    const ::std::string& name, Esp_axay_0x242_242_Esp_yawratestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_axay_0x242_242_Esp_yawratestatusType>(
    Esp_axay_0x242_242_Esp_yawratestatusType_descriptor(), name, value);
}
enum Esp_axay_0x242_242_Esp_alatstatusType {
  Esp_axay_0x242_242_Esp_alatstatusType_ESP_ALATSTATUS_OK = 0,
  Esp_axay_0x242_242_Esp_alatstatusType_ESP_ALATSTATUS_FAULT = 1
};
bool Esp_axay_0x242_242_Esp_alatstatusType_IsValid(int value);
const Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_MIN = Esp_axay_0x242_242_Esp_alatstatusType_ESP_ALATSTATUS_OK;
const Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_MAX = Esp_axay_0x242_242_Esp_alatstatusType_ESP_ALATSTATUS_FAULT;
const int Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_ARRAYSIZE = Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_axay_0x242_242_Esp_alatstatusType_descriptor();
inline const ::std::string& Esp_axay_0x242_242_Esp_alatstatusType_Name(Esp_axay_0x242_242_Esp_alatstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_axay_0x242_242_Esp_alatstatusType_descriptor(), value);
}
inline bool Esp_axay_0x242_242_Esp_alatstatusType_Parse(
    const ::std::string& name, Esp_axay_0x242_242_Esp_alatstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_axay_0x242_242_Esp_alatstatusType>(
    Esp_axay_0x242_242_Esp_alatstatusType_descriptor(), name, value);
}
enum Esp_axay_0x242_242_Esp_algtstatusType {
  Esp_axay_0x242_242_Esp_algtstatusType_ESP_ALGTSTATUS_OK = 0,
  Esp_axay_0x242_242_Esp_algtstatusType_ESP_ALGTSTATUS_FAULT = 1
};
bool Esp_axay_0x242_242_Esp_algtstatusType_IsValid(int value);
const Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_MIN = Esp_axay_0x242_242_Esp_algtstatusType_ESP_ALGTSTATUS_OK;
const Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_MAX = Esp_axay_0x242_242_Esp_algtstatusType_ESP_ALGTSTATUS_FAULT;
const int Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_ARRAYSIZE = Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_axay_0x242_242_Esp_algtstatusType_descriptor();
inline const ::std::string& Esp_axay_0x242_242_Esp_algtstatusType_Name(Esp_axay_0x242_242_Esp_algtstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_axay_0x242_242_Esp_algtstatusType_descriptor(), value);
}
inline bool Esp_axay_0x242_242_Esp_algtstatusType_Parse(
    const ::std::string& name, Esp_axay_0x242_242_Esp_algtstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_axay_0x242_242_Esp_algtstatusType>(
    Esp_axay_0x242_242_Esp_algtstatusType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType {
  Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_SWM_ACCTAUGAPSETPLUS_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_SWM_ACCTAUGAPSETPLUS_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_MIN = Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_SWM_ACCTAUGAPSETPLUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_MAX = Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_SWM_ACCTAUGAPSETPLUS_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Name(Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType>(
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType {
  Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_SWM_ACCVSETMINUS_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_SWM_ACCVSETMINUS_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_SWM_ACCVSETMINUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_SWM_ACCVSETMINUS_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Name(Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType>(
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType {
  Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_SWM_SHIFTPADREQUP_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_SWM_SHIFTPADREQUP_PRESS = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_MIN = Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_SWM_SHIFTPADREQUP_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_MAX = Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_SWM_SHIFTPADREQUP_PRESS;
const int Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Name(Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType>(
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType {
  Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_SWM_ACCLIMPHOMESTS_NORMAL = 0,
  Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_SWM_ACCLIMPHOMESTS_LIMPHOME = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_MIN = Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_SWM_ACCLIMPHOMESTS_NORMAL;
const Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_MAX = Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_SWM_ACCLIMPHOMESTS_LIMPHOME;
const int Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Name(Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType>(
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType {
  Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_SWM_LANEASSISTSWITCH_PREVENT_LANEASSIST_CONTROL = 0,
  Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_SWM_LANEASSISTSWITCH_ENABLE_LANEASSIST_CONTROL = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_MIN = Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_SWM_LANEASSISTSWITCH_PREVENT_LANEASSIST_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_MAX = Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_SWM_LANEASSISTSWITCH_ENABLE_LANEASSIST_CONTROL;
const int Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Name(Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType>(
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType {
  Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_SWM_ACCTAUGAPSETMINUS_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_SWM_ACCTAUGAPSETMINUS_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_MIN = Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_SWM_ACCTAUGAPSETMINUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_MAX = Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_SWM_ACCTAUGAPSETMINUS_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Name(Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType>(
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType {
  Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_SWM_ACCVSETPLUS_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_SWM_ACCVSETPLUS_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_SWM_ACCVSETPLUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_SWM_ACCVSETPLUS_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Name(Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType>(
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType {
  Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_SWM_SHIFTPADFLT_NO_FAULT = 0,
  Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_SWM_SHIFTPADFLT_FAULT = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_MIN = Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_SWM_SHIFTPADFLT_NO_FAULT;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_MAX = Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_SWM_SHIFTPADFLT_FAULT;
const int Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Name(Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType>(
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType {
  Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_SWM_ACCDEACTIVATE_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_SWM_ACCDEACTIVATE_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_SWM_ACCDEACTIVATE_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_SWM_ACCDEACTIVATE_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Name(Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType>(
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accresumeType {
  Gw_swm_mrr_0x31b_31b_Swm_accresumeType_SWM_ACCRESUME_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accresumeType_SWM_ACCRESUME_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accresumeType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accresumeType_SWM_ACCRESUME_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accresumeType_SWM_ACCRESUME_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accresumeType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Name(Gw_swm_mrr_0x31b_31b_Swm_accresumeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accresumeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accresumeType>(
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accsetType {
  Gw_swm_mrr_0x31b_31b_Swm_accsetType_SWM_ACCSET_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accsetType_SWM_ACCSET_PRESSED = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accsetType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accsetType_SWM_ACCSET_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accsetType_SWM_ACCSET_PRESSED;
const int Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accsetType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accsetType_Name(Gw_swm_mrr_0x31b_31b_Swm_accsetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accsetType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accsetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accsetType>(
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType {
  Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_SWM_ACCENABLESWITCH_PREVENT_ACC_CONTROL = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_SWM_ACCENABLESWITCH_ENABLE_ACC_CONTROL = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_SWM_ACCENABLESWITCH_PREVENT_ACC_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_SWM_ACCENABLESWITCH_ENABLE_ACC_CONTROL;
const int Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Name(Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType>(
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType {
  Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_SWM_ACCRESUME_QT_VALID = 0,
  Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_SWM_ACCRESUME_QT_INVALID = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_MIN = Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_SWM_ACCRESUME_QT_VALID;
const Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_MAX = Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_SWM_ACCRESUME_QT_INVALID;
const int Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Name(Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType>(
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType {
  Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_SWM_TJASWITCH_PREVENT_TJA_CONTROL = 0,
  Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_SWM_TJASWITCH_ENABLE_TJA_CONTROL = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_MIN = Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_SWM_TJASWITCH_PREVENT_TJA_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_MAX = Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_SWM_TJASWITCH_ENABLE_TJA_CONTROL;
const int Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Name(Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType>(
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_descriptor(), name, value);
}
enum Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType {
  Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_SWM_SHIFTPADREQDOWN_NO_PRESS = 0,
  Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_SWM_SHIFTPADREQDOWN_PRESS = 1
};
bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_IsValid(int value);
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_MIN = Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_SWM_SHIFTPADREQDOWN_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_MAX = Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_SWM_SHIFTPADREQDOWN_PRESS;
const int Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_ARRAYSIZE = Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_descriptor();
inline const ::std::string& Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Name(Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_descriptor(), value);
}
inline bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Parse(
    const ::std::string& name, Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType>(
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_highbeamType {
  Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_highbeamType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_MIN = Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_MAX = Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_highbeamType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_highbeamType_Name(Gw_swm_body_0x31a_31a_Swm_highbeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_highbeamType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_highbeamType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_highbeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_highbeamType>(
    Gw_swm_body_0x31a_31a_Swm_highbeamType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType {
  Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPING_OFF = 0,
  Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_LOW_ACTIVATION = 1,
  Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_HIGH_ACTIVATION = 2,
  Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_MIST_WIPING_ACTIVATION = 3,
  Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_AUTO_INTERVAL_WIPING_ACTIVATION = 4,
  Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_INVALID = 7
};
bool Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_MIN = Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPING_OFF;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_MAX = Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Name(Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType>(
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType {
  Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_0 = 0,
  Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_1 = 1,
  Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_2 = 2,
  Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_3 = 3,
  Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_INVALID = 7
};
bool Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_MIN = Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_0;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_MAX = Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Name(Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType>(
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_rearfoglightType {
  Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_rearfoglightType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_MIN = Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_MAX = Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_rearfoglightType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Name(Gw_swm_body_0x31a_31a_Swm_rearfoglightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_rearfoglightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_rearfoglightType>(
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_frontfoglightType {
  Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_OFF = 0,
  Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_ON = 1,
  Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_frontfoglightType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_MIN = Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_OFF;
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_MAX = Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_frontfoglightType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Name(Gw_swm_body_0x31a_31a_Swm_frontfoglightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_frontfoglightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_frontfoglightType>(
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType {
  Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_SWM_WASHERLIMPHOMESTS_NORMAL = 0,
  Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_SWM_WASHERLIMPHOMESTS_LIMPHOME = 1
};
bool Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_MIN = Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_SWM_WASHERLIMPHOMESTS_NORMAL;
const Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_MAX = Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_SWM_WASHERLIMPHOMESTS_LIMPHOME;
const int Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Name(Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType>(
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType {
  Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_REARWIPING_OFF = 0,
  Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_REAR_WIPER_UNIFORMITY_SPEED = 1,
  Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_MIN = Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_REARWIPING_OFF;
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_MAX = Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Name(Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType>(
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_turnindicationactType {
  Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_DEFAULT = 0,
  Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_TURN_LEFT = 1,
  Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_TURN_RIGHT = 2,
  Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_turnindicationactType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_MIN = Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_DEFAULT;
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_MAX = Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_turnindicationactType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Name(Gw_swm_body_0x31a_31a_Swm_turnindicationactType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_turnindicationactType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_turnindicationactType>(
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_vol_plusType {
  Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_vol_plusType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_MIN = Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_MAX = Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_vol_plusType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_vol_plusType_Name(Gw_swm_body_0x31a_31a_Swm_vol_plusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_vol_plusType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_vol_plusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_vol_plusType>(
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_vol_minusType {
  Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_vol_minusType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_MIN = Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_MAX = Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_vol_minusType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_vol_minusType_Name(Gw_swm_body_0x31a_31a_Swm_vol_minusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_vol_minusType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_vol_minusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_vol_minusType>(
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_wechatType {
  Gw_swm_body_0x31a_31a_Swm_wechatType_SWM_WECHAT_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_wechatType_SWM_WECHAT_PRESSED = 1
};
bool Gw_swm_body_0x31a_31a_Swm_wechatType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_MIN = Gw_swm_body_0x31a_31a_Swm_wechatType_SWM_WECHAT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_MAX = Gw_swm_body_0x31a_31a_Swm_wechatType_SWM_WECHAT_PRESSED;
const int Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_wechatType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_wechatType_Name(Gw_swm_body_0x31a_31a_Swm_wechatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_wechatType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_wechatType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_wechatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_wechatType>(
    Gw_swm_body_0x31a_31a_Swm_wechatType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType {
  Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_SWM_LAMPLIMPHOMESTS_NORMAL = 0,
  Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_SWM_LAMPLIMPHOMESTS_LIMPHOME = 1
};
bool Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_MIN = Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_SWM_LAMPLIMPHOMESTS_NORMAL;
const Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_MAX = Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_SWM_LAMPLIMPHOMESTS_LIMPHOME;
const int Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Name(Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType>(
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_headlampType {
  Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_OFF = 0,
  Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_AUTOLIGHT = 1,
  Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_POSITIONLIGHT = 2,
  Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_LOWBEAM = 3,
  Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_INVALID = 4
};
bool Gw_swm_body_0x31a_31a_Swm_headlampType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_MIN = Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_OFF;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_MAX = Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_headlampType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_headlampType_Name(Gw_swm_body_0x31a_31a_Swm_headlampType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_headlampType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_headlampType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_headlampType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_headlampType>(
    Gw_swm_body_0x31a_31a_Swm_headlampType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_next_songType {
  Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_next_songType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_MIN = Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_MAX = Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_next_songType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_next_songType_Name(Gw_swm_body_0x31a_31a_Swm_next_songType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_next_songType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_next_songType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_next_songType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_next_songType>(
    Gw_swm_body_0x31a_31a_Swm_next_songType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_previous_songType {
  Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_previous_songType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_MIN = Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_MAX = Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_previous_songType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_previous_songType_Name(Gw_swm_body_0x31a_31a_Swm_previous_songType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_previous_songType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_previous_songType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_previous_songType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_previous_songType>(
    Gw_swm_body_0x31a_31a_Swm_previous_songType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_phoneType {
  Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_phoneType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_MIN = Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_MAX = Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_phoneType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_phoneType_Name(Gw_swm_body_0x31a_31a_Swm_phoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_phoneType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_phoneType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_phoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_phoneType>(
    Gw_swm_body_0x31a_31a_Swm_phoneType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_muteType {
  Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_muteType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_MIN = Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_MAX = Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_muteType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_muteType_Name(Gw_swm_body_0x31a_31a_Swm_muteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_muteType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_muteType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_muteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_muteType>(
    Gw_swm_body_0x31a_31a_Swm_muteType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_menu_rightType {
  Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_menu_rightType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_MIN = Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_MAX = Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_rightType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_menu_rightType_Name(Gw_swm_body_0x31a_31a_Swm_menu_rightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_menu_rightType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_menu_rightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_menu_rightType>(
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_menu_leftType {
  Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_menu_leftType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_MIN = Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_MAX = Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_leftType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_menu_leftType_Name(Gw_swm_body_0x31a_31a_Swm_menu_leftType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_menu_leftType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_menu_leftType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_menu_leftType>(
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_menu_downType {
  Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_menu_downType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_MIN = Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_MAX = Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_downType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_menu_downType_Name(Gw_swm_body_0x31a_31a_Swm_menu_downType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_menu_downType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_menu_downType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_menu_downType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_menu_downType>(
    Gw_swm_body_0x31a_31a_Swm_menu_downType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_menu_upType {
  Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_menu_upType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_MIN = Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_MAX = Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_upType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_menu_upType_Name(Gw_swm_body_0x31a_31a_Swm_menu_upType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_menu_upType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_menu_upType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_menu_upType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_menu_upType>(
    Gw_swm_body_0x31a_31a_Swm_menu_upType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_fwasherstsType {
  Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_fwasherstsType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_MIN = Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_MAX = Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_fwasherstsType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Name(Gw_swm_body_0x31a_31a_Swm_fwasherstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_fwasherstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_fwasherstsType>(
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_menu_returnType {
  Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_menu_returnType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_MIN = Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_MAX = Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_returnType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_menu_returnType_Name(Gw_swm_body_0x31a_31a_Swm_menu_returnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_menu_returnType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_menu_returnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_menu_returnType>(
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_menu_confirmType {
  Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_menu_confirmType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_MIN = Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_MAX = Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_confirmType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Name(Gw_swm_body_0x31a_31a_Swm_menu_confirmType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_menu_confirmType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_menu_confirmType>(
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_rwasherstsType {
  Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_rwasherstsType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_MIN = Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_MAX = Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_rwasherstsType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Name(Gw_swm_body_0x31a_31a_Swm_rwasherstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_rwasherstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_rwasherstsType>(
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_descriptor(), name, value);
}
enum Gw_swm_body_0x31a_31a_Swm_flashlightstsType {
  Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_RELEASED = 0,
  Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_PRESSED = 1,
  Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_RESERVED = 2,
  Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_INVALID = 3
};
bool Gw_swm_body_0x31a_31a_Swm_flashlightstsType_IsValid(int value);
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_MIN = Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_MAX = Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_INVALID;
const int Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_ARRAYSIZE = Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_flashlightstsType_descriptor();
inline const ::std::string& Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Name(Gw_swm_body_0x31a_31a_Swm_flashlightstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_descriptor(), value);
}
inline bool Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Parse(
    const ::std::string& name, Gw_swm_body_0x31a_31a_Swm_flashlightstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_swm_body_0x31a_31a_Swm_flashlightstsType>(
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_descriptor(), name, value);
}
enum Gw_ems_tq_0x101_101_Ems_engspeederrorType {
  Gw_ems_tq_0x101_101_Ems_engspeederrorType_EMS_ENGSPEEDERROR_NOERROR = 0,
  Gw_ems_tq_0x101_101_Ems_engspeederrorType_EMS_ENGSPEEDERROR_ERROR = 1
};
bool Gw_ems_tq_0x101_101_Ems_engspeederrorType_IsValid(int value);
const Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_MIN = Gw_ems_tq_0x101_101_Ems_engspeederrorType_EMS_ENGSPEEDERROR_NOERROR;
const Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_MAX = Gw_ems_tq_0x101_101_Ems_engspeederrorType_EMS_ENGSPEEDERROR_ERROR;
const int Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_ARRAYSIZE = Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_tq_0x101_101_Ems_engspeederrorType_descriptor();
inline const ::std::string& Gw_ems_tq_0x101_101_Ems_engspeederrorType_Name(Gw_ems_tq_0x101_101_Ems_engspeederrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_descriptor(), value);
}
inline bool Gw_ems_tq_0x101_101_Ems_engspeederrorType_Parse(
    const ::std::string& name, Gw_ems_tq_0x101_101_Ems_engspeederrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_tq_0x101_101_Ems_engspeederrorType>(
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_apa_gearboxenableType {
  Esp_vlc_0x223_223_Esp_apa_gearboxenableType_ESP_APA_GEARBOXENABLE_NO_REQUEST = 0,
  Esp_vlc_0x223_223_Esp_apa_gearboxenableType_ESP_APA_GEARBOXENABLE_GEAR_SHIFT_REQUEST = 1
};
bool Esp_vlc_0x223_223_Esp_apa_gearboxenableType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_MIN = Esp_vlc_0x223_223_Esp_apa_gearboxenableType_ESP_APA_GEARBOXENABLE_NO_REQUEST;
const Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_MAX = Esp_vlc_0x223_223_Esp_apa_gearboxenableType_ESP_APA_GEARBOXENABLE_GEAR_SHIFT_REQUEST;
const int Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_apa_gearboxenableType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Name(Esp_vlc_0x223_223_Esp_apa_gearboxenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_apa_gearboxenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_apa_gearboxenableType>(
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_target_gear_requestType {
  Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_NO_REQUEST = 0,
  Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_PARK = 1,
  Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_REVERSE = 2,
  Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_NEUTRAL = 3,
  Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_DRIVE = 4
};
bool Esp_vlc_0x223_223_Esp_target_gear_requestType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_MIN = Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_NO_REQUEST;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_MAX = Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_DRIVE;
const int Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_target_gear_requestType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_target_gear_requestType_Name(Esp_vlc_0x223_223_Esp_target_gear_requestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_target_gear_requestType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_target_gear_requestType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_target_gear_requestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_target_gear_requestType>(
    Esp_vlc_0x223_223_Esp_target_gear_requestType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_vlc_apactiveType {
  Esp_vlc_0x223_223_Esp_vlc_apactiveType_ESP_VLC_APACTIVE_NOT_ACTIVE = 0,
  Esp_vlc_0x223_223_Esp_vlc_apactiveType_ESP_VLC_APACTIVE_ACTIVE = 1
};
bool Esp_vlc_0x223_223_Esp_vlc_apactiveType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_MIN = Esp_vlc_0x223_223_Esp_vlc_apactiveType_ESP_VLC_APACTIVE_NOT_ACTIVE;
const Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_MAX = Esp_vlc_0x223_223_Esp_vlc_apactiveType_ESP_VLC_APACTIVE_ACTIVE;
const int Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlc_apactiveType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_vlc_apactiveType_Name(Esp_vlc_0x223_223_Esp_vlc_apactiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_vlc_apactiveType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_vlc_apactiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_vlc_apactiveType>(
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_pam_lc_failurestsType {
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_NO_ERROR = 0,
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_VEHICLE_BLOCKED = 1,
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARPOSITION = 2,
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_EPB_ACTION = 3,
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_ACCPEDALINTERVENTION = 4,
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARINTERVENTION = 5,
  Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_ERROR = 7
};
bool Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_MIN = Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_NO_ERROR;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_MAX = Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_ERROR;
const int Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Name(Esp_vlc_0x223_223_Esp_pam_lc_failurestsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_pam_lc_failurestsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_pam_lc_failurestsType>(
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_pam_lc_statusType {
  Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_OFF = 0,
  Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_STANDBY = 1,
  Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_ACTIVE_AUTOMATICPARK = 4,
  Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_ERROR = 10
};
bool Esp_vlc_0x223_223_Esp_pam_lc_statusType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_MIN = Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_OFF;
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_MAX = Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_ERROR;
const int Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_pam_lc_statusType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_pam_lc_statusType_Name(Esp_vlc_0x223_223_Esp_pam_lc_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_pam_lc_statusType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_pam_lc_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_pam_lc_statusType>(
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_vlc_activeType {
  Esp_vlc_0x223_223_Esp_vlc_activeType_ESP_VLC_ACTIVE_NOT_ACTIVE = 0,
  Esp_vlc_0x223_223_Esp_vlc_activeType_ESP_VLC_ACTIVE_ACTIVE = 1
};
bool Esp_vlc_0x223_223_Esp_vlc_activeType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_MIN = Esp_vlc_0x223_223_Esp_vlc_activeType_ESP_VLC_ACTIVE_NOT_ACTIVE;
const Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_MAX = Esp_vlc_0x223_223_Esp_vlc_activeType_ESP_VLC_ACTIVE_ACTIVE;
const int Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlc_activeType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_vlc_activeType_Name(Esp_vlc_0x223_223_Esp_vlc_activeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_vlc_activeType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_vlc_activeType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_vlc_activeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_vlc_activeType>(
    Esp_vlc_0x223_223_Esp_vlc_activeType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_vlc_availableType {
  Esp_vlc_0x223_223_Esp_vlc_availableType_ESP_VLC_AVAILABLE_NOT_AVAILABLE = 0,
  Esp_vlc_0x223_223_Esp_vlc_availableType_ESP_VLC_AVAILABLE_AVAILABLE = 1
};
bool Esp_vlc_0x223_223_Esp_vlc_availableType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_MIN = Esp_vlc_0x223_223_Esp_vlc_availableType_ESP_VLC_AVAILABLE_NOT_AVAILABLE;
const Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_MAX = Esp_vlc_0x223_223_Esp_vlc_availableType_ESP_VLC_AVAILABLE_AVAILABLE;
const int Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlc_availableType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_vlc_availableType_Name(Esp_vlc_0x223_223_Esp_vlc_availableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_vlc_availableType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_vlc_availableType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_vlc_availableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_vlc_availableType>(
    Esp_vlc_0x223_223_Esp_vlc_availableType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_vlcapa_availableType {
  Esp_vlc_0x223_223_Esp_vlcapa_availableType_ESP_VLCAPA_AVAILABLE_NOT_AVAILABLE = 0,
  Esp_vlc_0x223_223_Esp_vlcapa_availableType_ESP_VLCAPA_AVAILABLE_AVAILABLE = 1
};
bool Esp_vlc_0x223_223_Esp_vlcapa_availableType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_MIN = Esp_vlc_0x223_223_Esp_vlcapa_availableType_ESP_VLCAPA_AVAILABLE_NOT_AVAILABLE;
const Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_MAX = Esp_vlc_0x223_223_Esp_vlcapa_availableType_ESP_VLCAPA_AVAILABLE_AVAILABLE;
const int Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlcapa_availableType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_vlcapa_availableType_Name(Esp_vlc_0x223_223_Esp_vlcapa_availableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_vlcapa_availableType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_vlcapa_availableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_vlcapa_availableType>(
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_descriptor(), name, value);
}
enum Esp_vlc_0x223_223_Esp_vlcengtorqreqactType {
  Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_ESP_VLCENGTORQREQACT_VALID = 0,
  Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_ESP_VLCENGTORQREQACT_INVALID = 1
};
bool Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_IsValid(int value);
const Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_MIN = Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_ESP_VLCENGTORQREQACT_VALID;
const Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_MAX = Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_ESP_VLCENGTORQREQACT_INVALID;
const int Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_ARRAYSIZE = Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_descriptor();
inline const ::std::string& Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Name(Esp_vlc_0x223_223_Esp_vlcengtorqreqactType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_descriptor(), value);
}
inline bool Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Parse(
    const ::std::string& name, Esp_vlc_0x223_223_Esp_vlcengtorqreqactType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_vlc_0x223_223_Esp_vlcengtorqreqactType>(
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_descriptor(), name, value);
}
enum Gw_ems_whltq_0x107_107_Ems_kickdownType {
  Gw_ems_whltq_0x107_107_Ems_kickdownType_EMS_KICKDOWN_NOTACTIVE = 0,
  Gw_ems_whltq_0x107_107_Ems_kickdownType_EMS_KICKDOWN_ACTIVE = 1
};
bool Gw_ems_whltq_0x107_107_Ems_kickdownType_IsValid(int value);
const Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_MIN = Gw_ems_whltq_0x107_107_Ems_kickdownType_EMS_KICKDOWN_NOTACTIVE;
const Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_MAX = Gw_ems_whltq_0x107_107_Ems_kickdownType_EMS_KICKDOWN_ACTIVE;
const int Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_ARRAYSIZE = Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_whltq_0x107_107_Ems_kickdownType_descriptor();
inline const ::std::string& Gw_ems_whltq_0x107_107_Ems_kickdownType_Name(Gw_ems_whltq_0x107_107_Ems_kickdownType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_whltq_0x107_107_Ems_kickdownType_descriptor(), value);
}
inline bool Gw_ems_whltq_0x107_107_Ems_kickdownType_Parse(
    const ::std::string& name, Gw_ems_whltq_0x107_107_Ems_kickdownType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_whltq_0x107_107_Ems_kickdownType>(
    Gw_ems_whltq_0x107_107_Ems_kickdownType_descriptor(), name, value);
}
enum Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType {
  Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_EMS_ACCPEDALRATIOERROR_NOERROR = 0,
  Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_EMS_ACCPEDALRATIOERROR_ERROR = 1
};
bool Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_IsValid(int value);
const Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_MIN = Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_EMS_ACCPEDALRATIOERROR_NOERROR;
const Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_MAX = Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_EMS_ACCPEDALRATIOERROR_ERROR;
const int Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_ARRAYSIZE = Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_descriptor();
inline const ::std::string& Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Name(Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_descriptor(), value);
}
inline bool Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Parse(
    const ::std::string& name, Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType>(
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_descriptor(), name, value);
}
enum Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType {
  Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_NOTPRESSED = 0,
  Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_PRESSED = 1,
  Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_RESERVED = 2,
  Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_ERROR = 3
};
bool Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_IsValid(int value);
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_MIN = Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_NOTPRESSED;
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_MAX = Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_ERROR;
const int Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_ARRAYSIZE = Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_descriptor();
inline const ::std::string& Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Name(Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_descriptor(), value);
}
inline bool Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Parse(
    const ::std::string& name, Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType>(
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_vehspddirectionType {
  Abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_FORWARD = 0,
  Abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_BACKWARD = 1
};
bool Abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(int value);
const Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MIN = Abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_FORWARD;
const Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MAX = Abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_BACKWARD;
const int Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_ARRAYSIZE = Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_vehspddirectionType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_vehspddirectionType_Name(Abs_sts_0x221_221_Abs_vehspddirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_vehspddirectionType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_vehspddirectionType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_vehspddirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_vehspddirectionType>(
    Abs_sts_0x221_221_Abs_vehspddirectionType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_ebdflgfltType {
  Abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_NO_FAILURE = 0,
  Abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_FAILURE = 1
};
bool Abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(int value);
const Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MIN = Abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_NO_FAILURE;
const Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MAX = Abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_FAILURE;
const int Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_ARRAYSIZE = Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_ebdflgfltType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_ebdflgfltType_Name(Abs_sts_0x221_221_Abs_ebdflgfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_ebdflgfltType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_ebdflgfltType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_ebdflgfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_ebdflgfltType>(
    Abs_sts_0x221_221_Abs_ebdflgfltType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_absflgfltType {
  Abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_NO_FAILURE = 0,
  Abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_FAILURE = 1
};
bool Abs_sts_0x221_221_Abs_absflgfltType_IsValid(int value);
const Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MIN = Abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_NO_FAILURE;
const Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MAX = Abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_FAILURE;
const int Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_ARRAYSIZE = Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_absflgfltType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_absflgfltType_Name(Abs_sts_0x221_221_Abs_absflgfltType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_absflgfltType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_absflgfltType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_absflgfltType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_absflgfltType>(
    Abs_sts_0x221_221_Abs_absflgfltType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_absctrlactvType {
  Abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_NOT_ACTIVE = 0,
  Abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_ACTIVE = 1
};
bool Abs_sts_0x221_221_Abs_absctrlactvType_IsValid(int value);
const Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MIN = Abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_NOT_ACTIVE;
const Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MAX = Abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_ACTIVE;
const int Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_ARRAYSIZE = Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_absctrlactvType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_absctrlactvType_Name(Abs_sts_0x221_221_Abs_absctrlactvType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_absctrlactvType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_absctrlactvType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_absctrlactvType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_absctrlactvType>(
    Abs_sts_0x221_221_Abs_absctrlactvType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType {
  Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_VALID = 0,
  Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_INVALID = 1
};
bool Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(int value);
const Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MIN = Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_VALID;
const Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MAX = Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_INVALID;
const int Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_ARRAYSIZE = Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Name(Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType>(
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_whlmilgfrntristatusType {
  Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_VALID = 0,
  Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_INVALID = 1
};
bool Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(int value);
const Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MIN = Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_VALID;
const Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MAX = Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_INVALID;
const int Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_ARRAYSIZE = Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Name(Abs_sts_0x221_221_Abs_whlmilgfrntristatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_whlmilgfrntristatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_whlmilgfrntristatusType>(
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor(), name, value);
}
enum Abs_sts_0x221_221_Abs_vehspdlgtstatusType {
  Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_VALID = 0,
  Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INVALID = 1,
  Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INIT = 2
};
bool Abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(int value);
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MIN = Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_VALID;
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MAX = Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INIT;
const int Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_ARRAYSIZE = Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor();
inline const ::std::string& Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Name(Abs_sts_0x221_221_Abs_vehspdlgtstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor(), value);
}
inline bool Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Parse(
    const ::std::string& name, Abs_sts_0x221_221_Abs_vehspdlgtstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Abs_sts_0x221_221_Abs_vehspdlgtstatusType>(
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor(), name, value);
}
enum Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType {
  Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_UNKNOWN = 0,
  Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_CAR = 1,
  Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_TRUCK = 2,
  Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_TWO_WHEELER = 3
};
bool Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_IsValid(int value);
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_MIN = Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_MAX = Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_TWO_WHEELER;
const int Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_ARRAYSIZE = Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_descriptor();
inline const ::std::string& Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Name(Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_descriptor(), value);
}
inline bool Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Parse(
    const ::std::string& name, Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType>(
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_descriptor(), name, value);
}
enum Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType {
  Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_UNKNOWN = 0,
  Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_CAR = 1,
  Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_TRUCK = 2,
  Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_TWO_WHEELER = 3
};
bool Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_IsValid(int value);
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_MIN = Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_MAX = Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_TWO_WHEELER;
const int Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_ARRAYSIZE = Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_descriptor();
inline const ::std::string& Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Name(Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_descriptor(), value);
}
inline bool Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Parse(
    const ::std::string& name, Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType>(
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_descriptor(), name, value);
}
enum Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType {
  Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_MRR_LEFTTARGRTDETECTION_NOT_DECTECTED = 0,
  Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_MRR_LEFTTARGRTDETECTION_DECTECTED = 1
};
bool Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_IsValid(int value);
const Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_MIN = Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_MRR_LEFTTARGRTDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_MAX = Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_MRR_LEFTTARGRTDETECTION_DECTECTED;
const int Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_ARRAYSIZE = Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_descriptor();
inline const ::std::string& Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Name(Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_descriptor(), value);
}
inline bool Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Parse(
    const ::std::string& name, Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType>(
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_descriptor(), name, value);
}
enum Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType {
  Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_MRR_RIGHTTARGRTDETECTION_NOT_DECTECTED = 0,
  Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_MRR_RIGHTTARGRTDETECTION_DECTECTED = 1
};
bool Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_IsValid(int value);
const Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_MIN = Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_MRR_RIGHTTARGRTDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_MAX = Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_MRR_RIGHTTARGRTDETECTION_DECTECTED;
const int Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_ARRAYSIZE = Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_descriptor();
inline const ::std::string& Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Name(Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_descriptor(), value);
}
inline bool Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Parse(
    const ::std::string& name, Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType>(
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_descriptor(), name, value);
}
enum Mrr_0x246_246_TaugapsetType {
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_0 = 0,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_1 = 1,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_2 = 2,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_3 = 3,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_4 = 4,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_5 = 5,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_6 = 6,
  Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_7 = 7
};
bool Mrr_0x246_246_TaugapsetType_IsValid(int value);
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246_TaugapsetType_TaugapsetType_MIN = Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_0;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246_TaugapsetType_TaugapsetType_MAX = Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_7;
const int Mrr_0x246_246_TaugapsetType_TaugapsetType_ARRAYSIZE = Mrr_0x246_246_TaugapsetType_TaugapsetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_TaugapsetType_descriptor();
inline const ::std::string& Mrr_0x246_246_TaugapsetType_Name(Mrr_0x246_246_TaugapsetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_TaugapsetType_descriptor(), value);
}
inline bool Mrr_0x246_246_TaugapsetType_Parse(
    const ::std::string& name, Mrr_0x246_246_TaugapsetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_TaugapsetType>(
    Mrr_0x246_246_TaugapsetType_descriptor(), name, value);
}
enum Mrr_0x246_246_DxtarobjType {
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_0 = 0,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_1 = 1,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_2 = 2,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_3 = 3,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_4 = 4,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_5 = 5,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_6 = 6,
  Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_7 = 7
};
bool Mrr_0x246_246_DxtarobjType_IsValid(int value);
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246_DxtarobjType_DxtarobjType_MIN = Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_0;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246_DxtarobjType_DxtarobjType_MAX = Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_7;
const int Mrr_0x246_246_DxtarobjType_DxtarobjType_ARRAYSIZE = Mrr_0x246_246_DxtarobjType_DxtarobjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_DxtarobjType_descriptor();
inline const ::std::string& Mrr_0x246_246_DxtarobjType_Name(Mrr_0x246_246_DxtarobjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_DxtarobjType_descriptor(), value);
}
inline bool Mrr_0x246_246_DxtarobjType_Parse(
    const ::std::string& name, Mrr_0x246_246_DxtarobjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_DxtarobjType>(
    Mrr_0x246_246_DxtarobjType_descriptor(), name, value);
}
enum Mrr_0x246_246_Acchmi_modeType {
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_OFF_MODE = 0,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_PASSIVE_MODE = 1,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_STAND_BY_MODE = 2,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_ACTIVE_CONTROL_MODE = 3,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_BRAKE_ONLY_MODE = 4,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_OVERRIDE = 5,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_STANDSTILL = 6,
  Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_FAILURE_MODE = 7
};
bool Mrr_0x246_246_Acchmi_modeType_IsValid(int value);
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_MIN = Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_OFF_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_MAX = Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_FAILURE_MODE;
const int Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_ARRAYSIZE = Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Acchmi_modeType_descriptor();
inline const ::std::string& Mrr_0x246_246_Acchmi_modeType_Name(Mrr_0x246_246_Acchmi_modeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Acchmi_modeType_descriptor(), value);
}
inline bool Mrr_0x246_246_Acchmi_modeType_Parse(
    const ::std::string& name, Mrr_0x246_246_Acchmi_modeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Acchmi_modeType>(
    Mrr_0x246_246_Acchmi_modeType_descriptor(), name, value);
}
enum Mrr_0x246_246_AccfailinfoType {
  Mrr_0x246_246_AccfailinfoType_ACCFAILINFO_NO_ERROR = 0,
  Mrr_0x246_246_AccfailinfoType_ACCFAILINFO_ERROR = 1
};
bool Mrr_0x246_246_AccfailinfoType_IsValid(int value);
const Mrr_0x246_246_AccfailinfoType Mrr_0x246_246_AccfailinfoType_AccfailinfoType_MIN = Mrr_0x246_246_AccfailinfoType_ACCFAILINFO_NO_ERROR;
const Mrr_0x246_246_AccfailinfoType Mrr_0x246_246_AccfailinfoType_AccfailinfoType_MAX = Mrr_0x246_246_AccfailinfoType_ACCFAILINFO_ERROR;
const int Mrr_0x246_246_AccfailinfoType_AccfailinfoType_ARRAYSIZE = Mrr_0x246_246_AccfailinfoType_AccfailinfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_AccfailinfoType_descriptor();
inline const ::std::string& Mrr_0x246_246_AccfailinfoType_Name(Mrr_0x246_246_AccfailinfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_AccfailinfoType_descriptor(), value);
}
inline bool Mrr_0x246_246_AccfailinfoType_Parse(
    const ::std::string& name, Mrr_0x246_246_AccfailinfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_AccfailinfoType>(
    Mrr_0x246_246_AccfailinfoType_descriptor(), name, value);
}
enum Mrr_0x246_246_TakeoverreqType {
  Mrr_0x246_246_TakeoverreqType_TAKEOVERREQ_NO_TAKEOVER_REQUEST = 0,
  Mrr_0x246_246_TakeoverreqType_TAKEOVERREQ_VALID_TAKEOVER_REQUEST = 1
};
bool Mrr_0x246_246_TakeoverreqType_IsValid(int value);
const Mrr_0x246_246_TakeoverreqType Mrr_0x246_246_TakeoverreqType_TakeoverreqType_MIN = Mrr_0x246_246_TakeoverreqType_TAKEOVERREQ_NO_TAKEOVER_REQUEST;
const Mrr_0x246_246_TakeoverreqType Mrr_0x246_246_TakeoverreqType_TakeoverreqType_MAX = Mrr_0x246_246_TakeoverreqType_TAKEOVERREQ_VALID_TAKEOVER_REQUEST;
const int Mrr_0x246_246_TakeoverreqType_TakeoverreqType_ARRAYSIZE = Mrr_0x246_246_TakeoverreqType_TakeoverreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_TakeoverreqType_descriptor();
inline const ::std::string& Mrr_0x246_246_TakeoverreqType_Name(Mrr_0x246_246_TakeoverreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_TakeoverreqType_descriptor(), value);
}
inline bool Mrr_0x246_246_TakeoverreqType_Parse(
    const ::std::string& name, Mrr_0x246_246_TakeoverreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_TakeoverreqType>(
    Mrr_0x246_246_TakeoverreqType_descriptor(), name, value);
}
enum Mrr_0x246_246_Mrr_fcw_sensitiveType {
  Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_UNAVAILABLE = 0,
  Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE = 1,
  Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL2_NORMAL = 2,
  Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE = 3
};
bool Mrr_0x246_246_Mrr_fcw_sensitiveType_IsValid(int value);
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_MIN = Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_UNAVAILABLE;
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_MAX = Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE;
const int Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_ARRAYSIZE = Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Mrr_fcw_sensitiveType_descriptor();
inline const ::std::string& Mrr_0x246_246_Mrr_fcw_sensitiveType_Name(Mrr_0x246_246_Mrr_fcw_sensitiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Mrr_fcw_sensitiveType_descriptor(), value);
}
inline bool Mrr_0x246_246_Mrr_fcw_sensitiveType_Parse(
    const ::std::string& name, Mrr_0x246_246_Mrr_fcw_sensitiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Mrr_fcw_sensitiveType>(
    Mrr_0x246_246_Mrr_fcw_sensitiveType_descriptor(), name, value);
}
enum Mrr_0x246_246_Aeb_stateType {
  Mrr_0x246_246_Aeb_stateType_AEB_STATE_UNAVAILABLE = 0,
  Mrr_0x246_246_Aeb_stateType_AEB_STATE_OFF = 1,
  Mrr_0x246_246_Aeb_stateType_AEB_STATE_STANDBY = 2,
  Mrr_0x246_246_Aeb_stateType_AEB_STATE_ACTIVE_NO_INTERVENTION = 3,
  Mrr_0x246_246_Aeb_stateType_AEB_STATE_ACTIVE = 4,
  Mrr_0x246_246_Aeb_stateType_AEB_STATE_RESERVED = 5
};
bool Mrr_0x246_246_Aeb_stateType_IsValid(int value);
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246_Aeb_stateType_Aeb_stateType_MIN = Mrr_0x246_246_Aeb_stateType_AEB_STATE_UNAVAILABLE;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246_Aeb_stateType_Aeb_stateType_MAX = Mrr_0x246_246_Aeb_stateType_AEB_STATE_RESERVED;
const int Mrr_0x246_246_Aeb_stateType_Aeb_stateType_ARRAYSIZE = Mrr_0x246_246_Aeb_stateType_Aeb_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Aeb_stateType_descriptor();
inline const ::std::string& Mrr_0x246_246_Aeb_stateType_Name(Mrr_0x246_246_Aeb_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Aeb_stateType_descriptor(), value);
}
inline bool Mrr_0x246_246_Aeb_stateType_Parse(
    const ::std::string& name, Mrr_0x246_246_Aeb_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Aeb_stateType>(
    Mrr_0x246_246_Aeb_stateType_descriptor(), name, value);
}
enum Mrr_0x246_246_Acc_startstop_inforType {
  Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STOPALLOWED = 0,
  Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STOPFORBIDDEN = 1,
  Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STARTREQUEST = 2,
  Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_SYSTEMFAILURE = 3
};
bool Mrr_0x246_246_Acc_startstop_inforType_IsValid(int value);
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_MIN = Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STOPALLOWED;
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_MAX = Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_SYSTEMFAILURE;
const int Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_ARRAYSIZE = Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Acc_startstop_inforType_descriptor();
inline const ::std::string& Mrr_0x246_246_Acc_startstop_inforType_Name(Mrr_0x246_246_Acc_startstop_inforType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Acc_startstop_inforType_descriptor(), value);
}
inline bool Mrr_0x246_246_Acc_startstop_inforType_Parse(
    const ::std::string& name, Mrr_0x246_246_Acc_startstop_inforType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Acc_startstop_inforType>(
    Mrr_0x246_246_Acc_startstop_inforType_descriptor(), name, value);
}
enum Mrr_0x246_246_Fcw_prewarningType {
  Mrr_0x246_246_Fcw_prewarningType_FCW_PREWARNING_NO_WARNING = 0,
  Mrr_0x246_246_Fcw_prewarningType_FCW_PREWARNING_WARNING = 1
};
bool Mrr_0x246_246_Fcw_prewarningType_IsValid(int value);
const Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_MIN = Mrr_0x246_246_Fcw_prewarningType_FCW_PREWARNING_NO_WARNING;
const Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_MAX = Mrr_0x246_246_Fcw_prewarningType_FCW_PREWARNING_WARNING;
const int Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_ARRAYSIZE = Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Fcw_prewarningType_descriptor();
inline const ::std::string& Mrr_0x246_246_Fcw_prewarningType_Name(Mrr_0x246_246_Fcw_prewarningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Fcw_prewarningType_descriptor(), value);
}
inline bool Mrr_0x246_246_Fcw_prewarningType_Parse(
    const ::std::string& name, Mrr_0x246_246_Fcw_prewarningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Fcw_prewarningType>(
    Mrr_0x246_246_Fcw_prewarningType_descriptor(), name, value);
}
enum Mrr_0x246_246_Fcw_latentwarningType {
  Mrr_0x246_246_Fcw_latentwarningType_FCW_LATENTWARNING_NO_WARNING = 0,
  Mrr_0x246_246_Fcw_latentwarningType_FCW_LATENTWARNING_WARNING = 1
};
bool Mrr_0x246_246_Fcw_latentwarningType_IsValid(int value);
const Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_MIN = Mrr_0x246_246_Fcw_latentwarningType_FCW_LATENTWARNING_NO_WARNING;
const Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_MAX = Mrr_0x246_246_Fcw_latentwarningType_FCW_LATENTWARNING_WARNING;
const int Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_ARRAYSIZE = Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Fcw_latentwarningType_descriptor();
inline const ::std::string& Mrr_0x246_246_Fcw_latentwarningType_Name(Mrr_0x246_246_Fcw_latentwarningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Fcw_latentwarningType_descriptor(), value);
}
inline bool Mrr_0x246_246_Fcw_latentwarningType_Parse(
    const ::std::string& name, Mrr_0x246_246_Fcw_latentwarningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Fcw_latentwarningType>(
    Mrr_0x246_246_Fcw_latentwarningType_descriptor(), name, value);
}
enum Mrr_0x246_246_Fcw_stateType {
  Mrr_0x246_246_Fcw_stateType_FCW_STATE_UNAVAILABLE = 0,
  Mrr_0x246_246_Fcw_stateType_FCW_STATE_OFF = 1,
  Mrr_0x246_246_Fcw_stateType_FCW_STATE_STANDBY = 2,
  Mrr_0x246_246_Fcw_stateType_FCW_STATE_ACTIVE_NO_INTERVENTION = 3,
  Mrr_0x246_246_Fcw_stateType_FCW_STATE_ACTIVE = 4,
  Mrr_0x246_246_Fcw_stateType_FCW_STATE_RESERVED = 5
};
bool Mrr_0x246_246_Fcw_stateType_IsValid(int value);
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246_Fcw_stateType_Fcw_stateType_MIN = Mrr_0x246_246_Fcw_stateType_FCW_STATE_UNAVAILABLE;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246_Fcw_stateType_Fcw_stateType_MAX = Mrr_0x246_246_Fcw_stateType_FCW_STATE_RESERVED;
const int Mrr_0x246_246_Fcw_stateType_Fcw_stateType_ARRAYSIZE = Mrr_0x246_246_Fcw_stateType_Fcw_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Fcw_stateType_descriptor();
inline const ::std::string& Mrr_0x246_246_Fcw_stateType_Name(Mrr_0x246_246_Fcw_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_Fcw_stateType_descriptor(), value);
}
inline bool Mrr_0x246_246_Fcw_stateType_Parse(
    const ::std::string& name, Mrr_0x246_246_Fcw_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_Fcw_stateType>(
    Mrr_0x246_246_Fcw_stateType_descriptor(), name, value);
}
enum Mrr_0x246_246_TextinfoType {
  Mrr_0x246_246_TextinfoType_TEXTINFO_NO_DISPLAY = 0,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_IS_SWITCHED_ON = 1,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_IS_SWITCHED_OFF = 2,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_IS_CANCELLED = 3,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_ACTIVE = 4,
  Mrr_0x246_246_TextinfoType_TEXTINFO_MRR_BLINDNESS = 5,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_AND_PEBS_ERROR = 6,
  Mrr_0x246_246_TextinfoType_TEXTINFO_EPB_ACTIVATE = 7,
  Mrr_0x246_246_TextinfoType_TEXTINFO_NO_FORWARD_GEAR = 8,
  Mrr_0x246_246_TextinfoType_TEXTINFO_SEATBELT_UNBUCKLED = 9,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ESP_OFF = 10,
  Mrr_0x246_246_TextinfoType_TEXTINFO_SPEED_OVER_150KPH = 11,
  Mrr_0x246_246_TextinfoType_TEXTINFO_DOOR_OPEN = 12,
  Mrr_0x246_246_TextinfoType_TEXTINFO_OVERRIDE = 13,
  Mrr_0x246_246_TextinfoType_TEXTINFO_ESP_ERROR = 14,
  Mrr_0x246_246_TextinfoType_TEXTINFO_UNCALIBRATED = 15
};
bool Mrr_0x246_246_TextinfoType_IsValid(int value);
const Mrr_0x246_246_TextinfoType Mrr_0x246_246_TextinfoType_TextinfoType_MIN = Mrr_0x246_246_TextinfoType_TEXTINFO_NO_DISPLAY;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246_TextinfoType_TextinfoType_MAX = Mrr_0x246_246_TextinfoType_TEXTINFO_UNCALIBRATED;
const int Mrr_0x246_246_TextinfoType_TextinfoType_ARRAYSIZE = Mrr_0x246_246_TextinfoType_TextinfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_TextinfoType_descriptor();
inline const ::std::string& Mrr_0x246_246_TextinfoType_Name(Mrr_0x246_246_TextinfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_TextinfoType_descriptor(), value);
}
inline bool Mrr_0x246_246_TextinfoType_Parse(
    const ::std::string& name, Mrr_0x246_246_TextinfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_TextinfoType>(
    Mrr_0x246_246_TextinfoType_descriptor(), name, value);
}
enum Mrr_0x246_246_VsetdisType {
  Mrr_0x246_246_VsetdisType_VSETDIS_INVALID = 511
};
bool Mrr_0x246_246_VsetdisType_IsValid(int value);
const Mrr_0x246_246_VsetdisType Mrr_0x246_246_VsetdisType_VsetdisType_MIN = Mrr_0x246_246_VsetdisType_VSETDIS_INVALID;
const Mrr_0x246_246_VsetdisType Mrr_0x246_246_VsetdisType_VsetdisType_MAX = Mrr_0x246_246_VsetdisType_VSETDIS_INVALID;
const int Mrr_0x246_246_VsetdisType_VsetdisType_ARRAYSIZE = Mrr_0x246_246_VsetdisType_VsetdisType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_VsetdisType_descriptor();
inline const ::std::string& Mrr_0x246_246_VsetdisType_Name(Mrr_0x246_246_VsetdisType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_VsetdisType_descriptor(), value);
}
inline bool Mrr_0x246_246_VsetdisType_Parse(
    const ::std::string& name, Mrr_0x246_246_VsetdisType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_VsetdisType>(
    Mrr_0x246_246_VsetdisType_descriptor(), name, value);
}
enum Mrr_0x246_246_ObjvalidType {
  Mrr_0x246_246_ObjvalidType_OBJVALID_NO_OBJECT = 0,
  Mrr_0x246_246_ObjvalidType_OBJVALID_TARGET_OBJECT_DETECTED = 1
};
bool Mrr_0x246_246_ObjvalidType_IsValid(int value);
const Mrr_0x246_246_ObjvalidType Mrr_0x246_246_ObjvalidType_ObjvalidType_MIN = Mrr_0x246_246_ObjvalidType_OBJVALID_NO_OBJECT;
const Mrr_0x246_246_ObjvalidType Mrr_0x246_246_ObjvalidType_ObjvalidType_MAX = Mrr_0x246_246_ObjvalidType_OBJVALID_TARGET_OBJECT_DETECTED;
const int Mrr_0x246_246_ObjvalidType_ObjvalidType_ARRAYSIZE = Mrr_0x246_246_ObjvalidType_ObjvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_ObjvalidType_descriptor();
inline const ::std::string& Mrr_0x246_246_ObjvalidType_Name(Mrr_0x246_246_ObjvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_0x246_246_ObjvalidType_descriptor(), value);
}
inline bool Mrr_0x246_246_ObjvalidType_Parse(
    const ::std::string& name, Mrr_0x246_246_ObjvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_0x246_246_ObjvalidType>(
    Mrr_0x246_246_ObjvalidType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType {
  Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_UNKNOWN = 0,
  Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_MPH = 1,
  Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_KMH = 2,
  Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_RESERVED = 3
};
bool Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_MIN = Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_UNKNOWN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_MAX = Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_RESERVED;
const int Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Name(Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType>(
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Nav_currroadtypeType {
  Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_UNKNOW = 0,
  Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_HIGH_SPEED_ROAD = 1,
  Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_CITY_EXPRESS_WAY = 2,
  Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_DOWNTOWN_ROAD = 3,
  Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_COUNTRY_ROAD = 4
};
bool Gw_mp5_nav_0x533_533_Nav_currroadtypeType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_MIN = Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_UNKNOW;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_MAX = Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_COUNTRY_ROAD;
const int Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_currroadtypeType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Name(Gw_mp5_nav_0x533_533_Nav_currroadtypeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Nav_currroadtypeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Nav_currroadtypeType>(
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Nav_speedlimitType {
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_NO_DISPLAY = 0,
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_5 = 1,
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_10 = 2,
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_15 = 3,
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_20 = 4,
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_25 = 5,
  Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_130 = 26
};
bool Gw_mp5_nav_0x533_533_Nav_speedlimitType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_MIN = Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_NO_DISPLAY;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_MAX = Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_130;
const int Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_speedlimitType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Nav_speedlimitType_Name(Gw_mp5_nav_0x533_533_Nav_speedlimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Nav_speedlimitType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Nav_speedlimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Nav_speedlimitType>(
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType {
  Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_MP5_APAACTIVE_CMD_NO_REQUEST = 0,
  Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_MP5_APAACTIVE_CMD_REQUEST = 1
};
bool Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_MIN = Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_MP5_APAACTIVE_CMD_NO_REQUEST;
const Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_MAX = Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_MP5_APAACTIVE_CMD_REQUEST;
const int Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Name(Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType>(
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType {
  Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_NO_BUTTON_PRESS = 0,
  Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_COMFIRM_BUTTON_PRESS = 1,
  Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_TERMINATED_BUTTON_PRESS = 2,
  Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_RESERVED = 3
};
bool Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_MIN = Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_NO_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_MAX = Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_RESERVED;
const int Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Name(Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType>(
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType {
  Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_NO_BUTTON_PRESS = 0,
  Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_PPSC_BUTTON_PRESS = 1,
  Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_CPSC_BUTTON_PRESS = 2,
  Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_POC_BUTTON_PRESS = 3
};
bool Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_MIN = Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_NO_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_MAX = Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_POC_BUTTON_PRESS;
const int Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Name(Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType>(
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Nav_stsType {
  Gw_mp5_nav_0x533_533_Nav_stsType_NAV_STS_INACTIVE = 0,
  Gw_mp5_nav_0x533_533_Nav_stsType_NAV_STS_ACTIVE = 1
};
bool Gw_mp5_nav_0x533_533_Nav_stsType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_MIN = Gw_mp5_nav_0x533_533_Nav_stsType_NAV_STS_INACTIVE;
const Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_MAX = Gw_mp5_nav_0x533_533_Nav_stsType_NAV_STS_ACTIVE;
const int Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_stsType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Nav_stsType_Name(Gw_mp5_nav_0x533_533_Nav_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Nav_stsType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Nav_stsType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Nav_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Nav_stsType>(
    Gw_mp5_nav_0x533_533_Nav_stsType_descriptor(), name, value);
}
enum Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType {
  Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_UNKNOWN = 0,
  Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_EXISTS = 1,
  Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_NOLIMIT = 2,
  Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_PLURAL = 3
};
bool Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_IsValid(int value);
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_MIN = Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_UNKNOWN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_MAX = Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_PLURAL;
const int Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_ARRAYSIZE = Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_descriptor();
inline const ::std::string& Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Name(Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_descriptor(), value);
}
inline bool Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Parse(
    const ::std::string& name, Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType>(
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_fcw_sensitiveType {
  Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_UNAVAILABLE = 0,
  Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE = 1,
  Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL2_NORMAL = 2,
  Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE = 3
};
bool Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_MIN = Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_UNAVAILABLE;
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_MAX = Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE;
const int Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Name(Gw_mp5_0x530_530_Mp5_fcw_sensitiveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_fcw_sensitiveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_fcw_sensitiveType>(
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_icmenushift_buttonType {
  Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_NO_EVENT = 0,
  Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_PAGE_UP = 1,
  Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_PAGE_DOWN = 2,
  Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_INVALID = 3
};
bool Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_MIN = Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_NO_EVENT;
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_MAX = Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_INVALID;
const int Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Name(Gw_mp5_0x530_530_Mp5_icmenushift_buttonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_icmenushift_buttonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_icmenushift_buttonType>(
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_aeb_on_offType {
  Gw_mp5_0x530_530_Mp5_aeb_on_offType_MP5_AEB_ON_OFF_SWITCH_ON = 0,
  Gw_mp5_0x530_530_Mp5_aeb_on_offType_MP5_AEB_ON_OFF_SWITCH_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_aeb_on_offType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_MIN = Gw_mp5_0x530_530_Mp5_aeb_on_offType_MP5_AEB_ON_OFF_SWITCH_ON;
const Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_MAX = Gw_mp5_0x530_530_Mp5_aeb_on_offType_MP5_AEB_ON_OFF_SWITCH_OFF;
const int Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_aeb_on_offType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_aeb_on_offType_Name(Gw_mp5_0x530_530_Mp5_aeb_on_offType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_aeb_on_offType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_aeb_on_offType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_aeb_on_offType>(
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_fcw_on_offType {
  Gw_mp5_0x530_530_Mp5_fcw_on_offType_MP5_FCW_ON_OFF_SWITCH_ON = 0,
  Gw_mp5_0x530_530_Mp5_fcw_on_offType_MP5_FCW_ON_OFF_SWITCH_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_fcw_on_offType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_MIN = Gw_mp5_0x530_530_Mp5_fcw_on_offType_MP5_FCW_ON_OFF_SWITCH_ON;
const Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_MAX = Gw_mp5_0x530_530_Mp5_fcw_on_offType_MP5_FCW_ON_OFF_SWITCH_OFF;
const int Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_fcw_on_offType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_fcw_on_offType_Name(Gw_mp5_0x530_530_Mp5_fcw_on_offType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_fcw_on_offType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_fcw_on_offType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_fcw_on_offType>(
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_bsdswitchstsType {
  Gw_mp5_0x530_530_Mp5_bsdswitchstsType_MP5_BSDSWITCHSTS_ON = 0,
  Gw_mp5_0x530_530_Mp5_bsdswitchstsType_MP5_BSDSWITCHSTS_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_bsdswitchstsType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_MIN = Gw_mp5_0x530_530_Mp5_bsdswitchstsType_MP5_BSDSWITCHSTS_ON;
const Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_MAX = Gw_mp5_0x530_530_Mp5_bsdswitchstsType_MP5_BSDSWITCHSTS_OFF;
const int Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_bsdswitchstsType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Name(Gw_mp5_0x530_530_Mp5_bsdswitchstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_bsdswitchstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_bsdswitchstsType>(
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_afs_swtichstsType {
  Gw_mp5_0x530_530_Mp5_afs_swtichstsType_MP5_AFS_SWTICHSTS_NO_PRESS = 0,
  Gw_mp5_0x530_530_Mp5_afs_swtichstsType_MP5_AFS_SWTICHSTS_PRESS = 1
};
bool Gw_mp5_0x530_530_Mp5_afs_swtichstsType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_MIN = Gw_mp5_0x530_530_Mp5_afs_swtichstsType_MP5_AFS_SWTICHSTS_NO_PRESS;
const Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_MAX = Gw_mp5_0x530_530_Mp5_afs_swtichstsType_MP5_AFS_SWTICHSTS_PRESS;
const int Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_afs_swtichstsType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Name(Gw_mp5_0x530_530_Mp5_afs_swtichstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_afs_swtichstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_afs_swtichstsType>(
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_laneassittypereqType {
  Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_NO_SELECTION = 0,
  Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LDW = 1,
  Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LKA = 2,
  Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LDW_LKA = 3
};
bool Gw_mp5_0x530_530_Mp5_laneassittypereqType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_MIN = Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_NO_SELECTION;
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_MAX = Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LDW_LKA;
const int Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_laneassittypereqType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_laneassittypereqType_Name(Gw_mp5_0x530_530_Mp5_laneassittypereqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_laneassittypereqType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_laneassittypereqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_laneassittypereqType>(
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType {
  Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_OFF = 0,
  Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_MENU_SWITCH_ACTIVE = 1,
  Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_SILENCE = 2,
  Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_INVALID = 3
};
bool Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_MIN = Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_OFF;
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_MAX = Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_INVALID;
const int Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Name(Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType>(
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_alarmstatusType {
  Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_INACTIVE = 0,
  Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_ACTIVE = 1,
  Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_FAILED = 2,
  Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_RESERVED = 3
};
bool Gw_mp5_0x530_530_Mp5_alarmstatusType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_MIN = Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_INACTIVE;
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_MAX = Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_RESERVED;
const int Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_alarmstatusType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_alarmstatusType_Name(Gw_mp5_0x530_530_Mp5_alarmstatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_alarmstatusType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_alarmstatusType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_alarmstatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_alarmstatusType>(
    Gw_mp5_0x530_530_Mp5_alarmstatusType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_alarmornotType {
  Gw_mp5_0x530_530_Mp5_alarmornotType_MP5_ALARMORNOT_NO_ALARM = 0,
  Gw_mp5_0x530_530_Mp5_alarmornotType_MP5_ALARMORNOT_ALARM = 1
};
bool Gw_mp5_0x530_530_Mp5_alarmornotType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_MIN = Gw_mp5_0x530_530_Mp5_alarmornotType_MP5_ALARMORNOT_NO_ALARM;
const Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_MAX = Gw_mp5_0x530_530_Mp5_alarmornotType_MP5_ALARMORNOT_ALARM;
const int Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_alarmornotType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_alarmornotType_Name(Gw_mp5_0x530_530_Mp5_alarmornotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_alarmornotType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_alarmornotType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_alarmornotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_alarmornotType>(
    Gw_mp5_0x530_530_Mp5_alarmornotType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_paakreset_reqType {
  Gw_mp5_0x530_530_Mp5_paakreset_reqType_MP5_PAAKRESET_REQ_NO_REQUEST = 0,
  Gw_mp5_0x530_530_Mp5_paakreset_reqType_MP5_PAAKRESET_REQ_REQUEST = 1
};
bool Gw_mp5_0x530_530_Mp5_paakreset_reqType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_MIN = Gw_mp5_0x530_530_Mp5_paakreset_reqType_MP5_PAAKRESET_REQ_NO_REQUEST;
const Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_MAX = Gw_mp5_0x530_530_Mp5_paakreset_reqType_MP5_PAAKRESET_REQ_REQUEST;
const int Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_paakreset_reqType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_paakreset_reqType_Name(Gw_mp5_0x530_530_Mp5_paakreset_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_paakreset_reqType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_paakreset_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_paakreset_reqType>(
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_cta_activeType {
  Gw_mp5_0x530_530_Mp5_cta_activeType_MP5_CTA_ACTIVE_ON = 0,
  Gw_mp5_0x530_530_Mp5_cta_activeType_MP5_CTA_ACTIVE_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_cta_activeType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_MIN = Gw_mp5_0x530_530_Mp5_cta_activeType_MP5_CTA_ACTIVE_ON;
const Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_MAX = Gw_mp5_0x530_530_Mp5_cta_activeType_MP5_CTA_ACTIVE_OFF;
const int Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_cta_activeType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_cta_activeType_Name(Gw_mp5_0x530_530_Mp5_cta_activeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_cta_activeType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_cta_activeType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_cta_activeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_cta_activeType>(
    Gw_mp5_0x530_530_Mp5_cta_activeType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_bsdlca_activeType {
  Gw_mp5_0x530_530_Mp5_bsdlca_activeType_MP5_BSDLCA_ACTIVE_ON = 0,
  Gw_mp5_0x530_530_Mp5_bsdlca_activeType_MP5_BSDLCA_ACTIVE_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_bsdlca_activeType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_MIN = Gw_mp5_0x530_530_Mp5_bsdlca_activeType_MP5_BSDLCA_ACTIVE_ON;
const Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_MAX = Gw_mp5_0x530_530_Mp5_bsdlca_activeType_MP5_BSDLCA_ACTIVE_OFF;
const int Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_bsdlca_activeType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Name(Gw_mp5_0x530_530_Mp5_bsdlca_activeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_bsdlca_activeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_bsdlca_activeType>(
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_tsrmenureqType {
  Gw_mp5_0x530_530_Mp5_tsrmenureqType_MP5_TSRMENUREQ_ON = 0,
  Gw_mp5_0x530_530_Mp5_tsrmenureqType_MP5_TSRMENUREQ_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_tsrmenureqType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_MIN = Gw_mp5_0x530_530_Mp5_tsrmenureqType_MP5_TSRMENUREQ_ON;
const Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_MAX = Gw_mp5_0x530_530_Mp5_tsrmenureqType_MP5_TSRMENUREQ_OFF;
const int Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_tsrmenureqType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_tsrmenureqType_Name(Gw_mp5_0x530_530_Mp5_tsrmenureqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_tsrmenureqType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_tsrmenureqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_tsrmenureqType>(
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_ldwwarningType {
  Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE = 0,
  Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_AUDIBLE_WARNING = 1,
  Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_WHEELSTEER_SHAKE = 2,
  Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_RESERVED = 3
};
bool Gw_mp5_0x530_530_Mp5_ldwwarningType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_MIN = Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE;
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_MAX = Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_RESERVED;
const int Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_ldwwarningType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_ldwwarningType_Name(Gw_mp5_0x530_530_Mp5_ldwwarningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_ldwwarningType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_ldwwarningType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_ldwwarningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_ldwwarningType>(
    Gw_mp5_0x530_530_Mp5_ldwwarningType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_ldwsensitvityType {
  Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_HIGH = 0,
  Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_LOW = 1,
  Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_RESERVED = 2
};
bool Gw_mp5_0x530_530_Mp5_ldwsensitvityType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_MIN = Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_HIGH;
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_MAX = Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_RESERVED;
const int Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_ldwsensitvityType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Name(Gw_mp5_0x530_530_Mp5_ldwsensitvityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_ldwsensitvityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_ldwsensitvityType>(
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_avm_angleType {
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_CENTER_KEY = 0,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_FRONT_3D_FRONT_AVM_2D = 1,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_FRONT_RIGHT_3D = 2,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_RIGHT_3D_RIGHT_AVM_2D = 3,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_REAR_RIGHT_3D = 4,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_REAR_3D_REAR_AVM_2D = 5,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_LEFT_REAR_3D = 6,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_LEFT_3D_LEFT_AVM_2D = 7,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_LEFT_FRONT_3D = 8,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_3D_KEY = 9,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_2D_KEY = 10,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_NO_VIDEO_SIGNAL_RESERVED = 11,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_RESERVED = 12,
  Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_INVALID = 15
};
bool Gw_mp5_0x530_530_Mp5_avm_angleType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_MIN = Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_CENTER_KEY;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_MAX = Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_INVALID;
const int Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_avm_angleType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_avm_angleType_Name(Gw_mp5_0x530_530_Mp5_avm_angleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_avm_angleType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_avm_angleType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_avm_angleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_avm_angleType>(
    Gw_mp5_0x530_530_Mp5_avm_angleType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_ihcmenureqType {
  Gw_mp5_0x530_530_Mp5_ihcmenureqType_MP5_IHCMENUREQ_ON = 0,
  Gw_mp5_0x530_530_Mp5_ihcmenureqType_MP5_IHCMENUREQ_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_ihcmenureqType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_MIN = Gw_mp5_0x530_530_Mp5_ihcmenureqType_MP5_IHCMENUREQ_ON;
const Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_MAX = Gw_mp5_0x530_530_Mp5_ihcmenureqType_MP5_IHCMENUREQ_OFF;
const int Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_ihcmenureqType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_ihcmenureqType_Name(Gw_mp5_0x530_530_Mp5_ihcmenureqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_ihcmenureqType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_ihcmenureqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_ihcmenureqType>(
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_doa_activeType {
  Gw_mp5_0x530_530_Mp5_doa_activeType_MP5_DOA_ACTIVE_ON = 0,
  Gw_mp5_0x530_530_Mp5_doa_activeType_MP5_DOA_ACTIVE_OFF = 1
};
bool Gw_mp5_0x530_530_Mp5_doa_activeType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_MIN = Gw_mp5_0x530_530_Mp5_doa_activeType_MP5_DOA_ACTIVE_ON;
const Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_MAX = Gw_mp5_0x530_530_Mp5_doa_activeType_MP5_DOA_ACTIVE_OFF;
const int Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_doa_activeType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_doa_activeType_Name(Gw_mp5_0x530_530_Mp5_doa_activeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_doa_activeType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_doa_activeType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_doa_activeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_doa_activeType>(
    Gw_mp5_0x530_530_Mp5_doa_activeType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_apa_available_stsType {
  Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_INITIAL = 0,
  Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_AVALIBLE = 1,
  Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_NOT_AVALIBLE = 2
};
bool Gw_mp5_0x530_530_Mp5_apa_available_stsType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_MIN = Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_INITIAL;
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_MAX = Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_NOT_AVALIBLE;
const int Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_apa_available_stsType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_apa_available_stsType_Name(Gw_mp5_0x530_530_Mp5_apa_available_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_apa_available_stsType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_apa_available_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_apa_available_stsType>(
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType {
  Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGOFF = 0,
  Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGON = 1
};
bool Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_MIN = Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGOFF;
const Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_MAX = Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGON;
const int Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Name(Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType>(
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType {
  Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_INITIAL = 0,
  Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_CLOCKWISE = 1,
  Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_ANTICLOCKWISE = 2,
  Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_RESERVED = 3
};
bool Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_MIN = Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_INITIAL;
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_MAX = Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_RESERVED;
const int Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Name(Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType>(
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_avm_buttonType {
  Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_INIT = 0,
  Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_START_UP = 1,
  Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_SHUT_DOWN = 2,
  Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_FAULTURE = 3
};
bool Gw_mp5_0x530_530_Mp5_avm_buttonType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_MIN = Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_INIT;
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_MAX = Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_FAULTURE;
const int Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_avm_buttonType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_avm_buttonType_Name(Gw_mp5_0x530_530_Mp5_avm_buttonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_avm_buttonType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_avm_buttonType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_avm_buttonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_avm_buttonType>(
    Gw_mp5_0x530_530_Mp5_avm_buttonType_descriptor(), name, value);
}
enum Gw_mp5_0x530_530_Mp5_view_choiceType {
  Gw_mp5_0x530_530_Mp5_view_choiceType_MP5_VIEW_CHOICE_AVM = 0,
  Gw_mp5_0x530_530_Mp5_view_choiceType_MP5_VIEW_CHOICE_ADAS = 1
};
bool Gw_mp5_0x530_530_Mp5_view_choiceType_IsValid(int value);
const Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_MIN = Gw_mp5_0x530_530_Mp5_view_choiceType_MP5_VIEW_CHOICE_AVM;
const Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_MAX = Gw_mp5_0x530_530_Mp5_view_choiceType_MP5_VIEW_CHOICE_ADAS;
const int Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_ARRAYSIZE = Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_view_choiceType_descriptor();
inline const ::std::string& Gw_mp5_0x530_530_Mp5_view_choiceType_Name(Gw_mp5_0x530_530_Mp5_view_choiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_mp5_0x530_530_Mp5_view_choiceType_descriptor(), value);
}
inline bool Gw_mp5_0x530_530_Mp5_view_choiceType_Parse(
    const ::std::string& name, Gw_mp5_0x530_530_Mp5_view_choiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_mp5_0x530_530_Mp5_view_choiceType>(
    Gw_mp5_0x530_530_Mp5_view_choiceType_descriptor(), name, value);
}
enum Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType {
  Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_UNKNOWN = 0,
  Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_CAR = 1,
  Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_TRUCK = 2,
  Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_TWO_WHEELER = 3
};
bool Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_IsValid(int value);
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_MIN = Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_MAX = Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_TWO_WHEELER;
const int Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_ARRAYSIZE = Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_descriptor();
inline const ::std::string& Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Name(Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_descriptor(), value);
}
inline bool Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Parse(
    const ::std::string& name, Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType>(
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_descriptor(), name, value);
}
enum Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType {
  Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_UNKNOWN = 0,
  Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_CAR = 1,
  Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_TRUCK = 2,
  Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_TWO_WHEELER = 3
};
bool Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_IsValid(int value);
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_MIN = Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_MAX = Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_TWO_WHEELER;
const int Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_ARRAYSIZE = Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_descriptor();
inline const ::std::string& Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Name(Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_descriptor(), value);
}
inline bool Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Parse(
    const ::std::string& name, Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType>(
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_descriptor(), name, value);
}
enum Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType {
  Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_MRR_FFTARGRTDETECTION_NOT_DECTECTED = 0,
  Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_MRR_FFTARGRTDETECTION_DECTECTED = 1
};
bool Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_IsValid(int value);
const Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_MIN = Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_MRR_FFTARGRTDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_MAX = Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_MRR_FFTARGRTDETECTION_DECTECTED;
const int Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_ARRAYSIZE = Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_descriptor();
inline const ::std::string& Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Name(Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_descriptor(), value);
}
inline bool Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Parse(
    const ::std::string& name, Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType>(
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_descriptor(), name, value);
}
enum Mrr_frobj_0x279_279_Mrr_peddetectionType {
  Mrr_frobj_0x279_279_Mrr_peddetectionType_MRR_PEDDETECTION_NOT_DECTECTED = 0,
  Mrr_frobj_0x279_279_Mrr_peddetectionType_MRR_PEDDETECTION_DECTECTED = 1
};
bool Mrr_frobj_0x279_279_Mrr_peddetectionType_IsValid(int value);
const Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_MIN = Mrr_frobj_0x279_279_Mrr_peddetectionType_MRR_PEDDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_MAX = Mrr_frobj_0x279_279_Mrr_peddetectionType_MRR_PEDDETECTION_DECTECTED;
const int Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_ARRAYSIZE = Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_peddetectionType_descriptor();
inline const ::std::string& Mrr_frobj_0x279_279_Mrr_peddetectionType_Name(Mrr_frobj_0x279_279_Mrr_peddetectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mrr_frobj_0x279_279_Mrr_peddetectionType_descriptor(), value);
}
inline bool Mrr_frobj_0x279_279_Mrr_peddetectionType_Parse(
    const ::std::string& name, Mrr_frobj_0x279_279_Mrr_peddetectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mrr_frobj_0x279_279_Mrr_peddetectionType>(
    Mrr_frobj_0x279_279_Mrr_peddetectionType_descriptor(), name, value);
}
enum Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType {
  Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_LAMP_AND_LAMP_IS_OFF = 0,
  Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_FAILURE_IN_LAMP = 1,
  Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_ON = 2,
  Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_BLINKING = 3,
  Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_AIRBAGFAILSTS_SIGNAL_NOT_RECEIVED = 4,
  Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_INVALID = 5
};
bool Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IsValid(int value);
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_MIN = Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_LAMP_AND_LAMP_IS_OFF;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_MAX = Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_INVALID;
const int Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_ARRAYSIZE = Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_descriptor();
inline const ::std::string& Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Name(Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_descriptor(), value);
}
inline bool Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Parse(
    const ::std::string& name, Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType>(
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_descriptor(), name, value);
}
enum Gw_ic_0x510_510_Ic_vehbrkpump_err_icType {
  Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IC_VEHBRKPUMP_ERR_IC_NORMAL = 0,
  Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IC_VEHBRKPUMP_ERR_IC_ERROR = 1
};
bool Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IsValid(int value);
const Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_MIN = Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IC_VEHBRKPUMP_ERR_IC_NORMAL;
const Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_MAX = Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IC_VEHBRKPUMP_ERR_IC_ERROR;
const int Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_ARRAYSIZE = Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_descriptor();
inline const ::std::string& Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Name(Gw_ic_0x510_510_Ic_vehbrkpump_err_icType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_descriptor(), value);
}
inline bool Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Parse(
    const ::std::string& name, Gw_ic_0x510_510_Ic_vehbrkpump_err_icType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_0x510_510_Ic_vehbrkpump_err_icType>(
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_descriptor(), name, value);
}
enum Gw_ic_0x510_510_Ic_disfailType {
  Gw_ic_0x510_510_Ic_disfailType_IC_DISFAIL_NO_ERROR = 0,
  Gw_ic_0x510_510_Ic_disfailType_IC_DISFAIL_ERROR = 1
};
bool Gw_ic_0x510_510_Ic_disfailType_IsValid(int value);
const Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_MIN = Gw_ic_0x510_510_Ic_disfailType_IC_DISFAIL_NO_ERROR;
const Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_MAX = Gw_ic_0x510_510_Ic_disfailType_IC_DISFAIL_ERROR;
const int Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_ARRAYSIZE = Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_disfailType_descriptor();
inline const ::std::string& Gw_ic_0x510_510_Ic_disfailType_Name(Gw_ic_0x510_510_Ic_disfailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_0x510_510_Ic_disfailType_descriptor(), value);
}
inline bool Gw_ic_0x510_510_Ic_disfailType_Parse(
    const ::std::string& name, Gw_ic_0x510_510_Ic_disfailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_0x510_510_Ic_disfailType>(
    Gw_ic_0x510_510_Ic_disfailType_descriptor(), name, value);
}
enum Gw_ic_0x510_510_Ic_qdashaccfailType {
  Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_NO_ERROR = 0,
  Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_REVERSIBLE_ERROR = 1,
  Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_IRREVERSIBLE_ERROR = 2,
  Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_NOT_DEFINED = 3
};
bool Gw_ic_0x510_510_Ic_qdashaccfailType_IsValid(int value);
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_MIN = Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_NO_ERROR;
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_MAX = Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_NOT_DEFINED;
const int Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_ARRAYSIZE = Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_qdashaccfailType_descriptor();
inline const ::std::string& Gw_ic_0x510_510_Ic_qdashaccfailType_Name(Gw_ic_0x510_510_Ic_qdashaccfailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_0x510_510_Ic_qdashaccfailType_descriptor(), value);
}
inline bool Gw_ic_0x510_510_Ic_qdashaccfailType_Parse(
    const ::std::string& name, Gw_ic_0x510_510_Ic_qdashaccfailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_0x510_510_Ic_qdashaccfailType>(
    Gw_ic_0x510_510_Ic_qdashaccfailType_descriptor(), name, value);
}
enum Esp_tq_0x217_217_Esp_trqinc_reqType {
  Esp_tq_0x217_217_Esp_trqinc_reqType_ESP_TRQINC_REQ_INACTIVE = 0,
  Esp_tq_0x217_217_Esp_trqinc_reqType_ESP_TRQINC_REQ_ACTIVE = 1
};
bool Esp_tq_0x217_217_Esp_trqinc_reqType_IsValid(int value);
const Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_MIN = Esp_tq_0x217_217_Esp_trqinc_reqType_ESP_TRQINC_REQ_INACTIVE;
const Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_MAX = Esp_tq_0x217_217_Esp_trqinc_reqType_ESP_TRQINC_REQ_ACTIVE;
const int Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_ARRAYSIZE = Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_tq_0x217_217_Esp_trqinc_reqType_descriptor();
inline const ::std::string& Esp_tq_0x217_217_Esp_trqinc_reqType_Name(Esp_tq_0x217_217_Esp_trqinc_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_tq_0x217_217_Esp_trqinc_reqType_descriptor(), value);
}
inline bool Esp_tq_0x217_217_Esp_trqinc_reqType_Parse(
    const ::std::string& name, Esp_tq_0x217_217_Esp_trqinc_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_tq_0x217_217_Esp_trqinc_reqType>(
    Esp_tq_0x217_217_Esp_trqinc_reqType_descriptor(), name, value);
}
enum Esp_tq_0x217_217_Esp_trqred_reqType {
  Esp_tq_0x217_217_Esp_trqred_reqType_ESP_TRQRED_REQ_INACTIVE = 0,
  Esp_tq_0x217_217_Esp_trqred_reqType_ESP_TRQRED_REQ_ACTIVE = 1
};
bool Esp_tq_0x217_217_Esp_trqred_reqType_IsValid(int value);
const Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_MIN = Esp_tq_0x217_217_Esp_trqred_reqType_ESP_TRQRED_REQ_INACTIVE;
const Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_MAX = Esp_tq_0x217_217_Esp_trqred_reqType_ESP_TRQRED_REQ_ACTIVE;
const int Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_ARRAYSIZE = Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_tq_0x217_217_Esp_trqred_reqType_descriptor();
inline const ::std::string& Esp_tq_0x217_217_Esp_trqred_reqType_Name(Esp_tq_0x217_217_Esp_trqred_reqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_tq_0x217_217_Esp_trqred_reqType_descriptor(), value);
}
inline bool Esp_tq_0x217_217_Esp_trqred_reqType_Parse(
    const ::std::string& name, Esp_tq_0x217_217_Esp_trqred_reqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_tq_0x217_217_Esp_trqred_reqType>(
    Esp_tq_0x217_217_Esp_trqred_reqType_descriptor(), name, value);
}
enum Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType {
  Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_ESP_WHEELRPMFRVALID_VALID = 0,
  Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_ESP_WHEELRPMFRVALID_INVALID = 1
};
bool Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_IsValid(int value);
const Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_MIN = Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_ESP_WHEELRPMFRVALID_VALID;
const Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_MAX = Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_ESP_WHEELRPMFRVALID_INVALID;
const int Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_ARRAYSIZE = Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_descriptor();
inline const ::std::string& Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Name(Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_descriptor(), value);
}
inline bool Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Parse(
    const ::std::string& name, Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType>(
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_descriptor(), name, value);
}
enum Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType {
  Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_ESP_WHEELRPMFLVALID_VALID = 0,
  Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_ESP_WHEELRPMFLVALID_INVALID = 1
};
bool Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_IsValid(int value);
const Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_MIN = Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_ESP_WHEELRPMFLVALID_VALID;
const Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_MAX = Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_ESP_WHEELRPMFLVALID_INVALID;
const int Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_ARRAYSIZE = Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_descriptor();
inline const ::std::string& Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Name(Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_descriptor(), value);
}
inline bool Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Parse(
    const ::std::string& name, Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType>(
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_descriptor(), name, value);
}
enum Gw_ic_time_0x581_581_Ic_monthType {
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_1 = 0,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_2 = 1,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_3 = 2,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_4 = 3,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_5 = 4,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_6 = 5,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_7 = 6,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_8 = 7,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_9 = 8,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_10 = 9,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_11 = 10,
  Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_12 = 11
};
bool Gw_ic_time_0x581_581_Ic_monthType_IsValid(int value);
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_MIN = Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_1;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_MAX = Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_12;
const int Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_ARRAYSIZE = Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_monthType_descriptor();
inline const ::std::string& Gw_ic_time_0x581_581_Ic_monthType_Name(Gw_ic_time_0x581_581_Ic_monthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_time_0x581_581_Ic_monthType_descriptor(), value);
}
inline bool Gw_ic_time_0x581_581_Ic_monthType_Parse(
    const ::std::string& name, Gw_ic_time_0x581_581_Ic_monthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_time_0x581_581_Ic_monthType>(
    Gw_ic_time_0x581_581_Ic_monthType_descriptor(), name, value);
}
enum Gw_ic_time_0x581_581_Ic_dateType {
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_1 = 0,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_2 = 1,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_3 = 2,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_4 = 3,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_5 = 4,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_6 = 5,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_7 = 6,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_8 = 7,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_9 = 8,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_10 = 9,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_11 = 10,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_12 = 11,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_13 = 12,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_14 = 13,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_15 = 14,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_16 = 15,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_17 = 16,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_18 = 17,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_19 = 18,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_20 = 19,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_21 = 20,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_22 = 21,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_23 = 22,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_24 = 23,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_25 = 24,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_26 = 25,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_27 = 26,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_28 = 27,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_29 = 28,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_30 = 29,
  Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_31 = 30
};
bool Gw_ic_time_0x581_581_Ic_dateType_IsValid(int value);
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_MIN = Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_1;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_MAX = Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_31;
const int Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_ARRAYSIZE = Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_dateType_descriptor();
inline const ::std::string& Gw_ic_time_0x581_581_Ic_dateType_Name(Gw_ic_time_0x581_581_Ic_dateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_time_0x581_581_Ic_dateType_descriptor(), value);
}
inline bool Gw_ic_time_0x581_581_Ic_dateType_Parse(
    const ::std::string& name, Gw_ic_time_0x581_581_Ic_dateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_time_0x581_581_Ic_dateType>(
    Gw_ic_time_0x581_581_Ic_dateType_descriptor(), name, value);
}
enum Gw_ic_time_0x581_581_Ic_hourType {
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_0 = 0,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_1 = 1,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_2 = 2,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_3 = 3,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_4 = 4,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_5 = 5,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_6 = 6,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_7 = 7,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_8 = 8,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_9 = 9,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_10 = 10,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_11 = 11,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_12 = 12,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_13 = 13,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_14 = 14,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_15 = 15,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_16 = 16,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_17 = 17,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_18 = 18,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_19 = 19,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_20 = 20,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_21 = 21,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_22 = 22,
  Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_23 = 23
};
bool Gw_ic_time_0x581_581_Ic_hourType_IsValid(int value);
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_MIN = Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_0;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_MAX = Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_23;
const int Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_ARRAYSIZE = Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_hourType_descriptor();
inline const ::std::string& Gw_ic_time_0x581_581_Ic_hourType_Name(Gw_ic_time_0x581_581_Ic_hourType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_time_0x581_581_Ic_hourType_descriptor(), value);
}
inline bool Gw_ic_time_0x581_581_Ic_hourType_Parse(
    const ::std::string& name, Gw_ic_time_0x581_581_Ic_hourType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_time_0x581_581_Ic_hourType>(
    Gw_ic_time_0x581_581_Ic_hourType_descriptor(), name, value);
}
enum Gw_ic_time_0x581_581_Ic_minuteType {
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_0 = 0,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_1 = 1,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_2 = 2,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_3 = 3,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_4 = 4,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_5 = 5,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_6 = 6,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_7 = 7,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_8 = 8,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_9 = 9,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_10 = 10,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_11 = 11,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_12 = 12,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_13 = 13,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_14 = 14,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_15 = 15,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_16 = 16,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_17 = 17,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_18 = 18,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_19 = 19,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_20 = 20,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_21 = 21,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_22 = 22,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_23 = 23,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_24 = 24,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_25 = 25,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_26 = 26,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_27 = 27,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_28 = 28,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_29 = 29,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_30 = 30,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_31 = 31,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_32 = 32,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_33 = 33,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_34 = 34,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_35 = 35,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_36 = 36,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_37 = 37,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_38 = 38,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_39 = 39,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_40 = 40,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_41 = 41,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_42 = 42,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_43 = 43,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_44 = 44,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_45 = 45,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_46 = 46,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_47 = 47,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_48 = 48,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_49 = 49,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_50 = 50,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_51 = 51,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_52 = 52,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_53 = 53,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_54 = 54,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_55 = 55,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_56 = 56,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_57 = 57,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_58 = 58,
  Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_59 = 59
};
bool Gw_ic_time_0x581_581_Ic_minuteType_IsValid(int value);
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_MIN = Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_0;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_MAX = Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_59;
const int Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_ARRAYSIZE = Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_minuteType_descriptor();
inline const ::std::string& Gw_ic_time_0x581_581_Ic_minuteType_Name(Gw_ic_time_0x581_581_Ic_minuteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_time_0x581_581_Ic_minuteType_descriptor(), value);
}
inline bool Gw_ic_time_0x581_581_Ic_minuteType_Parse(
    const ::std::string& name, Gw_ic_time_0x581_581_Ic_minuteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_time_0x581_581_Ic_minuteType>(
    Gw_ic_time_0x581_581_Ic_minuteType_descriptor(), name, value);
}
enum Gw_ic_time_0x581_581_Ic_secondType {
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_0 = 0,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_1 = 1,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_2 = 2,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_3 = 3,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_4 = 4,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_5 = 5,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_6 = 6,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_7 = 7,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_8 = 8,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_9 = 9,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_10 = 10,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_11 = 11,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_12 = 12,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_13 = 13,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_14 = 14,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_15 = 15,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_16 = 16,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_17 = 17,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_18 = 18,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_19 = 19,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_20 = 20,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_21 = 21,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_22 = 22,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_23 = 23,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_24 = 24,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_25 = 25,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_26 = 26,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_27 = 27,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_28 = 28,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_29 = 29,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_30 = 30,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_31 = 31,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_32 = 32,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_33 = 33,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_34 = 34,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_35 = 35,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_36 = 36,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_37 = 37,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_38 = 38,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_39 = 39,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_40 = 40,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_41 = 41,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_42 = 42,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_43 = 43,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_44 = 44,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_45 = 45,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_46 = 46,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_47 = 47,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_48 = 48,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_49 = 49,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_50 = 50,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_51 = 51,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_52 = 52,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_53 = 53,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_54 = 54,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_55 = 55,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_56 = 56,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_57 = 57,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_58 = 58,
  Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_59 = 59
};
bool Gw_ic_time_0x581_581_Ic_secondType_IsValid(int value);
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_MIN = Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_0;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_MAX = Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_59;
const int Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_ARRAYSIZE = Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_secondType_descriptor();
inline const ::std::string& Gw_ic_time_0x581_581_Ic_secondType_Name(Gw_ic_time_0x581_581_Ic_secondType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_time_0x581_581_Ic_secondType_descriptor(), value);
}
inline bool Gw_ic_time_0x581_581_Ic_secondType_Parse(
    const ::std::string& name, Gw_ic_time_0x581_581_Ic_secondType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_time_0x581_581_Ic_secondType>(
    Gw_ic_time_0x581_581_Ic_secondType_descriptor(), name, value);
}
enum Gw_ic_time_0x581_581_Ic_yearType {
  Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2019 = 2,
  Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2020 = 3,
  Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2021 = 4
};
bool Gw_ic_time_0x581_581_Ic_yearType_IsValid(int value);
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_MIN = Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2019;
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_MAX = Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2021;
const int Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_ARRAYSIZE = Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_yearType_descriptor();
inline const ::std::string& Gw_ic_time_0x581_581_Ic_yearType_Name(Gw_ic_time_0x581_581_Ic_yearType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_ic_time_0x581_581_Ic_yearType_descriptor(), value);
}
inline bool Gw_ic_time_0x581_581_Ic_yearType_Parse(
    const ::std::string& name, Gw_ic_time_0x581_581_Ic_yearType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_ic_time_0x581_581_Ic_yearType>(
    Gw_ic_time_0x581_581_Ic_yearType_descriptor(), name, value);
}
enum Afs_0x5a0_5a0_Afs_work_stsType {
  Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_OFF = 0,
  Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_ON = 1,
  Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_ERROR = 2,
  Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_NOT_CALIBRATION = 3
};
bool Afs_0x5a0_5a0_Afs_work_stsType_IsValid(int value);
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_MIN = Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_OFF;
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_MAX = Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_NOT_CALIBRATION;
const int Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_ARRAYSIZE = Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Afs_0x5a0_5a0_Afs_work_stsType_descriptor();
inline const ::std::string& Afs_0x5a0_5a0_Afs_work_stsType_Name(Afs_0x5a0_5a0_Afs_work_stsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Afs_0x5a0_5a0_Afs_work_stsType_descriptor(), value);
}
inline bool Afs_0x5a0_5a0_Afs_work_stsType_Parse(
    const ::std::string& name, Afs_0x5a0_5a0_Afs_work_stsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Afs_0x5a0_5a0_Afs_work_stsType>(
    Afs_0x5a0_5a0_Afs_work_stsType_descriptor(), name, value);
}
enum Sod_nm_0x440_440_SodnmlimphomeType {
  Sod_nm_0x440_440_SodnmlimphomeType_SODNMLIMPHOME_NOT_ACTIVE = 0,
  Sod_nm_0x440_440_SodnmlimphomeType_SODNMLIMPHOME_ACTIVE = 1
};
bool Sod_nm_0x440_440_SodnmlimphomeType_IsValid(int value);
const Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_MIN = Sod_nm_0x440_440_SodnmlimphomeType_SODNMLIMPHOME_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_MAX = Sod_nm_0x440_440_SodnmlimphomeType_SODNMLIMPHOME_ACTIVE;
const int Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_ARRAYSIZE = Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmlimphomeType_descriptor();
inline const ::std::string& Sod_nm_0x440_440_SodnmlimphomeType_Name(Sod_nm_0x440_440_SodnmlimphomeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_nm_0x440_440_SodnmlimphomeType_descriptor(), value);
}
inline bool Sod_nm_0x440_440_SodnmlimphomeType_Parse(
    const ::std::string& name, Sod_nm_0x440_440_SodnmlimphomeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_nm_0x440_440_SodnmlimphomeType>(
    Sod_nm_0x440_440_SodnmlimphomeType_descriptor(), name, value);
}
enum Sod_nm_0x440_440_SodnmsleepindType {
  Sod_nm_0x440_440_SodnmsleepindType_SODNMSLEEPIND_NOT_ACTIVE = 0,
  Sod_nm_0x440_440_SodnmsleepindType_SODNMSLEEPIND_ACTIVE = 1
};
bool Sod_nm_0x440_440_SodnmsleepindType_IsValid(int value);
const Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_MIN = Sod_nm_0x440_440_SodnmsleepindType_SODNMSLEEPIND_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_MAX = Sod_nm_0x440_440_SodnmsleepindType_SODNMSLEEPIND_ACTIVE;
const int Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_ARRAYSIZE = Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmsleepindType_descriptor();
inline const ::std::string& Sod_nm_0x440_440_SodnmsleepindType_Name(Sod_nm_0x440_440_SodnmsleepindType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_nm_0x440_440_SodnmsleepindType_descriptor(), value);
}
inline bool Sod_nm_0x440_440_SodnmsleepindType_Parse(
    const ::std::string& name, Sod_nm_0x440_440_SodnmsleepindType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_nm_0x440_440_SodnmsleepindType>(
    Sod_nm_0x440_440_SodnmsleepindType_descriptor(), name, value);
}
enum Sod_nm_0x440_440_SodnmsleepackType {
  Sod_nm_0x440_440_SodnmsleepackType_SODNMSLEEPACK_NOT_ACTIVE = 0,
  Sod_nm_0x440_440_SodnmsleepackType_SODNMSLEEPACK_ACTIVE = 1
};
bool Sod_nm_0x440_440_SodnmsleepackType_IsValid(int value);
const Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_MIN = Sod_nm_0x440_440_SodnmsleepackType_SODNMSLEEPACK_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_MAX = Sod_nm_0x440_440_SodnmsleepackType_SODNMSLEEPACK_ACTIVE;
const int Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_ARRAYSIZE = Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmsleepackType_descriptor();
inline const ::std::string& Sod_nm_0x440_440_SodnmsleepackType_Name(Sod_nm_0x440_440_SodnmsleepackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_nm_0x440_440_SodnmsleepackType_descriptor(), value);
}
inline bool Sod_nm_0x440_440_SodnmsleepackType_Parse(
    const ::std::string& name, Sod_nm_0x440_440_SodnmsleepackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_nm_0x440_440_SodnmsleepackType>(
    Sod_nm_0x440_440_SodnmsleepackType_descriptor(), name, value);
}
enum Sod_nm_0x440_440_SodnmaliveType {
  Sod_nm_0x440_440_SodnmaliveType_SODNMALIVE_NOT_ACTIVE = 0,
  Sod_nm_0x440_440_SodnmaliveType_SODNMALIVE_ACTIVE = 1
};
bool Sod_nm_0x440_440_SodnmaliveType_IsValid(int value);
const Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_MIN = Sod_nm_0x440_440_SodnmaliveType_SODNMALIVE_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_MAX = Sod_nm_0x440_440_SodnmaliveType_SODNMALIVE_ACTIVE;
const int Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_ARRAYSIZE = Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmaliveType_descriptor();
inline const ::std::string& Sod_nm_0x440_440_SodnmaliveType_Name(Sod_nm_0x440_440_SodnmaliveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_nm_0x440_440_SodnmaliveType_descriptor(), value);
}
inline bool Sod_nm_0x440_440_SodnmaliveType_Parse(
    const ::std::string& name, Sod_nm_0x440_440_SodnmaliveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_nm_0x440_440_SodnmaliveType>(
    Sod_nm_0x440_440_SodnmaliveType_descriptor(), name, value);
}
enum Sod_nm_0x440_440_SodnmringType {
  Sod_nm_0x440_440_SodnmringType_SODNMRING_NOT_ACTIVE = 0,
  Sod_nm_0x440_440_SodnmringType_SODNMRING_ACTIVE = 1
};
bool Sod_nm_0x440_440_SodnmringType_IsValid(int value);
const Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440_SodnmringType_SodnmringType_MIN = Sod_nm_0x440_440_SodnmringType_SODNMRING_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440_SodnmringType_SodnmringType_MAX = Sod_nm_0x440_440_SodnmringType_SODNMRING_ACTIVE;
const int Sod_nm_0x440_440_SodnmringType_SodnmringType_ARRAYSIZE = Sod_nm_0x440_440_SodnmringType_SodnmringType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmringType_descriptor();
inline const ::std::string& Sod_nm_0x440_440_SodnmringType_Name(Sod_nm_0x440_440_SodnmringType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_nm_0x440_440_SodnmringType_descriptor(), value);
}
inline bool Sod_nm_0x440_440_SodnmringType_Parse(
    const ::std::string& name, Sod_nm_0x440_440_SodnmringType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_nm_0x440_440_SodnmringType>(
    Sod_nm_0x440_440_SodnmringType_descriptor(), name, value);
}
enum Gw_nm_0x460_460_GwnmlimphomeType {
  Gw_nm_0x460_460_GwnmlimphomeType_GWNMLIMPHOME_NOT_ACTIVE = 0,
  Gw_nm_0x460_460_GwnmlimphomeType_GWNMLIMPHOME_ACTIVE = 1
};
bool Gw_nm_0x460_460_GwnmlimphomeType_IsValid(int value);
const Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_MIN = Gw_nm_0x460_460_GwnmlimphomeType_GWNMLIMPHOME_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_MAX = Gw_nm_0x460_460_GwnmlimphomeType_GWNMLIMPHOME_ACTIVE;
const int Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_ARRAYSIZE = Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmlimphomeType_descriptor();
inline const ::std::string& Gw_nm_0x460_460_GwnmlimphomeType_Name(Gw_nm_0x460_460_GwnmlimphomeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_nm_0x460_460_GwnmlimphomeType_descriptor(), value);
}
inline bool Gw_nm_0x460_460_GwnmlimphomeType_Parse(
    const ::std::string& name, Gw_nm_0x460_460_GwnmlimphomeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_nm_0x460_460_GwnmlimphomeType>(
    Gw_nm_0x460_460_GwnmlimphomeType_descriptor(), name, value);
}
enum Gw_nm_0x460_460_GwnmsleepindType {
  Gw_nm_0x460_460_GwnmsleepindType_GWNMSLEEPIND_NOT_ACTIVE = 0,
  Gw_nm_0x460_460_GwnmsleepindType_GWNMSLEEPIND_ACTIVE = 1
};
bool Gw_nm_0x460_460_GwnmsleepindType_IsValid(int value);
const Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_MIN = Gw_nm_0x460_460_GwnmsleepindType_GWNMSLEEPIND_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_MAX = Gw_nm_0x460_460_GwnmsleepindType_GWNMSLEEPIND_ACTIVE;
const int Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_ARRAYSIZE = Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmsleepindType_descriptor();
inline const ::std::string& Gw_nm_0x460_460_GwnmsleepindType_Name(Gw_nm_0x460_460_GwnmsleepindType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_nm_0x460_460_GwnmsleepindType_descriptor(), value);
}
inline bool Gw_nm_0x460_460_GwnmsleepindType_Parse(
    const ::std::string& name, Gw_nm_0x460_460_GwnmsleepindType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_nm_0x460_460_GwnmsleepindType>(
    Gw_nm_0x460_460_GwnmsleepindType_descriptor(), name, value);
}
enum Gw_nm_0x460_460_GwnmsleepackType {
  Gw_nm_0x460_460_GwnmsleepackType_GWNMSLEEPACK_NOT_ACTIVE = 0,
  Gw_nm_0x460_460_GwnmsleepackType_GWNMSLEEPACK_ACTIVE = 1
};
bool Gw_nm_0x460_460_GwnmsleepackType_IsValid(int value);
const Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_MIN = Gw_nm_0x460_460_GwnmsleepackType_GWNMSLEEPACK_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_MAX = Gw_nm_0x460_460_GwnmsleepackType_GWNMSLEEPACK_ACTIVE;
const int Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_ARRAYSIZE = Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmsleepackType_descriptor();
inline const ::std::string& Gw_nm_0x460_460_GwnmsleepackType_Name(Gw_nm_0x460_460_GwnmsleepackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_nm_0x460_460_GwnmsleepackType_descriptor(), value);
}
inline bool Gw_nm_0x460_460_GwnmsleepackType_Parse(
    const ::std::string& name, Gw_nm_0x460_460_GwnmsleepackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_nm_0x460_460_GwnmsleepackType>(
    Gw_nm_0x460_460_GwnmsleepackType_descriptor(), name, value);
}
enum Gw_nm_0x460_460_GwnmaliveType {
  Gw_nm_0x460_460_GwnmaliveType_GWNMALIVE_NOT_ACTIVE = 0,
  Gw_nm_0x460_460_GwnmaliveType_GWNMALIVE_ACTIVE = 1
};
bool Gw_nm_0x460_460_GwnmaliveType_IsValid(int value);
const Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_MIN = Gw_nm_0x460_460_GwnmaliveType_GWNMALIVE_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_MAX = Gw_nm_0x460_460_GwnmaliveType_GWNMALIVE_ACTIVE;
const int Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_ARRAYSIZE = Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmaliveType_descriptor();
inline const ::std::string& Gw_nm_0x460_460_GwnmaliveType_Name(Gw_nm_0x460_460_GwnmaliveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_nm_0x460_460_GwnmaliveType_descriptor(), value);
}
inline bool Gw_nm_0x460_460_GwnmaliveType_Parse(
    const ::std::string& name, Gw_nm_0x460_460_GwnmaliveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_nm_0x460_460_GwnmaliveType>(
    Gw_nm_0x460_460_GwnmaliveType_descriptor(), name, value);
}
enum Gw_nm_0x460_460_GwnmringType {
  Gw_nm_0x460_460_GwnmringType_GWNMRING_NOT_ACTIVE = 0,
  Gw_nm_0x460_460_GwnmringType_GWNMRING_ACTIVE = 1
};
bool Gw_nm_0x460_460_GwnmringType_IsValid(int value);
const Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460_GwnmringType_GwnmringType_MIN = Gw_nm_0x460_460_GwnmringType_GWNMRING_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460_GwnmringType_GwnmringType_MAX = Gw_nm_0x460_460_GwnmringType_GWNMRING_ACTIVE;
const int Gw_nm_0x460_460_GwnmringType_GwnmringType_ARRAYSIZE = Gw_nm_0x460_460_GwnmringType_GwnmringType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmringType_descriptor();
inline const ::std::string& Gw_nm_0x460_460_GwnmringType_Name(Gw_nm_0x460_460_GwnmringType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_nm_0x460_460_GwnmringType_descriptor(), value);
}
inline bool Gw_nm_0x460_460_GwnmringType_Parse(
    const ::std::string& name, Gw_nm_0x460_460_GwnmringType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_nm_0x460_460_GwnmringType>(
    Gw_nm_0x460_460_GwnmringType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_sassoftlimitrightflgType {
  Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_NO_LEARNED = 0,
  Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS = 1,
  Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_LEARNED = 2,
  Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_RESERVED = 3
};
bool Eps_0x260_260_Eps_sassoftlimitrightflgType_IsValid(int value);
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_MIN = Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_NO_LEARNED;
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_MAX = Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_RESERVED;
const int Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_ARRAYSIZE = Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_sassoftlimitrightflgType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_sassoftlimitrightflgType_Name(Eps_0x260_260_Eps_sassoftlimitrightflgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_sassoftlimitrightflgType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_sassoftlimitrightflgType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_sassoftlimitrightflgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_sassoftlimitrightflgType>(
    Eps_0x260_260_Eps_sassoftlimitrightflgType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencypowerlimitType {
  Eps_0x260_260_Eps_st_emergencypowerlimitType_EPS_ST_EMERGENCYPOWERLIMIT_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencypowerlimitType_EPS_ST_EMERGENCYPOWERLIMIT_POWER_DENSITY_LIMIT = 1
};
bool Eps_0x260_260_Eps_st_emergencypowerlimitType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_MIN = Eps_0x260_260_Eps_st_emergencypowerlimitType_EPS_ST_EMERGENCYPOWERLIMIT_NORMAL;
const Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_MAX = Eps_0x260_260_Eps_st_emergencypowerlimitType_EPS_ST_EMERGENCYPOWERLIMIT_POWER_DENSITY_LIMIT;
const int Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencypowerlimitType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencypowerlimitType_Name(Eps_0x260_260_Eps_st_emergencypowerlimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencypowerlimitType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencypowerlimitType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencypowerlimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencypowerlimitType>(
    Eps_0x260_260_Eps_st_emergencypowerlimitType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencymotorType {
  Eps_0x260_260_Eps_st_emergencymotorType_EPS_ST_EMERGENCYMOTOR_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencymotorType_EPS_ST_EMERGENCYMOTOR_SERVO_MOTOR_FAULT = 1
};
bool Eps_0x260_260_Eps_st_emergencymotorType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_MIN = Eps_0x260_260_Eps_st_emergencymotorType_EPS_ST_EMERGENCYMOTOR_NORMAL;
const Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_MAX = Eps_0x260_260_Eps_st_emergencymotorType_EPS_ST_EMERGENCYMOTOR_SERVO_MOTOR_FAULT;
const int Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencymotorType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencymotorType_Name(Eps_0x260_260_Eps_st_emergencymotorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencymotorType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencymotorType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencymotorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencymotorType>(
    Eps_0x260_260_Eps_st_emergencymotorType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencyecuType {
  Eps_0x260_260_Eps_st_emergencyecuType_EPS_ST_EMERGENCYECU_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencyecuType_EPS_ST_EMERGENCYECU_ECU_INNER_FAULT = 1
};
bool Eps_0x260_260_Eps_st_emergencyecuType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_MIN = Eps_0x260_260_Eps_st_emergencyecuType_EPS_ST_EMERGENCYECU_NORMAL;
const Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_MAX = Eps_0x260_260_Eps_st_emergencyecuType_EPS_ST_EMERGENCYECU_ECU_INNER_FAULT;
const int Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyecuType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencyecuType_Name(Eps_0x260_260_Eps_st_emergencyecuType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencyecuType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencyecuType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencyecuType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencyecuType>(
    Eps_0x260_260_Eps_st_emergencyecuType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencycaninterfaceType {
  Eps_0x260_260_Eps_st_emergencycaninterfaceType_EPS_ST_EMERGENCYCANINTERFACE_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencycaninterfaceType_EPS_ST_EMERGENCYCANINTERFACE_CAN_INTERFACE_IS_FAULT = 1
};
bool Eps_0x260_260_Eps_st_emergencycaninterfaceType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_MIN = Eps_0x260_260_Eps_st_emergencycaninterfaceType_EPS_ST_EMERGENCYCANINTERFACE_NORMAL;
const Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_MAX = Eps_0x260_260_Eps_st_emergencycaninterfaceType_EPS_ST_EMERGENCYCANINTERFACE_CAN_INTERFACE_IS_FAULT;
const int Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencycaninterfaceType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencycaninterfaceType_Name(Eps_0x260_260_Eps_st_emergencycaninterfaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencycaninterfaceType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencycaninterfaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencycaninterfaceType>(
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencysensorType {
  Eps_0x260_260_Eps_st_emergencysensorType_EPS_ST_EMERGENCYSENSOR_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencysensorType_EPS_ST_EMERGENCYSENSOR_SENSOR_IS_FAULT = 1
};
bool Eps_0x260_260_Eps_st_emergencysensorType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_MIN = Eps_0x260_260_Eps_st_emergencysensorType_EPS_ST_EMERGENCYSENSOR_NORMAL;
const Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_MAX = Eps_0x260_260_Eps_st_emergencysensorType_EPS_ST_EMERGENCYSENSOR_SENSOR_IS_FAULT;
const int Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencysensorType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencysensorType_Name(Eps_0x260_260_Eps_st_emergencysensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencysensorType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencysensorType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencysensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencysensorType>(
    Eps_0x260_260_Eps_st_emergencysensorType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencyovertempType {
  Eps_0x260_260_Eps_st_emergencyovertempType_EPS_ST_EMERGENCYOVERTEMP_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencyovertempType_EPS_ST_EMERGENCYOVERTEMP_OVER_TEMPERATURE = 1
};
bool Eps_0x260_260_Eps_st_emergencyovertempType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_MIN = Eps_0x260_260_Eps_st_emergencyovertempType_EPS_ST_EMERGENCYOVERTEMP_NORMAL;
const Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_MAX = Eps_0x260_260_Eps_st_emergencyovertempType_EPS_ST_EMERGENCYOVERTEMP_OVER_TEMPERATURE;
const int Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyovertempType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencyovertempType_Name(Eps_0x260_260_Eps_st_emergencyovertempType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencyovertempType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencyovertempType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencyovertempType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencyovertempType>(
    Eps_0x260_260_Eps_st_emergencyovertempType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencyovervoltageType {
  Eps_0x260_260_Eps_st_emergencyovervoltageType_EPS_ST_EMERGENCYOVERVOLTAGE_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencyovervoltageType_EPS_ST_EMERGENCYOVERVOLTAGE_OVER_VOLTAGE = 1
};
bool Eps_0x260_260_Eps_st_emergencyovervoltageType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_MIN = Eps_0x260_260_Eps_st_emergencyovervoltageType_EPS_ST_EMERGENCYOVERVOLTAGE_NORMAL;
const Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_MAX = Eps_0x260_260_Eps_st_emergencyovervoltageType_EPS_ST_EMERGENCYOVERVOLTAGE_OVER_VOLTAGE;
const int Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyovervoltageType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencyovervoltageType_Name(Eps_0x260_260_Eps_st_emergencyovervoltageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencyovervoltageType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencyovervoltageType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencyovervoltageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencyovervoltageType>(
    Eps_0x260_260_Eps_st_emergencyovervoltageType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_emergencyundervoltageType {
  Eps_0x260_260_Eps_st_emergencyundervoltageType_EPS_ST_EMERGENCYUNDERVOLTAGE_NORMAL = 0,
  Eps_0x260_260_Eps_st_emergencyundervoltageType_EPS_ST_EMERGENCYUNDERVOLTAGE_UNDER_VOLTAGE = 1
};
bool Eps_0x260_260_Eps_st_emergencyundervoltageType_IsValid(int value);
const Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_MIN = Eps_0x260_260_Eps_st_emergencyundervoltageType_EPS_ST_EMERGENCYUNDERVOLTAGE_NORMAL;
const Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_MAX = Eps_0x260_260_Eps_st_emergencyundervoltageType_EPS_ST_EMERGENCYUNDERVOLTAGE_UNDER_VOLTAGE;
const int Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_ARRAYSIZE = Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyundervoltageType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_emergencyundervoltageType_Name(Eps_0x260_260_Eps_st_emergencyundervoltageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_emergencyundervoltageType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_emergencyundervoltageType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_emergencyundervoltageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_emergencyundervoltageType>(
    Eps_0x260_260_Eps_st_emergencyundervoltageType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_f_ecutempvalidType {
  Eps_0x260_260_Eps_f_ecutempvalidType_EPS_F_ECUTEMPVALID_INVALID = 0,
  Eps_0x260_260_Eps_f_ecutempvalidType_EPS_F_ECUTEMPVALID_VALID = 1
};
bool Eps_0x260_260_Eps_f_ecutempvalidType_IsValid(int value);
const Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_MIN = Eps_0x260_260_Eps_f_ecutempvalidType_EPS_F_ECUTEMPVALID_INVALID;
const Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_MAX = Eps_0x260_260_Eps_f_ecutempvalidType_EPS_F_ECUTEMPVALID_VALID;
const int Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_ARRAYSIZE = Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_f_ecutempvalidType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_f_ecutempvalidType_Name(Eps_0x260_260_Eps_f_ecutempvalidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_f_ecutempvalidType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_f_ecutempvalidType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_f_ecutempvalidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_f_ecutempvalidType>(
    Eps_0x260_260_Eps_f_ecutempvalidType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_sassoftlimitleftflgType {
  Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_NO_LEARNED = 0,
  Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS = 1,
  Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_LEARNED = 2,
  Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_RESERVED = 3
};
bool Eps_0x260_260_Eps_sassoftlimitleftflgType_IsValid(int value);
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_MIN = Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_NO_LEARNED;
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_MAX = Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_RESERVED;
const int Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_ARRAYSIZE = Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_sassoftlimitleftflgType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_sassoftlimitleftflgType_Name(Eps_0x260_260_Eps_sassoftlimitleftflgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_sassoftlimitleftflgType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_sassoftlimitleftflgType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_sassoftlimitleftflgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_sassoftlimitleftflgType>(
    Eps_0x260_260_Eps_sassoftlimitleftflgType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_st_dtcflagType {
  Eps_0x260_260_Eps_st_dtcflagType_EPS_ST_DTCFLAG_NO_DTC_EXIST = 0,
  Eps_0x260_260_Eps_st_dtcflagType_EPS_ST_DTCFLAG_DTC_EXIST = 1
};
bool Eps_0x260_260_Eps_st_dtcflagType_IsValid(int value);
const Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_MIN = Eps_0x260_260_Eps_st_dtcflagType_EPS_ST_DTCFLAG_NO_DTC_EXIST;
const Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_MAX = Eps_0x260_260_Eps_st_dtcflagType_EPS_ST_DTCFLAG_DTC_EXIST;
const int Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_ARRAYSIZE = Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_dtcflagType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_st_dtcflagType_Name(Eps_0x260_260_Eps_st_dtcflagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_st_dtcflagType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_st_dtcflagType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_st_dtcflagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_st_dtcflagType>(
    Eps_0x260_260_Eps_st_dtcflagType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_sasindexstsType {
  Eps_0x260_260_Eps_sasindexstsType_EPS_SASINDEXSTS_STEERWHEEL_NOT_AT_MIDDLE_POSITION = 0,
  Eps_0x260_260_Eps_sasindexstsType_EPS_SASINDEXSTS_STEERWHEEL_AT_MIDDLE_POSITION = 1
};
bool Eps_0x260_260_Eps_sasindexstsType_IsValid(int value);
const Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_MIN = Eps_0x260_260_Eps_sasindexstsType_EPS_SASINDEXSTS_STEERWHEEL_NOT_AT_MIDDLE_POSITION;
const Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_MAX = Eps_0x260_260_Eps_sasindexstsType_EPS_SASINDEXSTS_STEERWHEEL_AT_MIDDLE_POSITION;
const int Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_ARRAYSIZE = Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_sasindexstsType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_sasindexstsType_Name(Eps_0x260_260_Eps_sasindexstsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_sasindexstsType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_sasindexstsType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_sasindexstsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_sasindexstsType>(
    Eps_0x260_260_Eps_sasindexstsType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_s_warninglampyellowType {
  Eps_0x260_260_Eps_s_warninglampyellowType_EPS_S_WARNINGLAMPYELLOW_CLOSE = 0,
  Eps_0x260_260_Eps_s_warninglampyellowType_EPS_S_WARNINGLAMPYELLOW_OPEN = 1
};
bool Eps_0x260_260_Eps_s_warninglampyellowType_IsValid(int value);
const Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_MIN = Eps_0x260_260_Eps_s_warninglampyellowType_EPS_S_WARNINGLAMPYELLOW_CLOSE;
const Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_MAX = Eps_0x260_260_Eps_s_warninglampyellowType_EPS_S_WARNINGLAMPYELLOW_OPEN;
const int Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_ARRAYSIZE = Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_s_warninglampyellowType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_s_warninglampyellowType_Name(Eps_0x260_260_Eps_s_warninglampyellowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_s_warninglampyellowType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_s_warninglampyellowType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_s_warninglampyellowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_s_warninglampyellowType>(
    Eps_0x260_260_Eps_s_warninglampyellowType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_s_safelampredType {
  Eps_0x260_260_Eps_s_safelampredType_EPS_S_SAFELAMPRED_CLOSE = 0,
  Eps_0x260_260_Eps_s_safelampredType_EPS_S_SAFELAMPRED_OPEN = 1
};
bool Eps_0x260_260_Eps_s_safelampredType_IsValid(int value);
const Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_MIN = Eps_0x260_260_Eps_s_safelampredType_EPS_S_SAFELAMPRED_CLOSE;
const Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_MAX = Eps_0x260_260_Eps_s_safelampredType_EPS_S_SAFELAMPRED_OPEN;
const int Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_ARRAYSIZE = Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_s_safelampredType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_s_safelampredType_Name(Eps_0x260_260_Eps_s_safelampredType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_s_safelampredType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_s_safelampredType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_s_safelampredType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_s_safelampredType>(
    Eps_0x260_260_Eps_s_safelampredType_descriptor(), name, value);
}
enum Eps_0x260_260_Eps_f_loadinfoType {
  Eps_0x260_260_Eps_f_loadinfoType_EPS_F_LOADINFO_NO_FAULT = 0,
  Eps_0x260_260_Eps_f_loadinfoType_EPS_F_LOADINFO_FAULT = 1
};
bool Eps_0x260_260_Eps_f_loadinfoType_IsValid(int value);
const Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_MIN = Eps_0x260_260_Eps_f_loadinfoType_EPS_F_LOADINFO_NO_FAULT;
const Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_MAX = Eps_0x260_260_Eps_f_loadinfoType_EPS_F_LOADINFO_FAULT;
const int Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_ARRAYSIZE = Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_f_loadinfoType_descriptor();
inline const ::std::string& Eps_0x260_260_Eps_f_loadinfoType_Name(Eps_0x260_260_Eps_f_loadinfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Eps_0x260_260_Eps_f_loadinfoType_descriptor(), value);
}
inline bool Eps_0x260_260_Eps_f_loadinfoType_Parse(
    const ::std::string& name, Eps_0x260_260_Eps_f_loadinfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Eps_0x260_260_Eps_f_loadinfoType>(
    Eps_0x260_260_Eps_f_loadinfoType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_lca_warningreqrightType {
  Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_NO_WARNING = 0,
  Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_1 = 1,
  Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_2 = 2,
  Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_RESERVED = 3
};
bool Sod_0x275_275_Sod_lca_warningreqrightType_IsValid(int value);
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_MIN = Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_NO_WARNING;
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_MAX = Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_RESERVED;
const int Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_ARRAYSIZE = Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_lca_warningreqrightType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_lca_warningreqrightType_Name(Sod_0x275_275_Sod_lca_warningreqrightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_lca_warningreqrightType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_lca_warningreqrightType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_lca_warningreqrightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_lca_warningreqrightType>(
    Sod_0x275_275_Sod_lca_warningreqrightType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_blis_activeType {
  Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_NO_ACTIVE = 0,
  Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_STANBY = 1,
  Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_ACTIVE = 2,
  Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_FAIL = 3
};
bool Sod_0x275_275_Sod_blis_activeType_IsValid(int value);
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_MIN = Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_NO_ACTIVE;
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_MAX = Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_FAIL;
const int Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_ARRAYSIZE = Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_blis_activeType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_blis_activeType_Name(Sod_0x275_275_Sod_blis_activeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_blis_activeType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_blis_activeType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_blis_activeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_blis_activeType>(
    Sod_0x275_275_Sod_blis_activeType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_blis_displayType {
  Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_NO_DISPLAY = 0,
  Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_ERROR = 1,
  Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_BLINDNESS = 2,
  Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_UNCALIBRATION = 3,
  Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_TEMPORARY_ERROR = 4,
  Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_RESERVED = 5
};
bool Sod_0x275_275_Sod_blis_displayType_IsValid(int value);
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_MIN = Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_NO_DISPLAY;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_MAX = Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_RESERVED;
const int Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_ARRAYSIZE = Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_blis_displayType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_blis_displayType_Name(Sod_0x275_275_Sod_blis_displayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_blis_displayType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_blis_displayType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_blis_displayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_blis_displayType>(
    Sod_0x275_275_Sod_blis_displayType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_lca_warningreqleftType {
  Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_NO_WARNING = 0,
  Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_1 = 1,
  Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_2 = 2,
  Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_RESERVED = 3
};
bool Sod_0x275_275_Sod_lca_warningreqleftType_IsValid(int value);
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_MIN = Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_NO_WARNING;
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_MAX = Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_RESERVED;
const int Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_ARRAYSIZE = Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_lca_warningreqleftType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_lca_warningreqleftType_Name(Sod_0x275_275_Sod_lca_warningreqleftType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_lca_warningreqleftType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_lca_warningreqleftType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_lca_warningreqleftType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_lca_warningreqleftType>(
    Sod_0x275_275_Sod_lca_warningreqleftType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_doa_warningreqleftrearType {
  Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_NO_WARNING = 0,
  Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_1 = 1,
  Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_2 = 2,
  Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_RESERVED = 3
};
bool Sod_0x275_275_Sod_doa_warningreqleftrearType_IsValid(int value);
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_MIN = Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_MAX = Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_RESERVED;
const int Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_ARRAYSIZE = Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqleftrearType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_doa_warningreqleftrearType_Name(Sod_0x275_275_Sod_doa_warningreqleftrearType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_doa_warningreqleftrearType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_doa_warningreqleftrearType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_doa_warningreqleftrearType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_doa_warningreqleftrearType>(
    Sod_0x275_275_Sod_doa_warningreqleftrearType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_doa_warningreqleftfrontType {
  Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_NO_WARNING = 0,
  Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_1 = 1,
  Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_2 = 2,
  Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_RESERVED = 3
};
bool Sod_0x275_275_Sod_doa_warningreqleftfrontType_IsValid(int value);
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_MIN = Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_MAX = Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_RESERVED;
const int Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_ARRAYSIZE = Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqleftfrontType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_doa_warningreqleftfrontType_Name(Sod_0x275_275_Sod_doa_warningreqleftfrontType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_doa_warningreqleftfrontType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_doa_warningreqleftfrontType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_doa_warningreqleftfrontType>(
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_cta_warningreqleftType {
  Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_NO_WARNING = 0,
  Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_RESERVED = 1,
  Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_WARNING_LEVEL_2 = 2
};
bool Sod_0x275_275_Sod_cta_warningreqleftType_IsValid(int value);
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_MIN = Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_NO_WARNING;
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_MAX = Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_WARNING_LEVEL_2;
const int Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_ARRAYSIZE = Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_cta_warningreqleftType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_cta_warningreqleftType_Name(Sod_0x275_275_Sod_cta_warningreqleftType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_cta_warningreqleftType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_cta_warningreqleftType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_cta_warningreqleftType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_cta_warningreqleftType>(
    Sod_0x275_275_Sod_cta_warningreqleftType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_doa_stateType {
  Sod_0x275_275_Sod_doa_stateType_SOD_DOA_STATE_INACTIVE = 0,
  Sod_0x275_275_Sod_doa_stateType_SOD_DOA_STATE_ACTIVE = 1
};
bool Sod_0x275_275_Sod_doa_stateType_IsValid(int value);
const Sod_0x275_275_Sod_doa_stateType Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_MIN = Sod_0x275_275_Sod_doa_stateType_SOD_DOA_STATE_INACTIVE;
const Sod_0x275_275_Sod_doa_stateType Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_MAX = Sod_0x275_275_Sod_doa_stateType_SOD_DOA_STATE_ACTIVE;
const int Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_ARRAYSIZE = Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_stateType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_doa_stateType_Name(Sod_0x275_275_Sod_doa_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_doa_stateType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_doa_stateType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_doa_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_doa_stateType>(
    Sod_0x275_275_Sod_doa_stateType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_cta_stateType {
  Sod_0x275_275_Sod_cta_stateType_SOD_CTA_STATE_INACTIVE = 0,
  Sod_0x275_275_Sod_cta_stateType_SOD_CTA_STATE_ACTIVE = 1
};
bool Sod_0x275_275_Sod_cta_stateType_IsValid(int value);
const Sod_0x275_275_Sod_cta_stateType Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_MIN = Sod_0x275_275_Sod_cta_stateType_SOD_CTA_STATE_INACTIVE;
const Sod_0x275_275_Sod_cta_stateType Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_MAX = Sod_0x275_275_Sod_cta_stateType_SOD_CTA_STATE_ACTIVE;
const int Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_ARRAYSIZE = Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_cta_stateType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_cta_stateType_Name(Sod_0x275_275_Sod_cta_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_cta_stateType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_cta_stateType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_cta_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_cta_stateType>(
    Sod_0x275_275_Sod_cta_stateType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_sodlca_stateType {
  Sod_0x275_275_Sod_sodlca_stateType_SOD_SODLCA_STATE_INACTIVE = 0,
  Sod_0x275_275_Sod_sodlca_stateType_SOD_SODLCA_STATE_ACTIVE = 1
};
bool Sod_0x275_275_Sod_sodlca_stateType_IsValid(int value);
const Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_MIN = Sod_0x275_275_Sod_sodlca_stateType_SOD_SODLCA_STATE_INACTIVE;
const Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_MAX = Sod_0x275_275_Sod_sodlca_stateType_SOD_SODLCA_STATE_ACTIVE;
const int Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_ARRAYSIZE = Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_sodlca_stateType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_sodlca_stateType_Name(Sod_0x275_275_Sod_sodlca_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_sodlca_stateType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_sodlca_stateType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_sodlca_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_sodlca_stateType>(
    Sod_0x275_275_Sod_sodlca_stateType_descriptor(), name, value);
}
enum Sod_0x275_275_Doa_offtelltaleType {
  Sod_0x275_275_Doa_offtelltaleType_DOA_OFFTELLTALE_OFFTELLTLAE_OFF = 0,
  Sod_0x275_275_Doa_offtelltaleType_DOA_OFFTELLTALE_OFFTELLTALE_ON = 1
};
bool Sod_0x275_275_Doa_offtelltaleType_IsValid(int value);
const Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_MIN = Sod_0x275_275_Doa_offtelltaleType_DOA_OFFTELLTALE_OFFTELLTLAE_OFF;
const Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_MAX = Sod_0x275_275_Doa_offtelltaleType_DOA_OFFTELLTALE_OFFTELLTALE_ON;
const int Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_ARRAYSIZE = Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Doa_offtelltaleType_descriptor();
inline const ::std::string& Sod_0x275_275_Doa_offtelltaleType_Name(Sod_0x275_275_Doa_offtelltaleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Doa_offtelltaleType_descriptor(), value);
}
inline bool Sod_0x275_275_Doa_offtelltaleType_Parse(
    const ::std::string& name, Sod_0x275_275_Doa_offtelltaleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Doa_offtelltaleType>(
    Sod_0x275_275_Doa_offtelltaleType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_doa_warningreqrightrearType {
  Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_NO_WARNING = 0,
  Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_1 = 1,
  Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_2 = 2,
  Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_RESERVED = 3
};
bool Sod_0x275_275_Sod_doa_warningreqrightrearType_IsValid(int value);
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_MIN = Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_MAX = Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_RESERVED;
const int Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_ARRAYSIZE = Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqrightrearType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_doa_warningreqrightrearType_Name(Sod_0x275_275_Sod_doa_warningreqrightrearType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_doa_warningreqrightrearType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_doa_warningreqrightrearType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_doa_warningreqrightrearType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_doa_warningreqrightrearType>(
    Sod_0x275_275_Sod_doa_warningreqrightrearType_descriptor(), name, value);
}
enum Sod_0x275_275_Cta_offtelltaleType {
  Sod_0x275_275_Cta_offtelltaleType_CTA_OFFTELLTALE_OFFTELLTLAE_OFF = 0,
  Sod_0x275_275_Cta_offtelltaleType_CTA_OFFTELLTALE_OFFTELLTALE_ON = 1
};
bool Sod_0x275_275_Cta_offtelltaleType_IsValid(int value);
const Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_MIN = Sod_0x275_275_Cta_offtelltaleType_CTA_OFFTELLTALE_OFFTELLTLAE_OFF;
const Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_MAX = Sod_0x275_275_Cta_offtelltaleType_CTA_OFFTELLTALE_OFFTELLTALE_ON;
const int Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_ARRAYSIZE = Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Cta_offtelltaleType_descriptor();
inline const ::std::string& Sod_0x275_275_Cta_offtelltaleType_Name(Sod_0x275_275_Cta_offtelltaleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Cta_offtelltaleType_descriptor(), value);
}
inline bool Sod_0x275_275_Cta_offtelltaleType_Parse(
    const ::std::string& name, Sod_0x275_275_Cta_offtelltaleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Cta_offtelltaleType>(
    Sod_0x275_275_Cta_offtelltaleType_descriptor(), name, value);
}
enum Sod_0x275_275_Sodlca_offtelltaleType {
  Sod_0x275_275_Sodlca_offtelltaleType_SODLCA_OFFTELLTALE_OFFTELLTLAE_OFF = 0,
  Sod_0x275_275_Sodlca_offtelltaleType_SODLCA_OFFTELLTALE_OFFTELLTALE_ON = 1
};
bool Sod_0x275_275_Sodlca_offtelltaleType_IsValid(int value);
const Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_MIN = Sod_0x275_275_Sodlca_offtelltaleType_SODLCA_OFFTELLTALE_OFFTELLTLAE_OFF;
const Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_MAX = Sod_0x275_275_Sodlca_offtelltaleType_SODLCA_OFFTELLTALE_OFFTELLTALE_ON;
const int Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_ARRAYSIZE = Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sodlca_offtelltaleType_descriptor();
inline const ::std::string& Sod_0x275_275_Sodlca_offtelltaleType_Name(Sod_0x275_275_Sodlca_offtelltaleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sodlca_offtelltaleType_descriptor(), value);
}
inline bool Sod_0x275_275_Sodlca_offtelltaleType_Parse(
    const ::std::string& name, Sod_0x275_275_Sodlca_offtelltaleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sodlca_offtelltaleType>(
    Sod_0x275_275_Sodlca_offtelltaleType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_doa_warningreqrightfrontType {
  Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_NO_WARNING = 0,
  Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_1 = 1,
  Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_2 = 2,
  Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_RESERVED = 3
};
bool Sod_0x275_275_Sod_doa_warningreqrightfrontType_IsValid(int value);
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_MIN = Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_MAX = Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_RESERVED;
const int Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_ARRAYSIZE = Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqrightfrontType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_doa_warningreqrightfrontType_Name(Sod_0x275_275_Sod_doa_warningreqrightfrontType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_doa_warningreqrightfrontType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_doa_warningreqrightfrontType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_doa_warningreqrightfrontType>(
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_cta_warningreqrightType {
  Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_NO_WARNING = 0,
  Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_RESERVED = 1,
  Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_WARNING_LEVEL_2 = 2
};
bool Sod_0x275_275_Sod_cta_warningreqrightType_IsValid(int value);
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_MIN = Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_NO_WARNING;
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_MAX = Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_WARNING_LEVEL_2;
const int Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_ARRAYSIZE = Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_cta_warningreqrightType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_cta_warningreqrightType_Name(Sod_0x275_275_Sod_cta_warningreqrightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_cta_warningreqrightType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_cta_warningreqrightType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_cta_warningreqrightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_cta_warningreqrightType>(
    Sod_0x275_275_Sod_cta_warningreqrightType_descriptor(), name, value);
}
enum Sod_0x275_275_Sod_autoalignmentflagType {
  Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_NO_SUCCESS = 0,
  Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_SUCCESSFUL = 1,
  Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_RESERVED = 3
};
bool Sod_0x275_275_Sod_autoalignmentflagType_IsValid(int value);
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_MIN = Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_NO_SUCCESS;
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_MAX = Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_RESERVED;
const int Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_ARRAYSIZE = Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_autoalignmentflagType_descriptor();
inline const ::std::string& Sod_0x275_275_Sod_autoalignmentflagType_Name(Sod_0x275_275_Sod_autoalignmentflagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sod_0x275_275_Sod_autoalignmentflagType_descriptor(), value);
}
inline bool Sod_0x275_275_Sod_autoalignmentflagType_Parse(
    const ::std::string& name, Sod_0x275_275_Sod_autoalignmentflagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sod_0x275_275_Sod_autoalignmentflagType>(
    Sod_0x275_275_Sod_autoalignmentflagType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType {
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_NO_WARNING = 0,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING = 1,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARNING = 2,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED = 3,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOST_SENSOR = 4,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_SENSOR_BATTERY_LOW = 5,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED = 6,
  Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED = 7
};
bool Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_MIN = Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_MAX = Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const int Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Name(Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType>(
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType {
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_NO_WARNING = 0,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING = 1,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARNING = 2,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED = 3,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOST_SENSOR = 4,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_SENSOR_BATTERY_LOW = 5,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED = 6,
  Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED = 7
};
bool Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_MIN = Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_MAX = Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const int Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Name(Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType>(
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_system_statusType {
  Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_NO_ANY_ERROR = 0,
  Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_SYSTEM_ERROR = 1,
  Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_SYETEM_WAIT_FOR_LEARNING = 2,
  Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_WINTER_MODE = 3
};
bool Gw_tpms_tire_0x361_361_Tpms_system_statusType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_MIN = Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_NO_ANY_ERROR;
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_MAX = Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_WINTER_MODE;
const int Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_system_statusType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_system_statusType_Name(Gw_tpms_tire_0x361_361_Tpms_system_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_system_statusType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_system_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_system_statusType>(
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType {
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_NO_WARNING = 0,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING = 1,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARNING = 2,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED = 3,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOST_SENSOR = 4,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_SENSOR_BATTERY_LOW = 5,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED = 6,
  Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED = 7
};
bool Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_MIN = Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_MAX = Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const int Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Name(Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType>(
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType {
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_NO_WARNING = 0,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING = 1,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARNING = 2,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED = 3,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOST_SENSOR = 4,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_SENSOR_BATTERY_LOW = 5,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED = 6,
  Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED = 7
};
bool Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_MIN = Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_MAX = Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const int Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Name(Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType>(
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_temperature_warningType {
  Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_TPMS_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING = 0,
  Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_TPMS_TEMPERATURE_WARNING_TEMPERATURE_WARNING = 1
};
bool Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_MIN = Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_TPMS_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_MAX = Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_TPMS_TEMPERATURE_WARNING_TEMPERATURE_WARNING;
const int Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Name(Gw_tpms_tire_0x361_361_Tpms_temperature_warningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_temperature_warningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_temperature_warningType>(
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_resrvedType {
  Gw_tpms_tire_0x361_361_Tpms_resrvedType_TPMS_RESRVED_RESERVED = 0,
  Gw_tpms_tire_0x361_361_Tpms_resrvedType_TPMS_RESRVED_RESERVED1 = 1
};
bool Gw_tpms_tire_0x361_361_Tpms_resrvedType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_MIN = Gw_tpms_tire_0x361_361_Tpms_resrvedType_TPMS_RESRVED_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_MAX = Gw_tpms_tire_0x361_361_Tpms_resrvedType_TPMS_RESRVED_RESERVED1;
const int Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_resrvedType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_resrvedType_Name(Gw_tpms_tire_0x361_361_Tpms_resrvedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_resrvedType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_resrvedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_resrvedType>(
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tire_positionType {
  Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_NO_ANY_SENSOR_ERROR = 0,
  Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_LEFT_FRONT_TIRE = 1,
  Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RIGHT_FRONT_TIRE = 2,
  Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RIGHT_REAR_TIRE = 3,
  Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_LEFT_REAR_TIRE = 4,
  Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RESERVED = 5
};
bool Gw_tpms_tire_0x361_361_Tire_positionType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_MIN = Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_NO_ANY_SENSOR_ERROR;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_MAX = Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RESERVED;
const int Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tire_positionType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tire_positionType_Name(Gw_tpms_tire_0x361_361_Tire_positionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tire_positionType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tire_positionType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tire_positionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tire_positionType>(
    Gw_tpms_tire_0x361_361_Tire_positionType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_lamp_statusType {
  Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_NO_LAMP_LIGHT = 0,
  Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_LAMP_FLASH = 1,
  Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_LAMP_LIGHT = 2,
  Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_RESEVED = 3
};
bool Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_MIN = Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_NO_LAMP_LIGHT;
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_MAX = Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_RESEVED;
const int Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Name(Gw_tpms_tire_0x361_361_Tpms_lamp_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_lamp_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_lamp_statusType>(
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_descriptor(), name, value);
}
enum Gw_tpms_tire_0x361_361_Tpms_al_stateType {
  Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_DEFAULTS = 0,
  Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_SELF_LEARNING = 1,
  Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_SELF_LEARNING_OVER = 2,
  Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_RESERVE = 3
};
bool Gw_tpms_tire_0x361_361_Tpms_al_stateType_IsValid(int value);
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_MIN = Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_DEFAULTS;
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_MAX = Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_RESERVE;
const int Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_ARRAYSIZE = Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_al_stateType_descriptor();
inline const ::std::string& Gw_tpms_tire_0x361_361_Tpms_al_stateType_Name(Gw_tpms_tire_0x361_361_Tpms_al_stateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_descriptor(), value);
}
inline bool Gw_tpms_tire_0x361_361_Tpms_al_stateType_Parse(
    const ::std::string& name, Gw_tpms_tire_0x361_361_Tpms_al_stateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gw_tpms_tire_0x361_361_Tpms_al_stateType>(
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_descriptor(), name, value);
}
enum Ins_datainfo_506_Ins_car_statusType {
  Ins_datainfo_506_Ins_car_statusType_INS_CAR_STATUS_RECEIVEWHEELSPEED = 0,
  Ins_datainfo_506_Ins_car_statusType_INS_CAR_STATUS_NORECEIVE = 1
};
bool Ins_datainfo_506_Ins_car_statusType_IsValid(int value);
const Ins_datainfo_506_Ins_car_statusType Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_MIN = Ins_datainfo_506_Ins_car_statusType_INS_CAR_STATUS_RECEIVEWHEELSPEED;
const Ins_datainfo_506_Ins_car_statusType Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_MAX = Ins_datainfo_506_Ins_car_statusType_INS_CAR_STATUS_NORECEIVE;
const int Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_ARRAYSIZE = Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ins_datainfo_506_Ins_car_statusType_descriptor();
inline const ::std::string& Ins_datainfo_506_Ins_car_statusType_Name(Ins_datainfo_506_Ins_car_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ins_datainfo_506_Ins_car_statusType_descriptor(), value);
}
inline bool Ins_datainfo_506_Ins_car_statusType_Parse(
    const ::std::string& name, Ins_datainfo_506_Ins_car_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ins_datainfo_506_Ins_car_statusType>(
    Ins_datainfo_506_Ins_car_statusType_descriptor(), name, value);
}
enum Ins_datainfo_506_Ins_statusType {
  Ins_datainfo_506_Ins_statusType_INS_STATUS_NONE = 0,
  Ins_datainfo_506_Ins_statusType_INS_STATUS_ATTITUDEINITIALIZATION = 1,
  Ins_datainfo_506_Ins_statusType_INS_STATUS_NAVIGATION = 2
};
bool Ins_datainfo_506_Ins_statusType_IsValid(int value);
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506_Ins_statusType_Ins_statusType_MIN = Ins_datainfo_506_Ins_statusType_INS_STATUS_NONE;
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506_Ins_statusType_Ins_statusType_MAX = Ins_datainfo_506_Ins_statusType_INS_STATUS_NAVIGATION;
const int Ins_datainfo_506_Ins_statusType_Ins_statusType_ARRAYSIZE = Ins_datainfo_506_Ins_statusType_Ins_statusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ins_datainfo_506_Ins_statusType_descriptor();
inline const ::std::string& Ins_datainfo_506_Ins_statusType_Name(Ins_datainfo_506_Ins_statusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ins_datainfo_506_Ins_statusType_descriptor(), value);
}
inline bool Ins_datainfo_506_Ins_statusType_Parse(
    const ::std::string& name, Ins_datainfo_506_Ins_statusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ins_datainfo_506_Ins_statusType>(
    Ins_datainfo_506_Ins_statusType_descriptor(), name, value);
}
// ===================================================================

class Abs_whlspd_0x211_211 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Abs_whlspd_0x211_211) */ {
 public:
  Abs_whlspd_0x211_211();
  virtual ~Abs_whlspd_0x211_211();

  Abs_whlspd_0x211_211(const Abs_whlspd_0x211_211& from);

  inline Abs_whlspd_0x211_211& operator=(const Abs_whlspd_0x211_211& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Abs_whlspd_0x211_211& default_instance();

  static inline const Abs_whlspd_0x211_211* internal_default_instance() {
    return reinterpret_cast<const Abs_whlspd_0x211_211*>(
               &_Abs_whlspd_0x211_211_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Abs_whlspd_0x211_211* other);

  // implements Message ----------------------------------------------

  inline Abs_whlspd_0x211_211* New() const PROTOBUF_FINAL { return New(NULL); }

  Abs_whlspd_0x211_211* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Abs_whlspd_0x211_211& from);
  void MergeFrom(const Abs_whlspd_0x211_211& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Abs_whlspd_0x211_211* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspdreristatusType;
  static const Abs_whlspdreristatusType ABS_WHLSPDRERISTATUS_VALID =
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_VALID;
  static const Abs_whlspdreristatusType ABS_WHLSPDRERISTATUS_INVALID =
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_ABS_WHLSPDRERISTATUS_INVALID;
  static inline bool Abs_whlspdreristatusType_IsValid(int value) {
    return Abs_whlspd_0x211_211_Abs_whlspdreristatusType_IsValid(value);
  }
  static const Abs_whlspdreristatusType Abs_whlspdreristatusType_MIN =
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MIN;
  static const Abs_whlspdreristatusType Abs_whlspdreristatusType_MAX =
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_MAX;
  static const int Abs_whlspdreristatusType_ARRAYSIZE =
    Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Abs_whlspdreristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdreristatusType_descriptor() {
    return Abs_whlspd_0x211_211_Abs_whlspdreristatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdreristatusType_Name(Abs_whlspdreristatusType value) {
    return Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Name(value);
  }
  static inline bool Abs_whlspdreristatusType_Parse(const ::std::string& name,
      Abs_whlspdreristatusType* value) {
    return Abs_whlspd_0x211_211_Abs_whlspdreristatusType_Parse(name, value);
  }

  typedef Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspdrelestatusType;
  static const Abs_whlspdrelestatusType ABS_WHLSPDRELESTATUS_VALID =
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_VALID;
  static const Abs_whlspdrelestatusType ABS_WHLSPDRELESTATUS_INVALID =
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_ABS_WHLSPDRELESTATUS_INVALID;
  static inline bool Abs_whlspdrelestatusType_IsValid(int value) {
    return Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_IsValid(value);
  }
  static const Abs_whlspdrelestatusType Abs_whlspdrelestatusType_MIN =
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MIN;
  static const Abs_whlspdrelestatusType Abs_whlspdrelestatusType_MAX =
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_MAX;
  static const int Abs_whlspdrelestatusType_ARRAYSIZE =
    Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Abs_whlspdrelestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdrelestatusType_descriptor() {
    return Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdrelestatusType_Name(Abs_whlspdrelestatusType value) {
    return Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Name(value);
  }
  static inline bool Abs_whlspdrelestatusType_Parse(const ::std::string& name,
      Abs_whlspdrelestatusType* value) {
    return Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_Parse(name, value);
  }

  typedef Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspdfrntristatusType;
  static const Abs_whlspdfrntristatusType ABS_WHLSPDFRNTRISTATUS_VALID =
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_VALID;
  static const Abs_whlspdfrntristatusType ABS_WHLSPDFRNTRISTATUS_INVALID =
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_ABS_WHLSPDFRNTRISTATUS_INVALID;
  static inline bool Abs_whlspdfrntristatusType_IsValid(int value) {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_IsValid(value);
  }
  static const Abs_whlspdfrntristatusType Abs_whlspdfrntristatusType_MIN =
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MIN;
  static const Abs_whlspdfrntristatusType Abs_whlspdfrntristatusType_MAX =
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_MAX;
  static const int Abs_whlspdfrntristatusType_ARRAYSIZE =
    Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Abs_whlspdfrntristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdfrntristatusType_descriptor() {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdfrntristatusType_Name(Abs_whlspdfrntristatusType value) {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Name(value);
  }
  static inline bool Abs_whlspdfrntristatusType_Parse(const ::std::string& name,
      Abs_whlspdfrntristatusType* value) {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_Parse(name, value);
  }

  typedef Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspdfrntlestatusType;
  static const Abs_whlspdfrntlestatusType ABS_WHLSPDFRNTLESTATUS_VALID =
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_VALID;
  static const Abs_whlspdfrntlestatusType ABS_WHLSPDFRNTLESTATUS_INVALID =
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_ABS_WHLSPDFRNTLESTATUS_INVALID;
  static inline bool Abs_whlspdfrntlestatusType_IsValid(int value) {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_IsValid(value);
  }
  static const Abs_whlspdfrntlestatusType Abs_whlspdfrntlestatusType_MIN =
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MIN;
  static const Abs_whlspdfrntlestatusType Abs_whlspdfrntlestatusType_MAX =
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_MAX;
  static const int Abs_whlspdfrntlestatusType_ARRAYSIZE =
    Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Abs_whlspdfrntlestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlspdfrntlestatusType_descriptor() {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlspdfrntlestatusType_Name(Abs_whlspdfrntlestatusType value) {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Name(value);
  }
  static inline bool Abs_whlspdfrntlestatusType_Parse(const ::std::string& name,
      Abs_whlspdfrntlestatusType* value) {
    return Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double abs_whlspdfrntri = 1;
  bool has_abs_whlspdfrntri() const;
  void clear_abs_whlspdfrntri();
  static const int kAbsWhlspdfrntriFieldNumber = 1;
  double abs_whlspdfrntri() const;
  void set_abs_whlspdfrntri(double value);

  // optional double abs_whlspdrele = 2;
  bool has_abs_whlspdrele() const;
  void clear_abs_whlspdrele();
  static const int kAbsWhlspdreleFieldNumber = 2;
  double abs_whlspdrele() const;
  void set_abs_whlspdrele(double value);

  // optional double abs_whlspdreri = 3;
  bool has_abs_whlspdreri() const;
  void clear_abs_whlspdreri();
  static const int kAbsWhlspdreriFieldNumber = 3;
  double abs_whlspdreri() const;
  void set_abs_whlspdreri(double value);

  // optional int32 rollingcounter_0x211 = 4;
  bool has_rollingcounter_0x211() const;
  void clear_rollingcounter_0x211();
  static const int kRollingcounter0X211FieldNumber = 4;
  ::google::protobuf::int32 rollingcounter_0x211() const;
  void set_rollingcounter_0x211(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
  bool has_abs_whlspdreristatus() const;
  void clear_abs_whlspdreristatus();
  static const int kAbsWhlspdreristatusFieldNumber = 5;
  ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType abs_whlspdreristatus() const;
  void set_abs_whlspdreristatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType value);

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
  bool has_abs_whlspdrelestatus() const;
  void clear_abs_whlspdrelestatus();
  static const int kAbsWhlspdrelestatusFieldNumber = 6;
  ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType abs_whlspdrelestatus() const;
  void set_abs_whlspdrelestatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType value);

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
  bool has_abs_whlspdfrntristatus() const;
  void clear_abs_whlspdfrntristatus();
  static const int kAbsWhlspdfrntristatusFieldNumber = 7;
  ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType abs_whlspdfrntristatus() const;
  void set_abs_whlspdfrntristatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType value);

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
  bool has_abs_whlspdfrntlestatus() const;
  void clear_abs_whlspdfrntlestatus();
  static const int kAbsWhlspdfrntlestatusFieldNumber = 8;
  ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus() const;
  void set_abs_whlspdfrntlestatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType value);

  // optional int32 checksum_0x211 = 9;
  bool has_checksum_0x211() const;
  void clear_checksum_0x211();
  static const int kChecksum0X211FieldNumber = 9;
  ::google::protobuf::int32 checksum_0x211() const;
  void set_checksum_0x211(::google::protobuf::int32 value);

  // optional double abs_whlspdfrntle = 10;
  bool has_abs_whlspdfrntle() const;
  void clear_abs_whlspdfrntle();
  static const int kAbsWhlspdfrntleFieldNumber = 10;
  double abs_whlspdfrntle() const;
  void set_abs_whlspdfrntle(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Abs_whlspd_0x211_211)
 private:
  void set_has_abs_whlspdfrntri();
  void clear_has_abs_whlspdfrntri();
  void set_has_abs_whlspdrele();
  void clear_has_abs_whlspdrele();
  void set_has_abs_whlspdreri();
  void clear_has_abs_whlspdreri();
  void set_has_rollingcounter_0x211();
  void clear_has_rollingcounter_0x211();
  void set_has_abs_whlspdreristatus();
  void clear_has_abs_whlspdreristatus();
  void set_has_abs_whlspdrelestatus();
  void clear_has_abs_whlspdrelestatus();
  void set_has_abs_whlspdfrntristatus();
  void clear_has_abs_whlspdfrntristatus();
  void set_has_abs_whlspdfrntlestatus();
  void clear_has_abs_whlspdfrntlestatus();
  void set_has_checksum_0x211();
  void clear_has_checksum_0x211();
  void set_has_abs_whlspdfrntle();
  void clear_has_abs_whlspdfrntle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double abs_whlspdfrntri_;
  double abs_whlspdrele_;
  double abs_whlspdreri_;
  ::google::protobuf::int32 rollingcounter_0x211_;
  int abs_whlspdreristatus_;
  int abs_whlspdrelestatus_;
  int abs_whlspdfrntristatus_;
  int abs_whlspdfrntlestatus_;
  ::google::protobuf::int32 checksum_0x211_;
  double abs_whlspdfrntle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ems_sts_0x151_151 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ems_sts_0x151_151) */ {
 public:
  Gw_ems_sts_0x151_151();
  virtual ~Gw_ems_sts_0x151_151();

  Gw_ems_sts_0x151_151(const Gw_ems_sts_0x151_151& from);

  inline Gw_ems_sts_0x151_151& operator=(const Gw_ems_sts_0x151_151& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ems_sts_0x151_151& default_instance();

  static inline const Gw_ems_sts_0x151_151* internal_default_instance() {
    return reinterpret_cast<const Gw_ems_sts_0x151_151*>(
               &_Gw_ems_sts_0x151_151_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Gw_ems_sts_0x151_151* other);

  // implements Message ----------------------------------------------

  inline Gw_ems_sts_0x151_151* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ems_sts_0x151_151* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ems_sts_0x151_151& from);
  void MergeFrom(const Gw_ems_sts_0x151_151& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ems_sts_0x151_151* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Ems_atsdrivingmodestatusType;
  static const Ems_atsdrivingmodestatusType EMS_ATSDRIVINGMODESTATUS_STANDARD =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_STANDARD;
  static const Ems_atsdrivingmodestatusType EMS_ATSDRIVINGMODESTATUS_SPORT =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_SPORT;
  static const Ems_atsdrivingmodestatusType EMS_ATSDRIVINGMODESTATUS_ECO =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_ECO;
  static const Ems_atsdrivingmodestatusType EMS_ATSDRIVINGMODESTATUS_INVALID =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_EMS_ATSDRIVINGMODESTATUS_INVALID;
  static inline bool Ems_atsdrivingmodestatusType_IsValid(int value) {
    return Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_IsValid(value);
  }
  static const Ems_atsdrivingmodestatusType Ems_atsdrivingmodestatusType_MIN =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_MIN;
  static const Ems_atsdrivingmodestatusType Ems_atsdrivingmodestatusType_MAX =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_MAX;
  static const int Ems_atsdrivingmodestatusType_ARRAYSIZE =
    Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Ems_atsdrivingmodestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_atsdrivingmodestatusType_descriptor() {
    return Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_descriptor();
  }
  static inline const ::std::string& Ems_atsdrivingmodestatusType_Name(Ems_atsdrivingmodestatusType value) {
    return Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Name(value);
  }
  static inline bool Ems_atsdrivingmodestatusType_Parse(const ::std::string& name,
      Ems_atsdrivingmodestatusType* value) {
    return Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_Parse(name, value);
  }

  typedef Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Ems_enginestopstartstatusType;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_NON_START_STOPMODE =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_NON_START_STOPMODE;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_ENGINESTANDBY =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINESTANDBY;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_ENGINESTOPPED =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINESTOPPED;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_STARTERRESTART =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_STARTERRESTART;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_ENGINERESTART =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINERESTART;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_ENGINEOPERATION =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINEOPERATION;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_ENGINEAUTO_STOPPING =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_ENGINEAUTO_STOPPING;
  static const Ems_enginestopstartstatusType EMS_ENGINESTOPSTARTSTATUS_RESERVED =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_EMS_ENGINESTOPSTARTSTATUS_RESERVED;
  static inline bool Ems_enginestopstartstatusType_IsValid(int value) {
    return Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_IsValid(value);
  }
  static const Ems_enginestopstartstatusType Ems_enginestopstartstatusType_MIN =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_MIN;
  static const Ems_enginestopstartstatusType Ems_enginestopstartstatusType_MAX =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_MAX;
  static const int Ems_enginestopstartstatusType_ARRAYSIZE =
    Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Ems_enginestopstartstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_enginestopstartstatusType_descriptor() {
    return Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_descriptor();
  }
  static inline const ::std::string& Ems_enginestopstartstatusType_Name(Ems_enginestopstartstatusType value) {
    return Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Name(value);
  }
  static inline bool Ems_enginestopstartstatusType_Parse(const ::std::string& name,
      Ems_enginestopstartstatusType* value) {
    return Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_Parse(name, value);
  }

  typedef Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Ems_cruisecontrolstatusType;
  static const Ems_cruisecontrolstatusType EMS_CRUISECONTROLSTATUS_CRUISECONTROLOOFF =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_CRUISECONTROLOOFF;
  static const Ems_cruisecontrolstatusType EMS_CRUISECONTROLSTATUS_ACTIVE =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_ACTIVE;
  static const Ems_cruisecontrolstatusType EMS_CRUISECONTROLSTATUS_STANDBY =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_STANDBY;
  static const Ems_cruisecontrolstatusType EMS_CRUISECONTROLSTATUS_ERROR =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_EMS_CRUISECONTROLSTATUS_ERROR;
  static inline bool Ems_cruisecontrolstatusType_IsValid(int value) {
    return Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_IsValid(value);
  }
  static const Ems_cruisecontrolstatusType Ems_cruisecontrolstatusType_MIN =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_MIN;
  static const Ems_cruisecontrolstatusType Ems_cruisecontrolstatusType_MAX =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_MAX;
  static const int Ems_cruisecontrolstatusType_ARRAYSIZE =
    Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Ems_cruisecontrolstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_cruisecontrolstatusType_descriptor() {
    return Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_descriptor();
  }
  static inline const ::std::string& Ems_cruisecontrolstatusType_Name(Ems_cruisecontrolstatusType value) {
    return Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Name(value);
  }
  static inline bool Ems_cruisecontrolstatusType_Parse(const ::std::string& name,
      Ems_cruisecontrolstatusType* value) {
    return Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_Parse(name, value);
  }

  typedef Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Ems_drivingmodechange_fault_flagType;
  static const Ems_drivingmodechange_fault_flagType EMS_DRIVINGMODECHANGE_FAULT_FLAG_NORMAL =
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_EMS_DRIVINGMODECHANGE_FAULT_FLAG_NORMAL;
  static const Ems_drivingmodechange_fault_flagType EMS_DRIVINGMODECHANGE_FAULT_FLAG_FAULT =
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_EMS_DRIVINGMODECHANGE_FAULT_FLAG_FAULT;
  static inline bool Ems_drivingmodechange_fault_flagType_IsValid(int value) {
    return Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_IsValid(value);
  }
  static const Ems_drivingmodechange_fault_flagType Ems_drivingmodechange_fault_flagType_MIN =
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_MIN;
  static const Ems_drivingmodechange_fault_flagType Ems_drivingmodechange_fault_flagType_MAX =
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_MAX;
  static const int Ems_drivingmodechange_fault_flagType_ARRAYSIZE =
    Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Ems_drivingmodechange_fault_flagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_drivingmodechange_fault_flagType_descriptor() {
    return Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_descriptor();
  }
  static inline const ::std::string& Ems_drivingmodechange_fault_flagType_Name(Ems_drivingmodechange_fault_flagType value) {
    return Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Name(value);
  }
  static inline bool Ems_drivingmodechange_fault_flagType_Parse(const ::std::string& name,
      Ems_drivingmodechange_fault_flagType* value) {
    return Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double ems_vacuumpressure = 2;
  bool has_ems_vacuumpressure() const;
  void clear_ems_vacuumpressure();
  static const int kEmsVacuumpressureFieldNumber = 2;
  double ems_vacuumpressure() const;
  void set_ems_vacuumpressure(double value);

  // optional int32 ems_engbarometricpressure = 1;
  bool has_ems_engbarometricpressure() const;
  void clear_ems_engbarometricpressure();
  static const int kEmsEngbarometricpressureFieldNumber = 1;
  ::google::protobuf::int32 ems_engbarometricpressure() const;
  void set_ems_engbarometricpressure(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
  bool has_ems_atsdrivingmodestatus() const;
  void clear_ems_atsdrivingmodestatus();
  static const int kEmsAtsdrivingmodestatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus() const;
  void set_ems_atsdrivingmodestatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType value);

  // optional double ems_targcruisespeed = 3;
  bool has_ems_targcruisespeed() const;
  void clear_ems_targcruisespeed();
  static const int kEmsTargcruisespeedFieldNumber = 3;
  double ems_targcruisespeed() const;
  void set_ems_targcruisespeed(double value);

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
  bool has_ems_enginestopstartstatus() const;
  void clear_ems_enginestopstartstatus();
  static const int kEmsEnginestopstartstatusFieldNumber = 5;
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType ems_enginestopstartstatus() const;
  void set_ems_enginestopstartstatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType value);

  // optional int32 dcm_ems_rollingcounter_0x151 = 6;
  bool has_dcm_ems_rollingcounter_0x151() const;
  void clear_dcm_ems_rollingcounter_0x151();
  static const int kDcmEmsRollingcounter0X151FieldNumber = 6;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x151() const;
  void set_dcm_ems_rollingcounter_0x151(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
  bool has_ems_cruisecontrolstatus() const;
  void clear_ems_cruisecontrolstatus();
  static const int kEmsCruisecontrolstatusFieldNumber = 7;
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType ems_cruisecontrolstatus() const;
  void set_ems_cruisecontrolstatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType value);

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
  bool has_ems_drivingmodechange_fault_flag() const;
  void clear_ems_drivingmodechange_fault_flag();
  static const int kEmsDrivingmodechangeFaultFlagFieldNumber = 8;
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag() const;
  void set_ems_drivingmodechange_fault_flag(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType value);

  // optional int32 dcm_ems_checksum_0x151 = 9;
  bool has_dcm_ems_checksum_0x151() const;
  void clear_dcm_ems_checksum_0x151();
  static const int kDcmEmsChecksum0X151FieldNumber = 9;
  ::google::protobuf::int32 dcm_ems_checksum_0x151() const;
  void set_dcm_ems_checksum_0x151(::google::protobuf::int32 value);

  // optional int32 ems_engofftime = 10;
  bool has_ems_engofftime() const;
  void clear_ems_engofftime();
  static const int kEmsEngofftimeFieldNumber = 10;
  ::google::protobuf::int32 ems_engofftime() const;
  void set_ems_engofftime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ems_sts_0x151_151)
 private:
  void set_has_ems_engbarometricpressure();
  void clear_has_ems_engbarometricpressure();
  void set_has_ems_vacuumpressure();
  void clear_has_ems_vacuumpressure();
  void set_has_ems_targcruisespeed();
  void clear_has_ems_targcruisespeed();
  void set_has_ems_atsdrivingmodestatus();
  void clear_has_ems_atsdrivingmodestatus();
  void set_has_ems_enginestopstartstatus();
  void clear_has_ems_enginestopstartstatus();
  void set_has_dcm_ems_rollingcounter_0x151();
  void clear_has_dcm_ems_rollingcounter_0x151();
  void set_has_ems_cruisecontrolstatus();
  void clear_has_ems_cruisecontrolstatus();
  void set_has_ems_drivingmodechange_fault_flag();
  void clear_has_ems_drivingmodechange_fault_flag();
  void set_has_dcm_ems_checksum_0x151();
  void clear_has_dcm_ems_checksum_0x151();
  void set_has_ems_engofftime();
  void clear_has_ems_engofftime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ems_vacuumpressure_;
  ::google::protobuf::int32 ems_engbarometricpressure_;
  int ems_atsdrivingmodestatus_;
  double ems_targcruisespeed_;
  int ems_enginestopstartstatus_;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x151_;
  int ems_cruisecontrolstatus_;
  int ems_drivingmodechange_fault_flag_;
  ::google::protobuf::int32 dcm_ems_checksum_0x151_;
  ::google::protobuf::int32 ems_engofftime_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_raw_0x212_212 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_raw_0x212_212) */ {
 public:
  Esp_raw_0x212_212();
  virtual ~Esp_raw_0x212_212();

  Esp_raw_0x212_212(const Esp_raw_0x212_212& from);

  inline Esp_raw_0x212_212& operator=(const Esp_raw_0x212_212& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_raw_0x212_212& default_instance();

  static inline const Esp_raw_0x212_212* internal_default_instance() {
    return reinterpret_cast<const Esp_raw_0x212_212*>(
               &_Esp_raw_0x212_212_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Esp_raw_0x212_212* other);

  // implements Message ----------------------------------------------

  inline Esp_raw_0x212_212* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_raw_0x212_212* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_raw_0x212_212& from);
  void MergeFrom(const Esp_raw_0x212_212& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_raw_0x212_212* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_vxwwheelrrvalidType;
  static const Esp_vxwwheelrrvalidType ESP_VXWWHEELRRVALID_VALID =
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_ESP_VXWWHEELRRVALID_VALID;
  static const Esp_vxwwheelrrvalidType ESP_VXWWHEELRRVALID_INVALID =
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_ESP_VXWWHEELRRVALID_INVALID;
  static inline bool Esp_vxwwheelrrvalidType_IsValid(int value) {
    return Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_IsValid(value);
  }
  static const Esp_vxwwheelrrvalidType Esp_vxwwheelrrvalidType_MIN =
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_MIN;
  static const Esp_vxwwheelrrvalidType Esp_vxwwheelrrvalidType_MAX =
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_MAX;
  static const int Esp_vxwwheelrrvalidType_ARRAYSIZE =
    Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Esp_vxwwheelrrvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vxwwheelrrvalidType_descriptor() {
    return Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_descriptor();
  }
  static inline const ::std::string& Esp_vxwwheelrrvalidType_Name(Esp_vxwwheelrrvalidType value) {
    return Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Name(value);
  }
  static inline bool Esp_vxwwheelrrvalidType_Parse(const ::std::string& name,
      Esp_vxwwheelrrvalidType* value) {
    return Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_Parse(name, value);
  }

  typedef Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_vxwwheelrlvalidType;
  static const Esp_vxwwheelrlvalidType ESP_VXWWHEELRLVALID_VALID =
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_ESP_VXWWHEELRLVALID_VALID;
  static const Esp_vxwwheelrlvalidType ESP_VXWWHEELRLVALID_INVALID =
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_ESP_VXWWHEELRLVALID_INVALID;
  static inline bool Esp_vxwwheelrlvalidType_IsValid(int value) {
    return Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_IsValid(value);
  }
  static const Esp_vxwwheelrlvalidType Esp_vxwwheelrlvalidType_MIN =
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_MIN;
  static const Esp_vxwwheelrlvalidType Esp_vxwwheelrlvalidType_MAX =
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_MAX;
  static const int Esp_vxwwheelrlvalidType_ARRAYSIZE =
    Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Esp_vxwwheelrlvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vxwwheelrlvalidType_descriptor() {
    return Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_descriptor();
  }
  static inline const ::std::string& Esp_vxwwheelrlvalidType_Name(Esp_vxwwheelrlvalidType value) {
    return Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Name(value);
  }
  static inline bool Esp_vxwwheelrlvalidType_Parse(const ::std::string& name,
      Esp_vxwwheelrlvalidType* value) {
    return Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_Parse(name, value);
  }

  typedef Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_vxwwheelfrvalidType;
  static const Esp_vxwwheelfrvalidType ESP_VXWWHEELFRVALID_VALID =
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_ESP_VXWWHEELFRVALID_VALID;
  static const Esp_vxwwheelfrvalidType ESP_VXWWHEELFRVALID_INVALID =
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_ESP_VXWWHEELFRVALID_INVALID;
  static inline bool Esp_vxwwheelfrvalidType_IsValid(int value) {
    return Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_IsValid(value);
  }
  static const Esp_vxwwheelfrvalidType Esp_vxwwheelfrvalidType_MIN =
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_MIN;
  static const Esp_vxwwheelfrvalidType Esp_vxwwheelfrvalidType_MAX =
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_MAX;
  static const int Esp_vxwwheelfrvalidType_ARRAYSIZE =
    Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Esp_vxwwheelfrvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vxwwheelfrvalidType_descriptor() {
    return Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_descriptor();
  }
  static inline const ::std::string& Esp_vxwwheelfrvalidType_Name(Esp_vxwwheelfrvalidType value) {
    return Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Name(value);
  }
  static inline bool Esp_vxwwheelfrvalidType_Parse(const ::std::string& name,
      Esp_vxwwheelfrvalidType* value) {
    return Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_Parse(name, value);
  }

  typedef Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_vxwwheelflvalidType;
  static const Esp_vxwwheelflvalidType ESP_VXWWHEELFLVALID_VALID =
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_ESP_VXWWHEELFLVALID_VALID;
  static const Esp_vxwwheelflvalidType ESP_VXWWHEELFLVALID_INVALID =
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_ESP_VXWWHEELFLVALID_INVALID;
  static inline bool Esp_vxwwheelflvalidType_IsValid(int value) {
    return Esp_raw_0x212_212_Esp_vxwwheelflvalidType_IsValid(value);
  }
  static const Esp_vxwwheelflvalidType Esp_vxwwheelflvalidType_MIN =
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_MIN;
  static const Esp_vxwwheelflvalidType Esp_vxwwheelflvalidType_MAX =
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_MAX;
  static const int Esp_vxwwheelflvalidType_ARRAYSIZE =
    Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Esp_vxwwheelflvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vxwwheelflvalidType_descriptor() {
    return Esp_raw_0x212_212_Esp_vxwwheelflvalidType_descriptor();
  }
  static inline const ::std::string& Esp_vxwwheelflvalidType_Name(Esp_vxwwheelflvalidType value) {
    return Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Name(value);
  }
  static inline bool Esp_vxwwheelflvalidType_Parse(const ::std::string& name,
      Esp_vxwwheelflvalidType* value) {
    return Esp_raw_0x212_212_Esp_vxwwheelflvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double esp_vxwwheelrawfr = 1;
  bool has_esp_vxwwheelrawfr() const;
  void clear_esp_vxwwheelrawfr();
  static const int kEspVxwwheelrawfrFieldNumber = 1;
  double esp_vxwwheelrawfr() const;
  void set_esp_vxwwheelrawfr(double value);

  // optional double esp_vxwwheelrawrl = 2;
  bool has_esp_vxwwheelrawrl() const;
  void clear_esp_vxwwheelrawrl();
  static const int kEspVxwwheelrawrlFieldNumber = 2;
  double esp_vxwwheelrawrl() const;
  void set_esp_vxwwheelrawrl(double value);

  // optional double esp_vxwwheelrawrr = 3;
  bool has_esp_vxwwheelrawrr() const;
  void clear_esp_vxwwheelrawrr();
  static const int kEspVxwwheelrawrrFieldNumber = 3;
  double esp_vxwwheelrawrr() const;
  void set_esp_vxwwheelrawrr(double value);

  // optional int32 rolling_counter_0x212 = 4;
  bool has_rolling_counter_0x212() const;
  void clear_rolling_counter_0x212();
  static const int kRollingCounter0X212FieldNumber = 4;
  ::google::protobuf::int32 rolling_counter_0x212() const;
  void set_rolling_counter_0x212(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
  bool has_esp_vxwwheelrrvalid() const;
  void clear_esp_vxwwheelrrvalid();
  static const int kEspVxwwheelrrvalidFieldNumber = 5;
  ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid() const;
  void set_esp_vxwwheelrrvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType value);

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
  bool has_esp_vxwwheelrlvalid() const;
  void clear_esp_vxwwheelrlvalid();
  static const int kEspVxwwheelrlvalidFieldNumber = 6;
  ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid() const;
  void set_esp_vxwwheelrlvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType value);

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
  bool has_esp_vxwwheelfrvalid() const;
  void clear_esp_vxwwheelfrvalid();
  static const int kEspVxwwheelfrvalidFieldNumber = 7;
  ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid() const;
  void set_esp_vxwwheelfrvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType value);

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
  bool has_esp_vxwwheelflvalid() const;
  void clear_esp_vxwwheelflvalid();
  static const int kEspVxwwheelflvalidFieldNumber = 8;
  ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType esp_vxwwheelflvalid() const;
  void set_esp_vxwwheelflvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType value);

  // optional int32 checksum_0x212 = 9;
  bool has_checksum_0x212() const;
  void clear_checksum_0x212();
  static const int kChecksum0X212FieldNumber = 9;
  ::google::protobuf::int32 checksum_0x212() const;
  void set_checksum_0x212(::google::protobuf::int32 value);

  // optional double esp_vxwwheelrawfl = 10;
  bool has_esp_vxwwheelrawfl() const;
  void clear_esp_vxwwheelrawfl();
  static const int kEspVxwwheelrawflFieldNumber = 10;
  double esp_vxwwheelrawfl() const;
  void set_esp_vxwwheelrawfl(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_raw_0x212_212)
 private:
  void set_has_esp_vxwwheelrawfr();
  void clear_has_esp_vxwwheelrawfr();
  void set_has_esp_vxwwheelrawrl();
  void clear_has_esp_vxwwheelrawrl();
  void set_has_esp_vxwwheelrawrr();
  void clear_has_esp_vxwwheelrawrr();
  void set_has_rolling_counter_0x212();
  void clear_has_rolling_counter_0x212();
  void set_has_esp_vxwwheelrrvalid();
  void clear_has_esp_vxwwheelrrvalid();
  void set_has_esp_vxwwheelrlvalid();
  void clear_has_esp_vxwwheelrlvalid();
  void set_has_esp_vxwwheelfrvalid();
  void clear_has_esp_vxwwheelfrvalid();
  void set_has_esp_vxwwheelflvalid();
  void clear_has_esp_vxwwheelflvalid();
  void set_has_checksum_0x212();
  void clear_has_checksum_0x212();
  void set_has_esp_vxwwheelrawfl();
  void clear_has_esp_vxwwheelrawfl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double esp_vxwwheelrawfr_;
  double esp_vxwwheelrawrl_;
  double esp_vxwwheelrawrr_;
  ::google::protobuf::int32 rolling_counter_0x212_;
  int esp_vxwwheelrrvalid_;
  int esp_vxwwheelrlvalid_;
  int esp_vxwwheelfrvalid_;
  int esp_vxwwheelflvalid_;
  ::google::protobuf::int32 checksum_0x212_;
  double esp_vxwwheelrawfl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_bcm_door_0x310_310 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_bcm_door_0x310_310) */ {
 public:
  Gw_bcm_door_0x310_310();
  virtual ~Gw_bcm_door_0x310_310();

  Gw_bcm_door_0x310_310(const Gw_bcm_door_0x310_310& from);

  inline Gw_bcm_door_0x310_310& operator=(const Gw_bcm_door_0x310_310& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_bcm_door_0x310_310& default_instance();

  static inline const Gw_bcm_door_0x310_310* internal_default_instance() {
    return reinterpret_cast<const Gw_bcm_door_0x310_310*>(
               &_Gw_bcm_door_0x310_310_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Gw_bcm_door_0x310_310* other);

  // implements Message ----------------------------------------------

  inline Gw_bcm_door_0x310_310* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_bcm_door_0x310_310* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_bcm_door_0x310_310& from);
  void MergeFrom(const Gw_bcm_door_0x310_310& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_bcm_door_0x310_310* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Bcm_doorstsrearriType;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_NO_USED;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_CLOSED =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_CLOSED;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_OPEN =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_OPEN;
  static const Bcm_doorstsrearriType BCM_DOORSTSREARRI_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_BCM_DOORSTSREARRI_FAULT;
  static inline bool Bcm_doorstsrearriType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(value);
  }
  static const Bcm_doorstsrearriType Bcm_doorstsrearriType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MIN;
  static const Bcm_doorstsrearriType Bcm_doorstsrearriType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_MAX;
  static const int Bcm_doorstsrearriType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Bcm_doorstsrearriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsrearriType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsrearriType_Name(Bcm_doorstsrearriType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Name(value);
  }
  static inline bool Bcm_doorstsrearriType_Parse(const ::std::string& name,
      Bcm_doorstsrearriType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Bcm_doorlockstsrearleType;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_NO_USED;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_LOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_LOCKED;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_UNLOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_UNLOCKED;
  static const Bcm_doorlockstsrearleType BCM_DOORLOCKSTSREARLE_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_BCM_DOORLOCKSTSREARLE_FAULT;
  static inline bool Bcm_doorlockstsrearleType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(value);
  }
  static const Bcm_doorlockstsrearleType Bcm_doorlockstsrearleType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MIN;
  static const Bcm_doorlockstsrearleType Bcm_doorlockstsrearleType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_MAX;
  static const int Bcm_doorlockstsrearleType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Bcm_doorlockstsrearleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsrearleType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsrearleType_Name(Bcm_doorlockstsrearleType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Name(value);
  }
  static inline bool Bcm_doorlockstsrearleType_Parse(const ::std::string& name,
      Bcm_doorlockstsrearleType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Bcm_doorlockstsfrntriType;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_NO_USED;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_LOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_LOCKED;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_UNLOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_UNLOCKED;
  static const Bcm_doorlockstsfrntriType BCM_DOORLOCKSTSFRNTRI_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_BCM_DOORLOCKSTSFRNTRI_FAULT;
  static inline bool Bcm_doorlockstsfrntriType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(value);
  }
  static const Bcm_doorlockstsfrntriType Bcm_doorlockstsfrntriType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MIN;
  static const Bcm_doorlockstsfrntriType Bcm_doorlockstsfrntriType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_MAX;
  static const int Bcm_doorlockstsfrntriType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Bcm_doorlockstsfrntriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsfrntriType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsfrntriType_Name(Bcm_doorlockstsfrntriType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Name(value);
  }
  static inline bool Bcm_doorlockstsfrntriType_Parse(const ::std::string& name,
      Bcm_doorlockstsfrntriType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Bcm_doorlockstsfrntleType;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_NO_USED;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_LOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_LOCKED;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_UNLOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_UNLOCKED;
  static const Bcm_doorlockstsfrntleType BCM_DOORLOCKSTSFRNTLE_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_BCM_DOORLOCKSTSFRNTLE_FAULT;
  static inline bool Bcm_doorlockstsfrntleType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(value);
  }
  static const Bcm_doorlockstsfrntleType Bcm_doorlockstsfrntleType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MIN;
  static const Bcm_doorlockstsfrntleType Bcm_doorlockstsfrntleType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_MAX;
  static const int Bcm_doorlockstsfrntleType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Bcm_doorlockstsfrntleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsfrntleType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsfrntleType_Name(Bcm_doorlockstsfrntleType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Name(value);
  }
  static inline bool Bcm_doorlockstsfrntleType_Parse(const ::std::string& name,
      Bcm_doorlockstsfrntleType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_antitheftstsType Bcm_antitheftstsType;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_FORTIFY =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_FORTIFY;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_LIFT_THE_FORTIFICATION =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_LIFT_THE_FORTIFICATION;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_WARNING =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_WARNING;
  static const Bcm_antitheftstsType BCM_ANTITHEFTSTS_ABNORMAL_FORTIFICATION =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_BCM_ANTITHEFTSTS_ABNORMAL_FORTIFICATION;
  static inline bool Bcm_antitheftstsType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(value);
  }
  static const Bcm_antitheftstsType Bcm_antitheftstsType_MIN =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MIN;
  static const Bcm_antitheftstsType Bcm_antitheftstsType_MAX =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_MAX;
  static const int Bcm_antitheftstsType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Bcm_antitheftstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_antitheftstsType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_antitheftstsType_descriptor();
  }
  static inline const ::std::string& Bcm_antitheftstsType_Name(Bcm_antitheftstsType value) {
    return Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Name(value);
  }
  static inline bool Bcm_antitheftstsType_Parse(const ::std::string& name,
      Bcm_antitheftstsType* value) {
    return Gw_bcm_door_0x310_310_Bcm_antitheftstsType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Bcm_loadsensitivityType;
  static const Bcm_loadsensitivityType BCM_LOADSENSITIVITY_INACITVE =
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_BCM_LOADSENSITIVITY_INACITVE;
  static const Bcm_loadsensitivityType BCM_LOADSENSITIVITY_ACTIVE =
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_BCM_LOADSENSITIVITY_ACTIVE;
  static inline bool Bcm_loadsensitivityType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_IsValid(value);
  }
  static const Bcm_loadsensitivityType Bcm_loadsensitivityType_MIN =
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_MIN;
  static const Bcm_loadsensitivityType Bcm_loadsensitivityType_MAX =
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_MAX;
  static const int Bcm_loadsensitivityType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Bcm_loadsensitivityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_loadsensitivityType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_descriptor();
  }
  static inline const ::std::string& Bcm_loadsensitivityType_Name(Bcm_loadsensitivityType value) {
    return Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Name(value);
  }
  static inline bool Bcm_loadsensitivityType_Parse(const ::std::string& name,
      Bcm_loadsensitivityType* value) {
    return Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Bcm_lockunlockfeedbackType;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_PE_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_TBOX_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_TBOX_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_SPEEDLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_SPEEDLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_TBOX_30S_AUTOLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_TBOX_30S_AUTOLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_TBOX_UNLCOK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_TBOX_UNLCOK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_UNLOCK;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_KEY_FORGOTTEN_TO_UNLOCK_THE_CAR =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_KEY_FORGOTTEN_TO_UNLOCK_THE_CAR;
  static const Bcm_lockunlockfeedbackType BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK;
  static inline bool Bcm_lockunlockfeedbackType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(value);
  }
  static const Bcm_lockunlockfeedbackType Bcm_lockunlockfeedbackType_MIN =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MIN;
  static const Bcm_lockunlockfeedbackType Bcm_lockunlockfeedbackType_MAX =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_MAX;
  static const int Bcm_lockunlockfeedbackType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Bcm_lockunlockfeedbackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_lockunlockfeedbackType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor();
  }
  static inline const ::std::string& Bcm_lockunlockfeedbackType_Name(Bcm_lockunlockfeedbackType value) {
    return Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Name(value);
  }
  static inline bool Bcm_lockunlockfeedbackType_Parse(const ::std::string& name,
      Bcm_lockunlockfeedbackType* value) {
    return Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Bcm_doorlockststrunkType;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_NO_USED;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_LOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_LOCKED;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_UNLOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_UNLOCKED;
  static const Bcm_doorlockststrunkType BCM_DOORLOCKSTSTRUNK_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_BCM_DOORLOCKSTSTRUNK_FAULT;
  static inline bool Bcm_doorlockststrunkType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(value);
  }
  static const Bcm_doorlockststrunkType Bcm_doorlockststrunkType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MIN;
  static const Bcm_doorlockststrunkType Bcm_doorlockststrunkType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_MAX;
  static const int Bcm_doorlockststrunkType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Bcm_doorlockststrunkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockststrunkType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockststrunkType_Name(Bcm_doorlockststrunkType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Name(value);
  }
  static inline bool Bcm_doorlockststrunkType_Parse(const ::std::string& name,
      Bcm_doorlockststrunkType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorststrunkType Bcm_doorststrunkType;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_NO_USED;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_CLOSED =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_CLOSED;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_OPEN =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_OPEN;
  static const Bcm_doorststrunkType BCM_DOORSTSTRUNK_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_BCM_DOORSTSTRUNK_FAULT;
  static inline bool Bcm_doorststrunkType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(value);
  }
  static const Bcm_doorststrunkType Bcm_doorststrunkType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MIN;
  static const Bcm_doorststrunkType Bcm_doorststrunkType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_MAX;
  static const int Bcm_doorststrunkType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Bcm_doorststrunkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorststrunkType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorststrunkType_descriptor();
  }
  static inline const ::std::string& Bcm_doorststrunkType_Name(Bcm_doorststrunkType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Name(value);
  }
  static inline bool Bcm_doorststrunkType_Parse(const ::std::string& name,
      Bcm_doorststrunkType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorststrunkType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Bcm_trunkdoorpreunlockstsType;
  static const Bcm_trunkdoorpreunlockstsType BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION =
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION;
  static const Bcm_trunkdoorpreunlockstsType BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED =
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED;
  static inline bool Bcm_trunkdoorpreunlockstsType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(value);
  }
  static const Bcm_trunkdoorpreunlockstsType Bcm_trunkdoorpreunlockstsType_MIN =
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MIN;
  static const Bcm_trunkdoorpreunlockstsType Bcm_trunkdoorpreunlockstsType_MAX =
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_MAX;
  static const int Bcm_trunkdoorpreunlockstsType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Bcm_trunkdoorpreunlockstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_trunkdoorpreunlockstsType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor();
  }
  static inline const ::std::string& Bcm_trunkdoorpreunlockstsType_Name(Bcm_trunkdoorpreunlockstsType value) {
    return Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Name(value);
  }
  static inline bool Bcm_trunkdoorpreunlockstsType_Parse(const ::std::string& name,
      Bcm_trunkdoorpreunlockstsType* value) {
    return Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Bcm_doorstsrearleType;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_NO_USED;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_CLOSED =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_CLOSED;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_OPEN =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_OPEN;
  static const Bcm_doorstsrearleType BCM_DOORSTSREARLE_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_BCM_DOORSTSREARLE_FAULT;
  static inline bool Bcm_doorstsrearleType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(value);
  }
  static const Bcm_doorstsrearleType Bcm_doorstsrearleType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MIN;
  static const Bcm_doorstsrearleType Bcm_doorstsrearleType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_MAX;
  static const int Bcm_doorstsrearleType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Bcm_doorstsrearleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsrearleType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsrearleType_Name(Bcm_doorstsrearleType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Name(value);
  }
  static inline bool Bcm_doorstsrearleType_Parse(const ::std::string& name,
      Bcm_doorstsrearleType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Bcm_frontwiperstsType;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_NO_USED;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_OFF =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_OFF;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_LOW =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_LOW;
  static const Bcm_frontwiperstsType BCM_FRONTWIPERSTS_HIGH =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_BCM_FRONTWIPERSTS_HIGH;
  static inline bool Bcm_frontwiperstsType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(value);
  }
  static const Bcm_frontwiperstsType Bcm_frontwiperstsType_MIN =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MIN;
  static const Bcm_frontwiperstsType Bcm_frontwiperstsType_MAX =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_MAX;
  static const int Bcm_frontwiperstsType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Bcm_frontwiperstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_frontwiperstsType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor();
  }
  static inline const ::std::string& Bcm_frontwiperstsType_Name(Bcm_frontwiperstsType value) {
    return Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Name(value);
  }
  static inline bool Bcm_frontwiperstsType_Parse(const ::std::string& name,
      Bcm_frontwiperstsType* value) {
    return Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Bcm_enginehoodstsType;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_NO_USED;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_CLOSED =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_CLOSED;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_OPEN =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_OPEN;
  static const Bcm_enginehoodstsType BCM_ENGINEHOODSTS_FAULT =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_BCM_ENGINEHOODSTS_FAULT;
  static inline bool Bcm_enginehoodstsType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(value);
  }
  static const Bcm_enginehoodstsType Bcm_enginehoodstsType_MIN =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MIN;
  static const Bcm_enginehoodstsType Bcm_enginehoodstsType_MAX =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_MAX;
  static const int Bcm_enginehoodstsType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Bcm_enginehoodstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_enginehoodstsType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor();
  }
  static inline const ::std::string& Bcm_enginehoodstsType_Name(Bcm_enginehoodstsType value) {
    return Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Name(value);
  }
  static inline bool Bcm_enginehoodstsType_Parse(const ::std::string& name,
      Bcm_enginehoodstsType* value) {
    return Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_plg_driverswType Bcm_plg_driverswType;
  static const Bcm_plg_driverswType BCM_PLG_DRIVERSW_RELEASE =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_RELEASE;
  static const Bcm_plg_driverswType BCM_PLG_DRIVERSW_PRESS =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_PRESS;
  static const Bcm_plg_driverswType BCM_PLG_DRIVERSW_STUCK =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_STUCK;
  static const Bcm_plg_driverswType BCM_PLG_DRIVERSW_RESERVED =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_BCM_PLG_DRIVERSW_RESERVED;
  static inline bool Bcm_plg_driverswType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_plg_driverswType_IsValid(value);
  }
  static const Bcm_plg_driverswType Bcm_plg_driverswType_MIN =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_MIN;
  static const Bcm_plg_driverswType Bcm_plg_driverswType_MAX =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_MAX;
  static const int Bcm_plg_driverswType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Bcm_plg_driverswType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_plg_driverswType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_plg_driverswType_descriptor();
  }
  static inline const ::std::string& Bcm_plg_driverswType_Name(Bcm_plg_driverswType value) {
    return Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Name(value);
  }
  static inline bool Bcm_plg_driverswType_Parse(const ::std::string& name,
      Bcm_plg_driverswType* value) {
    return Gw_bcm_door_0x310_310_Bcm_plg_driverswType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_windowscmdType Bcm_windowscmdType;
  static const Bcm_windowscmdType BCM_WINDOWSCMD_INVALID =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_INVALID;
  static const Bcm_windowscmdType BCM_WINDOWSCMD_WINDOWS_UP =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_UP;
  static const Bcm_windowscmdType BCM_WINDOWSCMD_WINDOWS_DOWN =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_DOWN;
  static const Bcm_windowscmdType BCM_WINDOWSCMD_WINDOWS_VENT =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_VENT;
  static const Bcm_windowscmdType BCM_WINDOWSCMD_WINDOWS_STOP =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_BCM_WINDOWSCMD_WINDOWS_STOP;
  static inline bool Bcm_windowscmdType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_windowscmdType_IsValid(value);
  }
  static const Bcm_windowscmdType Bcm_windowscmdType_MIN =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_MIN;
  static const Bcm_windowscmdType Bcm_windowscmdType_MAX =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_MAX;
  static const int Bcm_windowscmdType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_windowscmdType_Bcm_windowscmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_windowscmdType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_windowscmdType_descriptor();
  }
  static inline const ::std::string& Bcm_windowscmdType_Name(Bcm_windowscmdType value) {
    return Gw_bcm_door_0x310_310_Bcm_windowscmdType_Name(value);
  }
  static inline bool Bcm_windowscmdType_Parse(const ::std::string& name,
      Bcm_windowscmdType* value) {
    return Gw_bcm_door_0x310_310_Bcm_windowscmdType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Bcm_rearwiperstsType;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_NO_USED;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_OFF =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_OFF;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_ON =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_ON;
  static const Bcm_rearwiperstsType BCM_REARWIPERSTS_RESERVED =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_BCM_REARWIPERSTS_RESERVED;
  static inline bool Bcm_rearwiperstsType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(value);
  }
  static const Bcm_rearwiperstsType Bcm_rearwiperstsType_MIN =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MIN;
  static const Bcm_rearwiperstsType Bcm_rearwiperstsType_MAX =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_MAX;
  static const int Bcm_rearwiperstsType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Bcm_rearwiperstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_rearwiperstsType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor();
  }
  static inline const ::std::string& Bcm_rearwiperstsType_Name(Bcm_rearwiperstsType value) {
    return Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Name(value);
  }
  static inline bool Bcm_rearwiperstsType_Parse(const ::std::string& name,
      Bcm_rearwiperstsType* value) {
    return Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Bcm_doorstsfrntriType;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_NO_USED;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_CLOSED =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_CLOSED;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_OPEN =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_OPEN;
  static const Bcm_doorstsfrntriType BCM_DOORSTSFRNTRI_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_BCM_DOORSTSFRNTRI_FAULT;
  static inline bool Bcm_doorstsfrntriType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(value);
  }
  static const Bcm_doorstsfrntriType Bcm_doorstsfrntriType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MIN;
  static const Bcm_doorstsfrntriType Bcm_doorstsfrntriType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_MAX;
  static const int Bcm_doorstsfrntriType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Bcm_doorstsfrntriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsfrntriType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsfrntriType_Name(Bcm_doorstsfrntriType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Name(value);
  }
  static inline bool Bcm_doorstsfrntriType_Parse(const ::std::string& name,
      Bcm_doorstsfrntriType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Bcm_turnindicatorstsType;
  static const Bcm_turnindicatorstsType BCM_TURNINDICATORSTS_OFF =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_OFF;
  static const Bcm_turnindicatorstsType BCM_TURNINDICATORSTS_LEON =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_LEON;
  static const Bcm_turnindicatorstsType BCM_TURNINDICATORSTS_RION =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_RION;
  static const Bcm_turnindicatorstsType BCM_TURNINDICATORSTS_LEANDRION =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_BCM_TURNINDICATORSTS_LEANDRION;
  static inline bool Bcm_turnindicatorstsType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_IsValid(value);
  }
  static const Bcm_turnindicatorstsType Bcm_turnindicatorstsType_MIN =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_MIN;
  static const Bcm_turnindicatorstsType Bcm_turnindicatorstsType_MAX =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_MAX;
  static const int Bcm_turnindicatorstsType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Bcm_turnindicatorstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_turnindicatorstsType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_descriptor();
  }
  static inline const ::std::string& Bcm_turnindicatorstsType_Name(Bcm_turnindicatorstsType value) {
    return Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Name(value);
  }
  static inline bool Bcm_turnindicatorstsType_Parse(const ::std::string& name,
      Bcm_turnindicatorstsType* value) {
    return Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Bcm_doorstsfrntleType;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_NO_USED;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_CLOSED =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_CLOSED;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_OPEN =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_OPEN;
  static const Bcm_doorstsfrntleType BCM_DOORSTSFRNTLE_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_BCM_DOORSTSFRNTLE_FAULT;
  static inline bool Bcm_doorstsfrntleType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(value);
  }
  static const Bcm_doorstsfrntleType Bcm_doorstsfrntleType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MIN;
  static const Bcm_doorstsfrntleType Bcm_doorstsfrntleType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_MAX;
  static const int Bcm_doorstsfrntleType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Bcm_doorstsfrntleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorstsfrntleType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor();
  }
  static inline const ::std::string& Bcm_doorstsfrntleType_Name(Bcm_doorstsfrntleType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Name(value);
  }
  static inline bool Bcm_doorstsfrntleType_Parse(const ::std::string& name,
      Bcm_doorstsfrntleType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_Parse(name, value);
  }

  typedef Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Bcm_doorlockstsrearriType;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_NO_USED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_NO_USED;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_LOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_LOCKED;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_UNLOCKED =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_UNLOCKED;
  static const Bcm_doorlockstsrearriType BCM_DOORLOCKSTSREARRI_FAULT =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_BCM_DOORLOCKSTSREARRI_FAULT;
  static inline bool Bcm_doorlockstsrearriType_IsValid(int value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(value);
  }
  static const Bcm_doorlockstsrearriType Bcm_doorlockstsrearriType_MIN =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MIN;
  static const Bcm_doorlockstsrearriType Bcm_doorlockstsrearriType_MAX =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_MAX;
  static const int Bcm_doorlockstsrearriType_ARRAYSIZE =
    Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Bcm_doorlockstsrearriType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_doorlockstsrearriType_descriptor() {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor();
  }
  static inline const ::std::string& Bcm_doorlockstsrearriType_Name(Bcm_doorlockstsrearriType value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Name(value);
  }
  static inline bool Bcm_doorlockstsrearriType_Parse(const ::std::string& name,
      Bcm_doorlockstsrearriType* value) {
    return Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
  bool has_bcm_doorstsrearri() const;
  void clear_bcm_doorstsrearri();
  static const int kBcmDoorstsrearriFieldNumber = 1;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType bcm_doorstsrearri() const;
  void set_bcm_doorstsrearri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
  bool has_bcm_doorlockstsrearle() const;
  void clear_bcm_doorlockstsrearle();
  static const int kBcmDoorlockstsrearleFieldNumber = 2;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType bcm_doorlockstsrearle() const;
  void set_bcm_doorlockstsrearle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
  bool has_bcm_doorlockstsfrntri() const;
  void clear_bcm_doorlockstsfrntri();
  static const int kBcmDoorlockstsfrntriFieldNumber = 3;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri() const;
  void set_bcm_doorlockstsfrntri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
  bool has_bcm_doorlockstsfrntle() const;
  void clear_bcm_doorlockstsfrntle();
  static const int kBcmDoorlockstsfrntleFieldNumber = 4;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle() const;
  void set_bcm_doorlockstsfrntle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
  bool has_bcm_antitheftsts() const;
  void clear_bcm_antitheftsts();
  static const int kBcmAntitheftstsFieldNumber = 5;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType bcm_antitheftsts() const;
  void set_bcm_antitheftsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
  bool has_bcm_loadsensitivity() const;
  void clear_bcm_loadsensitivity();
  static const int kBcmLoadsensitivityFieldNumber = 6;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType bcm_loadsensitivity() const;
  void set_bcm_loadsensitivity(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
  bool has_bcm_lockunlockfeedback() const;
  void clear_bcm_lockunlockfeedback();
  static const int kBcmLockunlockfeedbackFieldNumber = 7;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType bcm_lockunlockfeedback() const;
  void set_bcm_lockunlockfeedback(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
  bool has_bcm_doorlockststrunk() const;
  void clear_bcm_doorlockststrunk();
  static const int kBcmDoorlockststrunkFieldNumber = 8;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType bcm_doorlockststrunk() const;
  void set_bcm_doorlockststrunk(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
  bool has_bcm_doorststrunk() const;
  void clear_bcm_doorststrunk();
  static const int kBcmDoorststrunkFieldNumber = 9;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType bcm_doorststrunk() const;
  void set_bcm_doorststrunk(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
  bool has_bcm_trunkdoorpreunlocksts() const;
  void clear_bcm_trunkdoorpreunlocksts();
  static const int kBcmTrunkdoorpreunlockstsFieldNumber = 10;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts() const;
  void set_bcm_trunkdoorpreunlocksts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
  bool has_bcm_doorstsrearle() const;
  void clear_bcm_doorstsrearle();
  static const int kBcmDoorstsrearleFieldNumber = 11;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType bcm_doorstsrearle() const;
  void set_bcm_doorstsrearle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
  bool has_bcm_frontwipersts() const;
  void clear_bcm_frontwipersts();
  static const int kBcmFrontwiperstsFieldNumber = 12;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType bcm_frontwipersts() const;
  void set_bcm_frontwipersts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
  bool has_bcm_enginehoodsts() const;
  void clear_bcm_enginehoodsts();
  static const int kBcmEnginehoodstsFieldNumber = 13;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType bcm_enginehoodsts() const;
  void set_bcm_enginehoodsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
  bool has_bcm_plg_driversw() const;
  void clear_bcm_plg_driversw();
  static const int kBcmPlgDriverswFieldNumber = 14;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType bcm_plg_driversw() const;
  void set_bcm_plg_driversw(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
  bool has_bcm_windowscmd() const;
  void clear_bcm_windowscmd();
  static const int kBcmWindowscmdFieldNumber = 15;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType bcm_windowscmd() const;
  void set_bcm_windowscmd(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
  bool has_bcm_rearwipersts() const;
  void clear_bcm_rearwipersts();
  static const int kBcmRearwiperstsFieldNumber = 16;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType bcm_rearwipersts() const;
  void set_bcm_rearwipersts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
  bool has_bcm_doorstsfrntri() const;
  void clear_bcm_doorstsfrntri();
  static const int kBcmDoorstsfrntriFieldNumber = 17;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType bcm_doorstsfrntri() const;
  void set_bcm_doorstsfrntri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType value);

  // optional int32 bcm_rolling_counter_0x310 = 18;
  bool has_bcm_rolling_counter_0x310() const;
  void clear_bcm_rolling_counter_0x310();
  static const int kBcmRollingCounter0X310FieldNumber = 18;
  ::google::protobuf::int32 bcm_rolling_counter_0x310() const;
  void set_bcm_rolling_counter_0x310(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
  bool has_bcm_turnindicatorsts() const;
  void clear_bcm_turnindicatorsts();
  static const int kBcmTurnindicatorstsFieldNumber = 19;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType bcm_turnindicatorsts() const;
  void set_bcm_turnindicatorsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType value);

  // optional int32 bcm_checksum_0x310 = 20;
  bool has_bcm_checksum_0x310() const;
  void clear_bcm_checksum_0x310();
  static const int kBcmChecksum0X310FieldNumber = 20;
  ::google::protobuf::int32 bcm_checksum_0x310() const;
  void set_bcm_checksum_0x310(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
  bool has_bcm_doorstsfrntle() const;
  void clear_bcm_doorstsfrntle();
  static const int kBcmDoorstsfrntleFieldNumber = 21;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType bcm_doorstsfrntle() const;
  void set_bcm_doorstsfrntle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType value);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
  bool has_bcm_doorlockstsrearri() const;
  void clear_bcm_doorlockstsrearri();
  static const int kBcmDoorlockstsrearriFieldNumber = 22;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType bcm_doorlockstsrearri() const;
  void set_bcm_doorlockstsrearri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_bcm_door_0x310_310)
 private:
  void set_has_bcm_doorstsrearri();
  void clear_has_bcm_doorstsrearri();
  void set_has_bcm_doorlockstsrearle();
  void clear_has_bcm_doorlockstsrearle();
  void set_has_bcm_doorlockstsfrntri();
  void clear_has_bcm_doorlockstsfrntri();
  void set_has_bcm_doorlockstsfrntle();
  void clear_has_bcm_doorlockstsfrntle();
  void set_has_bcm_antitheftsts();
  void clear_has_bcm_antitheftsts();
  void set_has_bcm_loadsensitivity();
  void clear_has_bcm_loadsensitivity();
  void set_has_bcm_lockunlockfeedback();
  void clear_has_bcm_lockunlockfeedback();
  void set_has_bcm_doorlockststrunk();
  void clear_has_bcm_doorlockststrunk();
  void set_has_bcm_doorststrunk();
  void clear_has_bcm_doorststrunk();
  void set_has_bcm_trunkdoorpreunlocksts();
  void clear_has_bcm_trunkdoorpreunlocksts();
  void set_has_bcm_doorstsrearle();
  void clear_has_bcm_doorstsrearle();
  void set_has_bcm_frontwipersts();
  void clear_has_bcm_frontwipersts();
  void set_has_bcm_enginehoodsts();
  void clear_has_bcm_enginehoodsts();
  void set_has_bcm_plg_driversw();
  void clear_has_bcm_plg_driversw();
  void set_has_bcm_windowscmd();
  void clear_has_bcm_windowscmd();
  void set_has_bcm_rearwipersts();
  void clear_has_bcm_rearwipersts();
  void set_has_bcm_doorstsfrntri();
  void clear_has_bcm_doorstsfrntri();
  void set_has_bcm_rolling_counter_0x310();
  void clear_has_bcm_rolling_counter_0x310();
  void set_has_bcm_turnindicatorsts();
  void clear_has_bcm_turnindicatorsts();
  void set_has_bcm_checksum_0x310();
  void clear_has_bcm_checksum_0x310();
  void set_has_bcm_doorstsfrntle();
  void clear_has_bcm_doorstsfrntle();
  void set_has_bcm_doorlockstsrearri();
  void clear_has_bcm_doorlockstsrearri();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int bcm_doorstsrearri_;
  int bcm_doorlockstsrearle_;
  int bcm_doorlockstsfrntri_;
  int bcm_doorlockstsfrntle_;
  int bcm_antitheftsts_;
  int bcm_loadsensitivity_;
  int bcm_lockunlockfeedback_;
  int bcm_doorlockststrunk_;
  int bcm_doorststrunk_;
  int bcm_trunkdoorpreunlocksts_;
  int bcm_doorstsrearle_;
  int bcm_frontwipersts_;
  int bcm_enginehoodsts_;
  int bcm_plg_driversw_;
  int bcm_windowscmd_;
  int bcm_rearwipersts_;
  int bcm_doorstsfrntri_;
  ::google::protobuf::int32 bcm_rolling_counter_0x310_;
  int bcm_turnindicatorsts_;
  ::google::protobuf::int32 bcm_checksum_0x310_;
  int bcm_doorstsfrntle_;
  int bcm_doorlockstsrearri_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pam_0x270_270 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Pam_0x270_270) */ {
 public:
  Pam_0x270_270();
  virtual ~Pam_0x270_270();

  Pam_0x270_270(const Pam_0x270_270& from);

  inline Pam_0x270_270& operator=(const Pam_0x270_270& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pam_0x270_270& default_instance();

  static inline const Pam_0x270_270* internal_default_instance() {
    return reinterpret_cast<const Pam_0x270_270*>(
               &_Pam_0x270_270_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Pam_0x270_270* other);

  // implements Message ----------------------------------------------

  inline Pam_0x270_270* New() const PROTOBUF_FINAL { return New(NULL); }

  Pam_0x270_270* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pam_0x270_270& from);
  void MergeFrom(const Pam_0x270_270& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pam_0x270_270* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Pam_0x270_270_Pam_esp_target_gear_requestType Pam_esp_target_gear_requestType;
  static const Pam_esp_target_gear_requestType PAM_ESP_TARGET_GEAR_REQUEST_NO_REQUEST =
    Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_NO_REQUEST;
  static const Pam_esp_target_gear_requestType PAM_ESP_TARGET_GEAR_REQUEST_PARK =
    Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_PARK;
  static const Pam_esp_target_gear_requestType PAM_ESP_TARGET_GEAR_REQUEST_REVERSE =
    Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_REVERSE;
  static const Pam_esp_target_gear_requestType PAM_ESP_TARGET_GEAR_REQUEST_NEUTRAL =
    Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_NEUTRAL;
  static const Pam_esp_target_gear_requestType PAM_ESP_TARGET_GEAR_REQUEST_DRIVE =
    Pam_0x270_270_Pam_esp_target_gear_requestType_PAM_ESP_TARGET_GEAR_REQUEST_DRIVE;
  static inline bool Pam_esp_target_gear_requestType_IsValid(int value) {
    return Pam_0x270_270_Pam_esp_target_gear_requestType_IsValid(value);
  }
  static const Pam_esp_target_gear_requestType Pam_esp_target_gear_requestType_MIN =
    Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_MIN;
  static const Pam_esp_target_gear_requestType Pam_esp_target_gear_requestType_MAX =
    Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_MAX;
  static const int Pam_esp_target_gear_requestType_ARRAYSIZE =
    Pam_0x270_270_Pam_esp_target_gear_requestType_Pam_esp_target_gear_requestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_esp_target_gear_requestType_descriptor() {
    return Pam_0x270_270_Pam_esp_target_gear_requestType_descriptor();
  }
  static inline const ::std::string& Pam_esp_target_gear_requestType_Name(Pam_esp_target_gear_requestType value) {
    return Pam_0x270_270_Pam_esp_target_gear_requestType_Name(value);
  }
  static inline bool Pam_esp_target_gear_requestType_Parse(const ::std::string& name,
      Pam_esp_target_gear_requestType* value) {
    return Pam_0x270_270_Pam_esp_target_gear_requestType_Parse(name, value);
  }

  typedef Pam_0x270_270_Pam_brakefunctionmodeType Pam_brakefunctionmodeType;
  static const Pam_brakefunctionmodeType PAM_BRAKEFUNCTIONMODE_NO_ACTION =
    Pam_0x270_270_Pam_brakefunctionmodeType_PAM_BRAKEFUNCTIONMODE_NO_ACTION;
  static const Pam_brakefunctionmodeType PAM_BRAKEFUNCTIONMODE_AUTOMATICPARK =
    Pam_0x270_270_Pam_brakefunctionmodeType_PAM_BRAKEFUNCTIONMODE_AUTOMATICPARK;
  static inline bool Pam_brakefunctionmodeType_IsValid(int value) {
    return Pam_0x270_270_Pam_brakefunctionmodeType_IsValid(value);
  }
  static const Pam_brakefunctionmodeType Pam_brakefunctionmodeType_MIN =
    Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_MIN;
  static const Pam_brakefunctionmodeType Pam_brakefunctionmodeType_MAX =
    Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_MAX;
  static const int Pam_brakefunctionmodeType_ARRAYSIZE =
    Pam_0x270_270_Pam_brakefunctionmodeType_Pam_brakefunctionmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_brakefunctionmodeType_descriptor() {
    return Pam_0x270_270_Pam_brakefunctionmodeType_descriptor();
  }
  static inline const ::std::string& Pam_brakefunctionmodeType_Name(Pam_brakefunctionmodeType value) {
    return Pam_0x270_270_Pam_brakefunctionmodeType_Name(value);
  }
  static inline bool Pam_brakefunctionmodeType_Parse(const ::std::string& name,
      Pam_brakefunctionmodeType* value) {
    return Pam_0x270_270_Pam_brakefunctionmodeType_Parse(name, value);
  }

  typedef Pam_0x270_270_Stopstartinhibit_apaType Stopstartinhibit_apaType;
  static const Stopstartinhibit_apaType STOPSTARTINHIBIT_APA_FALSE =
    Pam_0x270_270_Stopstartinhibit_apaType_STOPSTARTINHIBIT_APA_FALSE;
  static const Stopstartinhibit_apaType STOPSTARTINHIBIT_APA_TRUE =
    Pam_0x270_270_Stopstartinhibit_apaType_STOPSTARTINHIBIT_APA_TRUE;
  static inline bool Stopstartinhibit_apaType_IsValid(int value) {
    return Pam_0x270_270_Stopstartinhibit_apaType_IsValid(value);
  }
  static const Stopstartinhibit_apaType Stopstartinhibit_apaType_MIN =
    Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_MIN;
  static const Stopstartinhibit_apaType Stopstartinhibit_apaType_MAX =
    Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_MAX;
  static const int Stopstartinhibit_apaType_ARRAYSIZE =
    Pam_0x270_270_Stopstartinhibit_apaType_Stopstartinhibit_apaType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Stopstartinhibit_apaType_descriptor() {
    return Pam_0x270_270_Stopstartinhibit_apaType_descriptor();
  }
  static inline const ::std::string& Stopstartinhibit_apaType_Name(Stopstartinhibit_apaType value) {
    return Pam_0x270_270_Stopstartinhibit_apaType_Name(value);
  }
  static inline bool Stopstartinhibit_apaType_Parse(const ::std::string& name,
      Stopstartinhibit_apaType* value) {
    return Pam_0x270_270_Stopstartinhibit_apaType_Parse(name, value);
  }

  typedef Pam_0x270_270_Pam_apafType Pam_apafType;
  static const Pam_apafType PAM_APAF_NORMAL =
    Pam_0x270_270_Pam_apafType_PAM_APAF_NORMAL;
  static const Pam_apafType PAM_APAF_APA_FAILURE =
    Pam_0x270_270_Pam_apafType_PAM_APAF_APA_FAILURE;
  static inline bool Pam_apafType_IsValid(int value) {
    return Pam_0x270_270_Pam_apafType_IsValid(value);
  }
  static const Pam_apafType Pam_apafType_MIN =
    Pam_0x270_270_Pam_apafType_Pam_apafType_MIN;
  static const Pam_apafType Pam_apafType_MAX =
    Pam_0x270_270_Pam_apafType_Pam_apafType_MAX;
  static const int Pam_apafType_ARRAYSIZE =
    Pam_0x270_270_Pam_apafType_Pam_apafType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_apafType_descriptor() {
    return Pam_0x270_270_Pam_apafType_descriptor();
  }
  static inline const ::std::string& Pam_apafType_Name(Pam_apafType value) {
    return Pam_0x270_270_Pam_apafType_Name(value);
  }
  static inline bool Pam_apafType_Parse(const ::std::string& name,
      Pam_apafType* value) {
    return Pam_0x270_270_Pam_apafType_Parse(name, value);
  }

  typedef Pam_0x270_270_Pam_cmdepsstsType Pam_cmdepsstsType;
  static const Pam_cmdepsstsType PAM_CMDEPSSTS_NO_REQUEST =
    Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_NO_REQUEST;
  static const Pam_cmdepsstsType PAM_CMDEPSSTS_CONTROL_EPS_REQUEST =
    Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_CONTROL_EPS_REQUEST;
  static const Pam_cmdepsstsType PAM_CMDEPSSTS_EPS_CONTROL =
    Pam_0x270_270_Pam_cmdepsstsType_PAM_CMDEPSSTS_EPS_CONTROL;
  static inline bool Pam_cmdepsstsType_IsValid(int value) {
    return Pam_0x270_270_Pam_cmdepsstsType_IsValid(value);
  }
  static const Pam_cmdepsstsType Pam_cmdepsstsType_MIN =
    Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_MIN;
  static const Pam_cmdepsstsType Pam_cmdepsstsType_MAX =
    Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_MAX;
  static const int Pam_cmdepsstsType_ARRAYSIZE =
    Pam_0x270_270_Pam_cmdepsstsType_Pam_cmdepsstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_cmdepsstsType_descriptor() {
    return Pam_0x270_270_Pam_cmdepsstsType_descriptor();
  }
  static inline const ::std::string& Pam_cmdepsstsType_Name(Pam_cmdepsstsType value) {
    return Pam_0x270_270_Pam_cmdepsstsType_Name(value);
  }
  static inline bool Pam_cmdepsstsType_Parse(const ::std::string& name,
      Pam_cmdepsstsType* value) {
    return Pam_0x270_270_Pam_cmdepsstsType_Parse(name, value);
  }

  typedef Pam_0x270_270_Pam_stsType Pam_stsType;
  static const Pam_stsType PAM_STS_OFF =
    Pam_0x270_270_Pam_stsType_PAM_STS_OFF;
  static const Pam_stsType PAM_STS_STANDBY_STANDBY_ENABLE =
    Pam_0x270_270_Pam_stsType_PAM_STS_STANDBY_STANDBY_ENABLE;
  static const Pam_stsType PAM_STS_SEARCHING_ENABLE =
    Pam_0x270_270_Pam_stsType_PAM_STS_SEARCHING_ENABLE;
  static const Pam_stsType PAM_STS_GUIDANCE_ACTIVE_ACTIVE =
    Pam_0x270_270_Pam_stsType_PAM_STS_GUIDANCE_ACTIVE_ACTIVE;
  static const Pam_stsType PAM_STS_COMPLETED =
    Pam_0x270_270_Pam_stsType_PAM_STS_COMPLETED;
  static const Pam_stsType PAM_STS_FAILURE_DISABLE =
    Pam_0x270_270_Pam_stsType_PAM_STS_FAILURE_DISABLE;
  static const Pam_stsType PAM_STS_TERMINATED =
    Pam_0x270_270_Pam_stsType_PAM_STS_TERMINATED;
  static const Pam_stsType PAM_STS_RESERVED =
    Pam_0x270_270_Pam_stsType_PAM_STS_RESERVED;
  static inline bool Pam_stsType_IsValid(int value) {
    return Pam_0x270_270_Pam_stsType_IsValid(value);
  }
  static const Pam_stsType Pam_stsType_MIN =
    Pam_0x270_270_Pam_stsType_Pam_stsType_MIN;
  static const Pam_stsType Pam_stsType_MAX =
    Pam_0x270_270_Pam_stsType_Pam_stsType_MAX;
  static const int Pam_stsType_ARRAYSIZE =
    Pam_0x270_270_Pam_stsType_Pam_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_stsType_descriptor() {
    return Pam_0x270_270_Pam_stsType_descriptor();
  }
  static inline const ::std::string& Pam_stsType_Name(Pam_stsType value) {
    return Pam_0x270_270_Pam_stsType_Name(value);
  }
  static inline bool Pam_stsType_Parse(const ::std::string& name,
      Pam_stsType* value) {
    return Pam_0x270_270_Pam_stsType_Parse(name, value);
  }

  typedef Pam_0x270_270_Pam_brakemodestsType Pam_brakemodestsType;
  static const Pam_brakemodestsType PAM_BRAKEMODESTS_INIT =
    Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_INIT;
  static const Pam_brakemodestsType PAM_BRAKEMODESTS_STANDBY =
    Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_STANDBY;
  static const Pam_brakemodestsType PAM_BRAKEMODESTS_ACTIVE =
    Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_ACTIVE;
  static const Pam_brakemodestsType PAM_BRAKEMODESTS_MANEUVERFINISHED =
    Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_MANEUVERFINISHED;
  static const Pam_brakemodestsType PAM_BRAKEMODESTS_SUSPEND =
    Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_SUSPEND;
  static const Pam_brakemodestsType PAM_BRAKEMODESTS_ABORT =
    Pam_0x270_270_Pam_brakemodestsType_PAM_BRAKEMODESTS_ABORT;
  static inline bool Pam_brakemodestsType_IsValid(int value) {
    return Pam_0x270_270_Pam_brakemodestsType_IsValid(value);
  }
  static const Pam_brakemodestsType Pam_brakemodestsType_MIN =
    Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_MIN;
  static const Pam_brakemodestsType Pam_brakemodestsType_MAX =
    Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_MAX;
  static const int Pam_brakemodestsType_ARRAYSIZE =
    Pam_0x270_270_Pam_brakemodestsType_Pam_brakemodestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_brakemodestsType_descriptor() {
    return Pam_0x270_270_Pam_brakemodestsType_descriptor();
  }
  static inline const ::std::string& Pam_brakemodestsType_Name(Pam_brakemodestsType value) {
    return Pam_0x270_270_Pam_brakemodestsType_Name(value);
  }
  static inline bool Pam_brakemodestsType_Parse(const ::std::string& name,
      Pam_brakemodestsType* value) {
    return Pam_0x270_270_Pam_brakemodestsType_Parse(name, value);
  }

  typedef Pam_0x270_270_Pam_failurebrakemodeType Pam_failurebrakemodeType;
  static const Pam_failurebrakemodeType PAM_FAILUREBRAKEMODE_IDLE_NO_BRAKING =
    Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_IDLE_NO_BRAKING;
  static const Pam_failurebrakemodeType PAM_FAILUREBRAKEMODE_COMFORTABLE_RESERVED =
    Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_COMFORTABLE_RESERVED;
  static const Pam_failurebrakemodeType PAM_FAILUREBRAKEMODE_EMERGENCY =
    Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_EMERGENCY;
  static const Pam_failurebrakemodeType PAM_FAILUREBRAKEMODE_RESERVED =
    Pam_0x270_270_Pam_failurebrakemodeType_PAM_FAILUREBRAKEMODE_RESERVED;
  static inline bool Pam_failurebrakemodeType_IsValid(int value) {
    return Pam_0x270_270_Pam_failurebrakemodeType_IsValid(value);
  }
  static const Pam_failurebrakemodeType Pam_failurebrakemodeType_MIN =
    Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_MIN;
  static const Pam_failurebrakemodeType Pam_failurebrakemodeType_MAX =
    Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_MAX;
  static const int Pam_failurebrakemodeType_ARRAYSIZE =
    Pam_0x270_270_Pam_failurebrakemodeType_Pam_failurebrakemodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_failurebrakemodeType_descriptor() {
    return Pam_0x270_270_Pam_failurebrakemodeType_descriptor();
  }
  static inline const ::std::string& Pam_failurebrakemodeType_Name(Pam_failurebrakemodeType value) {
    return Pam_0x270_270_Pam_failurebrakemodeType_Name(value);
  }
  static inline bool Pam_failurebrakemodeType_Parse(const ::std::string& name,
      Pam_failurebrakemodeType* value) {
    return Pam_0x270_270_Pam_failurebrakemodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
  bool has_pam_esp_target_gear_request() const;
  void clear_pam_esp_target_gear_request();
  static const int kPamEspTargetGearRequestFieldNumber = 1;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType pam_esp_target_gear_request() const;
  void set_pam_esp_target_gear_request(::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
  bool has_pam_brakefunctionmode() const;
  void clear_pam_brakefunctionmode();
  static const int kPamBrakefunctionmodeFieldNumber = 2;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType pam_brakefunctionmode() const;
  void set_pam_brakefunctionmode(::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
  bool has_stopstartinhibit_apa() const;
  void clear_stopstartinhibit_apa();
  static const int kStopstartinhibitApaFieldNumber = 3;
  ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType stopstartinhibit_apa() const;
  void set_stopstartinhibit_apa(::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
  bool has_pam_apaf() const;
  void clear_pam_apaf();
  static const int kPamApafFieldNumber = 4;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType pam_apaf() const;
  void set_pam_apaf(::jmc_auto::canbus::Pam_0x270_270_Pam_apafType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
  bool has_pam_cmdepssts() const;
  void clear_pam_cmdepssts();
  static const int kPamCmdepsstsFieldNumber = 5;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType pam_cmdepssts() const;
  void set_pam_cmdepssts(::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
  bool has_pam_sts() const;
  void clear_pam_sts();
  static const int kPamStsFieldNumber = 6;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType pam_sts() const;
  void set_pam_sts(::jmc_auto::canbus::Pam_0x270_270_Pam_stsType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
  bool has_pam_brakemodests() const;
  void clear_pam_brakemodests();
  static const int kPamBrakemodestsFieldNumber = 7;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType pam_brakemodests() const;
  void set_pam_brakemodests(::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType value);

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
  bool has_pam_failurebrakemode() const;
  void clear_pam_failurebrakemode();
  static const int kPamFailurebrakemodeFieldNumber = 8;
  ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType pam_failurebrakemode() const;
  void set_pam_failurebrakemode(::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType value);

  // optional float pam_esp_speed_target = 9;
  bool has_pam_esp_speed_target() const;
  void clear_pam_esp_speed_target();
  static const int kPamEspSpeedTargetFieldNumber = 9;
  float pam_esp_speed_target() const;
  void set_pam_esp_speed_target(float value);

  // optional int32 pam_esp_stop_distance = 10;
  bool has_pam_esp_stop_distance() const;
  void clear_pam_esp_stop_distance();
  static const int kPamEspStopDistanceFieldNumber = 10;
  ::google::protobuf::int32 pam_esp_stop_distance() const;
  void set_pam_esp_stop_distance(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x270 = 11;
  bool has_rolling_counter_0x270() const;
  void clear_rolling_counter_0x270();
  static const int kRollingCounter0X270FieldNumber = 11;
  ::google::protobuf::int32 rolling_counter_0x270() const;
  void set_rolling_counter_0x270(::google::protobuf::int32 value);

  // optional int32 checksum_0x270 = 12;
  bool has_checksum_0x270() const;
  void clear_checksum_0x270();
  static const int kChecksum0X270FieldNumber = 12;
  ::google::protobuf::int32 checksum_0x270() const;
  void set_checksum_0x270(::google::protobuf::int32 value);

  // optional double pam_trgtepsstrgwhlang = 13;
  bool has_pam_trgtepsstrgwhlang() const;
  void clear_pam_trgtepsstrgwhlang();
  static const int kPamTrgtepsstrgwhlangFieldNumber = 13;
  double pam_trgtepsstrgwhlang() const;
  void set_pam_trgtepsstrgwhlang(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Pam_0x270_270)
 private:
  void set_has_pam_esp_target_gear_request();
  void clear_has_pam_esp_target_gear_request();
  void set_has_pam_brakefunctionmode();
  void clear_has_pam_brakefunctionmode();
  void set_has_stopstartinhibit_apa();
  void clear_has_stopstartinhibit_apa();
  void set_has_pam_apaf();
  void clear_has_pam_apaf();
  void set_has_pam_cmdepssts();
  void clear_has_pam_cmdepssts();
  void set_has_pam_sts();
  void clear_has_pam_sts();
  void set_has_pam_brakemodests();
  void clear_has_pam_brakemodests();
  void set_has_pam_failurebrakemode();
  void clear_has_pam_failurebrakemode();
  void set_has_pam_esp_speed_target();
  void clear_has_pam_esp_speed_target();
  void set_has_pam_esp_stop_distance();
  void clear_has_pam_esp_stop_distance();
  void set_has_rolling_counter_0x270();
  void clear_has_rolling_counter_0x270();
  void set_has_checksum_0x270();
  void clear_has_checksum_0x270();
  void set_has_pam_trgtepsstrgwhlang();
  void clear_has_pam_trgtepsstrgwhlang();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int pam_esp_target_gear_request_;
  int pam_brakefunctionmode_;
  int stopstartinhibit_apa_;
  int pam_apaf_;
  int pam_cmdepssts_;
  int pam_sts_;
  int pam_brakemodests_;
  int pam_failurebrakemode_;
  float pam_esp_speed_target_;
  ::google::protobuf::int32 pam_esp_stop_distance_;
  ::google::protobuf::int32 rolling_counter_0x270_;
  ::google::protobuf::int32 checksum_0x270_;
  double pam_trgtepsstrgwhlang_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pam_0x271_271 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Pam_0x271_271) */ {
 public:
  Pam_0x271_271();
  virtual ~Pam_0x271_271();

  Pam_0x271_271(const Pam_0x271_271& from);

  inline Pam_0x271_271& operator=(const Pam_0x271_271& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pam_0x271_271& default_instance();

  static inline const Pam_0x271_271* internal_default_instance() {
    return reinterpret_cast<const Pam_0x271_271*>(
               &_Pam_0x271_271_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Pam_0x271_271* other);

  // implements Message ----------------------------------------------

  inline Pam_0x271_271* New() const PROTOBUF_FINAL { return New(NULL); }

  Pam_0x271_271* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pam_0x271_271& from);
  void MergeFrom(const Pam_0x271_271& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pam_0x271_271* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Pam_0x271_271_Pam_infodisplayreqType Pam_infodisplayreqType;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_NO_REQUEST =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_NO_REQUEST;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_FORWARD_AGAIN =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FORWARD_AGAIN;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_TURN_LEVER =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_TURN_LEVER;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_GEAR_P =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_P;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_CONFIRM_SWITCH =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_CONFIRM_SWITCH;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_SEARCHINGPROCESS =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_SEARCHINGPROCESS;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_DRIVE_FW =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_DRIVE_FW;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_STOP =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_STOP;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_FUNCTION_SELECT =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_SELECT;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_FUNCTION_OFF =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_OFF;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_PROCESS_BAR =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_PROCESS_BAR;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_PPSC_REQUEST_ONLY =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_PPSC_REQUEST_ONLY;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_CPSC_REQUEST_ONLY =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_CPSC_REQUEST_ONLY;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_PPSC_CPSC_REQUEST =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_PPSC_CPSC_REQUEST;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_GEAR_R =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_R;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_GEAR_D =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_D;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_DRIVE_BW =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_DRIVE_BW;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_SLOW_DOWN =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_SLOW_DOWN;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_RELEASE_BRAKE_ANDSTEERING_WHEEL =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_RELEASE_BRAKE_ANDSTEERING_WHEEL;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_CLOSE_DOOR =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_CLOSE_DOOR;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_BUCKLE_SEAT_BELT =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_BUCKLE_SEAT_BELT;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_REPRESS_DEAD_MAN_SWITCH =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_REPRESS_DEAD_MAN_SWITCH;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_PRESS_BRAKE_PEDAL =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_PRESS_BRAKE_PEDAL;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_GEAR_R_AND_BRAKE =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_GEAR_R_AND_BRAKE;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_FUNCTION_COMPLETE =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_COMPLETE;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_REQ_FUNCTION_NOT_AVAILABLE =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_REQ_FUNCTION_NOT_AVAILABLE;
  static const Pam_infodisplayreqType PAM_INFODISPLAYREQ_RESERVED =
    Pam_0x271_271_Pam_infodisplayreqType_PAM_INFODISPLAYREQ_RESERVED;
  static inline bool Pam_infodisplayreqType_IsValid(int value) {
    return Pam_0x271_271_Pam_infodisplayreqType_IsValid(value);
  }
  static const Pam_infodisplayreqType Pam_infodisplayreqType_MIN =
    Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_MIN;
  static const Pam_infodisplayreqType Pam_infodisplayreqType_MAX =
    Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_MAX;
  static const int Pam_infodisplayreqType_ARRAYSIZE =
    Pam_0x271_271_Pam_infodisplayreqType_Pam_infodisplayreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_infodisplayreqType_descriptor() {
    return Pam_0x271_271_Pam_infodisplayreqType_descriptor();
  }
  static inline const ::std::string& Pam_infodisplayreqType_Name(Pam_infodisplayreqType value) {
    return Pam_0x271_271_Pam_infodisplayreqType_Name(value);
  }
  static inline bool Pam_infodisplayreqType_Parse(const ::std::string& name,
      Pam_infodisplayreqType* value) {
    return Pam_0x271_271_Pam_infodisplayreqType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsflmType Pam_objectstsflmType;
  static const Pam_objectstsflmType PAM_OBJECTSTSFLM_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_NO_OBJECT;
  static const Pam_objectstsflmType PAM_OBJECTSTSFLM_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_IN_ZONE_1;
  static const Pam_objectstsflmType PAM_OBJECTSTSFLM_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_2;
  static const Pam_objectstsflmType PAM_OBJECTSTSFLM_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_3;
  static const Pam_objectstsflmType PAM_OBJECTSTSFLM_OBJECT_ZONE_4 =
    Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_4;
  static const Pam_objectstsflmType PAM_OBJECTSTSFLM_OBJECT_ZONE_5 =
    Pam_0x271_271_Pam_objectstsflmType_PAM_OBJECTSTSFLM_OBJECT_ZONE_5;
  static inline bool Pam_objectstsflmType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsflmType_IsValid(value);
  }
  static const Pam_objectstsflmType Pam_objectstsflmType_MIN =
    Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_MIN;
  static const Pam_objectstsflmType Pam_objectstsflmType_MAX =
    Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_MAX;
  static const int Pam_objectstsflmType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsflmType_Pam_objectstsflmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsflmType_descriptor() {
    return Pam_0x271_271_Pam_objectstsflmType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsflmType_Name(Pam_objectstsflmType value) {
    return Pam_0x271_271_Pam_objectstsflmType_Name(value);
  }
  static inline bool Pam_objectstsflmType_Parse(const ::std::string& name,
      Pam_objectstsflmType* value) {
    return Pam_0x271_271_Pam_objectstsflmType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsflcType Pam_objectstsflcType;
  static const Pam_objectstsflcType PAM_OBJECTSTSFLC_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_NO_OBJECT;
  static const Pam_objectstsflcType PAM_OBJECTSTSFLC_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_IN_ZONE_1;
  static const Pam_objectstsflcType PAM_OBJECTSTSFLC_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_ZONE_2;
  static const Pam_objectstsflcType PAM_OBJECTSTSFLC_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsflcType_PAM_OBJECTSTSFLC_OBJECT_ZONE_3;
  static inline bool Pam_objectstsflcType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsflcType_IsValid(value);
  }
  static const Pam_objectstsflcType Pam_objectstsflcType_MIN =
    Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_MIN;
  static const Pam_objectstsflcType Pam_objectstsflcType_MAX =
    Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_MAX;
  static const int Pam_objectstsflcType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsflcType_Pam_objectstsflcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsflcType_descriptor() {
    return Pam_0x271_271_Pam_objectstsflcType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsflcType_Name(Pam_objectstsflcType value) {
    return Pam_0x271_271_Pam_objectstsflcType_Name(value);
  }
  static inline bool Pam_objectstsflcType_Parse(const ::std::string& name,
      Pam_objectstsflcType* value) {
    return Pam_0x271_271_Pam_objectstsflcType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsfrcType Pam_objectstsfrcType;
  static const Pam_objectstsfrcType PAM_OBJECTSTSFRC_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_NO_OBJECT;
  static const Pam_objectstsfrcType PAM_OBJECTSTSFRC_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_IN_ZONE_1;
  static const Pam_objectstsfrcType PAM_OBJECTSTSFRC_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_ZONE_2;
  static const Pam_objectstsfrcType PAM_OBJECTSTSFRC_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsfrcType_PAM_OBJECTSTSFRC_OBJECT_ZONE_3;
  static inline bool Pam_objectstsfrcType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsfrcType_IsValid(value);
  }
  static const Pam_objectstsfrcType Pam_objectstsfrcType_MIN =
    Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_MIN;
  static const Pam_objectstsfrcType Pam_objectstsfrcType_MAX =
    Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_MAX;
  static const int Pam_objectstsfrcType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsfrcType_Pam_objectstsfrcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsfrcType_descriptor() {
    return Pam_0x271_271_Pam_objectstsfrcType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsfrcType_Name(Pam_objectstsfrcType value) {
    return Pam_0x271_271_Pam_objectstsfrcType_Name(value);
  }
  static inline bool Pam_objectstsfrcType_Parse(const ::std::string& name,
      Pam_objectstsfrcType* value) {
    return Pam_0x271_271_Pam_objectstsfrcType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsfrmType Pam_objectstsfrmType;
  static const Pam_objectstsfrmType PAM_OBJECTSTSFRM_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_NO_OBJECT;
  static const Pam_objectstsfrmType PAM_OBJECTSTSFRM_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_IN_ZONE_1;
  static const Pam_objectstsfrmType PAM_OBJECTSTSFRM_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_2;
  static const Pam_objectstsfrmType PAM_OBJECTSTSFRM_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_3;
  static const Pam_objectstsfrmType PAM_OBJECTSTSFRM_OBJECT_ZONE_4 =
    Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_4;
  static const Pam_objectstsfrmType PAM_OBJECTSTSFRM_OBJECT_ZONE_5 =
    Pam_0x271_271_Pam_objectstsfrmType_PAM_OBJECTSTSFRM_OBJECT_ZONE_5;
  static inline bool Pam_objectstsfrmType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsfrmType_IsValid(value);
  }
  static const Pam_objectstsfrmType Pam_objectstsfrmType_MIN =
    Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_MIN;
  static const Pam_objectstsfrmType Pam_objectstsfrmType_MAX =
    Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_MAX;
  static const int Pam_objectstsfrmType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsfrmType_Pam_objectstsfrmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsfrmType_descriptor() {
    return Pam_0x271_271_Pam_objectstsfrmType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsfrmType_Name(Pam_objectstsfrmType value) {
    return Pam_0x271_271_Pam_objectstsfrmType_Name(value);
  }
  static inline bool Pam_objectstsfrmType_Parse(const ::std::string& name,
      Pam_objectstsfrmType* value) {
    return Pam_0x271_271_Pam_objectstsfrmType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsrlmType Pam_objectstsrlmType;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_NO_OBJECT;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_IN_ZONE1 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_IN_ZONE1;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_ZONE2 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE2;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_ZONE3 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE3;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_ZONE4 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE4;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_ZONE5 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE5;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_ZONE6 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE6;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_OBJECT_ZONE7 =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_OBJECT_ZONE7;
  static const Pam_objectstsrlmType PAM_OBJECTSTSRLM_RESERVED =
    Pam_0x271_271_Pam_objectstsrlmType_PAM_OBJECTSTSRLM_RESERVED;
  static inline bool Pam_objectstsrlmType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsrlmType_IsValid(value);
  }
  static const Pam_objectstsrlmType Pam_objectstsrlmType_MIN =
    Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_MIN;
  static const Pam_objectstsrlmType Pam_objectstsrlmType_MAX =
    Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_MAX;
  static const int Pam_objectstsrlmType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsrlmType_Pam_objectstsrlmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsrlmType_descriptor() {
    return Pam_0x271_271_Pam_objectstsrlmType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsrlmType_Name(Pam_objectstsrlmType value) {
    return Pam_0x271_271_Pam_objectstsrlmType_Name(value);
  }
  static inline bool Pam_objectstsrlmType_Parse(const ::std::string& name,
      Pam_objectstsrlmType* value) {
    return Pam_0x271_271_Pam_objectstsrlmType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsrlcType Pam_objectstsrlcType;
  static const Pam_objectstsrlcType PAM_OBJECTSTSRLC_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_NO_OBJECT;
  static const Pam_objectstsrlcType PAM_OBJECTSTSRLC_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_IN_ZONE_1;
  static const Pam_objectstsrlcType PAM_OBJECTSTSRLC_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_ZONE_2;
  static const Pam_objectstsrlcType PAM_OBJECTSTSRLC_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsrlcType_PAM_OBJECTSTSRLC_OBJECT_ZONE_3;
  static inline bool Pam_objectstsrlcType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsrlcType_IsValid(value);
  }
  static const Pam_objectstsrlcType Pam_objectstsrlcType_MIN =
    Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_MIN;
  static const Pam_objectstsrlcType Pam_objectstsrlcType_MAX =
    Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_MAX;
  static const int Pam_objectstsrlcType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsrlcType_Pam_objectstsrlcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsrlcType_descriptor() {
    return Pam_0x271_271_Pam_objectstsrlcType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsrlcType_Name(Pam_objectstsrlcType value) {
    return Pam_0x271_271_Pam_objectstsrlcType_Name(value);
  }
  static inline bool Pam_objectstsrlcType_Parse(const ::std::string& name,
      Pam_objectstsrlcType* value) {
    return Pam_0x271_271_Pam_objectstsrlcType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsrrcType Pam_objectstsrrcType;
  static const Pam_objectstsrrcType PAM_OBJECTSTSRRC_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_NO_OBJECT;
  static const Pam_objectstsrrcType PAM_OBJECTSTSRRC_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_IN_ZONE_1;
  static const Pam_objectstsrrcType PAM_OBJECTSTSRRC_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_ZONE_2;
  static const Pam_objectstsrrcType PAM_OBJECTSTSRRC_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsrrcType_PAM_OBJECTSTSRRC_OBJECT_ZONE_3;
  static inline bool Pam_objectstsrrcType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsrrcType_IsValid(value);
  }
  static const Pam_objectstsrrcType Pam_objectstsrrcType_MIN =
    Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_MIN;
  static const Pam_objectstsrrcType Pam_objectstsrrcType_MAX =
    Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_MAX;
  static const int Pam_objectstsrrcType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsrrcType_Pam_objectstsrrcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsrrcType_descriptor() {
    return Pam_0x271_271_Pam_objectstsrrcType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsrrcType_Name(Pam_objectstsrrcType value) {
    return Pam_0x271_271_Pam_objectstsrrcType_Name(value);
  }
  static inline bool Pam_objectstsrrcType_Parse(const ::std::string& name,
      Pam_objectstsrrcType* value) {
    return Pam_0x271_271_Pam_objectstsrrcType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_objectstsrrmType Pam_objectstsrrmType;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_NO_OBJECT =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_NO_OBJECT;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_IN_ZONE_1 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_IN_ZONE_1;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_ZONE_2 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_2;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_ZONE_3 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_3;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_ZONE_4 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_4;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_ZONE_5 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_5;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_ZONE_6 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_6;
  static const Pam_objectstsrrmType PAM_OBJECTSTSRRM_OBJECT_ZONE_7 =
    Pam_0x271_271_Pam_objectstsrrmType_PAM_OBJECTSTSRRM_OBJECT_ZONE_7;
  static inline bool Pam_objectstsrrmType_IsValid(int value) {
    return Pam_0x271_271_Pam_objectstsrrmType_IsValid(value);
  }
  static const Pam_objectstsrrmType Pam_objectstsrrmType_MIN =
    Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_MIN;
  static const Pam_objectstsrrmType Pam_objectstsrrmType_MAX =
    Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_MAX;
  static const int Pam_objectstsrrmType_ARRAYSIZE =
    Pam_0x271_271_Pam_objectstsrrmType_Pam_objectstsrrmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_objectstsrrmType_descriptor() {
    return Pam_0x271_271_Pam_objectstsrrmType_descriptor();
  }
  static inline const ::std::string& Pam_objectstsrrmType_Name(Pam_objectstsrrmType value) {
    return Pam_0x271_271_Pam_objectstsrrmType_Name(value);
  }
  static inline bool Pam_objectstsrrmType_Parse(const ::std::string& name,
      Pam_objectstsrrmType* value) {
    return Pam_0x271_271_Pam_objectstsrrmType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_chimecmdsoundstatusType;
  static const Pam_chimecmdsoundstatusType PAM_CHIMECMDSOUNDSTATUS_NOWARNING =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_NOWARNING;
  static const Pam_chimecmdsoundstatusType PAM_CHIMECMDSOUNDSTATUS_FRONTSYSTEMWARNING =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_FRONTSYSTEMWARNING;
  static const Pam_chimecmdsoundstatusType PAM_CHIMECMDSOUNDSTATUS_REARSYSTEMWARNING =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_REARSYSTEMWARNING;
  static const Pam_chimecmdsoundstatusType PAM_CHIMECMDSOUNDSTATUS_APA =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_PAM_CHIMECMDSOUNDSTATUS_APA;
  static inline bool Pam_chimecmdsoundstatusType_IsValid(int value) {
    return Pam_0x271_271_Pam_chimecmdsoundstatusType_IsValid(value);
  }
  static const Pam_chimecmdsoundstatusType Pam_chimecmdsoundstatusType_MIN =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_MIN;
  static const Pam_chimecmdsoundstatusType Pam_chimecmdsoundstatusType_MAX =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_MAX;
  static const int Pam_chimecmdsoundstatusType_ARRAYSIZE =
    Pam_0x271_271_Pam_chimecmdsoundstatusType_Pam_chimecmdsoundstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_chimecmdsoundstatusType_descriptor() {
    return Pam_0x271_271_Pam_chimecmdsoundstatusType_descriptor();
  }
  static inline const ::std::string& Pam_chimecmdsoundstatusType_Name(Pam_chimecmdsoundstatusType value) {
    return Pam_0x271_271_Pam_chimecmdsoundstatusType_Name(value);
  }
  static inline bool Pam_chimecmdsoundstatusType_Parse(const ::std::string& name,
      Pam_chimecmdsoundstatusType* value) {
    return Pam_0x271_271_Pam_chimecmdsoundstatusType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_rearsystemworkstsType Pam_rearsystemworkstsType;
  static const Pam_rearsystemworkstsType PAM_REARSYSTEMWORKSTS_DISABLE =
    Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_DISABLE;
  static const Pam_rearsystemworkstsType PAM_REARSYSTEMWORKSTS_ENABLE =
    Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_ENABLE;
  static const Pam_rearsystemworkstsType PAM_REARSYSTEMWORKSTS_ACTIVE =
    Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_ACTIVE;
  static const Pam_rearsystemworkstsType PAM_REARSYSTEMWORKSTS_FAILED =
    Pam_0x271_271_Pam_rearsystemworkstsType_PAM_REARSYSTEMWORKSTS_FAILED;
  static inline bool Pam_rearsystemworkstsType_IsValid(int value) {
    return Pam_0x271_271_Pam_rearsystemworkstsType_IsValid(value);
  }
  static const Pam_rearsystemworkstsType Pam_rearsystemworkstsType_MIN =
    Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_MIN;
  static const Pam_rearsystemworkstsType Pam_rearsystemworkstsType_MAX =
    Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_MAX;
  static const int Pam_rearsystemworkstsType_ARRAYSIZE =
    Pam_0x271_271_Pam_rearsystemworkstsType_Pam_rearsystemworkstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_rearsystemworkstsType_descriptor() {
    return Pam_0x271_271_Pam_rearsystemworkstsType_descriptor();
  }
  static inline const ::std::string& Pam_rearsystemworkstsType_Name(Pam_rearsystemworkstsType value) {
    return Pam_0x271_271_Pam_rearsystemworkstsType_Name(value);
  }
  static inline bool Pam_rearsystemworkstsType_Parse(const ::std::string& name,
      Pam_rearsystemworkstsType* value) {
    return Pam_0x271_271_Pam_rearsystemworkstsType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_frontsystemworkstsType Pam_frontsystemworkstsType;
  static const Pam_frontsystemworkstsType PAM_FRONTSYSTEMWORKSTS_DISABLE =
    Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_DISABLE;
  static const Pam_frontsystemworkstsType PAM_FRONTSYSTEMWORKSTS_ENABLE =
    Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_ENABLE;
  static const Pam_frontsystemworkstsType PAM_FRONTSYSTEMWORKSTS_ACTIVE =
    Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_ACTIVE;
  static const Pam_frontsystemworkstsType PAM_FRONTSYSTEMWORKSTS_FAILED =
    Pam_0x271_271_Pam_frontsystemworkstsType_PAM_FRONTSYSTEMWORKSTS_FAILED;
  static inline bool Pam_frontsystemworkstsType_IsValid(int value) {
    return Pam_0x271_271_Pam_frontsystemworkstsType_IsValid(value);
  }
  static const Pam_frontsystemworkstsType Pam_frontsystemworkstsType_MIN =
    Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_MIN;
  static const Pam_frontsystemworkstsType Pam_frontsystemworkstsType_MAX =
    Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_MAX;
  static const int Pam_frontsystemworkstsType_ARRAYSIZE =
    Pam_0x271_271_Pam_frontsystemworkstsType_Pam_frontsystemworkstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_frontsystemworkstsType_descriptor() {
    return Pam_0x271_271_Pam_frontsystemworkstsType_descriptor();
  }
  static inline const ::std::string& Pam_frontsystemworkstsType_Name(Pam_frontsystemworkstsType value) {
    return Pam_0x271_271_Pam_frontsystemworkstsType_Name(value);
  }
  static inline bool Pam_frontsystemworkstsType_Parse(const ::std::string& name,
      Pam_frontsystemworkstsType* value) {
    return Pam_0x271_271_Pam_frontsystemworkstsType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_parkingbarstsType Pam_parkingbarstsType;
  static const Pam_parkingbarstsType PAM_PARKINGBARSTS_DISPLAY_OFF =
    Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_OFF;
  static const Pam_parkingbarstsType PAM_PARKINGBARSTS_DISPLAY_ON_FROM_TOP_TO_BOTTOM =
    Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_ON_FROM_TOP_TO_BOTTOM;
  static const Pam_parkingbarstsType PAM_PARKINGBARSTS_DISPLAY_ON_FROM_BOTTOM_TO_TOP =
    Pam_0x271_271_Pam_parkingbarstsType_PAM_PARKINGBARSTS_DISPLAY_ON_FROM_BOTTOM_TO_TOP;
  static inline bool Pam_parkingbarstsType_IsValid(int value) {
    return Pam_0x271_271_Pam_parkingbarstsType_IsValid(value);
  }
  static const Pam_parkingbarstsType Pam_parkingbarstsType_MIN =
    Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_MIN;
  static const Pam_parkingbarstsType Pam_parkingbarstsType_MAX =
    Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_MAX;
  static const int Pam_parkingbarstsType_ARRAYSIZE =
    Pam_0x271_271_Pam_parkingbarstsType_Pam_parkingbarstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_parkingbarstsType_descriptor() {
    return Pam_0x271_271_Pam_parkingbarstsType_descriptor();
  }
  static inline const ::std::string& Pam_parkingbarstsType_Name(Pam_parkingbarstsType value) {
    return Pam_0x271_271_Pam_parkingbarstsType_Name(value);
  }
  static inline bool Pam_parkingbarstsType_Parse(const ::std::string& name,
      Pam_parkingbarstsType* value) {
    return Pam_0x271_271_Pam_parkingbarstsType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_chimecmdsoundcadenceType;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_0_NO_WARNING =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_0_NO_WARNING;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_1 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_1;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_2 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_2;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_3 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_3;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_4 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_4;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_5 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_5;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_6 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_6;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_7 =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_7;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_RPA_NOK =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_RPA_NOK;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_RPA_OK =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_RPA_OK;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_10_PAM_FAILED_TONE =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_10_PAM_FAILED_TONE;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_11_PAM_WARNING_TONE =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_11_PAM_WARNING_TONE;
  static const Pam_chimecmdsoundcadenceType PAM_CHIMECMDSOUNDCADENCE_TONE_12_PAM_SUCCESSFUL_TONE =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_PAM_CHIMECMDSOUNDCADENCE_TONE_12_PAM_SUCCESSFUL_TONE;
  static inline bool Pam_chimecmdsoundcadenceType_IsValid(int value) {
    return Pam_0x271_271_Pam_chimecmdsoundcadenceType_IsValid(value);
  }
  static const Pam_chimecmdsoundcadenceType Pam_chimecmdsoundcadenceType_MIN =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_MIN;
  static const Pam_chimecmdsoundcadenceType Pam_chimecmdsoundcadenceType_MAX =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_MAX;
  static const int Pam_chimecmdsoundcadenceType_ARRAYSIZE =
    Pam_0x271_271_Pam_chimecmdsoundcadenceType_Pam_chimecmdsoundcadenceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_chimecmdsoundcadenceType_descriptor() {
    return Pam_0x271_271_Pam_chimecmdsoundcadenceType_descriptor();
  }
  static inline const ::std::string& Pam_chimecmdsoundcadenceType_Name(Pam_chimecmdsoundcadenceType value) {
    return Pam_0x271_271_Pam_chimecmdsoundcadenceType_Name(value);
  }
  static inline bool Pam_chimecmdsoundcadenceType_Parse(const ::std::string& name,
      Pam_chimecmdsoundcadenceType* value) {
    return Pam_0x271_271_Pam_chimecmdsoundcadenceType_Parse(name, value);
  }

  typedef Pam_0x271_271_Pam_parkingbarpercentType Pam_parkingbarpercentType;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_0PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_0PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_1PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_1PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_2PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_2PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_3PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_3PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_4PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_4PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_5PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_5PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_6PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_6PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_7PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_7PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_8PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_8PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_9PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_9PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_10PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_10PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_11PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_11PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_12PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_12PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_13PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_13PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_14PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_14PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_15PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_15PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_16PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_16PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_17PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_17PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_18PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_18PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_19PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_19PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_20PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_20PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_21PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_21PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_22PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_22PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_23PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_23PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_24PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_24PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_25PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_25PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_26PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_26PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_27PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_27PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_28PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_28PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_29PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_29PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_30PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_30PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_31PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_31PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_32PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_32PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_33PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_33PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_34PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_34PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_35PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_35PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_36PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_36PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_37PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_37PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_38PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_38PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_39PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_39PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_40PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_40PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_41PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_41PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_42PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_42PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_43PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_43PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_44PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_44PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_45PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_45PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_46PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_46PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_47PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_47PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_48PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_48PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_49PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_49PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_50PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_50PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_51PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_51PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_52PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_52PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_53PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_53PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_54PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_54PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_55PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_55PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_56PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_56PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_57PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_57PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_58PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_58PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_59PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_59PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_60PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_60PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_61PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_61PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_62PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_62PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_63PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_63PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_64PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_64PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_65PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_65PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_66PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_66PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_67PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_67PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_68PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_68PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_69PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_69PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_70PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_70PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_71PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_71PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_72PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_72PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_73PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_73PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_74PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_74PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_75PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_75PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_76PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_76PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_77PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_77PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_78PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_78PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_79PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_79PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_80PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_80PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_81PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_81PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_82PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_82PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_83PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_83PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_84PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_84PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_85PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_85PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_86PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_86PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_87PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_87PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_88PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_88PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_89PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_89PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_90PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_90PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_91PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_91PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_92PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_92PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_93PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_93PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_94PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_94PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_95PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_95PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_96PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_96PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_97PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_97PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_98PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_98PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_99PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_99PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_100PERCENT =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_100PERCENT;
  static const Pam_parkingbarpercentType PAM_PARKINGBARPERCENT_NO_DISPLAY_APA =
    Pam_0x271_271_Pam_parkingbarpercentType_PAM_PARKINGBARPERCENT_NO_DISPLAY_APA;
  static inline bool Pam_parkingbarpercentType_IsValid(int value) {
    return Pam_0x271_271_Pam_parkingbarpercentType_IsValid(value);
  }
  static const Pam_parkingbarpercentType Pam_parkingbarpercentType_MIN =
    Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_MIN;
  static const Pam_parkingbarpercentType Pam_parkingbarpercentType_MAX =
    Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_MAX;
  static const int Pam_parkingbarpercentType_ARRAYSIZE =
    Pam_0x271_271_Pam_parkingbarpercentType_Pam_parkingbarpercentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pam_parkingbarpercentType_descriptor() {
    return Pam_0x271_271_Pam_parkingbarpercentType_descriptor();
  }
  static inline const ::std::string& Pam_parkingbarpercentType_Name(Pam_parkingbarpercentType value) {
    return Pam_0x271_271_Pam_parkingbarpercentType_Name(value);
  }
  static inline bool Pam_parkingbarpercentType_Parse(const ::std::string& name,
      Pam_parkingbarpercentType* value) {
    return Pam_0x271_271_Pam_parkingbarpercentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
  bool has_pam_infodisplayreq() const;
  void clear_pam_infodisplayreq();
  static const int kPamInfodisplayreqFieldNumber = 1;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType pam_infodisplayreq() const;
  void set_pam_infodisplayreq(::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
  bool has_pam_objectstsflm() const;
  void clear_pam_objectstsflm();
  static const int kPamObjectstsflmFieldNumber = 2;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType pam_objectstsflm() const;
  void set_pam_objectstsflm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
  bool has_pam_objectstsflc() const;
  void clear_pam_objectstsflc();
  static const int kPamObjectstsflcFieldNumber = 3;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType pam_objectstsflc() const;
  void set_pam_objectstsflc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
  bool has_pam_objectstsfrc() const;
  void clear_pam_objectstsfrc();
  static const int kPamObjectstsfrcFieldNumber = 4;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType pam_objectstsfrc() const;
  void set_pam_objectstsfrc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
  bool has_pam_objectstsfrm() const;
  void clear_pam_objectstsfrm();
  static const int kPamObjectstsfrmFieldNumber = 5;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType pam_objectstsfrm() const;
  void set_pam_objectstsfrm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
  bool has_pam_objectstsrlm() const;
  void clear_pam_objectstsrlm();
  static const int kPamObjectstsrlmFieldNumber = 6;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType pam_objectstsrlm() const;
  void set_pam_objectstsrlm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
  bool has_pam_objectstsrlc() const;
  void clear_pam_objectstsrlc();
  static const int kPamObjectstsrlcFieldNumber = 7;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType pam_objectstsrlc() const;
  void set_pam_objectstsrlc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
  bool has_pam_objectstsrrc() const;
  void clear_pam_objectstsrrc();
  static const int kPamObjectstsrrcFieldNumber = 8;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType pam_objectstsrrc() const;
  void set_pam_objectstsrrc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
  bool has_pam_objectstsrrm() const;
  void clear_pam_objectstsrrm();
  static const int kPamObjectstsrrmFieldNumber = 9;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType pam_objectstsrrm() const;
  void set_pam_objectstsrrm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
  bool has_pam_chimecmdsoundstatus() const;
  void clear_pam_chimecmdsoundstatus();
  static const int kPamChimecmdsoundstatusFieldNumber = 10;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus() const;
  void set_pam_chimecmdsoundstatus(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
  bool has_pam_rearsystemworksts() const;
  void clear_pam_rearsystemworksts();
  static const int kPamRearsystemworkstsFieldNumber = 11;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType pam_rearsystemworksts() const;
  void set_pam_rearsystemworksts(::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
  bool has_pam_frontsystemworksts() const;
  void clear_pam_frontsystemworksts();
  static const int kPamFrontsystemworkstsFieldNumber = 12;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType pam_frontsystemworksts() const;
  void set_pam_frontsystemworksts(::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
  bool has_pam_parkingbarsts() const;
  void clear_pam_parkingbarsts();
  static const int kPamParkingbarstsFieldNumber = 13;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType pam_parkingbarsts() const;
  void set_pam_parkingbarsts(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
  bool has_pam_chimecmdsoundcadence() const;
  void clear_pam_chimecmdsoundcadence();
  static const int kPamChimecmdsoundcadenceFieldNumber = 14;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence() const;
  void set_pam_chimecmdsoundcadence(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType value);

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
  bool has_pam_parkingbarpercent() const;
  void clear_pam_parkingbarpercent();
  static const int kPamParkingbarpercentFieldNumber = 15;
  ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType pam_parkingbarpercent() const;
  void set_pam_parkingbarpercent(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Pam_0x271_271)
 private:
  void set_has_pam_infodisplayreq();
  void clear_has_pam_infodisplayreq();
  void set_has_pam_objectstsflm();
  void clear_has_pam_objectstsflm();
  void set_has_pam_objectstsflc();
  void clear_has_pam_objectstsflc();
  void set_has_pam_objectstsfrc();
  void clear_has_pam_objectstsfrc();
  void set_has_pam_objectstsfrm();
  void clear_has_pam_objectstsfrm();
  void set_has_pam_objectstsrlm();
  void clear_has_pam_objectstsrlm();
  void set_has_pam_objectstsrlc();
  void clear_has_pam_objectstsrlc();
  void set_has_pam_objectstsrrc();
  void clear_has_pam_objectstsrrc();
  void set_has_pam_objectstsrrm();
  void clear_has_pam_objectstsrrm();
  void set_has_pam_chimecmdsoundstatus();
  void clear_has_pam_chimecmdsoundstatus();
  void set_has_pam_rearsystemworksts();
  void clear_has_pam_rearsystemworksts();
  void set_has_pam_frontsystemworksts();
  void clear_has_pam_frontsystemworksts();
  void set_has_pam_parkingbarsts();
  void clear_has_pam_parkingbarsts();
  void set_has_pam_chimecmdsoundcadence();
  void clear_has_pam_chimecmdsoundcadence();
  void set_has_pam_parkingbarpercent();
  void clear_has_pam_parkingbarpercent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int pam_infodisplayreq_;
  int pam_objectstsflm_;
  int pam_objectstsflc_;
  int pam_objectstsfrc_;
  int pam_objectstsfrm_;
  int pam_objectstsrlm_;
  int pam_objectstsrlc_;
  int pam_objectstsrrc_;
  int pam_objectstsrrm_;
  int pam_chimecmdsoundstatus_;
  int pam_rearsystemworksts_;
  int pam_frontsystemworksts_;
  int pam_parkingbarsts_;
  int pam_chimecmdsoundcadence_;
  int pam_parkingbarpercent_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pam_0x272_272 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Pam_0x272_272) */ {
 public:
  Pam_0x272_272();
  virtual ~Pam_0x272_272();

  Pam_0x272_272(const Pam_0x272_272& from);

  inline Pam_0x272_272& operator=(const Pam_0x272_272& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pam_0x272_272& default_instance();

  static inline const Pam_0x272_272* internal_default_instance() {
    return reinterpret_cast<const Pam_0x272_272*>(
               &_Pam_0x272_272_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Pam_0x272_272* other);

  // implements Message ----------------------------------------------

  inline Pam_0x272_272* New() const PROTOBUF_FINAL { return New(NULL); }

  Pam_0x272_272* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pam_0x272_272& from);
  void MergeFrom(const Pam_0x272_272& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pam_0x272_272* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Pam_0x272_272_Apa_parkslot_stateType Apa_parkslot_stateType;
  static const Apa_parkslot_stateType APA_PARKSLOT_STATE_NO_SLOT =
    Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_NO_SLOT;
  static const Apa_parkslot_stateType APA_PARKSLOT_STATE_SLOT_LEFT =
    Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_SLOT_LEFT;
  static const Apa_parkslot_stateType APA_PARKSLOT_STATE_SLOT_RIGHT =
    Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_SLOT_RIGHT;
  static const Apa_parkslot_stateType APA_PARKSLOT_STATE_INVALID =
    Pam_0x272_272_Apa_parkslot_stateType_APA_PARKSLOT_STATE_INVALID;
  static inline bool Apa_parkslot_stateType_IsValid(int value) {
    return Pam_0x272_272_Apa_parkslot_stateType_IsValid(value);
  }
  static const Apa_parkslot_stateType Apa_parkslot_stateType_MIN =
    Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_MIN;
  static const Apa_parkslot_stateType Apa_parkslot_stateType_MAX =
    Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_MAX;
  static const int Apa_parkslot_stateType_ARRAYSIZE =
    Pam_0x272_272_Apa_parkslot_stateType_Apa_parkslot_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Apa_parkslot_stateType_descriptor() {
    return Pam_0x272_272_Apa_parkslot_stateType_descriptor();
  }
  static inline const ::std::string& Apa_parkslot_stateType_Name(Apa_parkslot_stateType value) {
    return Pam_0x272_272_Apa_parkslot_stateType_Name(value);
  }
  static inline bool Apa_parkslot_stateType_Parse(const ::std::string& name,
      Apa_parkslot_stateType* value) {
    return Pam_0x272_272_Apa_parkslot_stateType_Parse(name, value);
  }

  typedef Pam_0x272_272_Sdg_objectsts_frsType Sdg_objectsts_frsType;
  static const Sdg_objectsts_frsType SDG_OBJECTSTS_FRS_NO_OBJECT =
    Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_NO_OBJECT;
  static const Sdg_objectsts_frsType SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_1 =
    Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_1;
  static const Sdg_objectsts_frsType SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_2 =
    Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_2;
  static const Sdg_objectsts_frsType SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_3 =
    Pam_0x272_272_Sdg_objectsts_frsType_SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_3;
  static inline bool Sdg_objectsts_frsType_IsValid(int value) {
    return Pam_0x272_272_Sdg_objectsts_frsType_IsValid(value);
  }
  static const Sdg_objectsts_frsType Sdg_objectsts_frsType_MIN =
    Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_MIN;
  static const Sdg_objectsts_frsType Sdg_objectsts_frsType_MAX =
    Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_MAX;
  static const int Sdg_objectsts_frsType_ARRAYSIZE =
    Pam_0x272_272_Sdg_objectsts_frsType_Sdg_objectsts_frsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sdg_objectsts_frsType_descriptor() {
    return Pam_0x272_272_Sdg_objectsts_frsType_descriptor();
  }
  static inline const ::std::string& Sdg_objectsts_frsType_Name(Sdg_objectsts_frsType value) {
    return Pam_0x272_272_Sdg_objectsts_frsType_Name(value);
  }
  static inline bool Sdg_objectsts_frsType_Parse(const ::std::string& name,
      Sdg_objectsts_frsType* value) {
    return Pam_0x272_272_Sdg_objectsts_frsType_Parse(name, value);
  }

  typedef Pam_0x272_272_Sdg_objectstsrlsType Sdg_objectstsrlsType;
  static const Sdg_objectstsrlsType SDG_OBJECTSTSRLS_NO_OBJECT =
    Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_NO_OBJECT;
  static const Sdg_objectstsrlsType SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_1 =
    Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_1;
  static const Sdg_objectstsrlsType SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_2 =
    Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_2;
  static const Sdg_objectstsrlsType SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_3 =
    Pam_0x272_272_Sdg_objectstsrlsType_SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_3;
  static inline bool Sdg_objectstsrlsType_IsValid(int value) {
    return Pam_0x272_272_Sdg_objectstsrlsType_IsValid(value);
  }
  static const Sdg_objectstsrlsType Sdg_objectstsrlsType_MIN =
    Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_MIN;
  static const Sdg_objectstsrlsType Sdg_objectstsrlsType_MAX =
    Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_MAX;
  static const int Sdg_objectstsrlsType_ARRAYSIZE =
    Pam_0x272_272_Sdg_objectstsrlsType_Sdg_objectstsrlsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sdg_objectstsrlsType_descriptor() {
    return Pam_0x272_272_Sdg_objectstsrlsType_descriptor();
  }
  static inline const ::std::string& Sdg_objectstsrlsType_Name(Sdg_objectstsrlsType value) {
    return Pam_0x272_272_Sdg_objectstsrlsType_Name(value);
  }
  static inline bool Sdg_objectstsrlsType_Parse(const ::std::string& name,
      Sdg_objectstsrlsType* value) {
    return Pam_0x272_272_Sdg_objectstsrlsType_Parse(name, value);
  }

  typedef Pam_0x272_272_Apa_selectedsideType Apa_selectedsideType;
  static const Apa_selectedsideType APA_SELECTEDSIDE_NONE =
    Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_NONE;
  static const Apa_selectedsideType APA_SELECTEDSIDE_LEFT =
    Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_LEFT;
  static const Apa_selectedsideType APA_SELECTEDSIDE_RIGHT =
    Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_RIGHT;
  static const Apa_selectedsideType APA_SELECTEDSIDE_RESERVED =
    Pam_0x272_272_Apa_selectedsideType_APA_SELECTEDSIDE_RESERVED;
  static inline bool Apa_selectedsideType_IsValid(int value) {
    return Pam_0x272_272_Apa_selectedsideType_IsValid(value);
  }
  static const Apa_selectedsideType Apa_selectedsideType_MIN =
    Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_MIN;
  static const Apa_selectedsideType Apa_selectedsideType_MAX =
    Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_MAX;
  static const int Apa_selectedsideType_ARRAYSIZE =
    Pam_0x272_272_Apa_selectedsideType_Apa_selectedsideType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Apa_selectedsideType_descriptor() {
    return Pam_0x272_272_Apa_selectedsideType_descriptor();
  }
  static inline const ::std::string& Apa_selectedsideType_Name(Apa_selectedsideType value) {
    return Pam_0x272_272_Apa_selectedsideType_Name(value);
  }
  static inline bool Apa_selectedsideType_Parse(const ::std::string& name,
      Apa_selectedsideType* value) {
    return Pam_0x272_272_Apa_selectedsideType_Parse(name, value);
  }

  typedef Pam_0x272_272_Sdg_objectstsrrsType Sdg_objectstsrrsType;
  static const Sdg_objectstsrrsType SDG_OBJECTSTSRRS_NO_OBJECT =
    Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_NO_OBJECT;
  static const Sdg_objectstsrrsType SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_1 =
    Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_1;
  static const Sdg_objectstsrrsType SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_2 =
    Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_2;
  static const Sdg_objectstsrrsType SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_3 =
    Pam_0x272_272_Sdg_objectstsrrsType_SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_3;
  static inline bool Sdg_objectstsrrsType_IsValid(int value) {
    return Pam_0x272_272_Sdg_objectstsrrsType_IsValid(value);
  }
  static const Sdg_objectstsrrsType Sdg_objectstsrrsType_MIN =
    Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_MIN;
  static const Sdg_objectstsrrsType Sdg_objectstsrrsType_MAX =
    Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_MAX;
  static const int Sdg_objectstsrrsType_ARRAYSIZE =
    Pam_0x272_272_Sdg_objectstsrrsType_Sdg_objectstsrrsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sdg_objectstsrrsType_descriptor() {
    return Pam_0x272_272_Sdg_objectstsrrsType_descriptor();
  }
  static inline const ::std::string& Sdg_objectstsrrsType_Name(Sdg_objectstsrrsType value) {
    return Pam_0x272_272_Sdg_objectstsrrsType_Name(value);
  }
  static inline bool Sdg_objectstsrrsType_Parse(const ::std::string& name,
      Sdg_objectstsrrsType* value) {
    return Pam_0x272_272_Sdg_objectstsrrsType_Parse(name, value);
  }

  typedef Pam_0x272_272_Sdg_objectstsfrs_rrsType Sdg_objectstsfrs_rrsType;
  static const Sdg_objectstsfrs_rrsType SDG_OBJECTSTSFRS_RRS_NO_OBJECT =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_NO_OBJECT;
  static const Sdg_objectstsfrs_rrsType SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_1 =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_1;
  static const Sdg_objectstsfrs_rrsType SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_2 =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_2;
  static const Sdg_objectstsfrs_rrsType SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_3 =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_3;
  static inline bool Sdg_objectstsfrs_rrsType_IsValid(int value) {
    return Pam_0x272_272_Sdg_objectstsfrs_rrsType_IsValid(value);
  }
  static const Sdg_objectstsfrs_rrsType Sdg_objectstsfrs_rrsType_MIN =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_MIN;
  static const Sdg_objectstsfrs_rrsType Sdg_objectstsfrs_rrsType_MAX =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_MAX;
  static const int Sdg_objectstsfrs_rrsType_ARRAYSIZE =
    Pam_0x272_272_Sdg_objectstsfrs_rrsType_Sdg_objectstsfrs_rrsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sdg_objectstsfrs_rrsType_descriptor() {
    return Pam_0x272_272_Sdg_objectstsfrs_rrsType_descriptor();
  }
  static inline const ::std::string& Sdg_objectstsfrs_rrsType_Name(Sdg_objectstsfrs_rrsType value) {
    return Pam_0x272_272_Sdg_objectstsfrs_rrsType_Name(value);
  }
  static inline bool Sdg_objectstsfrs_rrsType_Parse(const ::std::string& name,
      Sdg_objectstsfrs_rrsType* value) {
    return Pam_0x272_272_Sdg_objectstsfrs_rrsType_Parse(name, value);
  }

  typedef Pam_0x272_272_Apa_quit_indicationType Apa_quit_indicationType;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_NO_REQUEST =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_NO_REQUEST;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_FAILURE =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_FAILURE;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_APA_FAILURE =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_APA_FAILURE;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_SPEED_HIGH =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_SPEED_HIGH;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_TIMING_OVERFLOW =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_TIMING_OVERFLOW;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_MOVE_TIMES_OVERFLOW =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_MOVE_TIMES_OVERFLOW;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_RECOVER_INT_TIMS_OVERFLOW =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_RECOVER_INT_TIMS_OVERFLOW;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_GAS_PEDAL =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_GAS_PEDAL;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERVENTION =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERVENTION;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_ACTVIE =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_ACTVIE;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_ACC =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_ACC;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_TRAJECTORY =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_TRAJECTORY;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_SPACE_LIMIT =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_SPACE_LIMIT;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_NO_OBJECT_IN_FRONT =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_NO_OBJECT_IN_FRONT;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_SEAT_BELT_UNBUCKLE =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_SEAT_BELT_UNBUCKLE;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_DRIVER_DOOR =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_DRIVER_DOOR;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_EPB_APPLY =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_EPB_APPLY;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_VEHICLE_BLOCK =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_VEHICLE_BLOCK;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERRUPT =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERRUPT;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_STEERING_WHEEL_HANDS_ON =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_STEERING_WHEEL_HANDS_ON;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_REQ_QUIT_ABOVE_SLOPE_LIMT =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_REQ_QUIT_ABOVE_SLOPE_LIMT;
  static const Apa_quit_indicationType APA_QUIT_INDICATION_RESERVED =
    Pam_0x272_272_Apa_quit_indicationType_APA_QUIT_INDICATION_RESERVED;
  static inline bool Apa_quit_indicationType_IsValid(int value) {
    return Pam_0x272_272_Apa_quit_indicationType_IsValid(value);
  }
  static const Apa_quit_indicationType Apa_quit_indicationType_MIN =
    Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_MIN;
  static const Apa_quit_indicationType Apa_quit_indicationType_MAX =
    Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_MAX;
  static const int Apa_quit_indicationType_ARRAYSIZE =
    Pam_0x272_272_Apa_quit_indicationType_Apa_quit_indicationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Apa_quit_indicationType_descriptor() {
    return Pam_0x272_272_Apa_quit_indicationType_descriptor();
  }
  static inline const ::std::string& Apa_quit_indicationType_Name(Apa_quit_indicationType value) {
    return Pam_0x272_272_Apa_quit_indicationType_Name(value);
  }
  static inline bool Apa_quit_indicationType_Parse(const ::std::string& name,
      Apa_quit_indicationType* value) {
    return Pam_0x272_272_Apa_quit_indicationType_Parse(name, value);
  }

  typedef Pam_0x272_272_Apa_recover_int_indicationType Apa_recover_int_indicationType;
  static const Apa_recover_int_indicationType APA_RECOVER_INT_INDICATION_NO_REQUEST =
    Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_NO_REQUEST;
  static const Apa_recover_int_indicationType APA_RECOVER_INT_INDICATION_REQ_RECOVER_DEAD_MAN_SWITCH_RELEASE =
    Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_DEAD_MAN_SWITCH_RELEASE;
  static const Apa_recover_int_indicationType APA_RECOVER_INT_INDICATION_REQ_RECOVER_FOUND_OBSTACLE_IN_TRAJECTORY =
    Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_FOUND_OBSTACLE_IN_TRAJECTORY;
  static const Apa_recover_int_indicationType APA_RECOVER_INT_INDICATION_REQ_RECOVER_NON_DRIVER_DOOR_OPEN =
    Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_NON_DRIVER_DOOR_OPEN;
  static const Apa_recover_int_indicationType APA_RECOVER_INT_INDICATION_REQ_RECOVER_BRAKE_PEDAL_RELEASE =
    Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_REQ_RECOVER_BRAKE_PEDAL_RELEASE;
  static const Apa_recover_int_indicationType APA_RECOVER_INT_INDICATION_RESERVED =
    Pam_0x272_272_Apa_recover_int_indicationType_APA_RECOVER_INT_INDICATION_RESERVED;
  static inline bool Apa_recover_int_indicationType_IsValid(int value) {
    return Pam_0x272_272_Apa_recover_int_indicationType_IsValid(value);
  }
  static const Apa_recover_int_indicationType Apa_recover_int_indicationType_MIN =
    Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_MIN;
  static const Apa_recover_int_indicationType Apa_recover_int_indicationType_MAX =
    Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_MAX;
  static const int Apa_recover_int_indicationType_ARRAYSIZE =
    Pam_0x272_272_Apa_recover_int_indicationType_Apa_recover_int_indicationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Apa_recover_int_indicationType_descriptor() {
    return Pam_0x272_272_Apa_recover_int_indicationType_descriptor();
  }
  static inline const ::std::string& Apa_recover_int_indicationType_Name(Apa_recover_int_indicationType value) {
    return Pam_0x272_272_Apa_recover_int_indicationType_Name(value);
  }
  static inline bool Apa_recover_int_indicationType_Parse(const ::std::string& name,
      Apa_recover_int_indicationType* value) {
    return Pam_0x272_272_Apa_recover_int_indicationType_Parse(name, value);
  }

  typedef Pam_0x272_272_Sdg_objectstsfls_rlsType Sdg_objectstsfls_rlsType;
  static const Sdg_objectstsfls_rlsType SDG_OBJECTSTSFLS_RLS_NO_OBJECT =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_NO_OBJECT;
  static const Sdg_objectstsfls_rlsType SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_1 =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_1;
  static const Sdg_objectstsfls_rlsType SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_2 =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_2;
  static const Sdg_objectstsfls_rlsType SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_3 =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_3;
  static inline bool Sdg_objectstsfls_rlsType_IsValid(int value) {
    return Pam_0x272_272_Sdg_objectstsfls_rlsType_IsValid(value);
  }
  static const Sdg_objectstsfls_rlsType Sdg_objectstsfls_rlsType_MIN =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_MIN;
  static const Sdg_objectstsfls_rlsType Sdg_objectstsfls_rlsType_MAX =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_MAX;
  static const int Sdg_objectstsfls_rlsType_ARRAYSIZE =
    Pam_0x272_272_Sdg_objectstsfls_rlsType_Sdg_objectstsfls_rlsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sdg_objectstsfls_rlsType_descriptor() {
    return Pam_0x272_272_Sdg_objectstsfls_rlsType_descriptor();
  }
  static inline const ::std::string& Sdg_objectstsfls_rlsType_Name(Sdg_objectstsfls_rlsType value) {
    return Pam_0x272_272_Sdg_objectstsfls_rlsType_Name(value);
  }
  static inline bool Sdg_objectstsfls_rlsType_Parse(const ::std::string& name,
      Sdg_objectstsfls_rlsType* value) {
    return Pam_0x272_272_Sdg_objectstsfls_rlsType_Parse(name, value);
  }

  typedef Pam_0x272_272_Apa_indicationType Apa_indicationType;
  static const Apa_indicationType APA_INDICATION_NO_ACTIVE =
    Pam_0x272_272_Apa_indicationType_APA_INDICATION_NO_ACTIVE;
  static const Apa_indicationType APA_INDICATION_PPSC_ACTIVE =
    Pam_0x272_272_Apa_indicationType_APA_INDICATION_PPSC_ACTIVE;
  static const Apa_indicationType APA_INDICATION_CPSC_ACTIVE =
    Pam_0x272_272_Apa_indicationType_APA_INDICATION_CPSC_ACTIVE;
  static const Apa_indicationType APA_INDICATION_POC_ACTIVE =
    Pam_0x272_272_Apa_indicationType_APA_INDICATION_POC_ACTIVE;
  static const Apa_indicationType APA_INDICATION_RESERVED =
    Pam_0x272_272_Apa_indicationType_APA_INDICATION_RESERVED;
  static inline bool Apa_indicationType_IsValid(int value) {
    return Pam_0x272_272_Apa_indicationType_IsValid(value);
  }
  static const Apa_indicationType Apa_indicationType_MIN =
    Pam_0x272_272_Apa_indicationType_Apa_indicationType_MIN;
  static const Apa_indicationType Apa_indicationType_MAX =
    Pam_0x272_272_Apa_indicationType_Apa_indicationType_MAX;
  static const int Apa_indicationType_ARRAYSIZE =
    Pam_0x272_272_Apa_indicationType_Apa_indicationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Apa_indicationType_descriptor() {
    return Pam_0x272_272_Apa_indicationType_descriptor();
  }
  static inline const ::std::string& Apa_indicationType_Name(Apa_indicationType value) {
    return Pam_0x272_272_Apa_indicationType_Name(value);
  }
  static inline bool Apa_indicationType_Parse(const ::std::string& name,
      Apa_indicationType* value) {
    return Pam_0x272_272_Apa_indicationType_Parse(name, value);
  }

  typedef Pam_0x272_272_Sdg_objectstsflsType Sdg_objectstsflsType;
  static const Sdg_objectstsflsType SDG_OBJECTSTSFLS_NO_OBJECT =
    Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_NO_OBJECT;
  static const Sdg_objectstsflsType SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_1 =
    Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_1;
  static const Sdg_objectstsflsType SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_2 =
    Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_2;
  static const Sdg_objectstsflsType SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_3 =
    Pam_0x272_272_Sdg_objectstsflsType_SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_3;
  static inline bool Sdg_objectstsflsType_IsValid(int value) {
    return Pam_0x272_272_Sdg_objectstsflsType_IsValid(value);
  }
  static const Sdg_objectstsflsType Sdg_objectstsflsType_MIN =
    Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_MIN;
  static const Sdg_objectstsflsType Sdg_objectstsflsType_MAX =
    Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_MAX;
  static const int Sdg_objectstsflsType_ARRAYSIZE =
    Pam_0x272_272_Sdg_objectstsflsType_Sdg_objectstsflsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sdg_objectstsflsType_descriptor() {
    return Pam_0x272_272_Sdg_objectstsflsType_descriptor();
  }
  static inline const ::std::string& Sdg_objectstsflsType_Name(Sdg_objectstsflsType value) {
    return Pam_0x272_272_Sdg_objectstsflsType_Name(value);
  }
  static inline bool Sdg_objectstsflsType_Parse(const ::std::string& name,
      Sdg_objectstsflsType* value) {
    return Pam_0x272_272_Sdg_objectstsflsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
  bool has_apa_parkslot_state() const;
  void clear_apa_parkslot_state();
  static const int kApaParkslotStateFieldNumber = 1;
  ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType apa_parkslot_state() const;
  void set_apa_parkslot_state(::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
  bool has_sdg_objectsts_frs() const;
  void clear_sdg_objectsts_frs();
  static const int kSdgObjectstsFrsFieldNumber = 2;
  ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType sdg_objectsts_frs() const;
  void set_sdg_objectsts_frs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
  bool has_sdg_objectstsrls() const;
  void clear_sdg_objectstsrls();
  static const int kSdgObjectstsrlsFieldNumber = 3;
  ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType sdg_objectstsrls() const;
  void set_sdg_objectstsrls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
  bool has_apa_selectedside() const;
  void clear_apa_selectedside();
  static const int kApaSelectedsideFieldNumber = 4;
  ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType apa_selectedside() const;
  void set_apa_selectedside(::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
  bool has_sdg_objectstsrrs() const;
  void clear_sdg_objectstsrrs();
  static const int kSdgObjectstsrrsFieldNumber = 5;
  ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType sdg_objectstsrrs() const;
  void set_sdg_objectstsrrs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
  bool has_sdg_objectstsfrs_rrs() const;
  void clear_sdg_objectstsfrs_rrs();
  static const int kSdgObjectstsfrsRrsFieldNumber = 6;
  ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs() const;
  void set_sdg_objectstsfrs_rrs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
  bool has_apa_quit_indication() const;
  void clear_apa_quit_indication();
  static const int kApaQuitIndicationFieldNumber = 7;
  ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType apa_quit_indication() const;
  void set_apa_quit_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
  bool has_apa_recover_int_indication() const;
  void clear_apa_recover_int_indication();
  static const int kApaRecoverIntIndicationFieldNumber = 8;
  ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType apa_recover_int_indication() const;
  void set_apa_recover_int_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
  bool has_sdg_objectstsfls_rls() const;
  void clear_sdg_objectstsfls_rls();
  static const int kSdgObjectstsflsRlsFieldNumber = 9;
  ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType sdg_objectstsfls_rls() const;
  void set_sdg_objectstsfls_rls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
  bool has_apa_indication() const;
  void clear_apa_indication();
  static const int kApaIndicationFieldNumber = 10;
  ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType apa_indication() const;
  void set_apa_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType value);

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
  bool has_sdg_objectstsfls() const;
  void clear_sdg_objectstsfls();
  static const int kSdgObjectstsflsFieldNumber = 11;
  ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType sdg_objectstsfls() const;
  void set_sdg_objectstsfls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Pam_0x272_272)
 private:
  void set_has_apa_parkslot_state();
  void clear_has_apa_parkslot_state();
  void set_has_sdg_objectsts_frs();
  void clear_has_sdg_objectsts_frs();
  void set_has_sdg_objectstsrls();
  void clear_has_sdg_objectstsrls();
  void set_has_apa_selectedside();
  void clear_has_apa_selectedside();
  void set_has_sdg_objectstsrrs();
  void clear_has_sdg_objectstsrrs();
  void set_has_sdg_objectstsfrs_rrs();
  void clear_has_sdg_objectstsfrs_rrs();
  void set_has_apa_quit_indication();
  void clear_has_apa_quit_indication();
  void set_has_apa_recover_int_indication();
  void clear_has_apa_recover_int_indication();
  void set_has_sdg_objectstsfls_rls();
  void clear_has_sdg_objectstsfls_rls();
  void set_has_apa_indication();
  void clear_has_apa_indication();
  void set_has_sdg_objectstsfls();
  void clear_has_sdg_objectstsfls();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int apa_parkslot_state_;
  int sdg_objectsts_frs_;
  int sdg_objectstsrls_;
  int apa_selectedside_;
  int sdg_objectstsrrs_;
  int sdg_objectstsfrs_rrs_;
  int apa_quit_indication_;
  int apa_recover_int_indication_;
  int sdg_objectstsfls_rls_;
  int apa_indication_;
  int sdg_objectstsfls_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mrr_0x238_238 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Mrr_0x238_238) */ {
 public:
  Mrr_0x238_238();
  virtual ~Mrr_0x238_238();

  Mrr_0x238_238(const Mrr_0x238_238& from);

  inline Mrr_0x238_238& operator=(const Mrr_0x238_238& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mrr_0x238_238& default_instance();

  static inline const Mrr_0x238_238* internal_default_instance() {
    return reinterpret_cast<const Mrr_0x238_238*>(
               &_Mrr_0x238_238_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Mrr_0x238_238* other);

  // implements Message ----------------------------------------------

  inline Mrr_0x238_238* New() const PROTOBUF_FINAL { return New(NULL); }

  Mrr_0x238_238* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mrr_0x238_238& from);
  void MergeFrom(const Mrr_0x238_238& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mrr_0x238_238* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double acc_tgtaxlowercomftband = 1;
  bool has_acc_tgtaxlowercomftband() const;
  void clear_acc_tgtaxlowercomftband();
  static const int kAccTgtaxlowercomftbandFieldNumber = 1;
  double acc_tgtaxlowercomftband() const;
  void set_acc_tgtaxlowercomftband(double value);

  // optional double acc_tgtaxupperlim = 2;
  bool has_acc_tgtaxupperlim() const;
  void clear_acc_tgtaxupperlim();
  static const int kAccTgtaxupperlimFieldNumber = 2;
  double acc_tgtaxupperlim() const;
  void set_acc_tgtaxupperlim(double value);

  // optional double acc_tgtaxlowerlim = 3;
  bool has_acc_tgtaxlowerlim() const;
  void clear_acc_tgtaxlowerlim();
  static const int kAccTgtaxlowerlimFieldNumber = 3;
  double acc_tgtaxlowerlim() const;
  void set_acc_tgtaxlowerlim(double value);

  // optional double acc_tgtax = 4;
  bool has_acc_tgtax() const;
  void clear_acc_tgtax();
  static const int kAccTgtaxFieldNumber = 4;
  double acc_tgtax() const;
  void set_acc_tgtax(double value);

  // optional int32 rolling_counter_0x238 = 5;
  bool has_rolling_counter_0x238() const;
  void clear_rolling_counter_0x238();
  static const int kRollingCounter0X238FieldNumber = 5;
  ::google::protobuf::int32 rolling_counter_0x238() const;
  void set_rolling_counter_0x238(::google::protobuf::int32 value);

  // optional int32 checksum_0x238 = 6;
  bool has_checksum_0x238() const;
  void clear_checksum_0x238();
  static const int kChecksum0X238FieldNumber = 6;
  ::google::protobuf::int32 checksum_0x238() const;
  void set_checksum_0x238(::google::protobuf::int32 value);

  // optional double acc_tgtaxuppercomftband = 7;
  bool has_acc_tgtaxuppercomftband() const;
  void clear_acc_tgtaxuppercomftband();
  static const int kAccTgtaxuppercomftbandFieldNumber = 7;
  double acc_tgtaxuppercomftband() const;
  void set_acc_tgtaxuppercomftband(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Mrr_0x238_238)
 private:
  void set_has_acc_tgtaxlowercomftband();
  void clear_has_acc_tgtaxlowercomftband();
  void set_has_acc_tgtaxupperlim();
  void clear_has_acc_tgtaxupperlim();
  void set_has_acc_tgtaxlowerlim();
  void clear_has_acc_tgtaxlowerlim();
  void set_has_acc_tgtax();
  void clear_has_acc_tgtax();
  void set_has_rolling_counter_0x238();
  void clear_has_rolling_counter_0x238();
  void set_has_checksum_0x238();
  void clear_has_checksum_0x238();
  void set_has_acc_tgtaxuppercomftband();
  void clear_has_acc_tgtaxuppercomftband();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double acc_tgtaxlowercomftband_;
  double acc_tgtaxupperlim_;
  double acc_tgtaxlowerlim_;
  double acc_tgtax_;
  ::google::protobuf::int32 rolling_counter_0x238_;
  ::google::protobuf::int32 checksum_0x238_;
  double acc_tgtaxuppercomftband_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mrr_0x239_239 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Mrr_0x239_239) */ {
 public:
  Mrr_0x239_239();
  virtual ~Mrr_0x239_239();

  Mrr_0x239_239(const Mrr_0x239_239& from);

  inline Mrr_0x239_239& operator=(const Mrr_0x239_239& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mrr_0x239_239& default_instance();

  static inline const Mrr_0x239_239* internal_default_instance() {
    return reinterpret_cast<const Mrr_0x239_239*>(
               &_Mrr_0x239_239_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Mrr_0x239_239* other);

  // implements Message ----------------------------------------------

  inline Mrr_0x239_239* New() const PROTOBUF_FINAL { return New(NULL); }

  Mrr_0x239_239* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mrr_0x239_239& from);
  void MergeFrom(const Mrr_0x239_239& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mrr_0x239_239* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Mrr_0x239_239_Acc_uppercomftbandreqType Acc_uppercomftbandreqType;
  static const Acc_uppercomftbandreqType ACC_UPPERCOMFTBANDREQ_NO_DEMAND =
    Mrr_0x239_239_Acc_uppercomftbandreqType_ACC_UPPERCOMFTBANDREQ_NO_DEMAND;
  static const Acc_uppercomftbandreqType ACC_UPPERCOMFTBANDREQ_DEMAND =
    Mrr_0x239_239_Acc_uppercomftbandreqType_ACC_UPPERCOMFTBANDREQ_DEMAND;
  static inline bool Acc_uppercomftbandreqType_IsValid(int value) {
    return Mrr_0x239_239_Acc_uppercomftbandreqType_IsValid(value);
  }
  static const Acc_uppercomftbandreqType Acc_uppercomftbandreqType_MIN =
    Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_MIN;
  static const Acc_uppercomftbandreqType Acc_uppercomftbandreqType_MAX =
    Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_MAX;
  static const int Acc_uppercomftbandreqType_ARRAYSIZE =
    Mrr_0x239_239_Acc_uppercomftbandreqType_Acc_uppercomftbandreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acc_uppercomftbandreqType_descriptor() {
    return Mrr_0x239_239_Acc_uppercomftbandreqType_descriptor();
  }
  static inline const ::std::string& Acc_uppercomftbandreqType_Name(Acc_uppercomftbandreqType value) {
    return Mrr_0x239_239_Acc_uppercomftbandreqType_Name(value);
  }
  static inline bool Acc_uppercomftbandreqType_Parse(const ::std::string& name,
      Acc_uppercomftbandreqType* value) {
    return Mrr_0x239_239_Acc_uppercomftbandreqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Acc_brakepreferredType Acc_brakepreferredType;
  static const Acc_brakepreferredType ACC_BRAKEPREFERRED_NO_DEMAND =
    Mrr_0x239_239_Acc_brakepreferredType_ACC_BRAKEPREFERRED_NO_DEMAND;
  static const Acc_brakepreferredType ACC_BRAKEPREFERRED_DEMAND =
    Mrr_0x239_239_Acc_brakepreferredType_ACC_BRAKEPREFERRED_DEMAND;
  static inline bool Acc_brakepreferredType_IsValid(int value) {
    return Mrr_0x239_239_Acc_brakepreferredType_IsValid(value);
  }
  static const Acc_brakepreferredType Acc_brakepreferredType_MIN =
    Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_MIN;
  static const Acc_brakepreferredType Acc_brakepreferredType_MAX =
    Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_MAX;
  static const int Acc_brakepreferredType_ARRAYSIZE =
    Mrr_0x239_239_Acc_brakepreferredType_Acc_brakepreferredType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acc_brakepreferredType_descriptor() {
    return Mrr_0x239_239_Acc_brakepreferredType_descriptor();
  }
  static inline const ::std::string& Acc_brakepreferredType_Name(Acc_brakepreferredType value) {
    return Mrr_0x239_239_Acc_brakepreferredType_Name(value);
  }
  static inline bool Acc_brakepreferredType_Parse(const ::std::string& name,
      Acc_brakepreferredType* value) {
    return Mrr_0x239_239_Acc_brakepreferredType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Eba_reqType Eba_reqType;
  static const Eba_reqType EBA_REQ_NO_DEMAND =
    Mrr_0x239_239_Eba_reqType_EBA_REQ_NO_DEMAND;
  static const Eba_reqType EBA_REQ_DEMAND =
    Mrr_0x239_239_Eba_reqType_EBA_REQ_DEMAND;
  static inline bool Eba_reqType_IsValid(int value) {
    return Mrr_0x239_239_Eba_reqType_IsValid(value);
  }
  static const Eba_reqType Eba_reqType_MIN =
    Mrr_0x239_239_Eba_reqType_Eba_reqType_MIN;
  static const Eba_reqType Eba_reqType_MAX =
    Mrr_0x239_239_Eba_reqType_Eba_reqType_MAX;
  static const int Eba_reqType_ARRAYSIZE =
    Mrr_0x239_239_Eba_reqType_Eba_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eba_reqType_descriptor() {
    return Mrr_0x239_239_Eba_reqType_descriptor();
  }
  static inline const ::std::string& Eba_reqType_Name(Eba_reqType value) {
    return Mrr_0x239_239_Eba_reqType_Name(value);
  }
  static inline bool Eba_reqType_Parse(const ::std::string& name,
      Eba_reqType* value) {
    return Mrr_0x239_239_Eba_reqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Aeb_reqType Aeb_reqType;
  static const Aeb_reqType AEB_REQ_NO_DEMAND =
    Mrr_0x239_239_Aeb_reqType_AEB_REQ_NO_DEMAND;
  static const Aeb_reqType AEB_REQ_DEMAND =
    Mrr_0x239_239_Aeb_reqType_AEB_REQ_DEMAND;
  static inline bool Aeb_reqType_IsValid(int value) {
    return Mrr_0x239_239_Aeb_reqType_IsValid(value);
  }
  static const Aeb_reqType Aeb_reqType_MIN =
    Mrr_0x239_239_Aeb_reqType_Aeb_reqType_MIN;
  static const Aeb_reqType Aeb_reqType_MAX =
    Mrr_0x239_239_Aeb_reqType_Aeb_reqType_MAX;
  static const int Aeb_reqType_ARRAYSIZE =
    Mrr_0x239_239_Aeb_reqType_Aeb_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Aeb_reqType_descriptor() {
    return Mrr_0x239_239_Aeb_reqType_descriptor();
  }
  static inline const ::std::string& Aeb_reqType_Name(Aeb_reqType value) {
    return Mrr_0x239_239_Aeb_reqType_Name(value);
  }
  static inline bool Aeb_reqType_Parse(const ::std::string& name,
      Aeb_reqType* value) {
    return Mrr_0x239_239_Aeb_reqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Acc_standstillreqType Acc_standstillreqType;
  static const Acc_standstillreqType ACC_STANDSTILLREQ_NO_DEMAND =
    Mrr_0x239_239_Acc_standstillreqType_ACC_STANDSTILLREQ_NO_DEMAND;
  static const Acc_standstillreqType ACC_STANDSTILLREQ_DEMAND =
    Mrr_0x239_239_Acc_standstillreqType_ACC_STANDSTILLREQ_DEMAND;
  static inline bool Acc_standstillreqType_IsValid(int value) {
    return Mrr_0x239_239_Acc_standstillreqType_IsValid(value);
  }
  static const Acc_standstillreqType Acc_standstillreqType_MIN =
    Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_MIN;
  static const Acc_standstillreqType Acc_standstillreqType_MAX =
    Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_MAX;
  static const int Acc_standstillreqType_ARRAYSIZE =
    Mrr_0x239_239_Acc_standstillreqType_Acc_standstillreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acc_standstillreqType_descriptor() {
    return Mrr_0x239_239_Acc_standstillreqType_descriptor();
  }
  static inline const ::std::string& Acc_standstillreqType_Name(Acc_standstillreqType value) {
    return Mrr_0x239_239_Acc_standstillreqType_Name(value);
  }
  static inline bool Acc_standstillreqType_Parse(const ::std::string& name,
      Acc_standstillreqType* value) {
    return Mrr_0x239_239_Acc_standstillreqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Acc_driveoffType Acc_driveoffType;
  static const Acc_driveoffType ACC_DRIVEOFF_NO_DEMAND =
    Mrr_0x239_239_Acc_driveoffType_ACC_DRIVEOFF_NO_DEMAND;
  static const Acc_driveoffType ACC_DRIVEOFF_DEMAND =
    Mrr_0x239_239_Acc_driveoffType_ACC_DRIVEOFF_DEMAND;
  static inline bool Acc_driveoffType_IsValid(int value) {
    return Mrr_0x239_239_Acc_driveoffType_IsValid(value);
  }
  static const Acc_driveoffType Acc_driveoffType_MIN =
    Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_MIN;
  static const Acc_driveoffType Acc_driveoffType_MAX =
    Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_MAX;
  static const int Acc_driveoffType_ARRAYSIZE =
    Mrr_0x239_239_Acc_driveoffType_Acc_driveoffType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acc_driveoffType_descriptor() {
    return Mrr_0x239_239_Acc_driveoffType_descriptor();
  }
  static inline const ::std::string& Acc_driveoffType_Name(Acc_driveoffType value) {
    return Mrr_0x239_239_Acc_driveoffType_Name(value);
  }
  static inline bool Acc_driveoffType_Parse(const ::std::string& name,
      Acc_driveoffType* value) {
    return Mrr_0x239_239_Acc_driveoffType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Awb_levelType Awb_levelType;
  static const Awb_levelType AWB_LEVEL_NO_LEVEL =
    Mrr_0x239_239_Awb_levelType_AWB_LEVEL_NO_LEVEL;
  static const Awb_levelType AWB_LEVEL_LEVEL_1 =
    Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_1;
  static const Awb_levelType AWB_LEVEL_LEVEL_2 =
    Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_2;
  static const Awb_levelType AWB_LEVEL_LEVEL_3 =
    Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_3;
  static const Awb_levelType AWB_LEVEL_LEVEL_4 =
    Mrr_0x239_239_Awb_levelType_AWB_LEVEL_LEVEL_4;
  static inline bool Awb_levelType_IsValid(int value) {
    return Mrr_0x239_239_Awb_levelType_IsValid(value);
  }
  static const Awb_levelType Awb_levelType_MIN =
    Mrr_0x239_239_Awb_levelType_Awb_levelType_MIN;
  static const Awb_levelType Awb_levelType_MAX =
    Mrr_0x239_239_Awb_levelType_Awb_levelType_MAX;
  static const int Awb_levelType_ARRAYSIZE =
    Mrr_0x239_239_Awb_levelType_Awb_levelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Awb_levelType_descriptor() {
    return Mrr_0x239_239_Awb_levelType_descriptor();
  }
  static inline const ::std::string& Awb_levelType_Name(Awb_levelType value) {
    return Mrr_0x239_239_Awb_levelType_Name(value);
  }
  static inline bool Awb_levelType_Parse(const ::std::string& name,
      Awb_levelType* value) {
    return Mrr_0x239_239_Awb_levelType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Abp_reqType Abp_reqType;
  static const Abp_reqType ABP_REQ_NO_DEMAND =
    Mrr_0x239_239_Abp_reqType_ABP_REQ_NO_DEMAND;
  static const Abp_reqType ABP_REQ_DEMAND =
    Mrr_0x239_239_Abp_reqType_ABP_REQ_DEMAND;
  static inline bool Abp_reqType_IsValid(int value) {
    return Mrr_0x239_239_Abp_reqType_IsValid(value);
  }
  static const Abp_reqType Abp_reqType_MIN =
    Mrr_0x239_239_Abp_reqType_Abp_reqType_MIN;
  static const Abp_reqType Abp_reqType_MAX =
    Mrr_0x239_239_Abp_reqType_Abp_reqType_MAX;
  static const int Abp_reqType_ARRAYSIZE =
    Mrr_0x239_239_Abp_reqType_Abp_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abp_reqType_descriptor() {
    return Mrr_0x239_239_Abp_reqType_descriptor();
  }
  static inline const ::std::string& Abp_reqType_Name(Abp_reqType value) {
    return Mrr_0x239_239_Abp_reqType_Name(value);
  }
  static inline bool Abp_reqType_Parse(const ::std::string& name,
      Abp_reqType* value) {
    return Mrr_0x239_239_Abp_reqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Awb_reqType Awb_reqType;
  static const Awb_reqType AWB_REQ_NO_DEMAND =
    Mrr_0x239_239_Awb_reqType_AWB_REQ_NO_DEMAND;
  static const Awb_reqType AWB_REQ_DEMAND =
    Mrr_0x239_239_Awb_reqType_AWB_REQ_DEMAND;
  static inline bool Awb_reqType_IsValid(int value) {
    return Mrr_0x239_239_Awb_reqType_IsValid(value);
  }
  static const Awb_reqType Awb_reqType_MIN =
    Mrr_0x239_239_Awb_reqType_Awb_reqType_MIN;
  static const Awb_reqType Awb_reqType_MAX =
    Mrr_0x239_239_Awb_reqType_Awb_reqType_MAX;
  static const int Awb_reqType_ARRAYSIZE =
    Mrr_0x239_239_Awb_reqType_Awb_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Awb_reqType_descriptor() {
    return Mrr_0x239_239_Awb_reqType_descriptor();
  }
  static inline const ::std::string& Awb_reqType_Name(Awb_reqType value) {
    return Mrr_0x239_239_Awb_reqType_Name(value);
  }
  static inline bool Awb_reqType_Parse(const ::std::string& name,
      Awb_reqType* value) {
    return Mrr_0x239_239_Awb_reqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Aba_reqType Aba_reqType;
  static const Aba_reqType ABA_REQ_NO_DEMAND =
    Mrr_0x239_239_Aba_reqType_ABA_REQ_NO_DEMAND;
  static const Aba_reqType ABA_REQ_DEMAND =
    Mrr_0x239_239_Aba_reqType_ABA_REQ_DEMAND;
  static inline bool Aba_reqType_IsValid(int value) {
    return Mrr_0x239_239_Aba_reqType_IsValid(value);
  }
  static const Aba_reqType Aba_reqType_MIN =
    Mrr_0x239_239_Aba_reqType_Aba_reqType_MIN;
  static const Aba_reqType Aba_reqType_MAX =
    Mrr_0x239_239_Aba_reqType_Aba_reqType_MAX;
  static const int Aba_reqType_ARRAYSIZE =
    Mrr_0x239_239_Aba_reqType_Aba_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Aba_reqType_descriptor() {
    return Mrr_0x239_239_Aba_reqType_descriptor();
  }
  static inline const ::std::string& Aba_reqType_Name(Aba_reqType value) {
    return Mrr_0x239_239_Aba_reqType_Name(value);
  }
  static inline bool Aba_reqType_Parse(const ::std::string& name,
      Aba_reqType* value) {
    return Mrr_0x239_239_Aba_reqType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Acc_stateType Acc_stateType;
  static const Acc_stateType ACC_STATE_OFF_MODE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_OFF_MODE;
  static const Acc_stateType ACC_STATE_PASSIVE_MODE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_PASSIVE_MODE;
  static const Acc_stateType ACC_STATE_STAND_BY_MODE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_STAND_BY_MODE;
  static const Acc_stateType ACC_STATE_ACTIVE_CONTROL_MODE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_ACTIVE_CONTROL_MODE;
  static const Acc_stateType ACC_STATE_BRAKE_ONLY_MODE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_BRAKE_ONLY_MODE;
  static const Acc_stateType ACC_STATE_OVERRIDE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_OVERRIDE;
  static const Acc_stateType ACC_STATE_STANDSTILL =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_STANDSTILL;
  static const Acc_stateType ACC_STATE_FAILURE_MODE =
    Mrr_0x239_239_Acc_stateType_ACC_STATE_FAILURE_MODE;
  static inline bool Acc_stateType_IsValid(int value) {
    return Mrr_0x239_239_Acc_stateType_IsValid(value);
  }
  static const Acc_stateType Acc_stateType_MIN =
    Mrr_0x239_239_Acc_stateType_Acc_stateType_MIN;
  static const Acc_stateType Acc_stateType_MAX =
    Mrr_0x239_239_Acc_stateType_Acc_stateType_MAX;
  static const int Acc_stateType_ARRAYSIZE =
    Mrr_0x239_239_Acc_stateType_Acc_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acc_stateType_descriptor() {
    return Mrr_0x239_239_Acc_stateType_descriptor();
  }
  static inline const ::std::string& Acc_stateType_Name(Acc_stateType value) {
    return Mrr_0x239_239_Acc_stateType_Name(value);
  }
  static inline bool Acc_stateType_Parse(const ::std::string& name,
      Acc_stateType* value) {
    return Mrr_0x239_239_Acc_stateType_Parse(name, value);
  }

  typedef Mrr_0x239_239_ShutdownmodeType ShutdownmodeType;
  static const ShutdownmodeType SHUTDOWNMODE_SOFT_OFF =
    Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_SOFT_OFF;
  static const ShutdownmodeType SHUTDOWNMODE_FAST_OFF =
    Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_FAST_OFF;
  static const ShutdownmodeType SHUTDOWNMODE_RESERVED =
    Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_RESERVED;
  static const ShutdownmodeType SHUTDOWNMODE_INITIAL =
    Mrr_0x239_239_ShutdownmodeType_SHUTDOWNMODE_INITIAL;
  static inline bool ShutdownmodeType_IsValid(int value) {
    return Mrr_0x239_239_ShutdownmodeType_IsValid(value);
  }
  static const ShutdownmodeType ShutdownmodeType_MIN =
    Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_MIN;
  static const ShutdownmodeType ShutdownmodeType_MAX =
    Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_MAX;
  static const int ShutdownmodeType_ARRAYSIZE =
    Mrr_0x239_239_ShutdownmodeType_ShutdownmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShutdownmodeType_descriptor() {
    return Mrr_0x239_239_ShutdownmodeType_descriptor();
  }
  static inline const ::std::string& ShutdownmodeType_Name(ShutdownmodeType value) {
    return Mrr_0x239_239_ShutdownmodeType_Name(value);
  }
  static inline bool ShutdownmodeType_Parse(const ::std::string& name,
      ShutdownmodeType* value) {
    return Mrr_0x239_239_ShutdownmodeType_Parse(name, value);
  }

  typedef Mrr_0x239_239_Aba_levelType Aba_levelType;
  static const Aba_levelType ABA_LEVEL_LEVEL_0 =
    Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_0;
  static const Aba_levelType ABA_LEVEL_LEVEL_1 =
    Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_1;
  static const Aba_levelType ABA_LEVEL_LEVEL_2 =
    Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_2;
  static const Aba_levelType ABA_LEVEL_LEVEL_3 =
    Mrr_0x239_239_Aba_levelType_ABA_LEVEL_LEVEL_3;
  static inline bool Aba_levelType_IsValid(int value) {
    return Mrr_0x239_239_Aba_levelType_IsValid(value);
  }
  static const Aba_levelType Aba_levelType_MIN =
    Mrr_0x239_239_Aba_levelType_Aba_levelType_MIN;
  static const Aba_levelType Aba_levelType_MAX =
    Mrr_0x239_239_Aba_levelType_Aba_levelType_MAX;
  static const int Aba_levelType_ARRAYSIZE =
    Mrr_0x239_239_Aba_levelType_Aba_levelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Aba_levelType_descriptor() {
    return Mrr_0x239_239_Aba_levelType_descriptor();
  }
  static inline const ::std::string& Aba_levelType_Name(Aba_levelType value) {
    return Mrr_0x239_239_Aba_levelType_Name(value);
  }
  static inline bool Aba_levelType_Parse(const ::std::string& name,
      Aba_levelType* value) {
    return Mrr_0x239_239_Aba_levelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
  bool has_acc_uppercomftbandreq() const;
  void clear_acc_uppercomftbandreq();
  static const int kAccUppercomftbandreqFieldNumber = 1;
  ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType acc_uppercomftbandreq() const;
  void set_acc_uppercomftbandreq(::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
  bool has_acc_brakepreferred() const;
  void clear_acc_brakepreferred();
  static const int kAccBrakepreferredFieldNumber = 2;
  ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType acc_brakepreferred() const;
  void set_acc_brakepreferred(::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
  bool has_eba_req() const;
  void clear_eba_req();
  static const int kEbaReqFieldNumber = 3;
  ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType eba_req() const;
  void set_eba_req(::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
  bool has_aeb_req() const;
  void clear_aeb_req();
  static const int kAebReqFieldNumber = 4;
  ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType aeb_req() const;
  void set_aeb_req(::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
  bool has_acc_standstillreq() const;
  void clear_acc_standstillreq();
  static const int kAccStandstillreqFieldNumber = 5;
  ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType acc_standstillreq() const;
  void set_acc_standstillreq(::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
  bool has_acc_driveoff() const;
  void clear_acc_driveoff();
  static const int kAccDriveoffFieldNumber = 6;
  ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType acc_driveoff() const;
  void set_acc_driveoff(::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
  bool has_awb_level() const;
  void clear_awb_level();
  static const int kAwbLevelFieldNumber = 7;
  ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType awb_level() const;
  void set_awb_level(::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
  bool has_abp_req() const;
  void clear_abp_req();
  static const int kAbpReqFieldNumber = 8;
  ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType abp_req() const;
  void set_abp_req(::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
  bool has_awb_req() const;
  void clear_awb_req();
  static const int kAwbReqFieldNumber = 9;
  ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType awb_req() const;
  void set_awb_req(::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
  bool has_aba_req() const;
  void clear_aba_req();
  static const int kAbaReqFieldNumber = 10;
  ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType aba_req() const;
  void set_aba_req(::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType value);

  // optional double aeb_tgtax = 11;
  bool has_aeb_tgtax() const;
  void clear_aeb_tgtax();
  static const int kAebTgtaxFieldNumber = 11;
  double aeb_tgtax() const;
  void set_aeb_tgtax(double value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
  bool has_acc_state() const;
  void clear_acc_state();
  static const int kAccStateFieldNumber = 12;
  ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType acc_state() const;
  void set_acc_state(::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType value);

  // optional int32 rolling_counter_0x239 = 13;
  bool has_rolling_counter_0x239() const;
  void clear_rolling_counter_0x239();
  static const int kRollingCounter0X239FieldNumber = 13;
  ::google::protobuf::int32 rolling_counter_0x239() const;
  void set_rolling_counter_0x239(::google::protobuf::int32 value);

  // optional int32 checksum_0x239 = 14;
  bool has_checksum_0x239() const;
  void clear_checksum_0x239();
  static const int kChecksum0X239FieldNumber = 14;
  ::google::protobuf::int32 checksum_0x239() const;
  void set_checksum_0x239(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
  bool has_shutdownmode() const;
  void clear_shutdownmode();
  static const int kShutdownmodeFieldNumber = 15;
  ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType shutdownmode() const;
  void set_shutdownmode(::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType value);

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
  bool has_aba_level() const;
  void clear_aba_level();
  static const int kAbaLevelFieldNumber = 16;
  ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType aba_level() const;
  void set_aba_level(::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Mrr_0x239_239)
 private:
  void set_has_acc_uppercomftbandreq();
  void clear_has_acc_uppercomftbandreq();
  void set_has_acc_brakepreferred();
  void clear_has_acc_brakepreferred();
  void set_has_eba_req();
  void clear_has_eba_req();
  void set_has_aeb_req();
  void clear_has_aeb_req();
  void set_has_acc_standstillreq();
  void clear_has_acc_standstillreq();
  void set_has_acc_driveoff();
  void clear_has_acc_driveoff();
  void set_has_awb_level();
  void clear_has_awb_level();
  void set_has_abp_req();
  void clear_has_abp_req();
  void set_has_awb_req();
  void clear_has_awb_req();
  void set_has_aba_req();
  void clear_has_aba_req();
  void set_has_aeb_tgtax();
  void clear_has_aeb_tgtax();
  void set_has_acc_state();
  void clear_has_acc_state();
  void set_has_rolling_counter_0x239();
  void clear_has_rolling_counter_0x239();
  void set_has_checksum_0x239();
  void clear_has_checksum_0x239();
  void set_has_shutdownmode();
  void clear_has_shutdownmode();
  void set_has_aba_level();
  void clear_has_aba_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int acc_uppercomftbandreq_;
  int acc_brakepreferred_;
  int eba_req_;
  int aeb_req_;
  int acc_standstillreq_;
  int acc_driveoff_;
  int awb_level_;
  int abp_req_;
  int awb_req_;
  int aba_req_;
  double aeb_tgtax_;
  int acc_state_;
  ::google::protobuf::int32 rolling_counter_0x239_;
  ::google::protobuf::int32 checksum_0x239_;
  int shutdownmode_;
  int aba_level_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_direction_0x235_235 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_direction_0x235_235) */ {
 public:
  Esp_direction_0x235_235();
  virtual ~Esp_direction_0x235_235();

  Esp_direction_0x235_235(const Esp_direction_0x235_235& from);

  inline Esp_direction_0x235_235& operator=(const Esp_direction_0x235_235& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_direction_0x235_235& default_instance();

  static inline const Esp_direction_0x235_235* internal_default_instance() {
    return reinterpret_cast<const Esp_direction_0x235_235*>(
               &_Esp_direction_0x235_235_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Esp_direction_0x235_235* other);

  // implements Message ----------------------------------------------

  inline Esp_direction_0x235_235* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_direction_0x235_235* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_direction_0x235_235& from);
  void MergeFrom(const Esp_direction_0x235_235& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_direction_0x235_235* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_frwheeldrivedirstatusType;
  static const Esp_frwheeldrivedirstatusType ESP_FRWHEELDRIVEDIRSTATUS_VALID =
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_ESP_FRWHEELDRIVEDIRSTATUS_VALID;
  static const Esp_frwheeldrivedirstatusType ESP_FRWHEELDRIVEDIRSTATUS_INVALID =
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_ESP_FRWHEELDRIVEDIRSTATUS_INVALID;
  static inline bool Esp_frwheeldrivedirstatusType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_IsValid(value);
  }
  static const Esp_frwheeldrivedirstatusType Esp_frwheeldrivedirstatusType_MIN =
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_MIN;
  static const Esp_frwheeldrivedirstatusType Esp_frwheeldrivedirstatusType_MAX =
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_MAX;
  static const int Esp_frwheeldrivedirstatusType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Esp_frwheeldrivedirstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_frwheeldrivedirstatusType_descriptor() {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_descriptor();
  }
  static inline const ::std::string& Esp_frwheeldrivedirstatusType_Name(Esp_frwheeldrivedirstatusType value) {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Name(value);
  }
  static inline bool Esp_frwheeldrivedirstatusType_Parse(const ::std::string& name,
      Esp_frwheeldrivedirstatusType* value) {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_flwheeldrivedirstatusType;
  static const Esp_flwheeldrivedirstatusType ESP_FLWHEELDRIVEDIRSTATUS_VALID =
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_ESP_FLWHEELDRIVEDIRSTATUS_VALID;
  static const Esp_flwheeldrivedirstatusType ESP_FLWHEELDRIVEDIRSTATUS_INVALID =
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_ESP_FLWHEELDRIVEDIRSTATUS_INVALID;
  static inline bool Esp_flwheeldrivedirstatusType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_IsValid(value);
  }
  static const Esp_flwheeldrivedirstatusType Esp_flwheeldrivedirstatusType_MIN =
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_MIN;
  static const Esp_flwheeldrivedirstatusType Esp_flwheeldrivedirstatusType_MAX =
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_MAX;
  static const int Esp_flwheeldrivedirstatusType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Esp_flwheeldrivedirstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_flwheeldrivedirstatusType_descriptor() {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_descriptor();
  }
  static inline const ::std::string& Esp_flwheeldrivedirstatusType_Name(Esp_flwheeldrivedirstatusType value) {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Name(value);
  }
  static inline bool Esp_flwheeldrivedirstatusType_Parse(const ::std::string& name,
      Esp_flwheeldrivedirstatusType* value) {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_rrwheeldrivedirstatusType;
  static const Esp_rrwheeldrivedirstatusType ESP_RRWHEELDRIVEDIRSTATUS_VALID =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_ESP_RRWHEELDRIVEDIRSTATUS_VALID;
  static const Esp_rrwheeldrivedirstatusType ESP_RRWHEELDRIVEDIRSTATUS_INVALID =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_ESP_RRWHEELDRIVEDIRSTATUS_INVALID;
  static inline bool Esp_rrwheeldrivedirstatusType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_IsValid(value);
  }
  static const Esp_rrwheeldrivedirstatusType Esp_rrwheeldrivedirstatusType_MIN =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_MIN;
  static const Esp_rrwheeldrivedirstatusType Esp_rrwheeldrivedirstatusType_MAX =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_MAX;
  static const int Esp_rrwheeldrivedirstatusType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Esp_rrwheeldrivedirstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_rrwheeldrivedirstatusType_descriptor() {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_descriptor();
  }
  static inline const ::std::string& Esp_rrwheeldrivedirstatusType_Name(Esp_rrwheeldrivedirstatusType value) {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Name(value);
  }
  static inline bool Esp_rrwheeldrivedirstatusType_Parse(const ::std::string& name,
      Esp_rrwheeldrivedirstatusType* value) {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_rlwheeldrivedirstatusType;
  static const Esp_rlwheeldrivedirstatusType ESP_RLWHEELDRIVEDIRSTATUS_VALID =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_ESP_RLWHEELDRIVEDIRSTATUS_VALID;
  static const Esp_rlwheeldrivedirstatusType ESP_RLWHEELDRIVEDIRSTATUS_INVALID =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_ESP_RLWHEELDRIVEDIRSTATUS_INVALID;
  static inline bool Esp_rlwheeldrivedirstatusType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_IsValid(value);
  }
  static const Esp_rlwheeldrivedirstatusType Esp_rlwheeldrivedirstatusType_MIN =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_MIN;
  static const Esp_rlwheeldrivedirstatusType Esp_rlwheeldrivedirstatusType_MAX =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_MAX;
  static const int Esp_rlwheeldrivedirstatusType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Esp_rlwheeldrivedirstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_rlwheeldrivedirstatusType_descriptor() {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_descriptor();
  }
  static inline const ::std::string& Esp_rlwheeldrivedirstatusType_Name(Esp_rlwheeldrivedirstatusType value) {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Name(value);
  }
  static inline bool Esp_rlwheeldrivedirstatusType_Parse(const ::std::string& name,
      Esp_rlwheeldrivedirstatusType* value) {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_rrwheeldrivedirectionType;
  static const Esp_rrwheeldrivedirectionType ESP_RRWHEELDRIVEDIRECTION_UNDEFINED =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_UNDEFINED;
  static const Esp_rrwheeldrivedirectionType ESP_RRWHEELDRIVEDIRECTION_STANDSTILL =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_STANDSTILL;
  static const Esp_rrwheeldrivedirectionType ESP_RRWHEELDRIVEDIRECTION_FORWARD =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_FORWARD;
  static const Esp_rrwheeldrivedirectionType ESP_RRWHEELDRIVEDIRECTION_BACKWARD =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_ESP_RRWHEELDRIVEDIRECTION_BACKWARD;
  static inline bool Esp_rrwheeldrivedirectionType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_IsValid(value);
  }
  static const Esp_rrwheeldrivedirectionType Esp_rrwheeldrivedirectionType_MIN =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_MIN;
  static const Esp_rrwheeldrivedirectionType Esp_rrwheeldrivedirectionType_MAX =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_MAX;
  static const int Esp_rrwheeldrivedirectionType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Esp_rrwheeldrivedirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_rrwheeldrivedirectionType_descriptor() {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_descriptor();
  }
  static inline const ::std::string& Esp_rrwheeldrivedirectionType_Name(Esp_rrwheeldrivedirectionType value) {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Name(value);
  }
  static inline bool Esp_rrwheeldrivedirectionType_Parse(const ::std::string& name,
      Esp_rrwheeldrivedirectionType* value) {
    return Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_rlwheeldrivedirectionType;
  static const Esp_rlwheeldrivedirectionType ESP_RLWHEELDRIVEDIRECTION_UNDEFINED =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_UNDEFINED;
  static const Esp_rlwheeldrivedirectionType ESP_RLWHEELDRIVEDIRECTION_STANDSTILL =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_STANDSTILL;
  static const Esp_rlwheeldrivedirectionType ESP_RLWHEELDRIVEDIRECTION_FORWARD =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_FORWARD;
  static const Esp_rlwheeldrivedirectionType ESP_RLWHEELDRIVEDIRECTION_BACKWARD =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_ESP_RLWHEELDRIVEDIRECTION_BACKWARD;
  static inline bool Esp_rlwheeldrivedirectionType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_IsValid(value);
  }
  static const Esp_rlwheeldrivedirectionType Esp_rlwheeldrivedirectionType_MIN =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_MIN;
  static const Esp_rlwheeldrivedirectionType Esp_rlwheeldrivedirectionType_MAX =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_MAX;
  static const int Esp_rlwheeldrivedirectionType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Esp_rlwheeldrivedirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_rlwheeldrivedirectionType_descriptor() {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_descriptor();
  }
  static inline const ::std::string& Esp_rlwheeldrivedirectionType_Name(Esp_rlwheeldrivedirectionType value) {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Name(value);
  }
  static inline bool Esp_rlwheeldrivedirectionType_Parse(const ::std::string& name,
      Esp_rlwheeldrivedirectionType* value) {
    return Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_frwheeldrivedirectionType;
  static const Esp_frwheeldrivedirectionType ESP_FRWHEELDRIVEDIRECTION_UNDEFINED =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_UNDEFINED;
  static const Esp_frwheeldrivedirectionType ESP_FRWHEELDRIVEDIRECTION_STANDSTILL =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_STANDSTILL;
  static const Esp_frwheeldrivedirectionType ESP_FRWHEELDRIVEDIRECTION_FORWARD =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_FORWARD;
  static const Esp_frwheeldrivedirectionType ESP_FRWHEELDRIVEDIRECTION_BACKWARD =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_ESP_FRWHEELDRIVEDIRECTION_BACKWARD;
  static inline bool Esp_frwheeldrivedirectionType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_IsValid(value);
  }
  static const Esp_frwheeldrivedirectionType Esp_frwheeldrivedirectionType_MIN =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_MIN;
  static const Esp_frwheeldrivedirectionType Esp_frwheeldrivedirectionType_MAX =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_MAX;
  static const int Esp_frwheeldrivedirectionType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Esp_frwheeldrivedirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_frwheeldrivedirectionType_descriptor() {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_descriptor();
  }
  static inline const ::std::string& Esp_frwheeldrivedirectionType_Name(Esp_frwheeldrivedirectionType value) {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Name(value);
  }
  static inline bool Esp_frwheeldrivedirectionType_Parse(const ::std::string& name,
      Esp_frwheeldrivedirectionType* value) {
    return Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_flwheeldrivedirectionType;
  static const Esp_flwheeldrivedirectionType ESP_FLWHEELDRIVEDIRECTION_UNDEFINED =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_UNDEFINED;
  static const Esp_flwheeldrivedirectionType ESP_FLWHEELDRIVEDIRECTION_STANDSTILL =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_STANDSTILL;
  static const Esp_flwheeldrivedirectionType ESP_FLWHEELDRIVEDIRECTION_FORWARD =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_FORWARD;
  static const Esp_flwheeldrivedirectionType ESP_FLWHEELDRIVEDIRECTION_BACKWARD =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_ESP_FLWHEELDRIVEDIRECTION_BACKWARD;
  static inline bool Esp_flwheeldrivedirectionType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_IsValid(value);
  }
  static const Esp_flwheeldrivedirectionType Esp_flwheeldrivedirectionType_MIN =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_MIN;
  static const Esp_flwheeldrivedirectionType Esp_flwheeldrivedirectionType_MAX =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_MAX;
  static const int Esp_flwheeldrivedirectionType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Esp_flwheeldrivedirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_flwheeldrivedirectionType_descriptor() {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_descriptor();
  }
  static inline const ::std::string& Esp_flwheeldrivedirectionType_Name(Esp_flwheeldrivedirectionType value) {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Name(value);
  }
  static inline bool Esp_flwheeldrivedirectionType_Parse(const ::std::string& name,
      Esp_flwheeldrivedirectionType* value) {
    return Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_whlmilgrearlestatusType;
  static const Esp_whlmilgrearlestatusType ESP_WHLMILGREARLESTATUS_VALID =
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_ESP_WHLMILGREARLESTATUS_VALID;
  static const Esp_whlmilgrearlestatusType ESP_WHLMILGREARLESTATUS_INVALID =
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_ESP_WHLMILGREARLESTATUS_INVALID;
  static inline bool Esp_whlmilgrearlestatusType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_IsValid(value);
  }
  static const Esp_whlmilgrearlestatusType Esp_whlmilgrearlestatusType_MIN =
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_MIN;
  static const Esp_whlmilgrearlestatusType Esp_whlmilgrearlestatusType_MAX =
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_MAX;
  static const int Esp_whlmilgrearlestatusType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Esp_whlmilgrearlestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_whlmilgrearlestatusType_descriptor() {
    return Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_descriptor();
  }
  static inline const ::std::string& Esp_whlmilgrearlestatusType_Name(Esp_whlmilgrearlestatusType value) {
    return Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Name(value);
  }
  static inline bool Esp_whlmilgrearlestatusType_Parse(const ::std::string& name,
      Esp_whlmilgrearlestatusType* value) {
    return Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_whlmilgrearristatusType;
  static const Esp_whlmilgrearristatusType ESP_WHLMILGREARRISTATUS_VALID =
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_ESP_WHLMILGREARRISTATUS_VALID;
  static const Esp_whlmilgrearristatusType ESP_WHLMILGREARRISTATUS_INVALID =
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_ESP_WHLMILGREARRISTATUS_INVALID;
  static inline bool Esp_whlmilgrearristatusType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_whlmilgrearristatusType_IsValid(value);
  }
  static const Esp_whlmilgrearristatusType Esp_whlmilgrearristatusType_MIN =
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_MIN;
  static const Esp_whlmilgrearristatusType Esp_whlmilgrearristatusType_MAX =
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_MAX;
  static const int Esp_whlmilgrearristatusType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Esp_whlmilgrearristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_whlmilgrearristatusType_descriptor() {
    return Esp_direction_0x235_235_Esp_whlmilgrearristatusType_descriptor();
  }
  static inline const ::std::string& Esp_whlmilgrearristatusType_Name(Esp_whlmilgrearristatusType value) {
    return Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Name(value);
  }
  static inline bool Esp_whlmilgrearristatusType_Parse(const ::std::string& name,
      Esp_whlmilgrearristatusType* value) {
    return Esp_direction_0x235_235_Esp_whlmilgrearristatusType_Parse(name, value);
  }

  typedef Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_vehiclestandstillType;
  static const Esp_vehiclestandstillType ESP_VEHICLESTANDSTILL_NOT_STANDSTILL =
    Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_NOT_STANDSTILL;
  static const Esp_vehiclestandstillType ESP_VEHICLESTANDSTILL_STANDSTILL =
    Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_STANDSTILL;
  static const Esp_vehiclestandstillType ESP_VEHICLESTANDSTILL_INVALID =
    Esp_direction_0x235_235_Esp_vehiclestandstillType_ESP_VEHICLESTANDSTILL_INVALID;
  static inline bool Esp_vehiclestandstillType_IsValid(int value) {
    return Esp_direction_0x235_235_Esp_vehiclestandstillType_IsValid(value);
  }
  static const Esp_vehiclestandstillType Esp_vehiclestandstillType_MIN =
    Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_MIN;
  static const Esp_vehiclestandstillType Esp_vehiclestandstillType_MAX =
    Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_MAX;
  static const int Esp_vehiclestandstillType_ARRAYSIZE =
    Esp_direction_0x235_235_Esp_vehiclestandstillType_Esp_vehiclestandstillType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vehiclestandstillType_descriptor() {
    return Esp_direction_0x235_235_Esp_vehiclestandstillType_descriptor();
  }
  static inline const ::std::string& Esp_vehiclestandstillType_Name(Esp_vehiclestandstillType value) {
    return Esp_direction_0x235_235_Esp_vehiclestandstillType_Name(value);
  }
  static inline bool Esp_vehiclestandstillType_Parse(const ::std::string& name,
      Esp_vehiclestandstillType* value) {
    return Esp_direction_0x235_235_Esp_vehiclestandstillType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 esp_whlmilgrearre = 1;
  bool has_esp_whlmilgrearre() const;
  void clear_esp_whlmilgrearre();
  static const int kEspWhlmilgrearreFieldNumber = 1;
  ::google::protobuf::int32 esp_whlmilgrearre() const;
  void set_esp_whlmilgrearre(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
  bool has_esp_frwheeldrivedirstatus() const;
  void clear_esp_frwheeldrivedirstatus();
  static const int kEspFrwheeldrivedirstatusFieldNumber = 2;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus() const;
  void set_esp_frwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
  bool has_esp_flwheeldrivedirstatus() const;
  void clear_esp_flwheeldrivedirstatus();
  static const int kEspFlwheeldrivedirstatusFieldNumber = 3;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus() const;
  void set_esp_flwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
  bool has_esp_rrwheeldrivedirstatus() const;
  void clear_esp_rrwheeldrivedirstatus();
  static const int kEspRrwheeldrivedirstatusFieldNumber = 4;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus() const;
  void set_esp_rrwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
  bool has_esp_rlwheeldrivedirstatus() const;
  void clear_esp_rlwheeldrivedirstatus();
  static const int kEspRlwheeldrivedirstatusFieldNumber = 5;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus() const;
  void set_esp_rlwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
  bool has_esp_rrwheeldrivedirection() const;
  void clear_esp_rrwheeldrivedirection();
  static const int kEspRrwheeldrivedirectionFieldNumber = 6;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection() const;
  void set_esp_rrwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
  bool has_esp_rlwheeldrivedirection() const;
  void clear_esp_rlwheeldrivedirection();
  static const int kEspRlwheeldrivedirectionFieldNumber = 7;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection() const;
  void set_esp_rlwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
  bool has_esp_frwheeldrivedirection() const;
  void clear_esp_frwheeldrivedirection();
  static const int kEspFrwheeldrivedirectionFieldNumber = 8;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType esp_frwheeldrivedirection() const;
  void set_esp_frwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
  bool has_esp_flwheeldrivedirection() const;
  void clear_esp_flwheeldrivedirection();
  static const int kEspFlwheeldrivedirectionFieldNumber = 9;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType esp_flwheeldrivedirection() const;
  void set_esp_flwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType value);

  // optional int32 rolling_counter_0x235 = 10;
  bool has_rolling_counter_0x235() const;
  void clear_rolling_counter_0x235();
  static const int kRollingCounter0X235FieldNumber = 10;
  ::google::protobuf::int32 rolling_counter_0x235() const;
  void set_rolling_counter_0x235(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
  bool has_esp_whlmilgrearlestatus() const;
  void clear_esp_whlmilgrearlestatus();
  static const int kEspWhlmilgrearlestatusFieldNumber = 11;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus() const;
  void set_esp_whlmilgrearlestatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
  bool has_esp_whlmilgrearristatus() const;
  void clear_esp_whlmilgrearristatus();
  static const int kEspWhlmilgrearristatusFieldNumber = 12;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType esp_whlmilgrearristatus() const;
  void set_esp_whlmilgrearristatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType value);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
  bool has_esp_vehiclestandstill() const;
  void clear_esp_vehiclestandstill();
  static const int kEspVehiclestandstillFieldNumber = 13;
  ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType esp_vehiclestandstill() const;
  void set_esp_vehiclestandstill(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType value);

  // optional int32 checksum_0x235 = 14;
  bool has_checksum_0x235() const;
  void clear_checksum_0x235();
  static const int kChecksum0X235FieldNumber = 14;
  ::google::protobuf::int32 checksum_0x235() const;
  void set_checksum_0x235(::google::protobuf::int32 value);

  // optional int32 esp_whlmilgrearle = 15;
  bool has_esp_whlmilgrearle() const;
  void clear_esp_whlmilgrearle();
  static const int kEspWhlmilgrearleFieldNumber = 15;
  ::google::protobuf::int32 esp_whlmilgrearle() const;
  void set_esp_whlmilgrearle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_direction_0x235_235)
 private:
  void set_has_esp_whlmilgrearre();
  void clear_has_esp_whlmilgrearre();
  void set_has_esp_frwheeldrivedirstatus();
  void clear_has_esp_frwheeldrivedirstatus();
  void set_has_esp_flwheeldrivedirstatus();
  void clear_has_esp_flwheeldrivedirstatus();
  void set_has_esp_rrwheeldrivedirstatus();
  void clear_has_esp_rrwheeldrivedirstatus();
  void set_has_esp_rlwheeldrivedirstatus();
  void clear_has_esp_rlwheeldrivedirstatus();
  void set_has_esp_rrwheeldrivedirection();
  void clear_has_esp_rrwheeldrivedirection();
  void set_has_esp_rlwheeldrivedirection();
  void clear_has_esp_rlwheeldrivedirection();
  void set_has_esp_frwheeldrivedirection();
  void clear_has_esp_frwheeldrivedirection();
  void set_has_esp_flwheeldrivedirection();
  void clear_has_esp_flwheeldrivedirection();
  void set_has_rolling_counter_0x235();
  void clear_has_rolling_counter_0x235();
  void set_has_esp_whlmilgrearlestatus();
  void clear_has_esp_whlmilgrearlestatus();
  void set_has_esp_whlmilgrearristatus();
  void clear_has_esp_whlmilgrearristatus();
  void set_has_esp_vehiclestandstill();
  void clear_has_esp_vehiclestandstill();
  void set_has_checksum_0x235();
  void clear_has_checksum_0x235();
  void set_has_esp_whlmilgrearle();
  void clear_has_esp_whlmilgrearle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 esp_whlmilgrearre_;
  int esp_frwheeldrivedirstatus_;
  int esp_flwheeldrivedirstatus_;
  int esp_rrwheeldrivedirstatus_;
  int esp_rlwheeldrivedirstatus_;
  int esp_rrwheeldrivedirection_;
  int esp_rlwheeldrivedirection_;
  int esp_frwheeldrivedirection_;
  int esp_flwheeldrivedirection_;
  ::google::protobuf::int32 rolling_counter_0x235_;
  int esp_whlmilgrearlestatus_;
  int esp_whlmilgrearristatus_;
  int esp_vehiclestandstill_;
  ::google::protobuf::int32 checksum_0x235_;
  ::google::protobuf::int32 esp_whlmilgrearle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_advanced_0x234_234 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_advanced_0x234_234) */ {
 public:
  Esp_advanced_0x234_234();
  virtual ~Esp_advanced_0x234_234();

  Esp_advanced_0x234_234(const Esp_advanced_0x234_234& from);

  inline Esp_advanced_0x234_234& operator=(const Esp_advanced_0x234_234& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_advanced_0x234_234& default_instance();

  static inline const Esp_advanced_0x234_234* internal_default_instance() {
    return reinterpret_cast<const Esp_advanced_0x234_234*>(
               &_Esp_advanced_0x234_234_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Esp_advanced_0x234_234* other);

  // implements Message ----------------------------------------------

  inline Esp_advanced_0x234_234* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_advanced_0x234_234* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_advanced_0x234_234& from);
  void MergeFrom(const Esp_advanced_0x234_234& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_advanced_0x234_234* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_advanced_0x234_234_Esp_vdcactiveType Esp_vdcactiveType;
  static const Esp_vdcactiveType ESP_VDCACTIVE_NOT_ACTIVE =
    Esp_advanced_0x234_234_Esp_vdcactiveType_ESP_VDCACTIVE_NOT_ACTIVE;
  static const Esp_vdcactiveType ESP_VDCACTIVE_ACTIVE =
    Esp_advanced_0x234_234_Esp_vdcactiveType_ESP_VDCACTIVE_ACTIVE;
  static inline bool Esp_vdcactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_vdcactiveType_IsValid(value);
  }
  static const Esp_vdcactiveType Esp_vdcactiveType_MIN =
    Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_MIN;
  static const Esp_vdcactiveType Esp_vdcactiveType_MAX =
    Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_MAX;
  static const int Esp_vdcactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_vdcactiveType_Esp_vdcactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vdcactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_vdcactiveType_descriptor();
  }
  static inline const ::std::string& Esp_vdcactiveType_Name(Esp_vdcactiveType value) {
    return Esp_advanced_0x234_234_Esp_vdcactiveType_Name(value);
  }
  static inline bool Esp_vdcactiveType_Parse(const ::std::string& name,
      Esp_vdcactiveType* value) {
    return Esp_advanced_0x234_234_Esp_vdcactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_ebdactiveType Esp_ebdactiveType;
  static const Esp_ebdactiveType ESP_EBDACTIVE_NOT_ACTIVE =
    Esp_advanced_0x234_234_Esp_ebdactiveType_ESP_EBDACTIVE_NOT_ACTIVE;
  static const Esp_ebdactiveType ESP_EBDACTIVE_ACTIVE =
    Esp_advanced_0x234_234_Esp_ebdactiveType_ESP_EBDACTIVE_ACTIVE;
  static inline bool Esp_ebdactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_ebdactiveType_IsValid(value);
  }
  static const Esp_ebdactiveType Esp_ebdactiveType_MIN =
    Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_MIN;
  static const Esp_ebdactiveType Esp_ebdactiveType_MAX =
    Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_MAX;
  static const int Esp_ebdactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_ebdactiveType_Esp_ebdactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_ebdactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_ebdactiveType_descriptor();
  }
  static inline const ::std::string& Esp_ebdactiveType_Name(Esp_ebdactiveType value) {
    return Esp_advanced_0x234_234_Esp_ebdactiveType_Name(value);
  }
  static inline bool Esp_ebdactiveType_Parse(const ::std::string& name,
      Esp_ebdactiveType* value) {
    return Esp_advanced_0x234_234_Esp_ebdactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_ecdtempoffType;
  static const Esp_ecdtempoffType ESP_ECDTEMPOFF_NOT_HIGH =
    Esp_advanced_0x234_234_Esp_ecdtempoffType_ESP_ECDTEMPOFF_NOT_HIGH;
  static const Esp_ecdtempoffType ESP_ECDTEMPOFF_TEMP_TOO_HIGH =
    Esp_advanced_0x234_234_Esp_ecdtempoffType_ESP_ECDTEMPOFF_TEMP_TOO_HIGH;
  static inline bool Esp_ecdtempoffType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_ecdtempoffType_IsValid(value);
  }
  static const Esp_ecdtempoffType Esp_ecdtempoffType_MIN =
    Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_MIN;
  static const Esp_ecdtempoffType Esp_ecdtempoffType_MAX =
    Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_MAX;
  static const int Esp_ecdtempoffType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_ecdtempoffType_Esp_ecdtempoffType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_ecdtempoffType_descriptor() {
    return Esp_advanced_0x234_234_Esp_ecdtempoffType_descriptor();
  }
  static inline const ::std::string& Esp_ecdtempoffType_Name(Esp_ecdtempoffType value) {
    return Esp_advanced_0x234_234_Esp_ecdtempoffType_Name(value);
  }
  static inline bool Esp_ecdtempoffType_Parse(const ::std::string& name,
      Esp_ecdtempoffType* value) {
    return Esp_advanced_0x234_234_Esp_ecdtempoffType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_nobrakeforceType;
  static const Esp_nobrakeforceType ESP_NOBRAKEFORCE_EXIST_BRK_FORCE =
    Esp_advanced_0x234_234_Esp_nobrakeforceType_ESP_NOBRAKEFORCE_EXIST_BRK_FORCE;
  static const Esp_nobrakeforceType ESP_NOBRAKEFORCE_NO_BRK_FORCE =
    Esp_advanced_0x234_234_Esp_nobrakeforceType_ESP_NOBRAKEFORCE_NO_BRK_FORCE;
  static inline bool Esp_nobrakeforceType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_nobrakeforceType_IsValid(value);
  }
  static const Esp_nobrakeforceType Esp_nobrakeforceType_MIN =
    Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_MIN;
  static const Esp_nobrakeforceType Esp_nobrakeforceType_MAX =
    Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_MAX;
  static const int Esp_nobrakeforceType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_nobrakeforceType_Esp_nobrakeforceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_nobrakeforceType_descriptor() {
    return Esp_advanced_0x234_234_Esp_nobrakeforceType_descriptor();
  }
  static inline const ::std::string& Esp_nobrakeforceType_Name(Esp_nobrakeforceType value) {
    return Esp_advanced_0x234_234_Esp_nobrakeforceType_Name(value);
  }
  static inline bool Esp_nobrakeforceType_Parse(const ::std::string& name,
      Esp_nobrakeforceType* value) {
    return Esp_advanced_0x234_234_Esp_nobrakeforceType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_brkfrictqtotatwhlvaildType;
  static const Esp_brkfrictqtotatwhlvaildType ESP_BRKFRICTQTOTATWHLVAILD_VALID =
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_ESP_BRKFRICTQTOTATWHLVAILD_VALID;
  static const Esp_brkfrictqtotatwhlvaildType ESP_BRKFRICTQTOTATWHLVAILD_INVALID =
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_ESP_BRKFRICTQTOTATWHLVAILD_INVALID;
  static inline bool Esp_brkfrictqtotatwhlvaildType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_IsValid(value);
  }
  static const Esp_brkfrictqtotatwhlvaildType Esp_brkfrictqtotatwhlvaildType_MIN =
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_MIN;
  static const Esp_brkfrictqtotatwhlvaildType Esp_brkfrictqtotatwhlvaildType_MAX =
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_MAX;
  static const int Esp_brkfrictqtotatwhlvaildType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Esp_brkfrictqtotatwhlvaildType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_brkfrictqtotatwhlvaildType_descriptor() {
    return Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_descriptor();
  }
  static inline const ::std::string& Esp_brkfrictqtotatwhlvaildType_Name(Esp_brkfrictqtotatwhlvaildType value) {
    return Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Name(value);
  }
  static inline bool Esp_brkfrictqtotatwhlvaildType_Parse(const ::std::string& name,
      Esp_brkfrictqtotatwhlvaildType* value) {
    return Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_aebdecavailableType;
  static const Esp_aebdecavailableType ESP_AEBDECAVAILABLE_NOT_AVAILABLE =
    Esp_advanced_0x234_234_Esp_aebdecavailableType_ESP_AEBDECAVAILABLE_NOT_AVAILABLE;
  static const Esp_aebdecavailableType ESP_AEBDECAVAILABLE_AVAILABLE =
    Esp_advanced_0x234_234_Esp_aebdecavailableType_ESP_AEBDECAVAILABLE_AVAILABLE;
  static inline bool Esp_aebdecavailableType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_aebdecavailableType_IsValid(value);
  }
  static const Esp_aebdecavailableType Esp_aebdecavailableType_MIN =
    Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_MIN;
  static const Esp_aebdecavailableType Esp_aebdecavailableType_MAX =
    Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_MAX;
  static const int Esp_aebdecavailableType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_aebdecavailableType_Esp_aebdecavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_aebdecavailableType_descriptor() {
    return Esp_advanced_0x234_234_Esp_aebdecavailableType_descriptor();
  }
  static inline const ::std::string& Esp_aebdecavailableType_Name(Esp_aebdecavailableType value) {
    return Esp_advanced_0x234_234_Esp_aebdecavailableType_Name(value);
  }
  static inline bool Esp_aebdecavailableType_Parse(const ::std::string& name,
      Esp_aebdecavailableType* value) {
    return Esp_advanced_0x234_234_Esp_aebdecavailableType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_aebdecactiveType;
  static const Esp_aebdecactiveType ESP_AEBDECACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_aebdecactiveType_ESP_AEBDECACTIVE_NOT_ACTIVATED;
  static const Esp_aebdecactiveType ESP_AEBDECACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_aebdecactiveType_ESP_AEBDECACTIVE_ACTIVATED;
  static inline bool Esp_aebdecactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_aebdecactiveType_IsValid(value);
  }
  static const Esp_aebdecactiveType Esp_aebdecactiveType_MIN =
    Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_MIN;
  static const Esp_aebdecactiveType Esp_aebdecactiveType_MAX =
    Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_MAX;
  static const int Esp_aebdecactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_aebdecactiveType_Esp_aebdecactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_aebdecactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_aebdecactiveType_descriptor();
  }
  static inline const ::std::string& Esp_aebdecactiveType_Name(Esp_aebdecactiveType value) {
    return Esp_advanced_0x234_234_Esp_aebdecactiveType_Name(value);
  }
  static inline bool Esp_aebdecactiveType_Parse(const ::std::string& name,
      Esp_aebdecactiveType* value) {
    return Esp_advanced_0x234_234_Esp_aebdecactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_prefillavailableType Esp_prefillavailableType;
  static const Esp_prefillavailableType ESP_PREFILLAVAILABLE_NOT_AVAILABLE =
    Esp_advanced_0x234_234_Esp_prefillavailableType_ESP_PREFILLAVAILABLE_NOT_AVAILABLE;
  static const Esp_prefillavailableType ESP_PREFILLAVAILABLE_AVAILABLE =
    Esp_advanced_0x234_234_Esp_prefillavailableType_ESP_PREFILLAVAILABLE_AVAILABLE;
  static inline bool Esp_prefillavailableType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_prefillavailableType_IsValid(value);
  }
  static const Esp_prefillavailableType Esp_prefillavailableType_MIN =
    Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_MIN;
  static const Esp_prefillavailableType Esp_prefillavailableType_MAX =
    Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_MAX;
  static const int Esp_prefillavailableType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_prefillavailableType_Esp_prefillavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_prefillavailableType_descriptor() {
    return Esp_advanced_0x234_234_Esp_prefillavailableType_descriptor();
  }
  static inline const ::std::string& Esp_prefillavailableType_Name(Esp_prefillavailableType value) {
    return Esp_advanced_0x234_234_Esp_prefillavailableType_Name(value);
  }
  static inline bool Esp_prefillavailableType_Parse(const ::std::string& name,
      Esp_prefillavailableType* value) {
    return Esp_advanced_0x234_234_Esp_prefillavailableType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_prefillactiveType Esp_prefillactiveType;
  static const Esp_prefillactiveType ESP_PREFILLACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_prefillactiveType_ESP_PREFILLACTIVE_NOT_ACTIVATED;
  static const Esp_prefillactiveType ESP_PREFILLACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_prefillactiveType_ESP_PREFILLACTIVE_ACTIVATED;
  static inline bool Esp_prefillactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_prefillactiveType_IsValid(value);
  }
  static const Esp_prefillactiveType Esp_prefillactiveType_MIN =
    Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_MIN;
  static const Esp_prefillactiveType Esp_prefillactiveType_MAX =
    Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_MAX;
  static const int Esp_prefillactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_prefillactiveType_Esp_prefillactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_prefillactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_prefillactiveType_descriptor();
  }
  static inline const ::std::string& Esp_prefillactiveType_Name(Esp_prefillactiveType value) {
    return Esp_advanced_0x234_234_Esp_prefillactiveType_Name(value);
  }
  static inline bool Esp_prefillactiveType_Parse(const ::std::string& name,
      Esp_prefillactiveType* value) {
    return Esp_advanced_0x234_234_Esp_prefillactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_abaavailableType Esp_abaavailableType;
  static const Esp_abaavailableType ESP_ABAAVAILABLE_NOT_AVAILABLE =
    Esp_advanced_0x234_234_Esp_abaavailableType_ESP_ABAAVAILABLE_NOT_AVAILABLE;
  static const Esp_abaavailableType ESP_ABAAVAILABLE_AVAILABLE =
    Esp_advanced_0x234_234_Esp_abaavailableType_ESP_ABAAVAILABLE_AVAILABLE;
  static inline bool Esp_abaavailableType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_abaavailableType_IsValid(value);
  }
  static const Esp_abaavailableType Esp_abaavailableType_MIN =
    Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_MIN;
  static const Esp_abaavailableType Esp_abaavailableType_MAX =
    Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_MAX;
  static const int Esp_abaavailableType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_abaavailableType_Esp_abaavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_abaavailableType_descriptor() {
    return Esp_advanced_0x234_234_Esp_abaavailableType_descriptor();
  }
  static inline const ::std::string& Esp_abaavailableType_Name(Esp_abaavailableType value) {
    return Esp_advanced_0x234_234_Esp_abaavailableType_Name(value);
  }
  static inline bool Esp_abaavailableType_Parse(const ::std::string& name,
      Esp_abaavailableType* value) {
    return Esp_advanced_0x234_234_Esp_abaavailableType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_abaactiveType Esp_abaactiveType;
  static const Esp_abaactiveType ESP_ABAACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_abaactiveType_ESP_ABAACTIVE_NOT_ACTIVATED;
  static const Esp_abaactiveType ESP_ABAACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_abaactiveType_ESP_ABAACTIVE_ACTIVATED;
  static inline bool Esp_abaactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_abaactiveType_IsValid(value);
  }
  static const Esp_abaactiveType Esp_abaactiveType_MIN =
    Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_MIN;
  static const Esp_abaactiveType Esp_abaactiveType_MAX =
    Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_MAX;
  static const int Esp_abaactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_abaactiveType_Esp_abaactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_abaactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_abaactiveType_descriptor();
  }
  static inline const ::std::string& Esp_abaactiveType_Name(Esp_abaactiveType value) {
    return Esp_advanced_0x234_234_Esp_abaactiveType_Name(value);
  }
  static inline bool Esp_abaactiveType_Parse(const ::std::string& name,
      Esp_abaactiveType* value) {
    return Esp_advanced_0x234_234_Esp_abaactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_cddavailableType Esp_cddavailableType;
  static const Esp_cddavailableType ESP_CDDAVAILABLE_NOT_AVAILABLE =
    Esp_advanced_0x234_234_Esp_cddavailableType_ESP_CDDAVAILABLE_NOT_AVAILABLE;
  static const Esp_cddavailableType ESP_CDDAVAILABLE_AVAILABLE =
    Esp_advanced_0x234_234_Esp_cddavailableType_ESP_CDDAVAILABLE_AVAILABLE;
  static inline bool Esp_cddavailableType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_cddavailableType_IsValid(value);
  }
  static const Esp_cddavailableType Esp_cddavailableType_MIN =
    Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_MIN;
  static const Esp_cddavailableType Esp_cddavailableType_MAX =
    Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_MAX;
  static const int Esp_cddavailableType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_cddavailableType_Esp_cddavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_cddavailableType_descriptor() {
    return Esp_advanced_0x234_234_Esp_cddavailableType_descriptor();
  }
  static inline const ::std::string& Esp_cddavailableType_Name(Esp_cddavailableType value) {
    return Esp_advanced_0x234_234_Esp_cddavailableType_Name(value);
  }
  static inline bool Esp_cddavailableType_Parse(const ::std::string& name,
      Esp_cddavailableType* value) {
    return Esp_advanced_0x234_234_Esp_cddavailableType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_dtcactiveType Esp_dtcactiveType;
  static const Esp_dtcactiveType ESP_DTCACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_dtcactiveType_ESP_DTCACTIVE_NOT_ACTIVATED;
  static const Esp_dtcactiveType ESP_DTCACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_dtcactiveType_ESP_DTCACTIVE_ACTIVATED;
  static inline bool Esp_dtcactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_dtcactiveType_IsValid(value);
  }
  static const Esp_dtcactiveType Esp_dtcactiveType_MIN =
    Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_MIN;
  static const Esp_dtcactiveType Esp_dtcactiveType_MAX =
    Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_MAX;
  static const int Esp_dtcactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_dtcactiveType_Esp_dtcactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_dtcactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_dtcactiveType_descriptor();
  }
  static inline const ::std::string& Esp_dtcactiveType_Name(Esp_dtcactiveType value) {
    return Esp_advanced_0x234_234_Esp_dtcactiveType_Name(value);
  }
  static inline bool Esp_dtcactiveType_Parse(const ::std::string& name,
      Esp_dtcactiveType* value) {
    return Esp_advanced_0x234_234_Esp_dtcactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_awbavailableType Esp_awbavailableType;
  static const Esp_awbavailableType ESP_AWBAVAILABLE_NOT_AVAILABLE =
    Esp_advanced_0x234_234_Esp_awbavailableType_ESP_AWBAVAILABLE_NOT_AVAILABLE;
  static const Esp_awbavailableType ESP_AWBAVAILABLE_AVAILABLE =
    Esp_advanced_0x234_234_Esp_awbavailableType_ESP_AWBAVAILABLE_AVAILABLE;
  static inline bool Esp_awbavailableType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_awbavailableType_IsValid(value);
  }
  static const Esp_awbavailableType Esp_awbavailableType_MIN =
    Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_MIN;
  static const Esp_awbavailableType Esp_awbavailableType_MAX =
    Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_MAX;
  static const int Esp_awbavailableType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_awbavailableType_Esp_awbavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_awbavailableType_descriptor() {
    return Esp_advanced_0x234_234_Esp_awbavailableType_descriptor();
  }
  static inline const ::std::string& Esp_awbavailableType_Name(Esp_awbavailableType value) {
    return Esp_advanced_0x234_234_Esp_awbavailableType_Name(value);
  }
  static inline bool Esp_awbavailableType_Parse(const ::std::string& name,
      Esp_awbavailableType* value) {
    return Esp_advanced_0x234_234_Esp_awbavailableType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_awbactiveType Esp_awbactiveType;
  static const Esp_awbactiveType ESP_AWBACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_awbactiveType_ESP_AWBACTIVE_NOT_ACTIVATED;
  static const Esp_awbactiveType ESP_AWBACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_awbactiveType_ESP_AWBACTIVE_ACTIVATED;
  static inline bool Esp_awbactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_awbactiveType_IsValid(value);
  }
  static const Esp_awbactiveType Esp_awbactiveType_MIN =
    Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_MIN;
  static const Esp_awbactiveType Esp_awbactiveType_MAX =
    Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_MAX;
  static const int Esp_awbactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_awbactiveType_Esp_awbactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_awbactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_awbactiveType_descriptor();
  }
  static inline const ::std::string& Esp_awbactiveType_Name(Esp_awbactiveType value) {
    return Esp_advanced_0x234_234_Esp_awbactiveType_Name(value);
  }
  static inline bool Esp_awbactiveType_Parse(const ::std::string& name,
      Esp_awbactiveType* value) {
    return Esp_advanced_0x234_234_Esp_awbactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_vlcerrorType Esp_vlcerrorType;
  static const Esp_vlcerrorType ESP_VLCERROR_NOT_ERROR =
    Esp_advanced_0x234_234_Esp_vlcerrorType_ESP_VLCERROR_NOT_ERROR;
  static const Esp_vlcerrorType ESP_VLCERROR_ERROR =
    Esp_advanced_0x234_234_Esp_vlcerrorType_ESP_VLCERROR_ERROR;
  static inline bool Esp_vlcerrorType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_vlcerrorType_IsValid(value);
  }
  static const Esp_vlcerrorType Esp_vlcerrorType_MIN =
    Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_MIN;
  static const Esp_vlcerrorType Esp_vlcerrorType_MAX =
    Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_MAX;
  static const int Esp_vlcerrorType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_vlcerrorType_Esp_vlcerrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vlcerrorType_descriptor() {
    return Esp_advanced_0x234_234_Esp_vlcerrorType_descriptor();
  }
  static inline const ::std::string& Esp_vlcerrorType_Name(Esp_vlcerrorType value) {
    return Esp_advanced_0x234_234_Esp_vlcerrorType_Name(value);
  }
  static inline bool Esp_vlcerrorType_Parse(const ::std::string& name,
      Esp_vlcerrorType* value) {
    return Esp_advanced_0x234_234_Esp_vlcerrorType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_cdderrorType Esp_cdderrorType;
  static const Esp_cdderrorType ESP_CDDERROR_NOT_ERROR =
    Esp_advanced_0x234_234_Esp_cdderrorType_ESP_CDDERROR_NOT_ERROR;
  static const Esp_cdderrorType ESP_CDDERROR_ERROR =
    Esp_advanced_0x234_234_Esp_cdderrorType_ESP_CDDERROR_ERROR;
  static inline bool Esp_cdderrorType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_cdderrorType_IsValid(value);
  }
  static const Esp_cdderrorType Esp_cdderrorType_MIN =
    Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_MIN;
  static const Esp_cdderrorType Esp_cdderrorType_MAX =
    Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_MAX;
  static const int Esp_cdderrorType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_cdderrorType_Esp_cdderrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_cdderrorType_descriptor() {
    return Esp_advanced_0x234_234_Esp_cdderrorType_descriptor();
  }
  static inline const ::std::string& Esp_cdderrorType_Name(Esp_cdderrorType value) {
    return Esp_advanced_0x234_234_Esp_cdderrorType_Name(value);
  }
  static inline bool Esp_cdderrorType_Parse(const ::std::string& name,
      Esp_cdderrorType* value) {
    return Esp_advanced_0x234_234_Esp_cdderrorType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_cddactiveType Esp_cddactiveType;
  static const Esp_cddactiveType ESP_CDDACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_cddactiveType_ESP_CDDACTIVE_NOT_ACTIVATED;
  static const Esp_cddactiveType ESP_CDDACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_cddactiveType_ESP_CDDACTIVE_ACTIVATED;
  static inline bool Esp_cddactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_cddactiveType_IsValid(value);
  }
  static const Esp_cddactiveType Esp_cddactiveType_MIN =
    Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_MIN;
  static const Esp_cddactiveType Esp_cddactiveType_MAX =
    Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_MAX;
  static const int Esp_cddactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_cddactiveType_Esp_cddactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_cddactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_cddactiveType_descriptor();
  }
  static inline const ::std::string& Esp_cddactiveType_Name(Esp_cddactiveType value) {
    return Esp_advanced_0x234_234_Esp_cddactiveType_Name(value);
  }
  static inline bool Esp_cddactiveType_Parse(const ::std::string& name,
      Esp_cddactiveType* value) {
    return Esp_advanced_0x234_234_Esp_cddactiveType_Parse(name, value);
  }

  typedef Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_cdd_apactiveType;
  static const Esp_cdd_apactiveType ESP_CDD_APACTIVE_NOT_ACTIVATED =
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_ESP_CDD_APACTIVE_NOT_ACTIVATED;
  static const Esp_cdd_apactiveType ESP_CDD_APACTIVE_ACTIVATED =
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_ESP_CDD_APACTIVE_ACTIVATED;
  static inline bool Esp_cdd_apactiveType_IsValid(int value) {
    return Esp_advanced_0x234_234_Esp_cdd_apactiveType_IsValid(value);
  }
  static const Esp_cdd_apactiveType Esp_cdd_apactiveType_MIN =
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_MIN;
  static const Esp_cdd_apactiveType Esp_cdd_apactiveType_MAX =
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_MAX;
  static const int Esp_cdd_apactiveType_ARRAYSIZE =
    Esp_advanced_0x234_234_Esp_cdd_apactiveType_Esp_cdd_apactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_cdd_apactiveType_descriptor() {
    return Esp_advanced_0x234_234_Esp_cdd_apactiveType_descriptor();
  }
  static inline const ::std::string& Esp_cdd_apactiveType_Name(Esp_cdd_apactiveType value) {
    return Esp_advanced_0x234_234_Esp_cdd_apactiveType_Name(value);
  }
  static inline bool Esp_cdd_apactiveType_Parse(const ::std::string& name,
      Esp_cdd_apactiveType* value) {
    return Esp_advanced_0x234_234_Esp_cdd_apactiveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
  bool has_esp_vdcactive() const;
  void clear_esp_vdcactive();
  static const int kEspVdcactiveFieldNumber = 1;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType esp_vdcactive() const;
  void set_esp_vdcactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
  bool has_esp_ebdactive() const;
  void clear_esp_ebdactive();
  static const int kEspEbdactiveFieldNumber = 2;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType esp_ebdactive() const;
  void set_esp_ebdactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
  bool has_esp_ecdtempoff() const;
  void clear_esp_ecdtempoff();
  static const int kEspEcdtempoffFieldNumber = 3;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType esp_ecdtempoff() const;
  void set_esp_ecdtempoff(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
  bool has_esp_nobrakeforce() const;
  void clear_esp_nobrakeforce();
  static const int kEspNobrakeforceFieldNumber = 4;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType esp_nobrakeforce() const;
  void set_esp_nobrakeforce(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
  bool has_esp_brkfrictqtotatwhlvaild() const;
  void clear_esp_brkfrictqtotatwhlvaild();
  static const int kEspBrkfrictqtotatwhlvaildFieldNumber = 5;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild() const;
  void set_esp_brkfrictqtotatwhlvaild(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
  bool has_esp_aebdecavailable() const;
  void clear_esp_aebdecavailable();
  static const int kEspAebdecavailableFieldNumber = 6;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType esp_aebdecavailable() const;
  void set_esp_aebdecavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
  bool has_esp_aebdecactive() const;
  void clear_esp_aebdecactive();
  static const int kEspAebdecactiveFieldNumber = 7;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType esp_aebdecactive() const;
  void set_esp_aebdecactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
  bool has_esp_prefillavailable() const;
  void clear_esp_prefillavailable();
  static const int kEspPrefillavailableFieldNumber = 8;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType esp_prefillavailable() const;
  void set_esp_prefillavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
  bool has_esp_prefillactive() const;
  void clear_esp_prefillactive();
  static const int kEspPrefillactiveFieldNumber = 9;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType esp_prefillactive() const;
  void set_esp_prefillactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
  bool has_esp_abaavailable() const;
  void clear_esp_abaavailable();
  static const int kEspAbaavailableFieldNumber = 10;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType esp_abaavailable() const;
  void set_esp_abaavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
  bool has_esp_abaactive() const;
  void clear_esp_abaactive();
  static const int kEspAbaactiveFieldNumber = 11;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType esp_abaactive() const;
  void set_esp_abaactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
  bool has_esp_cddavailable() const;
  void clear_esp_cddavailable();
  static const int kEspCddavailableFieldNumber = 12;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType esp_cddavailable() const;
  void set_esp_cddavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
  bool has_esp_dtcactive() const;
  void clear_esp_dtcactive();
  static const int kEspDtcactiveFieldNumber = 13;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType esp_dtcactive() const;
  void set_esp_dtcactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
  bool has_esp_awbavailable() const;
  void clear_esp_awbavailable();
  static const int kEspAwbavailableFieldNumber = 14;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType esp_awbavailable() const;
  void set_esp_awbavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
  bool has_esp_awbactive() const;
  void clear_esp_awbactive();
  static const int kEspAwbactiveFieldNumber = 15;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType esp_awbactive() const;
  void set_esp_awbactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType value);

  // optional int32 esp_brkfrictqtotatwhl = 16;
  bool has_esp_brkfrictqtotatwhl() const;
  void clear_esp_brkfrictqtotatwhl();
  static const int kEspBrkfrictqtotatwhlFieldNumber = 16;
  ::google::protobuf::int32 esp_brkfrictqtotatwhl() const;
  void set_esp_brkfrictqtotatwhl(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
  bool has_esp_vlcerror() const;
  void clear_esp_vlcerror();
  static const int kEspVlcerrorFieldNumber = 17;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType esp_vlcerror() const;
  void set_esp_vlcerror(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
  bool has_esp_cdderror() const;
  void clear_esp_cdderror();
  static const int kEspCdderrorFieldNumber = 18;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType esp_cdderror() const;
  void set_esp_cdderror(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType value);

  // optional int32 rolling_counter_0x234 = 19;
  bool has_rolling_counter_0x234() const;
  void clear_rolling_counter_0x234();
  static const int kRollingCounter0X234FieldNumber = 19;
  ::google::protobuf::int32 rolling_counter_0x234() const;
  void set_rolling_counter_0x234(::google::protobuf::int32 value);

  // optional int32 checksum_0x234 = 20;
  bool has_checksum_0x234() const;
  void clear_checksum_0x234();
  static const int kChecksum0X234FieldNumber = 20;
  ::google::protobuf::int32 checksum_0x234() const;
  void set_checksum_0x234(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
  bool has_esp_cddactive() const;
  void clear_esp_cddactive();
  static const int kEspCddactiveFieldNumber = 21;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType esp_cddactive() const;
  void set_esp_cddactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType value);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
  bool has_esp_cdd_apactive() const;
  void clear_esp_cdd_apactive();
  static const int kEspCddApactiveFieldNumber = 22;
  ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType esp_cdd_apactive() const;
  void set_esp_cdd_apactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_advanced_0x234_234)
 private:
  void set_has_esp_vdcactive();
  void clear_has_esp_vdcactive();
  void set_has_esp_ebdactive();
  void clear_has_esp_ebdactive();
  void set_has_esp_ecdtempoff();
  void clear_has_esp_ecdtempoff();
  void set_has_esp_nobrakeforce();
  void clear_has_esp_nobrakeforce();
  void set_has_esp_brkfrictqtotatwhlvaild();
  void clear_has_esp_brkfrictqtotatwhlvaild();
  void set_has_esp_aebdecavailable();
  void clear_has_esp_aebdecavailable();
  void set_has_esp_aebdecactive();
  void clear_has_esp_aebdecactive();
  void set_has_esp_prefillavailable();
  void clear_has_esp_prefillavailable();
  void set_has_esp_prefillactive();
  void clear_has_esp_prefillactive();
  void set_has_esp_abaavailable();
  void clear_has_esp_abaavailable();
  void set_has_esp_abaactive();
  void clear_has_esp_abaactive();
  void set_has_esp_cddavailable();
  void clear_has_esp_cddavailable();
  void set_has_esp_dtcactive();
  void clear_has_esp_dtcactive();
  void set_has_esp_awbavailable();
  void clear_has_esp_awbavailable();
  void set_has_esp_awbactive();
  void clear_has_esp_awbactive();
  void set_has_esp_brkfrictqtotatwhl();
  void clear_has_esp_brkfrictqtotatwhl();
  void set_has_esp_vlcerror();
  void clear_has_esp_vlcerror();
  void set_has_esp_cdderror();
  void clear_has_esp_cdderror();
  void set_has_rolling_counter_0x234();
  void clear_has_rolling_counter_0x234();
  void set_has_checksum_0x234();
  void clear_has_checksum_0x234();
  void set_has_esp_cddactive();
  void clear_has_esp_cddactive();
  void set_has_esp_cdd_apactive();
  void clear_has_esp_cdd_apactive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int esp_vdcactive_;
  int esp_ebdactive_;
  int esp_ecdtempoff_;
  int esp_nobrakeforce_;
  int esp_brkfrictqtotatwhlvaild_;
  int esp_aebdecavailable_;
  int esp_aebdecactive_;
  int esp_prefillavailable_;
  int esp_prefillactive_;
  int esp_abaavailable_;
  int esp_abaactive_;
  int esp_cddavailable_;
  int esp_dtcactive_;
  int esp_awbavailable_;
  int esp_awbactive_;
  ::google::protobuf::int32 esp_brkfrictqtotatwhl_;
  int esp_vlcerror_;
  int esp_cdderror_;
  ::google::protobuf::int32 rolling_counter_0x234_;
  ::google::protobuf::int32 checksum_0x234_;
  int esp_cddactive_;
  int esp_cdd_apactive_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Eps_advanced_0x176_176 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Eps_advanced_0x176_176) */ {
 public:
  Eps_advanced_0x176_176();
  virtual ~Eps_advanced_0x176_176();

  Eps_advanced_0x176_176(const Eps_advanced_0x176_176& from);

  inline Eps_advanced_0x176_176& operator=(const Eps_advanced_0x176_176& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Eps_advanced_0x176_176& default_instance();

  static inline const Eps_advanced_0x176_176* internal_default_instance() {
    return reinterpret_cast<const Eps_advanced_0x176_176*>(
               &_Eps_advanced_0x176_176_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Eps_advanced_0x176_176* other);

  // implements Message ----------------------------------------------

  inline Eps_advanced_0x176_176* New() const PROTOBUF_FINAL { return New(NULL); }

  Eps_advanced_0x176_176* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Eps_advanced_0x176_176& from);
  void MergeFrom(const Eps_advanced_0x176_176& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Eps_advanced_0x176_176* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_tosionbartorquevalidType;
  static const Eps_tosionbartorquevalidType EPS_TOSIONBARTORQUEVALID_VAILD =
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_EPS_TOSIONBARTORQUEVALID_VAILD;
  static const Eps_tosionbartorquevalidType EPS_TOSIONBARTORQUEVALID_INVALID =
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_EPS_TOSIONBARTORQUEVALID_INVALID;
  static inline bool Eps_tosionbartorquevalidType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_IsValid(value);
  }
  static const Eps_tosionbartorquevalidType Eps_tosionbartorquevalidType_MIN =
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_MIN;
  static const Eps_tosionbartorquevalidType Eps_tosionbartorquevalidType_MAX =
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_MAX;
  static const int Eps_tosionbartorquevalidType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Eps_tosionbartorquevalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_tosionbartorquevalidType_descriptor() {
    return Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_descriptor();
  }
  static inline const ::std::string& Eps_tosionbartorquevalidType_Name(Eps_tosionbartorquevalidType value) {
    return Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Name(value);
  }
  static inline bool Eps_tosionbartorquevalidType_Parse(const ::std::string& name,
      Eps_tosionbartorquevalidType* value) {
    return Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_Parse(name, value);
  }

  typedef Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_lkaresponsetorquevalidType;
  static const Eps_lkaresponsetorquevalidType EPS_LKARESPONSETORQUEVALID_VAILD =
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_EPS_LKARESPONSETORQUEVALID_VAILD;
  static const Eps_lkaresponsetorquevalidType EPS_LKARESPONSETORQUEVALID_INVALID =
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_EPS_LKARESPONSETORQUEVALID_INVALID;
  static inline bool Eps_lkaresponsetorquevalidType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_IsValid(value);
  }
  static const Eps_lkaresponsetorquevalidType Eps_lkaresponsetorquevalidType_MIN =
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_MIN;
  static const Eps_lkaresponsetorquevalidType Eps_lkaresponsetorquevalidType_MAX =
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_MAX;
  static const int Eps_lkaresponsetorquevalidType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Eps_lkaresponsetorquevalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_lkaresponsetorquevalidType_descriptor() {
    return Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_descriptor();
  }
  static inline const ::std::string& Eps_lkaresponsetorquevalidType_Name(Eps_lkaresponsetorquevalidType value) {
    return Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Name(value);
  }
  static inline bool Eps_lkaresponsetorquevalidType_Parse(const ::std::string& name,
      Eps_lkaresponsetorquevalidType* value) {
    return Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_Parse(name, value);
  }

  typedef Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_ldwcontrolstatusType;
  static const Eps_ldwcontrolstatusType EPS_LDWCONTROLSTATUS_DEACTIVATED =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_DEACTIVATED;
  static const Eps_ldwcontrolstatusType EPS_LDWCONTROLSTATUS_INACTIVE =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_INACTIVE;
  static const Eps_ldwcontrolstatusType EPS_LDWCONTROLSTATUS_ACTIVE =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_ACTIVE;
  static const Eps_ldwcontrolstatusType EPS_LDWCONTROLSTATUS_RESERVED =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_EPS_LDWCONTROLSTATUS_RESERVED;
  static inline bool Eps_ldwcontrolstatusType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_IsValid(value);
  }
  static const Eps_ldwcontrolstatusType Eps_ldwcontrolstatusType_MIN =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_MIN;
  static const Eps_ldwcontrolstatusType Eps_ldwcontrolstatusType_MAX =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_MAX;
  static const int Eps_ldwcontrolstatusType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Eps_ldwcontrolstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_ldwcontrolstatusType_descriptor() {
    return Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_descriptor();
  }
  static inline const ::std::string& Eps_ldwcontrolstatusType_Name(Eps_ldwcontrolstatusType value) {
    return Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Name(value);
  }
  static inline bool Eps_ldwcontrolstatusType_Parse(const ::std::string& name,
      Eps_ldwcontrolstatusType* value) {
    return Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_Parse(name, value);
  }

  typedef Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_pam_steeringsts_reservedType;
  static const Eps_pam_steeringsts_reservedType EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_OK =
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_OK;
  static const Eps_pam_steeringsts_reservedType EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_ADJUSTING =
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_ADJUSTING;
  static inline bool Eps_pam_steeringsts_reservedType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_IsValid(value);
  }
  static const Eps_pam_steeringsts_reservedType Eps_pam_steeringsts_reservedType_MIN =
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_MIN;
  static const Eps_pam_steeringsts_reservedType Eps_pam_steeringsts_reservedType_MAX =
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_MAX;
  static const int Eps_pam_steeringsts_reservedType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Eps_pam_steeringsts_reservedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_pam_steeringsts_reservedType_descriptor() {
    return Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_descriptor();
  }
  static inline const ::std::string& Eps_pam_steeringsts_reservedType_Name(Eps_pam_steeringsts_reservedType value) {
    return Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Name(value);
  }
  static inline bool Eps_pam_steeringsts_reservedType_Parse(const ::std::string& name,
      Eps_pam_steeringsts_reservedType* value) {
    return Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_Parse(name, value);
  }

  typedef Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_lkacontrolstatusType;
  static const Eps_lkacontrolstatusType EPS_LKACONTROLSTATUS_NO_REQUEST =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_NO_REQUEST;
  static const Eps_lkacontrolstatusType EPS_LKACONTROLSTATUS_REQUEST_HONORED =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_REQUEST_HONORED;
  static const Eps_lkacontrolstatusType EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_TEMPORARILY =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_TEMPORARILY;
  static const Eps_lkacontrolstatusType EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_PERMANENT =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_PERMANENT;
  static inline bool Eps_lkacontrolstatusType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_lkacontrolstatusType_IsValid(value);
  }
  static const Eps_lkacontrolstatusType Eps_lkacontrolstatusType_MIN =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_MIN;
  static const Eps_lkacontrolstatusType Eps_lkacontrolstatusType_MAX =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_MAX;
  static const int Eps_lkacontrolstatusType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Eps_lkacontrolstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_lkacontrolstatusType_descriptor() {
    return Eps_advanced_0x176_176_Eps_lkacontrolstatusType_descriptor();
  }
  static inline const ::std::string& Eps_lkacontrolstatusType_Name(Eps_lkacontrolstatusType value) {
    return Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Name(value);
  }
  static inline bool Eps_lkacontrolstatusType_Parse(const ::std::string& name,
      Eps_lkacontrolstatusType* value) {
    return Eps_advanced_0x176_176_Eps_lkacontrolstatusType_Parse(name, value);
  }

  typedef Eps_advanced_0x176_176_Eps_epspaminhType Eps_epspaminhType;
  static const Eps_epspaminhType EPS_EPSPAMINH_NORMAL_OPERATION =
    Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_NORMAL_OPERATION;
  static const Eps_epspaminhType EPS_EPSPAMINH_OVER_SPEED =
    Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_OVER_SPEED;
  static const Eps_epspaminhType EPS_EPSPAMINH_DRIVER_INTERFERENCE =
    Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_DRIVER_INTERFERENCE;
  static const Eps_epspaminhType EPS_EPSPAMINH_ABNORMAL_CAN_INPUT =
    Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_ABNORMAL_CAN_INPUT;
  static const Eps_epspaminhType EPS_EPSPAMINH_EXCESS_ANGLE_DEVIATION =
    Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_EXCESS_ANGLE_DEVIATION;
  static const Eps_epspaminhType EPS_EPSPAMINH_EPS_FAILURE =
    Eps_advanced_0x176_176_Eps_epspaminhType_EPS_EPSPAMINH_EPS_FAILURE;
  static inline bool Eps_epspaminhType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_epspaminhType_IsValid(value);
  }
  static const Eps_epspaminhType Eps_epspaminhType_MIN =
    Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_MIN;
  static const Eps_epspaminhType Eps_epspaminhType_MAX =
    Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_MAX;
  static const int Eps_epspaminhType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_epspaminhType_Eps_epspaminhType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_epspaminhType_descriptor() {
    return Eps_advanced_0x176_176_Eps_epspaminhType_descriptor();
  }
  static inline const ::std::string& Eps_epspaminhType_Name(Eps_epspaminhType value) {
    return Eps_advanced_0x176_176_Eps_epspaminhType_Name(value);
  }
  static inline bool Eps_epspaminhType_Parse(const ::std::string& name,
      Eps_epspaminhType* value) {
    return Eps_advanced_0x176_176_Eps_epspaminhType_Parse(name, value);
  }

  typedef Eps_advanced_0x176_176_Eps_epspamstsType Eps_epspamstsType;
  static const Eps_epspamstsType EPS_EPSPAMSTS_INHIBIT =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_INHIBIT;
  static const Eps_epspamstsType EPS_EPSPAMSTS_AVAILABLE =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_AVAILABLE;
  static const Eps_epspamstsType EPS_EPSPAMSTS_ACTIVE =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_ACTIVE;
  static const Eps_epspamstsType EPS_EPSPAMSTS_ABORT =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_ABORT;
  static const Eps_epspamstsType EPS_EPSPAMSTS_REPLY_FOR_CONTROL =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_REPLY_FOR_CONTROL;
  static const Eps_epspamstsType EPS_EPSPAMSTS_NRCD_ACTIVE =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_NRCD_ACTIVE;
  static const Eps_epspamstsType EPS_EPSPAMSTS_ADAS_ACTIVE =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_ADAS_ACTIVE;
  static const Eps_epspamstsType EPS_EPSPAMSTS_FAILURE =
    Eps_advanced_0x176_176_Eps_epspamstsType_EPS_EPSPAMSTS_FAILURE;
  static inline bool Eps_epspamstsType_IsValid(int value) {
    return Eps_advanced_0x176_176_Eps_epspamstsType_IsValid(value);
  }
  static const Eps_epspamstsType Eps_epspamstsType_MIN =
    Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_MIN;
  static const Eps_epspamstsType Eps_epspamstsType_MAX =
    Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_MAX;
  static const int Eps_epspamstsType_ARRAYSIZE =
    Eps_advanced_0x176_176_Eps_epspamstsType_Eps_epspamstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_epspamstsType_descriptor() {
    return Eps_advanced_0x176_176_Eps_epspamstsType_descriptor();
  }
  static inline const ::std::string& Eps_epspamstsType_Name(Eps_epspamstsType value) {
    return Eps_advanced_0x176_176_Eps_epspamstsType_Name(value);
  }
  static inline bool Eps_epspamstsType_Parse(const ::std::string& name,
      Eps_epspamstsType* value) {
    return Eps_advanced_0x176_176_Eps_epspamstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double eps_lkaresponsetorque = 1;
  bool has_eps_lkaresponsetorque() const;
  void clear_eps_lkaresponsetorque();
  static const int kEpsLkaresponsetorqueFieldNumber = 1;
  double eps_lkaresponsetorque() const;
  void set_eps_lkaresponsetorque(double value);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
  bool has_eps_tosionbartorquevalid() const;
  void clear_eps_tosionbartorquevalid();
  static const int kEpsTosionbartorquevalidFieldNumber = 2;
  ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType eps_tosionbartorquevalid() const;
  void set_eps_tosionbartorquevalid(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType value);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
  bool has_eps_lkaresponsetorquevalid() const;
  void clear_eps_lkaresponsetorquevalid();
  static const int kEpsLkaresponsetorquevalidFieldNumber = 3;
  ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid() const;
  void set_eps_lkaresponsetorquevalid(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType value);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
  bool has_eps_ldwcontrolstatus() const;
  void clear_eps_ldwcontrolstatus();
  static const int kEpsLdwcontrolstatusFieldNumber = 4;
  ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType eps_ldwcontrolstatus() const;
  void set_eps_ldwcontrolstatus(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType value);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
  bool has_eps_pam_steeringsts_reserved() const;
  void clear_eps_pam_steeringsts_reserved();
  static const int kEpsPamSteeringstsReservedFieldNumber = 5;
  ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved() const;
  void set_eps_pam_steeringsts_reserved(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType value);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
  bool has_eps_lkacontrolstatus() const;
  void clear_eps_lkacontrolstatus();
  static const int kEpsLkacontrolstatusFieldNumber = 6;
  ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType eps_lkacontrolstatus() const;
  void set_eps_lkacontrolstatus(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType value);

  // optional int32 eps_epspaminh = 7;
  bool has_eps_epspaminh() const;
  void clear_eps_epspaminh();
  static const int kEpsEpspaminhFieldNumber = 7;
  ::google::protobuf::int32 eps_epspaminh() const;
  void set_eps_epspaminh(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x176 = 8;
  bool has_rolling_counter_0x176() const;
  void clear_rolling_counter_0x176();
  static const int kRollingCounter0X176FieldNumber = 8;
  ::google::protobuf::int32 rolling_counter_0x176() const;
  void set_rolling_counter_0x176(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
  bool has_eps_epspamsts() const;
  void clear_eps_epspamsts();
  static const int kEpsEpspamstsFieldNumber = 9;
  ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType eps_epspamsts() const;
  void set_eps_epspamsts(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType value);

  // optional double eps_torsionbartorque = 11;
  bool has_eps_torsionbartorque() const;
  void clear_eps_torsionbartorque();
  static const int kEpsTorsionbartorqueFieldNumber = 11;
  double eps_torsionbartorque() const;
  void set_eps_torsionbartorque(double value);

  // optional int32 checksum_0x176 = 10;
  bool has_checksum_0x176() const;
  void clear_checksum_0x176();
  static const int kChecksum0X176FieldNumber = 10;
  ::google::protobuf::int32 checksum_0x176() const;
  void set_checksum_0x176(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Eps_advanced_0x176_176)
 private:
  void set_has_eps_lkaresponsetorque();
  void clear_has_eps_lkaresponsetorque();
  void set_has_eps_tosionbartorquevalid();
  void clear_has_eps_tosionbartorquevalid();
  void set_has_eps_lkaresponsetorquevalid();
  void clear_has_eps_lkaresponsetorquevalid();
  void set_has_eps_ldwcontrolstatus();
  void clear_has_eps_ldwcontrolstatus();
  void set_has_eps_pam_steeringsts_reserved();
  void clear_has_eps_pam_steeringsts_reserved();
  void set_has_eps_lkacontrolstatus();
  void clear_has_eps_lkacontrolstatus();
  void set_has_eps_epspaminh();
  void clear_has_eps_epspaminh();
  void set_has_rolling_counter_0x176();
  void clear_has_rolling_counter_0x176();
  void set_has_eps_epspamsts();
  void clear_has_eps_epspamsts();
  void set_has_checksum_0x176();
  void clear_has_checksum_0x176();
  void set_has_eps_torsionbartorque();
  void clear_has_eps_torsionbartorque();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double eps_lkaresponsetorque_;
  int eps_tosionbartorquevalid_;
  int eps_lkaresponsetorquevalid_;
  int eps_ldwcontrolstatus_;
  int eps_pam_steeringsts_reserved_;
  int eps_lkacontrolstatus_;
  ::google::protobuf::int32 eps_epspaminh_;
  ::google::protobuf::int32 rolling_counter_0x176_;
  int eps_epspamsts_;
  double eps_torsionbartorque_;
  ::google::protobuf::int32 checksum_0x176_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_whlpulse_0x236_236 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_whlpulse_0x236_236) */ {
 public:
  Esp_whlpulse_0x236_236();
  virtual ~Esp_whlpulse_0x236_236();

  Esp_whlpulse_0x236_236(const Esp_whlpulse_0x236_236& from);

  inline Esp_whlpulse_0x236_236& operator=(const Esp_whlpulse_0x236_236& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_whlpulse_0x236_236& default_instance();

  static inline const Esp_whlpulse_0x236_236* internal_default_instance() {
    return reinterpret_cast<const Esp_whlpulse_0x236_236*>(
               &_Esp_whlpulse_0x236_236_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Esp_whlpulse_0x236_236* other);

  // implements Message ----------------------------------------------

  inline Esp_whlpulse_0x236_236* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_whlpulse_0x236_236* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_whlpulse_0x236_236& from);
  void MergeFrom(const Esp_whlpulse_0x236_236& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_whlpulse_0x236_236* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_wheelpulse_rr_validType;
  static const Esp_wheelpulse_rr_validType ESP_WHEELPULSE_RR_VALID_VALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_ESP_WHEELPULSE_RR_VALID_VALID;
  static const Esp_wheelpulse_rr_validType ESP_WHEELPULSE_RR_VALID_INVALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_ESP_WHEELPULSE_RR_VALID_INVALID;
  static inline bool Esp_wheelpulse_rr_validType_IsValid(int value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_IsValid(value);
  }
  static const Esp_wheelpulse_rr_validType Esp_wheelpulse_rr_validType_MIN =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_MIN;
  static const Esp_wheelpulse_rr_validType Esp_wheelpulse_rr_validType_MAX =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_MAX;
  static const int Esp_wheelpulse_rr_validType_ARRAYSIZE =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Esp_wheelpulse_rr_validType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_wheelpulse_rr_validType_descriptor() {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_descriptor();
  }
  static inline const ::std::string& Esp_wheelpulse_rr_validType_Name(Esp_wheelpulse_rr_validType value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Name(value);
  }
  static inline bool Esp_wheelpulse_rr_validType_Parse(const ::std::string& name,
      Esp_wheelpulse_rr_validType* value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_Parse(name, value);
  }

  typedef Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_wheelpulse_rl_validType;
  static const Esp_wheelpulse_rl_validType ESP_WHEELPULSE_RL_VALID_VALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_ESP_WHEELPULSE_RL_VALID_VALID;
  static const Esp_wheelpulse_rl_validType ESP_WHEELPULSE_RL_VALID_INVALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_ESP_WHEELPULSE_RL_VALID_INVALID;
  static inline bool Esp_wheelpulse_rl_validType_IsValid(int value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_IsValid(value);
  }
  static const Esp_wheelpulse_rl_validType Esp_wheelpulse_rl_validType_MIN =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_MIN;
  static const Esp_wheelpulse_rl_validType Esp_wheelpulse_rl_validType_MAX =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_MAX;
  static const int Esp_wheelpulse_rl_validType_ARRAYSIZE =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Esp_wheelpulse_rl_validType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_wheelpulse_rl_validType_descriptor() {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_descriptor();
  }
  static inline const ::std::string& Esp_wheelpulse_rl_validType_Name(Esp_wheelpulse_rl_validType value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Name(value);
  }
  static inline bool Esp_wheelpulse_rl_validType_Parse(const ::std::string& name,
      Esp_wheelpulse_rl_validType* value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_Parse(name, value);
  }

  typedef Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_wheelpulse_fr_validType;
  static const Esp_wheelpulse_fr_validType ESP_WHEELPULSE_FR_VALID_VALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_ESP_WHEELPULSE_FR_VALID_VALID;
  static const Esp_wheelpulse_fr_validType ESP_WHEELPULSE_FR_VALID_INVALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_ESP_WHEELPULSE_FR_VALID_INVALID;
  static inline bool Esp_wheelpulse_fr_validType_IsValid(int value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_IsValid(value);
  }
  static const Esp_wheelpulse_fr_validType Esp_wheelpulse_fr_validType_MIN =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_MIN;
  static const Esp_wheelpulse_fr_validType Esp_wheelpulse_fr_validType_MAX =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_MAX;
  static const int Esp_wheelpulse_fr_validType_ARRAYSIZE =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Esp_wheelpulse_fr_validType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_wheelpulse_fr_validType_descriptor() {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_descriptor();
  }
  static inline const ::std::string& Esp_wheelpulse_fr_validType_Name(Esp_wheelpulse_fr_validType value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Name(value);
  }
  static inline bool Esp_wheelpulse_fr_validType_Parse(const ::std::string& name,
      Esp_wheelpulse_fr_validType* value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_Parse(name, value);
  }

  typedef Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_wheelpulse_fl_validType;
  static const Esp_wheelpulse_fl_validType ESP_WHEELPULSE_FL_VALID_VALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_ESP_WHEELPULSE_FL_VALID_VALID;
  static const Esp_wheelpulse_fl_validType ESP_WHEELPULSE_FL_VALID_INVALID =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_ESP_WHEELPULSE_FL_VALID_INVALID;
  static inline bool Esp_wheelpulse_fl_validType_IsValid(int value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_IsValid(value);
  }
  static const Esp_wheelpulse_fl_validType Esp_wheelpulse_fl_validType_MIN =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_MIN;
  static const Esp_wheelpulse_fl_validType Esp_wheelpulse_fl_validType_MAX =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_MAX;
  static const int Esp_wheelpulse_fl_validType_ARRAYSIZE =
    Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Esp_wheelpulse_fl_validType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_wheelpulse_fl_validType_descriptor() {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_descriptor();
  }
  static inline const ::std::string& Esp_wheelpulse_fl_validType_Name(Esp_wheelpulse_fl_validType value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Name(value);
  }
  static inline bool Esp_wheelpulse_fl_validType_Parse(const ::std::string& name,
      Esp_wheelpulse_fl_validType* value) {
    return Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 esp_wheelpulse_fr = 1;
  bool has_esp_wheelpulse_fr() const;
  void clear_esp_wheelpulse_fr();
  static const int kEspWheelpulseFrFieldNumber = 1;
  ::google::protobuf::int32 esp_wheelpulse_fr() const;
  void set_esp_wheelpulse_fr(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_rl = 2;
  bool has_esp_wheelpulse_rl() const;
  void clear_esp_wheelpulse_rl();
  static const int kEspWheelpulseRlFieldNumber = 2;
  ::google::protobuf::int32 esp_wheelpulse_rl() const;
  void set_esp_wheelpulse_rl(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_rr = 3;
  bool has_esp_wheelpulse_rr() const;
  void clear_esp_wheelpulse_rr();
  static const int kEspWheelpulseRrFieldNumber = 3;
  ::google::protobuf::int32 esp_wheelpulse_rr() const;
  void set_esp_wheelpulse_rr(::google::protobuf::int32 value);

  // optional int32 rollingcounter_esp_0x236 = 4;
  bool has_rollingcounter_esp_0x236() const;
  void clear_rollingcounter_esp_0x236();
  static const int kRollingcounterEsp0X236FieldNumber = 4;
  ::google::protobuf::int32 rollingcounter_esp_0x236() const;
  void set_rollingcounter_esp_0x236(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
  bool has_esp_wheelpulse_rr_valid() const;
  void clear_esp_wheelpulse_rr_valid();
  static const int kEspWheelpulseRrValidFieldNumber = 5;
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid() const;
  void set_esp_wheelpulse_rr_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType value);

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
  bool has_esp_wheelpulse_rl_valid() const;
  void clear_esp_wheelpulse_rl_valid();
  static const int kEspWheelpulseRlValidFieldNumber = 6;
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid() const;
  void set_esp_wheelpulse_rl_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType value);

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
  bool has_esp_wheelpulse_fr_valid() const;
  void clear_esp_wheelpulse_fr_valid();
  static const int kEspWheelpulseFrValidFieldNumber = 7;
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid() const;
  void set_esp_wheelpulse_fr_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType value);

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
  bool has_esp_wheelpulse_fl_valid() const;
  void clear_esp_wheelpulse_fl_valid();
  static const int kEspWheelpulseFlValidFieldNumber = 8;
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid() const;
  void set_esp_wheelpulse_fl_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType value);

  // optional int32 checksum_esp_0x236 = 9;
  bool has_checksum_esp_0x236() const;
  void clear_checksum_esp_0x236();
  static const int kChecksumEsp0X236FieldNumber = 9;
  ::google::protobuf::int32 checksum_esp_0x236() const;
  void set_checksum_esp_0x236(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_fl = 10;
  bool has_esp_wheelpulse_fl() const;
  void clear_esp_wheelpulse_fl();
  static const int kEspWheelpulseFlFieldNumber = 10;
  ::google::protobuf::int32 esp_wheelpulse_fl() const;
  void set_esp_wheelpulse_fl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_whlpulse_0x236_236)
 private:
  void set_has_esp_wheelpulse_fr();
  void clear_has_esp_wheelpulse_fr();
  void set_has_esp_wheelpulse_rl();
  void clear_has_esp_wheelpulse_rl();
  void set_has_esp_wheelpulse_rr();
  void clear_has_esp_wheelpulse_rr();
  void set_has_rollingcounter_esp_0x236();
  void clear_has_rollingcounter_esp_0x236();
  void set_has_esp_wheelpulse_rr_valid();
  void clear_has_esp_wheelpulse_rr_valid();
  void set_has_esp_wheelpulse_rl_valid();
  void clear_has_esp_wheelpulse_rl_valid();
  void set_has_esp_wheelpulse_fr_valid();
  void clear_has_esp_wheelpulse_fr_valid();
  void set_has_esp_wheelpulse_fl_valid();
  void clear_has_esp_wheelpulse_fl_valid();
  void set_has_checksum_esp_0x236();
  void clear_has_checksum_esp_0x236();
  void set_has_esp_wheelpulse_fl();
  void clear_has_esp_wheelpulse_fl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 esp_wheelpulse_fr_;
  ::google::protobuf::int32 esp_wheelpulse_rl_;
  ::google::protobuf::int32 esp_wheelpulse_rr_;
  ::google::protobuf::int32 rollingcounter_esp_0x236_;
  int esp_wheelpulse_rr_valid_;
  int esp_wheelpulse_rl_valid_;
  int esp_wheelpulse_fr_valid_;
  int esp_wheelpulse_fl_valid_;
  ::google::protobuf::int32 checksum_esp_0x236_;
  ::google::protobuf::int32 esp_wheelpulse_fl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ipm_rightline_0x490_490 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ipm_rightline_0x490_490) */ {
 public:
  Ipm_rightline_0x490_490();
  virtual ~Ipm_rightline_0x490_490();

  Ipm_rightline_0x490_490(const Ipm_rightline_0x490_490& from);

  inline Ipm_rightline_0x490_490& operator=(const Ipm_rightline_0x490_490& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ipm_rightline_0x490_490& default_instance();

  static inline const Ipm_rightline_0x490_490* internal_default_instance() {
    return reinterpret_cast<const Ipm_rightline_0x490_490*>(
               &_Ipm_rightline_0x490_490_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Ipm_rightline_0x490_490* other);

  // implements Message ----------------------------------------------

  inline Ipm_rightline_0x490_490* New() const PROTOBUF_FINAL { return New(NULL); }

  Ipm_rightline_0x490_490* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ipm_rightline_0x490_490& from);
  void MergeFrom(const Ipm_rightline_0x490_490& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ipm_rightline_0x490_490* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ipm_rightline_dy = 1;
  bool has_ipm_rightline_dy() const;
  void clear_ipm_rightline_dy();
  static const int kIpmRightlineDyFieldNumber = 1;
  double ipm_rightline_dy() const;
  void set_ipm_rightline_dy(double value);

  // optional double ipm_rightline_dx_lookhead = 2;
  bool has_ipm_rightline_dx_lookhead() const;
  void clear_ipm_rightline_dx_lookhead();
  static const int kIpmRightlineDxLookheadFieldNumber = 2;
  double ipm_rightline_dx_lookhead() const;
  void set_ipm_rightline_dx_lookhead(double value);

  // optional double ipm_rightline_hor_curve = 3;
  bool has_ipm_rightline_hor_curve() const;
  void clear_ipm_rightline_hor_curve();
  static const int kIpmRightlineHorCurveFieldNumber = 3;
  double ipm_rightline_hor_curve() const;
  void set_ipm_rightline_hor_curve(double value);

  // optional double ipm_rightline_yawangle = 4;
  bool has_ipm_rightline_yawangle() const;
  void clear_ipm_rightline_yawangle();
  static const int kIpmRightlineYawangleFieldNumber = 4;
  double ipm_rightline_yawangle() const;
  void set_ipm_rightline_yawangle(double value);

  // optional double ipm_rightline_dx_start = 5;
  bool has_ipm_rightline_dx_start() const;
  void clear_ipm_rightline_dx_start();
  static const int kIpmRightlineDxStartFieldNumber = 5;
  double ipm_rightline_dx_start() const;
  void set_ipm_rightline_dx_start(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ipm_rightline_0x490_490)
 private:
  void set_has_ipm_rightline_dy();
  void clear_has_ipm_rightline_dy();
  void set_has_ipm_rightline_dx_lookhead();
  void clear_has_ipm_rightline_dx_lookhead();
  void set_has_ipm_rightline_hor_curve();
  void clear_has_ipm_rightline_hor_curve();
  void set_has_ipm_rightline_yawangle();
  void clear_has_ipm_rightline_yawangle();
  void set_has_ipm_rightline_dx_start();
  void clear_has_ipm_rightline_dx_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ipm_rightline_dy_;
  double ipm_rightline_dx_lookhead_;
  double ipm_rightline_hor_curve_;
  double ipm_rightline_yawangle_;
  double ipm_rightline_dx_start_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sas_sensor_0x175_175 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Sas_sensor_0x175_175) */ {
 public:
  Sas_sensor_0x175_175();
  virtual ~Sas_sensor_0x175_175();

  Sas_sensor_0x175_175(const Sas_sensor_0x175_175& from);

  inline Sas_sensor_0x175_175& operator=(const Sas_sensor_0x175_175& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sas_sensor_0x175_175& default_instance();

  static inline const Sas_sensor_0x175_175* internal_default_instance() {
    return reinterpret_cast<const Sas_sensor_0x175_175*>(
               &_Sas_sensor_0x175_175_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Sas_sensor_0x175_175* other);

  // implements Message ----------------------------------------------

  inline Sas_sensor_0x175_175* New() const PROTOBUF_FINAL { return New(NULL); }

  Sas_sensor_0x175_175* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sas_sensor_0x175_175& from);
  void MergeFrom(const Sas_sensor_0x175_175& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sas_sensor_0x175_175* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Sas_sensor_0x175_175_Sas_trimmingstsType Sas_trimmingstsType;
  static const Sas_trimmingstsType SAS_TRIMMINGSTS_NOT_TRIMMED =
    Sas_sensor_0x175_175_Sas_trimmingstsType_SAS_TRIMMINGSTS_NOT_TRIMMED;
  static const Sas_trimmingstsType SAS_TRIMMINGSTS_TRIMMED =
    Sas_sensor_0x175_175_Sas_trimmingstsType_SAS_TRIMMINGSTS_TRIMMED;
  static inline bool Sas_trimmingstsType_IsValid(int value) {
    return Sas_sensor_0x175_175_Sas_trimmingstsType_IsValid(value);
  }
  static const Sas_trimmingstsType Sas_trimmingstsType_MIN =
    Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_MIN;
  static const Sas_trimmingstsType Sas_trimmingstsType_MAX =
    Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_MAX;
  static const int Sas_trimmingstsType_ARRAYSIZE =
    Sas_sensor_0x175_175_Sas_trimmingstsType_Sas_trimmingstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sas_trimmingstsType_descriptor() {
    return Sas_sensor_0x175_175_Sas_trimmingstsType_descriptor();
  }
  static inline const ::std::string& Sas_trimmingstsType_Name(Sas_trimmingstsType value) {
    return Sas_sensor_0x175_175_Sas_trimmingstsType_Name(value);
  }
  static inline bool Sas_trimmingstsType_Parse(const ::std::string& name,
      Sas_trimmingstsType* value) {
    return Sas_sensor_0x175_175_Sas_trimmingstsType_Parse(name, value);
  }

  typedef Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_steerwheelrotspdstatusType;
  static const Sas_steerwheelrotspdstatusType SAS_STEERWHEELROTSPDSTATUS_VALID =
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_SAS_STEERWHEELROTSPDSTATUS_VALID;
  static const Sas_steerwheelrotspdstatusType SAS_STEERWHEELROTSPDSTATUS_INVALID =
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_SAS_STEERWHEELROTSPDSTATUS_INVALID;
  static inline bool Sas_steerwheelrotspdstatusType_IsValid(int value) {
    return Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_IsValid(value);
  }
  static const Sas_steerwheelrotspdstatusType Sas_steerwheelrotspdstatusType_MIN =
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_MIN;
  static const Sas_steerwheelrotspdstatusType Sas_steerwheelrotspdstatusType_MAX =
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_MAX;
  static const int Sas_steerwheelrotspdstatusType_ARRAYSIZE =
    Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Sas_steerwheelrotspdstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sas_steerwheelrotspdstatusType_descriptor() {
    return Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_descriptor();
  }
  static inline const ::std::string& Sas_steerwheelrotspdstatusType_Name(Sas_steerwheelrotspdstatusType value) {
    return Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Name(value);
  }
  static inline bool Sas_steerwheelrotspdstatusType_Parse(const ::std::string& name,
      Sas_steerwheelrotspdstatusType* value) {
    return Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_Parse(name, value);
  }

  typedef Sas_sensor_0x175_175_Sas_sasstscalType Sas_sasstscalType;
  static const Sas_sasstscalType SAS_SASSTSCAL_SENSOR_NOT_CALIBRATED =
    Sas_sensor_0x175_175_Sas_sasstscalType_SAS_SASSTSCAL_SENSOR_NOT_CALIBRATED;
  static const Sas_sasstscalType SAS_SASSTSCAL_SENSOR_CALIBRATED =
    Sas_sensor_0x175_175_Sas_sasstscalType_SAS_SASSTSCAL_SENSOR_CALIBRATED;
  static inline bool Sas_sasstscalType_IsValid(int value) {
    return Sas_sensor_0x175_175_Sas_sasstscalType_IsValid(value);
  }
  static const Sas_sasstscalType Sas_sasstscalType_MIN =
    Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_MIN;
  static const Sas_sasstscalType Sas_sasstscalType_MAX =
    Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_MAX;
  static const int Sas_sasstscalType_ARRAYSIZE =
    Sas_sensor_0x175_175_Sas_sasstscalType_Sas_sasstscalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sas_sasstscalType_descriptor() {
    return Sas_sensor_0x175_175_Sas_sasstscalType_descriptor();
  }
  static inline const ::std::string& Sas_sasstscalType_Name(Sas_sasstscalType value) {
    return Sas_sensor_0x175_175_Sas_sasstscalType_Name(value);
  }
  static inline bool Sas_sasstscalType_Parse(const ::std::string& name,
      Sas_sasstscalType* value) {
    return Sas_sensor_0x175_175_Sas_sasstscalType_Parse(name, value);
  }

  typedef Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_raw_sasstssnsrType;
  static const Sas_raw_sasstssnsrType SAS_RAW_SASSTSSNSR_SENSOR_VALUE_INVALID =
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_SAS_RAW_SASSTSSNSR_SENSOR_VALUE_INVALID;
  static const Sas_raw_sasstssnsrType SAS_RAW_SASSTSSNSR_SENSOR_VALUE_VALID =
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_SAS_RAW_SASSTSSNSR_SENSOR_VALUE_VALID;
  static inline bool Sas_raw_sasstssnsrType_IsValid(int value) {
    return Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_IsValid(value);
  }
  static const Sas_raw_sasstssnsrType Sas_raw_sasstssnsrType_MIN =
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_MIN;
  static const Sas_raw_sasstssnsrType Sas_raw_sasstssnsrType_MAX =
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_MAX;
  static const int Sas_raw_sasstssnsrType_ARRAYSIZE =
    Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Sas_raw_sasstssnsrType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sas_raw_sasstssnsrType_descriptor() {
    return Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_descriptor();
  }
  static inline const ::std::string& Sas_raw_sasstssnsrType_Name(Sas_raw_sasstssnsrType value) {
    return Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Name(value);
  }
  static inline bool Sas_raw_sasstssnsrType_Parse(const ::std::string& name,
      Sas_raw_sasstssnsrType* value) {
    return Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_Parse(name, value);
  }

  typedef Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sasstssnsrType;
  static const Sas_sasstssnsrType SAS_SASSTSSNSR_SENSOR_VALUE_INVALID =
    Sas_sensor_0x175_175_Sas_sasstssnsrType_SAS_SASSTSSNSR_SENSOR_VALUE_INVALID;
  static const Sas_sasstssnsrType SAS_SASSTSSNSR_SENSOR_VALUE_VALID =
    Sas_sensor_0x175_175_Sas_sasstssnsrType_SAS_SASSTSSNSR_SENSOR_VALUE_VALID;
  static inline bool Sas_sasstssnsrType_IsValid(int value) {
    return Sas_sensor_0x175_175_Sas_sasstssnsrType_IsValid(value);
  }
  static const Sas_sasstssnsrType Sas_sasstssnsrType_MIN =
    Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_MIN;
  static const Sas_sasstssnsrType Sas_sasstssnsrType_MAX =
    Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_MAX;
  static const int Sas_sasstssnsrType_ARRAYSIZE =
    Sas_sensor_0x175_175_Sas_sasstssnsrType_Sas_sasstssnsrType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sas_sasstssnsrType_descriptor() {
    return Sas_sensor_0x175_175_Sas_sasstssnsrType_descriptor();
  }
  static inline const ::std::string& Sas_sasstssnsrType_Name(Sas_sasstssnsrType value) {
    return Sas_sensor_0x175_175_Sas_sasstssnsrType_Name(value);
  }
  static inline bool Sas_sasstssnsrType_Parse(const ::std::string& name,
      Sas_sasstssnsrType* value) {
    return Sas_sensor_0x175_175_Sas_sasstssnsrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double sas_raw_steerwheelangle = 1;
  bool has_sas_raw_steerwheelangle() const;
  void clear_sas_raw_steerwheelangle();
  static const int kSasRawSteerwheelangleFieldNumber = 1;
  double sas_raw_steerwheelangle() const;
  void set_sas_raw_steerwheelangle(double value);

  // optional double sas_steerwheelrotspd = 2;
  bool has_sas_steerwheelrotspd() const;
  void clear_sas_steerwheelrotspd();
  static const int kSasSteerwheelrotspdFieldNumber = 2;
  double sas_steerwheelrotspd() const;
  void set_sas_steerwheelrotspd(double value);

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
  bool has_sas_trimmingsts() const;
  void clear_sas_trimmingsts();
  static const int kSasTrimmingstsFieldNumber = 3;
  ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType sas_trimmingsts() const;
  void set_sas_trimmingsts(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType value);

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
  bool has_sas_steerwheelrotspdstatus() const;
  void clear_sas_steerwheelrotspdstatus();
  static const int kSasSteerwheelrotspdstatusFieldNumber = 4;
  ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus() const;
  void set_sas_steerwheelrotspdstatus(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType value);

  // optional int32 rolling_counter_0x175 = 5;
  bool has_rolling_counter_0x175() const;
  void clear_rolling_counter_0x175();
  static const int kRollingCounter0X175FieldNumber = 5;
  ::google::protobuf::int32 rolling_counter_0x175() const;
  void set_rolling_counter_0x175(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
  bool has_sas_sasstscal() const;
  void clear_sas_sasstscal();
  static const int kSasSasstscalFieldNumber = 6;
  ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType sas_sasstscal() const;
  void set_sas_sasstscal(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType value);

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
  bool has_sas_raw_sasstssnsr() const;
  void clear_sas_raw_sasstssnsr();
  static const int kSasRawSasstssnsrFieldNumber = 7;
  ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType sas_raw_sasstssnsr() const;
  void set_sas_raw_sasstssnsr(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType value);

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
  bool has_sas_sasstssnsr() const;
  void clear_sas_sasstssnsr();
  static const int kSasSasstssnsrFieldNumber = 8;
  ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType sas_sasstssnsr() const;
  void set_sas_sasstssnsr(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType value);

  // optional double sas_steerwheelangle = 10;
  bool has_sas_steerwheelangle() const;
  void clear_sas_steerwheelangle();
  static const int kSasSteerwheelangleFieldNumber = 10;
  double sas_steerwheelangle() const;
  void set_sas_steerwheelangle(double value);

  // optional int32 checksum_0x175 = 9;
  bool has_checksum_0x175() const;
  void clear_checksum_0x175();
  static const int kChecksum0X175FieldNumber = 9;
  ::google::protobuf::int32 checksum_0x175() const;
  void set_checksum_0x175(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Sas_sensor_0x175_175)
 private:
  void set_has_sas_raw_steerwheelangle();
  void clear_has_sas_raw_steerwheelangle();
  void set_has_sas_steerwheelrotspd();
  void clear_has_sas_steerwheelrotspd();
  void set_has_sas_trimmingsts();
  void clear_has_sas_trimmingsts();
  void set_has_sas_steerwheelrotspdstatus();
  void clear_has_sas_steerwheelrotspdstatus();
  void set_has_rolling_counter_0x175();
  void clear_has_rolling_counter_0x175();
  void set_has_sas_sasstscal();
  void clear_has_sas_sasstscal();
  void set_has_sas_raw_sasstssnsr();
  void clear_has_sas_raw_sasstssnsr();
  void set_has_sas_sasstssnsr();
  void clear_has_sas_sasstssnsr();
  void set_has_checksum_0x175();
  void clear_has_checksum_0x175();
  void set_has_sas_steerwheelangle();
  void clear_has_sas_steerwheelangle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double sas_raw_steerwheelangle_;
  double sas_steerwheelrotspd_;
  int sas_trimmingsts_;
  int sas_steerwheelrotspdstatus_;
  ::google::protobuf::int32 rolling_counter_0x175_;
  int sas_sasstscal_;
  int sas_raw_sasstssnsr_;
  int sas_sasstssnsr_;
  double sas_steerwheelangle_;
  ::google::protobuf::int32 checksum_0x175_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_body_0x321_321 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_body_0x321_321) */ {
 public:
  Gw_body_0x321_321();
  virtual ~Gw_body_0x321_321();

  Gw_body_0x321_321(const Gw_body_0x321_321& from);

  inline Gw_body_0x321_321& operator=(const Gw_body_0x321_321& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_body_0x321_321& default_instance();

  static inline const Gw_body_0x321_321* internal_default_instance() {
    return reinterpret_cast<const Gw_body_0x321_321*>(
               &_Gw_body_0x321_321_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Gw_body_0x321_321* other);

  // implements Message ----------------------------------------------

  inline Gw_body_0x321_321* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_body_0x321_321* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_body_0x321_321& from);
  void MergeFrom(const Gw_body_0x321_321& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_body_0x321_321* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_body_0x321_321_Bcm_outsidetempdigType Bcm_outsidetempdigType;
  static const Bcm_outsidetempdigType BCM_OUTSIDETEMPDIG_NOFAULT =
    Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_NOFAULT;
  static const Bcm_outsidetempdigType BCM_OUTSIDETEMPDIG_SHORTCIRCUIT =
    Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_SHORTCIRCUIT;
  static const Bcm_outsidetempdigType BCM_OUTSIDETEMPDIG_OPENCIRCUIT =
    Gw_body_0x321_321_Bcm_outsidetempdigType_BCM_OUTSIDETEMPDIG_OPENCIRCUIT;
  static inline bool Bcm_outsidetempdigType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_outsidetempdigType_IsValid(value);
  }
  static const Bcm_outsidetempdigType Bcm_outsidetempdigType_MIN =
    Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_MIN;
  static const Bcm_outsidetempdigType Bcm_outsidetempdigType_MAX =
    Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_MAX;
  static const int Bcm_outsidetempdigType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_outsidetempdigType_Bcm_outsidetempdigType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_outsidetempdigType_descriptor() {
    return Gw_body_0x321_321_Bcm_outsidetempdigType_descriptor();
  }
  static inline const ::std::string& Bcm_outsidetempdigType_Name(Bcm_outsidetempdigType value) {
    return Gw_body_0x321_321_Bcm_outsidetempdigType_Name(value);
  }
  static inline bool Bcm_outsidetempdigType_Parse(const ::std::string& name,
      Bcm_outsidetempdigType* value) {
    return Gw_body_0x321_321_Bcm_outsidetempdigType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Bcm_driving_mode_req_bcmType;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_NORMAL =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_NORMAL;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_SNOW =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_SNOW;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_NOUSED =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_NOUSED;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_SPORT =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_SPORT;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_ECO =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_ECO;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_4L =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_4L;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_ROCK =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_ROCK;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_WETMUD =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_WETMUD;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_SAND =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_SAND;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_GHAT_FORN330L =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_GHAT_FORN330L;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_MANUAL_FORN330L =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_MANUAL_FORN330L;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_ATSFAULTBCM =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_ATSFAULTBCM;
  static const Bcm_driving_mode_req_bcmType BCM_DRIVING_MODE_REQ_BCM_INVALID =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_BCM_DRIVING_MODE_REQ_BCM_INVALID;
  static inline bool Bcm_driving_mode_req_bcmType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_IsValid(value);
  }
  static const Bcm_driving_mode_req_bcmType Bcm_driving_mode_req_bcmType_MIN =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_MIN;
  static const Bcm_driving_mode_req_bcmType Bcm_driving_mode_req_bcmType_MAX =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_MAX;
  static const int Bcm_driving_mode_req_bcmType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Bcm_driving_mode_req_bcmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_driving_mode_req_bcmType_descriptor() {
    return Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_descriptor();
  }
  static inline const ::std::string& Bcm_driving_mode_req_bcmType_Name(Bcm_driving_mode_req_bcmType value) {
    return Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Name(value);
  }
  static inline bool Bcm_driving_mode_req_bcmType_Parse(const ::std::string& name,
      Bcm_driving_mode_req_bcmType* value) {
    return Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_powermodeType Bcm_powermodeType;
  static const Bcm_powermodeType BCM_POWERMODE_UNDEFINED =
    Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_UNDEFINED;
  static const Bcm_powermodeType BCM_POWERMODE_OFF =
    Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_OFF;
  static const Bcm_powermodeType BCM_POWERMODE_ACC =
    Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_ACC;
  static const Bcm_powermodeType BCM_POWERMODE_ON =
    Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_ON;
  static const Bcm_powermodeType BCM_POWERMODE_START =
    Gw_body_0x321_321_Bcm_powermodeType_BCM_POWERMODE_START;
  static inline bool Bcm_powermodeType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_powermodeType_IsValid(value);
  }
  static const Bcm_powermodeType Bcm_powermodeType_MIN =
    Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_MIN;
  static const Bcm_powermodeType Bcm_powermodeType_MAX =
    Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_MAX;
  static const int Bcm_powermodeType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_powermodeType_Bcm_powermodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_powermodeType_descriptor() {
    return Gw_body_0x321_321_Bcm_powermodeType_descriptor();
  }
  static inline const ::std::string& Bcm_powermodeType_Name(Bcm_powermodeType value) {
    return Gw_body_0x321_321_Bcm_powermodeType_Name(value);
  }
  static inline bool Bcm_powermodeType_Parse(const ::std::string& name,
      Bcm_powermodeType* value) {
    return Gw_body_0x321_321_Bcm_powermodeType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_frntfoglmpstsType Bcm_frntfoglmpstsType;
  static const Bcm_frntfoglmpstsType BCM_FRNTFOGLMPSTS_INVALID =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_INVALID;
  static const Bcm_frntfoglmpstsType BCM_FRNTFOGLMPSTS_OFF =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_OFF;
  static const Bcm_frntfoglmpstsType BCM_FRNTFOGLMPSTS_ON =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_ON;
  static const Bcm_frntfoglmpstsType BCM_FRNTFOGLMPSTS_RESERVED =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_BCM_FRNTFOGLMPSTS_RESERVED;
  static inline bool Bcm_frntfoglmpstsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_frntfoglmpstsType_IsValid(value);
  }
  static const Bcm_frntfoglmpstsType Bcm_frntfoglmpstsType_MIN =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_MIN;
  static const Bcm_frntfoglmpstsType Bcm_frntfoglmpstsType_MAX =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_MAX;
  static const int Bcm_frntfoglmpstsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_frntfoglmpstsType_Bcm_frntfoglmpstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_frntfoglmpstsType_descriptor() {
    return Gw_body_0x321_321_Bcm_frntfoglmpstsType_descriptor();
  }
  static inline const ::std::string& Bcm_frntfoglmpstsType_Name(Bcm_frntfoglmpstsType value) {
    return Gw_body_0x321_321_Bcm_frntfoglmpstsType_Name(value);
  }
  static inline bool Bcm_frntfoglmpstsType_Parse(const ::std::string& name,
      Bcm_frntfoglmpstsType* value) {
    return Gw_body_0x321_321_Bcm_frntfoglmpstsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_lowbeamstsType Bcm_lowbeamstsType;
  static const Bcm_lowbeamstsType BCM_LOWBEAMSTS_INVALID =
    Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_INVALID;
  static const Bcm_lowbeamstsType BCM_LOWBEAMSTS_OFF =
    Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_OFF;
  static const Bcm_lowbeamstsType BCM_LOWBEAMSTS_ON =
    Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_ON;
  static const Bcm_lowbeamstsType BCM_LOWBEAMSTS_RESERVED =
    Gw_body_0x321_321_Bcm_lowbeamstsType_BCM_LOWBEAMSTS_RESERVED;
  static inline bool Bcm_lowbeamstsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_lowbeamstsType_IsValid(value);
  }
  static const Bcm_lowbeamstsType Bcm_lowbeamstsType_MIN =
    Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_MIN;
  static const Bcm_lowbeamstsType Bcm_lowbeamstsType_MAX =
    Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_MAX;
  static const int Bcm_lowbeamstsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_lowbeamstsType_Bcm_lowbeamstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_lowbeamstsType_descriptor() {
    return Gw_body_0x321_321_Bcm_lowbeamstsType_descriptor();
  }
  static inline const ::std::string& Bcm_lowbeamstsType_Name(Bcm_lowbeamstsType value) {
    return Gw_body_0x321_321_Bcm_lowbeamstsType_Name(value);
  }
  static inline bool Bcm_lowbeamstsType_Parse(const ::std::string& name,
      Bcm_lowbeamstsType* value) {
    return Gw_body_0x321_321_Bcm_lowbeamstsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_highbeamstsType Bcm_highbeamstsType;
  static const Bcm_highbeamstsType BCM_HIGHBEAMSTS_INVALID =
    Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_INVALID;
  static const Bcm_highbeamstsType BCM_HIGHBEAMSTS_OFF =
    Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_OFF;
  static const Bcm_highbeamstsType BCM_HIGHBEAMSTS_ON =
    Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_ON;
  static const Bcm_highbeamstsType BCM_HIGHBEAMSTS_RESERVED =
    Gw_body_0x321_321_Bcm_highbeamstsType_BCM_HIGHBEAMSTS_RESERVED;
  static inline bool Bcm_highbeamstsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_highbeamstsType_IsValid(value);
  }
  static const Bcm_highbeamstsType Bcm_highbeamstsType_MIN =
    Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_MIN;
  static const Bcm_highbeamstsType Bcm_highbeamstsType_MAX =
    Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_MAX;
  static const int Bcm_highbeamstsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_highbeamstsType_Bcm_highbeamstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_highbeamstsType_descriptor() {
    return Gw_body_0x321_321_Bcm_highbeamstsType_descriptor();
  }
  static inline const ::std::string& Bcm_highbeamstsType_Name(Bcm_highbeamstsType value) {
    return Gw_body_0x321_321_Bcm_highbeamstsType_Name(value);
  }
  static inline bool Bcm_highbeamstsType_Parse(const ::std::string& name,
      Bcm_highbeamstsType* value) {
    return Gw_body_0x321_321_Bcm_highbeamstsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_ss_enablestsType Bcm_ss_enablestsType;
  static const Bcm_ss_enablestsType BCM_SS_ENABLESTS_INVALID =
    Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_INVALID;
  static const Bcm_ss_enablestsType BCM_SS_ENABLESTS_STARTSTOPISALLOW =
    Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_STARTSTOPISALLOW;
  static const Bcm_ss_enablestsType BCM_SS_ENABLESTS_STARTSTOPISFORBID =
    Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_STARTSTOPISFORBID;
  static const Bcm_ss_enablestsType BCM_SS_ENABLESTS_RESERVED =
    Gw_body_0x321_321_Bcm_ss_enablestsType_BCM_SS_ENABLESTS_RESERVED;
  static inline bool Bcm_ss_enablestsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_ss_enablestsType_IsValid(value);
  }
  static const Bcm_ss_enablestsType Bcm_ss_enablestsType_MIN =
    Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_MIN;
  static const Bcm_ss_enablestsType Bcm_ss_enablestsType_MAX =
    Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_MAX;
  static const int Bcm_ss_enablestsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_ss_enablestsType_Bcm_ss_enablestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_ss_enablestsType_descriptor() {
    return Gw_body_0x321_321_Bcm_ss_enablestsType_descriptor();
  }
  static inline const ::std::string& Bcm_ss_enablestsType_Name(Bcm_ss_enablestsType value) {
    return Gw_body_0x321_321_Bcm_ss_enablestsType_Name(value);
  }
  static inline bool Bcm_ss_enablestsType_Parse(const ::std::string& name,
      Bcm_ss_enablestsType* value) {
    return Gw_body_0x321_321_Bcm_ss_enablestsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_reardef_statusType Bcm_reardef_statusType;
  static const Bcm_reardef_statusType BCM_REARDEF_STATUS_INVALID =
    Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_INVALID;
  static const Bcm_reardef_statusType BCM_REARDEF_STATUS_REARDEFINACTIVE =
    Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_REARDEFINACTIVE;
  static const Bcm_reardef_statusType BCM_REARDEF_STATUS_REARDEFACTIVE =
    Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_REARDEFACTIVE;
  static const Bcm_reardef_statusType BCM_REARDEF_STATUS_RESERVED =
    Gw_body_0x321_321_Bcm_reardef_statusType_BCM_REARDEF_STATUS_RESERVED;
  static inline bool Bcm_reardef_statusType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_reardef_statusType_IsValid(value);
  }
  static const Bcm_reardef_statusType Bcm_reardef_statusType_MIN =
    Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_MIN;
  static const Bcm_reardef_statusType Bcm_reardef_statusType_MAX =
    Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_MAX;
  static const int Bcm_reardef_statusType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_reardef_statusType_Bcm_reardef_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_reardef_statusType_descriptor() {
    return Gw_body_0x321_321_Bcm_reardef_statusType_descriptor();
  }
  static inline const ::std::string& Bcm_reardef_statusType_Name(Bcm_reardef_statusType value) {
    return Gw_body_0x321_321_Bcm_reardef_statusType_Name(value);
  }
  static inline bool Bcm_reardef_statusType_Parse(const ::std::string& name,
      Bcm_reardef_statusType* value) {
    return Gw_body_0x321_321_Bcm_reardef_statusType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_brakefluidstsType Bcm_brakefluidstsType;
  static const Bcm_brakefluidstsType BCM_BRAKEFLUIDSTS_INVALID =
    Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_INVALID;
  static const Bcm_brakefluidstsType BCM_BRAKEFLUIDSTS_NORMAL =
    Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_NORMAL;
  static const Bcm_brakefluidstsType BCM_BRAKEFLUIDSTS_LOW =
    Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_LOW;
  static const Bcm_brakefluidstsType BCM_BRAKEFLUIDSTS_RESERVED =
    Gw_body_0x321_321_Bcm_brakefluidstsType_BCM_BRAKEFLUIDSTS_RESERVED;
  static inline bool Bcm_brakefluidstsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_brakefluidstsType_IsValid(value);
  }
  static const Bcm_brakefluidstsType Bcm_brakefluidstsType_MIN =
    Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_MIN;
  static const Bcm_brakefluidstsType Bcm_brakefluidstsType_MAX =
    Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_MAX;
  static const int Bcm_brakefluidstsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_brakefluidstsType_Bcm_brakefluidstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_brakefluidstsType_descriptor() {
    return Gw_body_0x321_321_Bcm_brakefluidstsType_descriptor();
  }
  static inline const ::std::string& Bcm_brakefluidstsType_Name(Bcm_brakefluidstsType value) {
    return Gw_body_0x321_321_Bcm_brakefluidstsType_Name(value);
  }
  static inline bool Bcm_brakefluidstsType_Parse(const ::std::string& name,
      Bcm_brakefluidstsType* value) {
    return Gw_body_0x321_321_Bcm_brakefluidstsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_autolampstsType Bcm_autolampstsType;
  static const Bcm_autolampstsType BCM_AUTOLAMPSTS_INVALID =
    Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_INVALID;
  static const Bcm_autolampstsType BCM_AUTOLAMPSTS_INACTIVE =
    Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_INACTIVE;
  static const Bcm_autolampstsType BCM_AUTOLAMPSTS_ACTIVE =
    Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_ACTIVE;
  static const Bcm_autolampstsType BCM_AUTOLAMPSTS_RESERVED =
    Gw_body_0x321_321_Bcm_autolampstsType_BCM_AUTOLAMPSTS_RESERVED;
  static inline bool Bcm_autolampstsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_autolampstsType_IsValid(value);
  }
  static const Bcm_autolampstsType Bcm_autolampstsType_MIN =
    Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_MIN;
  static const Bcm_autolampstsType Bcm_autolampstsType_MAX =
    Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_MAX;
  static const int Bcm_autolampstsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_autolampstsType_Bcm_autolampstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_autolampstsType_descriptor() {
    return Gw_body_0x321_321_Bcm_autolampstsType_descriptor();
  }
  static inline const ::std::string& Bcm_autolampstsType_Name(Bcm_autolampstsType value) {
    return Gw_body_0x321_321_Bcm_autolampstsType_Name(value);
  }
  static inline bool Bcm_autolampstsType_Parse(const ::std::string& name,
      Bcm_autolampstsType* value) {
    return Gw_body_0x321_321_Bcm_autolampstsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_poslmpstsType Bcm_poslmpstsType;
  static const Bcm_poslmpstsType BCM_POSLMPSTS_NOUESD =
    Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_NOUESD;
  static const Bcm_poslmpstsType BCM_POSLMPSTS_OFF =
    Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_OFF;
  static const Bcm_poslmpstsType BCM_POSLMPSTS_ON =
    Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_ON;
  static const Bcm_poslmpstsType BCM_POSLMPSTS_RESERVED =
    Gw_body_0x321_321_Bcm_poslmpstsType_BCM_POSLMPSTS_RESERVED;
  static inline bool Bcm_poslmpstsType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_poslmpstsType_IsValid(value);
  }
  static const Bcm_poslmpstsType Bcm_poslmpstsType_MIN =
    Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_MIN;
  static const Bcm_poslmpstsType Bcm_poslmpstsType_MAX =
    Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_MAX;
  static const int Bcm_poslmpstsType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_poslmpstsType_Bcm_poslmpstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_poslmpstsType_descriptor() {
    return Gw_body_0x321_321_Bcm_poslmpstsType_descriptor();
  }
  static inline const ::std::string& Bcm_poslmpstsType_Name(Bcm_poslmpstsType value) {
    return Gw_body_0x321_321_Bcm_poslmpstsType_Name(value);
  }
  static inline bool Bcm_poslmpstsType_Parse(const ::std::string& name,
      Bcm_poslmpstsType* value) {
    return Gw_body_0x321_321_Bcm_poslmpstsType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_bgllumlvlsettingType Bcm_bgllumlvlsettingType;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_0PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_0PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_1PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_1PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_2PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_2PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_3PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_3PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_4PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_4PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_5PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_5PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_6PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_6PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_7PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_7PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_8PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_8PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_9PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_9PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_10PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_10PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_11PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_11PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_12PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_12PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_13PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_13PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_14PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_14PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_15PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_15PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_16PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_16PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_17PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_17PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_18PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_18PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_19PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_19PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_20PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_20PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_21PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_21PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_22PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_22PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_23PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_23PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_24PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_24PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_25PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_25PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_26PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_26PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_27PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_27PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_28PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_28PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_29PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_29PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_30PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_30PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_31PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_31PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_32PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_32PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_33PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_33PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_34PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_34PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_35PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_35PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_36PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_36PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_37PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_37PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_38PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_38PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_39PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_39PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_40PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_40PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_41PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_41PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_42PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_42PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_43PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_43PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_44PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_44PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_45PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_45PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_46PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_46PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_47PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_47PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_48PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_48PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_49PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_49PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_50PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_50PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_51PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_51PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_52PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_52PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_53PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_53PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_54PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_54PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_55PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_55PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_56PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_56PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_57PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_57PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_58PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_58PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_59PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_59PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_60PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_60PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_61PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_61PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_62PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_62PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_63PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_63PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_64PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_64PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_65PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_65PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_66PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_66PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_67PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_67PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_68PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_68PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_69PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_69PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_70PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_70PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_71PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_71PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_72PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_72PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_73PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_73PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_74PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_74PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_75PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_75PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_76PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_76PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_77PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_77PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_78PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_78PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_79PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_79PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_80PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_80PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_81PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_81PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_82PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_82PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_83PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_83PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_84PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_84PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_85PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_85PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_86PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_86PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_87PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_87PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_88PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_88PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_89PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_89PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_90PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_90PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_91PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_91PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_92PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_92PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_93PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_93PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_94PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_94PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_95PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_95PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_96PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_96PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_97PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_97PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_98PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_98PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_99PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_99PERCENT;
  static const Bcm_bgllumlvlsettingType BCM_BGLLUMLVLSETTING_100PERCENT =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_BCM_BGLLUMLVLSETTING_100PERCENT;
  static inline bool Bcm_bgllumlvlsettingType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_bgllumlvlsettingType_IsValid(value);
  }
  static const Bcm_bgllumlvlsettingType Bcm_bgllumlvlsettingType_MIN =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_MIN;
  static const Bcm_bgllumlvlsettingType Bcm_bgllumlvlsettingType_MAX =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_MAX;
  static const int Bcm_bgllumlvlsettingType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Bcm_bgllumlvlsettingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_bgllumlvlsettingType_descriptor() {
    return Gw_body_0x321_321_Bcm_bgllumlvlsettingType_descriptor();
  }
  static inline const ::std::string& Bcm_bgllumlvlsettingType_Name(Bcm_bgllumlvlsettingType value) {
    return Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Name(value);
  }
  static inline bool Bcm_bgllumlvlsettingType_Parse(const ::std::string& name,
      Bcm_bgllumlvlsettingType* value) {
    return Gw_body_0x321_321_Bcm_bgllumlvlsettingType_Parse(name, value);
  }

  typedef Gw_body_0x321_321_Bcm_reverse_gearType Bcm_reverse_gearType;
  static const Bcm_reverse_gearType BCM_REVERSE_GEAR_UNDEFINED =
    Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_UNDEFINED;
  static const Bcm_reverse_gearType BCM_REVERSE_GEAR_NOTINREVERSEGEAR =
    Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_NOTINREVERSEGEAR;
  static const Bcm_reverse_gearType BCM_REVERSE_GEAR_INREVERSEGEAR =
    Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_INREVERSEGEAR;
  static const Bcm_reverse_gearType BCM_REVERSE_GEAR_RESERVED =
    Gw_body_0x321_321_Bcm_reverse_gearType_BCM_REVERSE_GEAR_RESERVED;
  static inline bool Bcm_reverse_gearType_IsValid(int value) {
    return Gw_body_0x321_321_Bcm_reverse_gearType_IsValid(value);
  }
  static const Bcm_reverse_gearType Bcm_reverse_gearType_MIN =
    Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_MIN;
  static const Bcm_reverse_gearType Bcm_reverse_gearType_MAX =
    Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_MAX;
  static const int Bcm_reverse_gearType_ARRAYSIZE =
    Gw_body_0x321_321_Bcm_reverse_gearType_Bcm_reverse_gearType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_reverse_gearType_descriptor() {
    return Gw_body_0x321_321_Bcm_reverse_gearType_descriptor();
  }
  static inline const ::std::string& Bcm_reverse_gearType_Name(Bcm_reverse_gearType value) {
    return Gw_body_0x321_321_Bcm_reverse_gearType_Name(value);
  }
  static inline bool Bcm_reverse_gearType_Parse(const ::std::string& name,
      Bcm_reverse_gearType* value) {
    return Gw_body_0x321_321_Bcm_reverse_gearType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double bcm_outsidetemp = 2;
  bool has_bcm_outsidetemp() const;
  void clear_bcm_outsidetemp();
  static const int kBcmOutsidetempFieldNumber = 2;
  double bcm_outsidetemp() const;
  void set_bcm_outsidetemp(double value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
  bool has_bcm_outsidetempdig() const;
  void clear_bcm_outsidetempdig();
  static const int kBcmOutsidetempdigFieldNumber = 1;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType bcm_outsidetempdig() const;
  void set_bcm_outsidetempdig(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
  bool has_bcm_driving_mode_req_bcm() const;
  void clear_bcm_driving_mode_req_bcm();
  static const int kBcmDrivingModeReqBcmFieldNumber = 3;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm() const;
  void set_bcm_driving_mode_req_bcm(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
  bool has_bcm_powermode() const;
  void clear_bcm_powermode();
  static const int kBcmPowermodeFieldNumber = 4;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType bcm_powermode() const;
  void set_bcm_powermode(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
  bool has_bcm_frntfoglmpsts() const;
  void clear_bcm_frntfoglmpsts();
  static const int kBcmFrntfoglmpstsFieldNumber = 5;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType bcm_frntfoglmpsts() const;
  void set_bcm_frntfoglmpsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
  bool has_bcm_lowbeamsts() const;
  void clear_bcm_lowbeamsts();
  static const int kBcmLowbeamstsFieldNumber = 6;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType bcm_lowbeamsts() const;
  void set_bcm_lowbeamsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
  bool has_bcm_highbeamsts() const;
  void clear_bcm_highbeamsts();
  static const int kBcmHighbeamstsFieldNumber = 7;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType bcm_highbeamsts() const;
  void set_bcm_highbeamsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
  bool has_bcm_ss_enablests() const;
  void clear_bcm_ss_enablests();
  static const int kBcmSsEnablestsFieldNumber = 8;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType bcm_ss_enablests() const;
  void set_bcm_ss_enablests(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
  bool has_bcm_reardef_status() const;
  void clear_bcm_reardef_status();
  static const int kBcmReardefStatusFieldNumber = 9;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType bcm_reardef_status() const;
  void set_bcm_reardef_status(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
  bool has_bcm_brakefluidsts() const;
  void clear_bcm_brakefluidsts();
  static const int kBcmBrakefluidstsFieldNumber = 10;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType bcm_brakefluidsts() const;
  void set_bcm_brakefluidsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
  bool has_bcm_autolampsts() const;
  void clear_bcm_autolampsts();
  static const int kBcmAutolampstsFieldNumber = 11;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType bcm_autolampsts() const;
  void set_bcm_autolampsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
  bool has_bcm_poslmpsts() const;
  void clear_bcm_poslmpsts();
  static const int kBcmPoslmpstsFieldNumber = 12;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType bcm_poslmpsts() const;
  void set_bcm_poslmpsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
  bool has_bcm_bgllumlvlsetting() const;
  void clear_bcm_bgllumlvlsetting();
  static const int kBcmBgllumlvlsettingFieldNumber = 13;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting() const;
  void set_bcm_bgllumlvlsetting(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType value);

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
  bool has_bcm_reverse_gear() const;
  void clear_bcm_reverse_gear();
  static const int kBcmReverseGearFieldNumber = 14;
  ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType bcm_reverse_gear() const;
  void set_bcm_reverse_gear(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_body_0x321_321)
 private:
  void set_has_bcm_outsidetempdig();
  void clear_has_bcm_outsidetempdig();
  void set_has_bcm_outsidetemp();
  void clear_has_bcm_outsidetemp();
  void set_has_bcm_driving_mode_req_bcm();
  void clear_has_bcm_driving_mode_req_bcm();
  void set_has_bcm_powermode();
  void clear_has_bcm_powermode();
  void set_has_bcm_frntfoglmpsts();
  void clear_has_bcm_frntfoglmpsts();
  void set_has_bcm_lowbeamsts();
  void clear_has_bcm_lowbeamsts();
  void set_has_bcm_highbeamsts();
  void clear_has_bcm_highbeamsts();
  void set_has_bcm_ss_enablests();
  void clear_has_bcm_ss_enablests();
  void set_has_bcm_reardef_status();
  void clear_has_bcm_reardef_status();
  void set_has_bcm_brakefluidsts();
  void clear_has_bcm_brakefluidsts();
  void set_has_bcm_autolampsts();
  void clear_has_bcm_autolampsts();
  void set_has_bcm_poslmpsts();
  void clear_has_bcm_poslmpsts();
  void set_has_bcm_bgllumlvlsetting();
  void clear_has_bcm_bgllumlvlsetting();
  void set_has_bcm_reverse_gear();
  void clear_has_bcm_reverse_gear();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double bcm_outsidetemp_;
  int bcm_outsidetempdig_;
  int bcm_driving_mode_req_bcm_;
  int bcm_powermode_;
  int bcm_frntfoglmpsts_;
  int bcm_lowbeamsts_;
  int bcm_highbeamsts_;
  int bcm_ss_enablests_;
  int bcm_reardef_status_;
  int bcm_brakefluidsts_;
  int bcm_autolampsts_;
  int bcm_poslmpsts_;
  int bcm_bgllumlvlsetting_;
  int bcm_reverse_gear_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ipm_leftline_0x278_278 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ipm_leftline_0x278_278) */ {
 public:
  Ipm_leftline_0x278_278();
  virtual ~Ipm_leftline_0x278_278();

  Ipm_leftline_0x278_278(const Ipm_leftline_0x278_278& from);

  inline Ipm_leftline_0x278_278& operator=(const Ipm_leftline_0x278_278& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ipm_leftline_0x278_278& default_instance();

  static inline const Ipm_leftline_0x278_278* internal_default_instance() {
    return reinterpret_cast<const Ipm_leftline_0x278_278*>(
               &_Ipm_leftline_0x278_278_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Ipm_leftline_0x278_278* other);

  // implements Message ----------------------------------------------

  inline Ipm_leftline_0x278_278* New() const PROTOBUF_FINAL { return New(NULL); }

  Ipm_leftline_0x278_278* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ipm_leftline_0x278_278& from);
  void MergeFrom(const Ipm_leftline_0x278_278& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ipm_leftline_0x278_278* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ipm_leftline_dy = 1;
  bool has_ipm_leftline_dy() const;
  void clear_ipm_leftline_dy();
  static const int kIpmLeftlineDyFieldNumber = 1;
  double ipm_leftline_dy() const;
  void set_ipm_leftline_dy(double value);

  // optional double ipm_leftline_dx_lookhead = 2;
  bool has_ipm_leftline_dx_lookhead() const;
  void clear_ipm_leftline_dx_lookhead();
  static const int kIpmLeftlineDxLookheadFieldNumber = 2;
  double ipm_leftline_dx_lookhead() const;
  void set_ipm_leftline_dx_lookhead(double value);

  // optional double ipm_leftline_hor_curve = 3;
  bool has_ipm_leftline_hor_curve() const;
  void clear_ipm_leftline_hor_curve();
  static const int kIpmLeftlineHorCurveFieldNumber = 3;
  double ipm_leftline_hor_curve() const;
  void set_ipm_leftline_hor_curve(double value);

  // optional double ipm_leftline_yawangle = 4;
  bool has_ipm_leftline_yawangle() const;
  void clear_ipm_leftline_yawangle();
  static const int kIpmLeftlineYawangleFieldNumber = 4;
  double ipm_leftline_yawangle() const;
  void set_ipm_leftline_yawangle(double value);

  // optional double ipm_ledtline_dx_start = 5;
  bool has_ipm_ledtline_dx_start() const;
  void clear_ipm_ledtline_dx_start();
  static const int kIpmLedtlineDxStartFieldNumber = 5;
  double ipm_ledtline_dx_start() const;
  void set_ipm_ledtline_dx_start(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ipm_leftline_0x278_278)
 private:
  void set_has_ipm_leftline_dy();
  void clear_has_ipm_leftline_dy();
  void set_has_ipm_leftline_dx_lookhead();
  void clear_has_ipm_leftline_dx_lookhead();
  void set_has_ipm_leftline_hor_curve();
  void clear_has_ipm_leftline_hor_curve();
  void set_has_ipm_leftline_yawangle();
  void clear_has_ipm_leftline_yawangle();
  void set_has_ipm_ledtline_dx_start();
  void clear_has_ipm_ledtline_dx_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ipm_leftline_dy_;
  double ipm_leftline_dx_lookhead_;
  double ipm_leftline_hor_curve_;
  double ipm_leftline_yawangle_;
  double ipm_ledtline_dx_start_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ems_engstatus_0x142_142 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ems_engstatus_0x142_142) */ {
 public:
  Gw_ems_engstatus_0x142_142();
  virtual ~Gw_ems_engstatus_0x142_142();

  Gw_ems_engstatus_0x142_142(const Gw_ems_engstatus_0x142_142& from);

  inline Gw_ems_engstatus_0x142_142& operator=(const Gw_ems_engstatus_0x142_142& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ems_engstatus_0x142_142& default_instance();

  static inline const Gw_ems_engstatus_0x142_142* internal_default_instance() {
    return reinterpret_cast<const Gw_ems_engstatus_0x142_142*>(
               &_Gw_ems_engstatus_0x142_142_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Gw_ems_engstatus_0x142_142* other);

  // implements Message ----------------------------------------------

  inline Gw_ems_engstatus_0x142_142* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ems_engstatus_0x142_142* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ems_engstatus_0x142_142& from);
  void MergeFrom(const Gw_ems_engstatus_0x142_142& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ems_engstatus_0x142_142* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Ems_engoperationstatusType;
  static const Ems_engoperationstatusType EMS_ENGOPERATIONSTATUS_STOPPED =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_STOPPED;
  static const Ems_engoperationstatusType EMS_ENGOPERATIONSTATUS_RUNNING =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_RUNNING;
  static const Ems_engoperationstatusType EMS_ENGOPERATIONSTATUS_IDLE =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_IDLE;
  static const Ems_engoperationstatusType EMS_ENGOPERATIONSTATUS_DFCO_RESERVED =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_DFCO_RESERVED;
  static const Ems_engoperationstatusType EMS_ENGOPERATIONSTATUS_CRANKING =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_CRANKING;
  static const Ems_engoperationstatusType EMS_ENGOPERATIONSTATUS_STALLING =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_EMS_ENGOPERATIONSTATUS_STALLING;
  static inline bool Ems_engoperationstatusType_IsValid(int value) {
    return Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_IsValid(value);
  }
  static const Ems_engoperationstatusType Ems_engoperationstatusType_MIN =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_MIN;
  static const Ems_engoperationstatusType Ems_engoperationstatusType_MAX =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_MAX;
  static const int Ems_engoperationstatusType_ARRAYSIZE =
    Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Ems_engoperationstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_engoperationstatusType_descriptor() {
    return Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_descriptor();
  }
  static inline const ::std::string& Ems_engoperationstatusType_Name(Ems_engoperationstatusType value) {
    return Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Name(value);
  }
  static inline bool Ems_engoperationstatusType_Parse(const ::std::string& name,
      Ems_engoperationstatusType* value) {
    return Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_Parse(name, value);
  }

  typedef Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Ems_aircompressorstatusType;
  static const Ems_aircompressorstatusType EMS_AIRCOMPRESSORSTATUS_OFF =
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_EMS_AIRCOMPRESSORSTATUS_OFF;
  static const Ems_aircompressorstatusType EMS_AIRCOMPRESSORSTATUS_ON =
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_EMS_AIRCOMPRESSORSTATUS_ON;
  static inline bool Ems_aircompressorstatusType_IsValid(int value) {
    return Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_IsValid(value);
  }
  static const Ems_aircompressorstatusType Ems_aircompressorstatusType_MIN =
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_MIN;
  static const Ems_aircompressorstatusType Ems_aircompressorstatusType_MAX =
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_MAX;
  static const int Ems_aircompressorstatusType_ARRAYSIZE =
    Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Ems_aircompressorstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_aircompressorstatusType_descriptor() {
    return Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_descriptor();
  }
  static inline const ::std::string& Ems_aircompressorstatusType_Name(Ems_aircompressorstatusType value) {
    return Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Name(value);
  }
  static inline bool Ems_aircompressorstatusType_Parse(const ::std::string& name,
      Ems_aircompressorstatusType* value) {
    return Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_Parse(name, value);
  }

  typedef Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Ems_throttleplatepositionerrorType;
  static const Ems_throttleplatepositionerrorType EMS_THROTTLEPLATEPOSITIONERROR_NOERROR =
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_EMS_THROTTLEPLATEPOSITIONERROR_NOERROR;
  static const Ems_throttleplatepositionerrorType EMS_THROTTLEPLATEPOSITIONERROR_ERROR =
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_EMS_THROTTLEPLATEPOSITIONERROR_ERROR;
  static inline bool Ems_throttleplatepositionerrorType_IsValid(int value) {
    return Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_IsValid(value);
  }
  static const Ems_throttleplatepositionerrorType Ems_throttleplatepositionerrorType_MIN =
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_MIN;
  static const Ems_throttleplatepositionerrorType Ems_throttleplatepositionerrorType_MAX =
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_MAX;
  static const int Ems_throttleplatepositionerrorType_ARRAYSIZE =
    Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Ems_throttleplatepositionerrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_throttleplatepositionerrorType_descriptor() {
    return Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_descriptor();
  }
  static inline const ::std::string& Ems_throttleplatepositionerrorType_Name(Ems_throttleplatepositionerrorType value) {
    return Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Name(value);
  }
  static inline bool Ems_throttleplatepositionerrorType_Parse(const ::std::string& name,
      Ems_throttleplatepositionerrorType* value) {
    return Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_Parse(name, value);
  }

  typedef Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Ems_startstopmessageType;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_NOWARNINGMESSAGE =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_NOWARNINGMESSAGE;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_CLIMATEREQUEST =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_CLIMATEREQUEST;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_BRAKELOW =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_BRAKELOW;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_START_STOPOFF =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_START_STOPOFF;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_BATTERYLOW =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_BATTERYLOW;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_ECTLOW =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_ECTLOW;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_APAINHIBIT =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_APAINHIBIT;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_ACCINHIBIT =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_ACCINHIBIT;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_TCUINHIBIT =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_TCUINHIBIT;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_STARTPROTECT =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_STARTPROTECT;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_HOODOPEN =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_HOODOPEN;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_DRVIEDOOROPNE =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_DRVIEDOOROPNE;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_STEERINGANGELHIGH =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_STEERINGANGELHIGH;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_STARTSTOPFAILURE =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_STARTSTOPFAILURE;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_MANUALLYRESTART =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_MANUALLYRESTART;
  static const Ems_startstopmessageType EMS_STARTSTOPMESSAGE_RESERVED =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_EMS_STARTSTOPMESSAGE_RESERVED;
  static inline bool Ems_startstopmessageType_IsValid(int value) {
    return Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_IsValid(value);
  }
  static const Ems_startstopmessageType Ems_startstopmessageType_MIN =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_MIN;
  static const Ems_startstopmessageType Ems_startstopmessageType_MAX =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_MAX;
  static const int Ems_startstopmessageType_ARRAYSIZE =
    Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Ems_startstopmessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_startstopmessageType_descriptor() {
    return Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_descriptor();
  }
  static inline const ::std::string& Ems_startstopmessageType_Name(Ems_startstopmessageType value) {
    return Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Name(value);
  }
  static inline bool Ems_startstopmessageType_Parse(const ::std::string& name,
      Ems_startstopmessageType* value) {
    return Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_Parse(name, value);
  }

  typedef Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Ems_ignswtstsType;
  static const Ems_ignswtstsType EMS_IGNSWTSTS_IGNITIONOFF =
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_EMS_IGNSWTSTS_IGNITIONOFF;
  static const Ems_ignswtstsType EMS_IGNSWTSTS_IGNITIONON =
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_EMS_IGNSWTSTS_IGNITIONON;
  static inline bool Ems_ignswtstsType_IsValid(int value) {
    return Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_IsValid(value);
  }
  static const Ems_ignswtstsType Ems_ignswtstsType_MIN =
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_MIN;
  static const Ems_ignswtstsType Ems_ignswtstsType_MAX =
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_MAX;
  static const int Ems_ignswtstsType_ARRAYSIZE =
    Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Ems_ignswtstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_ignswtstsType_descriptor() {
    return Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_descriptor();
  }
  static inline const ::std::string& Ems_ignswtstsType_Name(Ems_ignswtstsType value) {
    return Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Name(value);
  }
  static inline bool Ems_ignswtstsType_Parse(const ::std::string& name,
      Ems_ignswtstsType* value) {
    return Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double ems_setlengidlespeed = 2;
  bool has_ems_setlengidlespeed() const;
  void clear_ems_setlengidlespeed();
  static const int kEmsSetlengidlespeedFieldNumber = 2;
  double ems_setlengidlespeed() const;
  void set_ems_setlengidlespeed(double value);

  // optional int32 ems_ignitiontiming = 1;
  bool has_ems_ignitiontiming() const;
  void clear_ems_ignitiontiming();
  static const int kEmsIgnitiontimingFieldNumber = 1;
  ::google::protobuf::int32 ems_ignitiontiming() const;
  void set_ems_ignitiontiming(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
  bool has_ems_engoperationstatus() const;
  void clear_ems_engoperationstatus();
  static const int kEmsEngoperationstatusFieldNumber = 3;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType ems_engoperationstatus() const;
  void set_ems_engoperationstatus(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType value);

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
  bool has_ems_aircompressorstatus() const;
  void clear_ems_aircompressorstatus();
  static const int kEmsAircompressorstatusFieldNumber = 4;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType ems_aircompressorstatus() const;
  void set_ems_aircompressorstatus(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType value);

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
  bool has_ems_throttleplatepositionerror() const;
  void clear_ems_throttleplatepositionerror();
  static const int kEmsThrottleplatepositionerrorFieldNumber = 5;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType ems_throttleplatepositionerror() const;
  void set_ems_throttleplatepositionerror(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType value);

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
  bool has_ems_startstopmessage() const;
  void clear_ems_startstopmessage();
  static const int kEmsStartstopmessageFieldNumber = 6;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType ems_startstopmessage() const;
  void set_ems_startstopmessage(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType value);

  // optional int32 dcm_ems_rollingcounter_0x142 = 7;
  bool has_dcm_ems_rollingcounter_0x142() const;
  void clear_dcm_ems_rollingcounter_0x142();
  static const int kDcmEmsRollingcounter0X142FieldNumber = 7;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x142() const;
  void set_dcm_ems_rollingcounter_0x142(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
  bool has_ems_ignswtsts() const;
  void clear_ems_ignswtsts();
  static const int kEmsIgnswtstsFieldNumber = 8;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType ems_ignswtsts() const;
  void set_ems_ignswtsts(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType value);

  // optional int32 dcm_ems_checksum_0x142 = 9;
  bool has_dcm_ems_checksum_0x142() const;
  void clear_dcm_ems_checksum_0x142();
  static const int kDcmEmsChecksum0X142FieldNumber = 9;
  ::google::protobuf::int32 dcm_ems_checksum_0x142() const;
  void set_dcm_ems_checksum_0x142(::google::protobuf::int32 value);

  // optional double ems_engthrottleposition = 10;
  bool has_ems_engthrottleposition() const;
  void clear_ems_engthrottleposition();
  static const int kEmsEngthrottlepositionFieldNumber = 10;
  double ems_engthrottleposition() const;
  void set_ems_engthrottleposition(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
 private:
  void set_has_ems_ignitiontiming();
  void clear_has_ems_ignitiontiming();
  void set_has_ems_setlengidlespeed();
  void clear_has_ems_setlengidlespeed();
  void set_has_ems_engoperationstatus();
  void clear_has_ems_engoperationstatus();
  void set_has_ems_aircompressorstatus();
  void clear_has_ems_aircompressorstatus();
  void set_has_ems_throttleplatepositionerror();
  void clear_has_ems_throttleplatepositionerror();
  void set_has_ems_startstopmessage();
  void clear_has_ems_startstopmessage();
  void set_has_dcm_ems_rollingcounter_0x142();
  void clear_has_dcm_ems_rollingcounter_0x142();
  void set_has_ems_ignswtsts();
  void clear_has_ems_ignswtsts();
  void set_has_dcm_ems_checksum_0x142();
  void clear_has_dcm_ems_checksum_0x142();
  void set_has_ems_engthrottleposition();
  void clear_has_ems_engthrottleposition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ems_setlengidlespeed_;
  ::google::protobuf::int32 ems_ignitiontiming_;
  int ems_engoperationstatus_;
  int ems_aircompressorstatus_;
  int ems_throttleplatepositionerror_;
  int ems_startstopmessage_;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x142_;
  int ems_ignswtsts_;
  ::google::protobuf::int32 dcm_ems_checksum_0x142_;
  double ems_engthrottleposition_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_tbox_location_0x580_580 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_tbox_location_0x580_580) */ {
 public:
  Gw_tbox_location_0x580_580();
  virtual ~Gw_tbox_location_0x580_580();

  Gw_tbox_location_0x580_580(const Gw_tbox_location_0x580_580& from);

  inline Gw_tbox_location_0x580_580& operator=(const Gw_tbox_location_0x580_580& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_tbox_location_0x580_580& default_instance();

  static inline const Gw_tbox_location_0x580_580* internal_default_instance() {
    return reinterpret_cast<const Gw_tbox_location_0x580_580*>(
               &_Gw_tbox_location_0x580_580_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Gw_tbox_location_0x580_580* other);

  // implements Message ----------------------------------------------

  inline Gw_tbox_location_0x580_580* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_tbox_location_0x580_580* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_tbox_location_0x580_580& from);
  void MergeFrom(const Gw_tbox_location_0x580_580& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_tbox_location_0x580_580* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_tbox_location_0x580_580_Tbox_gps_ubType Tbox_gps_ubType;
  static const Tbox_gps_ubType TBOX_GPS_UB_NOT_UPDATE_GPS =
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_TBOX_GPS_UB_NOT_UPDATE_GPS;
  static const Tbox_gps_ubType TBOX_GPS_UB_UPDATE_GPS =
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_TBOX_GPS_UB_UPDATE_GPS;
  static inline bool Tbox_gps_ubType_IsValid(int value) {
    return Gw_tbox_location_0x580_580_Tbox_gps_ubType_IsValid(value);
  }
  static const Tbox_gps_ubType Tbox_gps_ubType_MIN =
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_MIN;
  static const Tbox_gps_ubType Tbox_gps_ubType_MAX =
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_MAX;
  static const int Tbox_gps_ubType_ARRAYSIZE =
    Gw_tbox_location_0x580_580_Tbox_gps_ubType_Tbox_gps_ubType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tbox_gps_ubType_descriptor() {
    return Gw_tbox_location_0x580_580_Tbox_gps_ubType_descriptor();
  }
  static inline const ::std::string& Tbox_gps_ubType_Name(Tbox_gps_ubType value) {
    return Gw_tbox_location_0x580_580_Tbox_gps_ubType_Name(value);
  }
  static inline bool Tbox_gps_ubType_Parse(const ::std::string& name,
      Tbox_gps_ubType* value) {
    return Gw_tbox_location_0x580_580_Tbox_gps_ubType_Parse(name, value);
  }

  typedef Gw_tbox_location_0x580_580_Tbox_locationstsType Tbox_locationstsType;
  static const Tbox_locationstsType TBOX_LOCATIONSTS_NORTH_LATITUDE_EAST_LONGITUDE =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_NORTH_LATITUDE_EAST_LONGITUDE;
  static const Tbox_locationstsType TBOX_LOCATIONSTS_NORTH_LATITUDE_WEST_LONGITUDE =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_NORTH_LATITUDE_WEST_LONGITUDE;
  static const Tbox_locationstsType TBOX_LOCATIONSTS_SOUTH_LATITUDE_EAST_LONGITUDE =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_SOUTH_LATITUDE_EAST_LONGITUDE;
  static const Tbox_locationstsType TBOX_LOCATIONSTS_SOUTH_LATITUDE_WEST_LONGITUDE =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_SOUTH_LATITUDE_WEST_LONGITUDE;
  static const Tbox_locationstsType TBOX_LOCATIONSTS_INVALID =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_TBOX_LOCATIONSTS_INVALID;
  static inline bool Tbox_locationstsType_IsValid(int value) {
    return Gw_tbox_location_0x580_580_Tbox_locationstsType_IsValid(value);
  }
  static const Tbox_locationstsType Tbox_locationstsType_MIN =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_MIN;
  static const Tbox_locationstsType Tbox_locationstsType_MAX =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_MAX;
  static const int Tbox_locationstsType_ARRAYSIZE =
    Gw_tbox_location_0x580_580_Tbox_locationstsType_Tbox_locationstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tbox_locationstsType_descriptor() {
    return Gw_tbox_location_0x580_580_Tbox_locationstsType_descriptor();
  }
  static inline const ::std::string& Tbox_locationstsType_Name(Tbox_locationstsType value) {
    return Gw_tbox_location_0x580_580_Tbox_locationstsType_Name(value);
  }
  static inline bool Tbox_locationstsType_Parse(const ::std::string& name,
      Tbox_locationstsType* value) {
    return Gw_tbox_location_0x580_580_Tbox_locationstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double tbox_longitude = 1;
  bool has_tbox_longitude() const;
  void clear_tbox_longitude();
  static const int kTboxLongitudeFieldNumber = 1;
  double tbox_longitude() const;
  void set_tbox_longitude(double value);

  // optional double tbox_latidude = 2;
  bool has_tbox_latidude() const;
  void clear_tbox_latidude();
  static const int kTboxLatidudeFieldNumber = 2;
  double tbox_latidude() const;
  void set_tbox_latidude(double value);

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
  bool has_tbox_gps_ub() const;
  void clear_tbox_gps_ub();
  static const int kTboxGpsUbFieldNumber = 3;
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType tbox_gps_ub() const;
  void set_tbox_gps_ub(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType value);

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
  bool has_tbox_locationsts() const;
  void clear_tbox_locationsts();
  static const int kTboxLocationstsFieldNumber = 4;
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType tbox_locationsts() const;
  void set_tbox_locationsts(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_tbox_location_0x580_580)
 private:
  void set_has_tbox_longitude();
  void clear_has_tbox_longitude();
  void set_has_tbox_latidude();
  void clear_has_tbox_latidude();
  void set_has_tbox_gps_ub();
  void clear_has_tbox_gps_ub();
  void set_has_tbox_locationsts();
  void clear_has_tbox_locationsts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double tbox_longitude_;
  double tbox_latidude_;
  int tbox_gps_ub_;
  int tbox_locationsts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Srs_0x350_350 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Srs_0x350_350) */ {
 public:
  Srs_0x350_350();
  virtual ~Srs_0x350_350();

  Srs_0x350_350(const Srs_0x350_350& from);

  inline Srs_0x350_350& operator=(const Srs_0x350_350& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Srs_0x350_350& default_instance();

  static inline const Srs_0x350_350* internal_default_instance() {
    return reinterpret_cast<const Srs_0x350_350*>(
               &_Srs_0x350_350_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Srs_0x350_350* other);

  // implements Message ----------------------------------------------

  inline Srs_0x350_350* New() const PROTOBUF_FINAL { return New(NULL); }

  Srs_0x350_350* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Srs_0x350_350& from);
  void MergeFrom(const Srs_0x350_350& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Srs_0x350_350* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Srs_0x350_350_Srs_sbr_secondrowrightType Srs_sbr_secondrowrightType;
  static const Srs_sbr_secondrowrightType SRS_SBR_SECONDROWRIGHT_LAMP_OFF =
    Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_OFF;
  static const Srs_sbr_secondrowrightType SRS_SBR_SECONDROWRIGHT_LAMP_FLASHING_RESERVED =
    Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_FLASHING_RESERVED;
  static const Srs_sbr_secondrowrightType SRS_SBR_SECONDROWRIGHT_LAMP_ON =
    Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_LAMP_ON;
  static const Srs_sbr_secondrowrightType SRS_SBR_SECONDROWRIGHT_FAULT_RESERVED =
    Srs_0x350_350_Srs_sbr_secondrowrightType_SRS_SBR_SECONDROWRIGHT_FAULT_RESERVED;
  static inline bool Srs_sbr_secondrowrightType_IsValid(int value) {
    return Srs_0x350_350_Srs_sbr_secondrowrightType_IsValid(value);
  }
  static const Srs_sbr_secondrowrightType Srs_sbr_secondrowrightType_MIN =
    Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_MIN;
  static const Srs_sbr_secondrowrightType Srs_sbr_secondrowrightType_MAX =
    Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_MAX;
  static const int Srs_sbr_secondrowrightType_ARRAYSIZE =
    Srs_0x350_350_Srs_sbr_secondrowrightType_Srs_sbr_secondrowrightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_sbr_secondrowrightType_descriptor() {
    return Srs_0x350_350_Srs_sbr_secondrowrightType_descriptor();
  }
  static inline const ::std::string& Srs_sbr_secondrowrightType_Name(Srs_sbr_secondrowrightType value) {
    return Srs_0x350_350_Srs_sbr_secondrowrightType_Name(value);
  }
  static inline bool Srs_sbr_secondrowrightType_Parse(const ::std::string& name,
      Srs_sbr_secondrowrightType* value) {
    return Srs_0x350_350_Srs_sbr_secondrowrightType_Parse(name, value);
  }

  typedef Srs_0x350_350_Srs_sbr_secondrowmidType Srs_sbr_secondrowmidType;
  static const Srs_sbr_secondrowmidType SRS_SBR_SECONDROWMID_LAMP_OFF =
    Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_OFF;
  static const Srs_sbr_secondrowmidType SRS_SBR_SECONDROWMID_LAMP_FLASHING_RESERVED =
    Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_FLASHING_RESERVED;
  static const Srs_sbr_secondrowmidType SRS_SBR_SECONDROWMID_LAMP_ON =
    Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_LAMP_ON;
  static const Srs_sbr_secondrowmidType SRS_SBR_SECONDROWMID_FAULT_RESERVED =
    Srs_0x350_350_Srs_sbr_secondrowmidType_SRS_SBR_SECONDROWMID_FAULT_RESERVED;
  static inline bool Srs_sbr_secondrowmidType_IsValid(int value) {
    return Srs_0x350_350_Srs_sbr_secondrowmidType_IsValid(value);
  }
  static const Srs_sbr_secondrowmidType Srs_sbr_secondrowmidType_MIN =
    Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_MIN;
  static const Srs_sbr_secondrowmidType Srs_sbr_secondrowmidType_MAX =
    Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_MAX;
  static const int Srs_sbr_secondrowmidType_ARRAYSIZE =
    Srs_0x350_350_Srs_sbr_secondrowmidType_Srs_sbr_secondrowmidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_sbr_secondrowmidType_descriptor() {
    return Srs_0x350_350_Srs_sbr_secondrowmidType_descriptor();
  }
  static inline const ::std::string& Srs_sbr_secondrowmidType_Name(Srs_sbr_secondrowmidType value) {
    return Srs_0x350_350_Srs_sbr_secondrowmidType_Name(value);
  }
  static inline bool Srs_sbr_secondrowmidType_Parse(const ::std::string& name,
      Srs_sbr_secondrowmidType* value) {
    return Srs_0x350_350_Srs_sbr_secondrowmidType_Parse(name, value);
  }

  typedef Srs_0x350_350_Srs_sbr_secondrowleftType Srs_sbr_secondrowleftType;
  static const Srs_sbr_secondrowleftType SRS_SBR_SECONDROWLEFT_LAMP_OFF =
    Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_OFF;
  static const Srs_sbr_secondrowleftType SRS_SBR_SECONDROWLEFT_LAMP_FLASHING_RESERVED =
    Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_FLASHING_RESERVED;
  static const Srs_sbr_secondrowleftType SRS_SBR_SECONDROWLEFT_LAMP_ON =
    Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_LAMP_ON;
  static const Srs_sbr_secondrowleftType SRS_SBR_SECONDROWLEFT_FAULT_RESERVED =
    Srs_0x350_350_Srs_sbr_secondrowleftType_SRS_SBR_SECONDROWLEFT_FAULT_RESERVED;
  static inline bool Srs_sbr_secondrowleftType_IsValid(int value) {
    return Srs_0x350_350_Srs_sbr_secondrowleftType_IsValid(value);
  }
  static const Srs_sbr_secondrowleftType Srs_sbr_secondrowleftType_MIN =
    Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_MIN;
  static const Srs_sbr_secondrowleftType Srs_sbr_secondrowleftType_MAX =
    Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_MAX;
  static const int Srs_sbr_secondrowleftType_ARRAYSIZE =
    Srs_0x350_350_Srs_sbr_secondrowleftType_Srs_sbr_secondrowleftType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_sbr_secondrowleftType_descriptor() {
    return Srs_0x350_350_Srs_sbr_secondrowleftType_descriptor();
  }
  static inline const ::std::string& Srs_sbr_secondrowleftType_Name(Srs_sbr_secondrowleftType value) {
    return Srs_0x350_350_Srs_sbr_secondrowleftType_Name(value);
  }
  static inline bool Srs_sbr_secondrowleftType_Parse(const ::std::string& name,
      Srs_sbr_secondrowleftType* value) {
    return Srs_0x350_350_Srs_sbr_secondrowleftType_Parse(name, value);
  }

  typedef Srs_0x350_350_Srs_sbr_pamsengerType Srs_sbr_pamsengerType;
  static const Srs_sbr_pamsengerType SRS_SBR_PAMSENGER_LAMP_OFF =
    Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_OFF;
  static const Srs_sbr_pamsengerType SRS_SBR_PAMSENGER_LAMP_FLASHING_RESERVED =
    Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_FLASHING_RESERVED;
  static const Srs_sbr_pamsengerType SRS_SBR_PAMSENGER_LAMP_ON =
    Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_LAMP_ON;
  static const Srs_sbr_pamsengerType SRS_SBR_PAMSENGER_FAULT_RESERVED =
    Srs_0x350_350_Srs_sbr_pamsengerType_SRS_SBR_PAMSENGER_FAULT_RESERVED;
  static inline bool Srs_sbr_pamsengerType_IsValid(int value) {
    return Srs_0x350_350_Srs_sbr_pamsengerType_IsValid(value);
  }
  static const Srs_sbr_pamsengerType Srs_sbr_pamsengerType_MIN =
    Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_MIN;
  static const Srs_sbr_pamsengerType Srs_sbr_pamsengerType_MAX =
    Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_MAX;
  static const int Srs_sbr_pamsengerType_ARRAYSIZE =
    Srs_0x350_350_Srs_sbr_pamsengerType_Srs_sbr_pamsengerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_sbr_pamsengerType_descriptor() {
    return Srs_0x350_350_Srs_sbr_pamsengerType_descriptor();
  }
  static inline const ::std::string& Srs_sbr_pamsengerType_Name(Srs_sbr_pamsengerType value) {
    return Srs_0x350_350_Srs_sbr_pamsengerType_Name(value);
  }
  static inline bool Srs_sbr_pamsengerType_Parse(const ::std::string& name,
      Srs_sbr_pamsengerType* value) {
    return Srs_0x350_350_Srs_sbr_pamsengerType_Parse(name, value);
  }

  typedef Srs_0x350_350_Srs_sbr_driverType Srs_sbr_driverType;
  static const Srs_sbr_driverType SRS_SBR_DRIVER_LAMP_OFF =
    Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_OFF;
  static const Srs_sbr_driverType SRS_SBR_DRIVER_LAMP_FLASHING_RESERVED =
    Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_FLASHING_RESERVED;
  static const Srs_sbr_driverType SRS_SBR_DRIVER_LAMP_ON =
    Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_LAMP_ON;
  static const Srs_sbr_driverType SRS_SBR_DRIVER_FAULT_RESERVED =
    Srs_0x350_350_Srs_sbr_driverType_SRS_SBR_DRIVER_FAULT_RESERVED;
  static inline bool Srs_sbr_driverType_IsValid(int value) {
    return Srs_0x350_350_Srs_sbr_driverType_IsValid(value);
  }
  static const Srs_sbr_driverType Srs_sbr_driverType_MIN =
    Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_MIN;
  static const Srs_sbr_driverType Srs_sbr_driverType_MAX =
    Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_MAX;
  static const int Srs_sbr_driverType_ARRAYSIZE =
    Srs_0x350_350_Srs_sbr_driverType_Srs_sbr_driverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_sbr_driverType_descriptor() {
    return Srs_0x350_350_Srs_sbr_driverType_descriptor();
  }
  static inline const ::std::string& Srs_sbr_driverType_Name(Srs_sbr_driverType value) {
    return Srs_0x350_350_Srs_sbr_driverType_Name(value);
  }
  static inline bool Srs_sbr_driverType_Parse(const ::std::string& name,
      Srs_sbr_driverType* value) {
    return Srs_0x350_350_Srs_sbr_driverType_Parse(name, value);
  }

  typedef Srs_0x350_350_Srs_crashoutputstsType Srs_crashoutputstsType;
  static const Srs_crashoutputstsType SRS_CRASHOUTPUTSTS_NO_CRASH =
    Srs_0x350_350_Srs_crashoutputstsType_SRS_CRASHOUTPUTSTS_NO_CRASH;
  static const Srs_crashoutputstsType SRS_CRASHOUTPUTSTS_CRASH =
    Srs_0x350_350_Srs_crashoutputstsType_SRS_CRASHOUTPUTSTS_CRASH;
  static inline bool Srs_crashoutputstsType_IsValid(int value) {
    return Srs_0x350_350_Srs_crashoutputstsType_IsValid(value);
  }
  static const Srs_crashoutputstsType Srs_crashoutputstsType_MIN =
    Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_MIN;
  static const Srs_crashoutputstsType Srs_crashoutputstsType_MAX =
    Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_MAX;
  static const int Srs_crashoutputstsType_ARRAYSIZE =
    Srs_0x350_350_Srs_crashoutputstsType_Srs_crashoutputstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_crashoutputstsType_descriptor() {
    return Srs_0x350_350_Srs_crashoutputstsType_descriptor();
  }
  static inline const ::std::string& Srs_crashoutputstsType_Name(Srs_crashoutputstsType value) {
    return Srs_0x350_350_Srs_crashoutputstsType_Name(value);
  }
  static inline bool Srs_crashoutputstsType_Parse(const ::std::string& name,
      Srs_crashoutputstsType* value) {
    return Srs_0x350_350_Srs_crashoutputstsType_Parse(name, value);
  }

  typedef Srs_0x350_350_Srs_airbagfailstsType Srs_airbagfailstsType;
  static const Srs_airbagfailstsType SRS_AIRBAGFAILSTS_LAMP_OFF =
    Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_OFF;
  static const Srs_airbagfailstsType SRS_AIRBAGFAILSTS_LAMP_FLASH =
    Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_FLASH;
  static const Srs_airbagfailstsType SRS_AIRBAGFAILSTS_LAMP_ON =
    Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_LAMP_ON;
  static const Srs_airbagfailstsType SRS_AIRBAGFAILSTS_RESERVED =
    Srs_0x350_350_Srs_airbagfailstsType_SRS_AIRBAGFAILSTS_RESERVED;
  static inline bool Srs_airbagfailstsType_IsValid(int value) {
    return Srs_0x350_350_Srs_airbagfailstsType_IsValid(value);
  }
  static const Srs_airbagfailstsType Srs_airbagfailstsType_MIN =
    Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_MIN;
  static const Srs_airbagfailstsType Srs_airbagfailstsType_MAX =
    Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_MAX;
  static const int Srs_airbagfailstsType_ARRAYSIZE =
    Srs_0x350_350_Srs_airbagfailstsType_Srs_airbagfailstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Srs_airbagfailstsType_descriptor() {
    return Srs_0x350_350_Srs_airbagfailstsType_descriptor();
  }
  static inline const ::std::string& Srs_airbagfailstsType_Name(Srs_airbagfailstsType value) {
    return Srs_0x350_350_Srs_airbagfailstsType_Name(value);
  }
  static inline bool Srs_airbagfailstsType_Parse(const ::std::string& name,
      Srs_airbagfailstsType* value) {
    return Srs_0x350_350_Srs_airbagfailstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
  bool has_srs_sbr_secondrowright() const;
  void clear_srs_sbr_secondrowright();
  static const int kSrsSbrSecondrowrightFieldNumber = 1;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType srs_sbr_secondrowright() const;
  void set_srs_sbr_secondrowright(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType value);

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
  bool has_srs_sbr_secondrowmid() const;
  void clear_srs_sbr_secondrowmid();
  static const int kSrsSbrSecondrowmidFieldNumber = 2;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType srs_sbr_secondrowmid() const;
  void set_srs_sbr_secondrowmid(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType value);

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
  bool has_srs_sbr_secondrowleft() const;
  void clear_srs_sbr_secondrowleft();
  static const int kSrsSbrSecondrowleftFieldNumber = 3;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType srs_sbr_secondrowleft() const;
  void set_srs_sbr_secondrowleft(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType value);

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
  bool has_srs_sbr_pamsenger() const;
  void clear_srs_sbr_pamsenger();
  static const int kSrsSbrPamsengerFieldNumber = 4;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType srs_sbr_pamsenger() const;
  void set_srs_sbr_pamsenger(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType value);

  // optional int32 rolling_counter_0x350 = 5;
  bool has_rolling_counter_0x350() const;
  void clear_rolling_counter_0x350();
  static const int kRollingCounter0X350FieldNumber = 5;
  ::google::protobuf::int32 rolling_counter_0x350() const;
  void set_rolling_counter_0x350(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
  bool has_srs_sbr_driver() const;
  void clear_srs_sbr_driver();
  static const int kSrsSbrDriverFieldNumber = 6;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType srs_sbr_driver() const;
  void set_srs_sbr_driver(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType value);

  // optional int32 checksum_0x350 = 7;
  bool has_checksum_0x350() const;
  void clear_checksum_0x350();
  static const int kChecksum0X350FieldNumber = 7;
  ::google::protobuf::int32 checksum_0x350() const;
  void set_checksum_0x350(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
  bool has_srs_crashoutputsts() const;
  void clear_srs_crashoutputsts();
  static const int kSrsCrashoutputstsFieldNumber = 8;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType srs_crashoutputsts() const;
  void set_srs_crashoutputsts(::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType value);

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
  bool has_srs_airbagfailsts() const;
  void clear_srs_airbagfailsts();
  static const int kSrsAirbagfailstsFieldNumber = 9;
  ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType srs_airbagfailsts() const;
  void set_srs_airbagfailsts(::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Srs_0x350_350)
 private:
  void set_has_srs_sbr_secondrowright();
  void clear_has_srs_sbr_secondrowright();
  void set_has_srs_sbr_secondrowmid();
  void clear_has_srs_sbr_secondrowmid();
  void set_has_srs_sbr_secondrowleft();
  void clear_has_srs_sbr_secondrowleft();
  void set_has_srs_sbr_pamsenger();
  void clear_has_srs_sbr_pamsenger();
  void set_has_rolling_counter_0x350();
  void clear_has_rolling_counter_0x350();
  void set_has_srs_sbr_driver();
  void clear_has_srs_sbr_driver();
  void set_has_checksum_0x350();
  void clear_has_checksum_0x350();
  void set_has_srs_crashoutputsts();
  void clear_has_srs_crashoutputsts();
  void set_has_srs_airbagfailsts();
  void clear_has_srs_airbagfailsts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int srs_sbr_secondrowright_;
  int srs_sbr_secondrowmid_;
  int srs_sbr_secondrowleft_;
  int srs_sbr_pamsenger_;
  ::google::protobuf::int32 rolling_counter_0x350_;
  int srs_sbr_driver_;
  ::google::protobuf::int32 checksum_0x350_;
  int srs_crashoutputsts_;
  int srs_airbagfailsts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ipm_0x245_245 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ipm_0x245_245) */ {
 public:
  Ipm_0x245_245();
  virtual ~Ipm_0x245_245();

  Ipm_0x245_245(const Ipm_0x245_245& from);

  inline Ipm_0x245_245& operator=(const Ipm_0x245_245& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ipm_0x245_245& default_instance();

  static inline const Ipm_0x245_245* internal_default_instance() {
    return reinterpret_cast<const Ipm_0x245_245*>(
               &_Ipm_0x245_245_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(Ipm_0x245_245* other);

  // implements Message ----------------------------------------------

  inline Ipm_0x245_245* New() const PROTOBUF_FINAL { return New(NULL); }

  Ipm_0x245_245* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ipm_0x245_245& from);
  void MergeFrom(const Ipm_0x245_245& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ipm_0x245_245* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_laneassit_torquereqstatusType;
  static const Ipm_laneassit_torquereqstatusType IPM_LANEASSIT_TORQUEREQSTATUS_NO_REQUEST =
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_NO_REQUEST;
  static const Ipm_laneassit_torquereqstatusType IPM_LANEASSIT_TORQUEREQSTATUS_TORQUE_REQUEST =
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_TORQUE_REQUEST;
  static const Ipm_laneassit_torquereqstatusType IPM_LANEASSIT_TORQUEREQSTATUS_RESERVED =
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IPM_LANEASSIT_TORQUEREQSTATUS_RESERVED;
  static inline bool Ipm_laneassit_torquereqstatusType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IsValid(value);
  }
  static const Ipm_laneassit_torquereqstatusType Ipm_laneassit_torquereqstatusType_MIN =
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_MIN;
  static const Ipm_laneassit_torquereqstatusType Ipm_laneassit_torquereqstatusType_MAX =
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_MAX;
  static const int Ipm_laneassit_torquereqstatusType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Ipm_laneassit_torquereqstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_torquereqstatusType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_torquereqstatusType_Name(Ipm_laneassit_torquereqstatusType value) {
    return Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Name(value);
  }
  static inline bool Ipm_laneassit_torquereqstatusType_Parse(const ::std::string& name,
      Ipm_laneassit_torquereqstatusType* value) {
    return Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_laneassit_torquevalidityType;
  static const Ipm_laneassit_torquevalidityType IPM_LANEASSIT_TORQUEVALIDITY_VALID =
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IPM_LANEASSIT_TORQUEVALIDITY_VALID;
  static const Ipm_laneassit_torquevalidityType IPM_LANEASSIT_TORQUEVALIDITY_INVALID =
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IPM_LANEASSIT_TORQUEVALIDITY_INVALID;
  static inline bool Ipm_laneassit_torquevalidityType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IsValid(value);
  }
  static const Ipm_laneassit_torquevalidityType Ipm_laneassit_torquevalidityType_MIN =
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_MIN;
  static const Ipm_laneassit_torquevalidityType Ipm_laneassit_torquevalidityType_MAX =
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_MAX;
  static const int Ipm_laneassit_torquevalidityType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Ipm_laneassit_torquevalidityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_torquevalidityType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_torquevalidityType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_torquevalidityType_Name(Ipm_laneassit_torquevalidityType value) {
    return Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Name(value);
  }
  static inline bool Ipm_laneassit_torquevalidityType_Parse(const ::std::string& name,
      Ipm_laneassit_torquevalidityType* value) {
    return Ipm_0x245_245_Ipm_laneassit_torquevalidityType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_laneassit_sensitivityType;
  static const Ipm_laneassit_sensitivityType IPM_LANEASSIT_SENSITIVITY_HIGHSENSITIVITY =
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_IPM_LANEASSIT_SENSITIVITY_HIGHSENSITIVITY;
  static const Ipm_laneassit_sensitivityType IPM_LANEASSIT_SENSITIVITY_LOWSENSITIVITY =
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_IPM_LANEASSIT_SENSITIVITY_LOWSENSITIVITY;
  static inline bool Ipm_laneassit_sensitivityType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_sensitivityType_IsValid(value);
  }
  static const Ipm_laneassit_sensitivityType Ipm_laneassit_sensitivityType_MIN =
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_MIN;
  static const Ipm_laneassit_sensitivityType Ipm_laneassit_sensitivityType_MAX =
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_MAX;
  static const int Ipm_laneassit_sensitivityType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_sensitivityType_Ipm_laneassit_sensitivityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_sensitivityType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_sensitivityType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_sensitivityType_Name(Ipm_laneassit_sensitivityType value) {
    return Ipm_0x245_245_Ipm_laneassit_sensitivityType_Name(value);
  }
  static inline bool Ipm_laneassit_sensitivityType_Parse(const ::std::string& name,
      Ipm_laneassit_sensitivityType* value) {
    return Ipm_0x245_245_Ipm_laneassit_sensitivityType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_laneassit_warningaudioType;
  static const Ipm_laneassit_warningaudioType IPM_LANEASSIT_WARNINGAUDIO_INACTIVE =
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_IPM_LANEASSIT_WARNINGAUDIO_INACTIVE;
  static const Ipm_laneassit_warningaudioType IPM_LANEASSIT_WARNINGAUDIO_ACTIVE =
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_IPM_LANEASSIT_WARNINGAUDIO_ACTIVE;
  static inline bool Ipm_laneassit_warningaudioType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_warningaudioType_IsValid(value);
  }
  static const Ipm_laneassit_warningaudioType Ipm_laneassit_warningaudioType_MIN =
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_MIN;
  static const Ipm_laneassit_warningaudioType Ipm_laneassit_warningaudioType_MAX =
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_MAX;
  static const int Ipm_laneassit_warningaudioType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_warningaudioType_Ipm_laneassit_warningaudioType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_warningaudioType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_warningaudioType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_warningaudioType_Name(Ipm_laneassit_warningaudioType value) {
    return Ipm_0x245_245_Ipm_laneassit_warningaudioType_Name(value);
  }
  static inline bool Ipm_laneassit_warningaudioType_Parse(const ::std::string& name,
      Ipm_laneassit_warningaudioType* value) {
    return Ipm_0x245_245_Ipm_laneassit_warningaudioType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_laneassit_leftvisualizationType;
  static const Ipm_laneassit_leftvisualizationType IPM_LANEASSIT_LEFTVISUALIZATION_NO_DISPLAY =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_NO_DISPLAY;
  static const Ipm_laneassit_leftvisualizationType IPM_LANEASSIT_LEFTVISUALIZATION_LINE_TRACKING =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_LINE_TRACKING;
  static const Ipm_laneassit_leftvisualizationType IPM_LANEASSIT_LEFTVISUALIZATION_INTERVENTION =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_INTERVENTION;
  static const Ipm_laneassit_leftvisualizationType IPM_LANEASSIT_LEFTVISUALIZATION_WARNING =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IPM_LANEASSIT_LEFTVISUALIZATION_WARNING;
  static inline bool Ipm_laneassit_leftvisualizationType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IsValid(value);
  }
  static const Ipm_laneassit_leftvisualizationType Ipm_laneassit_leftvisualizationType_MIN =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_MIN;
  static const Ipm_laneassit_leftvisualizationType Ipm_laneassit_leftvisualizationType_MAX =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_MAX;
  static const int Ipm_laneassit_leftvisualizationType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Ipm_laneassit_leftvisualizationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_leftvisualizationType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_leftvisualizationType_Name(Ipm_laneassit_leftvisualizationType value) {
    return Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Name(value);
  }
  static inline bool Ipm_laneassit_leftvisualizationType_Parse(const ::std::string& name,
      Ipm_laneassit_leftvisualizationType* value) {
    return Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_laneassit_rightvisualizationType;
  static const Ipm_laneassit_rightvisualizationType IPM_LANEASSIT_RIGHTVISUALIZATION_NO_DISPLAY =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_NO_DISPLAY;
  static const Ipm_laneassit_rightvisualizationType IPM_LANEASSIT_RIGHTVISUALIZATION_LINE_TRACKING =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_LINE_TRACKING;
  static const Ipm_laneassit_rightvisualizationType IPM_LANEASSIT_RIGHTVISUALIZATION_INTERVENTION =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_INTERVENTION;
  static const Ipm_laneassit_rightvisualizationType IPM_LANEASSIT_RIGHTVISUALIZATION_WARNING =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IPM_LANEASSIT_RIGHTVISUALIZATION_WARNING;
  static inline bool Ipm_laneassit_rightvisualizationType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IsValid(value);
  }
  static const Ipm_laneassit_rightvisualizationType Ipm_laneassit_rightvisualizationType_MIN =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_MIN;
  static const Ipm_laneassit_rightvisualizationType Ipm_laneassit_rightvisualizationType_MAX =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_MAX;
  static const int Ipm_laneassit_rightvisualizationType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Ipm_laneassit_rightvisualizationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_rightvisualizationType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_rightvisualizationType_Name(Ipm_laneassit_rightvisualizationType value) {
    return Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Name(value);
  }
  static inline bool Ipm_laneassit_rightvisualizationType_Parse(const ::std::string& name,
      Ipm_laneassit_rightvisualizationType* value) {
    return Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_slaspdlimitunitsType;
  static const Ipm_slaspdlimitunitsType IPM_SLASPDLIMITUNITS_UNKNOWN =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_UNKNOWN;
  static const Ipm_slaspdlimitunitsType IPM_SLASPDLIMITUNITS_KMH =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_KMH;
  static const Ipm_slaspdlimitunitsType IPM_SLASPDLIMITUNITS_MPH =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_MPH;
  static const Ipm_slaspdlimitunitsType IPM_SLASPDLIMITUNITS_RESERVED =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_IPM_SLASPDLIMITUNITS_RESERVED;
  static inline bool Ipm_slaspdlimitunitsType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_slaspdlimitunitsType_IsValid(value);
  }
  static const Ipm_slaspdlimitunitsType Ipm_slaspdlimitunitsType_MIN =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_MIN;
  static const Ipm_slaspdlimitunitsType Ipm_slaspdlimitunitsType_MAX =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_MAX;
  static const int Ipm_slaspdlimitunitsType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_slaspdlimitunitsType_Ipm_slaspdlimitunitsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_slaspdlimitunitsType_descriptor() {
    return Ipm_0x245_245_Ipm_slaspdlimitunitsType_descriptor();
  }
  static inline const ::std::string& Ipm_slaspdlimitunitsType_Name(Ipm_slaspdlimitunitsType value) {
    return Ipm_0x245_245_Ipm_slaspdlimitunitsType_Name(value);
  }
  static inline bool Ipm_slaspdlimitunitsType_Parse(const ::std::string& name,
      Ipm_slaspdlimitunitsType* value) {
    return Ipm_0x245_245_Ipm_slaspdlimitunitsType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_slastateType Ipm_slastateType;
  static const Ipm_slastateType IPM_SLASTATE_OFF =
    Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_OFF;
  static const Ipm_slastateType IPM_SLASTATE_FUSION_MODE =
    Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_FUSION_MODE;
  static const Ipm_slastateType IPM_SLASTATE_VISION_MODE =
    Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_VISION_MODE;
  static const Ipm_slastateType IPM_SLASTATE_NAVIGATION_ONLY_MODE =
    Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_NAVIGATION_ONLY_MODE;
  static const Ipm_slastateType IPM_SLASTATE_DEFECT =
    Ipm_0x245_245_Ipm_slastateType_IPM_SLASTATE_DEFECT;
  static inline bool Ipm_slastateType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_slastateType_IsValid(value);
  }
  static const Ipm_slastateType Ipm_slastateType_MIN =
    Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_MIN;
  static const Ipm_slastateType Ipm_slastateType_MAX =
    Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_MAX;
  static const int Ipm_slastateType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_slastateType_Ipm_slastateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_slastateType_descriptor() {
    return Ipm_0x245_245_Ipm_slastateType_descriptor();
  }
  static inline const ::std::string& Ipm_slastateType_Name(Ipm_slastateType value) {
    return Ipm_0x245_245_Ipm_slastateType_Name(value);
  }
  static inline bool Ipm_slastateType_Parse(const ::std::string& name,
      Ipm_slastateType* value) {
    return Ipm_0x245_245_Ipm_slastateType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_statusType Ipm_laneassit_statusType;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_OFF =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_OFF;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_STANDBY =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_STANDBY;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_LDW_ACTIVE_LKA_STANDBY =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_LDW_ACTIVE_LKA_STANDBY;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_LDW_STANDBY_LKA_ACTIVE =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_LDW_STANDBY_LKA_ACTIVE;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_ACTIVE =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_ACTIVE;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_FAULT =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_FAULT;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_CAMERA_BLOCKED =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_CAMERA_BLOCKED;
  static const Ipm_laneassit_statusType IPM_LANEASSIT_STATUS_CAMERA_UNCALIBRATED =
    Ipm_0x245_245_Ipm_laneassit_statusType_IPM_LANEASSIT_STATUS_CAMERA_UNCALIBRATED;
  static inline bool Ipm_laneassit_statusType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_statusType_IsValid(value);
  }
  static const Ipm_laneassit_statusType Ipm_laneassit_statusType_MIN =
    Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_MIN;
  static const Ipm_laneassit_statusType Ipm_laneassit_statusType_MAX =
    Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_MAX;
  static const int Ipm_laneassit_statusType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_statusType_Ipm_laneassit_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_statusType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_statusType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_statusType_Name(Ipm_laneassit_statusType value) {
    return Ipm_0x245_245_Ipm_laneassit_statusType_Name(value);
  }
  static inline bool Ipm_laneassit_statusType_Parse(const ::std::string& name,
      Ipm_laneassit_statusType* value) {
    return Ipm_0x245_245_Ipm_laneassit_statusType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_slaspdlimitType Ipm_slaspdlimitType;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_NO_DISPLAY =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_NO_DISPLAY;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_CANCELLED =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_CANCELLED;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_5 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_5;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_10 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_10;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_15 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_15;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_20 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_20;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_25 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_25;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_30 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_30;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_35 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_35;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_40 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_40;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_45 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_45;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_50 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_50;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_55 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_55;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_60 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_60;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_65 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_65;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_70 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_70;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_75 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_75;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_80 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_80;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_85 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_85;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_90 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_90;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_95 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_95;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_100 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_100;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_105 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_105;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_110 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_110;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_115 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_115;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_120 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_120;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_125 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_125;
  static const Ipm_slaspdlimitType IPM_SLASPDLIMIT_SPL_130 =
    Ipm_0x245_245_Ipm_slaspdlimitType_IPM_SLASPDLIMIT_SPL_130;
  static inline bool Ipm_slaspdlimitType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_slaspdlimitType_IsValid(value);
  }
  static const Ipm_slaspdlimitType Ipm_slaspdlimitType_MIN =
    Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_MIN;
  static const Ipm_slaspdlimitType Ipm_slaspdlimitType_MAX =
    Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_MAX;
  static const int Ipm_slaspdlimitType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_slaspdlimitType_Ipm_slaspdlimitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_slaspdlimitType_descriptor() {
    return Ipm_0x245_245_Ipm_slaspdlimitType_descriptor();
  }
  static inline const ::std::string& Ipm_slaspdlimitType_Name(Ipm_slaspdlimitType value) {
    return Ipm_0x245_245_Ipm_slaspdlimitType_Name(value);
  }
  static inline bool Ipm_slaspdlimitType_Parse(const ::std::string& name,
      Ipm_slaspdlimitType* value) {
    return Ipm_0x245_245_Ipm_slaspdlimitType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_hma_statusType Ipm_hma_statusType;
  static const Ipm_hma_statusType IPM_HMA_STATUS_OFF =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_OFF;
  static const Ipm_hma_statusType IPM_HMA_STATUS_PASSIVE =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_PASSIVE;
  static const Ipm_hma_statusType IPM_HMA_STATUS_STANDBY =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_STANDBY;
  static const Ipm_hma_statusType IPM_HMA_STATUS_ACTIVE =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_ACTIVE;
  static const Ipm_hma_statusType IPM_HMA_STATUS_FAULT =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_FAULT;
  static const Ipm_hma_statusType IPM_HMA_STATUS_CAMERA_BLOCKED =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_CAMERA_BLOCKED;
  static const Ipm_hma_statusType IPM_HMA_STATUS_RESERVED =
    Ipm_0x245_245_Ipm_hma_statusType_IPM_HMA_STATUS_RESERVED;
  static inline bool Ipm_hma_statusType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_hma_statusType_IsValid(value);
  }
  static const Ipm_hma_statusType Ipm_hma_statusType_MIN =
    Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_MIN;
  static const Ipm_hma_statusType Ipm_hma_statusType_MAX =
    Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_MAX;
  static const int Ipm_hma_statusType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_hma_statusType_Ipm_hma_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_hma_statusType_descriptor() {
    return Ipm_0x245_245_Ipm_hma_statusType_descriptor();
  }
  static inline const ::std::string& Ipm_hma_statusType_Name(Ipm_hma_statusType value) {
    return Ipm_0x245_245_Ipm_hma_statusType_Name(value);
  }
  static inline bool Ipm_hma_statusType_Parse(const ::std::string& name,
      Ipm_hma_statusType* value) {
    return Ipm_0x245_245_Ipm_hma_statusType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_tjaica_statusType Ipm_tjaica_statusType;
  static const Ipm_tjaica_statusType IPM_TJAICA_STATUS_INACTIVE =
    Ipm_0x245_245_Ipm_tjaica_statusType_IPM_TJAICA_STATUS_INACTIVE;
  static const Ipm_tjaica_statusType IPM_TJAICA_STATUS_ACTIVE =
    Ipm_0x245_245_Ipm_tjaica_statusType_IPM_TJAICA_STATUS_ACTIVE;
  static inline bool Ipm_tjaica_statusType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_tjaica_statusType_IsValid(value);
  }
  static const Ipm_tjaica_statusType Ipm_tjaica_statusType_MIN =
    Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_MIN;
  static const Ipm_tjaica_statusType Ipm_tjaica_statusType_MAX =
    Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_MAX;
  static const int Ipm_tjaica_statusType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_tjaica_statusType_Ipm_tjaica_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_tjaica_statusType_descriptor() {
    return Ipm_0x245_245_Ipm_tjaica_statusType_descriptor();
  }
  static inline const ::std::string& Ipm_tjaica_statusType_Name(Ipm_tjaica_statusType value) {
    return Ipm_0x245_245_Ipm_tjaica_statusType_Name(value);
  }
  static inline bool Ipm_tjaica_statusType_Parse(const ::std::string& name,
      Ipm_tjaica_statusType* value) {
    return Ipm_0x245_245_Ipm_tjaica_statusType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_ldwwarningtypeType;
  static const Ipm_ldwwarningtypeType IPM_LDWWARNINGTYPE_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE;
  static const Ipm_ldwwarningtypeType IPM_LDWWARNINGTYPE_AUDIBLE_WARNING =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_AUDIBLE_WARNING;
  static const Ipm_ldwwarningtypeType IPM_LDWWARNINGTYPE_WHEELSTEER_SHAKE =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_WHEELSTEER_SHAKE;
  static const Ipm_ldwwarningtypeType IPM_LDWWARNINGTYPE_RESERVED =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_IPM_LDWWARNINGTYPE_RESERVED;
  static inline bool Ipm_ldwwarningtypeType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_ldwwarningtypeType_IsValid(value);
  }
  static const Ipm_ldwwarningtypeType Ipm_ldwwarningtypeType_MIN =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_MIN;
  static const Ipm_ldwwarningtypeType Ipm_ldwwarningtypeType_MAX =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_MAX;
  static const int Ipm_ldwwarningtypeType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_ldwwarningtypeType_Ipm_ldwwarningtypeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_ldwwarningtypeType_descriptor() {
    return Ipm_0x245_245_Ipm_ldwwarningtypeType_descriptor();
  }
  static inline const ::std::string& Ipm_ldwwarningtypeType_Name(Ipm_ldwwarningtypeType value) {
    return Ipm_0x245_245_Ipm_ldwwarningtypeType_Name(value);
  }
  static inline bool Ipm_ldwwarningtypeType_Parse(const ::std::string& name,
      Ipm_ldwwarningtypeType* value) {
    return Ipm_0x245_245_Ipm_ldwwarningtypeType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_laneassit_handsonreqType;
  static const Ipm_laneassit_handsonreqType IPM_LANEASSIT_HANDSONREQ_INACTIVE =
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_IPM_LANEASSIT_HANDSONREQ_INACTIVE;
  static const Ipm_laneassit_handsonreqType IPM_LANEASSIT_HANDSONREQ_ACTIVE =
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_IPM_LANEASSIT_HANDSONREQ_ACTIVE;
  static inline bool Ipm_laneassit_handsonreqType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_handsonreqType_IsValid(value);
  }
  static const Ipm_laneassit_handsonreqType Ipm_laneassit_handsonreqType_MIN =
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_MIN;
  static const Ipm_laneassit_handsonreqType Ipm_laneassit_handsonreqType_MAX =
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_MAX;
  static const int Ipm_laneassit_handsonreqType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_handsonreqType_Ipm_laneassit_handsonreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_handsonreqType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_handsonreqType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_handsonreqType_Name(Ipm_laneassit_handsonreqType value) {
    return Ipm_0x245_245_Ipm_laneassit_handsonreqType_Name(value);
  }
  static inline bool Ipm_laneassit_handsonreqType_Parse(const ::std::string& name,
      Ipm_laneassit_handsonreqType* value) {
    return Ipm_0x245_245_Ipm_laneassit_handsonreqType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_hma_highbeamreqType;
  static const Ipm_hma_highbeamreqType IPM_HMA_HIGHBEAMREQ_NO_REQUEST =
    Ipm_0x245_245_Ipm_hma_highbeamreqType_IPM_HMA_HIGHBEAMREQ_NO_REQUEST;
  static const Ipm_hma_highbeamreqType IPM_HMA_HIGHBEAMREQ_HIGH_BEAM_REQUEST =
    Ipm_0x245_245_Ipm_hma_highbeamreqType_IPM_HMA_HIGHBEAMREQ_HIGH_BEAM_REQUEST;
  static inline bool Ipm_hma_highbeamreqType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_hma_highbeamreqType_IsValid(value);
  }
  static const Ipm_hma_highbeamreqType Ipm_hma_highbeamreqType_MIN =
    Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_MIN;
  static const Ipm_hma_highbeamreqType Ipm_hma_highbeamreqType_MAX =
    Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_MAX;
  static const int Ipm_hma_highbeamreqType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_hma_highbeamreqType_Ipm_hma_highbeamreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_hma_highbeamreqType_descriptor() {
    return Ipm_0x245_245_Ipm_hma_highbeamreqType_descriptor();
  }
  static inline const ::std::string& Ipm_hma_highbeamreqType_Name(Ipm_hma_highbeamreqType value) {
    return Ipm_0x245_245_Ipm_hma_highbeamreqType_Name(value);
  }
  static inline bool Ipm_hma_highbeamreqType_Parse(const ::std::string& name,
      Ipm_hma_highbeamreqType* value) {
    return Ipm_0x245_245_Ipm_hma_highbeamreqType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassittypeType Ipm_laneassittypeType;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_UNAVAILABLE =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_UNAVAILABLE;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_LDW =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_LDW;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_LKA =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_LKA;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_LDW_LKA =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_LDW_LKA;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_TJA_ICA =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_TJA_ICA;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_TJA_ICA_LDW =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_TJA_ICA_LDW;
  static const Ipm_laneassittypeType IPM_LANEASSITTYPE_RESERVED =
    Ipm_0x245_245_Ipm_laneassittypeType_IPM_LANEASSITTYPE_RESERVED;
  static inline bool Ipm_laneassittypeType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassittypeType_IsValid(value);
  }
  static const Ipm_laneassittypeType Ipm_laneassittypeType_MIN =
    Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_MIN;
  static const Ipm_laneassittypeType Ipm_laneassittypeType_MAX =
    Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_MAX;
  static const int Ipm_laneassittypeType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassittypeType_Ipm_laneassittypeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassittypeType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassittypeType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassittypeType_Name(Ipm_laneassittypeType value) {
    return Ipm_0x245_245_Ipm_laneassittypeType_Name(value);
  }
  static inline bool Ipm_laneassittypeType_Parse(const ::std::string& name,
      Ipm_laneassittypeType* value) {
    return Ipm_0x245_245_Ipm_laneassittypeType_Parse(name, value);
  }

  typedef Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_laneassit_warningvibrationType;
  static const Ipm_laneassit_warningvibrationType IPM_LANEASSIT_WARNINGVIBRATION_INACTIVE =
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IPM_LANEASSIT_WARNINGVIBRATION_INACTIVE;
  static const Ipm_laneassit_warningvibrationType IPM_LANEASSIT_WARNINGVIBRATION_ACTIVE =
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IPM_LANEASSIT_WARNINGVIBRATION_ACTIVE;
  static inline bool Ipm_laneassit_warningvibrationType_IsValid(int value) {
    return Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IsValid(value);
  }
  static const Ipm_laneassit_warningvibrationType Ipm_laneassit_warningvibrationType_MIN =
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_MIN;
  static const Ipm_laneassit_warningvibrationType Ipm_laneassit_warningvibrationType_MAX =
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_MAX;
  static const int Ipm_laneassit_warningvibrationType_ARRAYSIZE =
    Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Ipm_laneassit_warningvibrationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ipm_laneassit_warningvibrationType_descriptor() {
    return Ipm_0x245_245_Ipm_laneassit_warningvibrationType_descriptor();
  }
  static inline const ::std::string& Ipm_laneassit_warningvibrationType_Name(Ipm_laneassit_warningvibrationType value) {
    return Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Name(value);
  }
  static inline bool Ipm_laneassit_warningvibrationType_Parse(const ::std::string& name,
      Ipm_laneassit_warningvibrationType* value) {
    return Ipm_0x245_245_Ipm_laneassit_warningvibrationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
  bool has_ipm_laneassit_torquereqstatus() const;
  void clear_ipm_laneassit_torquereqstatus();
  static const int kIpmLaneassitTorquereqstatusFieldNumber = 1;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus() const;
  void set_ipm_laneassit_torquereqstatus(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
  bool has_ipm_laneassit_torquevalidity() const;
  void clear_ipm_laneassit_torquevalidity();
  static const int kIpmLaneassitTorquevalidityFieldNumber = 2;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity() const;
  void set_ipm_laneassit_torquevalidity(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
  bool has_ipm_laneassit_sensitivity() const;
  void clear_ipm_laneassit_sensitivity();
  static const int kIpmLaneassitSensitivityFieldNumber = 3;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity() const;
  void set_ipm_laneassit_sensitivity(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
  bool has_ipm_laneassit_warningaudio() const;
  void clear_ipm_laneassit_warningaudio();
  static const int kIpmLaneassitWarningaudioFieldNumber = 4;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio() const;
  void set_ipm_laneassit_warningaudio(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
  bool has_ipm_laneassit_leftvisualization() const;
  void clear_ipm_laneassit_leftvisualization();
  static const int kIpmLaneassitLeftvisualizationFieldNumber = 5;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization() const;
  void set_ipm_laneassit_leftvisualization(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
  bool has_ipm_laneassit_rightvisualization() const;
  void clear_ipm_laneassit_rightvisualization();
  static const int kIpmLaneassitRightvisualizationFieldNumber = 6;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization() const;
  void set_ipm_laneassit_rightvisualization(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
  bool has_ipm_slaspdlimitunits() const;
  void clear_ipm_slaspdlimitunits();
  static const int kIpmSlaspdlimitunitsFieldNumber = 7;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType ipm_slaspdlimitunits() const;
  void set_ipm_slaspdlimitunits(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
  bool has_ipm_slastate() const;
  void clear_ipm_slastate();
  static const int kIpmSlastateFieldNumber = 8;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType ipm_slastate() const;
  void set_ipm_slastate(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
  bool has_ipm_laneassit_status() const;
  void clear_ipm_laneassit_status();
  static const int kIpmLaneassitStatusFieldNumber = 9;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType ipm_laneassit_status() const;
  void set_ipm_laneassit_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
  bool has_ipm_slaspdlimit() const;
  void clear_ipm_slaspdlimit();
  static const int kIpmSlaspdlimitFieldNumber = 10;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType ipm_slaspdlimit() const;
  void set_ipm_slaspdlimit(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
  bool has_ipm_hma_status() const;
  void clear_ipm_hma_status();
  static const int kIpmHmaStatusFieldNumber = 11;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType ipm_hma_status() const;
  void set_ipm_hma_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
  bool has_ipm_tjaica_status() const;
  void clear_ipm_tjaica_status();
  static const int kIpmTjaicaStatusFieldNumber = 12;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType ipm_tjaica_status() const;
  void set_ipm_tjaica_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType value);

  // optional int32 rolling_counter_0x245 = 13;
  bool has_rolling_counter_0x245() const;
  void clear_rolling_counter_0x245();
  static const int kRollingCounter0X245FieldNumber = 13;
  ::google::protobuf::int32 rolling_counter_0x245() const;
  void set_rolling_counter_0x245(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
  bool has_ipm_ldwwarningtype() const;
  void clear_ipm_ldwwarningtype();
  static const int kIpmLdwwarningtypeFieldNumber = 14;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType ipm_ldwwarningtype() const;
  void set_ipm_ldwwarningtype(::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
  bool has_ipm_laneassit_handsonreq() const;
  void clear_ipm_laneassit_handsonreq();
  static const int kIpmLaneassitHandsonreqFieldNumber = 15;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq() const;
  void set_ipm_laneassit_handsonreq(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
  bool has_ipm_hma_highbeamreq() const;
  void clear_ipm_hma_highbeamreq();
  static const int kIpmHmaHighbeamreqFieldNumber = 16;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType ipm_hma_highbeamreq() const;
  void set_ipm_hma_highbeamreq(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType value);

  // optional double ipm_laneassit_torquereq = 18;
  bool has_ipm_laneassit_torquereq() const;
  void clear_ipm_laneassit_torquereq();
  static const int kIpmLaneassitTorquereqFieldNumber = 18;
  double ipm_laneassit_torquereq() const;
  void set_ipm_laneassit_torquereq(double value);

  // optional int32 checksum_0x245 = 17;
  bool has_checksum_0x245() const;
  void clear_checksum_0x245();
  static const int kChecksum0X245FieldNumber = 17;
  ::google::protobuf::int32 checksum_0x245() const;
  void set_checksum_0x245(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
  bool has_ipm_laneassittype() const;
  void clear_ipm_laneassittype();
  static const int kIpmLaneassittypeFieldNumber = 19;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType ipm_laneassittype() const;
  void set_ipm_laneassittype(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType value);

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
  bool has_ipm_laneassit_warningvibration() const;
  void clear_ipm_laneassit_warningvibration();
  static const int kIpmLaneassitWarningvibrationFieldNumber = 20;
  ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration() const;
  void set_ipm_laneassit_warningvibration(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ipm_0x245_245)
 private:
  void set_has_ipm_laneassit_torquereqstatus();
  void clear_has_ipm_laneassit_torquereqstatus();
  void set_has_ipm_laneassit_torquevalidity();
  void clear_has_ipm_laneassit_torquevalidity();
  void set_has_ipm_laneassit_sensitivity();
  void clear_has_ipm_laneassit_sensitivity();
  void set_has_ipm_laneassit_warningaudio();
  void clear_has_ipm_laneassit_warningaudio();
  void set_has_ipm_laneassit_leftvisualization();
  void clear_has_ipm_laneassit_leftvisualization();
  void set_has_ipm_laneassit_rightvisualization();
  void clear_has_ipm_laneassit_rightvisualization();
  void set_has_ipm_slaspdlimitunits();
  void clear_has_ipm_slaspdlimitunits();
  void set_has_ipm_slastate();
  void clear_has_ipm_slastate();
  void set_has_ipm_laneassit_status();
  void clear_has_ipm_laneassit_status();
  void set_has_ipm_slaspdlimit();
  void clear_has_ipm_slaspdlimit();
  void set_has_ipm_hma_status();
  void clear_has_ipm_hma_status();
  void set_has_ipm_tjaica_status();
  void clear_has_ipm_tjaica_status();
  void set_has_rolling_counter_0x245();
  void clear_has_rolling_counter_0x245();
  void set_has_ipm_ldwwarningtype();
  void clear_has_ipm_ldwwarningtype();
  void set_has_ipm_laneassit_handsonreq();
  void clear_has_ipm_laneassit_handsonreq();
  void set_has_ipm_hma_highbeamreq();
  void clear_has_ipm_hma_highbeamreq();
  void set_has_checksum_0x245();
  void clear_has_checksum_0x245();
  void set_has_ipm_laneassit_torquereq();
  void clear_has_ipm_laneassit_torquereq();
  void set_has_ipm_laneassittype();
  void clear_has_ipm_laneassittype();
  void set_has_ipm_laneassit_warningvibration();
  void clear_has_ipm_laneassit_warningvibration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int ipm_laneassit_torquereqstatus_;
  int ipm_laneassit_torquevalidity_;
  int ipm_laneassit_sensitivity_;
  int ipm_laneassit_warningaudio_;
  int ipm_laneassit_leftvisualization_;
  int ipm_laneassit_rightvisualization_;
  int ipm_slaspdlimitunits_;
  int ipm_slastate_;
  int ipm_laneassit_status_;
  int ipm_slaspdlimit_;
  int ipm_hma_status_;
  int ipm_tjaica_status_;
  ::google::protobuf::int32 rolling_counter_0x245_;
  int ipm_ldwwarningtype_;
  int ipm_laneassit_handsonreq_;
  int ipm_hma_highbeamreq_;
  double ipm_laneassit_torquereq_;
  ::google::protobuf::int32 checksum_0x245_;
  int ipm_laneassittype_;
  int ipm_laneassit_warningvibration_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ems_tqwhl_0x111_111 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111) */ {
 public:
  Gw_ems_tqwhl_0x111_111();
  virtual ~Gw_ems_tqwhl_0x111_111();

  Gw_ems_tqwhl_0x111_111(const Gw_ems_tqwhl_0x111_111& from);

  inline Gw_ems_tqwhl_0x111_111& operator=(const Gw_ems_tqwhl_0x111_111& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ems_tqwhl_0x111_111& default_instance();

  static inline const Gw_ems_tqwhl_0x111_111* internal_default_instance() {
    return reinterpret_cast<const Gw_ems_tqwhl_0x111_111*>(
               &_Gw_ems_tqwhl_0x111_111_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Gw_ems_tqwhl_0x111_111* other);

  // implements Message ----------------------------------------------

  inline Gw_ems_tqwhl_0x111_111* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ems_tqwhl_0x111_111* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ems_tqwhl_0x111_111& from);
  void MergeFrom(const Gw_ems_tqwhl_0x111_111& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ems_tqwhl_0x111_111* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Ems_indicatedaccmesgerrorType;
  static const Ems_indicatedaccmesgerrorType EMS_INDICATEDACCMESGERROR_NOEERROR =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_NOEERROR;
  static const Ems_indicatedaccmesgerrorType EMS_INDICATEDACCMESGERROR_REVERSIBLE_ERROR =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_REVERSIBLE_ERROR;
  static const Ems_indicatedaccmesgerrorType EMS_INDICATEDACCMESGERROR_IRREVERSIBLE_ERROR =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_IRREVERSIBLE_ERROR;
  static const Ems_indicatedaccmesgerrorType EMS_INDICATEDACCMESGERROR_NOTDEFINED =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_EMS_INDICATEDACCMESGERROR_NOTDEFINED;
  static inline bool Ems_indicatedaccmesgerrorType_IsValid(int value) {
    return Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_IsValid(value);
  }
  static const Ems_indicatedaccmesgerrorType Ems_indicatedaccmesgerrorType_MIN =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_MIN;
  static const Ems_indicatedaccmesgerrorType Ems_indicatedaccmesgerrorType_MAX =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_MAX;
  static const int Ems_indicatedaccmesgerrorType_ARRAYSIZE =
    Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Ems_indicatedaccmesgerrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_indicatedaccmesgerrorType_descriptor() {
    return Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_descriptor();
  }
  static inline const ::std::string& Ems_indicatedaccmesgerrorType_Name(Ems_indicatedaccmesgerrorType value) {
    return Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Name(value);
  }
  static inline bool Ems_indicatedaccmesgerrorType_Parse(const ::std::string& name,
      Ems_indicatedaccmesgerrorType* value) {
    return Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_Parse(name, value);
  }

  typedef Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Ems_indicateddriveroverrideType;
  static const Ems_indicateddriveroverrideType EMS_INDICATEDDRIVEROVERRIDE_NOOVERRIDE =
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_EMS_INDICATEDDRIVEROVERRIDE_NOOVERRIDE;
  static const Ems_indicateddriveroverrideType EMS_INDICATEDDRIVEROVERRIDE_DRIVEROVERRIDE =
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_EMS_INDICATEDDRIVEROVERRIDE_DRIVEROVERRIDE;
  static inline bool Ems_indicateddriveroverrideType_IsValid(int value) {
    return Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_IsValid(value);
  }
  static const Ems_indicateddriveroverrideType Ems_indicateddriveroverrideType_MIN =
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_MIN;
  static const Ems_indicateddriveroverrideType Ems_indicateddriveroverrideType_MAX =
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_MAX;
  static const int Ems_indicateddriveroverrideType_ARRAYSIZE =
    Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Ems_indicateddriveroverrideType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_indicateddriveroverrideType_descriptor() {
    return Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_descriptor();
  }
  static inline const ::std::string& Ems_indicateddriveroverrideType_Name(Ems_indicateddriveroverrideType value) {
    return Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Name(value);
  }
  static inline bool Ems_indicateddriveroverrideType_Parse(const ::std::string& name,
      Ems_indicateddriveroverrideType* value) {
    return Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ems_indicatedrealengtorqwhl = 1;
  bool has_ems_indicatedrealengtorqwhl() const;
  void clear_ems_indicatedrealengtorqwhl();
  static const int kEmsIndicatedrealengtorqwhlFieldNumber = 1;
  ::google::protobuf::int32 ems_indicatedrealengtorqwhl() const;
  void set_ems_indicatedrealengtorqwhl(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
  bool has_ems_indicatedaccmesgerror() const;
  void clear_ems_indicatedaccmesgerror();
  static const int kEmsIndicatedaccmesgerrorFieldNumber = 2;
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror() const;
  void set_ems_indicatedaccmesgerror(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType value);

  // optional double ems_indicateddriverreqtorq = 4;
  bool has_ems_indicateddriverreqtorq() const;
  void clear_ems_indicateddriverreqtorq();
  static const int kEmsIndicateddriverreqtorqFieldNumber = 4;
  double ems_indicateddriverreqtorq() const;
  void set_ems_indicateddriverreqtorq(double value);

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
  bool has_ems_indicateddriveroverride() const;
  void clear_ems_indicateddriveroverride();
  static const int kEmsIndicateddriveroverrideFieldNumber = 3;
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType ems_indicateddriveroverride() const;
  void set_ems_indicateddriveroverride(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType value);

  // optional int32 dcm_ems_rollingcounter_0x111 = 5;
  bool has_dcm_ems_rollingcounter_0x111() const;
  void clear_dcm_ems_rollingcounter_0x111();
  static const int kDcmEmsRollingcounter0X111FieldNumber = 5;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x111() const;
  void set_dcm_ems_rollingcounter_0x111(::google::protobuf::int32 value);

  // optional int32 dcm_ems_checksum_0x111 = 6;
  bool has_dcm_ems_checksum_0x111() const;
  void clear_dcm_ems_checksum_0x111();
  static const int kDcmEmsChecksum0X111FieldNumber = 6;
  ::google::protobuf::int32 dcm_ems_checksum_0x111() const;
  void set_dcm_ems_checksum_0x111(::google::protobuf::int32 value);

  // optional int32 ems_indicateddriverreqtorqwhl = 7;
  bool has_ems_indicateddriverreqtorqwhl() const;
  void clear_ems_indicateddriverreqtorqwhl();
  static const int kEmsIndicateddriverreqtorqwhlFieldNumber = 7;
  ::google::protobuf::int32 ems_indicateddriverreqtorqwhl() const;
  void set_ems_indicateddriverreqtorqwhl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
 private:
  void set_has_ems_indicatedrealengtorqwhl();
  void clear_has_ems_indicatedrealengtorqwhl();
  void set_has_ems_indicatedaccmesgerror();
  void clear_has_ems_indicatedaccmesgerror();
  void set_has_ems_indicateddriveroverride();
  void clear_has_ems_indicateddriveroverride();
  void set_has_ems_indicateddriverreqtorq();
  void clear_has_ems_indicateddriverreqtorq();
  void set_has_dcm_ems_rollingcounter_0x111();
  void clear_has_dcm_ems_rollingcounter_0x111();
  void set_has_dcm_ems_checksum_0x111();
  void clear_has_dcm_ems_checksum_0x111();
  void set_has_ems_indicateddriverreqtorqwhl();
  void clear_has_ems_indicateddriverreqtorqwhl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ems_indicatedrealengtorqwhl_;
  int ems_indicatedaccmesgerror_;
  double ems_indicateddriverreqtorq_;
  int ems_indicateddriveroverride_;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x111_;
  ::google::protobuf::int32 dcm_ems_checksum_0x111_;
  ::google::protobuf::int32 ems_indicateddriverreqtorqwhl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_tcu_gearinfo_0x123_123 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123) */ {
 public:
  Gw_tcu_gearinfo_0x123_123();
  virtual ~Gw_tcu_gearinfo_0x123_123();

  Gw_tcu_gearinfo_0x123_123(const Gw_tcu_gearinfo_0x123_123& from);

  inline Gw_tcu_gearinfo_0x123_123& operator=(const Gw_tcu_gearinfo_0x123_123& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_tcu_gearinfo_0x123_123& default_instance();

  static inline const Gw_tcu_gearinfo_0x123_123* internal_default_instance() {
    return reinterpret_cast<const Gw_tcu_gearinfo_0x123_123*>(
               &_Gw_tcu_gearinfo_0x123_123_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Gw_tcu_gearinfo_0x123_123* other);

  // implements Message ----------------------------------------------

  inline Gw_tcu_gearinfo_0x123_123* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_tcu_gearinfo_0x123_123* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_tcu_gearinfo_0x123_123& from);
  void MergeFrom(const Gw_tcu_gearinfo_0x123_123& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_tcu_gearinfo_0x123_123* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Tcu_displaygearType;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_CURRENT_GEAR_N =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_N;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_1 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_1;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_2 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_2;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_3 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_3;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_4 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_4;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_5 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_5;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_6 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_6;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_7 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_7;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_GEAR_8 =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_GEAR_8;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_CURRENT_GEAR_D =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_D;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_CURRENT_GEAR_L =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_L;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_CURRENT_GEAR_R =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_R;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_RESERVED;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_CURRENT_GEAR_P =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_CURRENT_GEAR_P;
  static const Tcu_displaygearType TCU_DISPLAYGEAR_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_TCU_DISPLAYGEAR_INVALID;
  static inline bool Tcu_displaygearType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_IsValid(value);
  }
  static const Tcu_displaygearType Tcu_displaygearType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_MIN;
  static const Tcu_displaygearType Tcu_displaygearType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_MAX;
  static const int Tcu_displaygearType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Tcu_displaygearType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_displaygearType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_descriptor();
  }
  static inline const ::std::string& Tcu_displaygearType_Name(Tcu_displaygearType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Name(value);
  }
  static inline bool Tcu_displaygearType_Parse(const ::std::string& name,
      Tcu_displaygearType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Tcu_gearselectorreqType;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_P =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_P;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_L_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_L_RESERVED;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_2_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_2_RESERVED;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_3_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_3_RESERVED;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_D =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_D;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_N =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_N;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_R =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_R;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_M =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_M;
  static const Tcu_gearselectorreqType TCU_GEARSELECTORREQ_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_TCU_GEARSELECTORREQ_INVALID;
  static inline bool Tcu_gearselectorreqType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_IsValid(value);
  }
  static const Tcu_gearselectorreqType Tcu_gearselectorreqType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_MIN;
  static const Tcu_gearselectorreqType Tcu_gearselectorreqType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_MAX;
  static const int Tcu_gearselectorreqType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Tcu_gearselectorreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_gearselectorreqType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_descriptor();
  }
  static inline const ::std::string& Tcu_gearselectorreqType_Name(Tcu_gearselectorreqType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Name(value);
  }
  static inline bool Tcu_gearselectorreqType_Parse(const ::std::string& name,
      Tcu_gearselectorreqType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Tcu_transpmotoparkreqinvalidType;
  static const Tcu_transpmotoparkreqinvalidType TCU_TRANSPMOTOPARKREQINVALID_VALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_TCU_TRANSPMOTOPARKREQINVALID_VALID;
  static const Tcu_transpmotoparkreqinvalidType TCU_TRANSPMOTOPARKREQINVALID_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_TCU_TRANSPMOTOPARKREQINVALID_INVALID;
  static inline bool Tcu_transpmotoparkreqinvalidType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_IsValid(value);
  }
  static const Tcu_transpmotoparkreqinvalidType Tcu_transpmotoparkreqinvalidType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_MIN;
  static const Tcu_transpmotoparkreqinvalidType Tcu_transpmotoparkreqinvalidType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_MAX;
  static const int Tcu_transpmotoparkreqinvalidType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Tcu_transpmotoparkreqinvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_transpmotoparkreqinvalidType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_descriptor();
  }
  static inline const ::std::string& Tcu_transpmotoparkreqinvalidType_Name(Tcu_transpmotoparkreqinvalidType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Name(value);
  }
  static inline bool Tcu_transpmotoparkreqinvalidType_Parse(const ::std::string& name,
      Tcu_transpmotoparkreqinvalidType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Tcu_gearshiftinprogressType;
  static const Tcu_gearshiftinprogressType TCU_GEARSHIFTINPROGRESS_NOGEARSHIFTINPROGRESS =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_TCU_GEARSHIFTINPROGRESS_NOGEARSHIFTINPROGRESS;
  static const Tcu_gearshiftinprogressType TCU_GEARSHIFTINPROGRESS_GEARSHIFTINPROGRESS =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_TCU_GEARSHIFTINPROGRESS_GEARSHIFTINPROGRESS;
  static inline bool Tcu_gearshiftinprogressType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_IsValid(value);
  }
  static const Tcu_gearshiftinprogressType Tcu_gearshiftinprogressType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_MIN;
  static const Tcu_gearshiftinprogressType Tcu_gearshiftinprogressType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_MAX;
  static const int Tcu_gearshiftinprogressType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Tcu_gearshiftinprogressType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_gearshiftinprogressType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_descriptor();
  }
  static inline const ::std::string& Tcu_gearshiftinprogressType_Name(Tcu_gearshiftinprogressType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Name(value);
  }
  static inline bool Tcu_gearshiftinprogressType_Parse(const ::std::string& name,
      Tcu_gearshiftinprogressType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Tcu_shiftleverpos_sbwmType;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_P =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_P;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_D =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_D;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_N =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_N;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_R =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_R;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_M =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_M;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_BLANK =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_BLANK;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_RESERVED;
  static const Tcu_shiftleverpos_sbwmType TCU_SHIFTLEVERPOS_SBWM_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_TCU_SHIFTLEVERPOS_SBWM_INVALID;
  static inline bool Tcu_shiftleverpos_sbwmType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_IsValid(value);
  }
  static const Tcu_shiftleverpos_sbwmType Tcu_shiftleverpos_sbwmType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_MIN;
  static const Tcu_shiftleverpos_sbwmType Tcu_shiftleverpos_sbwmType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_MAX;
  static const int Tcu_shiftleverpos_sbwmType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Tcu_shiftleverpos_sbwmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_shiftleverpos_sbwmType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_descriptor();
  }
  static inline const ::std::string& Tcu_shiftleverpos_sbwmType_Name(Tcu_shiftleverpos_sbwmType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Name(value);
  }
  static inline bool Tcu_shiftleverpos_sbwmType_Parse(const ::std::string& name,
      Tcu_shiftleverpos_sbwmType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Tcu_targetgearreqType;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_DRIVETRAINOPEN_GEARN =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_DRIVETRAINOPEN_GEARN;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_1STGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_1STGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_2NDGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_2NDGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_3RDGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_3RDGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_4THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_4THGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_5THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_5THGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_6THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_6THGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_7THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_7THGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_8THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_8THGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_REVERSEGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_REVERSEGEAR;
  static const Tcu_targetgearreqType TCU_TARGETGEARREQ_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_TCU_TARGETGEARREQ_INVALID;
  static inline bool Tcu_targetgearreqType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_IsValid(value);
  }
  static const Tcu_targetgearreqType Tcu_targetgearreqType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_MIN;
  static const Tcu_targetgearreqType Tcu_targetgearreqType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_MAX;
  static const int Tcu_targetgearreqType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Tcu_targetgearreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_targetgearreqType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_descriptor();
  }
  static inline const ::std::string& Tcu_targetgearreqType_Name(Tcu_targetgearreqType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Name(value);
  }
  static inline bool Tcu_targetgearreqType_Parse(const ::std::string& name,
      Tcu_targetgearreqType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_availableType Tcu_availableType;
  static const Tcu_availableType TCU_AVAILABLE_NOTAVAILABLE =
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_TCU_AVAILABLE_NOTAVAILABLE;
  static const Tcu_availableType TCU_AVAILABLE_AVAILABLE =
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_TCU_AVAILABLE_AVAILABLE;
  static inline bool Tcu_availableType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_availableType_IsValid(value);
  }
  static const Tcu_availableType Tcu_availableType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_MIN;
  static const Tcu_availableType Tcu_availableType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_MAX;
  static const int Tcu_availableType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Tcu_availableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_availableType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_availableType_descriptor();
  }
  static inline const ::std::string& Tcu_availableType_Name(Tcu_availableType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Name(value);
  }
  static inline bool Tcu_availableType_Parse(const ::std::string& name,
      Tcu_availableType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_availableType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Tcu_driverinterventionType;
  static const Tcu_driverinterventionType TCU_DRIVERINTERVENTION_NOINTERVENTION =
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_TCU_DRIVERINTERVENTION_NOINTERVENTION;
  static const Tcu_driverinterventionType TCU_DRIVERINTERVENTION_DRIVERINTERVENTION =
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_TCU_DRIVERINTERVENTION_DRIVERINTERVENTION;
  static inline bool Tcu_driverinterventionType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_IsValid(value);
  }
  static const Tcu_driverinterventionType Tcu_driverinterventionType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_MIN;
  static const Tcu_driverinterventionType Tcu_driverinterventionType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_MAX;
  static const int Tcu_driverinterventionType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Tcu_driverinterventionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_driverinterventionType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_descriptor();
  }
  static inline const ::std::string& Tcu_driverinterventionType_Name(Tcu_driverinterventionType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Name(value);
  }
  static inline bool Tcu_driverinterventionType_Parse(const ::std::string& name,
      Tcu_driverinterventionType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Tcu_trsmfaultflagType;
  static const Tcu_trsmfaultflagType TCU_TRSMFAULTFLAG_NORMAL =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_NORMAL;
  static const Tcu_trsmfaultflagType TCU_TRSMFAULTFLAG_FAILURE_NOLIMP_HOME =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_FAILURE_NOLIMP_HOME;
  static const Tcu_trsmfaultflagType TCU_TRSMFAULTFLAG_FAIL_LIMP_HOMEACTIVATED =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_FAIL_LIMP_HOMEACTIVATED;
  static const Tcu_trsmfaultflagType TCU_TRSMFAULTFLAG_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_TCU_TRSMFAULTFLAG_RESERVED;
  static inline bool Tcu_trsmfaultflagType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_IsValid(value);
  }
  static const Tcu_trsmfaultflagType Tcu_trsmfaultflagType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_MIN;
  static const Tcu_trsmfaultflagType Tcu_trsmfaultflagType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_MAX;
  static const int Tcu_trsmfaultflagType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Tcu_trsmfaultflagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_trsmfaultflagType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_descriptor();
  }
  static inline const ::std::string& Tcu_trsmfaultflagType_Name(Tcu_trsmfaultflagType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Name(value);
  }
  static inline bool Tcu_trsmfaultflagType_Parse(const ::std::string& name,
      Tcu_trsmfaultflagType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Tcu_stgearmodeType;
  static const Tcu_stgearmodeType TCU_STGEARMODE_STANDARD =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_STANDARD;
  static const Tcu_stgearmodeType TCU_STGEARMODE_SNOW =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_SNOW;
  static const Tcu_stgearmodeType TCU_STGEARMODE_MANUAL_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_MANUAL_RESERVED;
  static const Tcu_stgearmodeType TCU_STGEARMODE_SPORT =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_SPORT;
  static const Tcu_stgearmodeType TCU_STGEARMODE_ECO =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_ECO;
  static const Tcu_stgearmodeType TCU_STGEARMODE_4L =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_4L;
  static const Tcu_stgearmodeType TCU_STGEARMODE_WETMUD =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_WETMUD;
  static const Tcu_stgearmodeType TCU_STGEARMODE_SAND =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_SAND;
  static const Tcu_stgearmodeType TCU_STGEARMODE_GHAT =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_GHAT;
  static const Tcu_stgearmodeType TCU_STGEARMODE_MANUAL =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_MANUAL;
  static const Tcu_stgearmodeType TCU_STGEARMODE_ATSFAULTTCU =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_ATSFAULTTCU;
  static const Tcu_stgearmodeType TCU_STGEARMODE_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_TCU_STGEARMODE_INVALID;
  static inline bool Tcu_stgearmodeType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_IsValid(value);
  }
  static const Tcu_stgearmodeType Tcu_stgearmodeType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_MIN;
  static const Tcu_stgearmodeType Tcu_stgearmodeType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_MAX;
  static const int Tcu_stgearmodeType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Tcu_stgearmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_stgearmodeType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_descriptor();
  }
  static inline const ::std::string& Tcu_stgearmodeType_Name(Tcu_stgearmodeType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Name(value);
  }
  static inline bool Tcu_stgearmodeType_Parse(const ::std::string& name,
      Tcu_stgearmodeType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Tcu_driving_mode_reqType;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_NORMAL =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_NORMAL;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_SNOW =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SNOW;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_NOUSED =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_NOUSED;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_SPORT =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SPORT;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_ECO =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_ECO;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_4L =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_4L;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_ROCK =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_ROCK;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_WETMUD =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_WETMUD;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_SAND =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SAND;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_SWITCHFAULT =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_SWITCHFAULT;
  static const Tcu_driving_mode_reqType TCU_DRIVING_MODE_REQ_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_TCU_DRIVING_MODE_REQ_INVALID;
  static inline bool Tcu_driving_mode_reqType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_IsValid(value);
  }
  static const Tcu_driving_mode_reqType Tcu_driving_mode_reqType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_MIN;
  static const Tcu_driving_mode_reqType Tcu_driving_mode_reqType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_MAX;
  static const int Tcu_driving_mode_reqType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Tcu_driving_mode_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_driving_mode_reqType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_descriptor();
  }
  static inline const ::std::string& Tcu_driving_mode_reqType_Name(Tcu_driving_mode_reqType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Name(value);
  }
  static inline bool Tcu_driving_mode_reqType_Parse(const ::std::string& name,
      Tcu_driving_mode_reqType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Tcu_epblockreqType;
  static const Tcu_epblockreqType TCU_EPBLOCKREQ_NO_REQUEST =
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_TCU_EPBLOCKREQ_NO_REQUEST;
  static const Tcu_epblockreqType TCU_EPBLOCKREQ_REQUEST_PARK_BRAKE_ENGAGE =
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_TCU_EPBLOCKREQ_REQUEST_PARK_BRAKE_ENGAGE;
  static inline bool Tcu_epblockreqType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_IsValid(value);
  }
  static const Tcu_epblockreqType Tcu_epblockreqType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_MIN;
  static const Tcu_epblockreqType Tcu_epblockreqType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_MAX;
  static const int Tcu_epblockreqType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Tcu_epblockreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_epblockreqType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_descriptor();
  }
  static inline const ::std::string& Tcu_epblockreqType_Name(Tcu_epblockreqType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Name(value);
  }
  static inline bool Tcu_epblockreqType_Parse(const ::std::string& name,
      Tcu_epblockreqType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Tcu_highresistanceType;
  static const Tcu_highresistanceType TCU_HIGHRESISTANCE_NO_HIGHRESISTANCE =
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_TCU_HIGHRESISTANCE_NO_HIGHRESISTANCE;
  static const Tcu_highresistanceType TCU_HIGHRESISTANCE_HIGHRESISTANCE =
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_TCU_HIGHRESISTANCE_HIGHRESISTANCE;
  static inline bool Tcu_highresistanceType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_IsValid(value);
  }
  static const Tcu_highresistanceType Tcu_highresistanceType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_MIN;
  static const Tcu_highresistanceType Tcu_highresistanceType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_MAX;
  static const int Tcu_highresistanceType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Tcu_highresistanceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_highresistanceType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_descriptor();
  }
  static inline const ::std::string& Tcu_highresistanceType_Name(Tcu_highresistanceType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Name(value);
  }
  static inline bool Tcu_highresistanceType_Parse(const ::std::string& name,
      Tcu_highresistanceType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Tcu_drivingmodechange_fault_flagType;
  static const Tcu_drivingmodechange_fault_flagType TCU_DRIVINGMODECHANGE_FAULT_FLAG_NOFAULT =
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_TCU_DRIVINGMODECHANGE_FAULT_FLAG_NOFAULT;
  static const Tcu_drivingmodechange_fault_flagType TCU_DRIVINGMODECHANGE_FAULT_FLAG_FAULT =
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_TCU_DRIVINGMODECHANGE_FAULT_FLAG_FAULT;
  static inline bool Tcu_drivingmodechange_fault_flagType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_IsValid(value);
  }
  static const Tcu_drivingmodechange_fault_flagType Tcu_drivingmodechange_fault_flagType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_MIN;
  static const Tcu_drivingmodechange_fault_flagType Tcu_drivingmodechange_fault_flagType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_MAX;
  static const int Tcu_drivingmodechange_fault_flagType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Tcu_drivingmodechange_fault_flagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_drivingmodechange_fault_flagType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_descriptor();
  }
  static inline const ::std::string& Tcu_drivingmodechange_fault_flagType_Name(Tcu_drivingmodechange_fault_flagType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Name(value);
  }
  static inline bool Tcu_drivingmodechange_fault_flagType_Parse(const ::std::string& name,
      Tcu_drivingmodechange_fault_flagType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Tcu_shiftlevertopreqinvalidType;
  static const Tcu_shiftlevertopreqinvalidType TCU_SHIFTLEVERTOPREQINVALID_VALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_TCU_SHIFTLEVERTOPREQINVALID_VALID;
  static const Tcu_shiftlevertopreqinvalidType TCU_SHIFTLEVERTOPREQINVALID_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_TCU_SHIFTLEVERTOPREQINVALID_INVALID;
  static inline bool Tcu_shiftlevertopreqinvalidType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_IsValid(value);
  }
  static const Tcu_shiftlevertopreqinvalidType Tcu_shiftlevertopreqinvalidType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_MIN;
  static const Tcu_shiftlevertopreqinvalidType Tcu_shiftlevertopreqinvalidType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_MAX;
  static const int Tcu_shiftlevertopreqinvalidType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Tcu_shiftlevertopreqinvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_shiftlevertopreqinvalidType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_descriptor();
  }
  static inline const ::std::string& Tcu_shiftlevertopreqinvalidType_Name(Tcu_shiftlevertopreqinvalidType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Name(value);
  }
  static inline bool Tcu_shiftlevertopreqinvalidType_Parse(const ::std::string& name,
      Tcu_shiftlevertopreqinvalidType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Tcu_transpmotorparkreqType;
  static const Tcu_transpmotorparkreqType TCU_TRANSPMOTORPARKREQ_NOREQUEST =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_NOREQUEST;
  static const Tcu_transpmotorparkreqType TCU_TRANSPMOTORPARKREQ_UNPARKREQUEST =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_UNPARKREQUEST;
  static const Tcu_transpmotorparkreqType TCU_TRANSPMOTORPARKREQ_PARKREQUEST =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_PARKREQUEST;
  static const Tcu_transpmotorparkreqType TCU_TRANSPMOTORPARKREQ_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_TCU_TRANSPMOTORPARKREQ_RESERVED;
  static inline bool Tcu_transpmotorparkreqType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_IsValid(value);
  }
  static const Tcu_transpmotorparkreqType Tcu_transpmotorparkreqType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_MIN;
  static const Tcu_transpmotorparkreqType Tcu_transpmotorparkreqType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_MAX;
  static const int Tcu_transpmotorparkreqType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Tcu_transpmotorparkreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_transpmotorparkreqType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_descriptor();
  }
  static inline const ::std::string& Tcu_transpmotorparkreqType_Name(Tcu_transpmotorparkreqType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Name(value);
  }
  static inline bool Tcu_transpmotorparkreqType_Parse(const ::std::string& name,
      Tcu_transpmotorparkreqType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Tcu_shiftlevertopreqType;
  static const Tcu_shiftlevertopreqType TCU_SHIFTLEVERTOPREQ_NOREQUEST =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_NOREQUEST;
  static const Tcu_shiftlevertopreqType TCU_SHIFTLEVERTOPREQ_PARKREQUEST =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_PARKREQUEST;
  static const Tcu_shiftlevertopreqType TCU_SHIFTLEVERTOPREQ_RESERVED =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_TCU_SHIFTLEVERTOPREQ_RESERVED;
  static inline bool Tcu_shiftlevertopreqType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_IsValid(value);
  }
  static const Tcu_shiftlevertopreqType Tcu_shiftlevertopreqType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_MIN;
  static const Tcu_shiftlevertopreqType Tcu_shiftlevertopreqType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_MAX;
  static const int Tcu_shiftlevertopreqType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Tcu_shiftlevertopreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_shiftlevertopreqType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_descriptor();
  }
  static inline const ::std::string& Tcu_shiftlevertopreqType_Name(Tcu_shiftlevertopreqType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Name(value);
  }
  static inline bool Tcu_shiftlevertopreqType_Parse(const ::std::string& name,
      Tcu_shiftlevertopreqType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_Parse(name, value);
  }

  typedef Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Tcu_currentgearpositionType;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_DRIVETRAINOPEN_GEARN =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_DRIVETRAINOPEN_GEARN;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_1STGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_1STGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_2NDGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_2NDGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_3RDGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_3RDGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_4THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_4THGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_5THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_5THGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_6THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_6THGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_7THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_7THGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_8THGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_8THGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_REVERSEGEAR =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_REVERSEGEAR;
  static const Tcu_currentgearpositionType TCU_CURRENTGEARPOSITION_INVALID =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_TCU_CURRENTGEARPOSITION_INVALID;
  static inline bool Tcu_currentgearpositionType_IsValid(int value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_IsValid(value);
  }
  static const Tcu_currentgearpositionType Tcu_currentgearpositionType_MIN =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_MIN;
  static const Tcu_currentgearpositionType Tcu_currentgearpositionType_MAX =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_MAX;
  static const int Tcu_currentgearpositionType_ARRAYSIZE =
    Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Tcu_currentgearpositionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tcu_currentgearpositionType_descriptor() {
    return Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_descriptor();
  }
  static inline const ::std::string& Tcu_currentgearpositionType_Name(Tcu_currentgearpositionType value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Name(value);
  }
  static inline bool Tcu_currentgearpositionType_Parse(const ::std::string& name,
      Tcu_currentgearpositionType* value) {
    return Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
  bool has_tcu_displaygear() const;
  void clear_tcu_displaygear();
  static const int kTcuDisplaygearFieldNumber = 1;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType tcu_displaygear() const;
  void set_tcu_displaygear(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
  bool has_tcu_gearselectorreq() const;
  void clear_tcu_gearselectorreq();
  static const int kTcuGearselectorreqFieldNumber = 2;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType tcu_gearselectorreq() const;
  void set_tcu_gearselectorreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
  bool has_tcu_transpmotoparkreqinvalid() const;
  void clear_tcu_transpmotoparkreqinvalid();
  static const int kTcuTranspmotoparkreqinvalidFieldNumber = 3;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid() const;
  void set_tcu_transpmotoparkreqinvalid(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
  bool has_tcu_gearshiftinprogress() const;
  void clear_tcu_gearshiftinprogress();
  static const int kTcuGearshiftinprogressFieldNumber = 4;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType tcu_gearshiftinprogress() const;
  void set_tcu_gearshiftinprogress(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
  bool has_tcu_shiftleverpos_sbwm() const;
  void clear_tcu_shiftleverpos_sbwm();
  static const int kTcuShiftleverposSbwmFieldNumber = 5;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm() const;
  void set_tcu_shiftleverpos_sbwm(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
  bool has_tcu_targetgearreq() const;
  void clear_tcu_targetgearreq();
  static const int kTcuTargetgearreqFieldNumber = 6;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType tcu_targetgearreq() const;
  void set_tcu_targetgearreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
  bool has_tcu_available() const;
  void clear_tcu_available();
  static const int kTcuAvailableFieldNumber = 7;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType tcu_available() const;
  void set_tcu_available(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
  bool has_tcu_driverintervention() const;
  void clear_tcu_driverintervention();
  static const int kTcuDriverinterventionFieldNumber = 8;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType tcu_driverintervention() const;
  void set_tcu_driverintervention(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
  bool has_tcu_trsmfaultflag() const;
  void clear_tcu_trsmfaultflag();
  static const int kTcuTrsmfaultflagFieldNumber = 9;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType tcu_trsmfaultflag() const;
  void set_tcu_trsmfaultflag(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
  bool has_tcu_stgearmode() const;
  void clear_tcu_stgearmode();
  static const int kTcuStgearmodeFieldNumber = 10;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType tcu_stgearmode() const;
  void set_tcu_stgearmode(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
  bool has_tcu_driving_mode_req() const;
  void clear_tcu_driving_mode_req();
  static const int kTcuDrivingModeReqFieldNumber = 11;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType tcu_driving_mode_req() const;
  void set_tcu_driving_mode_req(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
  bool has_tcu_epblockreq() const;
  void clear_tcu_epblockreq();
  static const int kTcuEpblockreqFieldNumber = 12;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType tcu_epblockreq() const;
  void set_tcu_epblockreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
  bool has_tcu_highresistance() const;
  void clear_tcu_highresistance();
  static const int kTcuHighresistanceFieldNumber = 13;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType tcu_highresistance() const;
  void set_tcu_highresistance(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
  bool has_tcu_drivingmodechange_fault_flag() const;
  void clear_tcu_drivingmodechange_fault_flag();
  static const int kTcuDrivingmodechangeFaultFlagFieldNumber = 14;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag() const;
  void set_tcu_drivingmodechange_fault_flag(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
  bool has_tcu_shiftlevertopreqinvalid() const;
  void clear_tcu_shiftlevertopreqinvalid();
  static const int kTcuShiftlevertopreqinvalidFieldNumber = 15;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid() const;
  void set_tcu_shiftlevertopreqinvalid(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType value);

  // optional int32 tcu_status_alivecounter0x123 = 16;
  bool has_tcu_status_alivecounter0x123() const;
  void clear_tcu_status_alivecounter0x123();
  static const int kTcuStatusAlivecounter0X123FieldNumber = 16;
  ::google::protobuf::int32 tcu_status_alivecounter0x123() const;
  void set_tcu_status_alivecounter0x123(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
  bool has_tcu_transpmotorparkreq() const;
  void clear_tcu_transpmotorparkreq();
  static const int kTcuTranspmotorparkreqFieldNumber = 17;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType tcu_transpmotorparkreq() const;
  void set_tcu_transpmotorparkreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
  bool has_tcu_shiftlevertopreq() const;
  void clear_tcu_shiftlevertopreq();
  static const int kTcuShiftlevertopreqFieldNumber = 18;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType tcu_shiftlevertopreq() const;
  void set_tcu_shiftlevertopreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType value);

  // optional int32 tcu_status_checksum0x123 = 19;
  bool has_tcu_status_checksum0x123() const;
  void clear_tcu_status_checksum0x123();
  static const int kTcuStatusChecksum0X123FieldNumber = 19;
  ::google::protobuf::int32 tcu_status_checksum0x123() const;
  void set_tcu_status_checksum0x123(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
  bool has_tcu_currentgearposition() const;
  void clear_tcu_currentgearposition();
  static const int kTcuCurrentgearpositionFieldNumber = 20;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType tcu_currentgearposition() const;
  void set_tcu_currentgearposition(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
 private:
  void set_has_tcu_displaygear();
  void clear_has_tcu_displaygear();
  void set_has_tcu_gearselectorreq();
  void clear_has_tcu_gearselectorreq();
  void set_has_tcu_transpmotoparkreqinvalid();
  void clear_has_tcu_transpmotoparkreqinvalid();
  void set_has_tcu_gearshiftinprogress();
  void clear_has_tcu_gearshiftinprogress();
  void set_has_tcu_shiftleverpos_sbwm();
  void clear_has_tcu_shiftleverpos_sbwm();
  void set_has_tcu_targetgearreq();
  void clear_has_tcu_targetgearreq();
  void set_has_tcu_available();
  void clear_has_tcu_available();
  void set_has_tcu_driverintervention();
  void clear_has_tcu_driverintervention();
  void set_has_tcu_trsmfaultflag();
  void clear_has_tcu_trsmfaultflag();
  void set_has_tcu_stgearmode();
  void clear_has_tcu_stgearmode();
  void set_has_tcu_driving_mode_req();
  void clear_has_tcu_driving_mode_req();
  void set_has_tcu_epblockreq();
  void clear_has_tcu_epblockreq();
  void set_has_tcu_highresistance();
  void clear_has_tcu_highresistance();
  void set_has_tcu_drivingmodechange_fault_flag();
  void clear_has_tcu_drivingmodechange_fault_flag();
  void set_has_tcu_shiftlevertopreqinvalid();
  void clear_has_tcu_shiftlevertopreqinvalid();
  void set_has_tcu_status_alivecounter0x123();
  void clear_has_tcu_status_alivecounter0x123();
  void set_has_tcu_transpmotorparkreq();
  void clear_has_tcu_transpmotorparkreq();
  void set_has_tcu_shiftlevertopreq();
  void clear_has_tcu_shiftlevertopreq();
  void set_has_tcu_status_checksum0x123();
  void clear_has_tcu_status_checksum0x123();
  void set_has_tcu_currentgearposition();
  void clear_has_tcu_currentgearposition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int tcu_displaygear_;
  int tcu_gearselectorreq_;
  int tcu_transpmotoparkreqinvalid_;
  int tcu_gearshiftinprogress_;
  int tcu_shiftleverpos_sbwm_;
  int tcu_targetgearreq_;
  int tcu_available_;
  int tcu_driverintervention_;
  int tcu_trsmfaultflag_;
  int tcu_stgearmode_;
  int tcu_driving_mode_req_;
  int tcu_epblockreq_;
  int tcu_highresistance_;
  int tcu_drivingmodechange_fault_flag_;
  int tcu_shiftlevertopreqinvalid_;
  ::google::protobuf::int32 tcu_status_alivecounter0x123_;
  int tcu_transpmotorparkreq_;
  int tcu_shiftlevertopreq_;
  ::google::protobuf::int32 tcu_status_checksum0x123_;
  int tcu_currentgearposition_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_pressure_0x241_241 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_pressure_0x241_241) */ {
 public:
  Esp_pressure_0x241_241();
  virtual ~Esp_pressure_0x241_241();

  Esp_pressure_0x241_241(const Esp_pressure_0x241_241& from);

  inline Esp_pressure_0x241_241& operator=(const Esp_pressure_0x241_241& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_pressure_0x241_241& default_instance();

  static inline const Esp_pressure_0x241_241* internal_default_instance() {
    return reinterpret_cast<const Esp_pressure_0x241_241*>(
               &_Esp_pressure_0x241_241_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Esp_pressure_0x241_241* other);

  // implements Message ----------------------------------------------

  inline Esp_pressure_0x241_241* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_pressure_0x241_241* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_pressure_0x241_241& from);
  void MergeFrom(const Esp_pressure_0x241_241& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_pressure_0x241_241* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_trfcasemodreqdbyespType;
  static const Esp_trfcasemodreqdbyespType ESP_TRFCASEMODREQDBYESP_NO_REQUEST =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_NO_REQUEST;
  static const Esp_trfcasemodreqdbyespType ESP_TRFCASEMODREQDBYESP_FAST_OPEN_REQUEST =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_FAST_OPEN_REQUEST;
  static const Esp_trfcasemodreqdbyespType ESP_TRFCASEMODREQDBYESP_TORQUE_UPPER_LIMIT_REQUEST =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_TORQUE_UPPER_LIMIT_REQUEST;
  static const Esp_trfcasemodreqdbyespType ESP_TRFCASEMODREQDBYESP_FAILURE =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_ESP_TRFCASEMODREQDBYESP_FAILURE;
  static inline bool Esp_trfcasemodreqdbyespType_IsValid(int value) {
    return Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_IsValid(value);
  }
  static const Esp_trfcasemodreqdbyespType Esp_trfcasemodreqdbyespType_MIN =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_MIN;
  static const Esp_trfcasemodreqdbyespType Esp_trfcasemodreqdbyespType_MAX =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_MAX;
  static const int Esp_trfcasemodreqdbyespType_ARRAYSIZE =
    Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Esp_trfcasemodreqdbyespType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_trfcasemodreqdbyespType_descriptor() {
    return Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_descriptor();
  }
  static inline const ::std::string& Esp_trfcasemodreqdbyespType_Name(Esp_trfcasemodreqdbyespType value) {
    return Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Name(value);
  }
  static inline bool Esp_trfcasemodreqdbyespType_Parse(const ::std::string& name,
      Esp_trfcasemodreqdbyespType* value) {
    return Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_Parse(name, value);
  }

  typedef Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_presoffsetmastercylindervaliType;
  static const Esp_presoffsetmastercylindervaliType ESP_PRESOFFSETMASTERCYLINDERVALI_VALID =
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_ESP_PRESOFFSETMASTERCYLINDERVALI_VALID;
  static const Esp_presoffsetmastercylindervaliType ESP_PRESOFFSETMASTERCYLINDERVALI_INVALID =
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_ESP_PRESOFFSETMASTERCYLINDERVALI_INVALID;
  static inline bool Esp_presoffsetmastercylindervaliType_IsValid(int value) {
    return Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_IsValid(value);
  }
  static const Esp_presoffsetmastercylindervaliType Esp_presoffsetmastercylindervaliType_MIN =
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_MIN;
  static const Esp_presoffsetmastercylindervaliType Esp_presoffsetmastercylindervaliType_MAX =
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_MAX;
  static const int Esp_presoffsetmastercylindervaliType_ARRAYSIZE =
    Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Esp_presoffsetmastercylindervaliType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_presoffsetmastercylindervaliType_descriptor() {
    return Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_descriptor();
  }
  static inline const ::std::string& Esp_presoffsetmastercylindervaliType_Name(Esp_presoffsetmastercylindervaliType value) {
    return Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Name(value);
  }
  static inline bool Esp_presoffsetmastercylindervaliType_Parse(const ::std::string& name,
      Esp_presoffsetmastercylindervaliType* value) {
    return Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_Parse(name, value);
  }

  typedef Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_master_cylinder_pressure_staType;
  static const Esp_master_cylinder_pressure_staType ESP_MASTER_CYLINDER_PRESSURE_STA_VALID =
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_ESP_MASTER_CYLINDER_PRESSURE_STA_VALID;
  static const Esp_master_cylinder_pressure_staType ESP_MASTER_CYLINDER_PRESSURE_STA_INVALID =
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_ESP_MASTER_CYLINDER_PRESSURE_STA_INVALID;
  static inline bool Esp_master_cylinder_pressure_staType_IsValid(int value) {
    return Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_IsValid(value);
  }
  static const Esp_master_cylinder_pressure_staType Esp_master_cylinder_pressure_staType_MIN =
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_MIN;
  static const Esp_master_cylinder_pressure_staType Esp_master_cylinder_pressure_staType_MAX =
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_MAX;
  static const int Esp_master_cylinder_pressure_staType_ARRAYSIZE =
    Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Esp_master_cylinder_pressure_staType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_master_cylinder_pressure_staType_descriptor() {
    return Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_descriptor();
  }
  static inline const ::std::string& Esp_master_cylinder_pressure_staType_Name(Esp_master_cylinder_pressure_staType value) {
    return Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Name(value);
  }
  static inline bool Esp_master_cylinder_pressure_staType_Parse(const ::std::string& name,
      Esp_master_cylinder_pressure_staType* value) {
    return Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 esp_trfcasetqlmtdbyesp = 1;
  bool has_esp_trfcasetqlmtdbyesp() const;
  void clear_esp_trfcasetqlmtdbyesp();
  static const int kEspTrfcasetqlmtdbyespFieldNumber = 1;
  ::google::protobuf::int32 esp_trfcasetqlmtdbyesp() const;
  void set_esp_trfcasetqlmtdbyesp(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
  bool has_esp_trfcasemodreqdbyesp() const;
  void clear_esp_trfcasemodreqdbyesp();
  static const int kEspTrfcasemodreqdbyespFieldNumber = 2;
  ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp() const;
  void set_esp_trfcasemodreqdbyesp(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType value);

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
  bool has_esp_presoffsetmastercylindervali() const;
  void clear_esp_presoffsetmastercylindervali();
  static const int kEspPresoffsetmastercylindervaliFieldNumber = 3;
  ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali() const;
  void set_esp_presoffsetmastercylindervali(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType value);

  // optional int32 esp_presoffsetmastercylinder = 4;
  bool has_esp_presoffsetmastercylinder() const;
  void clear_esp_presoffsetmastercylinder();
  static const int kEspPresoffsetmastercylinderFieldNumber = 4;
  ::google::protobuf::int32 esp_presoffsetmastercylinder() const;
  void set_esp_presoffsetmastercylinder(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x241 = 5;
  bool has_rolling_counter_0x241() const;
  void clear_rolling_counter_0x241();
  static const int kRollingCounter0X241FieldNumber = 5;
  ::google::protobuf::int32 rolling_counter_0x241() const;
  void set_rolling_counter_0x241(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
  bool has_esp_master_cylinder_pressure_sta() const;
  void clear_esp_master_cylinder_pressure_sta();
  static const int kEspMasterCylinderPressureStaFieldNumber = 6;
  ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta() const;
  void set_esp_master_cylinder_pressure_sta(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType value);

  // optional double esp_master_cylinder_pressure = 8;
  bool has_esp_master_cylinder_pressure() const;
  void clear_esp_master_cylinder_pressure();
  static const int kEspMasterCylinderPressureFieldNumber = 8;
  double esp_master_cylinder_pressure() const;
  void set_esp_master_cylinder_pressure(double value);

  // optional int32 checksum_0x241 = 7;
  bool has_checksum_0x241() const;
  void clear_checksum_0x241();
  static const int kChecksum0X241FieldNumber = 7;
  ::google::protobuf::int32 checksum_0x241() const;
  void set_checksum_0x241(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_pressure_0x241_241)
 private:
  void set_has_esp_trfcasetqlmtdbyesp();
  void clear_has_esp_trfcasetqlmtdbyesp();
  void set_has_esp_trfcasemodreqdbyesp();
  void clear_has_esp_trfcasemodreqdbyesp();
  void set_has_esp_presoffsetmastercylindervali();
  void clear_has_esp_presoffsetmastercylindervali();
  void set_has_esp_presoffsetmastercylinder();
  void clear_has_esp_presoffsetmastercylinder();
  void set_has_rolling_counter_0x241();
  void clear_has_rolling_counter_0x241();
  void set_has_esp_master_cylinder_pressure_sta();
  void clear_has_esp_master_cylinder_pressure_sta();
  void set_has_checksum_0x241();
  void clear_has_checksum_0x241();
  void set_has_esp_master_cylinder_pressure();
  void clear_has_esp_master_cylinder_pressure();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 esp_trfcasetqlmtdbyesp_;
  int esp_trfcasemodreqdbyesp_;
  int esp_presoffsetmastercylindervali_;
  ::google::protobuf::int32 esp_presoffsetmastercylinder_;
  ::google::protobuf::int32 rolling_counter_0x241_;
  int esp_master_cylinder_pressure_sta_;
  double esp_master_cylinder_pressure_;
  ::google::protobuf::int32 checksum_0x241_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_status_0x243_243 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_status_0x243_243) */ {
 public:
  Esp_status_0x243_243();
  virtual ~Esp_status_0x243_243();

  Esp_status_0x243_243(const Esp_status_0x243_243& from);

  inline Esp_status_0x243_243& operator=(const Esp_status_0x243_243& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_status_0x243_243& default_instance();

  static inline const Esp_status_0x243_243* internal_default_instance() {
    return reinterpret_cast<const Esp_status_0x243_243*>(
               &_Esp_status_0x243_243_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Esp_status_0x243_243* other);

  // implements Message ----------------------------------------------

  inline Esp_status_0x243_243* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_status_0x243_243* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_status_0x243_243& from);
  void MergeFrom(const Esp_status_0x243_243& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_status_0x243_243* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_status_0x243_243_Esp_hhcavailableType Esp_hhcavailableType;
  static const Esp_hhcavailableType ESP_HHCAVAILABLE_AVAILABLE =
    Esp_status_0x243_243_Esp_hhcavailableType_ESP_HHCAVAILABLE_AVAILABLE;
  static const Esp_hhcavailableType ESP_HHCAVAILABLE_NOT_AVAILABLE =
    Esp_status_0x243_243_Esp_hhcavailableType_ESP_HHCAVAILABLE_NOT_AVAILABLE;
  static inline bool Esp_hhcavailableType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_hhcavailableType_IsValid(value);
  }
  static const Esp_hhcavailableType Esp_hhcavailableType_MIN =
    Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_MIN;
  static const Esp_hhcavailableType Esp_hhcavailableType_MAX =
    Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_MAX;
  static const int Esp_hhcavailableType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_hhcavailableType_Esp_hhcavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_hhcavailableType_descriptor() {
    return Esp_status_0x243_243_Esp_hhcavailableType_descriptor();
  }
  static inline const ::std::string& Esp_hhcavailableType_Name(Esp_hhcavailableType value) {
    return Esp_status_0x243_243_Esp_hhcavailableType_Name(value);
  }
  static inline bool Esp_hhcavailableType_Parse(const ::std::string& name,
      Esp_hhcavailableType* value) {
    return Esp_status_0x243_243_Esp_hhcavailableType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_hhcactiveType Esp_hhcactiveType;
  static const Esp_hhcactiveType ESP_HHCACTIVE_NOT_ACTIVE =
    Esp_status_0x243_243_Esp_hhcactiveType_ESP_HHCACTIVE_NOT_ACTIVE;
  static const Esp_hhcactiveType ESP_HHCACTIVE_ACTIVE =
    Esp_status_0x243_243_Esp_hhcactiveType_ESP_HHCACTIVE_ACTIVE;
  static inline bool Esp_hhcactiveType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_hhcactiveType_IsValid(value);
  }
  static const Esp_hhcactiveType Esp_hhcactiveType_MIN =
    Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_MIN;
  static const Esp_hhcactiveType Esp_hhcactiveType_MAX =
    Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_MAX;
  static const int Esp_hhcactiveType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_hhcactiveType_Esp_hhcactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_hhcactiveType_descriptor() {
    return Esp_status_0x243_243_Esp_hhcactiveType_descriptor();
  }
  static inline const ::std::string& Esp_hhcactiveType_Name(Esp_hhcactiveType value) {
    return Esp_status_0x243_243_Esp_hhcactiveType_Name(value);
  }
  static inline bool Esp_hhcactiveType_Parse(const ::std::string& name,
      Esp_hhcactiveType* value) {
    return Esp_status_0x243_243_Esp_hhcactiveType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_hdcactiveType Esp_hdcactiveType;
  static const Esp_hdcactiveType ESP_HDCACTIVE_OFF =
    Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_OFF;
  static const Esp_hdcactiveType ESP_HDCACTIVE_ON_ACTIVE_BRAKING =
    Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_ON_ACTIVE_BRAKING;
  static const Esp_hdcactiveType ESP_HDCACTIVE_ON_NOT_ACTIVE_BRAKING =
    Esp_status_0x243_243_Esp_hdcactiveType_ESP_HDCACTIVE_ON_NOT_ACTIVE_BRAKING;
  static inline bool Esp_hdcactiveType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_hdcactiveType_IsValid(value);
  }
  static const Esp_hdcactiveType Esp_hdcactiveType_MIN =
    Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_MIN;
  static const Esp_hdcactiveType Esp_hdcactiveType_MAX =
    Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_MAX;
  static const int Esp_hdcactiveType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_hdcactiveType_Esp_hdcactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_hdcactiveType_descriptor() {
    return Esp_status_0x243_243_Esp_hdcactiveType_descriptor();
  }
  static inline const ::std::string& Esp_hdcactiveType_Name(Esp_hdcactiveType value) {
    return Esp_status_0x243_243_Esp_hdcactiveType_Name(value);
  }
  static inline bool Esp_hdcactiveType_Parse(const ::std::string& name,
      Esp_hdcactiveType* value) {
    return Esp_status_0x243_243_Esp_hdcactiveType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_ldmblc_blrequestcontrollerType;
  static const Esp_ldmblc_blrequestcontrollerType ESP_LDMBLC_BLREQUESTCONTROLLER_NOT_ILLUMINATE =
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_ESP_LDMBLC_BLREQUESTCONTROLLER_NOT_ILLUMINATE;
  static const Esp_ldmblc_blrequestcontrollerType ESP_LDMBLC_BLREQUESTCONTROLLER_ILLUMINATE =
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_ESP_LDMBLC_BLREQUESTCONTROLLER_ILLUMINATE;
  static inline bool Esp_ldmblc_blrequestcontrollerType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_IsValid(value);
  }
  static const Esp_ldmblc_blrequestcontrollerType Esp_ldmblc_blrequestcontrollerType_MIN =
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_MIN;
  static const Esp_ldmblc_blrequestcontrollerType Esp_ldmblc_blrequestcontrollerType_MAX =
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_MAX;
  static const int Esp_ldmblc_blrequestcontrollerType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Esp_ldmblc_blrequestcontrollerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_ldmblc_blrequestcontrollerType_descriptor() {
    return Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_descriptor();
  }
  static inline const ::std::string& Esp_ldmblc_blrequestcontrollerType_Name(Esp_ldmblc_blrequestcontrollerType value) {
    return Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Name(value);
  }
  static inline bool Esp_ldmblc_blrequestcontrollerType_Parse(const ::std::string& name,
      Esp_ldmblc_blrequestcontrollerType* value) {
    return Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_cdpavailableType Esp_cdpavailableType;
  static const Esp_cdpavailableType ESP_CDPAVAILABLE_AVAILABLE =
    Esp_status_0x243_243_Esp_cdpavailableType_ESP_CDPAVAILABLE_AVAILABLE;
  static const Esp_cdpavailableType ESP_CDPAVAILABLE_NOT_AVAILABLE =
    Esp_status_0x243_243_Esp_cdpavailableType_ESP_CDPAVAILABLE_NOT_AVAILABLE;
  static inline bool Esp_cdpavailableType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_cdpavailableType_IsValid(value);
  }
  static const Esp_cdpavailableType Esp_cdpavailableType_MIN =
    Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_MIN;
  static const Esp_cdpavailableType Esp_cdpavailableType_MAX =
    Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_MAX;
  static const int Esp_cdpavailableType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_cdpavailableType_Esp_cdpavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_cdpavailableType_descriptor() {
    return Esp_status_0x243_243_Esp_cdpavailableType_descriptor();
  }
  static inline const ::std::string& Esp_cdpavailableType_Name(Esp_cdpavailableType value) {
    return Esp_status_0x243_243_Esp_cdpavailableType_Name(value);
  }
  static inline bool Esp_cdpavailableType_Parse(const ::std::string& name,
      Esp_cdpavailableType* value) {
    return Esp_status_0x243_243_Esp_cdpavailableType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_cdpactiveType Esp_cdpactiveType;
  static const Esp_cdpactiveType ESP_CDPACTIVE_NOT_ACTIVE =
    Esp_status_0x243_243_Esp_cdpactiveType_ESP_CDPACTIVE_NOT_ACTIVE;
  static const Esp_cdpactiveType ESP_CDPACTIVE_ACTIVE =
    Esp_status_0x243_243_Esp_cdpactiveType_ESP_CDPACTIVE_ACTIVE;
  static inline bool Esp_cdpactiveType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_cdpactiveType_IsValid(value);
  }
  static const Esp_cdpactiveType Esp_cdpactiveType_MIN =
    Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_MIN;
  static const Esp_cdpactiveType Esp_cdpactiveType_MAX =
    Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_MAX;
  static const int Esp_cdpactiveType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_cdpactiveType_Esp_cdpactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_cdpactiveType_descriptor() {
    return Esp_status_0x243_243_Esp_cdpactiveType_descriptor();
  }
  static inline const ::std::string& Esp_cdpactiveType_Name(Esp_cdpactiveType value) {
    return Esp_status_0x243_243_Esp_cdpactiveType_Name(value);
  }
  static inline bool Esp_cdpactiveType_Parse(const ::std::string& name,
      Esp_cdpactiveType* value) {
    return Esp_status_0x243_243_Esp_cdpactiveType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_epbwarningmessage3Type;
  static const Esp_epbwarningmessage3Type ESP_EPBWARNINGMESSAGE3_NO_DISPLAY =
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_ESP_EPBWARNINGMESSAGE3_NO_DISPLAY;
  static const Esp_epbwarningmessage3Type ESP_EPBWARNINGMESSAGE3_WHEN_APPLIED_THE_EPB_THE_SLOPE_OF_VEHICLE_IS_MORE_THAN_20_FOR_PK_30_FOR_SUV =
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_ESP_EPBWARNINGMESSAGE3_WHEN_APPLIED_THE_EPB_THE_SLOPE_OF_VEHICLE_IS_MORE_THAN_20_FOR_PK_30_FOR_SUV;
  static inline bool Esp_epbwarningmessage3Type_IsValid(int value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage3Type_IsValid(value);
  }
  static const Esp_epbwarningmessage3Type Esp_epbwarningmessage3Type_MIN =
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_MIN;
  static const Esp_epbwarningmessage3Type Esp_epbwarningmessage3Type_MAX =
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_MAX;
  static const int Esp_epbwarningmessage3Type_ARRAYSIZE =
    Esp_status_0x243_243_Esp_epbwarningmessage3Type_Esp_epbwarningmessage3Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_epbwarningmessage3Type_descriptor() {
    return Esp_status_0x243_243_Esp_epbwarningmessage3Type_descriptor();
  }
  static inline const ::std::string& Esp_epbwarningmessage3Type_Name(Esp_epbwarningmessage3Type value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage3Type_Name(value);
  }
  static inline bool Esp_epbwarningmessage3Type_Parse(const ::std::string& name,
      Esp_epbwarningmessage3Type* value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage3Type_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_epbwarningmessage2Type;
  static const Esp_epbwarningmessage2Type ESP_EPBWARNINGMESSAGE2_NO_DISPLAY =
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_ESP_EPBWARNINGMESSAGE2_NO_DISPLAY;
  static const Esp_epbwarningmessage2Type ESP_EPBWARNINGMESSAGE2_EPB_DRIVEROFF_WITHOUT_SEATBLET_OR_DRIVER_DOOR =
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_ESP_EPBWARNINGMESSAGE2_EPB_DRIVEROFF_WITHOUT_SEATBLET_OR_DRIVER_DOOR;
  static inline bool Esp_epbwarningmessage2Type_IsValid(int value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage2Type_IsValid(value);
  }
  static const Esp_epbwarningmessage2Type Esp_epbwarningmessage2Type_MIN =
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_MIN;
  static const Esp_epbwarningmessage2Type Esp_epbwarningmessage2Type_MAX =
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_MAX;
  static const int Esp_epbwarningmessage2Type_ARRAYSIZE =
    Esp_status_0x243_243_Esp_epbwarningmessage2Type_Esp_epbwarningmessage2Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_epbwarningmessage2Type_descriptor() {
    return Esp_status_0x243_243_Esp_epbwarningmessage2Type_descriptor();
  }
  static inline const ::std::string& Esp_epbwarningmessage2Type_Name(Esp_epbwarningmessage2Type value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage2Type_Name(value);
  }
  static inline bool Esp_epbwarningmessage2Type_Parse(const ::std::string& name,
      Esp_epbwarningmessage2Type* value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage2Type_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_epbwarningmessage1Type;
  static const Esp_epbwarningmessage1Type ESP_EPBWARNINGMESSAGE1_NO_DISPLAY =
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_ESP_EPBWARNINGMESSAGE1_NO_DISPLAY;
  static const Esp_epbwarningmessage1Type ESP_EPBWARNINGMESSAGE1_NO_BRAKE_PEDAL_PRESSED_AND_RELEASE_THE_EPB =
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_ESP_EPBWARNINGMESSAGE1_NO_BRAKE_PEDAL_PRESSED_AND_RELEASE_THE_EPB;
  static inline bool Esp_epbwarningmessage1Type_IsValid(int value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage1Type_IsValid(value);
  }
  static const Esp_epbwarningmessage1Type Esp_epbwarningmessage1Type_MIN =
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_MIN;
  static const Esp_epbwarningmessage1Type Esp_epbwarningmessage1Type_MAX =
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_MAX;
  static const int Esp_epbwarningmessage1Type_ARRAYSIZE =
    Esp_status_0x243_243_Esp_epbwarningmessage1Type_Esp_epbwarningmessage1Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_epbwarningmessage1Type_descriptor() {
    return Esp_status_0x243_243_Esp_epbwarningmessage1Type_descriptor();
  }
  static inline const ::std::string& Esp_epbwarningmessage1Type_Name(Esp_epbwarningmessage1Type value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage1Type_Name(value);
  }
  static inline bool Esp_epbwarningmessage1Type_Parse(const ::std::string& name,
      Esp_epbwarningmessage1Type* value) {
    return Esp_status_0x243_243_Esp_epbwarningmessage1Type_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_avhwarningmessageType Esp_avhwarningmessageType;
  static const Esp_avhwarningmessageType ESP_AVHWARNINGMESSAGE_NO_WARNING =
    Esp_status_0x243_243_Esp_avhwarningmessageType_ESP_AVHWARNINGMESSAGE_NO_WARNING;
  static const Esp_avhwarningmessageType ESP_AVHWARNINGMESSAGE_PLEASE_CLOSE_THE_DOOR_OR_SEATBLET_THEN_PRESSURE_THE_AVH_BUTTON =
    Esp_status_0x243_243_Esp_avhwarningmessageType_ESP_AVHWARNINGMESSAGE_PLEASE_CLOSE_THE_DOOR_OR_SEATBLET_THEN_PRESSURE_THE_AVH_BUTTON;
  static inline bool Esp_avhwarningmessageType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_avhwarningmessageType_IsValid(value);
  }
  static const Esp_avhwarningmessageType Esp_avhwarningmessageType_MIN =
    Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_MIN;
  static const Esp_avhwarningmessageType Esp_avhwarningmessageType_MAX =
    Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_MAX;
  static const int Esp_avhwarningmessageType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_avhwarningmessageType_Esp_avhwarningmessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_avhwarningmessageType_descriptor() {
    return Esp_status_0x243_243_Esp_avhwarningmessageType_descriptor();
  }
  static inline const ::std::string& Esp_avhwarningmessageType_Name(Esp_avhwarningmessageType value) {
    return Esp_status_0x243_243_Esp_avhwarningmessageType_Name(value);
  }
  static inline bool Esp_avhwarningmessageType_Parse(const ::std::string& name,
      Esp_avhwarningmessageType* value) {
    return Esp_status_0x243_243_Esp_avhwarningmessageType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_avhactiveType Esp_avhactiveType;
  static const Esp_avhactiveType ESP_AVHACTIVE_INACTIVE =
    Esp_status_0x243_243_Esp_avhactiveType_ESP_AVHACTIVE_INACTIVE;
  static const Esp_avhactiveType ESP_AVHACTIVE_ACTIVE =
    Esp_status_0x243_243_Esp_avhactiveType_ESP_AVHACTIVE_ACTIVE;
  static inline bool Esp_avhactiveType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_avhactiveType_IsValid(value);
  }
  static const Esp_avhactiveType Esp_avhactiveType_MIN =
    Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_MIN;
  static const Esp_avhactiveType Esp_avhactiveType_MAX =
    Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_MAX;
  static const int Esp_avhactiveType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_avhactiveType_Esp_avhactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_avhactiveType_descriptor() {
    return Esp_status_0x243_243_Esp_avhactiveType_descriptor();
  }
  static inline const ::std::string& Esp_avhactiveType_Name(Esp_avhactiveType value) {
    return Esp_status_0x243_243_Esp_avhactiveType_Name(value);
  }
  static inline bool Esp_avhactiveType_Parse(const ::std::string& name,
      Esp_avhactiveType* value) {
    return Esp_status_0x243_243_Esp_avhactiveType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_avhstandbyType Esp_avhstandbyType;
  static const Esp_avhstandbyType ESP_AVHSTANDBY_NOT_STANDBY =
    Esp_status_0x243_243_Esp_avhstandbyType_ESP_AVHSTANDBY_NOT_STANDBY;
  static const Esp_avhstandbyType ESP_AVHSTANDBY_STANDBY =
    Esp_status_0x243_243_Esp_avhstandbyType_ESP_AVHSTANDBY_STANDBY;
  static inline bool Esp_avhstandbyType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_avhstandbyType_IsValid(value);
  }
  static const Esp_avhstandbyType Esp_avhstandbyType_MIN =
    Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_MIN;
  static const Esp_avhstandbyType Esp_avhstandbyType_MAX =
    Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_MAX;
  static const int Esp_avhstandbyType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_avhstandbyType_Esp_avhstandbyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_avhstandbyType_descriptor() {
    return Esp_status_0x243_243_Esp_avhstandbyType_descriptor();
  }
  static inline const ::std::string& Esp_avhstandbyType_Name(Esp_avhstandbyType value) {
    return Esp_status_0x243_243_Esp_avhstandbyType_Name(value);
  }
  static inline bool Esp_avhstandbyType_Parse(const ::std::string& name,
      Esp_avhstandbyType* value) {
    return Esp_status_0x243_243_Esp_avhstandbyType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_avhavabliableType Esp_avhavabliableType;
  static const Esp_avhavabliableType ESP_AVHAVABLIABLE_AVAILABLE =
    Esp_status_0x243_243_Esp_avhavabliableType_ESP_AVHAVABLIABLE_AVAILABLE;
  static const Esp_avhavabliableType ESP_AVHAVABLIABLE_NOT_AVAILABLE =
    Esp_status_0x243_243_Esp_avhavabliableType_ESP_AVHAVABLIABLE_NOT_AVAILABLE;
  static inline bool Esp_avhavabliableType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_avhavabliableType_IsValid(value);
  }
  static const Esp_avhavabliableType Esp_avhavabliableType_MIN =
    Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_MIN;
  static const Esp_avhavabliableType Esp_avhavabliableType_MAX =
    Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_MAX;
  static const int Esp_avhavabliableType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_avhavabliableType_Esp_avhavabliableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_avhavabliableType_descriptor() {
    return Esp_status_0x243_243_Esp_avhavabliableType_descriptor();
  }
  static inline const ::std::string& Esp_avhavabliableType_Name(Esp_avhavabliableType value) {
    return Esp_status_0x243_243_Esp_avhavabliableType_Name(value);
  }
  static inline bool Esp_avhavabliableType_Parse(const ::std::string& name,
      Esp_avhavabliableType* value) {
    return Esp_status_0x243_243_Esp_avhavabliableType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_vdcflgfltType Esp_vdcflgfltType;
  static const Esp_vdcflgfltType ESP_VDCFLGFLT_NO_FAILURE =
    Esp_status_0x243_243_Esp_vdcflgfltType_ESP_VDCFLGFLT_NO_FAILURE;
  static const Esp_vdcflgfltType ESP_VDCFLGFLT_FAILURE =
    Esp_status_0x243_243_Esp_vdcflgfltType_ESP_VDCFLGFLT_FAILURE;
  static inline bool Esp_vdcflgfltType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_vdcflgfltType_IsValid(value);
  }
  static const Esp_vdcflgfltType Esp_vdcflgfltType_MIN =
    Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_MIN;
  static const Esp_vdcflgfltType Esp_vdcflgfltType_MAX =
    Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_MAX;
  static const int Esp_vdcflgfltType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_vdcflgfltType_Esp_vdcflgfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vdcflgfltType_descriptor() {
    return Esp_status_0x243_243_Esp_vdcflgfltType_descriptor();
  }
  static inline const ::std::string& Esp_vdcflgfltType_Name(Esp_vdcflgfltType value) {
    return Esp_status_0x243_243_Esp_vdcflgfltType_Name(value);
  }
  static inline bool Esp_vdcflgfltType_Parse(const ::std::string& name,
      Esp_vdcflgfltType* value) {
    return Esp_status_0x243_243_Esp_vdcflgfltType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_tcsflgfltType Esp_tcsflgfltType;
  static const Esp_tcsflgfltType ESP_TCSFLGFLT_NO_FAILURE =
    Esp_status_0x243_243_Esp_tcsflgfltType_ESP_TCSFLGFLT_NO_FAILURE;
  static const Esp_tcsflgfltType ESP_TCSFLGFLT_FAILURE =
    Esp_status_0x243_243_Esp_tcsflgfltType_ESP_TCSFLGFLT_FAILURE;
  static inline bool Esp_tcsflgfltType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_tcsflgfltType_IsValid(value);
  }
  static const Esp_tcsflgfltType Esp_tcsflgfltType_MIN =
    Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_MIN;
  static const Esp_tcsflgfltType Esp_tcsflgfltType_MAX =
    Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_MAX;
  static const int Esp_tcsflgfltType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_tcsflgfltType_Esp_tcsflgfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_tcsflgfltType_descriptor() {
    return Esp_status_0x243_243_Esp_tcsflgfltType_descriptor();
  }
  static inline const ::std::string& Esp_tcsflgfltType_Name(Esp_tcsflgfltType value) {
    return Esp_status_0x243_243_Esp_tcsflgfltType_Name(value);
  }
  static inline bool Esp_tcsflgfltType_Parse(const ::std::string& name,
      Esp_tcsflgfltType* value) {
    return Esp_status_0x243_243_Esp_tcsflgfltType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_tcsctrlactvType Esp_tcsctrlactvType;
  static const Esp_tcsctrlactvType ESP_TCSCTRLACTV_NOT_ACTIVE =
    Esp_status_0x243_243_Esp_tcsctrlactvType_ESP_TCSCTRLACTV_NOT_ACTIVE;
  static const Esp_tcsctrlactvType ESP_TCSCTRLACTV_ACTIVE =
    Esp_status_0x243_243_Esp_tcsctrlactvType_ESP_TCSCTRLACTV_ACTIVE;
  static inline bool Esp_tcsctrlactvType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_tcsctrlactvType_IsValid(value);
  }
  static const Esp_tcsctrlactvType Esp_tcsctrlactvType_MIN =
    Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_MIN;
  static const Esp_tcsctrlactvType Esp_tcsctrlactvType_MAX =
    Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_MAX;
  static const int Esp_tcsctrlactvType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_tcsctrlactvType_Esp_tcsctrlactvType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_tcsctrlactvType_descriptor() {
    return Esp_status_0x243_243_Esp_tcsctrlactvType_descriptor();
  }
  static inline const ::std::string& Esp_tcsctrlactvType_Name(Esp_tcsctrlactvType value) {
    return Esp_status_0x243_243_Esp_tcsctrlactvType_Name(value);
  }
  static inline bool Esp_tcsctrlactvType_Parse(const ::std::string& name,
      Esp_tcsctrlactvType* value) {
    return Esp_status_0x243_243_Esp_tcsctrlactvType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_espctrlactvType Esp_espctrlactvType;
  static const Esp_espctrlactvType ESP_ESPCTRLACTV_NOT_ACTIVE =
    Esp_status_0x243_243_Esp_espctrlactvType_ESP_ESPCTRLACTV_NOT_ACTIVE;
  static const Esp_espctrlactvType ESP_ESPCTRLACTV_ACTIVE =
    Esp_status_0x243_243_Esp_espctrlactvType_ESP_ESPCTRLACTV_ACTIVE;
  static inline bool Esp_espctrlactvType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_espctrlactvType_IsValid(value);
  }
  static const Esp_espctrlactvType Esp_espctrlactvType_MIN =
    Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_MIN;
  static const Esp_espctrlactvType Esp_espctrlactvType_MAX =
    Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_MAX;
  static const int Esp_espctrlactvType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_espctrlactvType_Esp_espctrlactvType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_espctrlactvType_descriptor() {
    return Esp_status_0x243_243_Esp_espctrlactvType_descriptor();
  }
  static inline const ::std::string& Esp_espctrlactvType_Name(Esp_espctrlactvType value) {
    return Esp_status_0x243_243_Esp_espctrlactvType_Name(value);
  }
  static inline bool Esp_espctrlactvType_Parse(const ::std::string& name,
      Esp_espctrlactvType* value) {
    return Esp_status_0x243_243_Esp_espctrlactvType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_driving_mode_reqType Esp_driving_mode_reqType;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_AUTO =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_AUTO;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_SNOW =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_SNOW;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_NO_USED =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_NO_USED;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_SPORT =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_SPORT;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_ECO =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ECO;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_4L =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_4L;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_ROCK =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ROCK;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_WETMUD =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_WETMUD;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_SAND =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_SAND;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_ATS_SHIFTING =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ATS_SHIFTING;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_ATS_SHIFT_FAILURE =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_ATS_SHIFT_FAILURE;
  static const Esp_driving_mode_reqType ESP_DRIVING_MODE_REQ_INVALID =
    Esp_status_0x243_243_Esp_driving_mode_reqType_ESP_DRIVING_MODE_REQ_INVALID;
  static inline bool Esp_driving_mode_reqType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_driving_mode_reqType_IsValid(value);
  }
  static const Esp_driving_mode_reqType Esp_driving_mode_reqType_MIN =
    Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_MIN;
  static const Esp_driving_mode_reqType Esp_driving_mode_reqType_MAX =
    Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_MAX;
  static const int Esp_driving_mode_reqType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_driving_mode_reqType_Esp_driving_mode_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_driving_mode_reqType_descriptor() {
    return Esp_status_0x243_243_Esp_driving_mode_reqType_descriptor();
  }
  static inline const ::std::string& Esp_driving_mode_reqType_Name(Esp_driving_mode_reqType value) {
    return Esp_status_0x243_243_Esp_driving_mode_reqType_Name(value);
  }
  static inline bool Esp_driving_mode_reqType_Parse(const ::std::string& name,
      Esp_driving_mode_reqType* value) {
    return Esp_status_0x243_243_Esp_driving_mode_reqType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_espinfolampType Esp_espinfolampType;
  static const Esp_espinfolampType ESP_ESPINFOLAMP_OFF =
    Esp_status_0x243_243_Esp_espinfolampType_ESP_ESPINFOLAMP_OFF;
  static const Esp_espinfolampType ESP_ESPINFOLAMP_ON =
    Esp_status_0x243_243_Esp_espinfolampType_ESP_ESPINFOLAMP_ON;
  static inline bool Esp_espinfolampType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_espinfolampType_IsValid(value);
  }
  static const Esp_espinfolampType Esp_espinfolampType_MIN =
    Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_MIN;
  static const Esp_espinfolampType Esp_espinfolampType_MAX =
    Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_MAX;
  static const int Esp_espinfolampType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_espinfolampType_Esp_espinfolampType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_espinfolampType_descriptor() {
    return Esp_status_0x243_243_Esp_espinfolampType_descriptor();
  }
  static inline const ::std::string& Esp_espinfolampType_Name(Esp_espinfolampType value) {
    return Esp_status_0x243_243_Esp_espinfolampType_Name(value);
  }
  static inline bool Esp_espinfolampType_Parse(const ::std::string& name,
      Esp_espinfolampType* value) {
    return Esp_status_0x243_243_Esp_espinfolampType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_espenablestsType Esp_espenablestsType;
  static const Esp_espenablestsType ESP_ESPENABLESTS_ESP_DISABLED =
    Esp_status_0x243_243_Esp_espenablestsType_ESP_ESPENABLESTS_ESP_DISABLED;
  static const Esp_espenablestsType ESP_ESPENABLESTS_ESP_ENABLED =
    Esp_status_0x243_243_Esp_espenablestsType_ESP_ESPENABLESTS_ESP_ENABLED;
  static inline bool Esp_espenablestsType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_espenablestsType_IsValid(value);
  }
  static const Esp_espenablestsType Esp_espenablestsType_MIN =
    Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_MIN;
  static const Esp_espenablestsType Esp_espenablestsType_MAX =
    Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_MAX;
  static const int Esp_espenablestsType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_espenablestsType_Esp_espenablestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_espenablestsType_descriptor() {
    return Esp_status_0x243_243_Esp_espenablestsType_descriptor();
  }
  static inline const ::std::string& Esp_espenablestsType_Name(Esp_espenablestsType value) {
    return Esp_status_0x243_243_Esp_espenablestsType_Name(value);
  }
  static inline bool Esp_espenablestsType_Parse(const ::std::string& name,
      Esp_espenablestsType* value) {
    return Esp_status_0x243_243_Esp_espenablestsType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_gearshiftprevnType Esp_gearshiftprevnType;
  static const Esp_gearshiftprevnType ESP_GEARSHIFTPREVN_NO_REQUEST =
    Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_NO_REQUEST;
  static const Esp_gearshiftprevnType ESP_GEARSHIFTPREVN_INHIBIT_UPSHIFT =
    Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_UPSHIFT;
  static const Esp_gearshiftprevnType ESP_GEARSHIFTPREVN_INHIBIT_DOWN_SHIFT =
    Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_DOWN_SHIFT;
  static const Esp_gearshiftprevnType ESP_GEARSHIFTPREVN_INHIBIT_ALL_SHIFTS =
    Esp_status_0x243_243_Esp_gearshiftprevnType_ESP_GEARSHIFTPREVN_INHIBIT_ALL_SHIFTS;
  static inline bool Esp_gearshiftprevnType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_gearshiftprevnType_IsValid(value);
  }
  static const Esp_gearshiftprevnType Esp_gearshiftprevnType_MIN =
    Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_MIN;
  static const Esp_gearshiftprevnType Esp_gearshiftprevnType_MAX =
    Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_MAX;
  static const int Esp_gearshiftprevnType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_gearshiftprevnType_Esp_gearshiftprevnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_gearshiftprevnType_descriptor() {
    return Esp_status_0x243_243_Esp_gearshiftprevnType_descriptor();
  }
  static inline const ::std::string& Esp_gearshiftprevnType_Name(Esp_gearshiftprevnType value) {
    return Esp_status_0x243_243_Esp_gearshiftprevnType_Name(value);
  }
  static inline bool Esp_gearshiftprevnType_Parse(const ::std::string& name,
      Esp_gearshiftprevnType* value) {
    return Esp_status_0x243_243_Esp_gearshiftprevnType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_epbstatusType Esp_epbstatusType;
  static const Esp_epbstatusType ESP_EPBSTATUS_RELEASED =
    Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_RELEASED;
  static const Esp_epbstatusType ESP_EPBSTATUS_APPLIED =
    Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_APPLIED;
  static const Esp_epbstatusType ESP_EPBSTATUS_RELEASINGR =
    Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_RELEASINGR;
  static const Esp_epbstatusType ESP_EPBSTATUS_APPLYING =
    Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_APPLYING;
  static const Esp_epbstatusType ESP_EPBSTATUS_UNKNOWN =
    Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_UNKNOWN;
  static const Esp_epbstatusType ESP_EPBSTATUS_ERROR =
    Esp_status_0x243_243_Esp_epbstatusType_ESP_EPBSTATUS_ERROR;
  static inline bool Esp_epbstatusType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_epbstatusType_IsValid(value);
  }
  static const Esp_epbstatusType Esp_epbstatusType_MIN =
    Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_MIN;
  static const Esp_epbstatusType Esp_epbstatusType_MAX =
    Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_MAX;
  static const int Esp_epbstatusType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_epbstatusType_Esp_epbstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_epbstatusType_descriptor() {
    return Esp_status_0x243_243_Esp_epbstatusType_descriptor();
  }
  static inline const ::std::string& Esp_epbstatusType_Name(Esp_epbstatusType value) {
    return Esp_status_0x243_243_Esp_epbstatusType_Name(value);
  }
  static inline bool Esp_epbstatusType_Parse(const ::std::string& name,
      Esp_epbstatusType* value) {
    return Esp_status_0x243_243_Esp_epbstatusType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_RollerbenchmodestsType RollerbenchmodestsType;
  static const RollerbenchmodestsType ROLLERBENCHMODESTS_ROLLERBENCH_MODE_INACTIVE =
    Esp_status_0x243_243_RollerbenchmodestsType_ROLLERBENCHMODESTS_ROLLERBENCH_MODE_INACTIVE;
  static const RollerbenchmodestsType ROLLERBENCHMODESTS_ROLLERBENCH_MODE_ACTIVE =
    Esp_status_0x243_243_RollerbenchmodestsType_ROLLERBENCHMODESTS_ROLLERBENCH_MODE_ACTIVE;
  static inline bool RollerbenchmodestsType_IsValid(int value) {
    return Esp_status_0x243_243_RollerbenchmodestsType_IsValid(value);
  }
  static const RollerbenchmodestsType RollerbenchmodestsType_MIN =
    Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_MIN;
  static const RollerbenchmodestsType RollerbenchmodestsType_MAX =
    Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_MAX;
  static const int RollerbenchmodestsType_ARRAYSIZE =
    Esp_status_0x243_243_RollerbenchmodestsType_RollerbenchmodestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RollerbenchmodestsType_descriptor() {
    return Esp_status_0x243_243_RollerbenchmodestsType_descriptor();
  }
  static inline const ::std::string& RollerbenchmodestsType_Name(RollerbenchmodestsType value) {
    return Esp_status_0x243_243_RollerbenchmodestsType_Name(value);
  }
  static inline bool RollerbenchmodestsType_Parse(const ::std::string& name,
      RollerbenchmodestsType* value) {
    return Esp_status_0x243_243_RollerbenchmodestsType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_epberrorstatusType Esp_epberrorstatusType;
  static const Esp_epberrorstatusType ESP_EPBERRORSTATUS_UNDEFINED =
    Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_UNDEFINED;
  static const Esp_epberrorstatusType ESP_EPBERRORSTATUS_NO_ERROR =
    Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_NO_ERROR;
  static const Esp_epberrorstatusType ESP_EPBERRORSTATUS_ERROR =
    Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_ERROR;
  static const Esp_epberrorstatusType ESP_EPBERRORSTATUS_DIAGNOSIS =
    Esp_status_0x243_243_Esp_epberrorstatusType_ESP_EPBERRORSTATUS_DIAGNOSIS;
  static inline bool Esp_epberrorstatusType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_epberrorstatusType_IsValid(value);
  }
  static const Esp_epberrorstatusType Esp_epberrorstatusType_MIN =
    Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_MIN;
  static const Esp_epberrorstatusType Esp_epberrorstatusType_MAX =
    Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_MAX;
  static const int Esp_epberrorstatusType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_epberrorstatusType_Esp_epberrorstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_epberrorstatusType_descriptor() {
    return Esp_status_0x243_243_Esp_epberrorstatusType_descriptor();
  }
  static inline const ::std::string& Esp_epberrorstatusType_Name(Esp_epberrorstatusType value) {
    return Esp_status_0x243_243_Esp_epberrorstatusType_Name(value);
  }
  static inline bool Esp_epberrorstatusType_Parse(const ::std::string& name,
      Esp_epberrorstatusType* value) {
    return Esp_status_0x243_243_Esp_epberrorstatusType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_ccswitchoffType Esp_ccswitchoffType;
  static const Esp_ccswitchoffType ESP_CCSWITCHOFF_NOT_SWITCH_OFF_CRUISE_CONTROL =
    Esp_status_0x243_243_Esp_ccswitchoffType_ESP_CCSWITCHOFF_NOT_SWITCH_OFF_CRUISE_CONTROL;
  static const Esp_ccswitchoffType ESP_CCSWITCHOFF_SWITCH_OFF_CRUISE_CONTROL =
    Esp_status_0x243_243_Esp_ccswitchoffType_ESP_CCSWITCHOFF_SWITCH_OFF_CRUISE_CONTROL;
  static inline bool Esp_ccswitchoffType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_ccswitchoffType_IsValid(value);
  }
  static const Esp_ccswitchoffType Esp_ccswitchoffType_MIN =
    Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_MIN;
  static const Esp_ccswitchoffType Esp_ccswitchoffType_MAX =
    Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_MAX;
  static const int Esp_ccswitchoffType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_ccswitchoffType_Esp_ccswitchoffType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_ccswitchoffType_descriptor() {
    return Esp_status_0x243_243_Esp_ccswitchoffType_descriptor();
  }
  static inline const ::std::string& Esp_ccswitchoffType_Name(Esp_ccswitchoffType value) {
    return Esp_status_0x243_243_Esp_ccswitchoffType_Name(value);
  }
  static inline bool Esp_ccswitchoffType_Parse(const ::std::string& name,
      Esp_ccswitchoffType* value) {
    return Esp_status_0x243_243_Esp_ccswitchoffType_Parse(name, value);
  }

  typedef Esp_status_0x243_243_Esp_hdcavailableType Esp_hdcavailableType;
  static const Esp_hdcavailableType ESP_HDCAVAILABLE_AVAILABLE =
    Esp_status_0x243_243_Esp_hdcavailableType_ESP_HDCAVAILABLE_AVAILABLE;
  static const Esp_hdcavailableType ESP_HDCAVAILABLE_NOT_AVAILABLE =
    Esp_status_0x243_243_Esp_hdcavailableType_ESP_HDCAVAILABLE_NOT_AVAILABLE;
  static inline bool Esp_hdcavailableType_IsValid(int value) {
    return Esp_status_0x243_243_Esp_hdcavailableType_IsValid(value);
  }
  static const Esp_hdcavailableType Esp_hdcavailableType_MIN =
    Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_MIN;
  static const Esp_hdcavailableType Esp_hdcavailableType_MAX =
    Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_MAX;
  static const int Esp_hdcavailableType_ARRAYSIZE =
    Esp_status_0x243_243_Esp_hdcavailableType_Esp_hdcavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_hdcavailableType_descriptor() {
    return Esp_status_0x243_243_Esp_hdcavailableType_descriptor();
  }
  static inline const ::std::string& Esp_hdcavailableType_Name(Esp_hdcavailableType value) {
    return Esp_status_0x243_243_Esp_hdcavailableType_Name(value);
  }
  static inline bool Esp_hdcavailableType_Parse(const ::std::string& name,
      Esp_hdcavailableType* value) {
    return Esp_status_0x243_243_Esp_hdcavailableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
  bool has_esp_hhcavailable() const;
  void clear_esp_hhcavailable();
  static const int kEspHhcavailableFieldNumber = 1;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType esp_hhcavailable() const;
  void set_esp_hhcavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
  bool has_esp_hhcactive() const;
  void clear_esp_hhcactive();
  static const int kEspHhcactiveFieldNumber = 2;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType esp_hhcactive() const;
  void set_esp_hhcactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
  bool has_esp_hdcactive() const;
  void clear_esp_hdcactive();
  static const int kEspHdcactiveFieldNumber = 3;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType esp_hdcactive() const;
  void set_esp_hdcactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
  bool has_esp_ldmblc_blrequestcontroller() const;
  void clear_esp_ldmblc_blrequestcontroller();
  static const int kEspLdmblcBlrequestcontrollerFieldNumber = 4;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller() const;
  void set_esp_ldmblc_blrequestcontroller(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
  bool has_esp_cdpavailable() const;
  void clear_esp_cdpavailable();
  static const int kEspCdpavailableFieldNumber = 5;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType esp_cdpavailable() const;
  void set_esp_cdpavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
  bool has_esp_cdpactive() const;
  void clear_esp_cdpactive();
  static const int kEspCdpactiveFieldNumber = 6;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType esp_cdpactive() const;
  void set_esp_cdpactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
  bool has_esp_epbwarningmessage3() const;
  void clear_esp_epbwarningmessage3();
  static const int kEspEpbwarningmessage3FieldNumber = 7;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type esp_epbwarningmessage3() const;
  void set_esp_epbwarningmessage3(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
  bool has_esp_epbwarningmessage2() const;
  void clear_esp_epbwarningmessage2();
  static const int kEspEpbwarningmessage2FieldNumber = 8;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type esp_epbwarningmessage2() const;
  void set_esp_epbwarningmessage2(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
  bool has_esp_epbwarningmessage1() const;
  void clear_esp_epbwarningmessage1();
  static const int kEspEpbwarningmessage1FieldNumber = 9;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type esp_epbwarningmessage1() const;
  void set_esp_epbwarningmessage1(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
  bool has_esp_avhwarningmessage() const;
  void clear_esp_avhwarningmessage();
  static const int kEspAvhwarningmessageFieldNumber = 10;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType esp_avhwarningmessage() const;
  void set_esp_avhwarningmessage(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
  bool has_esp_avhactive() const;
  void clear_esp_avhactive();
  static const int kEspAvhactiveFieldNumber = 11;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType esp_avhactive() const;
  void set_esp_avhactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
  bool has_esp_avhstandby() const;
  void clear_esp_avhstandby();
  static const int kEspAvhstandbyFieldNumber = 12;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType esp_avhstandby() const;
  void set_esp_avhstandby(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
  bool has_esp_avhavabliable() const;
  void clear_esp_avhavabliable();
  static const int kEspAvhavabliableFieldNumber = 13;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType esp_avhavabliable() const;
  void set_esp_avhavabliable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
  bool has_esp_vdcflgflt() const;
  void clear_esp_vdcflgflt();
  static const int kEspVdcflgfltFieldNumber = 14;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType esp_vdcflgflt() const;
  void set_esp_vdcflgflt(::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
  bool has_esp_tcsflgflt() const;
  void clear_esp_tcsflgflt();
  static const int kEspTcsflgfltFieldNumber = 15;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType esp_tcsflgflt() const;
  void set_esp_tcsflgflt(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
  bool has_esp_tcsctrlactv() const;
  void clear_esp_tcsctrlactv();
  static const int kEspTcsctrlactvFieldNumber = 16;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType esp_tcsctrlactv() const;
  void set_esp_tcsctrlactv(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
  bool has_esp_espctrlactv() const;
  void clear_esp_espctrlactv();
  static const int kEspEspctrlactvFieldNumber = 17;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType esp_espctrlactv() const;
  void set_esp_espctrlactv(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
  bool has_esp_driving_mode_req() const;
  void clear_esp_driving_mode_req();
  static const int kEspDrivingModeReqFieldNumber = 18;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType esp_driving_mode_req() const;
  void set_esp_driving_mode_req(::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
  bool has_esp_espinfolamp() const;
  void clear_esp_espinfolamp();
  static const int kEspEspinfolampFieldNumber = 19;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType esp_espinfolamp() const;
  void set_esp_espinfolamp(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
  bool has_esp_espenablests() const;
  void clear_esp_espenablests();
  static const int kEspEspenablestsFieldNumber = 20;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType esp_espenablests() const;
  void set_esp_espenablests(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
  bool has_esp_gearshiftprevn() const;
  void clear_esp_gearshiftprevn();
  static const int kEspGearshiftprevnFieldNumber = 21;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType esp_gearshiftprevn() const;
  void set_esp_gearshiftprevn(::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
  bool has_esp_epbstatus() const;
  void clear_esp_epbstatus();
  static const int kEspEpbstatusFieldNumber = 22;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType esp_epbstatus() const;
  void set_esp_epbstatus(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType value);

  // optional int32 rollingcounter_0x243 = 23;
  bool has_rollingcounter_0x243() const;
  void clear_rollingcounter_0x243();
  static const int kRollingcounter0X243FieldNumber = 23;
  ::google::protobuf::int32 rollingcounter_0x243() const;
  void set_rollingcounter_0x243(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
  bool has_rollerbenchmodests() const;
  void clear_rollerbenchmodests();
  static const int kRollerbenchmodestsFieldNumber = 24;
  ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType rollerbenchmodests() const;
  void set_rollerbenchmodests(::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType value);

  // optional int32 checksum_0x243 = 25;
  bool has_checksum_0x243() const;
  void clear_checksum_0x243();
  static const int kChecksum0X243FieldNumber = 25;
  ::google::protobuf::int32 checksum_0x243() const;
  void set_checksum_0x243(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
  bool has_esp_epberrorstatus() const;
  void clear_esp_epberrorstatus();
  static const int kEspEpberrorstatusFieldNumber = 26;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType esp_epberrorstatus() const;
  void set_esp_epberrorstatus(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
  bool has_esp_ccswitchoff() const;
  void clear_esp_ccswitchoff();
  static const int kEspCcswitchoffFieldNumber = 27;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType esp_ccswitchoff() const;
  void set_esp_ccswitchoff(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType value);

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
  bool has_esp_hdcavailable() const;
  void clear_esp_hdcavailable();
  static const int kEspHdcavailableFieldNumber = 28;
  ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType esp_hdcavailable() const;
  void set_esp_hdcavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_status_0x243_243)
 private:
  void set_has_esp_hhcavailable();
  void clear_has_esp_hhcavailable();
  void set_has_esp_hhcactive();
  void clear_has_esp_hhcactive();
  void set_has_esp_hdcactive();
  void clear_has_esp_hdcactive();
  void set_has_esp_ldmblc_blrequestcontroller();
  void clear_has_esp_ldmblc_blrequestcontroller();
  void set_has_esp_cdpavailable();
  void clear_has_esp_cdpavailable();
  void set_has_esp_cdpactive();
  void clear_has_esp_cdpactive();
  void set_has_esp_epbwarningmessage3();
  void clear_has_esp_epbwarningmessage3();
  void set_has_esp_epbwarningmessage2();
  void clear_has_esp_epbwarningmessage2();
  void set_has_esp_epbwarningmessage1();
  void clear_has_esp_epbwarningmessage1();
  void set_has_esp_avhwarningmessage();
  void clear_has_esp_avhwarningmessage();
  void set_has_esp_avhactive();
  void clear_has_esp_avhactive();
  void set_has_esp_avhstandby();
  void clear_has_esp_avhstandby();
  void set_has_esp_avhavabliable();
  void clear_has_esp_avhavabliable();
  void set_has_esp_vdcflgflt();
  void clear_has_esp_vdcflgflt();
  void set_has_esp_tcsflgflt();
  void clear_has_esp_tcsflgflt();
  void set_has_esp_tcsctrlactv();
  void clear_has_esp_tcsctrlactv();
  void set_has_esp_espctrlactv();
  void clear_has_esp_espctrlactv();
  void set_has_esp_driving_mode_req();
  void clear_has_esp_driving_mode_req();
  void set_has_esp_espinfolamp();
  void clear_has_esp_espinfolamp();
  void set_has_esp_espenablests();
  void clear_has_esp_espenablests();
  void set_has_esp_gearshiftprevn();
  void clear_has_esp_gearshiftprevn();
  void set_has_esp_epbstatus();
  void clear_has_esp_epbstatus();
  void set_has_rollingcounter_0x243();
  void clear_has_rollingcounter_0x243();
  void set_has_rollerbenchmodests();
  void clear_has_rollerbenchmodests();
  void set_has_checksum_0x243();
  void clear_has_checksum_0x243();
  void set_has_esp_epberrorstatus();
  void clear_has_esp_epberrorstatus();
  void set_has_esp_ccswitchoff();
  void clear_has_esp_ccswitchoff();
  void set_has_esp_hdcavailable();
  void clear_has_esp_hdcavailable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int esp_hhcavailable_;
  int esp_hhcactive_;
  int esp_hdcactive_;
  int esp_ldmblc_blrequestcontroller_;
  int esp_cdpavailable_;
  int esp_cdpactive_;
  int esp_epbwarningmessage3_;
  int esp_epbwarningmessage2_;
  int esp_epbwarningmessage1_;
  int esp_avhwarningmessage_;
  int esp_avhactive_;
  int esp_avhstandby_;
  int esp_avhavabliable_;
  int esp_vdcflgflt_;
  int esp_tcsflgflt_;
  int esp_tcsctrlactv_;
  int esp_espctrlactv_;
  int esp_driving_mode_req_;
  int esp_espinfolamp_;
  int esp_espenablests_;
  int esp_gearshiftprevn_;
  int esp_epbstatus_;
  ::google::protobuf::int32 rollingcounter_0x243_;
  int rollerbenchmodests_;
  ::google::protobuf::int32 checksum_0x243_;
  int esp_epberrorstatus_;
  int esp_ccswitchoff_;
  int esp_hdcavailable_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_axay_0x242_242 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_axay_0x242_242) */ {
 public:
  Esp_axay_0x242_242();
  virtual ~Esp_axay_0x242_242();

  Esp_axay_0x242_242(const Esp_axay_0x242_242& from);

  inline Esp_axay_0x242_242& operator=(const Esp_axay_0x242_242& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_axay_0x242_242& default_instance();

  static inline const Esp_axay_0x242_242* internal_default_instance() {
    return reinterpret_cast<const Esp_axay_0x242_242*>(
               &_Esp_axay_0x242_242_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(Esp_axay_0x242_242* other);

  // implements Message ----------------------------------------------

  inline Esp_axay_0x242_242* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_axay_0x242_242* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_axay_0x242_242& from);
  void MergeFrom(const Esp_axay_0x242_242& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_axay_0x242_242* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_axay_0x242_242_Esp_yawratestatusType Esp_yawratestatusType;
  static const Esp_yawratestatusType ESP_YAWRATESTATUS_OK =
    Esp_axay_0x242_242_Esp_yawratestatusType_ESP_YAWRATESTATUS_OK;
  static const Esp_yawratestatusType ESP_YAWRATESTATUS_FAULT =
    Esp_axay_0x242_242_Esp_yawratestatusType_ESP_YAWRATESTATUS_FAULT;
  static inline bool Esp_yawratestatusType_IsValid(int value) {
    return Esp_axay_0x242_242_Esp_yawratestatusType_IsValid(value);
  }
  static const Esp_yawratestatusType Esp_yawratestatusType_MIN =
    Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_MIN;
  static const Esp_yawratestatusType Esp_yawratestatusType_MAX =
    Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_MAX;
  static const int Esp_yawratestatusType_ARRAYSIZE =
    Esp_axay_0x242_242_Esp_yawratestatusType_Esp_yawratestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_yawratestatusType_descriptor() {
    return Esp_axay_0x242_242_Esp_yawratestatusType_descriptor();
  }
  static inline const ::std::string& Esp_yawratestatusType_Name(Esp_yawratestatusType value) {
    return Esp_axay_0x242_242_Esp_yawratestatusType_Name(value);
  }
  static inline bool Esp_yawratestatusType_Parse(const ::std::string& name,
      Esp_yawratestatusType* value) {
    return Esp_axay_0x242_242_Esp_yawratestatusType_Parse(name, value);
  }

  typedef Esp_axay_0x242_242_Esp_alatstatusType Esp_alatstatusType;
  static const Esp_alatstatusType ESP_ALATSTATUS_OK =
    Esp_axay_0x242_242_Esp_alatstatusType_ESP_ALATSTATUS_OK;
  static const Esp_alatstatusType ESP_ALATSTATUS_FAULT =
    Esp_axay_0x242_242_Esp_alatstatusType_ESP_ALATSTATUS_FAULT;
  static inline bool Esp_alatstatusType_IsValid(int value) {
    return Esp_axay_0x242_242_Esp_alatstatusType_IsValid(value);
  }
  static const Esp_alatstatusType Esp_alatstatusType_MIN =
    Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_MIN;
  static const Esp_alatstatusType Esp_alatstatusType_MAX =
    Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_MAX;
  static const int Esp_alatstatusType_ARRAYSIZE =
    Esp_axay_0x242_242_Esp_alatstatusType_Esp_alatstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_alatstatusType_descriptor() {
    return Esp_axay_0x242_242_Esp_alatstatusType_descriptor();
  }
  static inline const ::std::string& Esp_alatstatusType_Name(Esp_alatstatusType value) {
    return Esp_axay_0x242_242_Esp_alatstatusType_Name(value);
  }
  static inline bool Esp_alatstatusType_Parse(const ::std::string& name,
      Esp_alatstatusType* value) {
    return Esp_axay_0x242_242_Esp_alatstatusType_Parse(name, value);
  }

  typedef Esp_axay_0x242_242_Esp_algtstatusType Esp_algtstatusType;
  static const Esp_algtstatusType ESP_ALGTSTATUS_OK =
    Esp_axay_0x242_242_Esp_algtstatusType_ESP_ALGTSTATUS_OK;
  static const Esp_algtstatusType ESP_ALGTSTATUS_FAULT =
    Esp_axay_0x242_242_Esp_algtstatusType_ESP_ALGTSTATUS_FAULT;
  static inline bool Esp_algtstatusType_IsValid(int value) {
    return Esp_axay_0x242_242_Esp_algtstatusType_IsValid(value);
  }
  static const Esp_algtstatusType Esp_algtstatusType_MIN =
    Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_MIN;
  static const Esp_algtstatusType Esp_algtstatusType_MAX =
    Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_MAX;
  static const int Esp_algtstatusType_ARRAYSIZE =
    Esp_axay_0x242_242_Esp_algtstatusType_Esp_algtstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_algtstatusType_descriptor() {
    return Esp_axay_0x242_242_Esp_algtstatusType_descriptor();
  }
  static inline const ::std::string& Esp_algtstatusType_Name(Esp_algtstatusType value) {
    return Esp_axay_0x242_242_Esp_algtstatusType_Name(value);
  }
  static inline bool Esp_algtstatusType_Parse(const ::std::string& name,
      Esp_algtstatusType* value) {
    return Esp_axay_0x242_242_Esp_algtstatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double esp_alat = 1;
  bool has_esp_alat() const;
  void clear_esp_alat();
  static const int kEspAlatFieldNumber = 1;
  double esp_alat() const;
  void set_esp_alat(double value);

  // optional double esp_yawrate = 2;
  bool has_esp_yawrate() const;
  void clear_esp_yawrate();
  static const int kEspYawrateFieldNumber = 2;
  double esp_yawrate() const;
  void set_esp_yawrate(double value);

  // optional int32 rolling_counter_0x242 = 3;
  bool has_rolling_counter_0x242() const;
  void clear_rolling_counter_0x242();
  static const int kRollingCounter0X242FieldNumber = 3;
  ::google::protobuf::int32 rolling_counter_0x242() const;
  void set_rolling_counter_0x242(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
  bool has_esp_yawratestatus() const;
  void clear_esp_yawratestatus();
  static const int kEspYawratestatusFieldNumber = 4;
  ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType esp_yawratestatus() const;
  void set_esp_yawratestatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType value);

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
  bool has_esp_alatstatus() const;
  void clear_esp_alatstatus();
  static const int kEspAlatstatusFieldNumber = 5;
  ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType esp_alatstatus() const;
  void set_esp_alatstatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType value);

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
  bool has_esp_algtstatus() const;
  void clear_esp_algtstatus();
  static const int kEspAlgtstatusFieldNumber = 6;
  ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType esp_algtstatus() const;
  void set_esp_algtstatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType value);

  // optional double esp_algt = 8;
  bool has_esp_algt() const;
  void clear_esp_algt();
  static const int kEspAlgtFieldNumber = 8;
  double esp_algt() const;
  void set_esp_algt(double value);

  // optional int32 checksum_0x242 = 7;
  bool has_checksum_0x242() const;
  void clear_checksum_0x242();
  static const int kChecksum0X242FieldNumber = 7;
  ::google::protobuf::int32 checksum_0x242() const;
  void set_checksum_0x242(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_axay_0x242_242)
 private:
  void set_has_esp_alat();
  void clear_has_esp_alat();
  void set_has_esp_yawrate();
  void clear_has_esp_yawrate();
  void set_has_rolling_counter_0x242();
  void clear_has_rolling_counter_0x242();
  void set_has_esp_yawratestatus();
  void clear_has_esp_yawratestatus();
  void set_has_esp_alatstatus();
  void clear_has_esp_alatstatus();
  void set_has_esp_algtstatus();
  void clear_has_esp_algtstatus();
  void set_has_checksum_0x242();
  void clear_has_checksum_0x242();
  void set_has_esp_algt();
  void clear_has_esp_algt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double esp_alat_;
  double esp_yawrate_;
  ::google::protobuf::int32 rolling_counter_0x242_;
  int esp_yawratestatus_;
  int esp_alatstatus_;
  int esp_algtstatus_;
  double esp_algt_;
  ::google::protobuf::int32 checksum_0x242_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_swm_mrr_0x31b_31b : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b) */ {
 public:
  Gw_swm_mrr_0x31b_31b();
  virtual ~Gw_swm_mrr_0x31b_31b();

  Gw_swm_mrr_0x31b_31b(const Gw_swm_mrr_0x31b_31b& from);

  inline Gw_swm_mrr_0x31b_31b& operator=(const Gw_swm_mrr_0x31b_31b& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_swm_mrr_0x31b_31b& default_instance();

  static inline const Gw_swm_mrr_0x31b_31b* internal_default_instance() {
    return reinterpret_cast<const Gw_swm_mrr_0x31b_31b*>(
               &_Gw_swm_mrr_0x31b_31b_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(Gw_swm_mrr_0x31b_31b* other);

  // implements Message ----------------------------------------------

  inline Gw_swm_mrr_0x31b_31b* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_swm_mrr_0x31b_31b* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_swm_mrr_0x31b_31b& from);
  void MergeFrom(const Gw_swm_mrr_0x31b_31b& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_swm_mrr_0x31b_31b* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Swm_acctaugapsetplusType;
  static const Swm_acctaugapsetplusType SWM_ACCTAUGAPSETPLUS_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_SWM_ACCTAUGAPSETPLUS_NO_PRESS;
  static const Swm_acctaugapsetplusType SWM_ACCTAUGAPSETPLUS_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_SWM_ACCTAUGAPSETPLUS_PRESSED;
  static inline bool Swm_acctaugapsetplusType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_IsValid(value);
  }
  static const Swm_acctaugapsetplusType Swm_acctaugapsetplusType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_MIN;
  static const Swm_acctaugapsetplusType Swm_acctaugapsetplusType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_MAX;
  static const int Swm_acctaugapsetplusType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Swm_acctaugapsetplusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_acctaugapsetplusType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_descriptor();
  }
  static inline const ::std::string& Swm_acctaugapsetplusType_Name(Swm_acctaugapsetplusType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Name(value);
  }
  static inline bool Swm_acctaugapsetplusType_Parse(const ::std::string& name,
      Swm_acctaugapsetplusType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Swm_accvsetminusType;
  static const Swm_accvsetminusType SWM_ACCVSETMINUS_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_SWM_ACCVSETMINUS_NO_PRESS;
  static const Swm_accvsetminusType SWM_ACCVSETMINUS_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_SWM_ACCVSETMINUS_PRESSED;
  static inline bool Swm_accvsetminusType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_IsValid(value);
  }
  static const Swm_accvsetminusType Swm_accvsetminusType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_MIN;
  static const Swm_accvsetminusType Swm_accvsetminusType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_MAX;
  static const int Swm_accvsetminusType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Swm_accvsetminusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accvsetminusType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_descriptor();
  }
  static inline const ::std::string& Swm_accvsetminusType_Name(Swm_accvsetminusType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Name(value);
  }
  static inline bool Swm_accvsetminusType_Parse(const ::std::string& name,
      Swm_accvsetminusType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Swm_shiftpadrequpType;
  static const Swm_shiftpadrequpType SWM_SHIFTPADREQUP_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_SWM_SHIFTPADREQUP_NO_PRESS;
  static const Swm_shiftpadrequpType SWM_SHIFTPADREQUP_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_SWM_SHIFTPADREQUP_PRESS;
  static inline bool Swm_shiftpadrequpType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_IsValid(value);
  }
  static const Swm_shiftpadrequpType Swm_shiftpadrequpType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_MIN;
  static const Swm_shiftpadrequpType Swm_shiftpadrequpType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_MAX;
  static const int Swm_shiftpadrequpType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Swm_shiftpadrequpType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_shiftpadrequpType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_descriptor();
  }
  static inline const ::std::string& Swm_shiftpadrequpType_Name(Swm_shiftpadrequpType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Name(value);
  }
  static inline bool Swm_shiftpadrequpType_Parse(const ::std::string& name,
      Swm_shiftpadrequpType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Swm_acclimphomestsType;
  static const Swm_acclimphomestsType SWM_ACCLIMPHOMESTS_NORMAL =
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_SWM_ACCLIMPHOMESTS_NORMAL;
  static const Swm_acclimphomestsType SWM_ACCLIMPHOMESTS_LIMPHOME =
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_SWM_ACCLIMPHOMESTS_LIMPHOME;
  static inline bool Swm_acclimphomestsType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_IsValid(value);
  }
  static const Swm_acclimphomestsType Swm_acclimphomestsType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_MIN;
  static const Swm_acclimphomestsType Swm_acclimphomestsType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_MAX;
  static const int Swm_acclimphomestsType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Swm_acclimphomestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_acclimphomestsType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_descriptor();
  }
  static inline const ::std::string& Swm_acclimphomestsType_Name(Swm_acclimphomestsType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Name(value);
  }
  static inline bool Swm_acclimphomestsType_Parse(const ::std::string& name,
      Swm_acclimphomestsType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Swm_laneassistswitchType;
  static const Swm_laneassistswitchType SWM_LANEASSISTSWITCH_PREVENT_LANEASSIST_CONTROL =
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_SWM_LANEASSISTSWITCH_PREVENT_LANEASSIST_CONTROL;
  static const Swm_laneassistswitchType SWM_LANEASSISTSWITCH_ENABLE_LANEASSIST_CONTROL =
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_SWM_LANEASSISTSWITCH_ENABLE_LANEASSIST_CONTROL;
  static inline bool Swm_laneassistswitchType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_IsValid(value);
  }
  static const Swm_laneassistswitchType Swm_laneassistswitchType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_MIN;
  static const Swm_laneassistswitchType Swm_laneassistswitchType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_MAX;
  static const int Swm_laneassistswitchType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Swm_laneassistswitchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_laneassistswitchType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_descriptor();
  }
  static inline const ::std::string& Swm_laneassistswitchType_Name(Swm_laneassistswitchType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Name(value);
  }
  static inline bool Swm_laneassistswitchType_Parse(const ::std::string& name,
      Swm_laneassistswitchType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Swm_acctaugapsetminusType;
  static const Swm_acctaugapsetminusType SWM_ACCTAUGAPSETMINUS_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_SWM_ACCTAUGAPSETMINUS_NO_PRESS;
  static const Swm_acctaugapsetminusType SWM_ACCTAUGAPSETMINUS_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_SWM_ACCTAUGAPSETMINUS_PRESSED;
  static inline bool Swm_acctaugapsetminusType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_IsValid(value);
  }
  static const Swm_acctaugapsetminusType Swm_acctaugapsetminusType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_MIN;
  static const Swm_acctaugapsetminusType Swm_acctaugapsetminusType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_MAX;
  static const int Swm_acctaugapsetminusType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Swm_acctaugapsetminusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_acctaugapsetminusType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_descriptor();
  }
  static inline const ::std::string& Swm_acctaugapsetminusType_Name(Swm_acctaugapsetminusType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Name(value);
  }
  static inline bool Swm_acctaugapsetminusType_Parse(const ::std::string& name,
      Swm_acctaugapsetminusType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Swm_accvsetplusType;
  static const Swm_accvsetplusType SWM_ACCVSETPLUS_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_SWM_ACCVSETPLUS_NO_PRESS;
  static const Swm_accvsetplusType SWM_ACCVSETPLUS_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_SWM_ACCVSETPLUS_PRESSED;
  static inline bool Swm_accvsetplusType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_IsValid(value);
  }
  static const Swm_accvsetplusType Swm_accvsetplusType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_MIN;
  static const Swm_accvsetplusType Swm_accvsetplusType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_MAX;
  static const int Swm_accvsetplusType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Swm_accvsetplusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accvsetplusType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_descriptor();
  }
  static inline const ::std::string& Swm_accvsetplusType_Name(Swm_accvsetplusType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Name(value);
  }
  static inline bool Swm_accvsetplusType_Parse(const ::std::string& name,
      Swm_accvsetplusType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Swm_shiftpadfltType;
  static const Swm_shiftpadfltType SWM_SHIFTPADFLT_NO_FAULT =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_SWM_SHIFTPADFLT_NO_FAULT;
  static const Swm_shiftpadfltType SWM_SHIFTPADFLT_FAULT =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_SWM_SHIFTPADFLT_FAULT;
  static inline bool Swm_shiftpadfltType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_IsValid(value);
  }
  static const Swm_shiftpadfltType Swm_shiftpadfltType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_MIN;
  static const Swm_shiftpadfltType Swm_shiftpadfltType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_MAX;
  static const int Swm_shiftpadfltType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Swm_shiftpadfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_shiftpadfltType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_descriptor();
  }
  static inline const ::std::string& Swm_shiftpadfltType_Name(Swm_shiftpadfltType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Name(value);
  }
  static inline bool Swm_shiftpadfltType_Parse(const ::std::string& name,
      Swm_shiftpadfltType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Swm_accdeactivateType;
  static const Swm_accdeactivateType SWM_ACCDEACTIVATE_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_SWM_ACCDEACTIVATE_NO_PRESS;
  static const Swm_accdeactivateType SWM_ACCDEACTIVATE_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_SWM_ACCDEACTIVATE_PRESSED;
  static inline bool Swm_accdeactivateType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_IsValid(value);
  }
  static const Swm_accdeactivateType Swm_accdeactivateType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_MIN;
  static const Swm_accdeactivateType Swm_accdeactivateType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_MAX;
  static const int Swm_accdeactivateType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Swm_accdeactivateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accdeactivateType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_descriptor();
  }
  static inline const ::std::string& Swm_accdeactivateType_Name(Swm_accdeactivateType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Name(value);
  }
  static inline bool Swm_accdeactivateType_Parse(const ::std::string& name,
      Swm_accdeactivateType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accresumeType Swm_accresumeType;
  static const Swm_accresumeType SWM_ACCRESUME_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_SWM_ACCRESUME_NO_PRESS;
  static const Swm_accresumeType SWM_ACCRESUME_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_SWM_ACCRESUME_PRESSED;
  static inline bool Swm_accresumeType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accresumeType_IsValid(value);
  }
  static const Swm_accresumeType Swm_accresumeType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_MIN;
  static const Swm_accresumeType Swm_accresumeType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_MAX;
  static const int Swm_accresumeType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Swm_accresumeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accresumeType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accresumeType_descriptor();
  }
  static inline const ::std::string& Swm_accresumeType_Name(Swm_accresumeType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Name(value);
  }
  static inline bool Swm_accresumeType_Parse(const ::std::string& name,
      Swm_accresumeType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accresumeType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accsetType Swm_accsetType;
  static const Swm_accsetType SWM_ACCSET_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_SWM_ACCSET_NO_PRESS;
  static const Swm_accsetType SWM_ACCSET_PRESSED =
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_SWM_ACCSET_PRESSED;
  static inline bool Swm_accsetType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accsetType_IsValid(value);
  }
  static const Swm_accsetType Swm_accsetType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_MIN;
  static const Swm_accsetType Swm_accsetType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_MAX;
  static const int Swm_accsetType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accsetType_Swm_accsetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accsetType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accsetType_descriptor();
  }
  static inline const ::std::string& Swm_accsetType_Name(Swm_accsetType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accsetType_Name(value);
  }
  static inline bool Swm_accsetType_Parse(const ::std::string& name,
      Swm_accsetType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accsetType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Swm_accenableswitchType;
  static const Swm_accenableswitchType SWM_ACCENABLESWITCH_PREVENT_ACC_CONTROL =
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_SWM_ACCENABLESWITCH_PREVENT_ACC_CONTROL;
  static const Swm_accenableswitchType SWM_ACCENABLESWITCH_ENABLE_ACC_CONTROL =
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_SWM_ACCENABLESWITCH_ENABLE_ACC_CONTROL;
  static inline bool Swm_accenableswitchType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_IsValid(value);
  }
  static const Swm_accenableswitchType Swm_accenableswitchType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_MIN;
  static const Swm_accenableswitchType Swm_accenableswitchType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_MAX;
  static const int Swm_accenableswitchType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Swm_accenableswitchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accenableswitchType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_descriptor();
  }
  static inline const ::std::string& Swm_accenableswitchType_Name(Swm_accenableswitchType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Name(value);
  }
  static inline bool Swm_accenableswitchType_Parse(const ::std::string& name,
      Swm_accenableswitchType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Swm_accresume_qtType;
  static const Swm_accresume_qtType SWM_ACCRESUME_QT_VALID =
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_SWM_ACCRESUME_QT_VALID;
  static const Swm_accresume_qtType SWM_ACCRESUME_QT_INVALID =
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_SWM_ACCRESUME_QT_INVALID;
  static inline bool Swm_accresume_qtType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_IsValid(value);
  }
  static const Swm_accresume_qtType Swm_accresume_qtType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_MIN;
  static const Swm_accresume_qtType Swm_accresume_qtType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_MAX;
  static const int Swm_accresume_qtType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Swm_accresume_qtType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_accresume_qtType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_descriptor();
  }
  static inline const ::std::string& Swm_accresume_qtType_Name(Swm_accresume_qtType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Name(value);
  }
  static inline bool Swm_accresume_qtType_Parse(const ::std::string& name,
      Swm_accresume_qtType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Swm_tjaswitchType;
  static const Swm_tjaswitchType SWM_TJASWITCH_PREVENT_TJA_CONTROL =
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_SWM_TJASWITCH_PREVENT_TJA_CONTROL;
  static const Swm_tjaswitchType SWM_TJASWITCH_ENABLE_TJA_CONTROL =
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_SWM_TJASWITCH_ENABLE_TJA_CONTROL;
  static inline bool Swm_tjaswitchType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_IsValid(value);
  }
  static const Swm_tjaswitchType Swm_tjaswitchType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_MIN;
  static const Swm_tjaswitchType Swm_tjaswitchType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_MAX;
  static const int Swm_tjaswitchType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Swm_tjaswitchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_tjaswitchType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_descriptor();
  }
  static inline const ::std::string& Swm_tjaswitchType_Name(Swm_tjaswitchType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Name(value);
  }
  static inline bool Swm_tjaswitchType_Parse(const ::std::string& name,
      Swm_tjaswitchType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_Parse(name, value);
  }

  typedef Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Swm_shiftpadreqdownType;
  static const Swm_shiftpadreqdownType SWM_SHIFTPADREQDOWN_NO_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_SWM_SHIFTPADREQDOWN_NO_PRESS;
  static const Swm_shiftpadreqdownType SWM_SHIFTPADREQDOWN_PRESS =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_SWM_SHIFTPADREQDOWN_PRESS;
  static inline bool Swm_shiftpadreqdownType_IsValid(int value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_IsValid(value);
  }
  static const Swm_shiftpadreqdownType Swm_shiftpadreqdownType_MIN =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_MIN;
  static const Swm_shiftpadreqdownType Swm_shiftpadreqdownType_MAX =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_MAX;
  static const int Swm_shiftpadreqdownType_ARRAYSIZE =
    Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Swm_shiftpadreqdownType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_shiftpadreqdownType_descriptor() {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_descriptor();
  }
  static inline const ::std::string& Swm_shiftpadreqdownType_Name(Swm_shiftpadreqdownType value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Name(value);
  }
  static inline bool Swm_shiftpadreqdownType_Parse(const ::std::string& name,
      Swm_shiftpadreqdownType* value) {
    return Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
  bool has_swm_acctaugapsetplus() const;
  void clear_swm_acctaugapsetplus();
  static const int kSwmAcctaugapsetplusFieldNumber = 1;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType swm_acctaugapsetplus() const;
  void set_swm_acctaugapsetplus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
  bool has_swm_accvsetminus() const;
  void clear_swm_accvsetminus();
  static const int kSwmAccvsetminusFieldNumber = 2;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType swm_accvsetminus() const;
  void set_swm_accvsetminus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
  bool has_swm_shiftpadrequp() const;
  void clear_swm_shiftpadrequp();
  static const int kSwmShiftpadrequpFieldNumber = 3;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType swm_shiftpadrequp() const;
  void set_swm_shiftpadrequp(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
  bool has_swm_acclimphomests() const;
  void clear_swm_acclimphomests();
  static const int kSwmAcclimphomestsFieldNumber = 4;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType swm_acclimphomests() const;
  void set_swm_acclimphomests(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
  bool has_swm_laneassistswitch() const;
  void clear_swm_laneassistswitch();
  static const int kSwmLaneassistswitchFieldNumber = 5;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType swm_laneassistswitch() const;
  void set_swm_laneassistswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
  bool has_swm_acctaugapsetminus() const;
  void clear_swm_acctaugapsetminus();
  static const int kSwmAcctaugapsetminusFieldNumber = 6;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType swm_acctaugapsetminus() const;
  void set_swm_acctaugapsetminus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
  bool has_swm_accvsetplus() const;
  void clear_swm_accvsetplus();
  static const int kSwmAccvsetplusFieldNumber = 7;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType swm_accvsetplus() const;
  void set_swm_accvsetplus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
  bool has_swm_shiftpadflt() const;
  void clear_swm_shiftpadflt();
  static const int kSwmShiftpadfltFieldNumber = 8;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType swm_shiftpadflt() const;
  void set_swm_shiftpadflt(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
  bool has_swm_accdeactivate() const;
  void clear_swm_accdeactivate();
  static const int kSwmAccdeactivateFieldNumber = 9;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType swm_accdeactivate() const;
  void set_swm_accdeactivate(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
  bool has_swm_accresume() const;
  void clear_swm_accresume();
  static const int kSwmAccresumeFieldNumber = 10;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType swm_accresume() const;
  void set_swm_accresume(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
  bool has_swm_accset() const;
  void clear_swm_accset();
  static const int kSwmAccsetFieldNumber = 11;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType swm_accset() const;
  void set_swm_accset(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType value);

  // optional int32 rolling_counter_0x31b = 12;
  bool has_rolling_counter_0x31b() const;
  void clear_rolling_counter_0x31b();
  static const int kRollingCounter0X31BFieldNumber = 12;
  ::google::protobuf::int32 rolling_counter_0x31b() const;
  void set_rolling_counter_0x31b(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
  bool has_swm_accenableswitch() const;
  void clear_swm_accenableswitch();
  static const int kSwmAccenableswitchFieldNumber = 13;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType swm_accenableswitch() const;
  void set_swm_accenableswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType value);

  // optional int32 checksum_0x31b = 14;
  bool has_checksum_0x31b() const;
  void clear_checksum_0x31b();
  static const int kChecksum0X31BFieldNumber = 14;
  ::google::protobuf::int32 checksum_0x31b() const;
  void set_checksum_0x31b(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
  bool has_swm_accresume_qt() const;
  void clear_swm_accresume_qt();
  static const int kSwmAccresumeQtFieldNumber = 15;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType swm_accresume_qt() const;
  void set_swm_accresume_qt(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
  bool has_swm_tjaswitch() const;
  void clear_swm_tjaswitch();
  static const int kSwmTjaswitchFieldNumber = 16;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType swm_tjaswitch() const;
  void set_swm_tjaswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType value);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
  bool has_swm_shiftpadreqdown() const;
  void clear_swm_shiftpadreqdown();
  static const int kSwmShiftpadreqdownFieldNumber = 17;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType swm_shiftpadreqdown() const;
  void set_swm_shiftpadreqdown(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
 private:
  void set_has_swm_acctaugapsetplus();
  void clear_has_swm_acctaugapsetplus();
  void set_has_swm_accvsetminus();
  void clear_has_swm_accvsetminus();
  void set_has_swm_shiftpadrequp();
  void clear_has_swm_shiftpadrequp();
  void set_has_swm_acclimphomests();
  void clear_has_swm_acclimphomests();
  void set_has_swm_laneassistswitch();
  void clear_has_swm_laneassistswitch();
  void set_has_swm_acctaugapsetminus();
  void clear_has_swm_acctaugapsetminus();
  void set_has_swm_accvsetplus();
  void clear_has_swm_accvsetplus();
  void set_has_swm_shiftpadflt();
  void clear_has_swm_shiftpadflt();
  void set_has_swm_accdeactivate();
  void clear_has_swm_accdeactivate();
  void set_has_swm_accresume();
  void clear_has_swm_accresume();
  void set_has_swm_accset();
  void clear_has_swm_accset();
  void set_has_rolling_counter_0x31b();
  void clear_has_rolling_counter_0x31b();
  void set_has_swm_accenableswitch();
  void clear_has_swm_accenableswitch();
  void set_has_checksum_0x31b();
  void clear_has_checksum_0x31b();
  void set_has_swm_accresume_qt();
  void clear_has_swm_accresume_qt();
  void set_has_swm_tjaswitch();
  void clear_has_swm_tjaswitch();
  void set_has_swm_shiftpadreqdown();
  void clear_has_swm_shiftpadreqdown();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int swm_acctaugapsetplus_;
  int swm_accvsetminus_;
  int swm_shiftpadrequp_;
  int swm_acclimphomests_;
  int swm_laneassistswitch_;
  int swm_acctaugapsetminus_;
  int swm_accvsetplus_;
  int swm_shiftpadflt_;
  int swm_accdeactivate_;
  int swm_accresume_;
  int swm_accset_;
  ::google::protobuf::int32 rolling_counter_0x31b_;
  int swm_accenableswitch_;
  ::google::protobuf::int32 checksum_0x31b_;
  int swm_accresume_qt_;
  int swm_tjaswitch_;
  int swm_shiftpadreqdown_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_swm_body_0x31a_31a : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_swm_body_0x31a_31a) */ {
 public:
  Gw_swm_body_0x31a_31a();
  virtual ~Gw_swm_body_0x31a_31a();

  Gw_swm_body_0x31a_31a(const Gw_swm_body_0x31a_31a& from);

  inline Gw_swm_body_0x31a_31a& operator=(const Gw_swm_body_0x31a_31a& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_swm_body_0x31a_31a& default_instance();

  static inline const Gw_swm_body_0x31a_31a* internal_default_instance() {
    return reinterpret_cast<const Gw_swm_body_0x31a_31a*>(
               &_Gw_swm_body_0x31a_31a_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Gw_swm_body_0x31a_31a* other);

  // implements Message ----------------------------------------------

  inline Gw_swm_body_0x31a_31a* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_swm_body_0x31a_31a* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_swm_body_0x31a_31a& from);
  void MergeFrom(const Gw_swm_body_0x31a_31a& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_swm_body_0x31a_31a* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_swm_body_0x31a_31a_Swm_highbeamType Swm_highbeamType;
  static const Swm_highbeamType SWM_HIGHBEAM_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_RELEASED;
  static const Swm_highbeamType SWM_HIGHBEAM_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_PRESSED;
  static const Swm_highbeamType SWM_HIGHBEAM_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_RESERVED;
  static const Swm_highbeamType SWM_HIGHBEAM_INVALID =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_SWM_HIGHBEAM_INVALID;
  static inline bool Swm_highbeamType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_highbeamType_IsValid(value);
  }
  static const Swm_highbeamType Swm_highbeamType_MIN =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_MIN;
  static const Swm_highbeamType Swm_highbeamType_MAX =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_MAX;
  static const int Swm_highbeamType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_highbeamType_Swm_highbeamType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_highbeamType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_highbeamType_descriptor();
  }
  static inline const ::std::string& Swm_highbeamType_Name(Swm_highbeamType value) {
    return Gw_swm_body_0x31a_31a_Swm_highbeamType_Name(value);
  }
  static inline bool Swm_highbeamType_Parse(const ::std::string& name,
      Swm_highbeamType* value) {
    return Gw_swm_body_0x31a_31a_Swm_highbeamType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Swm_frontwipingmodeType;
  static const Swm_frontwipingmodeType SWM_FRONTWIPINGMODE_FRONT_WIPING_OFF =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPING_OFF;
  static const Swm_frontwipingmodeType SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_LOW_ACTIVATION =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_LOW_ACTIVATION;
  static const Swm_frontwipingmodeType SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_HIGH_ACTIVATION =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_HIGH_ACTIVATION;
  static const Swm_frontwipingmodeType SWM_FRONTWIPINGMODE_FRONT_MIST_WIPING_ACTIVATION =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_MIST_WIPING_ACTIVATION;
  static const Swm_frontwipingmodeType SWM_FRONTWIPINGMODE_FRONT_AUTO_INTERVAL_WIPING_ACTIVATION =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_FRONT_AUTO_INTERVAL_WIPING_ACTIVATION;
  static const Swm_frontwipingmodeType SWM_FRONTWIPINGMODE_INVALID =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_SWM_FRONTWIPINGMODE_INVALID;
  static inline bool Swm_frontwipingmodeType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_IsValid(value);
  }
  static const Swm_frontwipingmodeType Swm_frontwipingmodeType_MIN =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_MIN;
  static const Swm_frontwipingmodeType Swm_frontwipingmodeType_MAX =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_MAX;
  static const int Swm_frontwipingmodeType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Swm_frontwipingmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_frontwipingmodeType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_descriptor();
  }
  static inline const ::std::string& Swm_frontwipingmodeType_Name(Swm_frontwipingmodeType value) {
    return Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Name(value);
  }
  static inline bool Swm_frontwipingmodeType_Parse(const ::std::string& name,
      Swm_frontwipingmodeType* value) {
    return Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Swm_wipinginterval_sensitvityType;
  static const Swm_wipinginterval_sensitvityType SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_0 =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_0;
  static const Swm_wipinginterval_sensitvityType SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_1 =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_1;
  static const Swm_wipinginterval_sensitvityType SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_2 =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_2;
  static const Swm_wipinginterval_sensitvityType SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_3 =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_3;
  static const Swm_wipinginterval_sensitvityType SWM_WIPINGINTERVAL_SENSITVITY_INVALID =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_SWM_WIPINGINTERVAL_SENSITVITY_INVALID;
  static inline bool Swm_wipinginterval_sensitvityType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_IsValid(value);
  }
  static const Swm_wipinginterval_sensitvityType Swm_wipinginterval_sensitvityType_MIN =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_MIN;
  static const Swm_wipinginterval_sensitvityType Swm_wipinginterval_sensitvityType_MAX =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_MAX;
  static const int Swm_wipinginterval_sensitvityType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Swm_wipinginterval_sensitvityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_wipinginterval_sensitvityType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_descriptor();
  }
  static inline const ::std::string& Swm_wipinginterval_sensitvityType_Name(Swm_wipinginterval_sensitvityType value) {
    return Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Name(value);
  }
  static inline bool Swm_wipinginterval_sensitvityType_Parse(const ::std::string& name,
      Swm_wipinginterval_sensitvityType* value) {
    return Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_rearfoglightType Swm_rearfoglightType;
  static const Swm_rearfoglightType SWM_REARFOGLIGHT_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_RELEASED;
  static const Swm_rearfoglightType SWM_REARFOGLIGHT_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_PRESSED;
  static const Swm_rearfoglightType SWM_REARFOGLIGHT_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_RESERVED;
  static const Swm_rearfoglightType SWM_REARFOGLIGHT_INVALID =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_SWM_REARFOGLIGHT_INVALID;
  static inline bool Swm_rearfoglightType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_rearfoglightType_IsValid(value);
  }
  static const Swm_rearfoglightType Swm_rearfoglightType_MIN =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_MIN;
  static const Swm_rearfoglightType Swm_rearfoglightType_MAX =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_MAX;
  static const int Swm_rearfoglightType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Swm_rearfoglightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_rearfoglightType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_rearfoglightType_descriptor();
  }
  static inline const ::std::string& Swm_rearfoglightType_Name(Swm_rearfoglightType value) {
    return Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Name(value);
  }
  static inline bool Swm_rearfoglightType_Parse(const ::std::string& name,
      Swm_rearfoglightType* value) {
    return Gw_swm_body_0x31a_31a_Swm_rearfoglightType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_frontfoglightType Swm_frontfoglightType;
  static const Swm_frontfoglightType SWM_FRONTFOGLIGHT_OFF =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_OFF;
  static const Swm_frontfoglightType SWM_FRONTFOGLIGHT_ON =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_ON;
  static const Swm_frontfoglightType SWM_FRONTFOGLIGHT_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_RESERVED;
  static const Swm_frontfoglightType SWM_FRONTFOGLIGHT_INVALID =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_SWM_FRONTFOGLIGHT_INVALID;
  static inline bool Swm_frontfoglightType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_frontfoglightType_IsValid(value);
  }
  static const Swm_frontfoglightType Swm_frontfoglightType_MIN =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_MIN;
  static const Swm_frontfoglightType Swm_frontfoglightType_MAX =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_MAX;
  static const int Swm_frontfoglightType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Swm_frontfoglightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_frontfoglightType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_frontfoglightType_descriptor();
  }
  static inline const ::std::string& Swm_frontfoglightType_Name(Swm_frontfoglightType value) {
    return Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Name(value);
  }
  static inline bool Swm_frontfoglightType_Parse(const ::std::string& name,
      Swm_frontfoglightType* value) {
    return Gw_swm_body_0x31a_31a_Swm_frontfoglightType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Swm_washerlimphomestsType;
  static const Swm_washerlimphomestsType SWM_WASHERLIMPHOMESTS_NORMAL =
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_SWM_WASHERLIMPHOMESTS_NORMAL;
  static const Swm_washerlimphomestsType SWM_WASHERLIMPHOMESTS_LIMPHOME =
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_SWM_WASHERLIMPHOMESTS_LIMPHOME;
  static inline bool Swm_washerlimphomestsType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_IsValid(value);
  }
  static const Swm_washerlimphomestsType Swm_washerlimphomestsType_MIN =
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_MIN;
  static const Swm_washerlimphomestsType Swm_washerlimphomestsType_MAX =
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_MAX;
  static const int Swm_washerlimphomestsType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Swm_washerlimphomestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_washerlimphomestsType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_descriptor();
  }
  static inline const ::std::string& Swm_washerlimphomestsType_Name(Swm_washerlimphomestsType value) {
    return Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Name(value);
  }
  static inline bool Swm_washerlimphomestsType_Parse(const ::std::string& name,
      Swm_washerlimphomestsType* value) {
    return Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Swm_rearwipingmodeType;
  static const Swm_rearwipingmodeType SWM_REARWIPINGMODE_REARWIPING_OFF =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_REARWIPING_OFF;
  static const Swm_rearwipingmodeType SWM_REARWIPINGMODE_REAR_WIPER_UNIFORMITY_SPEED =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_REAR_WIPER_UNIFORMITY_SPEED;
  static const Swm_rearwipingmodeType SWM_REARWIPINGMODE_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_RESERVED;
  static const Swm_rearwipingmodeType SWM_REARWIPINGMODE_INVALID =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_SWM_REARWIPINGMODE_INVALID;
  static inline bool Swm_rearwipingmodeType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_IsValid(value);
  }
  static const Swm_rearwipingmodeType Swm_rearwipingmodeType_MIN =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_MIN;
  static const Swm_rearwipingmodeType Swm_rearwipingmodeType_MAX =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_MAX;
  static const int Swm_rearwipingmodeType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Swm_rearwipingmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_rearwipingmodeType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_descriptor();
  }
  static inline const ::std::string& Swm_rearwipingmodeType_Name(Swm_rearwipingmodeType value) {
    return Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Name(value);
  }
  static inline bool Swm_rearwipingmodeType_Parse(const ::std::string& name,
      Swm_rearwipingmodeType* value) {
    return Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_turnindicationactType Swm_turnindicationactType;
  static const Swm_turnindicationactType SWM_TURNINDICATIONACT_DEFAULT =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_DEFAULT;
  static const Swm_turnindicationactType SWM_TURNINDICATIONACT_TURN_LEFT =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_TURN_LEFT;
  static const Swm_turnindicationactType SWM_TURNINDICATIONACT_TURN_RIGHT =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_TURN_RIGHT;
  static const Swm_turnindicationactType SWM_TURNINDICATIONACT_INVALID =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_SWM_TURNINDICATIONACT_INVALID;
  static inline bool Swm_turnindicationactType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_turnindicationactType_IsValid(value);
  }
  static const Swm_turnindicationactType Swm_turnindicationactType_MIN =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_MIN;
  static const Swm_turnindicationactType Swm_turnindicationactType_MAX =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_MAX;
  static const int Swm_turnindicationactType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Swm_turnindicationactType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_turnindicationactType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_turnindicationactType_descriptor();
  }
  static inline const ::std::string& Swm_turnindicationactType_Name(Swm_turnindicationactType value) {
    return Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Name(value);
  }
  static inline bool Swm_turnindicationactType_Parse(const ::std::string& name,
      Swm_turnindicationactType* value) {
    return Gw_swm_body_0x31a_31a_Swm_turnindicationactType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_vol_plusType Swm_vol_plusType;
  static const Swm_vol_plusType SWM_VOL_PLUS_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_RELEASED;
  static const Swm_vol_plusType SWM_VOL_PLUS_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_PRESSED;
  static const Swm_vol_plusType SWM_VOL_PLUS_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_RESERVED;
  static const Swm_vol_plusType SWM_VOL_PLUS_INVALID =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_SWM_VOL_PLUS_INVALID;
  static inline bool Swm_vol_plusType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_vol_plusType_IsValid(value);
  }
  static const Swm_vol_plusType Swm_vol_plusType_MIN =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_MIN;
  static const Swm_vol_plusType Swm_vol_plusType_MAX =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_MAX;
  static const int Swm_vol_plusType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_vol_plusType_Swm_vol_plusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_vol_plusType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_vol_plusType_descriptor();
  }
  static inline const ::std::string& Swm_vol_plusType_Name(Swm_vol_plusType value) {
    return Gw_swm_body_0x31a_31a_Swm_vol_plusType_Name(value);
  }
  static inline bool Swm_vol_plusType_Parse(const ::std::string& name,
      Swm_vol_plusType* value) {
    return Gw_swm_body_0x31a_31a_Swm_vol_plusType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_vol_minusType Swm_vol_minusType;
  static const Swm_vol_minusType SWM_VOL_MINUS_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_RELEASED;
  static const Swm_vol_minusType SWM_VOL_MINUS_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_PRESSED;
  static const Swm_vol_minusType SWM_VOL_MINUS_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_RESERVED;
  static const Swm_vol_minusType SWM_VOL_MINUS_INVALID =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_SWM_VOL_MINUS_INVALID;
  static inline bool Swm_vol_minusType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_vol_minusType_IsValid(value);
  }
  static const Swm_vol_minusType Swm_vol_minusType_MIN =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_MIN;
  static const Swm_vol_minusType Swm_vol_minusType_MAX =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_MAX;
  static const int Swm_vol_minusType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_vol_minusType_Swm_vol_minusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_vol_minusType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_vol_minusType_descriptor();
  }
  static inline const ::std::string& Swm_vol_minusType_Name(Swm_vol_minusType value) {
    return Gw_swm_body_0x31a_31a_Swm_vol_minusType_Name(value);
  }
  static inline bool Swm_vol_minusType_Parse(const ::std::string& name,
      Swm_vol_minusType* value) {
    return Gw_swm_body_0x31a_31a_Swm_vol_minusType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_wechatType Swm_wechatType;
  static const Swm_wechatType SWM_WECHAT_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_wechatType_SWM_WECHAT_RELEASED;
  static const Swm_wechatType SWM_WECHAT_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_wechatType_SWM_WECHAT_PRESSED;
  static inline bool Swm_wechatType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_wechatType_IsValid(value);
  }
  static const Swm_wechatType Swm_wechatType_MIN =
    Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_MIN;
  static const Swm_wechatType Swm_wechatType_MAX =
    Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_MAX;
  static const int Swm_wechatType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_wechatType_Swm_wechatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_wechatType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_wechatType_descriptor();
  }
  static inline const ::std::string& Swm_wechatType_Name(Swm_wechatType value) {
    return Gw_swm_body_0x31a_31a_Swm_wechatType_Name(value);
  }
  static inline bool Swm_wechatType_Parse(const ::std::string& name,
      Swm_wechatType* value) {
    return Gw_swm_body_0x31a_31a_Swm_wechatType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Swm_lamplimphomestsType;
  static const Swm_lamplimphomestsType SWM_LAMPLIMPHOMESTS_NORMAL =
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_SWM_LAMPLIMPHOMESTS_NORMAL;
  static const Swm_lamplimphomestsType SWM_LAMPLIMPHOMESTS_LIMPHOME =
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_SWM_LAMPLIMPHOMESTS_LIMPHOME;
  static inline bool Swm_lamplimphomestsType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_IsValid(value);
  }
  static const Swm_lamplimphomestsType Swm_lamplimphomestsType_MIN =
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_MIN;
  static const Swm_lamplimphomestsType Swm_lamplimphomestsType_MAX =
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_MAX;
  static const int Swm_lamplimphomestsType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Swm_lamplimphomestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_lamplimphomestsType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_descriptor();
  }
  static inline const ::std::string& Swm_lamplimphomestsType_Name(Swm_lamplimphomestsType value) {
    return Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Name(value);
  }
  static inline bool Swm_lamplimphomestsType_Parse(const ::std::string& name,
      Swm_lamplimphomestsType* value) {
    return Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_headlampType Swm_headlampType;
  static const Swm_headlampType SWM_HEADLAMP_OFF =
    Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_OFF;
  static const Swm_headlampType SWM_HEADLAMP_AUTOLIGHT =
    Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_AUTOLIGHT;
  static const Swm_headlampType SWM_HEADLAMP_POSITIONLIGHT =
    Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_POSITIONLIGHT;
  static const Swm_headlampType SWM_HEADLAMP_LOWBEAM =
    Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_LOWBEAM;
  static const Swm_headlampType SWM_HEADLAMP_INVALID =
    Gw_swm_body_0x31a_31a_Swm_headlampType_SWM_HEADLAMP_INVALID;
  static inline bool Swm_headlampType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_headlampType_IsValid(value);
  }
  static const Swm_headlampType Swm_headlampType_MIN =
    Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_MIN;
  static const Swm_headlampType Swm_headlampType_MAX =
    Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_MAX;
  static const int Swm_headlampType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_headlampType_Swm_headlampType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_headlampType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_headlampType_descriptor();
  }
  static inline const ::std::string& Swm_headlampType_Name(Swm_headlampType value) {
    return Gw_swm_body_0x31a_31a_Swm_headlampType_Name(value);
  }
  static inline bool Swm_headlampType_Parse(const ::std::string& name,
      Swm_headlampType* value) {
    return Gw_swm_body_0x31a_31a_Swm_headlampType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_next_songType Swm_next_songType;
  static const Swm_next_songType SWM_NEXT_SONG_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_RELEASED;
  static const Swm_next_songType SWM_NEXT_SONG_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_PRESSED;
  static const Swm_next_songType SWM_NEXT_SONG_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_RESERVED;
  static const Swm_next_songType SWM_NEXT_SONG_INVALID =
    Gw_swm_body_0x31a_31a_Swm_next_songType_SWM_NEXT_SONG_INVALID;
  static inline bool Swm_next_songType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_next_songType_IsValid(value);
  }
  static const Swm_next_songType Swm_next_songType_MIN =
    Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_MIN;
  static const Swm_next_songType Swm_next_songType_MAX =
    Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_MAX;
  static const int Swm_next_songType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_next_songType_Swm_next_songType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_next_songType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_next_songType_descriptor();
  }
  static inline const ::std::string& Swm_next_songType_Name(Swm_next_songType value) {
    return Gw_swm_body_0x31a_31a_Swm_next_songType_Name(value);
  }
  static inline bool Swm_next_songType_Parse(const ::std::string& name,
      Swm_next_songType* value) {
    return Gw_swm_body_0x31a_31a_Swm_next_songType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_previous_songType Swm_previous_songType;
  static const Swm_previous_songType SWM_PREVIOUS_SONG_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_RELEASED;
  static const Swm_previous_songType SWM_PREVIOUS_SONG_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_PRESSED;
  static const Swm_previous_songType SWM_PREVIOUS_SONG_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_RESERVED;
  static const Swm_previous_songType SWM_PREVIOUS_SONG_INVALID =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_SWM_PREVIOUS_SONG_INVALID;
  static inline bool Swm_previous_songType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_previous_songType_IsValid(value);
  }
  static const Swm_previous_songType Swm_previous_songType_MIN =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_MIN;
  static const Swm_previous_songType Swm_previous_songType_MAX =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_MAX;
  static const int Swm_previous_songType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_previous_songType_Swm_previous_songType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_previous_songType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_previous_songType_descriptor();
  }
  static inline const ::std::string& Swm_previous_songType_Name(Swm_previous_songType value) {
    return Gw_swm_body_0x31a_31a_Swm_previous_songType_Name(value);
  }
  static inline bool Swm_previous_songType_Parse(const ::std::string& name,
      Swm_previous_songType* value) {
    return Gw_swm_body_0x31a_31a_Swm_previous_songType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_phoneType Swm_phoneType;
  static const Swm_phoneType SWM_PHONE_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_RELEASED;
  static const Swm_phoneType SWM_PHONE_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_PRESSED;
  static const Swm_phoneType SWM_PHONE_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_RESERVED;
  static const Swm_phoneType SWM_PHONE_INVALID =
    Gw_swm_body_0x31a_31a_Swm_phoneType_SWM_PHONE_INVALID;
  static inline bool Swm_phoneType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_phoneType_IsValid(value);
  }
  static const Swm_phoneType Swm_phoneType_MIN =
    Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_MIN;
  static const Swm_phoneType Swm_phoneType_MAX =
    Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_MAX;
  static const int Swm_phoneType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_phoneType_Swm_phoneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_phoneType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_phoneType_descriptor();
  }
  static inline const ::std::string& Swm_phoneType_Name(Swm_phoneType value) {
    return Gw_swm_body_0x31a_31a_Swm_phoneType_Name(value);
  }
  static inline bool Swm_phoneType_Parse(const ::std::string& name,
      Swm_phoneType* value) {
    return Gw_swm_body_0x31a_31a_Swm_phoneType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_muteType Swm_muteType;
  static const Swm_muteType SWM_MUTE_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_RELEASED;
  static const Swm_muteType SWM_MUTE_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_PRESSED;
  static const Swm_muteType SWM_MUTE_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_RESERVED;
  static const Swm_muteType SWM_MUTE_INVALID =
    Gw_swm_body_0x31a_31a_Swm_muteType_SWM_MUTE_INVALID;
  static inline bool Swm_muteType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_muteType_IsValid(value);
  }
  static const Swm_muteType Swm_muteType_MIN =
    Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_MIN;
  static const Swm_muteType Swm_muteType_MAX =
    Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_MAX;
  static const int Swm_muteType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_muteType_Swm_muteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_muteType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_muteType_descriptor();
  }
  static inline const ::std::string& Swm_muteType_Name(Swm_muteType value) {
    return Gw_swm_body_0x31a_31a_Swm_muteType_Name(value);
  }
  static inline bool Swm_muteType_Parse(const ::std::string& name,
      Swm_muteType* value) {
    return Gw_swm_body_0x31a_31a_Swm_muteType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_menu_rightType Swm_menu_rightType;
  static const Swm_menu_rightType SWM_MENU_RIGHT_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_RELEASED;
  static const Swm_menu_rightType SWM_MENU_RIGHT_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_PRESSED;
  static const Swm_menu_rightType SWM_MENU_RIGHT_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_RESERVED;
  static const Swm_menu_rightType SWM_MENU_RIGHT_INVALID =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_SWM_MENU_RIGHT_INVALID;
  static inline bool Swm_menu_rightType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_rightType_IsValid(value);
  }
  static const Swm_menu_rightType Swm_menu_rightType_MIN =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_MIN;
  static const Swm_menu_rightType Swm_menu_rightType_MAX =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_MAX;
  static const int Swm_menu_rightType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_menu_rightType_Swm_menu_rightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_menu_rightType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_menu_rightType_descriptor();
  }
  static inline const ::std::string& Swm_menu_rightType_Name(Swm_menu_rightType value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_rightType_Name(value);
  }
  static inline bool Swm_menu_rightType_Parse(const ::std::string& name,
      Swm_menu_rightType* value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_rightType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_menu_leftType Swm_menu_leftType;
  static const Swm_menu_leftType SWM_MENU_LEFT_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_RELEASED;
  static const Swm_menu_leftType SWM_MENU_LEFT_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_PRESSED;
  static const Swm_menu_leftType SWM_MENU_LEFT_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_RESERVED;
  static const Swm_menu_leftType SWM_MENU_LEFT_INVALID =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_SWM_MENU_LEFT_INVALID;
  static inline bool Swm_menu_leftType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_leftType_IsValid(value);
  }
  static const Swm_menu_leftType Swm_menu_leftType_MIN =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_MIN;
  static const Swm_menu_leftType Swm_menu_leftType_MAX =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_MAX;
  static const int Swm_menu_leftType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_menu_leftType_Swm_menu_leftType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_menu_leftType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_menu_leftType_descriptor();
  }
  static inline const ::std::string& Swm_menu_leftType_Name(Swm_menu_leftType value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_leftType_Name(value);
  }
  static inline bool Swm_menu_leftType_Parse(const ::std::string& name,
      Swm_menu_leftType* value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_leftType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_menu_downType Swm_menu_downType;
  static const Swm_menu_downType SWM_MENU_DOWN_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_RELEASED;
  static const Swm_menu_downType SWM_MENU_DOWN_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_PRESSED;
  static const Swm_menu_downType SWM_MENU_DOWN_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_RESERVED;
  static const Swm_menu_downType SWM_MENU_DOWN_INVALID =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_SWM_MENU_DOWN_INVALID;
  static inline bool Swm_menu_downType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_downType_IsValid(value);
  }
  static const Swm_menu_downType Swm_menu_downType_MIN =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_MIN;
  static const Swm_menu_downType Swm_menu_downType_MAX =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_MAX;
  static const int Swm_menu_downType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_menu_downType_Swm_menu_downType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_menu_downType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_menu_downType_descriptor();
  }
  static inline const ::std::string& Swm_menu_downType_Name(Swm_menu_downType value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_downType_Name(value);
  }
  static inline bool Swm_menu_downType_Parse(const ::std::string& name,
      Swm_menu_downType* value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_downType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_menu_upType Swm_menu_upType;
  static const Swm_menu_upType SWM_MENU_UP_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_RELEASED;
  static const Swm_menu_upType SWM_MENU_UP_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_PRESSED;
  static const Swm_menu_upType SWM_MENU_UP_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_RESERVED;
  static const Swm_menu_upType SWM_MENU_UP_INVALID =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_SWM_MENU_UP_INVALID;
  static inline bool Swm_menu_upType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_upType_IsValid(value);
  }
  static const Swm_menu_upType Swm_menu_upType_MIN =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_MIN;
  static const Swm_menu_upType Swm_menu_upType_MAX =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_MAX;
  static const int Swm_menu_upType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_menu_upType_Swm_menu_upType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_menu_upType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_menu_upType_descriptor();
  }
  static inline const ::std::string& Swm_menu_upType_Name(Swm_menu_upType value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_upType_Name(value);
  }
  static inline bool Swm_menu_upType_Parse(const ::std::string& name,
      Swm_menu_upType* value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_upType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_fwasherstsType Swm_fwasherstsType;
  static const Swm_fwasherstsType SWM_FWASHERSTS_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_RELEASED;
  static const Swm_fwasherstsType SWM_FWASHERSTS_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_PRESSED;
  static const Swm_fwasherstsType SWM_FWASHERSTS_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_RESERVED;
  static const Swm_fwasherstsType SWM_FWASHERSTS_INVALID =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_SWM_FWASHERSTS_INVALID;
  static inline bool Swm_fwasherstsType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_fwasherstsType_IsValid(value);
  }
  static const Swm_fwasherstsType Swm_fwasherstsType_MIN =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_MIN;
  static const Swm_fwasherstsType Swm_fwasherstsType_MAX =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_MAX;
  static const int Swm_fwasherstsType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Swm_fwasherstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_fwasherstsType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_fwasherstsType_descriptor();
  }
  static inline const ::std::string& Swm_fwasherstsType_Name(Swm_fwasherstsType value) {
    return Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Name(value);
  }
  static inline bool Swm_fwasherstsType_Parse(const ::std::string& name,
      Swm_fwasherstsType* value) {
    return Gw_swm_body_0x31a_31a_Swm_fwasherstsType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_menu_returnType Swm_menu_returnType;
  static const Swm_menu_returnType SWM_MENU_RETURN_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_RELEASED;
  static const Swm_menu_returnType SWM_MENU_RETURN_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_PRESSED;
  static const Swm_menu_returnType SWM_MENU_RETURN_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_RESERVED;
  static const Swm_menu_returnType SWM_MENU_RETURN_INVALID =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_SWM_MENU_RETURN_INVALID;
  static inline bool Swm_menu_returnType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_returnType_IsValid(value);
  }
  static const Swm_menu_returnType Swm_menu_returnType_MIN =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_MIN;
  static const Swm_menu_returnType Swm_menu_returnType_MAX =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_MAX;
  static const int Swm_menu_returnType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_menu_returnType_Swm_menu_returnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_menu_returnType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_menu_returnType_descriptor();
  }
  static inline const ::std::string& Swm_menu_returnType_Name(Swm_menu_returnType value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_returnType_Name(value);
  }
  static inline bool Swm_menu_returnType_Parse(const ::std::string& name,
      Swm_menu_returnType* value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_returnType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_menu_confirmType Swm_menu_confirmType;
  static const Swm_menu_confirmType SWM_MENU_CONFIRM_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_RELEASED;
  static const Swm_menu_confirmType SWM_MENU_CONFIRM_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_PRESSED;
  static const Swm_menu_confirmType SWM_MENU_CONFIRM_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_RESERVED;
  static const Swm_menu_confirmType SWM_MENU_CONFIRM_INVALID =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_SWM_MENU_CONFIRM_INVALID;
  static inline bool Swm_menu_confirmType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_confirmType_IsValid(value);
  }
  static const Swm_menu_confirmType Swm_menu_confirmType_MIN =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_MIN;
  static const Swm_menu_confirmType Swm_menu_confirmType_MAX =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_MAX;
  static const int Swm_menu_confirmType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Swm_menu_confirmType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_menu_confirmType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_menu_confirmType_descriptor();
  }
  static inline const ::std::string& Swm_menu_confirmType_Name(Swm_menu_confirmType value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Name(value);
  }
  static inline bool Swm_menu_confirmType_Parse(const ::std::string& name,
      Swm_menu_confirmType* value) {
    return Gw_swm_body_0x31a_31a_Swm_menu_confirmType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_rwasherstsType Swm_rwasherstsType;
  static const Swm_rwasherstsType SWM_RWASHERSTS_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_RELEASED;
  static const Swm_rwasherstsType SWM_RWASHERSTS_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_PRESSED;
  static const Swm_rwasherstsType SWM_RWASHERSTS_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_RESERVED;
  static const Swm_rwasherstsType SWM_RWASHERSTS_INVALID =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_SWM_RWASHERSTS_INVALID;
  static inline bool Swm_rwasherstsType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_rwasherstsType_IsValid(value);
  }
  static const Swm_rwasherstsType Swm_rwasherstsType_MIN =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_MIN;
  static const Swm_rwasherstsType Swm_rwasherstsType_MAX =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_MAX;
  static const int Swm_rwasherstsType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Swm_rwasherstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_rwasherstsType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_rwasherstsType_descriptor();
  }
  static inline const ::std::string& Swm_rwasherstsType_Name(Swm_rwasherstsType value) {
    return Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Name(value);
  }
  static inline bool Swm_rwasherstsType_Parse(const ::std::string& name,
      Swm_rwasherstsType* value) {
    return Gw_swm_body_0x31a_31a_Swm_rwasherstsType_Parse(name, value);
  }

  typedef Gw_swm_body_0x31a_31a_Swm_flashlightstsType Swm_flashlightstsType;
  static const Swm_flashlightstsType SWM_FLASHLIGHTSTS_RELEASED =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_RELEASED;
  static const Swm_flashlightstsType SWM_FLASHLIGHTSTS_PRESSED =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_PRESSED;
  static const Swm_flashlightstsType SWM_FLASHLIGHTSTS_RESERVED =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_RESERVED;
  static const Swm_flashlightstsType SWM_FLASHLIGHTSTS_INVALID =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_SWM_FLASHLIGHTSTS_INVALID;
  static inline bool Swm_flashlightstsType_IsValid(int value) {
    return Gw_swm_body_0x31a_31a_Swm_flashlightstsType_IsValid(value);
  }
  static const Swm_flashlightstsType Swm_flashlightstsType_MIN =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_MIN;
  static const Swm_flashlightstsType Swm_flashlightstsType_MAX =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_MAX;
  static const int Swm_flashlightstsType_ARRAYSIZE =
    Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Swm_flashlightstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Swm_flashlightstsType_descriptor() {
    return Gw_swm_body_0x31a_31a_Swm_flashlightstsType_descriptor();
  }
  static inline const ::std::string& Swm_flashlightstsType_Name(Swm_flashlightstsType value) {
    return Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Name(value);
  }
  static inline bool Swm_flashlightstsType_Parse(const ::std::string& name,
      Swm_flashlightstsType* value) {
    return Gw_swm_body_0x31a_31a_Swm_flashlightstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
  bool has_swm_highbeam() const;
  void clear_swm_highbeam();
  static const int kSwmHighbeamFieldNumber = 1;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType swm_highbeam() const;
  void set_swm_highbeam(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
  bool has_swm_frontwipingmode() const;
  void clear_swm_frontwipingmode();
  static const int kSwmFrontwipingmodeFieldNumber = 2;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType swm_frontwipingmode() const;
  void set_swm_frontwipingmode(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
  bool has_swm_wipinginterval_sensitvity() const;
  void clear_swm_wipinginterval_sensitvity();
  static const int kSwmWipingintervalSensitvityFieldNumber = 3;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity() const;
  void set_swm_wipinginterval_sensitvity(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
  bool has_swm_rearfoglight() const;
  void clear_swm_rearfoglight();
  static const int kSwmRearfoglightFieldNumber = 4;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType swm_rearfoglight() const;
  void set_swm_rearfoglight(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
  bool has_swm_frontfoglight() const;
  void clear_swm_frontfoglight();
  static const int kSwmFrontfoglightFieldNumber = 5;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType swm_frontfoglight() const;
  void set_swm_frontfoglight(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
  bool has_swm_washerlimphomests() const;
  void clear_swm_washerlimphomests();
  static const int kSwmWasherlimphomestsFieldNumber = 6;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType swm_washerlimphomests() const;
  void set_swm_washerlimphomests(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
  bool has_swm_rearwipingmode() const;
  void clear_swm_rearwipingmode();
  static const int kSwmRearwipingmodeFieldNumber = 7;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType swm_rearwipingmode() const;
  void set_swm_rearwipingmode(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
  bool has_swm_turnindicationact() const;
  void clear_swm_turnindicationact();
  static const int kSwmTurnindicationactFieldNumber = 8;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType swm_turnindicationact() const;
  void set_swm_turnindicationact(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
  bool has_swm_vol_plus() const;
  void clear_swm_vol_plus();
  static const int kSwmVolPlusFieldNumber = 9;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType swm_vol_plus() const;
  void set_swm_vol_plus(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
  bool has_swm_vol_minus() const;
  void clear_swm_vol_minus();
  static const int kSwmVolMinusFieldNumber = 10;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType swm_vol_minus() const;
  void set_swm_vol_minus(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
  bool has_swm_wechat() const;
  void clear_swm_wechat();
  static const int kSwmWechatFieldNumber = 11;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType swm_wechat() const;
  void set_swm_wechat(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
  bool has_swm_lamplimphomests() const;
  void clear_swm_lamplimphomests();
  static const int kSwmLamplimphomestsFieldNumber = 12;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType swm_lamplimphomests() const;
  void set_swm_lamplimphomests(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
  bool has_swm_headlamp() const;
  void clear_swm_headlamp();
  static const int kSwmHeadlampFieldNumber = 13;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType swm_headlamp() const;
  void set_swm_headlamp(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
  bool has_swm_next_song() const;
  void clear_swm_next_song();
  static const int kSwmNextSongFieldNumber = 14;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType swm_next_song() const;
  void set_swm_next_song(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
  bool has_swm_previous_song() const;
  void clear_swm_previous_song();
  static const int kSwmPreviousSongFieldNumber = 15;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType swm_previous_song() const;
  void set_swm_previous_song(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
  bool has_swm_phone() const;
  void clear_swm_phone();
  static const int kSwmPhoneFieldNumber = 16;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType swm_phone() const;
  void set_swm_phone(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
  bool has_swm_mute() const;
  void clear_swm_mute();
  static const int kSwmMuteFieldNumber = 17;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType swm_mute() const;
  void set_swm_mute(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
  bool has_swm_menu_right() const;
  void clear_swm_menu_right();
  static const int kSwmMenuRightFieldNumber = 18;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType swm_menu_right() const;
  void set_swm_menu_right(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
  bool has_swm_menu_left() const;
  void clear_swm_menu_left();
  static const int kSwmMenuLeftFieldNumber = 19;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType swm_menu_left() const;
  void set_swm_menu_left(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
  bool has_swm_menu_down() const;
  void clear_swm_menu_down();
  static const int kSwmMenuDownFieldNumber = 20;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType swm_menu_down() const;
  void set_swm_menu_down(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
  bool has_swm_menu_up() const;
  void clear_swm_menu_up();
  static const int kSwmMenuUpFieldNumber = 21;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType swm_menu_up() const;
  void set_swm_menu_up(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
  bool has_swm_fwashersts() const;
  void clear_swm_fwashersts();
  static const int kSwmFwasherstsFieldNumber = 22;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType swm_fwashersts() const;
  void set_swm_fwashersts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType value);

  // optional int32 rolling_counter_0x31a = 23;
  bool has_rolling_counter_0x31a() const;
  void clear_rolling_counter_0x31a();
  static const int kRollingCounter0X31AFieldNumber = 23;
  ::google::protobuf::int32 rolling_counter_0x31a() const;
  void set_rolling_counter_0x31a(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
  bool has_swm_menu_return() const;
  void clear_swm_menu_return();
  static const int kSwmMenuReturnFieldNumber = 24;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType swm_menu_return() const;
  void set_swm_menu_return(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
  bool has_swm_menu_confirm() const;
  void clear_swm_menu_confirm();
  static const int kSwmMenuConfirmFieldNumber = 25;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType swm_menu_confirm() const;
  void set_swm_menu_confirm(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType value);

  // optional int32 checksum_0x31a = 26;
  bool has_checksum_0x31a() const;
  void clear_checksum_0x31a();
  static const int kChecksum0X31AFieldNumber = 26;
  ::google::protobuf::int32 checksum_0x31a() const;
  void set_checksum_0x31a(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
  bool has_swm_rwashersts() const;
  void clear_swm_rwashersts();
  static const int kSwmRwasherstsFieldNumber = 27;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType swm_rwashersts() const;
  void set_swm_rwashersts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType value);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
  bool has_swm_flashlightsts() const;
  void clear_swm_flashlightsts();
  static const int kSwmFlashlightstsFieldNumber = 28;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType swm_flashlightsts() const;
  void set_swm_flashlightsts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
 private:
  void set_has_swm_highbeam();
  void clear_has_swm_highbeam();
  void set_has_swm_frontwipingmode();
  void clear_has_swm_frontwipingmode();
  void set_has_swm_wipinginterval_sensitvity();
  void clear_has_swm_wipinginterval_sensitvity();
  void set_has_swm_rearfoglight();
  void clear_has_swm_rearfoglight();
  void set_has_swm_frontfoglight();
  void clear_has_swm_frontfoglight();
  void set_has_swm_washerlimphomests();
  void clear_has_swm_washerlimphomests();
  void set_has_swm_rearwipingmode();
  void clear_has_swm_rearwipingmode();
  void set_has_swm_turnindicationact();
  void clear_has_swm_turnindicationact();
  void set_has_swm_vol_plus();
  void clear_has_swm_vol_plus();
  void set_has_swm_vol_minus();
  void clear_has_swm_vol_minus();
  void set_has_swm_wechat();
  void clear_has_swm_wechat();
  void set_has_swm_lamplimphomests();
  void clear_has_swm_lamplimphomests();
  void set_has_swm_headlamp();
  void clear_has_swm_headlamp();
  void set_has_swm_next_song();
  void clear_has_swm_next_song();
  void set_has_swm_previous_song();
  void clear_has_swm_previous_song();
  void set_has_swm_phone();
  void clear_has_swm_phone();
  void set_has_swm_mute();
  void clear_has_swm_mute();
  void set_has_swm_menu_right();
  void clear_has_swm_menu_right();
  void set_has_swm_menu_left();
  void clear_has_swm_menu_left();
  void set_has_swm_menu_down();
  void clear_has_swm_menu_down();
  void set_has_swm_menu_up();
  void clear_has_swm_menu_up();
  void set_has_swm_fwashersts();
  void clear_has_swm_fwashersts();
  void set_has_rolling_counter_0x31a();
  void clear_has_rolling_counter_0x31a();
  void set_has_swm_menu_return();
  void clear_has_swm_menu_return();
  void set_has_swm_menu_confirm();
  void clear_has_swm_menu_confirm();
  void set_has_checksum_0x31a();
  void clear_has_checksum_0x31a();
  void set_has_swm_rwashersts();
  void clear_has_swm_rwashersts();
  void set_has_swm_flashlightsts();
  void clear_has_swm_flashlightsts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int swm_highbeam_;
  int swm_frontwipingmode_;
  int swm_wipinginterval_sensitvity_;
  int swm_rearfoglight_;
  int swm_frontfoglight_;
  int swm_washerlimphomests_;
  int swm_rearwipingmode_;
  int swm_turnindicationact_;
  int swm_vol_plus_;
  int swm_vol_minus_;
  int swm_wechat_;
  int swm_lamplimphomests_;
  int swm_headlamp_;
  int swm_next_song_;
  int swm_previous_song_;
  int swm_phone_;
  int swm_mute_;
  int swm_menu_right_;
  int swm_menu_left_;
  int swm_menu_down_;
  int swm_menu_up_;
  int swm_fwashersts_;
  ::google::protobuf::int32 rolling_counter_0x31a_;
  int swm_menu_return_;
  int swm_menu_confirm_;
  ::google::protobuf::int32 checksum_0x31a_;
  int swm_rwashersts_;
  int swm_flashlightsts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ems_tq_0x101_101 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ems_tq_0x101_101) */ {
 public:
  Gw_ems_tq_0x101_101();
  virtual ~Gw_ems_tq_0x101_101();

  Gw_ems_tq_0x101_101(const Gw_ems_tq_0x101_101& from);

  inline Gw_ems_tq_0x101_101& operator=(const Gw_ems_tq_0x101_101& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ems_tq_0x101_101& default_instance();

  static inline const Gw_ems_tq_0x101_101* internal_default_instance() {
    return reinterpret_cast<const Gw_ems_tq_0x101_101*>(
               &_Gw_ems_tq_0x101_101_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(Gw_ems_tq_0x101_101* other);

  // implements Message ----------------------------------------------

  inline Gw_ems_tq_0x101_101* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ems_tq_0x101_101* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ems_tq_0x101_101& from);
  void MergeFrom(const Gw_ems_tq_0x101_101& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ems_tq_0x101_101* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ems_tq_0x101_101_Ems_engspeederrorType Ems_engspeederrorType;
  static const Ems_engspeederrorType EMS_ENGSPEEDERROR_NOERROR =
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_EMS_ENGSPEEDERROR_NOERROR;
  static const Ems_engspeederrorType EMS_ENGSPEEDERROR_ERROR =
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_EMS_ENGSPEEDERROR_ERROR;
  static inline bool Ems_engspeederrorType_IsValid(int value) {
    return Gw_ems_tq_0x101_101_Ems_engspeederrorType_IsValid(value);
  }
  static const Ems_engspeederrorType Ems_engspeederrorType_MIN =
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_MIN;
  static const Ems_engspeederrorType Ems_engspeederrorType_MAX =
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_MAX;
  static const int Ems_engspeederrorType_ARRAYSIZE =
    Gw_ems_tq_0x101_101_Ems_engspeederrorType_Ems_engspeederrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_engspeederrorType_descriptor() {
    return Gw_ems_tq_0x101_101_Ems_engspeederrorType_descriptor();
  }
  static inline const ::std::string& Ems_engspeederrorType_Name(Ems_engspeederrorType value) {
    return Gw_ems_tq_0x101_101_Ems_engspeederrorType_Name(value);
  }
  static inline bool Ems_engspeederrorType_Parse(const ::std::string& name,
      Ems_engspeederrorType* value) {
    return Gw_ems_tq_0x101_101_Ems_engspeederrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double ems_indicatedrealengtorq = 1;
  bool has_ems_indicatedrealengtorq() const;
  void clear_ems_indicatedrealengtorq();
  static const int kEmsIndicatedrealengtorqFieldNumber = 1;
  double ems_indicatedrealengtorq() const;
  void set_ems_indicatedrealengtorq(double value);

  // optional double ems_engspeed = 2;
  bool has_ems_engspeed() const;
  void clear_ems_engspeed();
  static const int kEmsEngspeedFieldNumber = 2;
  double ems_engspeed() const;
  void set_ems_engspeed(double value);

  // optional double ems_rngmodtorqcrsleadmin = 4;
  bool has_ems_rngmodtorqcrsleadmin() const;
  void clear_ems_rngmodtorqcrsleadmin();
  static const int kEmsRngmodtorqcrsleadminFieldNumber = 4;
  double ems_rngmodtorqcrsleadmin() const;
  void set_ems_rngmodtorqcrsleadmin(double value);

  // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
  bool has_ems_engspeederror() const;
  void clear_ems_engspeederror();
  static const int kEmsEngspeederrorFieldNumber = 3;
  ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType ems_engspeederror() const;
  void set_ems_engspeederror(::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType value);

  // optional int32 dcm_ems_rollingcounter_0x101 = 5;
  bool has_dcm_ems_rollingcounter_0x101() const;
  void clear_dcm_ems_rollingcounter_0x101();
  static const int kDcmEmsRollingcounter0X101FieldNumber = 5;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x101() const;
  void set_dcm_ems_rollingcounter_0x101(::google::protobuf::int32 value);

  // optional double ems_rngmodtorqcrsleadmax = 7;
  bool has_ems_rngmodtorqcrsleadmax() const;
  void clear_ems_rngmodtorqcrsleadmax();
  static const int kEmsRngmodtorqcrsleadmaxFieldNumber = 7;
  double ems_rngmodtorqcrsleadmax() const;
  void set_ems_rngmodtorqcrsleadmax(double value);

  // optional int32 dcm_ems_checksum_0x101 = 6;
  bool has_dcm_ems_checksum_0x101() const;
  void clear_dcm_ems_checksum_0x101();
  static const int kDcmEmsChecksum0X101FieldNumber = 6;
  ::google::protobuf::int32 dcm_ems_checksum_0x101() const;
  void set_dcm_ems_checksum_0x101(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ems_tq_0x101_101)
 private:
  void set_has_ems_indicatedrealengtorq();
  void clear_has_ems_indicatedrealengtorq();
  void set_has_ems_engspeed();
  void clear_has_ems_engspeed();
  void set_has_ems_engspeederror();
  void clear_has_ems_engspeederror();
  void set_has_ems_rngmodtorqcrsleadmin();
  void clear_has_ems_rngmodtorqcrsleadmin();
  void set_has_dcm_ems_rollingcounter_0x101();
  void clear_has_dcm_ems_rollingcounter_0x101();
  void set_has_dcm_ems_checksum_0x101();
  void clear_has_dcm_ems_checksum_0x101();
  void set_has_ems_rngmodtorqcrsleadmax();
  void clear_has_ems_rngmodtorqcrsleadmax();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ems_indicatedrealengtorq_;
  double ems_engspeed_;
  double ems_rngmodtorqcrsleadmin_;
  int ems_engspeederror_;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x101_;
  double ems_rngmodtorqcrsleadmax_;
  ::google::protobuf::int32 dcm_ems_checksum_0x101_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_vlc_0x223_223 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_vlc_0x223_223) */ {
 public:
  Esp_vlc_0x223_223();
  virtual ~Esp_vlc_0x223_223();

  Esp_vlc_0x223_223(const Esp_vlc_0x223_223& from);

  inline Esp_vlc_0x223_223& operator=(const Esp_vlc_0x223_223& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_vlc_0x223_223& default_instance();

  static inline const Esp_vlc_0x223_223* internal_default_instance() {
    return reinterpret_cast<const Esp_vlc_0x223_223*>(
               &_Esp_vlc_0x223_223_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(Esp_vlc_0x223_223* other);

  // implements Message ----------------------------------------------

  inline Esp_vlc_0x223_223* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_vlc_0x223_223* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_vlc_0x223_223& from);
  void MergeFrom(const Esp_vlc_0x223_223& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_vlc_0x223_223* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_apa_gearboxenableType;
  static const Esp_apa_gearboxenableType ESP_APA_GEARBOXENABLE_NO_REQUEST =
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_ESP_APA_GEARBOXENABLE_NO_REQUEST;
  static const Esp_apa_gearboxenableType ESP_APA_GEARBOXENABLE_GEAR_SHIFT_REQUEST =
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_ESP_APA_GEARBOXENABLE_GEAR_SHIFT_REQUEST;
  static inline bool Esp_apa_gearboxenableType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_apa_gearboxenableType_IsValid(value);
  }
  static const Esp_apa_gearboxenableType Esp_apa_gearboxenableType_MIN =
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_MIN;
  static const Esp_apa_gearboxenableType Esp_apa_gearboxenableType_MAX =
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_MAX;
  static const int Esp_apa_gearboxenableType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Esp_apa_gearboxenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_apa_gearboxenableType_descriptor() {
    return Esp_vlc_0x223_223_Esp_apa_gearboxenableType_descriptor();
  }
  static inline const ::std::string& Esp_apa_gearboxenableType_Name(Esp_apa_gearboxenableType value) {
    return Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Name(value);
  }
  static inline bool Esp_apa_gearboxenableType_Parse(const ::std::string& name,
      Esp_apa_gearboxenableType* value) {
    return Esp_vlc_0x223_223_Esp_apa_gearboxenableType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_target_gear_requestType;
  static const Esp_target_gear_requestType ESP_TARGET_GEAR_REQUEST_NO_REQUEST =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_NO_REQUEST;
  static const Esp_target_gear_requestType ESP_TARGET_GEAR_REQUEST_PARK =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_PARK;
  static const Esp_target_gear_requestType ESP_TARGET_GEAR_REQUEST_REVERSE =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_REVERSE;
  static const Esp_target_gear_requestType ESP_TARGET_GEAR_REQUEST_NEUTRAL =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_NEUTRAL;
  static const Esp_target_gear_requestType ESP_TARGET_GEAR_REQUEST_DRIVE =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_ESP_TARGET_GEAR_REQUEST_DRIVE;
  static inline bool Esp_target_gear_requestType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_target_gear_requestType_IsValid(value);
  }
  static const Esp_target_gear_requestType Esp_target_gear_requestType_MIN =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_MIN;
  static const Esp_target_gear_requestType Esp_target_gear_requestType_MAX =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_MAX;
  static const int Esp_target_gear_requestType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_target_gear_requestType_Esp_target_gear_requestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_target_gear_requestType_descriptor() {
    return Esp_vlc_0x223_223_Esp_target_gear_requestType_descriptor();
  }
  static inline const ::std::string& Esp_target_gear_requestType_Name(Esp_target_gear_requestType value) {
    return Esp_vlc_0x223_223_Esp_target_gear_requestType_Name(value);
  }
  static inline bool Esp_target_gear_requestType_Parse(const ::std::string& name,
      Esp_target_gear_requestType* value) {
    return Esp_vlc_0x223_223_Esp_target_gear_requestType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_apactiveType;
  static const Esp_vlc_apactiveType ESP_VLC_APACTIVE_NOT_ACTIVE =
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_ESP_VLC_APACTIVE_NOT_ACTIVE;
  static const Esp_vlc_apactiveType ESP_VLC_APACTIVE_ACTIVE =
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_ESP_VLC_APACTIVE_ACTIVE;
  static inline bool Esp_vlc_apactiveType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_vlc_apactiveType_IsValid(value);
  }
  static const Esp_vlc_apactiveType Esp_vlc_apactiveType_MIN =
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_MIN;
  static const Esp_vlc_apactiveType Esp_vlc_apactiveType_MAX =
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_MAX;
  static const int Esp_vlc_apactiveType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_vlc_apactiveType_Esp_vlc_apactiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vlc_apactiveType_descriptor() {
    return Esp_vlc_0x223_223_Esp_vlc_apactiveType_descriptor();
  }
  static inline const ::std::string& Esp_vlc_apactiveType_Name(Esp_vlc_apactiveType value) {
    return Esp_vlc_0x223_223_Esp_vlc_apactiveType_Name(value);
  }
  static inline bool Esp_vlc_apactiveType_Parse(const ::std::string& name,
      Esp_vlc_apactiveType* value) {
    return Esp_vlc_0x223_223_Esp_vlc_apactiveType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_pam_lc_failurestsType;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_NO_ERROR =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_NO_ERROR;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_VEHICLE_BLOCKED =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_VEHICLE_BLOCKED;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARPOSITION =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARPOSITION;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_UNEXPECTED_EPB_ACTION =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_EPB_ACTION;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_UNEXPECTED_ACCPEDALINTERVENTION =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_ACCPEDALINTERVENTION;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARINTERVENTION =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARINTERVENTION;
  static const Esp_pam_lc_failurestsType ESP_PAM_LC_FAILURESTS_ERROR =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_ESP_PAM_LC_FAILURESTS_ERROR;
  static inline bool Esp_pam_lc_failurestsType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_IsValid(value);
  }
  static const Esp_pam_lc_failurestsType Esp_pam_lc_failurestsType_MIN =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_MIN;
  static const Esp_pam_lc_failurestsType Esp_pam_lc_failurestsType_MAX =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_MAX;
  static const int Esp_pam_lc_failurestsType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Esp_pam_lc_failurestsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_pam_lc_failurestsType_descriptor() {
    return Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_descriptor();
  }
  static inline const ::std::string& Esp_pam_lc_failurestsType_Name(Esp_pam_lc_failurestsType value) {
    return Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Name(value);
  }
  static inline bool Esp_pam_lc_failurestsType_Parse(const ::std::string& name,
      Esp_pam_lc_failurestsType* value) {
    return Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_pam_lc_statusType;
  static const Esp_pam_lc_statusType ESP_PAM_LC_STATUS_OFF =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_OFF;
  static const Esp_pam_lc_statusType ESP_PAM_LC_STATUS_STANDBY =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_STANDBY;
  static const Esp_pam_lc_statusType ESP_PAM_LC_STATUS_ACTIVE_AUTOMATICPARK =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_ACTIVE_AUTOMATICPARK;
  static const Esp_pam_lc_statusType ESP_PAM_LC_STATUS_ERROR =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_ESP_PAM_LC_STATUS_ERROR;
  static inline bool Esp_pam_lc_statusType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_pam_lc_statusType_IsValid(value);
  }
  static const Esp_pam_lc_statusType Esp_pam_lc_statusType_MIN =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_MIN;
  static const Esp_pam_lc_statusType Esp_pam_lc_statusType_MAX =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_MAX;
  static const int Esp_pam_lc_statusType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_pam_lc_statusType_Esp_pam_lc_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_pam_lc_statusType_descriptor() {
    return Esp_vlc_0x223_223_Esp_pam_lc_statusType_descriptor();
  }
  static inline const ::std::string& Esp_pam_lc_statusType_Name(Esp_pam_lc_statusType value) {
    return Esp_vlc_0x223_223_Esp_pam_lc_statusType_Name(value);
  }
  static inline bool Esp_pam_lc_statusType_Parse(const ::std::string& name,
      Esp_pam_lc_statusType* value) {
    return Esp_vlc_0x223_223_Esp_pam_lc_statusType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_activeType;
  static const Esp_vlc_activeType ESP_VLC_ACTIVE_NOT_ACTIVE =
    Esp_vlc_0x223_223_Esp_vlc_activeType_ESP_VLC_ACTIVE_NOT_ACTIVE;
  static const Esp_vlc_activeType ESP_VLC_ACTIVE_ACTIVE =
    Esp_vlc_0x223_223_Esp_vlc_activeType_ESP_VLC_ACTIVE_ACTIVE;
  static inline bool Esp_vlc_activeType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_vlc_activeType_IsValid(value);
  }
  static const Esp_vlc_activeType Esp_vlc_activeType_MIN =
    Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_MIN;
  static const Esp_vlc_activeType Esp_vlc_activeType_MAX =
    Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_MAX;
  static const int Esp_vlc_activeType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_vlc_activeType_Esp_vlc_activeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vlc_activeType_descriptor() {
    return Esp_vlc_0x223_223_Esp_vlc_activeType_descriptor();
  }
  static inline const ::std::string& Esp_vlc_activeType_Name(Esp_vlc_activeType value) {
    return Esp_vlc_0x223_223_Esp_vlc_activeType_Name(value);
  }
  static inline bool Esp_vlc_activeType_Parse(const ::std::string& name,
      Esp_vlc_activeType* value) {
    return Esp_vlc_0x223_223_Esp_vlc_activeType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_availableType;
  static const Esp_vlc_availableType ESP_VLC_AVAILABLE_NOT_AVAILABLE =
    Esp_vlc_0x223_223_Esp_vlc_availableType_ESP_VLC_AVAILABLE_NOT_AVAILABLE;
  static const Esp_vlc_availableType ESP_VLC_AVAILABLE_AVAILABLE =
    Esp_vlc_0x223_223_Esp_vlc_availableType_ESP_VLC_AVAILABLE_AVAILABLE;
  static inline bool Esp_vlc_availableType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_vlc_availableType_IsValid(value);
  }
  static const Esp_vlc_availableType Esp_vlc_availableType_MIN =
    Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_MIN;
  static const Esp_vlc_availableType Esp_vlc_availableType_MAX =
    Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_MAX;
  static const int Esp_vlc_availableType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_vlc_availableType_Esp_vlc_availableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vlc_availableType_descriptor() {
    return Esp_vlc_0x223_223_Esp_vlc_availableType_descriptor();
  }
  static inline const ::std::string& Esp_vlc_availableType_Name(Esp_vlc_availableType value) {
    return Esp_vlc_0x223_223_Esp_vlc_availableType_Name(value);
  }
  static inline bool Esp_vlc_availableType_Parse(const ::std::string& name,
      Esp_vlc_availableType* value) {
    return Esp_vlc_0x223_223_Esp_vlc_availableType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlcapa_availableType;
  static const Esp_vlcapa_availableType ESP_VLCAPA_AVAILABLE_NOT_AVAILABLE =
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_ESP_VLCAPA_AVAILABLE_NOT_AVAILABLE;
  static const Esp_vlcapa_availableType ESP_VLCAPA_AVAILABLE_AVAILABLE =
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_ESP_VLCAPA_AVAILABLE_AVAILABLE;
  static inline bool Esp_vlcapa_availableType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_vlcapa_availableType_IsValid(value);
  }
  static const Esp_vlcapa_availableType Esp_vlcapa_availableType_MIN =
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_MIN;
  static const Esp_vlcapa_availableType Esp_vlcapa_availableType_MAX =
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_MAX;
  static const int Esp_vlcapa_availableType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_vlcapa_availableType_Esp_vlcapa_availableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vlcapa_availableType_descriptor() {
    return Esp_vlc_0x223_223_Esp_vlcapa_availableType_descriptor();
  }
  static inline const ::std::string& Esp_vlcapa_availableType_Name(Esp_vlcapa_availableType value) {
    return Esp_vlc_0x223_223_Esp_vlcapa_availableType_Name(value);
  }
  static inline bool Esp_vlcapa_availableType_Parse(const ::std::string& name,
      Esp_vlcapa_availableType* value) {
    return Esp_vlc_0x223_223_Esp_vlcapa_availableType_Parse(name, value);
  }

  typedef Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlcengtorqreqactType;
  static const Esp_vlcengtorqreqactType ESP_VLCENGTORQREQACT_VALID =
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_ESP_VLCENGTORQREQACT_VALID;
  static const Esp_vlcengtorqreqactType ESP_VLCENGTORQREQACT_INVALID =
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_ESP_VLCENGTORQREQACT_INVALID;
  static inline bool Esp_vlcengtorqreqactType_IsValid(int value) {
    return Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_IsValid(value);
  }
  static const Esp_vlcengtorqreqactType Esp_vlcengtorqreqactType_MIN =
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_MIN;
  static const Esp_vlcengtorqreqactType Esp_vlcengtorqreqactType_MAX =
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_MAX;
  static const int Esp_vlcengtorqreqactType_ARRAYSIZE =
    Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Esp_vlcengtorqreqactType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_vlcengtorqreqactType_descriptor() {
    return Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_descriptor();
  }
  static inline const ::std::string& Esp_vlcengtorqreqactType_Name(Esp_vlcengtorqreqactType value) {
    return Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Name(value);
  }
  static inline bool Esp_vlcengtorqreqactType_Parse(const ::std::string& name,
      Esp_vlcengtorqreqactType* value) {
    return Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double esp_vlc_internaltargetacce = 1;
  bool has_esp_vlc_internaltargetacce() const;
  void clear_esp_vlc_internaltargetacce();
  static const int kEspVlcInternaltargetacceFieldNumber = 1;
  double esp_vlc_internaltargetacce() const;
  void set_esp_vlc_internaltargetacce(double value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
  bool has_esp_apa_gearboxenable() const;
  void clear_esp_apa_gearboxenable();
  static const int kEspApaGearboxenableFieldNumber = 2;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType esp_apa_gearboxenable() const;
  void set_esp_apa_gearboxenable(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
  bool has_esp_target_gear_request() const;
  void clear_esp_target_gear_request();
  static const int kEspTargetGearRequestFieldNumber = 3;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType esp_target_gear_request() const;
  void set_esp_target_gear_request(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
  bool has_esp_vlc_apactive() const;
  void clear_esp_vlc_apactive();
  static const int kEspVlcApactiveFieldNumber = 4;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType esp_vlc_apactive() const;
  void set_esp_vlc_apactive(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
  bool has_esp_pam_lc_failurests() const;
  void clear_esp_pam_lc_failurests();
  static const int kEspPamLcFailurestsFieldNumber = 5;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType esp_pam_lc_failurests() const;
  void set_esp_pam_lc_failurests(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
  bool has_esp_pam_lc_status() const;
  void clear_esp_pam_lc_status();
  static const int kEspPamLcStatusFieldNumber = 6;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType esp_pam_lc_status() const;
  void set_esp_pam_lc_status(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType value);

  // optional int32 rolling_counter_0x223 = 7;
  bool has_rolling_counter_0x223() const;
  void clear_rolling_counter_0x223();
  static const int kRollingCounter0X223FieldNumber = 7;
  ::google::protobuf::int32 rolling_counter_0x223() const;
  void set_rolling_counter_0x223(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
  bool has_esp_vlc_active() const;
  void clear_esp_vlc_active();
  static const int kEspVlcActiveFieldNumber = 8;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType esp_vlc_active() const;
  void set_esp_vlc_active(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
  bool has_esp_vlc_available() const;
  void clear_esp_vlc_available();
  static const int kEspVlcAvailableFieldNumber = 9;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType esp_vlc_available() const;
  void set_esp_vlc_available(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
  bool has_esp_vlcapa_available() const;
  void clear_esp_vlcapa_available();
  static const int kEspVlcapaAvailableFieldNumber = 10;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType esp_vlcapa_available() const;
  void set_esp_vlcapa_available(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType value);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
  bool has_esp_vlcengtorqreqact() const;
  void clear_esp_vlcengtorqreqact();
  static const int kEspVlcengtorqreqactFieldNumber = 11;
  ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType esp_vlcengtorqreqact() const;
  void set_esp_vlcengtorqreqact(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType value);

  // optional int32 checksum_0x223 = 12;
  bool has_checksum_0x223() const;
  void clear_checksum_0x223();
  static const int kChecksum0X223FieldNumber = 12;
  ::google::protobuf::int32 checksum_0x223() const;
  void set_checksum_0x223(::google::protobuf::int32 value);

  // optional int32 esp_vlcengtorqreq = 13;
  bool has_esp_vlcengtorqreq() const;
  void clear_esp_vlcengtorqreq();
  static const int kEspVlcengtorqreqFieldNumber = 13;
  ::google::protobuf::int32 esp_vlcengtorqreq() const;
  void set_esp_vlcengtorqreq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_vlc_0x223_223)
 private:
  void set_has_esp_vlc_internaltargetacce();
  void clear_has_esp_vlc_internaltargetacce();
  void set_has_esp_apa_gearboxenable();
  void clear_has_esp_apa_gearboxenable();
  void set_has_esp_target_gear_request();
  void clear_has_esp_target_gear_request();
  void set_has_esp_vlc_apactive();
  void clear_has_esp_vlc_apactive();
  void set_has_esp_pam_lc_failurests();
  void clear_has_esp_pam_lc_failurests();
  void set_has_esp_pam_lc_status();
  void clear_has_esp_pam_lc_status();
  void set_has_rolling_counter_0x223();
  void clear_has_rolling_counter_0x223();
  void set_has_esp_vlc_active();
  void clear_has_esp_vlc_active();
  void set_has_esp_vlc_available();
  void clear_has_esp_vlc_available();
  void set_has_esp_vlcapa_available();
  void clear_has_esp_vlcapa_available();
  void set_has_esp_vlcengtorqreqact();
  void clear_has_esp_vlcengtorqreqact();
  void set_has_checksum_0x223();
  void clear_has_checksum_0x223();
  void set_has_esp_vlcengtorqreq();
  void clear_has_esp_vlcengtorqreq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double esp_vlc_internaltargetacce_;
  int esp_apa_gearboxenable_;
  int esp_target_gear_request_;
  int esp_vlc_apactive_;
  int esp_pam_lc_failurests_;
  int esp_pam_lc_status_;
  ::google::protobuf::int32 rolling_counter_0x223_;
  int esp_vlc_active_;
  int esp_vlc_available_;
  int esp_vlcapa_available_;
  int esp_vlcengtorqreqact_;
  ::google::protobuf::int32 checksum_0x223_;
  ::google::protobuf::int32 esp_vlcengtorqreq_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ems_whltq_0x107_107 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ems_whltq_0x107_107) */ {
 public:
  Gw_ems_whltq_0x107_107();
  virtual ~Gw_ems_whltq_0x107_107();

  Gw_ems_whltq_0x107_107(const Gw_ems_whltq_0x107_107& from);

  inline Gw_ems_whltq_0x107_107& operator=(const Gw_ems_whltq_0x107_107& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ems_whltq_0x107_107& default_instance();

  static inline const Gw_ems_whltq_0x107_107* internal_default_instance() {
    return reinterpret_cast<const Gw_ems_whltq_0x107_107*>(
               &_Gw_ems_whltq_0x107_107_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(Gw_ems_whltq_0x107_107* other);

  // implements Message ----------------------------------------------

  inline Gw_ems_whltq_0x107_107* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ems_whltq_0x107_107* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ems_whltq_0x107_107& from);
  void MergeFrom(const Gw_ems_whltq_0x107_107& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ems_whltq_0x107_107* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ems_whltq_0x107_107_Ems_kickdownType Ems_kickdownType;
  static const Ems_kickdownType EMS_KICKDOWN_NOTACTIVE =
    Gw_ems_whltq_0x107_107_Ems_kickdownType_EMS_KICKDOWN_NOTACTIVE;
  static const Ems_kickdownType EMS_KICKDOWN_ACTIVE =
    Gw_ems_whltq_0x107_107_Ems_kickdownType_EMS_KICKDOWN_ACTIVE;
  static inline bool Ems_kickdownType_IsValid(int value) {
    return Gw_ems_whltq_0x107_107_Ems_kickdownType_IsValid(value);
  }
  static const Ems_kickdownType Ems_kickdownType_MIN =
    Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_MIN;
  static const Ems_kickdownType Ems_kickdownType_MAX =
    Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_MAX;
  static const int Ems_kickdownType_ARRAYSIZE =
    Gw_ems_whltq_0x107_107_Ems_kickdownType_Ems_kickdownType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_kickdownType_descriptor() {
    return Gw_ems_whltq_0x107_107_Ems_kickdownType_descriptor();
  }
  static inline const ::std::string& Ems_kickdownType_Name(Ems_kickdownType value) {
    return Gw_ems_whltq_0x107_107_Ems_kickdownType_Name(value);
  }
  static inline bool Ems_kickdownType_Parse(const ::std::string& name,
      Ems_kickdownType* value) {
    return Gw_ems_whltq_0x107_107_Ems_kickdownType_Parse(name, value);
  }

  typedef Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Ems_accpedalratioerrorType;
  static const Ems_accpedalratioerrorType EMS_ACCPEDALRATIOERROR_NOERROR =
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_EMS_ACCPEDALRATIOERROR_NOERROR;
  static const Ems_accpedalratioerrorType EMS_ACCPEDALRATIOERROR_ERROR =
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_EMS_ACCPEDALRATIOERROR_ERROR;
  static inline bool Ems_accpedalratioerrorType_IsValid(int value) {
    return Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_IsValid(value);
  }
  static const Ems_accpedalratioerrorType Ems_accpedalratioerrorType_MIN =
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_MIN;
  static const Ems_accpedalratioerrorType Ems_accpedalratioerrorType_MAX =
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_MAX;
  static const int Ems_accpedalratioerrorType_ARRAYSIZE =
    Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Ems_accpedalratioerrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_accpedalratioerrorType_descriptor() {
    return Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_descriptor();
  }
  static inline const ::std::string& Ems_accpedalratioerrorType_Name(Ems_accpedalratioerrorType value) {
    return Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Name(value);
  }
  static inline bool Ems_accpedalratioerrorType_Parse(const ::std::string& name,
      Ems_accpedalratioerrorType* value) {
    return Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_Parse(name, value);
  }

  typedef Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Ems_brkpedalstasusType;
  static const Ems_brkpedalstasusType EMS_BRKPEDALSTASUS_NOTPRESSED =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_NOTPRESSED;
  static const Ems_brkpedalstasusType EMS_BRKPEDALSTASUS_PRESSED =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_PRESSED;
  static const Ems_brkpedalstasusType EMS_BRKPEDALSTASUS_RESERVED =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_RESERVED;
  static const Ems_brkpedalstasusType EMS_BRKPEDALSTASUS_ERROR =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_EMS_BRKPEDALSTASUS_ERROR;
  static inline bool Ems_brkpedalstasusType_IsValid(int value) {
    return Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_IsValid(value);
  }
  static const Ems_brkpedalstasusType Ems_brkpedalstasusType_MIN =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_MIN;
  static const Ems_brkpedalstasusType Ems_brkpedalstasusType_MAX =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_MAX;
  static const int Ems_brkpedalstasusType_ARRAYSIZE =
    Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Ems_brkpedalstasusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ems_brkpedalstasusType_descriptor() {
    return Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_descriptor();
  }
  static inline const ::std::string& Ems_brkpedalstasusType_Name(Ems_brkpedalstasusType value) {
    return Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Name(value);
  }
  static inline bool Ems_brkpedalstasusType_Parse(const ::std::string& name,
      Ems_brkpedalstasusType* value) {
    return Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double ems_accrawpedalratio = 2;
  bool has_ems_accrawpedalratio() const;
  void clear_ems_accrawpedalratio();
  static const int kEmsAccrawpedalratioFieldNumber = 2;
  double ems_accrawpedalratio() const;
  void set_ems_accrawpedalratio(double value);

  // optional int32 minindicatedtorqwhl = 1;
  bool has_minindicatedtorqwhl() const;
  void clear_minindicatedtorqwhl();
  static const int kMinindicatedtorqwhlFieldNumber = 1;
  ::google::protobuf::int32 minindicatedtorqwhl() const;
  void set_minindicatedtorqwhl(::google::protobuf::int32 value);

  // optional int32 dcm_ems_rollingcounter_0x107 = 4;
  bool has_dcm_ems_rollingcounter_0x107() const;
  void clear_dcm_ems_rollingcounter_0x107();
  static const int kDcmEmsRollingcounter0X107FieldNumber = 4;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x107() const;
  void set_dcm_ems_rollingcounter_0x107(::google::protobuf::int32 value);

  // optional double ems_accpedalratio = 3;
  bool has_ems_accpedalratio() const;
  void clear_ems_accpedalratio();
  static const int kEmsAccpedalratioFieldNumber = 3;
  double ems_accpedalratio() const;
  void set_ems_accpedalratio(double value);

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
  bool has_ems_kickdown() const;
  void clear_ems_kickdown();
  static const int kEmsKickdownFieldNumber = 5;
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType ems_kickdown() const;
  void set_ems_kickdown(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType value);

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
  bool has_ems_accpedalratioerror() const;
  void clear_ems_accpedalratioerror();
  static const int kEmsAccpedalratioerrorFieldNumber = 6;
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType ems_accpedalratioerror() const;
  void set_ems_accpedalratioerror(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType value);

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
  bool has_ems_brkpedalstasus() const;
  void clear_ems_brkpedalstasus();
  static const int kEmsBrkpedalstasusFieldNumber = 7;
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType ems_brkpedalstasus() const;
  void set_ems_brkpedalstasus(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType value);

  // optional int32 dcm_ems_checksum_0x107 = 8;
  bool has_dcm_ems_checksum_0x107() const;
  void clear_dcm_ems_checksum_0x107();
  static const int kDcmEmsChecksum0X107FieldNumber = 8;
  ::google::protobuf::int32 dcm_ems_checksum_0x107() const;
  void set_dcm_ems_checksum_0x107(::google::protobuf::int32 value);

  // optional int32 maxindicatedtorqwhl = 9;
  bool has_maxindicatedtorqwhl() const;
  void clear_maxindicatedtorqwhl();
  static const int kMaxindicatedtorqwhlFieldNumber = 9;
  ::google::protobuf::int32 maxindicatedtorqwhl() const;
  void set_maxindicatedtorqwhl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
 private:
  void set_has_minindicatedtorqwhl();
  void clear_has_minindicatedtorqwhl();
  void set_has_ems_accrawpedalratio();
  void clear_has_ems_accrawpedalratio();
  void set_has_ems_accpedalratio();
  void clear_has_ems_accpedalratio();
  void set_has_dcm_ems_rollingcounter_0x107();
  void clear_has_dcm_ems_rollingcounter_0x107();
  void set_has_ems_kickdown();
  void clear_has_ems_kickdown();
  void set_has_ems_accpedalratioerror();
  void clear_has_ems_accpedalratioerror();
  void set_has_ems_brkpedalstasus();
  void clear_has_ems_brkpedalstasus();
  void set_has_dcm_ems_checksum_0x107();
  void clear_has_dcm_ems_checksum_0x107();
  void set_has_maxindicatedtorqwhl();
  void clear_has_maxindicatedtorqwhl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ems_accrawpedalratio_;
  ::google::protobuf::int32 minindicatedtorqwhl_;
  ::google::protobuf::int32 dcm_ems_rollingcounter_0x107_;
  double ems_accpedalratio_;
  int ems_kickdown_;
  int ems_accpedalratioerror_;
  int ems_brkpedalstasus_;
  ::google::protobuf::int32 dcm_ems_checksum_0x107_;
  ::google::protobuf::int32 maxindicatedtorqwhl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Abs_sts_0x221_221 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Abs_sts_0x221_221) */ {
 public:
  Abs_sts_0x221_221();
  virtual ~Abs_sts_0x221_221();

  Abs_sts_0x221_221(const Abs_sts_0x221_221& from);

  inline Abs_sts_0x221_221& operator=(const Abs_sts_0x221_221& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Abs_sts_0x221_221& default_instance();

  static inline const Abs_sts_0x221_221* internal_default_instance() {
    return reinterpret_cast<const Abs_sts_0x221_221*>(
               &_Abs_sts_0x221_221_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(Abs_sts_0x221_221* other);

  // implements Message ----------------------------------------------

  inline Abs_sts_0x221_221* New() const PROTOBUF_FINAL { return New(NULL); }

  Abs_sts_0x221_221* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Abs_sts_0x221_221& from);
  void MergeFrom(const Abs_sts_0x221_221& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Abs_sts_0x221_221* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Abs_sts_0x221_221_Abs_vehspddirectionType Abs_vehspddirectionType;
  static const Abs_vehspddirectionType ABS_VEHSPDDIRECTION_FORWARD =
    Abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_FORWARD;
  static const Abs_vehspddirectionType ABS_VEHSPDDIRECTION_BACKWARD =
    Abs_sts_0x221_221_Abs_vehspddirectionType_ABS_VEHSPDDIRECTION_BACKWARD;
  static inline bool Abs_vehspddirectionType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(value);
  }
  static const Abs_vehspddirectionType Abs_vehspddirectionType_MIN =
    Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MIN;
  static const Abs_vehspddirectionType Abs_vehspddirectionType_MAX =
    Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_MAX;
  static const int Abs_vehspddirectionType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_vehspddirectionType_Abs_vehspddirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_vehspddirectionType_descriptor() {
    return Abs_sts_0x221_221_Abs_vehspddirectionType_descriptor();
  }
  static inline const ::std::string& Abs_vehspddirectionType_Name(Abs_vehspddirectionType value) {
    return Abs_sts_0x221_221_Abs_vehspddirectionType_Name(value);
  }
  static inline bool Abs_vehspddirectionType_Parse(const ::std::string& name,
      Abs_vehspddirectionType* value) {
    return Abs_sts_0x221_221_Abs_vehspddirectionType_Parse(name, value);
  }

  typedef Abs_sts_0x221_221_Abs_ebdflgfltType Abs_ebdflgfltType;
  static const Abs_ebdflgfltType ABS_EBDFLGFLT_NO_FAILURE =
    Abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_NO_FAILURE;
  static const Abs_ebdflgfltType ABS_EBDFLGFLT_FAILURE =
    Abs_sts_0x221_221_Abs_ebdflgfltType_ABS_EBDFLGFLT_FAILURE;
  static inline bool Abs_ebdflgfltType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(value);
  }
  static const Abs_ebdflgfltType Abs_ebdflgfltType_MIN =
    Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MIN;
  static const Abs_ebdflgfltType Abs_ebdflgfltType_MAX =
    Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_MAX;
  static const int Abs_ebdflgfltType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_ebdflgfltType_Abs_ebdflgfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_ebdflgfltType_descriptor() {
    return Abs_sts_0x221_221_Abs_ebdflgfltType_descriptor();
  }
  static inline const ::std::string& Abs_ebdflgfltType_Name(Abs_ebdflgfltType value) {
    return Abs_sts_0x221_221_Abs_ebdflgfltType_Name(value);
  }
  static inline bool Abs_ebdflgfltType_Parse(const ::std::string& name,
      Abs_ebdflgfltType* value) {
    return Abs_sts_0x221_221_Abs_ebdflgfltType_Parse(name, value);
  }

  typedef Abs_sts_0x221_221_Abs_absflgfltType Abs_absflgfltType;
  static const Abs_absflgfltType ABS_ABSFLGFLT_NO_FAILURE =
    Abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_NO_FAILURE;
  static const Abs_absflgfltType ABS_ABSFLGFLT_FAILURE =
    Abs_sts_0x221_221_Abs_absflgfltType_ABS_ABSFLGFLT_FAILURE;
  static inline bool Abs_absflgfltType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_absflgfltType_IsValid(value);
  }
  static const Abs_absflgfltType Abs_absflgfltType_MIN =
    Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MIN;
  static const Abs_absflgfltType Abs_absflgfltType_MAX =
    Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_MAX;
  static const int Abs_absflgfltType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_absflgfltType_Abs_absflgfltType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_absflgfltType_descriptor() {
    return Abs_sts_0x221_221_Abs_absflgfltType_descriptor();
  }
  static inline const ::std::string& Abs_absflgfltType_Name(Abs_absflgfltType value) {
    return Abs_sts_0x221_221_Abs_absflgfltType_Name(value);
  }
  static inline bool Abs_absflgfltType_Parse(const ::std::string& name,
      Abs_absflgfltType* value) {
    return Abs_sts_0x221_221_Abs_absflgfltType_Parse(name, value);
  }

  typedef Abs_sts_0x221_221_Abs_absctrlactvType Abs_absctrlactvType;
  static const Abs_absctrlactvType ABS_ABSCTRLACTV_NOT_ACTIVE =
    Abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_NOT_ACTIVE;
  static const Abs_absctrlactvType ABS_ABSCTRLACTV_ACTIVE =
    Abs_sts_0x221_221_Abs_absctrlactvType_ABS_ABSCTRLACTV_ACTIVE;
  static inline bool Abs_absctrlactvType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_absctrlactvType_IsValid(value);
  }
  static const Abs_absctrlactvType Abs_absctrlactvType_MIN =
    Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MIN;
  static const Abs_absctrlactvType Abs_absctrlactvType_MAX =
    Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_MAX;
  static const int Abs_absctrlactvType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_absctrlactvType_Abs_absctrlactvType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_absctrlactvType_descriptor() {
    return Abs_sts_0x221_221_Abs_absctrlactvType_descriptor();
  }
  static inline const ::std::string& Abs_absctrlactvType_Name(Abs_absctrlactvType value) {
    return Abs_sts_0x221_221_Abs_absctrlactvType_Name(value);
  }
  static inline bool Abs_absctrlactvType_Parse(const ::std::string& name,
      Abs_absctrlactvType* value) {
    return Abs_sts_0x221_221_Abs_absctrlactvType_Parse(name, value);
  }

  typedef Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_whlmilgfrntlestatusType;
  static const Abs_whlmilgfrntlestatusType ABS_WHLMILGFRNTLESTATUS_VALID =
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_VALID;
  static const Abs_whlmilgfrntlestatusType ABS_WHLMILGFRNTLESTATUS_INVALID =
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_ABS_WHLMILGFRNTLESTATUS_INVALID;
  static inline bool Abs_whlmilgfrntlestatusType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(value);
  }
  static const Abs_whlmilgfrntlestatusType Abs_whlmilgfrntlestatusType_MIN =
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MIN;
  static const Abs_whlmilgfrntlestatusType Abs_whlmilgfrntlestatusType_MAX =
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_MAX;
  static const int Abs_whlmilgfrntlestatusType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Abs_whlmilgfrntlestatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlmilgfrntlestatusType_descriptor() {
    return Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlmilgfrntlestatusType_Name(Abs_whlmilgfrntlestatusType value) {
    return Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Name(value);
  }
  static inline bool Abs_whlmilgfrntlestatusType_Parse(const ::std::string& name,
      Abs_whlmilgfrntlestatusType* value) {
    return Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_Parse(name, value);
  }

  typedef Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_whlmilgfrntristatusType;
  static const Abs_whlmilgfrntristatusType ABS_WHLMILGFRNTRISTATUS_VALID =
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_VALID;
  static const Abs_whlmilgfrntristatusType ABS_WHLMILGFRNTRISTATUS_INVALID =
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_ABS_WHLMILGFRNTRISTATUS_INVALID;
  static inline bool Abs_whlmilgfrntristatusType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(value);
  }
  static const Abs_whlmilgfrntristatusType Abs_whlmilgfrntristatusType_MIN =
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MIN;
  static const Abs_whlmilgfrntristatusType Abs_whlmilgfrntristatusType_MAX =
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_MAX;
  static const int Abs_whlmilgfrntristatusType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Abs_whlmilgfrntristatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_whlmilgfrntristatusType_descriptor() {
    return Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor();
  }
  static inline const ::std::string& Abs_whlmilgfrntristatusType_Name(Abs_whlmilgfrntristatusType value) {
    return Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Name(value);
  }
  static inline bool Abs_whlmilgfrntristatusType_Parse(const ::std::string& name,
      Abs_whlmilgfrntristatusType* value) {
    return Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_Parse(name, value);
  }

  typedef Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_vehspdlgtstatusType;
  static const Abs_vehspdlgtstatusType ABS_VEHSPDLGTSTATUS_VALID =
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_VALID;
  static const Abs_vehspdlgtstatusType ABS_VEHSPDLGTSTATUS_INVALID =
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INVALID;
  static const Abs_vehspdlgtstatusType ABS_VEHSPDLGTSTATUS_INIT =
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_ABS_VEHSPDLGTSTATUS_INIT;
  static inline bool Abs_vehspdlgtstatusType_IsValid(int value) {
    return Abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(value);
  }
  static const Abs_vehspdlgtstatusType Abs_vehspdlgtstatusType_MIN =
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MIN;
  static const Abs_vehspdlgtstatusType Abs_vehspdlgtstatusType_MAX =
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_MAX;
  static const int Abs_vehspdlgtstatusType_ARRAYSIZE =
    Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Abs_vehspdlgtstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Abs_vehspdlgtstatusType_descriptor() {
    return Abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor();
  }
  static inline const ::std::string& Abs_vehspdlgtstatusType_Name(Abs_vehspdlgtstatusType value) {
    return Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Name(value);
  }
  static inline bool Abs_vehspdlgtstatusType_Parse(const ::std::string& name,
      Abs_vehspdlgtstatusType* value) {
    return Abs_sts_0x221_221_Abs_vehspdlgtstatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double abs_vehspdlgt = 2;
  bool has_abs_vehspdlgt() const;
  void clear_abs_vehspdlgt();
  static const int kAbsVehspdlgtFieldNumber = 2;
  double abs_vehspdlgt() const;
  void set_abs_vehspdlgt(double value);

  // optional int32 abs_whlmilgfrntri = 1;
  bool has_abs_whlmilgfrntri() const;
  void clear_abs_whlmilgfrntri();
  static const int kAbsWhlmilgfrntriFieldNumber = 1;
  ::google::protobuf::int32 abs_whlmilgfrntri() const;
  void set_abs_whlmilgfrntri(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
  bool has_abs_vehspddirection() const;
  void clear_abs_vehspddirection();
  static const int kAbsVehspddirectionFieldNumber = 3;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType abs_vehspddirection() const;
  void set_abs_vehspddirection(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
  bool has_abs_ebdflgflt() const;
  void clear_abs_ebdflgflt();
  static const int kAbsEbdflgfltFieldNumber = 4;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType abs_ebdflgflt() const;
  void set_abs_ebdflgflt(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
  bool has_abs_absflgflt() const;
  void clear_abs_absflgflt();
  static const int kAbsAbsflgfltFieldNumber = 5;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType abs_absflgflt() const;
  void set_abs_absflgflt(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
  bool has_abs_absctrlactv() const;
  void clear_abs_absctrlactv();
  static const int kAbsAbsctrlactvFieldNumber = 6;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType abs_absctrlactv() const;
  void set_abs_absctrlactv(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType value);

  // optional int32 rollingcounter_0x221 = 7;
  bool has_rollingcounter_0x221() const;
  void clear_rollingcounter_0x221();
  static const int kRollingcounter0X221FieldNumber = 7;
  ::google::protobuf::int32 rollingcounter_0x221() const;
  void set_rollingcounter_0x221(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
  bool has_abs_whlmilgfrntlestatus() const;
  void clear_abs_whlmilgfrntlestatus();
  static const int kAbsWhlmilgfrntlestatusFieldNumber = 8;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus() const;
  void set_abs_whlmilgfrntlestatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
  bool has_abs_whlmilgfrntristatus() const;
  void clear_abs_whlmilgfrntristatus();
  static const int kAbsWhlmilgfrntristatusFieldNumber = 9;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus() const;
  void set_abs_whlmilgfrntristatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType value);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
  bool has_abs_vehspdlgtstatus() const;
  void clear_abs_vehspdlgtstatus();
  static const int kAbsVehspdlgtstatusFieldNumber = 10;
  ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType abs_vehspdlgtstatus() const;
  void set_abs_vehspdlgtstatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType value);

  // optional int32 checksum_0x221 = 11;
  bool has_checksum_0x221() const;
  void clear_checksum_0x221();
  static const int kChecksum0X221FieldNumber = 11;
  ::google::protobuf::int32 checksum_0x221() const;
  void set_checksum_0x221(::google::protobuf::int32 value);

  // optional int32 abs_whlmilgfrntle = 12;
  bool has_abs_whlmilgfrntle() const;
  void clear_abs_whlmilgfrntle();
  static const int kAbsWhlmilgfrntleFieldNumber = 12;
  ::google::protobuf::int32 abs_whlmilgfrntle() const;
  void set_abs_whlmilgfrntle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Abs_sts_0x221_221)
 private:
  void set_has_abs_whlmilgfrntri();
  void clear_has_abs_whlmilgfrntri();
  void set_has_abs_vehspdlgt();
  void clear_has_abs_vehspdlgt();
  void set_has_abs_vehspddirection();
  void clear_has_abs_vehspddirection();
  void set_has_abs_ebdflgflt();
  void clear_has_abs_ebdflgflt();
  void set_has_abs_absflgflt();
  void clear_has_abs_absflgflt();
  void set_has_abs_absctrlactv();
  void clear_has_abs_absctrlactv();
  void set_has_rollingcounter_0x221();
  void clear_has_rollingcounter_0x221();
  void set_has_abs_whlmilgfrntlestatus();
  void clear_has_abs_whlmilgfrntlestatus();
  void set_has_abs_whlmilgfrntristatus();
  void clear_has_abs_whlmilgfrntristatus();
  void set_has_abs_vehspdlgtstatus();
  void clear_has_abs_vehspdlgtstatus();
  void set_has_checksum_0x221();
  void clear_has_checksum_0x221();
  void set_has_abs_whlmilgfrntle();
  void clear_has_abs_whlmilgfrntle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double abs_vehspdlgt_;
  ::google::protobuf::int32 abs_whlmilgfrntri_;
  int abs_vehspddirection_;
  int abs_ebdflgflt_;
  int abs_absflgflt_;
  int abs_absctrlactv_;
  ::google::protobuf::int32 rollingcounter_0x221_;
  int abs_whlmilgfrntlestatus_;
  int abs_whlmilgfrntristatus_;
  int abs_vehspdlgtstatus_;
  ::google::protobuf::int32 checksum_0x221_;
  ::google::protobuf::int32 abs_whlmilgfrntle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mrr_frobj_0x480_480 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Mrr_frobj_0x480_480) */ {
 public:
  Mrr_frobj_0x480_480();
  virtual ~Mrr_frobj_0x480_480();

  Mrr_frobj_0x480_480(const Mrr_frobj_0x480_480& from);

  inline Mrr_frobj_0x480_480& operator=(const Mrr_frobj_0x480_480& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mrr_frobj_0x480_480& default_instance();

  static inline const Mrr_frobj_0x480_480* internal_default_instance() {
    return reinterpret_cast<const Mrr_frobj_0x480_480*>(
               &_Mrr_frobj_0x480_480_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(Mrr_frobj_0x480_480* other);

  // implements Message ----------------------------------------------

  inline Mrr_frobj_0x480_480* New() const PROTOBUF_FINAL { return New(NULL); }

  Mrr_frobj_0x480_480* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mrr_frobj_0x480_480& from);
  void MergeFrom(const Mrr_frobj_0x480_480& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mrr_frobj_0x480_480* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_l_obj_0x_classType;
  static const Mrr_l_obj_0x_classType MRR_L_OBJ_0X_CLASS_UNKNOWN =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_UNKNOWN;
  static const Mrr_l_obj_0x_classType MRR_L_OBJ_0X_CLASS_CAR =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_CAR;
  static const Mrr_l_obj_0x_classType MRR_L_OBJ_0X_CLASS_TRUCK =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_TRUCK;
  static const Mrr_l_obj_0x_classType MRR_L_OBJ_0X_CLASS_TWO_WHEELER =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_MRR_L_OBJ_0X_CLASS_TWO_WHEELER;
  static inline bool Mrr_l_obj_0x_classType_IsValid(int value) {
    return Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_IsValid(value);
  }
  static const Mrr_l_obj_0x_classType Mrr_l_obj_0x_classType_MIN =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_MIN;
  static const Mrr_l_obj_0x_classType Mrr_l_obj_0x_classType_MAX =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_MAX;
  static const int Mrr_l_obj_0x_classType_ARRAYSIZE =
    Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Mrr_l_obj_0x_classType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_l_obj_0x_classType_descriptor() {
    return Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_descriptor();
  }
  static inline const ::std::string& Mrr_l_obj_0x_classType_Name(Mrr_l_obj_0x_classType value) {
    return Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Name(value);
  }
  static inline bool Mrr_l_obj_0x_classType_Parse(const ::std::string& name,
      Mrr_l_obj_0x_classType* value) {
    return Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_Parse(name, value);
  }

  typedef Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_r_obj_0x_classType;
  static const Mrr_r_obj_0x_classType MRR_R_OBJ_0X_CLASS_UNKNOWN =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_UNKNOWN;
  static const Mrr_r_obj_0x_classType MRR_R_OBJ_0X_CLASS_CAR =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_CAR;
  static const Mrr_r_obj_0x_classType MRR_R_OBJ_0X_CLASS_TRUCK =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_TRUCK;
  static const Mrr_r_obj_0x_classType MRR_R_OBJ_0X_CLASS_TWO_WHEELER =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_MRR_R_OBJ_0X_CLASS_TWO_WHEELER;
  static inline bool Mrr_r_obj_0x_classType_IsValid(int value) {
    return Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_IsValid(value);
  }
  static const Mrr_r_obj_0x_classType Mrr_r_obj_0x_classType_MIN =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_MIN;
  static const Mrr_r_obj_0x_classType Mrr_r_obj_0x_classType_MAX =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_MAX;
  static const int Mrr_r_obj_0x_classType_ARRAYSIZE =
    Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Mrr_r_obj_0x_classType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_r_obj_0x_classType_descriptor() {
    return Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_descriptor();
  }
  static inline const ::std::string& Mrr_r_obj_0x_classType_Name(Mrr_r_obj_0x_classType value) {
    return Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Name(value);
  }
  static inline bool Mrr_r_obj_0x_classType_Parse(const ::std::string& name,
      Mrr_r_obj_0x_classType* value) {
    return Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_Parse(name, value);
  }

  typedef Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_lefttargrtdetectionType;
  static const Mrr_lefttargrtdetectionType MRR_LEFTTARGRTDETECTION_NOT_DECTECTED =
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_MRR_LEFTTARGRTDETECTION_NOT_DECTECTED;
  static const Mrr_lefttargrtdetectionType MRR_LEFTTARGRTDETECTION_DECTECTED =
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_MRR_LEFTTARGRTDETECTION_DECTECTED;
  static inline bool Mrr_lefttargrtdetectionType_IsValid(int value) {
    return Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_IsValid(value);
  }
  static const Mrr_lefttargrtdetectionType Mrr_lefttargrtdetectionType_MIN =
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_MIN;
  static const Mrr_lefttargrtdetectionType Mrr_lefttargrtdetectionType_MAX =
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_MAX;
  static const int Mrr_lefttargrtdetectionType_ARRAYSIZE =
    Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Mrr_lefttargrtdetectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_lefttargrtdetectionType_descriptor() {
    return Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_descriptor();
  }
  static inline const ::std::string& Mrr_lefttargrtdetectionType_Name(Mrr_lefttargrtdetectionType value) {
    return Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Name(value);
  }
  static inline bool Mrr_lefttargrtdetectionType_Parse(const ::std::string& name,
      Mrr_lefttargrtdetectionType* value) {
    return Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_Parse(name, value);
  }

  typedef Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_righttargrtdetectionType;
  static const Mrr_righttargrtdetectionType MRR_RIGHTTARGRTDETECTION_NOT_DECTECTED =
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_MRR_RIGHTTARGRTDETECTION_NOT_DECTECTED;
  static const Mrr_righttargrtdetectionType MRR_RIGHTTARGRTDETECTION_DECTECTED =
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_MRR_RIGHTTARGRTDETECTION_DECTECTED;
  static inline bool Mrr_righttargrtdetectionType_IsValid(int value) {
    return Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_IsValid(value);
  }
  static const Mrr_righttargrtdetectionType Mrr_righttargrtdetectionType_MIN =
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_MIN;
  static const Mrr_righttargrtdetectionType Mrr_righttargrtdetectionType_MAX =
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_MAX;
  static const int Mrr_righttargrtdetectionType_ARRAYSIZE =
    Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Mrr_righttargrtdetectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_righttargrtdetectionType_descriptor() {
    return Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_descriptor();
  }
  static inline const ::std::string& Mrr_righttargrtdetectionType_Name(Mrr_righttargrtdetectionType value) {
    return Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Name(value);
  }
  static inline bool Mrr_righttargrtdetectionType_Parse(const ::std::string& name,
      Mrr_righttargrtdetectionType* value) {
    return Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double mrr_l_object_dy = 1;
  bool has_mrr_l_object_dy() const;
  void clear_mrr_l_object_dy();
  static const int kMrrLObjectDyFieldNumber = 1;
  double mrr_l_object_dy() const;
  void set_mrr_l_object_dy(double value);

  // optional double mrr_r_object_dx = 3;
  bool has_mrr_r_object_dx() const;
  void clear_mrr_r_object_dx();
  static const int kMrrRObjectDxFieldNumber = 3;
  double mrr_r_object_dx() const;
  void set_mrr_r_object_dx(double value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
  bool has_mrr_l_obj_0x_class() const;
  void clear_mrr_l_obj_0x_class();
  static const int kMrrLObj0XClassFieldNumber = 2;
  ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType mrr_l_obj_0x_class() const;
  void set_mrr_l_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
  bool has_mrr_r_obj_0x_class() const;
  void clear_mrr_r_obj_0x_class();
  static const int kMrrRObj0XClassFieldNumber = 5;
  ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType mrr_r_obj_0x_class() const;
  void set_mrr_r_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType value);

  // optional double mrr_r_object_dy = 4;
  bool has_mrr_r_object_dy() const;
  void clear_mrr_r_object_dy();
  static const int kMrrRObjectDyFieldNumber = 4;
  double mrr_r_object_dy() const;
  void set_mrr_r_object_dy(double value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
  bool has_mrr_lefttargrtdetection() const;
  void clear_mrr_lefttargrtdetection();
  static const int kMrrLefttargrtdetectionFieldNumber = 6;
  ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType mrr_lefttargrtdetection() const;
  void set_mrr_lefttargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
  bool has_mrr_righttargrtdetection() const;
  void clear_mrr_righttargrtdetection();
  static const int kMrrRighttargrtdetectionFieldNumber = 7;
  ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType mrr_righttargrtdetection() const;
  void set_mrr_righttargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType value);

  // optional double mrr_l_object_dx = 8;
  bool has_mrr_l_object_dx() const;
  void clear_mrr_l_object_dx();
  static const int kMrrLObjectDxFieldNumber = 8;
  double mrr_l_object_dx() const;
  void set_mrr_l_object_dx(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Mrr_frobj_0x480_480)
 private:
  void set_has_mrr_l_object_dy();
  void clear_has_mrr_l_object_dy();
  void set_has_mrr_l_obj_0x_class();
  void clear_has_mrr_l_obj_0x_class();
  void set_has_mrr_r_object_dx();
  void clear_has_mrr_r_object_dx();
  void set_has_mrr_r_object_dy();
  void clear_has_mrr_r_object_dy();
  void set_has_mrr_r_obj_0x_class();
  void clear_has_mrr_r_obj_0x_class();
  void set_has_mrr_lefttargrtdetection();
  void clear_has_mrr_lefttargrtdetection();
  void set_has_mrr_righttargrtdetection();
  void clear_has_mrr_righttargrtdetection();
  void set_has_mrr_l_object_dx();
  void clear_has_mrr_l_object_dx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double mrr_l_object_dy_;
  double mrr_r_object_dx_;
  int mrr_l_obj_0x_class_;
  int mrr_r_obj_0x_class_;
  double mrr_r_object_dy_;
  int mrr_lefttargrtdetection_;
  int mrr_righttargrtdetection_;
  double mrr_l_object_dx_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mrr_0x246_246 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Mrr_0x246_246) */ {
 public:
  Mrr_0x246_246();
  virtual ~Mrr_0x246_246();

  Mrr_0x246_246(const Mrr_0x246_246& from);

  inline Mrr_0x246_246& operator=(const Mrr_0x246_246& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mrr_0x246_246& default_instance();

  static inline const Mrr_0x246_246* internal_default_instance() {
    return reinterpret_cast<const Mrr_0x246_246*>(
               &_Mrr_0x246_246_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(Mrr_0x246_246* other);

  // implements Message ----------------------------------------------

  inline Mrr_0x246_246* New() const PROTOBUF_FINAL { return New(NULL); }

  Mrr_0x246_246* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mrr_0x246_246& from);
  void MergeFrom(const Mrr_0x246_246& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mrr_0x246_246* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Mrr_0x246_246_TaugapsetType TaugapsetType;
  static const TaugapsetType TAUGAPSET_TAUGAP_0 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_0;
  static const TaugapsetType TAUGAPSET_TAUGAP_1 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_1;
  static const TaugapsetType TAUGAPSET_TAUGAP_2 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_2;
  static const TaugapsetType TAUGAPSET_TAUGAP_3 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_3;
  static const TaugapsetType TAUGAPSET_TAUGAP_4 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_4;
  static const TaugapsetType TAUGAPSET_TAUGAP_5 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_5;
  static const TaugapsetType TAUGAPSET_TAUGAP_6 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_6;
  static const TaugapsetType TAUGAPSET_TAUGAP_7 =
    Mrr_0x246_246_TaugapsetType_TAUGAPSET_TAUGAP_7;
  static inline bool TaugapsetType_IsValid(int value) {
    return Mrr_0x246_246_TaugapsetType_IsValid(value);
  }
  static const TaugapsetType TaugapsetType_MIN =
    Mrr_0x246_246_TaugapsetType_TaugapsetType_MIN;
  static const TaugapsetType TaugapsetType_MAX =
    Mrr_0x246_246_TaugapsetType_TaugapsetType_MAX;
  static const int TaugapsetType_ARRAYSIZE =
    Mrr_0x246_246_TaugapsetType_TaugapsetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaugapsetType_descriptor() {
    return Mrr_0x246_246_TaugapsetType_descriptor();
  }
  static inline const ::std::string& TaugapsetType_Name(TaugapsetType value) {
    return Mrr_0x246_246_TaugapsetType_Name(value);
  }
  static inline bool TaugapsetType_Parse(const ::std::string& name,
      TaugapsetType* value) {
    return Mrr_0x246_246_TaugapsetType_Parse(name, value);
  }

  typedef Mrr_0x246_246_DxtarobjType DxtarobjType;
  static const DxtarobjType DXTAROBJ_DISTANCE_0 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_0;
  static const DxtarobjType DXTAROBJ_DISTANCE_1 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_1;
  static const DxtarobjType DXTAROBJ_DISTANCE_2 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_2;
  static const DxtarobjType DXTAROBJ_DISTANCE_3 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_3;
  static const DxtarobjType DXTAROBJ_DISTANCE_4 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_4;
  static const DxtarobjType DXTAROBJ_DISTANCE_5 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_5;
  static const DxtarobjType DXTAROBJ_DISTANCE_6 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_6;
  static const DxtarobjType DXTAROBJ_DISTANCE_7 =
    Mrr_0x246_246_DxtarobjType_DXTAROBJ_DISTANCE_7;
  static inline bool DxtarobjType_IsValid(int value) {
    return Mrr_0x246_246_DxtarobjType_IsValid(value);
  }
  static const DxtarobjType DxtarobjType_MIN =
    Mrr_0x246_246_DxtarobjType_DxtarobjType_MIN;
  static const DxtarobjType DxtarobjType_MAX =
    Mrr_0x246_246_DxtarobjType_DxtarobjType_MAX;
  static const int DxtarobjType_ARRAYSIZE =
    Mrr_0x246_246_DxtarobjType_DxtarobjType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DxtarobjType_descriptor() {
    return Mrr_0x246_246_DxtarobjType_descriptor();
  }
  static inline const ::std::string& DxtarobjType_Name(DxtarobjType value) {
    return Mrr_0x246_246_DxtarobjType_Name(value);
  }
  static inline bool DxtarobjType_Parse(const ::std::string& name,
      DxtarobjType* value) {
    return Mrr_0x246_246_DxtarobjType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Acchmi_modeType Acchmi_modeType;
  static const Acchmi_modeType ACCHMI_MODE_OFF_MODE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_OFF_MODE;
  static const Acchmi_modeType ACCHMI_MODE_PASSIVE_MODE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_PASSIVE_MODE;
  static const Acchmi_modeType ACCHMI_MODE_STAND_BY_MODE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_STAND_BY_MODE;
  static const Acchmi_modeType ACCHMI_MODE_ACTIVE_CONTROL_MODE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_ACTIVE_CONTROL_MODE;
  static const Acchmi_modeType ACCHMI_MODE_BRAKE_ONLY_MODE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_BRAKE_ONLY_MODE;
  static const Acchmi_modeType ACCHMI_MODE_OVERRIDE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_OVERRIDE;
  static const Acchmi_modeType ACCHMI_MODE_STANDSTILL =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_STANDSTILL;
  static const Acchmi_modeType ACCHMI_MODE_FAILURE_MODE =
    Mrr_0x246_246_Acchmi_modeType_ACCHMI_MODE_FAILURE_MODE;
  static inline bool Acchmi_modeType_IsValid(int value) {
    return Mrr_0x246_246_Acchmi_modeType_IsValid(value);
  }
  static const Acchmi_modeType Acchmi_modeType_MIN =
    Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_MIN;
  static const Acchmi_modeType Acchmi_modeType_MAX =
    Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_MAX;
  static const int Acchmi_modeType_ARRAYSIZE =
    Mrr_0x246_246_Acchmi_modeType_Acchmi_modeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acchmi_modeType_descriptor() {
    return Mrr_0x246_246_Acchmi_modeType_descriptor();
  }
  static inline const ::std::string& Acchmi_modeType_Name(Acchmi_modeType value) {
    return Mrr_0x246_246_Acchmi_modeType_Name(value);
  }
  static inline bool Acchmi_modeType_Parse(const ::std::string& name,
      Acchmi_modeType* value) {
    return Mrr_0x246_246_Acchmi_modeType_Parse(name, value);
  }

  typedef Mrr_0x246_246_AccfailinfoType AccfailinfoType;
  static const AccfailinfoType ACCFAILINFO_NO_ERROR =
    Mrr_0x246_246_AccfailinfoType_ACCFAILINFO_NO_ERROR;
  static const AccfailinfoType ACCFAILINFO_ERROR =
    Mrr_0x246_246_AccfailinfoType_ACCFAILINFO_ERROR;
  static inline bool AccfailinfoType_IsValid(int value) {
    return Mrr_0x246_246_AccfailinfoType_IsValid(value);
  }
  static const AccfailinfoType AccfailinfoType_MIN =
    Mrr_0x246_246_AccfailinfoType_AccfailinfoType_MIN;
  static const AccfailinfoType AccfailinfoType_MAX =
    Mrr_0x246_246_AccfailinfoType_AccfailinfoType_MAX;
  static const int AccfailinfoType_ARRAYSIZE =
    Mrr_0x246_246_AccfailinfoType_AccfailinfoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AccfailinfoType_descriptor() {
    return Mrr_0x246_246_AccfailinfoType_descriptor();
  }
  static inline const ::std::string& AccfailinfoType_Name(AccfailinfoType value) {
    return Mrr_0x246_246_AccfailinfoType_Name(value);
  }
  static inline bool AccfailinfoType_Parse(const ::std::string& name,
      AccfailinfoType* value) {
    return Mrr_0x246_246_AccfailinfoType_Parse(name, value);
  }

  typedef Mrr_0x246_246_TakeoverreqType TakeoverreqType;
  static const TakeoverreqType TAKEOVERREQ_NO_TAKEOVER_REQUEST =
    Mrr_0x246_246_TakeoverreqType_TAKEOVERREQ_NO_TAKEOVER_REQUEST;
  static const TakeoverreqType TAKEOVERREQ_VALID_TAKEOVER_REQUEST =
    Mrr_0x246_246_TakeoverreqType_TAKEOVERREQ_VALID_TAKEOVER_REQUEST;
  static inline bool TakeoverreqType_IsValid(int value) {
    return Mrr_0x246_246_TakeoverreqType_IsValid(value);
  }
  static const TakeoverreqType TakeoverreqType_MIN =
    Mrr_0x246_246_TakeoverreqType_TakeoverreqType_MIN;
  static const TakeoverreqType TakeoverreqType_MAX =
    Mrr_0x246_246_TakeoverreqType_TakeoverreqType_MAX;
  static const int TakeoverreqType_ARRAYSIZE =
    Mrr_0x246_246_TakeoverreqType_TakeoverreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TakeoverreqType_descriptor() {
    return Mrr_0x246_246_TakeoverreqType_descriptor();
  }
  static inline const ::std::string& TakeoverreqType_Name(TakeoverreqType value) {
    return Mrr_0x246_246_TakeoverreqType_Name(value);
  }
  static inline bool TakeoverreqType_Parse(const ::std::string& name,
      TakeoverreqType* value) {
    return Mrr_0x246_246_TakeoverreqType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_fcw_sensitiveType;
  static const Mrr_fcw_sensitiveType MRR_FCW_SENSITIVE_UNAVAILABLE =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_UNAVAILABLE;
  static const Mrr_fcw_sensitiveType MRR_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE;
  static const Mrr_fcw_sensitiveType MRR_FCW_SENSITIVE_LEVEL2_NORMAL =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL2_NORMAL;
  static const Mrr_fcw_sensitiveType MRR_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_MRR_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE;
  static inline bool Mrr_fcw_sensitiveType_IsValid(int value) {
    return Mrr_0x246_246_Mrr_fcw_sensitiveType_IsValid(value);
  }
  static const Mrr_fcw_sensitiveType Mrr_fcw_sensitiveType_MIN =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_MIN;
  static const Mrr_fcw_sensitiveType Mrr_fcw_sensitiveType_MAX =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_MAX;
  static const int Mrr_fcw_sensitiveType_ARRAYSIZE =
    Mrr_0x246_246_Mrr_fcw_sensitiveType_Mrr_fcw_sensitiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_fcw_sensitiveType_descriptor() {
    return Mrr_0x246_246_Mrr_fcw_sensitiveType_descriptor();
  }
  static inline const ::std::string& Mrr_fcw_sensitiveType_Name(Mrr_fcw_sensitiveType value) {
    return Mrr_0x246_246_Mrr_fcw_sensitiveType_Name(value);
  }
  static inline bool Mrr_fcw_sensitiveType_Parse(const ::std::string& name,
      Mrr_fcw_sensitiveType* value) {
    return Mrr_0x246_246_Mrr_fcw_sensitiveType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Aeb_stateType Aeb_stateType;
  static const Aeb_stateType AEB_STATE_UNAVAILABLE =
    Mrr_0x246_246_Aeb_stateType_AEB_STATE_UNAVAILABLE;
  static const Aeb_stateType AEB_STATE_OFF =
    Mrr_0x246_246_Aeb_stateType_AEB_STATE_OFF;
  static const Aeb_stateType AEB_STATE_STANDBY =
    Mrr_0x246_246_Aeb_stateType_AEB_STATE_STANDBY;
  static const Aeb_stateType AEB_STATE_ACTIVE_NO_INTERVENTION =
    Mrr_0x246_246_Aeb_stateType_AEB_STATE_ACTIVE_NO_INTERVENTION;
  static const Aeb_stateType AEB_STATE_ACTIVE =
    Mrr_0x246_246_Aeb_stateType_AEB_STATE_ACTIVE;
  static const Aeb_stateType AEB_STATE_RESERVED =
    Mrr_0x246_246_Aeb_stateType_AEB_STATE_RESERVED;
  static inline bool Aeb_stateType_IsValid(int value) {
    return Mrr_0x246_246_Aeb_stateType_IsValid(value);
  }
  static const Aeb_stateType Aeb_stateType_MIN =
    Mrr_0x246_246_Aeb_stateType_Aeb_stateType_MIN;
  static const Aeb_stateType Aeb_stateType_MAX =
    Mrr_0x246_246_Aeb_stateType_Aeb_stateType_MAX;
  static const int Aeb_stateType_ARRAYSIZE =
    Mrr_0x246_246_Aeb_stateType_Aeb_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Aeb_stateType_descriptor() {
    return Mrr_0x246_246_Aeb_stateType_descriptor();
  }
  static inline const ::std::string& Aeb_stateType_Name(Aeb_stateType value) {
    return Mrr_0x246_246_Aeb_stateType_Name(value);
  }
  static inline bool Aeb_stateType_Parse(const ::std::string& name,
      Aeb_stateType* value) {
    return Mrr_0x246_246_Aeb_stateType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Acc_startstop_inforType Acc_startstop_inforType;
  static const Acc_startstop_inforType ACC_STARTSTOP_INFOR_ACC_STOPALLOWED =
    Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STOPALLOWED;
  static const Acc_startstop_inforType ACC_STARTSTOP_INFOR_ACC_STOPFORBIDDEN =
    Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STOPFORBIDDEN;
  static const Acc_startstop_inforType ACC_STARTSTOP_INFOR_ACC_STARTREQUEST =
    Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_STARTREQUEST;
  static const Acc_startstop_inforType ACC_STARTSTOP_INFOR_ACC_SYSTEMFAILURE =
    Mrr_0x246_246_Acc_startstop_inforType_ACC_STARTSTOP_INFOR_ACC_SYSTEMFAILURE;
  static inline bool Acc_startstop_inforType_IsValid(int value) {
    return Mrr_0x246_246_Acc_startstop_inforType_IsValid(value);
  }
  static const Acc_startstop_inforType Acc_startstop_inforType_MIN =
    Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_MIN;
  static const Acc_startstop_inforType Acc_startstop_inforType_MAX =
    Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_MAX;
  static const int Acc_startstop_inforType_ARRAYSIZE =
    Mrr_0x246_246_Acc_startstop_inforType_Acc_startstop_inforType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Acc_startstop_inforType_descriptor() {
    return Mrr_0x246_246_Acc_startstop_inforType_descriptor();
  }
  static inline const ::std::string& Acc_startstop_inforType_Name(Acc_startstop_inforType value) {
    return Mrr_0x246_246_Acc_startstop_inforType_Name(value);
  }
  static inline bool Acc_startstop_inforType_Parse(const ::std::string& name,
      Acc_startstop_inforType* value) {
    return Mrr_0x246_246_Acc_startstop_inforType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Fcw_prewarningType Fcw_prewarningType;
  static const Fcw_prewarningType FCW_PREWARNING_NO_WARNING =
    Mrr_0x246_246_Fcw_prewarningType_FCW_PREWARNING_NO_WARNING;
  static const Fcw_prewarningType FCW_PREWARNING_WARNING =
    Mrr_0x246_246_Fcw_prewarningType_FCW_PREWARNING_WARNING;
  static inline bool Fcw_prewarningType_IsValid(int value) {
    return Mrr_0x246_246_Fcw_prewarningType_IsValid(value);
  }
  static const Fcw_prewarningType Fcw_prewarningType_MIN =
    Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_MIN;
  static const Fcw_prewarningType Fcw_prewarningType_MAX =
    Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_MAX;
  static const int Fcw_prewarningType_ARRAYSIZE =
    Mrr_0x246_246_Fcw_prewarningType_Fcw_prewarningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fcw_prewarningType_descriptor() {
    return Mrr_0x246_246_Fcw_prewarningType_descriptor();
  }
  static inline const ::std::string& Fcw_prewarningType_Name(Fcw_prewarningType value) {
    return Mrr_0x246_246_Fcw_prewarningType_Name(value);
  }
  static inline bool Fcw_prewarningType_Parse(const ::std::string& name,
      Fcw_prewarningType* value) {
    return Mrr_0x246_246_Fcw_prewarningType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Fcw_latentwarningType Fcw_latentwarningType;
  static const Fcw_latentwarningType FCW_LATENTWARNING_NO_WARNING =
    Mrr_0x246_246_Fcw_latentwarningType_FCW_LATENTWARNING_NO_WARNING;
  static const Fcw_latentwarningType FCW_LATENTWARNING_WARNING =
    Mrr_0x246_246_Fcw_latentwarningType_FCW_LATENTWARNING_WARNING;
  static inline bool Fcw_latentwarningType_IsValid(int value) {
    return Mrr_0x246_246_Fcw_latentwarningType_IsValid(value);
  }
  static const Fcw_latentwarningType Fcw_latentwarningType_MIN =
    Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_MIN;
  static const Fcw_latentwarningType Fcw_latentwarningType_MAX =
    Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_MAX;
  static const int Fcw_latentwarningType_ARRAYSIZE =
    Mrr_0x246_246_Fcw_latentwarningType_Fcw_latentwarningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fcw_latentwarningType_descriptor() {
    return Mrr_0x246_246_Fcw_latentwarningType_descriptor();
  }
  static inline const ::std::string& Fcw_latentwarningType_Name(Fcw_latentwarningType value) {
    return Mrr_0x246_246_Fcw_latentwarningType_Name(value);
  }
  static inline bool Fcw_latentwarningType_Parse(const ::std::string& name,
      Fcw_latentwarningType* value) {
    return Mrr_0x246_246_Fcw_latentwarningType_Parse(name, value);
  }

  typedef Mrr_0x246_246_Fcw_stateType Fcw_stateType;
  static const Fcw_stateType FCW_STATE_UNAVAILABLE =
    Mrr_0x246_246_Fcw_stateType_FCW_STATE_UNAVAILABLE;
  static const Fcw_stateType FCW_STATE_OFF =
    Mrr_0x246_246_Fcw_stateType_FCW_STATE_OFF;
  static const Fcw_stateType FCW_STATE_STANDBY =
    Mrr_0x246_246_Fcw_stateType_FCW_STATE_STANDBY;
  static const Fcw_stateType FCW_STATE_ACTIVE_NO_INTERVENTION =
    Mrr_0x246_246_Fcw_stateType_FCW_STATE_ACTIVE_NO_INTERVENTION;
  static const Fcw_stateType FCW_STATE_ACTIVE =
    Mrr_0x246_246_Fcw_stateType_FCW_STATE_ACTIVE;
  static const Fcw_stateType FCW_STATE_RESERVED =
    Mrr_0x246_246_Fcw_stateType_FCW_STATE_RESERVED;
  static inline bool Fcw_stateType_IsValid(int value) {
    return Mrr_0x246_246_Fcw_stateType_IsValid(value);
  }
  static const Fcw_stateType Fcw_stateType_MIN =
    Mrr_0x246_246_Fcw_stateType_Fcw_stateType_MIN;
  static const Fcw_stateType Fcw_stateType_MAX =
    Mrr_0x246_246_Fcw_stateType_Fcw_stateType_MAX;
  static const int Fcw_stateType_ARRAYSIZE =
    Mrr_0x246_246_Fcw_stateType_Fcw_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fcw_stateType_descriptor() {
    return Mrr_0x246_246_Fcw_stateType_descriptor();
  }
  static inline const ::std::string& Fcw_stateType_Name(Fcw_stateType value) {
    return Mrr_0x246_246_Fcw_stateType_Name(value);
  }
  static inline bool Fcw_stateType_Parse(const ::std::string& name,
      Fcw_stateType* value) {
    return Mrr_0x246_246_Fcw_stateType_Parse(name, value);
  }

  typedef Mrr_0x246_246_TextinfoType TextinfoType;
  static const TextinfoType TEXTINFO_NO_DISPLAY =
    Mrr_0x246_246_TextinfoType_TEXTINFO_NO_DISPLAY;
  static const TextinfoType TEXTINFO_ACC_IS_SWITCHED_ON =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_IS_SWITCHED_ON;
  static const TextinfoType TEXTINFO_ACC_IS_SWITCHED_OFF =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_IS_SWITCHED_OFF;
  static const TextinfoType TEXTINFO_ACC_IS_CANCELLED =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_IS_CANCELLED;
  static const TextinfoType TEXTINFO_ACC_ACTIVE =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_ACTIVE;
  static const TextinfoType TEXTINFO_MRR_BLINDNESS =
    Mrr_0x246_246_TextinfoType_TEXTINFO_MRR_BLINDNESS;
  static const TextinfoType TEXTINFO_ACC_AND_PEBS_ERROR =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ACC_AND_PEBS_ERROR;
  static const TextinfoType TEXTINFO_EPB_ACTIVATE =
    Mrr_0x246_246_TextinfoType_TEXTINFO_EPB_ACTIVATE;
  static const TextinfoType TEXTINFO_NO_FORWARD_GEAR =
    Mrr_0x246_246_TextinfoType_TEXTINFO_NO_FORWARD_GEAR;
  static const TextinfoType TEXTINFO_SEATBELT_UNBUCKLED =
    Mrr_0x246_246_TextinfoType_TEXTINFO_SEATBELT_UNBUCKLED;
  static const TextinfoType TEXTINFO_ESP_OFF =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ESP_OFF;
  static const TextinfoType TEXTINFO_SPEED_OVER_150KPH =
    Mrr_0x246_246_TextinfoType_TEXTINFO_SPEED_OVER_150KPH;
  static const TextinfoType TEXTINFO_DOOR_OPEN =
    Mrr_0x246_246_TextinfoType_TEXTINFO_DOOR_OPEN;
  static const TextinfoType TEXTINFO_OVERRIDE =
    Mrr_0x246_246_TextinfoType_TEXTINFO_OVERRIDE;
  static const TextinfoType TEXTINFO_ESP_ERROR =
    Mrr_0x246_246_TextinfoType_TEXTINFO_ESP_ERROR;
  static const TextinfoType TEXTINFO_UNCALIBRATED =
    Mrr_0x246_246_TextinfoType_TEXTINFO_UNCALIBRATED;
  static inline bool TextinfoType_IsValid(int value) {
    return Mrr_0x246_246_TextinfoType_IsValid(value);
  }
  static const TextinfoType TextinfoType_MIN =
    Mrr_0x246_246_TextinfoType_TextinfoType_MIN;
  static const TextinfoType TextinfoType_MAX =
    Mrr_0x246_246_TextinfoType_TextinfoType_MAX;
  static const int TextinfoType_ARRAYSIZE =
    Mrr_0x246_246_TextinfoType_TextinfoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TextinfoType_descriptor() {
    return Mrr_0x246_246_TextinfoType_descriptor();
  }
  static inline const ::std::string& TextinfoType_Name(TextinfoType value) {
    return Mrr_0x246_246_TextinfoType_Name(value);
  }
  static inline bool TextinfoType_Parse(const ::std::string& name,
      TextinfoType* value) {
    return Mrr_0x246_246_TextinfoType_Parse(name, value);
  }

  typedef Mrr_0x246_246_VsetdisType VsetdisType;
  static const VsetdisType VSETDIS_INVALID =
    Mrr_0x246_246_VsetdisType_VSETDIS_INVALID;
  static inline bool VsetdisType_IsValid(int value) {
    return Mrr_0x246_246_VsetdisType_IsValid(value);
  }
  static const VsetdisType VsetdisType_MIN =
    Mrr_0x246_246_VsetdisType_VsetdisType_MIN;
  static const VsetdisType VsetdisType_MAX =
    Mrr_0x246_246_VsetdisType_VsetdisType_MAX;
  static const int VsetdisType_ARRAYSIZE =
    Mrr_0x246_246_VsetdisType_VsetdisType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VsetdisType_descriptor() {
    return Mrr_0x246_246_VsetdisType_descriptor();
  }
  static inline const ::std::string& VsetdisType_Name(VsetdisType value) {
    return Mrr_0x246_246_VsetdisType_Name(value);
  }
  static inline bool VsetdisType_Parse(const ::std::string& name,
      VsetdisType* value) {
    return Mrr_0x246_246_VsetdisType_Parse(name, value);
  }

  typedef Mrr_0x246_246_ObjvalidType ObjvalidType;
  static const ObjvalidType OBJVALID_NO_OBJECT =
    Mrr_0x246_246_ObjvalidType_OBJVALID_NO_OBJECT;
  static const ObjvalidType OBJVALID_TARGET_OBJECT_DETECTED =
    Mrr_0x246_246_ObjvalidType_OBJVALID_TARGET_OBJECT_DETECTED;
  static inline bool ObjvalidType_IsValid(int value) {
    return Mrr_0x246_246_ObjvalidType_IsValid(value);
  }
  static const ObjvalidType ObjvalidType_MIN =
    Mrr_0x246_246_ObjvalidType_ObjvalidType_MIN;
  static const ObjvalidType ObjvalidType_MAX =
    Mrr_0x246_246_ObjvalidType_ObjvalidType_MAX;
  static const int ObjvalidType_ARRAYSIZE =
    Mrr_0x246_246_ObjvalidType_ObjvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObjvalidType_descriptor() {
    return Mrr_0x246_246_ObjvalidType_descriptor();
  }
  static inline const ::std::string& ObjvalidType_Name(ObjvalidType value) {
    return Mrr_0x246_246_ObjvalidType_Name(value);
  }
  static inline bool ObjvalidType_Parse(const ::std::string& name,
      ObjvalidType* value) {
    return Mrr_0x246_246_ObjvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
  bool has_taugapset() const;
  void clear_taugapset();
  static const int kTaugapsetFieldNumber = 1;
  ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType taugapset() const;
  void set_taugapset(::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
  bool has_dxtarobj() const;
  void clear_dxtarobj();
  static const int kDxtarobjFieldNumber = 2;
  ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType dxtarobj() const;
  void set_dxtarobj(::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
  bool has_acchmi_mode() const;
  void clear_acchmi_mode();
  static const int kAcchmiModeFieldNumber = 3;
  ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType acchmi_mode() const;
  void set_acchmi_mode(::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
  bool has_accfailinfo() const;
  void clear_accfailinfo();
  static const int kAccfailinfoFieldNumber = 4;
  ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType accfailinfo() const;
  void set_accfailinfo(::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
  bool has_takeoverreq() const;
  void clear_takeoverreq();
  static const int kTakeoverreqFieldNumber = 5;
  ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType takeoverreq() const;
  void set_takeoverreq(::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
  bool has_mrr_fcw_sensitive() const;
  void clear_mrr_fcw_sensitive();
  static const int kMrrFcwSensitiveFieldNumber = 6;
  ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType mrr_fcw_sensitive() const;
  void set_mrr_fcw_sensitive(::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
  bool has_aeb_state() const;
  void clear_aeb_state();
  static const int kAebStateFieldNumber = 7;
  ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType aeb_state() const;
  void set_aeb_state(::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
  bool has_acc_startstop_infor() const;
  void clear_acc_startstop_infor();
  static const int kAccStartstopInforFieldNumber = 8;
  ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType acc_startstop_infor() const;
  void set_acc_startstop_infor(::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
  bool has_fcw_prewarning() const;
  void clear_fcw_prewarning();
  static const int kFcwPrewarningFieldNumber = 9;
  ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType fcw_prewarning() const;
  void set_fcw_prewarning(::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
  bool has_fcw_latentwarning() const;
  void clear_fcw_latentwarning();
  static const int kFcwLatentwarningFieldNumber = 10;
  ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType fcw_latentwarning() const;
  void set_fcw_latentwarning(::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
  bool has_fcw_state() const;
  void clear_fcw_state();
  static const int kFcwStateFieldNumber = 11;
  ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType fcw_state() const;
  void set_fcw_state(::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType value);

  // optional int32 obj_speed = 12;
  bool has_obj_speed() const;
  void clear_obj_speed();
  static const int kObjSpeedFieldNumber = 12;
  ::google::protobuf::int32 obj_speed() const;
  void set_obj_speed(::google::protobuf::int32 value);

  // optional int32 rolling_counter_0x246 = 13;
  bool has_rolling_counter_0x246() const;
  void clear_rolling_counter_0x246();
  static const int kRollingCounter0X246FieldNumber = 13;
  ::google::protobuf::int32 rolling_counter_0x246() const;
  void set_rolling_counter_0x246(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
  bool has_textinfo() const;
  void clear_textinfo();
  static const int kTextinfoFieldNumber = 14;
  ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType textinfo() const;
  void set_textinfo(::jmc_auto::canbus::Mrr_0x246_246_TextinfoType value);

  // optional int32 checksum_0x246 = 15;
  bool has_checksum_0x246() const;
  void clear_checksum_0x246();
  static const int kChecksum0X246FieldNumber = 15;
  ::google::protobuf::int32 checksum_0x246() const;
  void set_checksum_0x246(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
  bool has_objvalid() const;
  void clear_objvalid();
  static const int kObjvalidFieldNumber = 17;
  ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType objvalid() const;
  void set_objvalid(::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType value);

  // optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
  bool has_vsetdis() const;
  void clear_vsetdis();
  static const int kVsetdisFieldNumber = 16;
  ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType vsetdis() const;
  void set_vsetdis(::jmc_auto::canbus::Mrr_0x246_246_VsetdisType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Mrr_0x246_246)
 private:
  void set_has_taugapset();
  void clear_has_taugapset();
  void set_has_dxtarobj();
  void clear_has_dxtarobj();
  void set_has_acchmi_mode();
  void clear_has_acchmi_mode();
  void set_has_accfailinfo();
  void clear_has_accfailinfo();
  void set_has_takeoverreq();
  void clear_has_takeoverreq();
  void set_has_mrr_fcw_sensitive();
  void clear_has_mrr_fcw_sensitive();
  void set_has_aeb_state();
  void clear_has_aeb_state();
  void set_has_acc_startstop_infor();
  void clear_has_acc_startstop_infor();
  void set_has_fcw_prewarning();
  void clear_has_fcw_prewarning();
  void set_has_fcw_latentwarning();
  void clear_has_fcw_latentwarning();
  void set_has_fcw_state();
  void clear_has_fcw_state();
  void set_has_obj_speed();
  void clear_has_obj_speed();
  void set_has_rolling_counter_0x246();
  void clear_has_rolling_counter_0x246();
  void set_has_textinfo();
  void clear_has_textinfo();
  void set_has_checksum_0x246();
  void clear_has_checksum_0x246();
  void set_has_vsetdis();
  void clear_has_vsetdis();
  void set_has_objvalid();
  void clear_has_objvalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int taugapset_;
  int dxtarobj_;
  int acchmi_mode_;
  int accfailinfo_;
  int takeoverreq_;
  int mrr_fcw_sensitive_;
  int aeb_state_;
  int acc_startstop_infor_;
  int fcw_prewarning_;
  int fcw_latentwarning_;
  int fcw_state_;
  ::google::protobuf::int32 obj_speed_;
  ::google::protobuf::int32 rolling_counter_0x246_;
  int textinfo_;
  ::google::protobuf::int32 checksum_0x246_;
  int objvalid_;
  int vsetdis_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_mp5_nav_0x533_533 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_mp5_nav_0x533_533) */ {
 public:
  Gw_mp5_nav_0x533_533();
  virtual ~Gw_mp5_nav_0x533_533();

  Gw_mp5_nav_0x533_533(const Gw_mp5_nav_0x533_533& from);

  inline Gw_mp5_nav_0x533_533& operator=(const Gw_mp5_nav_0x533_533& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_mp5_nav_0x533_533& default_instance();

  static inline const Gw_mp5_nav_0x533_533* internal_default_instance() {
    return reinterpret_cast<const Gw_mp5_nav_0x533_533*>(
               &_Gw_mp5_nav_0x533_533_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(Gw_mp5_nav_0x533_533* other);

  // implements Message ----------------------------------------------

  inline Gw_mp5_nav_0x533_533* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_mp5_nav_0x533_533* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_mp5_nav_0x533_533& from);
  void MergeFrom(const Gw_mp5_nav_0x533_533& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_mp5_nav_0x533_533* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Nav_speedlimitunitsType;
  static const Nav_speedlimitunitsType NAV_SPEEDLIMITUNITS_UNKNOWN =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_UNKNOWN;
  static const Nav_speedlimitunitsType NAV_SPEEDLIMITUNITS_MPH =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_MPH;
  static const Nav_speedlimitunitsType NAV_SPEEDLIMITUNITS_KMH =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_KMH;
  static const Nav_speedlimitunitsType NAV_SPEEDLIMITUNITS_RESERVED =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_NAV_SPEEDLIMITUNITS_RESERVED;
  static inline bool Nav_speedlimitunitsType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_IsValid(value);
  }
  static const Nav_speedlimitunitsType Nav_speedlimitunitsType_MIN =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_MIN;
  static const Nav_speedlimitunitsType Nav_speedlimitunitsType_MAX =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_MAX;
  static const int Nav_speedlimitunitsType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Nav_speedlimitunitsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Nav_speedlimitunitsType_descriptor() {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_descriptor();
  }
  static inline const ::std::string& Nav_speedlimitunitsType_Name(Nav_speedlimitunitsType value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Name(value);
  }
  static inline bool Nav_speedlimitunitsType_Parse(const ::std::string& name,
      Nav_speedlimitunitsType* value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Nav_currroadtypeType Nav_currroadtypeType;
  static const Nav_currroadtypeType NAV_CURRROADTYPE_UNKNOW =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_UNKNOW;
  static const Nav_currroadtypeType NAV_CURRROADTYPE_HIGH_SPEED_ROAD =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_HIGH_SPEED_ROAD;
  static const Nav_currroadtypeType NAV_CURRROADTYPE_CITY_EXPRESS_WAY =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_CITY_EXPRESS_WAY;
  static const Nav_currroadtypeType NAV_CURRROADTYPE_DOWNTOWN_ROAD =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_DOWNTOWN_ROAD;
  static const Nav_currroadtypeType NAV_CURRROADTYPE_COUNTRY_ROAD =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_NAV_CURRROADTYPE_COUNTRY_ROAD;
  static inline bool Nav_currroadtypeType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Nav_currroadtypeType_IsValid(value);
  }
  static const Nav_currroadtypeType Nav_currroadtypeType_MIN =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_MIN;
  static const Nav_currroadtypeType Nav_currroadtypeType_MAX =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_MAX;
  static const int Nav_currroadtypeType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Nav_currroadtypeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Nav_currroadtypeType_descriptor() {
    return Gw_mp5_nav_0x533_533_Nav_currroadtypeType_descriptor();
  }
  static inline const ::std::string& Nav_currroadtypeType_Name(Nav_currroadtypeType value) {
    return Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Name(value);
  }
  static inline bool Nav_currroadtypeType_Parse(const ::std::string& name,
      Nav_currroadtypeType* value) {
    return Gw_mp5_nav_0x533_533_Nav_currroadtypeType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Nav_speedlimitType Nav_speedlimitType;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_NO_DISPLAY =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_NO_DISPLAY;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_SPL_5 =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_5;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_SPL_10 =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_10;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_SPL_15 =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_15;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_SPL_20 =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_20;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_SPL_25 =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_25;
  static const Nav_speedlimitType NAV_SPEEDLIMIT_SPL_130 =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_NAV_SPEEDLIMIT_SPL_130;
  static inline bool Nav_speedlimitType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitType_IsValid(value);
  }
  static const Nav_speedlimitType Nav_speedlimitType_MIN =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_MIN;
  static const Nav_speedlimitType Nav_speedlimitType_MAX =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_MAX;
  static const int Nav_speedlimitType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Nav_speedlimitType_Nav_speedlimitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Nav_speedlimitType_descriptor() {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitType_descriptor();
  }
  static inline const ::std::string& Nav_speedlimitType_Name(Nav_speedlimitType value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitType_Name(value);
  }
  static inline bool Nav_speedlimitType_Parse(const ::std::string& name,
      Nav_speedlimitType* value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Mp5_apaactive_cmdType;
  static const Mp5_apaactive_cmdType MP5_APAACTIVE_CMD_NO_REQUEST =
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_MP5_APAACTIVE_CMD_NO_REQUEST;
  static const Mp5_apaactive_cmdType MP5_APAACTIVE_CMD_REQUEST =
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_MP5_APAACTIVE_CMD_REQUEST;
  static inline bool Mp5_apaactive_cmdType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_IsValid(value);
  }
  static const Mp5_apaactive_cmdType Mp5_apaactive_cmdType_MIN =
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_MIN;
  static const Mp5_apaactive_cmdType Mp5_apaactive_cmdType_MAX =
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_MAX;
  static const int Mp5_apaactive_cmdType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Mp5_apaactive_cmdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_apaactive_cmdType_descriptor() {
    return Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_descriptor();
  }
  static inline const ::std::string& Mp5_apaactive_cmdType_Name(Mp5_apaactive_cmdType value) {
    return Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Name(value);
  }
  static inline bool Mp5_apaactive_cmdType_Parse(const ::std::string& name,
      Mp5_apaactive_cmdType* value) {
    return Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Mp5_apa_confirmbuttonType;
  static const Mp5_apa_confirmbuttonType MP5_APA_CONFIRMBUTTON_NO_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_NO_BUTTON_PRESS;
  static const Mp5_apa_confirmbuttonType MP5_APA_CONFIRMBUTTON_COMFIRM_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_COMFIRM_BUTTON_PRESS;
  static const Mp5_apa_confirmbuttonType MP5_APA_CONFIRMBUTTON_TERMINATED_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_TERMINATED_BUTTON_PRESS;
  static const Mp5_apa_confirmbuttonType MP5_APA_CONFIRMBUTTON_RESERVED =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_MP5_APA_CONFIRMBUTTON_RESERVED;
  static inline bool Mp5_apa_confirmbuttonType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_IsValid(value);
  }
  static const Mp5_apa_confirmbuttonType Mp5_apa_confirmbuttonType_MIN =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_MIN;
  static const Mp5_apa_confirmbuttonType Mp5_apa_confirmbuttonType_MAX =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_MAX;
  static const int Mp5_apa_confirmbuttonType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Mp5_apa_confirmbuttonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_apa_confirmbuttonType_descriptor() {
    return Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_descriptor();
  }
  static inline const ::std::string& Mp5_apa_confirmbuttonType_Name(Mp5_apa_confirmbuttonType value) {
    return Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Name(value);
  }
  static inline bool Mp5_apa_confirmbuttonType_Parse(const ::std::string& name,
      Mp5_apa_confirmbuttonType* value) {
    return Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Mp5_apa_function_selectType;
  static const Mp5_apa_function_selectType MP5_APA_FUNCTION_SELECT_NO_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_NO_BUTTON_PRESS;
  static const Mp5_apa_function_selectType MP5_APA_FUNCTION_SELECT_PPSC_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_PPSC_BUTTON_PRESS;
  static const Mp5_apa_function_selectType MP5_APA_FUNCTION_SELECT_CPSC_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_CPSC_BUTTON_PRESS;
  static const Mp5_apa_function_selectType MP5_APA_FUNCTION_SELECT_POC_BUTTON_PRESS =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_MP5_APA_FUNCTION_SELECT_POC_BUTTON_PRESS;
  static inline bool Mp5_apa_function_selectType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_IsValid(value);
  }
  static const Mp5_apa_function_selectType Mp5_apa_function_selectType_MIN =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_MIN;
  static const Mp5_apa_function_selectType Mp5_apa_function_selectType_MAX =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_MAX;
  static const int Mp5_apa_function_selectType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Mp5_apa_function_selectType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_apa_function_selectType_descriptor() {
    return Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_descriptor();
  }
  static inline const ::std::string& Mp5_apa_function_selectType_Name(Mp5_apa_function_selectType value) {
    return Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Name(value);
  }
  static inline bool Mp5_apa_function_selectType_Parse(const ::std::string& name,
      Mp5_apa_function_selectType* value) {
    return Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Nav_stsType Nav_stsType;
  static const Nav_stsType NAV_STS_INACTIVE =
    Gw_mp5_nav_0x533_533_Nav_stsType_NAV_STS_INACTIVE;
  static const Nav_stsType NAV_STS_ACTIVE =
    Gw_mp5_nav_0x533_533_Nav_stsType_NAV_STS_ACTIVE;
  static inline bool Nav_stsType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Nav_stsType_IsValid(value);
  }
  static const Nav_stsType Nav_stsType_MIN =
    Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_MIN;
  static const Nav_stsType Nav_stsType_MAX =
    Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_MAX;
  static const int Nav_stsType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Nav_stsType_Nav_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Nav_stsType_descriptor() {
    return Gw_mp5_nav_0x533_533_Nav_stsType_descriptor();
  }
  static inline const ::std::string& Nav_stsType_Name(Nav_stsType value) {
    return Gw_mp5_nav_0x533_533_Nav_stsType_Name(value);
  }
  static inline bool Nav_stsType_Parse(const ::std::string& name,
      Nav_stsType* value) {
    return Gw_mp5_nav_0x533_533_Nav_stsType_Parse(name, value);
  }

  typedef Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Nav_speedlimitstatusType;
  static const Nav_speedlimitstatusType NAV_SPEEDLIMITSTATUS_SL_UNKNOWN =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_UNKNOWN;
  static const Nav_speedlimitstatusType NAV_SPEEDLIMITSTATUS_SL_EXISTS =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_EXISTS;
  static const Nav_speedlimitstatusType NAV_SPEEDLIMITSTATUS_SL_NOLIMIT =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_NOLIMIT;
  static const Nav_speedlimitstatusType NAV_SPEEDLIMITSTATUS_SL_PLURAL =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_NAV_SPEEDLIMITSTATUS_SL_PLURAL;
  static inline bool Nav_speedlimitstatusType_IsValid(int value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_IsValid(value);
  }
  static const Nav_speedlimitstatusType Nav_speedlimitstatusType_MIN =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_MIN;
  static const Nav_speedlimitstatusType Nav_speedlimitstatusType_MAX =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_MAX;
  static const int Nav_speedlimitstatusType_ARRAYSIZE =
    Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Nav_speedlimitstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Nav_speedlimitstatusType_descriptor() {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_descriptor();
  }
  static inline const ::std::string& Nav_speedlimitstatusType_Name(Nav_speedlimitstatusType value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Name(value);
  }
  static inline bool Nav_speedlimitstatusType_Parse(const ::std::string& name,
      Nav_speedlimitstatusType* value) {
    return Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
  bool has_nav_speedlimitunits() const;
  void clear_nav_speedlimitunits();
  static const int kNavSpeedlimitunitsFieldNumber = 1;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType nav_speedlimitunits() const;
  void set_nav_speedlimitunits(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
  bool has_nav_currroadtype() const;
  void clear_nav_currroadtype();
  static const int kNavCurrroadtypeFieldNumber = 2;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType nav_currroadtype() const;
  void set_nav_currroadtype(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
  bool has_nav_speedlimit() const;
  void clear_nav_speedlimit();
  static const int kNavSpeedlimitFieldNumber = 3;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType nav_speedlimit() const;
  void set_nav_speedlimit(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
  bool has_mp5_apaactive_cmd() const;
  void clear_mp5_apaactive_cmd();
  static const int kMp5ApaactiveCmdFieldNumber = 4;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType mp5_apaactive_cmd() const;
  void set_mp5_apaactive_cmd(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
  bool has_mp5_apa_confirmbutton() const;
  void clear_mp5_apa_confirmbutton();
  static const int kMp5ApaConfirmbuttonFieldNumber = 5;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType mp5_apa_confirmbutton() const;
  void set_mp5_apa_confirmbutton(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
  bool has_mp5_apa_function_select() const;
  void clear_mp5_apa_function_select();
  static const int kMp5ApaFunctionSelectFieldNumber = 6;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType mp5_apa_function_select() const;
  void set_mp5_apa_function_select(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
  bool has_nav_sts() const;
  void clear_nav_sts();
  static const int kNavStsFieldNumber = 7;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType nav_sts() const;
  void set_nav_sts(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType value);

  // optional int32 nav_countrycode = 8;
  bool has_nav_countrycode() const;
  void clear_nav_countrycode();
  static const int kNavCountrycodeFieldNumber = 8;
  ::google::protobuf::int32 nav_countrycode() const;
  void set_nav_countrycode(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
  bool has_nav_speedlimitstatus() const;
  void clear_nav_speedlimitstatus();
  static const int kNavSpeedlimitstatusFieldNumber = 9;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType nav_speedlimitstatus() const;
  void set_nav_speedlimitstatus(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
 private:
  void set_has_nav_speedlimitunits();
  void clear_has_nav_speedlimitunits();
  void set_has_nav_currroadtype();
  void clear_has_nav_currroadtype();
  void set_has_nav_speedlimit();
  void clear_has_nav_speedlimit();
  void set_has_mp5_apaactive_cmd();
  void clear_has_mp5_apaactive_cmd();
  void set_has_mp5_apa_confirmbutton();
  void clear_has_mp5_apa_confirmbutton();
  void set_has_mp5_apa_function_select();
  void clear_has_mp5_apa_function_select();
  void set_has_nav_sts();
  void clear_has_nav_sts();
  void set_has_nav_countrycode();
  void clear_has_nav_countrycode();
  void set_has_nav_speedlimitstatus();
  void clear_has_nav_speedlimitstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int nav_speedlimitunits_;
  int nav_currroadtype_;
  int nav_speedlimit_;
  int mp5_apaactive_cmd_;
  int mp5_apa_confirmbutton_;
  int mp5_apa_function_select_;
  int nav_sts_;
  ::google::protobuf::int32 nav_countrycode_;
  int nav_speedlimitstatus_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_mp5_0x530_530 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_mp5_0x530_530) */ {
 public:
  Gw_mp5_0x530_530();
  virtual ~Gw_mp5_0x530_530();

  Gw_mp5_0x530_530(const Gw_mp5_0x530_530& from);

  inline Gw_mp5_0x530_530& operator=(const Gw_mp5_0x530_530& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_mp5_0x530_530& default_instance();

  static inline const Gw_mp5_0x530_530* internal_default_instance() {
    return reinterpret_cast<const Gw_mp5_0x530_530*>(
               &_Gw_mp5_0x530_530_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(Gw_mp5_0x530_530* other);

  // implements Message ----------------------------------------------

  inline Gw_mp5_0x530_530* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_mp5_0x530_530* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_mp5_0x530_530& from);
  void MergeFrom(const Gw_mp5_0x530_530& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_mp5_0x530_530* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Mp5_fcw_sensitiveType;
  static const Mp5_fcw_sensitiveType MP5_FCW_SENSITIVE_UNAVAILABLE =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_UNAVAILABLE;
  static const Mp5_fcw_sensitiveType MP5_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE;
  static const Mp5_fcw_sensitiveType MP5_FCW_SENSITIVE_LEVEL2_NORMAL =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL2_NORMAL;
  static const Mp5_fcw_sensitiveType MP5_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_MP5_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE;
  static inline bool Mp5_fcw_sensitiveType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_IsValid(value);
  }
  static const Mp5_fcw_sensitiveType Mp5_fcw_sensitiveType_MIN =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_MIN;
  static const Mp5_fcw_sensitiveType Mp5_fcw_sensitiveType_MAX =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_MAX;
  static const int Mp5_fcw_sensitiveType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Mp5_fcw_sensitiveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_fcw_sensitiveType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_descriptor();
  }
  static inline const ::std::string& Mp5_fcw_sensitiveType_Name(Mp5_fcw_sensitiveType value) {
    return Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Name(value);
  }
  static inline bool Mp5_fcw_sensitiveType_Parse(const ::std::string& name,
      Mp5_fcw_sensitiveType* value) {
    return Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Mp5_icmenushift_buttonType;
  static const Mp5_icmenushift_buttonType MP5_ICMENUSHIFT_BUTTON_NO_EVENT =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_NO_EVENT;
  static const Mp5_icmenushift_buttonType MP5_ICMENUSHIFT_BUTTON_PAGE_UP =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_PAGE_UP;
  static const Mp5_icmenushift_buttonType MP5_ICMENUSHIFT_BUTTON_PAGE_DOWN =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_PAGE_DOWN;
  static const Mp5_icmenushift_buttonType MP5_ICMENUSHIFT_BUTTON_INVALID =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_MP5_ICMENUSHIFT_BUTTON_INVALID;
  static inline bool Mp5_icmenushift_buttonType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_IsValid(value);
  }
  static const Mp5_icmenushift_buttonType Mp5_icmenushift_buttonType_MIN =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_MIN;
  static const Mp5_icmenushift_buttonType Mp5_icmenushift_buttonType_MAX =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_MAX;
  static const int Mp5_icmenushift_buttonType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Mp5_icmenushift_buttonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_icmenushift_buttonType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_descriptor();
  }
  static inline const ::std::string& Mp5_icmenushift_buttonType_Name(Mp5_icmenushift_buttonType value) {
    return Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Name(value);
  }
  static inline bool Mp5_icmenushift_buttonType_Parse(const ::std::string& name,
      Mp5_icmenushift_buttonType* value) {
    return Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_aeb_on_offType Mp5_aeb_on_offType;
  static const Mp5_aeb_on_offType MP5_AEB_ON_OFF_SWITCH_ON =
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_MP5_AEB_ON_OFF_SWITCH_ON;
  static const Mp5_aeb_on_offType MP5_AEB_ON_OFF_SWITCH_OFF =
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_MP5_AEB_ON_OFF_SWITCH_OFF;
  static inline bool Mp5_aeb_on_offType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_aeb_on_offType_IsValid(value);
  }
  static const Mp5_aeb_on_offType Mp5_aeb_on_offType_MIN =
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_MIN;
  static const Mp5_aeb_on_offType Mp5_aeb_on_offType_MAX =
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_MAX;
  static const int Mp5_aeb_on_offType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_aeb_on_offType_Mp5_aeb_on_offType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_aeb_on_offType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_aeb_on_offType_descriptor();
  }
  static inline const ::std::string& Mp5_aeb_on_offType_Name(Mp5_aeb_on_offType value) {
    return Gw_mp5_0x530_530_Mp5_aeb_on_offType_Name(value);
  }
  static inline bool Mp5_aeb_on_offType_Parse(const ::std::string& name,
      Mp5_aeb_on_offType* value) {
    return Gw_mp5_0x530_530_Mp5_aeb_on_offType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_fcw_on_offType Mp5_fcw_on_offType;
  static const Mp5_fcw_on_offType MP5_FCW_ON_OFF_SWITCH_ON =
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_MP5_FCW_ON_OFF_SWITCH_ON;
  static const Mp5_fcw_on_offType MP5_FCW_ON_OFF_SWITCH_OFF =
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_MP5_FCW_ON_OFF_SWITCH_OFF;
  static inline bool Mp5_fcw_on_offType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_fcw_on_offType_IsValid(value);
  }
  static const Mp5_fcw_on_offType Mp5_fcw_on_offType_MIN =
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_MIN;
  static const Mp5_fcw_on_offType Mp5_fcw_on_offType_MAX =
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_MAX;
  static const int Mp5_fcw_on_offType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_fcw_on_offType_Mp5_fcw_on_offType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_fcw_on_offType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_fcw_on_offType_descriptor();
  }
  static inline const ::std::string& Mp5_fcw_on_offType_Name(Mp5_fcw_on_offType value) {
    return Gw_mp5_0x530_530_Mp5_fcw_on_offType_Name(value);
  }
  static inline bool Mp5_fcw_on_offType_Parse(const ::std::string& name,
      Mp5_fcw_on_offType* value) {
    return Gw_mp5_0x530_530_Mp5_fcw_on_offType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_bsdswitchstsType Mp5_bsdswitchstsType;
  static const Mp5_bsdswitchstsType MP5_BSDSWITCHSTS_ON =
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_MP5_BSDSWITCHSTS_ON;
  static const Mp5_bsdswitchstsType MP5_BSDSWITCHSTS_OFF =
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_MP5_BSDSWITCHSTS_OFF;
  static inline bool Mp5_bsdswitchstsType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_bsdswitchstsType_IsValid(value);
  }
  static const Mp5_bsdswitchstsType Mp5_bsdswitchstsType_MIN =
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_MIN;
  static const Mp5_bsdswitchstsType Mp5_bsdswitchstsType_MAX =
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_MAX;
  static const int Mp5_bsdswitchstsType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Mp5_bsdswitchstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_bsdswitchstsType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_bsdswitchstsType_descriptor();
  }
  static inline const ::std::string& Mp5_bsdswitchstsType_Name(Mp5_bsdswitchstsType value) {
    return Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Name(value);
  }
  static inline bool Mp5_bsdswitchstsType_Parse(const ::std::string& name,
      Mp5_bsdswitchstsType* value) {
    return Gw_mp5_0x530_530_Mp5_bsdswitchstsType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_afs_swtichstsType Mp5_afs_swtichstsType;
  static const Mp5_afs_swtichstsType MP5_AFS_SWTICHSTS_NO_PRESS =
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_MP5_AFS_SWTICHSTS_NO_PRESS;
  static const Mp5_afs_swtichstsType MP5_AFS_SWTICHSTS_PRESS =
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_MP5_AFS_SWTICHSTS_PRESS;
  static inline bool Mp5_afs_swtichstsType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_afs_swtichstsType_IsValid(value);
  }
  static const Mp5_afs_swtichstsType Mp5_afs_swtichstsType_MIN =
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_MIN;
  static const Mp5_afs_swtichstsType Mp5_afs_swtichstsType_MAX =
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_MAX;
  static const int Mp5_afs_swtichstsType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Mp5_afs_swtichstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_afs_swtichstsType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_afs_swtichstsType_descriptor();
  }
  static inline const ::std::string& Mp5_afs_swtichstsType_Name(Mp5_afs_swtichstsType value) {
    return Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Name(value);
  }
  static inline bool Mp5_afs_swtichstsType_Parse(const ::std::string& name,
      Mp5_afs_swtichstsType* value) {
    return Gw_mp5_0x530_530_Mp5_afs_swtichstsType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_laneassittypereqType Mp5_laneassittypereqType;
  static const Mp5_laneassittypereqType MP5_LANEASSITTYPEREQ_NO_SELECTION =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_NO_SELECTION;
  static const Mp5_laneassittypereqType MP5_LANEASSITTYPEREQ_LDW =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LDW;
  static const Mp5_laneassittypereqType MP5_LANEASSITTYPEREQ_LKA =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LKA;
  static const Mp5_laneassittypereqType MP5_LANEASSITTYPEREQ_LDW_LKA =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_MP5_LANEASSITTYPEREQ_LDW_LKA;
  static inline bool Mp5_laneassittypereqType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_laneassittypereqType_IsValid(value);
  }
  static const Mp5_laneassittypereqType Mp5_laneassittypereqType_MIN =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_MIN;
  static const Mp5_laneassittypereqType Mp5_laneassittypereqType_MAX =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_MAX;
  static const int Mp5_laneassittypereqType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_laneassittypereqType_Mp5_laneassittypereqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_laneassittypereqType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_laneassittypereqType_descriptor();
  }
  static inline const ::std::string& Mp5_laneassittypereqType_Name(Mp5_laneassittypereqType value) {
    return Gw_mp5_0x530_530_Mp5_laneassittypereqType_Name(value);
  }
  static inline bool Mp5_laneassittypereqType_Parse(const ::std::string& name,
      Mp5_laneassittypereqType* value) {
    return Gw_mp5_0x530_530_Mp5_laneassittypereqType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Mp5_icmenuactive_buttonType;
  static const Mp5_icmenuactive_buttonType MP5_ICMENUACTIVE_BUTTON_OFF =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_OFF;
  static const Mp5_icmenuactive_buttonType MP5_ICMENUACTIVE_BUTTON_MENU_SWITCH_ACTIVE =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_MENU_SWITCH_ACTIVE;
  static const Mp5_icmenuactive_buttonType MP5_ICMENUACTIVE_BUTTON_SILENCE =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_SILENCE;
  static const Mp5_icmenuactive_buttonType MP5_ICMENUACTIVE_BUTTON_INVALID =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_MP5_ICMENUACTIVE_BUTTON_INVALID;
  static inline bool Mp5_icmenuactive_buttonType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_IsValid(value);
  }
  static const Mp5_icmenuactive_buttonType Mp5_icmenuactive_buttonType_MIN =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_MIN;
  static const Mp5_icmenuactive_buttonType Mp5_icmenuactive_buttonType_MAX =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_MAX;
  static const int Mp5_icmenuactive_buttonType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Mp5_icmenuactive_buttonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_icmenuactive_buttonType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_descriptor();
  }
  static inline const ::std::string& Mp5_icmenuactive_buttonType_Name(Mp5_icmenuactive_buttonType value) {
    return Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Name(value);
  }
  static inline bool Mp5_icmenuactive_buttonType_Parse(const ::std::string& name,
      Mp5_icmenuactive_buttonType* value) {
    return Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_alarmstatusType Mp5_alarmstatusType;
  static const Mp5_alarmstatusType MP5_ALARMSTATUS_INACTIVE =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_INACTIVE;
  static const Mp5_alarmstatusType MP5_ALARMSTATUS_ACTIVE =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_ACTIVE;
  static const Mp5_alarmstatusType MP5_ALARMSTATUS_FAILED =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_FAILED;
  static const Mp5_alarmstatusType MP5_ALARMSTATUS_RESERVED =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_MP5_ALARMSTATUS_RESERVED;
  static inline bool Mp5_alarmstatusType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_alarmstatusType_IsValid(value);
  }
  static const Mp5_alarmstatusType Mp5_alarmstatusType_MIN =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_MIN;
  static const Mp5_alarmstatusType Mp5_alarmstatusType_MAX =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_MAX;
  static const int Mp5_alarmstatusType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_alarmstatusType_Mp5_alarmstatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_alarmstatusType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_alarmstatusType_descriptor();
  }
  static inline const ::std::string& Mp5_alarmstatusType_Name(Mp5_alarmstatusType value) {
    return Gw_mp5_0x530_530_Mp5_alarmstatusType_Name(value);
  }
  static inline bool Mp5_alarmstatusType_Parse(const ::std::string& name,
      Mp5_alarmstatusType* value) {
    return Gw_mp5_0x530_530_Mp5_alarmstatusType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_alarmornotType Mp5_alarmornotType;
  static const Mp5_alarmornotType MP5_ALARMORNOT_NO_ALARM =
    Gw_mp5_0x530_530_Mp5_alarmornotType_MP5_ALARMORNOT_NO_ALARM;
  static const Mp5_alarmornotType MP5_ALARMORNOT_ALARM =
    Gw_mp5_0x530_530_Mp5_alarmornotType_MP5_ALARMORNOT_ALARM;
  static inline bool Mp5_alarmornotType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_alarmornotType_IsValid(value);
  }
  static const Mp5_alarmornotType Mp5_alarmornotType_MIN =
    Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_MIN;
  static const Mp5_alarmornotType Mp5_alarmornotType_MAX =
    Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_MAX;
  static const int Mp5_alarmornotType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_alarmornotType_Mp5_alarmornotType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_alarmornotType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_alarmornotType_descriptor();
  }
  static inline const ::std::string& Mp5_alarmornotType_Name(Mp5_alarmornotType value) {
    return Gw_mp5_0x530_530_Mp5_alarmornotType_Name(value);
  }
  static inline bool Mp5_alarmornotType_Parse(const ::std::string& name,
      Mp5_alarmornotType* value) {
    return Gw_mp5_0x530_530_Mp5_alarmornotType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_paakreset_reqType Mp5_paakreset_reqType;
  static const Mp5_paakreset_reqType MP5_PAAKRESET_REQ_NO_REQUEST =
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_MP5_PAAKRESET_REQ_NO_REQUEST;
  static const Mp5_paakreset_reqType MP5_PAAKRESET_REQ_REQUEST =
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_MP5_PAAKRESET_REQ_REQUEST;
  static inline bool Mp5_paakreset_reqType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_paakreset_reqType_IsValid(value);
  }
  static const Mp5_paakreset_reqType Mp5_paakreset_reqType_MIN =
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_MIN;
  static const Mp5_paakreset_reqType Mp5_paakreset_reqType_MAX =
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_MAX;
  static const int Mp5_paakreset_reqType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_paakreset_reqType_Mp5_paakreset_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_paakreset_reqType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_paakreset_reqType_descriptor();
  }
  static inline const ::std::string& Mp5_paakreset_reqType_Name(Mp5_paakreset_reqType value) {
    return Gw_mp5_0x530_530_Mp5_paakreset_reqType_Name(value);
  }
  static inline bool Mp5_paakreset_reqType_Parse(const ::std::string& name,
      Mp5_paakreset_reqType* value) {
    return Gw_mp5_0x530_530_Mp5_paakreset_reqType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_cta_activeType Mp5_cta_activeType;
  static const Mp5_cta_activeType MP5_CTA_ACTIVE_ON =
    Gw_mp5_0x530_530_Mp5_cta_activeType_MP5_CTA_ACTIVE_ON;
  static const Mp5_cta_activeType MP5_CTA_ACTIVE_OFF =
    Gw_mp5_0x530_530_Mp5_cta_activeType_MP5_CTA_ACTIVE_OFF;
  static inline bool Mp5_cta_activeType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_cta_activeType_IsValid(value);
  }
  static const Mp5_cta_activeType Mp5_cta_activeType_MIN =
    Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_MIN;
  static const Mp5_cta_activeType Mp5_cta_activeType_MAX =
    Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_MAX;
  static const int Mp5_cta_activeType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_cta_activeType_Mp5_cta_activeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_cta_activeType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_cta_activeType_descriptor();
  }
  static inline const ::std::string& Mp5_cta_activeType_Name(Mp5_cta_activeType value) {
    return Gw_mp5_0x530_530_Mp5_cta_activeType_Name(value);
  }
  static inline bool Mp5_cta_activeType_Parse(const ::std::string& name,
      Mp5_cta_activeType* value) {
    return Gw_mp5_0x530_530_Mp5_cta_activeType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_bsdlca_activeType Mp5_bsdlca_activeType;
  static const Mp5_bsdlca_activeType MP5_BSDLCA_ACTIVE_ON =
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_MP5_BSDLCA_ACTIVE_ON;
  static const Mp5_bsdlca_activeType MP5_BSDLCA_ACTIVE_OFF =
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_MP5_BSDLCA_ACTIVE_OFF;
  static inline bool Mp5_bsdlca_activeType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_bsdlca_activeType_IsValid(value);
  }
  static const Mp5_bsdlca_activeType Mp5_bsdlca_activeType_MIN =
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_MIN;
  static const Mp5_bsdlca_activeType Mp5_bsdlca_activeType_MAX =
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_MAX;
  static const int Mp5_bsdlca_activeType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Mp5_bsdlca_activeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_bsdlca_activeType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_bsdlca_activeType_descriptor();
  }
  static inline const ::std::string& Mp5_bsdlca_activeType_Name(Mp5_bsdlca_activeType value) {
    return Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Name(value);
  }
  static inline bool Mp5_bsdlca_activeType_Parse(const ::std::string& name,
      Mp5_bsdlca_activeType* value) {
    return Gw_mp5_0x530_530_Mp5_bsdlca_activeType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_tsrmenureqType Mp5_tsrmenureqType;
  static const Mp5_tsrmenureqType MP5_TSRMENUREQ_ON =
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_MP5_TSRMENUREQ_ON;
  static const Mp5_tsrmenureqType MP5_TSRMENUREQ_OFF =
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_MP5_TSRMENUREQ_OFF;
  static inline bool Mp5_tsrmenureqType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_tsrmenureqType_IsValid(value);
  }
  static const Mp5_tsrmenureqType Mp5_tsrmenureqType_MIN =
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_MIN;
  static const Mp5_tsrmenureqType Mp5_tsrmenureqType_MAX =
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_MAX;
  static const int Mp5_tsrmenureqType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_tsrmenureqType_Mp5_tsrmenureqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_tsrmenureqType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_tsrmenureqType_descriptor();
  }
  static inline const ::std::string& Mp5_tsrmenureqType_Name(Mp5_tsrmenureqType value) {
    return Gw_mp5_0x530_530_Mp5_tsrmenureqType_Name(value);
  }
  static inline bool Mp5_tsrmenureqType_Parse(const ::std::string& name,
      Mp5_tsrmenureqType* value) {
    return Gw_mp5_0x530_530_Mp5_tsrmenureqType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_ldwwarningType Mp5_ldwwarningType;
  static const Mp5_ldwwarningType MP5_LDWWARNING_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE;
  static const Mp5_ldwwarningType MP5_LDWWARNING_AUDIBLE_WARNING =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_AUDIBLE_WARNING;
  static const Mp5_ldwwarningType MP5_LDWWARNING_WHEELSTEER_SHAKE =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_WHEELSTEER_SHAKE;
  static const Mp5_ldwwarningType MP5_LDWWARNING_RESERVED =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_MP5_LDWWARNING_RESERVED;
  static inline bool Mp5_ldwwarningType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_ldwwarningType_IsValid(value);
  }
  static const Mp5_ldwwarningType Mp5_ldwwarningType_MIN =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_MIN;
  static const Mp5_ldwwarningType Mp5_ldwwarningType_MAX =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_MAX;
  static const int Mp5_ldwwarningType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_ldwwarningType_Mp5_ldwwarningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_ldwwarningType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_ldwwarningType_descriptor();
  }
  static inline const ::std::string& Mp5_ldwwarningType_Name(Mp5_ldwwarningType value) {
    return Gw_mp5_0x530_530_Mp5_ldwwarningType_Name(value);
  }
  static inline bool Mp5_ldwwarningType_Parse(const ::std::string& name,
      Mp5_ldwwarningType* value) {
    return Gw_mp5_0x530_530_Mp5_ldwwarningType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_ldwsensitvityType Mp5_ldwsensitvityType;
  static const Mp5_ldwsensitvityType MP5_LDWSENSITVITY_HIGH =
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_HIGH;
  static const Mp5_ldwsensitvityType MP5_LDWSENSITVITY_LOW =
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_LOW;
  static const Mp5_ldwsensitvityType MP5_LDWSENSITVITY_RESERVED =
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_MP5_LDWSENSITVITY_RESERVED;
  static inline bool Mp5_ldwsensitvityType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_ldwsensitvityType_IsValid(value);
  }
  static const Mp5_ldwsensitvityType Mp5_ldwsensitvityType_MIN =
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_MIN;
  static const Mp5_ldwsensitvityType Mp5_ldwsensitvityType_MAX =
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_MAX;
  static const int Mp5_ldwsensitvityType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Mp5_ldwsensitvityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_ldwsensitvityType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_ldwsensitvityType_descriptor();
  }
  static inline const ::std::string& Mp5_ldwsensitvityType_Name(Mp5_ldwsensitvityType value) {
    return Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Name(value);
  }
  static inline bool Mp5_ldwsensitvityType_Parse(const ::std::string& name,
      Mp5_ldwsensitvityType* value) {
    return Gw_mp5_0x530_530_Mp5_ldwsensitvityType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_avm_angleType Mp5_avm_angleType;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_CENTER_KEY =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_CENTER_KEY;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_FRONT_3D_FRONT_AVM_2D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_FRONT_3D_FRONT_AVM_2D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_FRONT_RIGHT_3D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_FRONT_RIGHT_3D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_RIGHT_3D_RIGHT_AVM_2D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_RIGHT_3D_RIGHT_AVM_2D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_REAR_RIGHT_3D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_REAR_RIGHT_3D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_REAR_3D_REAR_AVM_2D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_REAR_3D_REAR_AVM_2D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_LEFT_REAR_3D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_LEFT_REAR_3D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_LEFT_3D_LEFT_AVM_2D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_LEFT_3D_LEFT_AVM_2D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_LEFT_FRONT_3D =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_LEFT_FRONT_3D;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_3D_KEY =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_3D_KEY;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_2D_KEY =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_2D_KEY;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_NO_VIDEO_SIGNAL_RESERVED =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_NO_VIDEO_SIGNAL_RESERVED;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_RESERVED =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_RESERVED;
  static const Mp5_avm_angleType MP5_AVM_ANGLE_INVALID =
    Gw_mp5_0x530_530_Mp5_avm_angleType_MP5_AVM_ANGLE_INVALID;
  static inline bool Mp5_avm_angleType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_avm_angleType_IsValid(value);
  }
  static const Mp5_avm_angleType Mp5_avm_angleType_MIN =
    Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_MIN;
  static const Mp5_avm_angleType Mp5_avm_angleType_MAX =
    Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_MAX;
  static const int Mp5_avm_angleType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_avm_angleType_Mp5_avm_angleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_avm_angleType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_avm_angleType_descriptor();
  }
  static inline const ::std::string& Mp5_avm_angleType_Name(Mp5_avm_angleType value) {
    return Gw_mp5_0x530_530_Mp5_avm_angleType_Name(value);
  }
  static inline bool Mp5_avm_angleType_Parse(const ::std::string& name,
      Mp5_avm_angleType* value) {
    return Gw_mp5_0x530_530_Mp5_avm_angleType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_ihcmenureqType Mp5_ihcmenureqType;
  static const Mp5_ihcmenureqType MP5_IHCMENUREQ_ON =
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_MP5_IHCMENUREQ_ON;
  static const Mp5_ihcmenureqType MP5_IHCMENUREQ_OFF =
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_MP5_IHCMENUREQ_OFF;
  static inline bool Mp5_ihcmenureqType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_ihcmenureqType_IsValid(value);
  }
  static const Mp5_ihcmenureqType Mp5_ihcmenureqType_MIN =
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_MIN;
  static const Mp5_ihcmenureqType Mp5_ihcmenureqType_MAX =
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_MAX;
  static const int Mp5_ihcmenureqType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_ihcmenureqType_Mp5_ihcmenureqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_ihcmenureqType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_ihcmenureqType_descriptor();
  }
  static inline const ::std::string& Mp5_ihcmenureqType_Name(Mp5_ihcmenureqType value) {
    return Gw_mp5_0x530_530_Mp5_ihcmenureqType_Name(value);
  }
  static inline bool Mp5_ihcmenureqType_Parse(const ::std::string& name,
      Mp5_ihcmenureqType* value) {
    return Gw_mp5_0x530_530_Mp5_ihcmenureqType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_doa_activeType Mp5_doa_activeType;
  static const Mp5_doa_activeType MP5_DOA_ACTIVE_ON =
    Gw_mp5_0x530_530_Mp5_doa_activeType_MP5_DOA_ACTIVE_ON;
  static const Mp5_doa_activeType MP5_DOA_ACTIVE_OFF =
    Gw_mp5_0x530_530_Mp5_doa_activeType_MP5_DOA_ACTIVE_OFF;
  static inline bool Mp5_doa_activeType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_doa_activeType_IsValid(value);
  }
  static const Mp5_doa_activeType Mp5_doa_activeType_MIN =
    Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_MIN;
  static const Mp5_doa_activeType Mp5_doa_activeType_MAX =
    Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_MAX;
  static const int Mp5_doa_activeType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_doa_activeType_Mp5_doa_activeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_doa_activeType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_doa_activeType_descriptor();
  }
  static inline const ::std::string& Mp5_doa_activeType_Name(Mp5_doa_activeType value) {
    return Gw_mp5_0x530_530_Mp5_doa_activeType_Name(value);
  }
  static inline bool Mp5_doa_activeType_Parse(const ::std::string& name,
      Mp5_doa_activeType* value) {
    return Gw_mp5_0x530_530_Mp5_doa_activeType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_apa_available_stsType Mp5_apa_available_stsType;
  static const Mp5_apa_available_stsType MP5_APA_AVAILABLE_STS_INITIAL =
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_INITIAL;
  static const Mp5_apa_available_stsType MP5_APA_AVAILABLE_STS_AVALIBLE =
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_AVALIBLE;
  static const Mp5_apa_available_stsType MP5_APA_AVAILABLE_STS_NOT_AVALIBLE =
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_MP5_APA_AVAILABLE_STS_NOT_AVALIBLE;
  static inline bool Mp5_apa_available_stsType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_apa_available_stsType_IsValid(value);
  }
  static const Mp5_apa_available_stsType Mp5_apa_available_stsType_MIN =
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_MIN;
  static const Mp5_apa_available_stsType Mp5_apa_available_stsType_MAX =
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_MAX;
  static const int Mp5_apa_available_stsType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_apa_available_stsType_Mp5_apa_available_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_apa_available_stsType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_apa_available_stsType_descriptor();
  }
  static inline const ::std::string& Mp5_apa_available_stsType_Name(Mp5_apa_available_stsType value) {
    return Gw_mp5_0x530_530_Mp5_apa_available_stsType_Name(value);
  }
  static inline bool Mp5_apa_available_stsType_Parse(const ::std::string& name,
      Mp5_apa_available_stsType* value) {
    return Gw_mp5_0x530_530_Mp5_apa_available_stsType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Mp5_tpmsautolocationsettingType;
  static const Mp5_tpmsautolocationsettingType MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGOFF =
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGOFF;
  static const Mp5_tpmsautolocationsettingType MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGON =
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGON;
  static inline bool Mp5_tpmsautolocationsettingType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_IsValid(value);
  }
  static const Mp5_tpmsautolocationsettingType Mp5_tpmsautolocationsettingType_MIN =
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_MIN;
  static const Mp5_tpmsautolocationsettingType Mp5_tpmsautolocationsettingType_MAX =
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_MAX;
  static const int Mp5_tpmsautolocationsettingType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Mp5_tpmsautolocationsettingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_tpmsautolocationsettingType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_descriptor();
  }
  static inline const ::std::string& Mp5_tpmsautolocationsettingType_Name(Mp5_tpmsautolocationsettingType value) {
    return Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Name(value);
  }
  static inline bool Mp5_tpmsautolocationsettingType_Parse(const ::std::string& name,
      Mp5_tpmsautolocationsettingType* value) {
    return Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Mp5_avm_rotationdirectionType;
  static const Mp5_avm_rotationdirectionType MP5_AVM_ROTATIONDIRECTION_INITIAL =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_INITIAL;
  static const Mp5_avm_rotationdirectionType MP5_AVM_ROTATIONDIRECTION_CLOCKWISE =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_CLOCKWISE;
  static const Mp5_avm_rotationdirectionType MP5_AVM_ROTATIONDIRECTION_ANTICLOCKWISE =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_ANTICLOCKWISE;
  static const Mp5_avm_rotationdirectionType MP5_AVM_ROTATIONDIRECTION_RESERVED =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_MP5_AVM_ROTATIONDIRECTION_RESERVED;
  static inline bool Mp5_avm_rotationdirectionType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_IsValid(value);
  }
  static const Mp5_avm_rotationdirectionType Mp5_avm_rotationdirectionType_MIN =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_MIN;
  static const Mp5_avm_rotationdirectionType Mp5_avm_rotationdirectionType_MAX =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_MAX;
  static const int Mp5_avm_rotationdirectionType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Mp5_avm_rotationdirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_avm_rotationdirectionType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_descriptor();
  }
  static inline const ::std::string& Mp5_avm_rotationdirectionType_Name(Mp5_avm_rotationdirectionType value) {
    return Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Name(value);
  }
  static inline bool Mp5_avm_rotationdirectionType_Parse(const ::std::string& name,
      Mp5_avm_rotationdirectionType* value) {
    return Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_avm_buttonType Mp5_avm_buttonType;
  static const Mp5_avm_buttonType MP5_AVM_BUTTON_INIT =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_INIT;
  static const Mp5_avm_buttonType MP5_AVM_BUTTON_START_UP =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_START_UP;
  static const Mp5_avm_buttonType MP5_AVM_BUTTON_SHUT_DOWN =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_SHUT_DOWN;
  static const Mp5_avm_buttonType MP5_AVM_BUTTON_FAULTURE =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_MP5_AVM_BUTTON_FAULTURE;
  static inline bool Mp5_avm_buttonType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_avm_buttonType_IsValid(value);
  }
  static const Mp5_avm_buttonType Mp5_avm_buttonType_MIN =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_MIN;
  static const Mp5_avm_buttonType Mp5_avm_buttonType_MAX =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_MAX;
  static const int Mp5_avm_buttonType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_avm_buttonType_Mp5_avm_buttonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_avm_buttonType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_avm_buttonType_descriptor();
  }
  static inline const ::std::string& Mp5_avm_buttonType_Name(Mp5_avm_buttonType value) {
    return Gw_mp5_0x530_530_Mp5_avm_buttonType_Name(value);
  }
  static inline bool Mp5_avm_buttonType_Parse(const ::std::string& name,
      Mp5_avm_buttonType* value) {
    return Gw_mp5_0x530_530_Mp5_avm_buttonType_Parse(name, value);
  }

  typedef Gw_mp5_0x530_530_Mp5_view_choiceType Mp5_view_choiceType;
  static const Mp5_view_choiceType MP5_VIEW_CHOICE_AVM =
    Gw_mp5_0x530_530_Mp5_view_choiceType_MP5_VIEW_CHOICE_AVM;
  static const Mp5_view_choiceType MP5_VIEW_CHOICE_ADAS =
    Gw_mp5_0x530_530_Mp5_view_choiceType_MP5_VIEW_CHOICE_ADAS;
  static inline bool Mp5_view_choiceType_IsValid(int value) {
    return Gw_mp5_0x530_530_Mp5_view_choiceType_IsValid(value);
  }
  static const Mp5_view_choiceType Mp5_view_choiceType_MIN =
    Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_MIN;
  static const Mp5_view_choiceType Mp5_view_choiceType_MAX =
    Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_MAX;
  static const int Mp5_view_choiceType_ARRAYSIZE =
    Gw_mp5_0x530_530_Mp5_view_choiceType_Mp5_view_choiceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mp5_view_choiceType_descriptor() {
    return Gw_mp5_0x530_530_Mp5_view_choiceType_descriptor();
  }
  static inline const ::std::string& Mp5_view_choiceType_Name(Mp5_view_choiceType value) {
    return Gw_mp5_0x530_530_Mp5_view_choiceType_Name(value);
  }
  static inline bool Mp5_view_choiceType_Parse(const ::std::string& name,
      Mp5_view_choiceType* value) {
    return Gw_mp5_0x530_530_Mp5_view_choiceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
  bool has_mp5_fcw_sensitive() const;
  void clear_mp5_fcw_sensitive();
  static const int kMp5FcwSensitiveFieldNumber = 1;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType mp5_fcw_sensitive() const;
  void set_mp5_fcw_sensitive(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
  bool has_mp5_icmenushift_button() const;
  void clear_mp5_icmenushift_button();
  static const int kMp5IcmenushiftButtonFieldNumber = 2;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType mp5_icmenushift_button() const;
  void set_mp5_icmenushift_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
  bool has_mp5_aeb_on_off() const;
  void clear_mp5_aeb_on_off();
  static const int kMp5AebOnOffFieldNumber = 3;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType mp5_aeb_on_off() const;
  void set_mp5_aeb_on_off(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
  bool has_mp5_fcw_on_off() const;
  void clear_mp5_fcw_on_off();
  static const int kMp5FcwOnOffFieldNumber = 4;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType mp5_fcw_on_off() const;
  void set_mp5_fcw_on_off(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
  bool has_mp5_bsdswitchsts() const;
  void clear_mp5_bsdswitchsts();
  static const int kMp5BsdswitchstsFieldNumber = 5;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType mp5_bsdswitchsts() const;
  void set_mp5_bsdswitchsts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
  bool has_mp5_afs_swtichsts() const;
  void clear_mp5_afs_swtichsts();
  static const int kMp5AfsSwtichstsFieldNumber = 6;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType mp5_afs_swtichsts() const;
  void set_mp5_afs_swtichsts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
  bool has_mp5_laneassittypereq() const;
  void clear_mp5_laneassittypereq();
  static const int kMp5LaneassittypereqFieldNumber = 7;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType mp5_laneassittypereq() const;
  void set_mp5_laneassittypereq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
  bool has_mp5_icmenuactive_button() const;
  void clear_mp5_icmenuactive_button();
  static const int kMp5IcmenuactiveButtonFieldNumber = 8;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType mp5_icmenuactive_button() const;
  void set_mp5_icmenuactive_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
  bool has_mp5_alarmstatus() const;
  void clear_mp5_alarmstatus();
  static const int kMp5AlarmstatusFieldNumber = 9;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType mp5_alarmstatus() const;
  void set_mp5_alarmstatus(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
  bool has_mp5_alarmornot() const;
  void clear_mp5_alarmornot();
  static const int kMp5AlarmornotFieldNumber = 10;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType mp5_alarmornot() const;
  void set_mp5_alarmornot(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
  bool has_mp5_paakreset_req() const;
  void clear_mp5_paakreset_req();
  static const int kMp5PaakresetReqFieldNumber = 11;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType mp5_paakreset_req() const;
  void set_mp5_paakreset_req(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
  bool has_mp5_cta_active() const;
  void clear_mp5_cta_active();
  static const int kMp5CtaActiveFieldNumber = 12;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType mp5_cta_active() const;
  void set_mp5_cta_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
  bool has_mp5_bsdlca_active() const;
  void clear_mp5_bsdlca_active();
  static const int kMp5BsdlcaActiveFieldNumber = 13;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType mp5_bsdlca_active() const;
  void set_mp5_bsdlca_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
  bool has_mp5_tsrmenureq() const;
  void clear_mp5_tsrmenureq();
  static const int kMp5TsrmenureqFieldNumber = 14;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType mp5_tsrmenureq() const;
  void set_mp5_tsrmenureq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
  bool has_mp5_ldwwarning() const;
  void clear_mp5_ldwwarning();
  static const int kMp5LdwwarningFieldNumber = 15;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType mp5_ldwwarning() const;
  void set_mp5_ldwwarning(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
  bool has_mp5_ldwsensitvity() const;
  void clear_mp5_ldwsensitvity();
  static const int kMp5LdwsensitvityFieldNumber = 16;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType mp5_ldwsensitvity() const;
  void set_mp5_ldwsensitvity(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
  bool has_mp5_avm_angle() const;
  void clear_mp5_avm_angle();
  static const int kMp5AvmAngleFieldNumber = 17;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType mp5_avm_angle() const;
  void set_mp5_avm_angle(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType value);

  // optional int32 mp5_avm_rotationchange = 18;
  bool has_mp5_avm_rotationchange() const;
  void clear_mp5_avm_rotationchange();
  static const int kMp5AvmRotationchangeFieldNumber = 18;
  ::google::protobuf::int32 mp5_avm_rotationchange() const;
  void set_mp5_avm_rotationchange(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
  bool has_mp5_ihcmenureq() const;
  void clear_mp5_ihcmenureq();
  static const int kMp5IhcmenureqFieldNumber = 19;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType mp5_ihcmenureq() const;
  void set_mp5_ihcmenureq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
  bool has_mp5_doa_active() const;
  void clear_mp5_doa_active();
  static const int kMp5DoaActiveFieldNumber = 20;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType mp5_doa_active() const;
  void set_mp5_doa_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
  bool has_mp5_apa_available_sts() const;
  void clear_mp5_apa_available_sts();
  static const int kMp5ApaAvailableStsFieldNumber = 21;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType mp5_apa_available_sts() const;
  void set_mp5_apa_available_sts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
  bool has_mp5_tpmsautolocationsetting() const;
  void clear_mp5_tpmsautolocationsetting();
  static const int kMp5TpmsautolocationsettingFieldNumber = 22;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting() const;
  void set_mp5_tpmsautolocationsetting(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
  bool has_mp5_avm_rotationdirection() const;
  void clear_mp5_avm_rotationdirection();
  static const int kMp5AvmRotationdirectionFieldNumber = 23;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType mp5_avm_rotationdirection() const;
  void set_mp5_avm_rotationdirection(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
  bool has_mp5_avm_button() const;
  void clear_mp5_avm_button();
  static const int kMp5AvmButtonFieldNumber = 24;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType mp5_avm_button() const;
  void set_mp5_avm_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType value);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
  bool has_mp5_view_choice() const;
  void clear_mp5_view_choice();
  static const int kMp5ViewChoiceFieldNumber = 25;
  ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType mp5_view_choice() const;
  void set_mp5_view_choice(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_mp5_0x530_530)
 private:
  void set_has_mp5_fcw_sensitive();
  void clear_has_mp5_fcw_sensitive();
  void set_has_mp5_icmenushift_button();
  void clear_has_mp5_icmenushift_button();
  void set_has_mp5_aeb_on_off();
  void clear_has_mp5_aeb_on_off();
  void set_has_mp5_fcw_on_off();
  void clear_has_mp5_fcw_on_off();
  void set_has_mp5_bsdswitchsts();
  void clear_has_mp5_bsdswitchsts();
  void set_has_mp5_afs_swtichsts();
  void clear_has_mp5_afs_swtichsts();
  void set_has_mp5_laneassittypereq();
  void clear_has_mp5_laneassittypereq();
  void set_has_mp5_icmenuactive_button();
  void clear_has_mp5_icmenuactive_button();
  void set_has_mp5_alarmstatus();
  void clear_has_mp5_alarmstatus();
  void set_has_mp5_alarmornot();
  void clear_has_mp5_alarmornot();
  void set_has_mp5_paakreset_req();
  void clear_has_mp5_paakreset_req();
  void set_has_mp5_cta_active();
  void clear_has_mp5_cta_active();
  void set_has_mp5_bsdlca_active();
  void clear_has_mp5_bsdlca_active();
  void set_has_mp5_tsrmenureq();
  void clear_has_mp5_tsrmenureq();
  void set_has_mp5_ldwwarning();
  void clear_has_mp5_ldwwarning();
  void set_has_mp5_ldwsensitvity();
  void clear_has_mp5_ldwsensitvity();
  void set_has_mp5_avm_angle();
  void clear_has_mp5_avm_angle();
  void set_has_mp5_avm_rotationchange();
  void clear_has_mp5_avm_rotationchange();
  void set_has_mp5_ihcmenureq();
  void clear_has_mp5_ihcmenureq();
  void set_has_mp5_doa_active();
  void clear_has_mp5_doa_active();
  void set_has_mp5_apa_available_sts();
  void clear_has_mp5_apa_available_sts();
  void set_has_mp5_tpmsautolocationsetting();
  void clear_has_mp5_tpmsautolocationsetting();
  void set_has_mp5_avm_rotationdirection();
  void clear_has_mp5_avm_rotationdirection();
  void set_has_mp5_avm_button();
  void clear_has_mp5_avm_button();
  void set_has_mp5_view_choice();
  void clear_has_mp5_view_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int mp5_fcw_sensitive_;
  int mp5_icmenushift_button_;
  int mp5_aeb_on_off_;
  int mp5_fcw_on_off_;
  int mp5_bsdswitchsts_;
  int mp5_afs_swtichsts_;
  int mp5_laneassittypereq_;
  int mp5_icmenuactive_button_;
  int mp5_alarmstatus_;
  int mp5_alarmornot_;
  int mp5_paakreset_req_;
  int mp5_cta_active_;
  int mp5_bsdlca_active_;
  int mp5_tsrmenureq_;
  int mp5_ldwwarning_;
  int mp5_ldwsensitvity_;
  int mp5_avm_angle_;
  ::google::protobuf::int32 mp5_avm_rotationchange_;
  int mp5_ihcmenureq_;
  int mp5_doa_active_;
  int mp5_apa_available_sts_;
  int mp5_tpmsautolocationsetting_;
  int mp5_avm_rotationdirection_;
  int mp5_avm_button_;
  int mp5_view_choice_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mrr_frobj_0x279_279 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Mrr_frobj_0x279_279) */ {
 public:
  Mrr_frobj_0x279_279();
  virtual ~Mrr_frobj_0x279_279();

  Mrr_frobj_0x279_279(const Mrr_frobj_0x279_279& from);

  inline Mrr_frobj_0x279_279& operator=(const Mrr_frobj_0x279_279& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mrr_frobj_0x279_279& default_instance();

  static inline const Mrr_frobj_0x279_279* internal_default_instance() {
    return reinterpret_cast<const Mrr_frobj_0x279_279*>(
               &_Mrr_frobj_0x279_279_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(Mrr_frobj_0x279_279* other);

  // implements Message ----------------------------------------------

  inline Mrr_frobj_0x279_279* New() const PROTOBUF_FINAL { return New(NULL); }

  Mrr_frobj_0x279_279* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mrr_frobj_0x279_279& from);
  void MergeFrom(const Mrr_frobj_0x279_279& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mrr_frobj_0x279_279* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_f_obj_0x_classType;
  static const Mrr_f_obj_0x_classType MRR_F_OBJ_0X_CLASS_UNKNOWN =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_UNKNOWN;
  static const Mrr_f_obj_0x_classType MRR_F_OBJ_0X_CLASS_CAR =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_CAR;
  static const Mrr_f_obj_0x_classType MRR_F_OBJ_0X_CLASS_TRUCK =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_TRUCK;
  static const Mrr_f_obj_0x_classType MRR_F_OBJ_0X_CLASS_TWO_WHEELER =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_MRR_F_OBJ_0X_CLASS_TWO_WHEELER;
  static inline bool Mrr_f_obj_0x_classType_IsValid(int value) {
    return Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_IsValid(value);
  }
  static const Mrr_f_obj_0x_classType Mrr_f_obj_0x_classType_MIN =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_MIN;
  static const Mrr_f_obj_0x_classType Mrr_f_obj_0x_classType_MAX =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_MAX;
  static const int Mrr_f_obj_0x_classType_ARRAYSIZE =
    Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Mrr_f_obj_0x_classType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_f_obj_0x_classType_descriptor() {
    return Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_descriptor();
  }
  static inline const ::std::string& Mrr_f_obj_0x_classType_Name(Mrr_f_obj_0x_classType value) {
    return Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Name(value);
  }
  static inline bool Mrr_f_obj_0x_classType_Parse(const ::std::string& name,
      Mrr_f_obj_0x_classType* value) {
    return Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_Parse(name, value);
  }

  typedef Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_ff_obj_0x_classType;
  static const Mrr_ff_obj_0x_classType MRR_FF_OBJ_0X_CLASS_UNKNOWN =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_UNKNOWN;
  static const Mrr_ff_obj_0x_classType MRR_FF_OBJ_0X_CLASS_CAR =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_CAR;
  static const Mrr_ff_obj_0x_classType MRR_FF_OBJ_0X_CLASS_TRUCK =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_TRUCK;
  static const Mrr_ff_obj_0x_classType MRR_FF_OBJ_0X_CLASS_TWO_WHEELER =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_MRR_FF_OBJ_0X_CLASS_TWO_WHEELER;
  static inline bool Mrr_ff_obj_0x_classType_IsValid(int value) {
    return Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_IsValid(value);
  }
  static const Mrr_ff_obj_0x_classType Mrr_ff_obj_0x_classType_MIN =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_MIN;
  static const Mrr_ff_obj_0x_classType Mrr_ff_obj_0x_classType_MAX =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_MAX;
  static const int Mrr_ff_obj_0x_classType_ARRAYSIZE =
    Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Mrr_ff_obj_0x_classType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_ff_obj_0x_classType_descriptor() {
    return Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_descriptor();
  }
  static inline const ::std::string& Mrr_ff_obj_0x_classType_Name(Mrr_ff_obj_0x_classType value) {
    return Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Name(value);
  }
  static inline bool Mrr_ff_obj_0x_classType_Parse(const ::std::string& name,
      Mrr_ff_obj_0x_classType* value) {
    return Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_Parse(name, value);
  }

  typedef Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_fftargrtdetectionType;
  static const Mrr_fftargrtdetectionType MRR_FFTARGRTDETECTION_NOT_DECTECTED =
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_MRR_FFTARGRTDETECTION_NOT_DECTECTED;
  static const Mrr_fftargrtdetectionType MRR_FFTARGRTDETECTION_DECTECTED =
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_MRR_FFTARGRTDETECTION_DECTECTED;
  static inline bool Mrr_fftargrtdetectionType_IsValid(int value) {
    return Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_IsValid(value);
  }
  static const Mrr_fftargrtdetectionType Mrr_fftargrtdetectionType_MIN =
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_MIN;
  static const Mrr_fftargrtdetectionType Mrr_fftargrtdetectionType_MAX =
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_MAX;
  static const int Mrr_fftargrtdetectionType_ARRAYSIZE =
    Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Mrr_fftargrtdetectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_fftargrtdetectionType_descriptor() {
    return Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_descriptor();
  }
  static inline const ::std::string& Mrr_fftargrtdetectionType_Name(Mrr_fftargrtdetectionType value) {
    return Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Name(value);
  }
  static inline bool Mrr_fftargrtdetectionType_Parse(const ::std::string& name,
      Mrr_fftargrtdetectionType* value) {
    return Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_Parse(name, value);
  }

  typedef Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_peddetectionType;
  static const Mrr_peddetectionType MRR_PEDDETECTION_NOT_DECTECTED =
    Mrr_frobj_0x279_279_Mrr_peddetectionType_MRR_PEDDETECTION_NOT_DECTECTED;
  static const Mrr_peddetectionType MRR_PEDDETECTION_DECTECTED =
    Mrr_frobj_0x279_279_Mrr_peddetectionType_MRR_PEDDETECTION_DECTECTED;
  static inline bool Mrr_peddetectionType_IsValid(int value) {
    return Mrr_frobj_0x279_279_Mrr_peddetectionType_IsValid(value);
  }
  static const Mrr_peddetectionType Mrr_peddetectionType_MIN =
    Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_MIN;
  static const Mrr_peddetectionType Mrr_peddetectionType_MAX =
    Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_MAX;
  static const int Mrr_peddetectionType_ARRAYSIZE =
    Mrr_frobj_0x279_279_Mrr_peddetectionType_Mrr_peddetectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mrr_peddetectionType_descriptor() {
    return Mrr_frobj_0x279_279_Mrr_peddetectionType_descriptor();
  }
  static inline const ::std::string& Mrr_peddetectionType_Name(Mrr_peddetectionType value) {
    return Mrr_frobj_0x279_279_Mrr_peddetectionType_Name(value);
  }
  static inline bool Mrr_peddetectionType_Parse(const ::std::string& name,
      Mrr_peddetectionType* value) {
    return Mrr_frobj_0x279_279_Mrr_peddetectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double mrr_f_object_dy = 1;
  bool has_mrr_f_object_dy() const;
  void clear_mrr_f_object_dy();
  static const int kMrrFObjectDyFieldNumber = 1;
  double mrr_f_object_dy() const;
  void set_mrr_f_object_dy(double value);

  // optional double mrr_ff_object_dx = 3;
  bool has_mrr_ff_object_dx() const;
  void clear_mrr_ff_object_dx();
  static const int kMrrFfObjectDxFieldNumber = 3;
  double mrr_ff_object_dx() const;
  void set_mrr_ff_object_dx(double value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
  bool has_mrr_f_obj_0x_class() const;
  void clear_mrr_f_obj_0x_class();
  static const int kMrrFObj0XClassFieldNumber = 2;
  ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType mrr_f_obj_0x_class() const;
  void set_mrr_f_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
  bool has_mrr_ff_obj_0x_class() const;
  void clear_mrr_ff_obj_0x_class();
  static const int kMrrFfObj0XClassFieldNumber = 5;
  ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class() const;
  void set_mrr_ff_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType value);

  // optional double mrr_ff_object_dy = 4;
  bool has_mrr_ff_object_dy() const;
  void clear_mrr_ff_object_dy();
  static const int kMrrFfObjectDyFieldNumber = 4;
  double mrr_ff_object_dy() const;
  void set_mrr_ff_object_dy(double value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
  bool has_mrr_fftargrtdetection() const;
  void clear_mrr_fftargrtdetection();
  static const int kMrrFftargrtdetectionFieldNumber = 6;
  ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType mrr_fftargrtdetection() const;
  void set_mrr_fftargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType value);

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
  bool has_mrr_peddetection() const;
  void clear_mrr_peddetection();
  static const int kMrrPeddetectionFieldNumber = 7;
  ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType mrr_peddetection() const;
  void set_mrr_peddetection(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType value);

  // optional double mrr_f_object_dx = 8;
  bool has_mrr_f_object_dx() const;
  void clear_mrr_f_object_dx();
  static const int kMrrFObjectDxFieldNumber = 8;
  double mrr_f_object_dx() const;
  void set_mrr_f_object_dx(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Mrr_frobj_0x279_279)
 private:
  void set_has_mrr_f_object_dy();
  void clear_has_mrr_f_object_dy();
  void set_has_mrr_f_obj_0x_class();
  void clear_has_mrr_f_obj_0x_class();
  void set_has_mrr_ff_object_dx();
  void clear_has_mrr_ff_object_dx();
  void set_has_mrr_ff_object_dy();
  void clear_has_mrr_ff_object_dy();
  void set_has_mrr_ff_obj_0x_class();
  void clear_has_mrr_ff_obj_0x_class();
  void set_has_mrr_fftargrtdetection();
  void clear_has_mrr_fftargrtdetection();
  void set_has_mrr_peddetection();
  void clear_has_mrr_peddetection();
  void set_has_mrr_f_object_dx();
  void clear_has_mrr_f_object_dx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double mrr_f_object_dy_;
  double mrr_ff_object_dx_;
  int mrr_f_obj_0x_class_;
  int mrr_ff_obj_0x_class_;
  double mrr_ff_object_dy_;
  int mrr_fftargrtdetection_;
  int mrr_peddetection_;
  double mrr_f_object_dx_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ic_0x510_510 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ic_0x510_510) */ {
 public:
  Gw_ic_0x510_510();
  virtual ~Gw_ic_0x510_510();

  Gw_ic_0x510_510(const Gw_ic_0x510_510& from);

  inline Gw_ic_0x510_510& operator=(const Gw_ic_0x510_510& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ic_0x510_510& default_instance();

  static inline const Gw_ic_0x510_510* internal_default_instance() {
    return reinterpret_cast<const Gw_ic_0x510_510*>(
               &_Gw_ic_0x510_510_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(Gw_ic_0x510_510* other);

  // implements Message ----------------------------------------------

  inline Gw_ic_0x510_510* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ic_0x510_510* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ic_0x510_510& from);
  void MergeFrom(const Gw_ic_0x510_510& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ic_0x510_510* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Ic_airbagtelltalebehaviorType;
  static const Ic_airbagtelltalebehaviorType IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_LAMP_AND_LAMP_IS_OFF =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_LAMP_AND_LAMP_IS_OFF;
  static const Ic_airbagtelltalebehaviorType IC_AIRBAGTELLTALEBEHAVIOR_FAILURE_IN_LAMP =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_FAILURE_IN_LAMP;
  static const Ic_airbagtelltalebehaviorType IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_ON =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_ON;
  static const Ic_airbagtelltalebehaviorType IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_BLINKING =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_BLINKING;
  static const Ic_airbagtelltalebehaviorType IC_AIRBAGTELLTALEBEHAVIOR_AIRBAGFAILSTS_SIGNAL_NOT_RECEIVED =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_AIRBAGFAILSTS_SIGNAL_NOT_RECEIVED;
  static const Ic_airbagtelltalebehaviorType IC_AIRBAGTELLTALEBEHAVIOR_INVALID =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IC_AIRBAGTELLTALEBEHAVIOR_INVALID;
  static inline bool Ic_airbagtelltalebehaviorType_IsValid(int value) {
    return Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IsValid(value);
  }
  static const Ic_airbagtelltalebehaviorType Ic_airbagtelltalebehaviorType_MIN =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_MIN;
  static const Ic_airbagtelltalebehaviorType Ic_airbagtelltalebehaviorType_MAX =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_MAX;
  static const int Ic_airbagtelltalebehaviorType_ARRAYSIZE =
    Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Ic_airbagtelltalebehaviorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_airbagtelltalebehaviorType_descriptor() {
    return Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_descriptor();
  }
  static inline const ::std::string& Ic_airbagtelltalebehaviorType_Name(Ic_airbagtelltalebehaviorType value) {
    return Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Name(value);
  }
  static inline bool Ic_airbagtelltalebehaviorType_Parse(const ::std::string& name,
      Ic_airbagtelltalebehaviorType* value) {
    return Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_Parse(name, value);
  }

  typedef Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Ic_vehbrkpump_err_icType;
  static const Ic_vehbrkpump_err_icType IC_VEHBRKPUMP_ERR_IC_NORMAL =
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IC_VEHBRKPUMP_ERR_IC_NORMAL;
  static const Ic_vehbrkpump_err_icType IC_VEHBRKPUMP_ERR_IC_ERROR =
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IC_VEHBRKPUMP_ERR_IC_ERROR;
  static inline bool Ic_vehbrkpump_err_icType_IsValid(int value) {
    return Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IsValid(value);
  }
  static const Ic_vehbrkpump_err_icType Ic_vehbrkpump_err_icType_MIN =
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_MIN;
  static const Ic_vehbrkpump_err_icType Ic_vehbrkpump_err_icType_MAX =
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_MAX;
  static const int Ic_vehbrkpump_err_icType_ARRAYSIZE =
    Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Ic_vehbrkpump_err_icType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_vehbrkpump_err_icType_descriptor() {
    return Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_descriptor();
  }
  static inline const ::std::string& Ic_vehbrkpump_err_icType_Name(Ic_vehbrkpump_err_icType value) {
    return Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Name(value);
  }
  static inline bool Ic_vehbrkpump_err_icType_Parse(const ::std::string& name,
      Ic_vehbrkpump_err_icType* value) {
    return Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_Parse(name, value);
  }

  typedef Gw_ic_0x510_510_Ic_disfailType Ic_disfailType;
  static const Ic_disfailType IC_DISFAIL_NO_ERROR =
    Gw_ic_0x510_510_Ic_disfailType_IC_DISFAIL_NO_ERROR;
  static const Ic_disfailType IC_DISFAIL_ERROR =
    Gw_ic_0x510_510_Ic_disfailType_IC_DISFAIL_ERROR;
  static inline bool Ic_disfailType_IsValid(int value) {
    return Gw_ic_0x510_510_Ic_disfailType_IsValid(value);
  }
  static const Ic_disfailType Ic_disfailType_MIN =
    Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_MIN;
  static const Ic_disfailType Ic_disfailType_MAX =
    Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_MAX;
  static const int Ic_disfailType_ARRAYSIZE =
    Gw_ic_0x510_510_Ic_disfailType_Ic_disfailType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_disfailType_descriptor() {
    return Gw_ic_0x510_510_Ic_disfailType_descriptor();
  }
  static inline const ::std::string& Ic_disfailType_Name(Ic_disfailType value) {
    return Gw_ic_0x510_510_Ic_disfailType_Name(value);
  }
  static inline bool Ic_disfailType_Parse(const ::std::string& name,
      Ic_disfailType* value) {
    return Gw_ic_0x510_510_Ic_disfailType_Parse(name, value);
  }

  typedef Gw_ic_0x510_510_Ic_qdashaccfailType Ic_qdashaccfailType;
  static const Ic_qdashaccfailType IC_QDASHACCFAIL_NO_ERROR =
    Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_NO_ERROR;
  static const Ic_qdashaccfailType IC_QDASHACCFAIL_REVERSIBLE_ERROR =
    Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_REVERSIBLE_ERROR;
  static const Ic_qdashaccfailType IC_QDASHACCFAIL_IRREVERSIBLE_ERROR =
    Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_IRREVERSIBLE_ERROR;
  static const Ic_qdashaccfailType IC_QDASHACCFAIL_NOT_DEFINED =
    Gw_ic_0x510_510_Ic_qdashaccfailType_IC_QDASHACCFAIL_NOT_DEFINED;
  static inline bool Ic_qdashaccfailType_IsValid(int value) {
    return Gw_ic_0x510_510_Ic_qdashaccfailType_IsValid(value);
  }
  static const Ic_qdashaccfailType Ic_qdashaccfailType_MIN =
    Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_MIN;
  static const Ic_qdashaccfailType Ic_qdashaccfailType_MAX =
    Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_MAX;
  static const int Ic_qdashaccfailType_ARRAYSIZE =
    Gw_ic_0x510_510_Ic_qdashaccfailType_Ic_qdashaccfailType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_qdashaccfailType_descriptor() {
    return Gw_ic_0x510_510_Ic_qdashaccfailType_descriptor();
  }
  static inline const ::std::string& Ic_qdashaccfailType_Name(Ic_qdashaccfailType value) {
    return Gw_ic_0x510_510_Ic_qdashaccfailType_Name(value);
  }
  static inline bool Ic_qdashaccfailType_Parse(const ::std::string& name,
      Ic_qdashaccfailType* value) {
    return Gw_ic_0x510_510_Ic_qdashaccfailType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
  bool has_ic_airbagtelltalebehavior() const;
  void clear_ic_airbagtelltalebehavior();
  static const int kIcAirbagtelltalebehaviorFieldNumber = 1;
  ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior() const;
  void set_ic_airbagtelltalebehavior(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType value);

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
  bool has_ic_vehbrkpump_err_ic() const;
  void clear_ic_vehbrkpump_err_ic();
  static const int kIcVehbrkpumpErrIcFieldNumber = 2;
  ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic() const;
  void set_ic_vehbrkpump_err_ic(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType value);

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
  bool has_ic_disfail() const;
  void clear_ic_disfail();
  static const int kIcDisfailFieldNumber = 3;
  ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType ic_disfail() const;
  void set_ic_disfail(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType value);

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
  bool has_ic_qdashaccfail() const;
  void clear_ic_qdashaccfail();
  static const int kIcQdashaccfailFieldNumber = 4;
  ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType ic_qdashaccfail() const;
  void set_ic_qdashaccfail(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType value);

  // optional int32 ic_vehspd_hmi = 5;
  bool has_ic_vehspd_hmi() const;
  void clear_ic_vehspd_hmi();
  static const int kIcVehspdHmiFieldNumber = 5;
  ::google::protobuf::int32 ic_vehspd_hmi() const;
  void set_ic_vehspd_hmi(::google::protobuf::int32 value);

  // optional int32 ic_rolling_counter_0x510 = 6;
  bool has_ic_rolling_counter_0x510() const;
  void clear_ic_rolling_counter_0x510();
  static const int kIcRollingCounter0X510FieldNumber = 6;
  ::google::protobuf::int32 ic_rolling_counter_0x510() const;
  void set_ic_rolling_counter_0x510(::google::protobuf::int32 value);

  // optional double ic_odometermastervalue = 8;
  bool has_ic_odometermastervalue() const;
  void clear_ic_odometermastervalue();
  static const int kIcOdometermastervalueFieldNumber = 8;
  double ic_odometermastervalue() const;
  void set_ic_odometermastervalue(double value);

  // optional int32 ic_checksum_0x510 = 7;
  bool has_ic_checksum_0x510() const;
  void clear_ic_checksum_0x510();
  static const int kIcChecksum0X510FieldNumber = 7;
  ::google::protobuf::int32 ic_checksum_0x510() const;
  void set_ic_checksum_0x510(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ic_0x510_510)
 private:
  void set_has_ic_airbagtelltalebehavior();
  void clear_has_ic_airbagtelltalebehavior();
  void set_has_ic_vehbrkpump_err_ic();
  void clear_has_ic_vehbrkpump_err_ic();
  void set_has_ic_disfail();
  void clear_has_ic_disfail();
  void set_has_ic_qdashaccfail();
  void clear_has_ic_qdashaccfail();
  void set_has_ic_vehspd_hmi();
  void clear_has_ic_vehspd_hmi();
  void set_has_ic_rolling_counter_0x510();
  void clear_has_ic_rolling_counter_0x510();
  void set_has_ic_checksum_0x510();
  void clear_has_ic_checksum_0x510();
  void set_has_ic_odometermastervalue();
  void clear_has_ic_odometermastervalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int ic_airbagtelltalebehavior_;
  int ic_vehbrkpump_err_ic_;
  int ic_disfail_;
  int ic_qdashaccfail_;
  ::google::protobuf::int32 ic_vehspd_hmi_;
  ::google::protobuf::int32 ic_rolling_counter_0x510_;
  double ic_odometermastervalue_;
  ::google::protobuf::int32 ic_checksum_0x510_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_tq_0x217_217 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_tq_0x217_217) */ {
 public:
  Esp_tq_0x217_217();
  virtual ~Esp_tq_0x217_217();

  Esp_tq_0x217_217(const Esp_tq_0x217_217& from);

  inline Esp_tq_0x217_217& operator=(const Esp_tq_0x217_217& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_tq_0x217_217& default_instance();

  static inline const Esp_tq_0x217_217* internal_default_instance() {
    return reinterpret_cast<const Esp_tq_0x217_217*>(
               &_Esp_tq_0x217_217_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(Esp_tq_0x217_217* other);

  // implements Message ----------------------------------------------

  inline Esp_tq_0x217_217* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_tq_0x217_217* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_tq_0x217_217& from);
  void MergeFrom(const Esp_tq_0x217_217& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_tq_0x217_217* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_tq_0x217_217_Esp_trqinc_reqType Esp_trqinc_reqType;
  static const Esp_trqinc_reqType ESP_TRQINC_REQ_INACTIVE =
    Esp_tq_0x217_217_Esp_trqinc_reqType_ESP_TRQINC_REQ_INACTIVE;
  static const Esp_trqinc_reqType ESP_TRQINC_REQ_ACTIVE =
    Esp_tq_0x217_217_Esp_trqinc_reqType_ESP_TRQINC_REQ_ACTIVE;
  static inline bool Esp_trqinc_reqType_IsValid(int value) {
    return Esp_tq_0x217_217_Esp_trqinc_reqType_IsValid(value);
  }
  static const Esp_trqinc_reqType Esp_trqinc_reqType_MIN =
    Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_MIN;
  static const Esp_trqinc_reqType Esp_trqinc_reqType_MAX =
    Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_MAX;
  static const int Esp_trqinc_reqType_ARRAYSIZE =
    Esp_tq_0x217_217_Esp_trqinc_reqType_Esp_trqinc_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_trqinc_reqType_descriptor() {
    return Esp_tq_0x217_217_Esp_trqinc_reqType_descriptor();
  }
  static inline const ::std::string& Esp_trqinc_reqType_Name(Esp_trqinc_reqType value) {
    return Esp_tq_0x217_217_Esp_trqinc_reqType_Name(value);
  }
  static inline bool Esp_trqinc_reqType_Parse(const ::std::string& name,
      Esp_trqinc_reqType* value) {
    return Esp_tq_0x217_217_Esp_trqinc_reqType_Parse(name, value);
  }

  typedef Esp_tq_0x217_217_Esp_trqred_reqType Esp_trqred_reqType;
  static const Esp_trqred_reqType ESP_TRQRED_REQ_INACTIVE =
    Esp_tq_0x217_217_Esp_trqred_reqType_ESP_TRQRED_REQ_INACTIVE;
  static const Esp_trqred_reqType ESP_TRQRED_REQ_ACTIVE =
    Esp_tq_0x217_217_Esp_trqred_reqType_ESP_TRQRED_REQ_ACTIVE;
  static inline bool Esp_trqred_reqType_IsValid(int value) {
    return Esp_tq_0x217_217_Esp_trqred_reqType_IsValid(value);
  }
  static const Esp_trqred_reqType Esp_trqred_reqType_MIN =
    Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_MIN;
  static const Esp_trqred_reqType Esp_trqred_reqType_MAX =
    Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_MAX;
  static const int Esp_trqred_reqType_ARRAYSIZE =
    Esp_tq_0x217_217_Esp_trqred_reqType_Esp_trqred_reqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_trqred_reqType_descriptor() {
    return Esp_tq_0x217_217_Esp_trqred_reqType_descriptor();
  }
  static inline const ::std::string& Esp_trqred_reqType_Name(Esp_trqred_reqType value) {
    return Esp_tq_0x217_217_Esp_trqred_reqType_Name(value);
  }
  static inline bool Esp_trqred_reqType_Parse(const ::std::string& name,
      Esp_trqred_reqType* value) {
    return Esp_tq_0x217_217_Esp_trqred_reqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double esp_tqdecreqdbyespslow = 1;
  bool has_esp_tqdecreqdbyespslow() const;
  void clear_esp_tqdecreqdbyespslow();
  static const int kEspTqdecreqdbyespslowFieldNumber = 1;
  double esp_tqdecreqdbyespslow() const;
  void set_esp_tqdecreqdbyespslow(double value);

  // optional double esp_tqinccreqdbyesp = 2;
  bool has_esp_tqinccreqdbyesp() const;
  void clear_esp_tqinccreqdbyesp();
  static const int kEspTqinccreqdbyespFieldNumber = 2;
  double esp_tqinccreqdbyesp() const;
  void set_esp_tqinccreqdbyesp(double value);

  // optional int32 rolling_counter_0x217 = 3;
  bool has_rolling_counter_0x217() const;
  void clear_rolling_counter_0x217();
  static const int kRollingCounter0X217FieldNumber = 3;
  ::google::protobuf::int32 rolling_counter_0x217() const;
  void set_rolling_counter_0x217(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
  bool has_esp_trqinc_req() const;
  void clear_esp_trqinc_req();
  static const int kEspTrqincReqFieldNumber = 4;
  ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType esp_trqinc_req() const;
  void set_esp_trqinc_req(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType value);

  // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
  bool has_esp_trqred_req() const;
  void clear_esp_trqred_req();
  static const int kEspTrqredReqFieldNumber = 5;
  ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType esp_trqred_req() const;
  void set_esp_trqred_req(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType value);

  // optional int32 checksum_0x217 = 6;
  bool has_checksum_0x217() const;
  void clear_checksum_0x217();
  static const int kChecksum0X217FieldNumber = 6;
  ::google::protobuf::int32 checksum_0x217() const;
  void set_checksum_0x217(::google::protobuf::int32 value);

  // optional double esp_tqdecreqdbyespfast = 7;
  bool has_esp_tqdecreqdbyespfast() const;
  void clear_esp_tqdecreqdbyespfast();
  static const int kEspTqdecreqdbyespfastFieldNumber = 7;
  double esp_tqdecreqdbyespfast() const;
  void set_esp_tqdecreqdbyespfast(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_tq_0x217_217)
 private:
  void set_has_esp_tqdecreqdbyespslow();
  void clear_has_esp_tqdecreqdbyespslow();
  void set_has_esp_tqinccreqdbyesp();
  void clear_has_esp_tqinccreqdbyesp();
  void set_has_rolling_counter_0x217();
  void clear_has_rolling_counter_0x217();
  void set_has_esp_trqinc_req();
  void clear_has_esp_trqinc_req();
  void set_has_esp_trqred_req();
  void clear_has_esp_trqred_req();
  void set_has_checksum_0x217();
  void clear_has_checksum_0x217();
  void set_has_esp_tqdecreqdbyespfast();
  void clear_has_esp_tqdecreqdbyespfast();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double esp_tqdecreqdbyespslow_;
  double esp_tqinccreqdbyesp_;
  ::google::protobuf::int32 rolling_counter_0x217_;
  int esp_trqinc_req_;
  int esp_trqred_req_;
  ::google::protobuf::int32 checksum_0x217_;
  double esp_tqdecreqdbyespfast_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Esp_rpmf_0x213_213 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Esp_rpmf_0x213_213) */ {
 public:
  Esp_rpmf_0x213_213();
  virtual ~Esp_rpmf_0x213_213();

  Esp_rpmf_0x213_213(const Esp_rpmf_0x213_213& from);

  inline Esp_rpmf_0x213_213& operator=(const Esp_rpmf_0x213_213& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Esp_rpmf_0x213_213& default_instance();

  static inline const Esp_rpmf_0x213_213* internal_default_instance() {
    return reinterpret_cast<const Esp_rpmf_0x213_213*>(
               &_Esp_rpmf_0x213_213_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(Esp_rpmf_0x213_213* other);

  // implements Message ----------------------------------------------

  inline Esp_rpmf_0x213_213* New() const PROTOBUF_FINAL { return New(NULL); }

  Esp_rpmf_0x213_213* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Esp_rpmf_0x213_213& from);
  void MergeFrom(const Esp_rpmf_0x213_213& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Esp_rpmf_0x213_213* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_wheelrpmfrvalidType;
  static const Esp_wheelrpmfrvalidType ESP_WHEELRPMFRVALID_VALID =
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_ESP_WHEELRPMFRVALID_VALID;
  static const Esp_wheelrpmfrvalidType ESP_WHEELRPMFRVALID_INVALID =
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_ESP_WHEELRPMFRVALID_INVALID;
  static inline bool Esp_wheelrpmfrvalidType_IsValid(int value) {
    return Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_IsValid(value);
  }
  static const Esp_wheelrpmfrvalidType Esp_wheelrpmfrvalidType_MIN =
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_MIN;
  static const Esp_wheelrpmfrvalidType Esp_wheelrpmfrvalidType_MAX =
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_MAX;
  static const int Esp_wheelrpmfrvalidType_ARRAYSIZE =
    Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Esp_wheelrpmfrvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_wheelrpmfrvalidType_descriptor() {
    return Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_descriptor();
  }
  static inline const ::std::string& Esp_wheelrpmfrvalidType_Name(Esp_wheelrpmfrvalidType value) {
    return Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Name(value);
  }
  static inline bool Esp_wheelrpmfrvalidType_Parse(const ::std::string& name,
      Esp_wheelrpmfrvalidType* value) {
    return Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_Parse(name, value);
  }

  typedef Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_wheelrpmflvalidType;
  static const Esp_wheelrpmflvalidType ESP_WHEELRPMFLVALID_VALID =
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_ESP_WHEELRPMFLVALID_VALID;
  static const Esp_wheelrpmflvalidType ESP_WHEELRPMFLVALID_INVALID =
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_ESP_WHEELRPMFLVALID_INVALID;
  static inline bool Esp_wheelrpmflvalidType_IsValid(int value) {
    return Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_IsValid(value);
  }
  static const Esp_wheelrpmflvalidType Esp_wheelrpmflvalidType_MIN =
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_MIN;
  static const Esp_wheelrpmflvalidType Esp_wheelrpmflvalidType_MAX =
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_MAX;
  static const int Esp_wheelrpmflvalidType_ARRAYSIZE =
    Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Esp_wheelrpmflvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Esp_wheelrpmflvalidType_descriptor() {
    return Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_descriptor();
  }
  static inline const ::std::string& Esp_wheelrpmflvalidType_Name(Esp_wheelrpmflvalidType value) {
    return Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Name(value);
  }
  static inline bool Esp_wheelrpmflvalidType_Parse(const ::std::string& name,
      Esp_wheelrpmflvalidType* value) {
    return Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double esp_wheelrpmfr = 1;
  bool has_esp_wheelrpmfr() const;
  void clear_esp_wheelrpmfr();
  static const int kEspWheelrpmfrFieldNumber = 1;
  double esp_wheelrpmfr() const;
  void set_esp_wheelrpmfr(double value);

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
  bool has_esp_wheelrpmfrvalid() const;
  void clear_esp_wheelrpmfrvalid();
  static const int kEspWheelrpmfrvalidFieldNumber = 2;
  ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid() const;
  void set_esp_wheelrpmfrvalid(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType value);

  // optional int32 rolling_counter_0x213 = 3;
  bool has_rolling_counter_0x213() const;
  void clear_rolling_counter_0x213();
  static const int kRollingCounter0X213FieldNumber = 3;
  ::google::protobuf::int32 rolling_counter_0x213() const;
  void set_rolling_counter_0x213(::google::protobuf::int32 value);

  // optional double esp_wheelrpmfl = 5;
  bool has_esp_wheelrpmfl() const;
  void clear_esp_wheelrpmfl();
  static const int kEspWheelrpmflFieldNumber = 5;
  double esp_wheelrpmfl() const;
  void set_esp_wheelrpmfl(double value);

  // optional int32 checksum_0x213 = 4;
  bool has_checksum_0x213() const;
  void clear_checksum_0x213();
  static const int kChecksum0X213FieldNumber = 4;
  ::google::protobuf::int32 checksum_0x213() const;
  void set_checksum_0x213(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
  bool has_esp_wheelrpmflvalid() const;
  void clear_esp_wheelrpmflvalid();
  static const int kEspWheelrpmflvalidFieldNumber = 6;
  ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType esp_wheelrpmflvalid() const;
  void set_esp_wheelrpmflvalid(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Esp_rpmf_0x213_213)
 private:
  void set_has_esp_wheelrpmfr();
  void clear_has_esp_wheelrpmfr();
  void set_has_esp_wheelrpmfrvalid();
  void clear_has_esp_wheelrpmfrvalid();
  void set_has_rolling_counter_0x213();
  void clear_has_rolling_counter_0x213();
  void set_has_checksum_0x213();
  void clear_has_checksum_0x213();
  void set_has_esp_wheelrpmfl();
  void clear_has_esp_wheelrpmfl();
  void set_has_esp_wheelrpmflvalid();
  void clear_has_esp_wheelrpmflvalid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double esp_wheelrpmfr_;
  int esp_wheelrpmfrvalid_;
  ::google::protobuf::int32 rolling_counter_0x213_;
  double esp_wheelrpmfl_;
  ::google::protobuf::int32 checksum_0x213_;
  int esp_wheelrpmflvalid_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_ic_time_0x581_581 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_ic_time_0x581_581) */ {
 public:
  Gw_ic_time_0x581_581();
  virtual ~Gw_ic_time_0x581_581();

  Gw_ic_time_0x581_581(const Gw_ic_time_0x581_581& from);

  inline Gw_ic_time_0x581_581& operator=(const Gw_ic_time_0x581_581& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_ic_time_0x581_581& default_instance();

  static inline const Gw_ic_time_0x581_581* internal_default_instance() {
    return reinterpret_cast<const Gw_ic_time_0x581_581*>(
               &_Gw_ic_time_0x581_581_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(Gw_ic_time_0x581_581* other);

  // implements Message ----------------------------------------------

  inline Gw_ic_time_0x581_581* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_ic_time_0x581_581* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_ic_time_0x581_581& from);
  void MergeFrom(const Gw_ic_time_0x581_581& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_ic_time_0x581_581* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_ic_time_0x581_581_Ic_monthType Ic_monthType;
  static const Ic_monthType IC_MONTH_1 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_1;
  static const Ic_monthType IC_MONTH_2 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_2;
  static const Ic_monthType IC_MONTH_3 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_3;
  static const Ic_monthType IC_MONTH_4 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_4;
  static const Ic_monthType IC_MONTH_5 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_5;
  static const Ic_monthType IC_MONTH_6 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_6;
  static const Ic_monthType IC_MONTH_7 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_7;
  static const Ic_monthType IC_MONTH_8 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_8;
  static const Ic_monthType IC_MONTH_9 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_9;
  static const Ic_monthType IC_MONTH_10 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_10;
  static const Ic_monthType IC_MONTH_11 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_11;
  static const Ic_monthType IC_MONTH_12 =
    Gw_ic_time_0x581_581_Ic_monthType_IC_MONTH_12;
  static inline bool Ic_monthType_IsValid(int value) {
    return Gw_ic_time_0x581_581_Ic_monthType_IsValid(value);
  }
  static const Ic_monthType Ic_monthType_MIN =
    Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_MIN;
  static const Ic_monthType Ic_monthType_MAX =
    Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_MAX;
  static const int Ic_monthType_ARRAYSIZE =
    Gw_ic_time_0x581_581_Ic_monthType_Ic_monthType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_monthType_descriptor() {
    return Gw_ic_time_0x581_581_Ic_monthType_descriptor();
  }
  static inline const ::std::string& Ic_monthType_Name(Ic_monthType value) {
    return Gw_ic_time_0x581_581_Ic_monthType_Name(value);
  }
  static inline bool Ic_monthType_Parse(const ::std::string& name,
      Ic_monthType* value) {
    return Gw_ic_time_0x581_581_Ic_monthType_Parse(name, value);
  }

  typedef Gw_ic_time_0x581_581_Ic_dateType Ic_dateType;
  static const Ic_dateType IC_DATE_1 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_1;
  static const Ic_dateType IC_DATE_2 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_2;
  static const Ic_dateType IC_DATE_3 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_3;
  static const Ic_dateType IC_DATE_4 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_4;
  static const Ic_dateType IC_DATE_5 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_5;
  static const Ic_dateType IC_DATE_6 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_6;
  static const Ic_dateType IC_DATE_7 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_7;
  static const Ic_dateType IC_DATE_8 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_8;
  static const Ic_dateType IC_DATE_9 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_9;
  static const Ic_dateType IC_DATE_10 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_10;
  static const Ic_dateType IC_DATE_11 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_11;
  static const Ic_dateType IC_DATE_12 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_12;
  static const Ic_dateType IC_DATE_13 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_13;
  static const Ic_dateType IC_DATE_14 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_14;
  static const Ic_dateType IC_DATE_15 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_15;
  static const Ic_dateType IC_DATE_16 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_16;
  static const Ic_dateType IC_DATE_17 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_17;
  static const Ic_dateType IC_DATE_18 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_18;
  static const Ic_dateType IC_DATE_19 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_19;
  static const Ic_dateType IC_DATE_20 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_20;
  static const Ic_dateType IC_DATE_21 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_21;
  static const Ic_dateType IC_DATE_22 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_22;
  static const Ic_dateType IC_DATE_23 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_23;
  static const Ic_dateType IC_DATE_24 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_24;
  static const Ic_dateType IC_DATE_25 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_25;
  static const Ic_dateType IC_DATE_26 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_26;
  static const Ic_dateType IC_DATE_27 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_27;
  static const Ic_dateType IC_DATE_28 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_28;
  static const Ic_dateType IC_DATE_29 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_29;
  static const Ic_dateType IC_DATE_30 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_30;
  static const Ic_dateType IC_DATE_31 =
    Gw_ic_time_0x581_581_Ic_dateType_IC_DATE_31;
  static inline bool Ic_dateType_IsValid(int value) {
    return Gw_ic_time_0x581_581_Ic_dateType_IsValid(value);
  }
  static const Ic_dateType Ic_dateType_MIN =
    Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_MIN;
  static const Ic_dateType Ic_dateType_MAX =
    Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_MAX;
  static const int Ic_dateType_ARRAYSIZE =
    Gw_ic_time_0x581_581_Ic_dateType_Ic_dateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_dateType_descriptor() {
    return Gw_ic_time_0x581_581_Ic_dateType_descriptor();
  }
  static inline const ::std::string& Ic_dateType_Name(Ic_dateType value) {
    return Gw_ic_time_0x581_581_Ic_dateType_Name(value);
  }
  static inline bool Ic_dateType_Parse(const ::std::string& name,
      Ic_dateType* value) {
    return Gw_ic_time_0x581_581_Ic_dateType_Parse(name, value);
  }

  typedef Gw_ic_time_0x581_581_Ic_hourType Ic_hourType;
  static const Ic_hourType IC_HOUR_0 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_0;
  static const Ic_hourType IC_HOUR_1 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_1;
  static const Ic_hourType IC_HOUR_2 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_2;
  static const Ic_hourType IC_HOUR_3 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_3;
  static const Ic_hourType IC_HOUR_4 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_4;
  static const Ic_hourType IC_HOUR_5 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_5;
  static const Ic_hourType IC_HOUR_6 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_6;
  static const Ic_hourType IC_HOUR_7 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_7;
  static const Ic_hourType IC_HOUR_8 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_8;
  static const Ic_hourType IC_HOUR_9 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_9;
  static const Ic_hourType IC_HOUR_10 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_10;
  static const Ic_hourType IC_HOUR_11 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_11;
  static const Ic_hourType IC_HOUR_12 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_12;
  static const Ic_hourType IC_HOUR_13 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_13;
  static const Ic_hourType IC_HOUR_14 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_14;
  static const Ic_hourType IC_HOUR_15 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_15;
  static const Ic_hourType IC_HOUR_16 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_16;
  static const Ic_hourType IC_HOUR_17 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_17;
  static const Ic_hourType IC_HOUR_18 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_18;
  static const Ic_hourType IC_HOUR_19 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_19;
  static const Ic_hourType IC_HOUR_20 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_20;
  static const Ic_hourType IC_HOUR_21 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_21;
  static const Ic_hourType IC_HOUR_22 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_22;
  static const Ic_hourType IC_HOUR_23 =
    Gw_ic_time_0x581_581_Ic_hourType_IC_HOUR_23;
  static inline bool Ic_hourType_IsValid(int value) {
    return Gw_ic_time_0x581_581_Ic_hourType_IsValid(value);
  }
  static const Ic_hourType Ic_hourType_MIN =
    Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_MIN;
  static const Ic_hourType Ic_hourType_MAX =
    Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_MAX;
  static const int Ic_hourType_ARRAYSIZE =
    Gw_ic_time_0x581_581_Ic_hourType_Ic_hourType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_hourType_descriptor() {
    return Gw_ic_time_0x581_581_Ic_hourType_descriptor();
  }
  static inline const ::std::string& Ic_hourType_Name(Ic_hourType value) {
    return Gw_ic_time_0x581_581_Ic_hourType_Name(value);
  }
  static inline bool Ic_hourType_Parse(const ::std::string& name,
      Ic_hourType* value) {
    return Gw_ic_time_0x581_581_Ic_hourType_Parse(name, value);
  }

  typedef Gw_ic_time_0x581_581_Ic_minuteType Ic_minuteType;
  static const Ic_minuteType IC_MINUTE_0 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_0;
  static const Ic_minuteType IC_MINUTE_1 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_1;
  static const Ic_minuteType IC_MINUTE_2 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_2;
  static const Ic_minuteType IC_MINUTE_3 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_3;
  static const Ic_minuteType IC_MINUTE_4 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_4;
  static const Ic_minuteType IC_MINUTE_5 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_5;
  static const Ic_minuteType IC_MINUTE_6 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_6;
  static const Ic_minuteType IC_MINUTE_7 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_7;
  static const Ic_minuteType IC_MINUTE_8 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_8;
  static const Ic_minuteType IC_MINUTE_9 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_9;
  static const Ic_minuteType IC_MINUTE_10 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_10;
  static const Ic_minuteType IC_MINUTE_11 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_11;
  static const Ic_minuteType IC_MINUTE_12 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_12;
  static const Ic_minuteType IC_MINUTE_13 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_13;
  static const Ic_minuteType IC_MINUTE_14 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_14;
  static const Ic_minuteType IC_MINUTE_15 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_15;
  static const Ic_minuteType IC_MINUTE_16 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_16;
  static const Ic_minuteType IC_MINUTE_17 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_17;
  static const Ic_minuteType IC_MINUTE_18 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_18;
  static const Ic_minuteType IC_MINUTE_19 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_19;
  static const Ic_minuteType IC_MINUTE_20 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_20;
  static const Ic_minuteType IC_MINUTE_21 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_21;
  static const Ic_minuteType IC_MINUTE_22 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_22;
  static const Ic_minuteType IC_MINUTE_23 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_23;
  static const Ic_minuteType IC_MINUTE_24 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_24;
  static const Ic_minuteType IC_MINUTE_25 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_25;
  static const Ic_minuteType IC_MINUTE_26 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_26;
  static const Ic_minuteType IC_MINUTE_27 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_27;
  static const Ic_minuteType IC_MINUTE_28 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_28;
  static const Ic_minuteType IC_MINUTE_29 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_29;
  static const Ic_minuteType IC_MINUTE_30 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_30;
  static const Ic_minuteType IC_MINUTE_31 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_31;
  static const Ic_minuteType IC_MINUTE_32 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_32;
  static const Ic_minuteType IC_MINUTE_33 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_33;
  static const Ic_minuteType IC_MINUTE_34 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_34;
  static const Ic_minuteType IC_MINUTE_35 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_35;
  static const Ic_minuteType IC_MINUTE_36 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_36;
  static const Ic_minuteType IC_MINUTE_37 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_37;
  static const Ic_minuteType IC_MINUTE_38 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_38;
  static const Ic_minuteType IC_MINUTE_39 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_39;
  static const Ic_minuteType IC_MINUTE_40 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_40;
  static const Ic_minuteType IC_MINUTE_41 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_41;
  static const Ic_minuteType IC_MINUTE_42 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_42;
  static const Ic_minuteType IC_MINUTE_43 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_43;
  static const Ic_minuteType IC_MINUTE_44 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_44;
  static const Ic_minuteType IC_MINUTE_45 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_45;
  static const Ic_minuteType IC_MINUTE_46 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_46;
  static const Ic_minuteType IC_MINUTE_47 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_47;
  static const Ic_minuteType IC_MINUTE_48 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_48;
  static const Ic_minuteType IC_MINUTE_49 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_49;
  static const Ic_minuteType IC_MINUTE_50 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_50;
  static const Ic_minuteType IC_MINUTE_51 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_51;
  static const Ic_minuteType IC_MINUTE_52 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_52;
  static const Ic_minuteType IC_MINUTE_53 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_53;
  static const Ic_minuteType IC_MINUTE_54 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_54;
  static const Ic_minuteType IC_MINUTE_55 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_55;
  static const Ic_minuteType IC_MINUTE_56 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_56;
  static const Ic_minuteType IC_MINUTE_57 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_57;
  static const Ic_minuteType IC_MINUTE_58 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_58;
  static const Ic_minuteType IC_MINUTE_59 =
    Gw_ic_time_0x581_581_Ic_minuteType_IC_MINUTE_59;
  static inline bool Ic_minuteType_IsValid(int value) {
    return Gw_ic_time_0x581_581_Ic_minuteType_IsValid(value);
  }
  static const Ic_minuteType Ic_minuteType_MIN =
    Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_MIN;
  static const Ic_minuteType Ic_minuteType_MAX =
    Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_MAX;
  static const int Ic_minuteType_ARRAYSIZE =
    Gw_ic_time_0x581_581_Ic_minuteType_Ic_minuteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_minuteType_descriptor() {
    return Gw_ic_time_0x581_581_Ic_minuteType_descriptor();
  }
  static inline const ::std::string& Ic_minuteType_Name(Ic_minuteType value) {
    return Gw_ic_time_0x581_581_Ic_minuteType_Name(value);
  }
  static inline bool Ic_minuteType_Parse(const ::std::string& name,
      Ic_minuteType* value) {
    return Gw_ic_time_0x581_581_Ic_minuteType_Parse(name, value);
  }

  typedef Gw_ic_time_0x581_581_Ic_secondType Ic_secondType;
  static const Ic_secondType IC_SECOND_0 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_0;
  static const Ic_secondType IC_SECOND_1 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_1;
  static const Ic_secondType IC_SECOND_2 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_2;
  static const Ic_secondType IC_SECOND_3 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_3;
  static const Ic_secondType IC_SECOND_4 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_4;
  static const Ic_secondType IC_SECOND_5 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_5;
  static const Ic_secondType IC_SECOND_6 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_6;
  static const Ic_secondType IC_SECOND_7 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_7;
  static const Ic_secondType IC_SECOND_8 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_8;
  static const Ic_secondType IC_SECOND_9 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_9;
  static const Ic_secondType IC_SECOND_10 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_10;
  static const Ic_secondType IC_SECOND_11 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_11;
  static const Ic_secondType IC_SECOND_12 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_12;
  static const Ic_secondType IC_SECOND_13 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_13;
  static const Ic_secondType IC_SECOND_14 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_14;
  static const Ic_secondType IC_SECOND_15 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_15;
  static const Ic_secondType IC_SECOND_16 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_16;
  static const Ic_secondType IC_SECOND_17 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_17;
  static const Ic_secondType IC_SECOND_18 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_18;
  static const Ic_secondType IC_SECOND_19 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_19;
  static const Ic_secondType IC_SECOND_20 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_20;
  static const Ic_secondType IC_SECOND_21 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_21;
  static const Ic_secondType IC_SECOND_22 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_22;
  static const Ic_secondType IC_SECOND_23 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_23;
  static const Ic_secondType IC_SECOND_24 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_24;
  static const Ic_secondType IC_SECOND_25 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_25;
  static const Ic_secondType IC_SECOND_26 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_26;
  static const Ic_secondType IC_SECOND_27 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_27;
  static const Ic_secondType IC_SECOND_28 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_28;
  static const Ic_secondType IC_SECOND_29 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_29;
  static const Ic_secondType IC_SECOND_30 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_30;
  static const Ic_secondType IC_SECOND_31 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_31;
  static const Ic_secondType IC_SECOND_32 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_32;
  static const Ic_secondType IC_SECOND_33 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_33;
  static const Ic_secondType IC_SECOND_34 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_34;
  static const Ic_secondType IC_SECOND_35 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_35;
  static const Ic_secondType IC_SECOND_36 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_36;
  static const Ic_secondType IC_SECOND_37 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_37;
  static const Ic_secondType IC_SECOND_38 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_38;
  static const Ic_secondType IC_SECOND_39 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_39;
  static const Ic_secondType IC_SECOND_40 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_40;
  static const Ic_secondType IC_SECOND_41 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_41;
  static const Ic_secondType IC_SECOND_42 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_42;
  static const Ic_secondType IC_SECOND_43 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_43;
  static const Ic_secondType IC_SECOND_44 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_44;
  static const Ic_secondType IC_SECOND_45 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_45;
  static const Ic_secondType IC_SECOND_46 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_46;
  static const Ic_secondType IC_SECOND_47 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_47;
  static const Ic_secondType IC_SECOND_48 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_48;
  static const Ic_secondType IC_SECOND_49 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_49;
  static const Ic_secondType IC_SECOND_50 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_50;
  static const Ic_secondType IC_SECOND_51 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_51;
  static const Ic_secondType IC_SECOND_52 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_52;
  static const Ic_secondType IC_SECOND_53 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_53;
  static const Ic_secondType IC_SECOND_54 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_54;
  static const Ic_secondType IC_SECOND_55 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_55;
  static const Ic_secondType IC_SECOND_56 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_56;
  static const Ic_secondType IC_SECOND_57 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_57;
  static const Ic_secondType IC_SECOND_58 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_58;
  static const Ic_secondType IC_SECOND_59 =
    Gw_ic_time_0x581_581_Ic_secondType_IC_SECOND_59;
  static inline bool Ic_secondType_IsValid(int value) {
    return Gw_ic_time_0x581_581_Ic_secondType_IsValid(value);
  }
  static const Ic_secondType Ic_secondType_MIN =
    Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_MIN;
  static const Ic_secondType Ic_secondType_MAX =
    Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_MAX;
  static const int Ic_secondType_ARRAYSIZE =
    Gw_ic_time_0x581_581_Ic_secondType_Ic_secondType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_secondType_descriptor() {
    return Gw_ic_time_0x581_581_Ic_secondType_descriptor();
  }
  static inline const ::std::string& Ic_secondType_Name(Ic_secondType value) {
    return Gw_ic_time_0x581_581_Ic_secondType_Name(value);
  }
  static inline bool Ic_secondType_Parse(const ::std::string& name,
      Ic_secondType* value) {
    return Gw_ic_time_0x581_581_Ic_secondType_Parse(name, value);
  }

  typedef Gw_ic_time_0x581_581_Ic_yearType Ic_yearType;
  static const Ic_yearType IC_YEAR_2019 =
    Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2019;
  static const Ic_yearType IC_YEAR_2020 =
    Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2020;
  static const Ic_yearType IC_YEAR_2021 =
    Gw_ic_time_0x581_581_Ic_yearType_IC_YEAR_2021;
  static inline bool Ic_yearType_IsValid(int value) {
    return Gw_ic_time_0x581_581_Ic_yearType_IsValid(value);
  }
  static const Ic_yearType Ic_yearType_MIN =
    Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_MIN;
  static const Ic_yearType Ic_yearType_MAX =
    Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_MAX;
  static const int Ic_yearType_ARRAYSIZE =
    Gw_ic_time_0x581_581_Ic_yearType_Ic_yearType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ic_yearType_descriptor() {
    return Gw_ic_time_0x581_581_Ic_yearType_descriptor();
  }
  static inline const ::std::string& Ic_yearType_Name(Ic_yearType value) {
    return Gw_ic_time_0x581_581_Ic_yearType_Name(value);
  }
  static inline bool Ic_yearType_Parse(const ::std::string& name,
      Ic_yearType* value) {
    return Gw_ic_time_0x581_581_Ic_yearType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
  bool has_ic_month() const;
  void clear_ic_month();
  static const int kIcMonthFieldNumber = 1;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType ic_month() const;
  void set_ic_month(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType value);

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
  bool has_ic_date() const;
  void clear_ic_date();
  static const int kIcDateFieldNumber = 2;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType ic_date() const;
  void set_ic_date(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType value);

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
  bool has_ic_hour() const;
  void clear_ic_hour();
  static const int kIcHourFieldNumber = 3;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType ic_hour() const;
  void set_ic_hour(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType value);

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
  bool has_ic_minute() const;
  void clear_ic_minute();
  static const int kIcMinuteFieldNumber = 4;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType ic_minute() const;
  void set_ic_minute(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType value);

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
  bool has_ic_second() const;
  void clear_ic_second();
  static const int kIcSecondFieldNumber = 5;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType ic_second() const;
  void set_ic_second(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType value);

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
  bool has_ic_year() const;
  void clear_ic_year();
  static const int kIcYearFieldNumber = 6;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType ic_year() const;
  void set_ic_year(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_ic_time_0x581_581)
 private:
  void set_has_ic_month();
  void clear_has_ic_month();
  void set_has_ic_date();
  void clear_has_ic_date();
  void set_has_ic_hour();
  void clear_has_ic_hour();
  void set_has_ic_minute();
  void clear_has_ic_minute();
  void set_has_ic_second();
  void clear_has_ic_second();
  void set_has_ic_year();
  void clear_has_ic_year();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int ic_month_;
  int ic_date_;
  int ic_hour_;
  int ic_minute_;
  int ic_second_;
  int ic_year_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Afs_0x5a0_5a0 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Afs_0x5a0_5a0) */ {
 public:
  Afs_0x5a0_5a0();
  virtual ~Afs_0x5a0_5a0();

  Afs_0x5a0_5a0(const Afs_0x5a0_5a0& from);

  inline Afs_0x5a0_5a0& operator=(const Afs_0x5a0_5a0& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Afs_0x5a0_5a0& default_instance();

  static inline const Afs_0x5a0_5a0* internal_default_instance() {
    return reinterpret_cast<const Afs_0x5a0_5a0*>(
               &_Afs_0x5a0_5a0_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(Afs_0x5a0_5a0* other);

  // implements Message ----------------------------------------------

  inline Afs_0x5a0_5a0* New() const PROTOBUF_FINAL { return New(NULL); }

  Afs_0x5a0_5a0* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Afs_0x5a0_5a0& from);
  void MergeFrom(const Afs_0x5a0_5a0& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Afs_0x5a0_5a0* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Afs_0x5a0_5a0_Afs_work_stsType Afs_work_stsType;
  static const Afs_work_stsType AFS_WORK_STS_OFF =
    Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_OFF;
  static const Afs_work_stsType AFS_WORK_STS_ON =
    Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_ON;
  static const Afs_work_stsType AFS_WORK_STS_ERROR =
    Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_ERROR;
  static const Afs_work_stsType AFS_WORK_STS_NOT_CALIBRATION =
    Afs_0x5a0_5a0_Afs_work_stsType_AFS_WORK_STS_NOT_CALIBRATION;
  static inline bool Afs_work_stsType_IsValid(int value) {
    return Afs_0x5a0_5a0_Afs_work_stsType_IsValid(value);
  }
  static const Afs_work_stsType Afs_work_stsType_MIN =
    Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_MIN;
  static const Afs_work_stsType Afs_work_stsType_MAX =
    Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_MAX;
  static const int Afs_work_stsType_ARRAYSIZE =
    Afs_0x5a0_5a0_Afs_work_stsType_Afs_work_stsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Afs_work_stsType_descriptor() {
    return Afs_0x5a0_5a0_Afs_work_stsType_descriptor();
  }
  static inline const ::std::string& Afs_work_stsType_Name(Afs_work_stsType value) {
    return Afs_0x5a0_5a0_Afs_work_stsType_Name(value);
  }
  static inline bool Afs_work_stsType_Parse(const ::std::string& name,
      Afs_work_stsType* value) {
    return Afs_0x5a0_5a0_Afs_work_stsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
  bool has_afs_work_sts() const;
  void clear_afs_work_sts();
  static const int kAfsWorkStsFieldNumber = 1;
  ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType afs_work_sts() const;
  void set_afs_work_sts(::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Afs_0x5a0_5a0)
 private:
  void set_has_afs_work_sts();
  void clear_has_afs_work_sts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int afs_work_sts_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sod_nm_0x440_440 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Sod_nm_0x440_440) */ {
 public:
  Sod_nm_0x440_440();
  virtual ~Sod_nm_0x440_440();

  Sod_nm_0x440_440(const Sod_nm_0x440_440& from);

  inline Sod_nm_0x440_440& operator=(const Sod_nm_0x440_440& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sod_nm_0x440_440& default_instance();

  static inline const Sod_nm_0x440_440* internal_default_instance() {
    return reinterpret_cast<const Sod_nm_0x440_440*>(
               &_Sod_nm_0x440_440_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(Sod_nm_0x440_440* other);

  // implements Message ----------------------------------------------

  inline Sod_nm_0x440_440* New() const PROTOBUF_FINAL { return New(NULL); }

  Sod_nm_0x440_440* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sod_nm_0x440_440& from);
  void MergeFrom(const Sod_nm_0x440_440& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sod_nm_0x440_440* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Sod_nm_0x440_440_SodnmlimphomeType SodnmlimphomeType;
  static const SodnmlimphomeType SODNMLIMPHOME_NOT_ACTIVE =
    Sod_nm_0x440_440_SodnmlimphomeType_SODNMLIMPHOME_NOT_ACTIVE;
  static const SodnmlimphomeType SODNMLIMPHOME_ACTIVE =
    Sod_nm_0x440_440_SodnmlimphomeType_SODNMLIMPHOME_ACTIVE;
  static inline bool SodnmlimphomeType_IsValid(int value) {
    return Sod_nm_0x440_440_SodnmlimphomeType_IsValid(value);
  }
  static const SodnmlimphomeType SodnmlimphomeType_MIN =
    Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_MIN;
  static const SodnmlimphomeType SodnmlimphomeType_MAX =
    Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_MAX;
  static const int SodnmlimphomeType_ARRAYSIZE =
    Sod_nm_0x440_440_SodnmlimphomeType_SodnmlimphomeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SodnmlimphomeType_descriptor() {
    return Sod_nm_0x440_440_SodnmlimphomeType_descriptor();
  }
  static inline const ::std::string& SodnmlimphomeType_Name(SodnmlimphomeType value) {
    return Sod_nm_0x440_440_SodnmlimphomeType_Name(value);
  }
  static inline bool SodnmlimphomeType_Parse(const ::std::string& name,
      SodnmlimphomeType* value) {
    return Sod_nm_0x440_440_SodnmlimphomeType_Parse(name, value);
  }

  typedef Sod_nm_0x440_440_SodnmsleepindType SodnmsleepindType;
  static const SodnmsleepindType SODNMSLEEPIND_NOT_ACTIVE =
    Sod_nm_0x440_440_SodnmsleepindType_SODNMSLEEPIND_NOT_ACTIVE;
  static const SodnmsleepindType SODNMSLEEPIND_ACTIVE =
    Sod_nm_0x440_440_SodnmsleepindType_SODNMSLEEPIND_ACTIVE;
  static inline bool SodnmsleepindType_IsValid(int value) {
    return Sod_nm_0x440_440_SodnmsleepindType_IsValid(value);
  }
  static const SodnmsleepindType SodnmsleepindType_MIN =
    Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_MIN;
  static const SodnmsleepindType SodnmsleepindType_MAX =
    Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_MAX;
  static const int SodnmsleepindType_ARRAYSIZE =
    Sod_nm_0x440_440_SodnmsleepindType_SodnmsleepindType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SodnmsleepindType_descriptor() {
    return Sod_nm_0x440_440_SodnmsleepindType_descriptor();
  }
  static inline const ::std::string& SodnmsleepindType_Name(SodnmsleepindType value) {
    return Sod_nm_0x440_440_SodnmsleepindType_Name(value);
  }
  static inline bool SodnmsleepindType_Parse(const ::std::string& name,
      SodnmsleepindType* value) {
    return Sod_nm_0x440_440_SodnmsleepindType_Parse(name, value);
  }

  typedef Sod_nm_0x440_440_SodnmsleepackType SodnmsleepackType;
  static const SodnmsleepackType SODNMSLEEPACK_NOT_ACTIVE =
    Sod_nm_0x440_440_SodnmsleepackType_SODNMSLEEPACK_NOT_ACTIVE;
  static const SodnmsleepackType SODNMSLEEPACK_ACTIVE =
    Sod_nm_0x440_440_SodnmsleepackType_SODNMSLEEPACK_ACTIVE;
  static inline bool SodnmsleepackType_IsValid(int value) {
    return Sod_nm_0x440_440_SodnmsleepackType_IsValid(value);
  }
  static const SodnmsleepackType SodnmsleepackType_MIN =
    Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_MIN;
  static const SodnmsleepackType SodnmsleepackType_MAX =
    Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_MAX;
  static const int SodnmsleepackType_ARRAYSIZE =
    Sod_nm_0x440_440_SodnmsleepackType_SodnmsleepackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SodnmsleepackType_descriptor() {
    return Sod_nm_0x440_440_SodnmsleepackType_descriptor();
  }
  static inline const ::std::string& SodnmsleepackType_Name(SodnmsleepackType value) {
    return Sod_nm_0x440_440_SodnmsleepackType_Name(value);
  }
  static inline bool SodnmsleepackType_Parse(const ::std::string& name,
      SodnmsleepackType* value) {
    return Sod_nm_0x440_440_SodnmsleepackType_Parse(name, value);
  }

  typedef Sod_nm_0x440_440_SodnmaliveType SodnmaliveType;
  static const SodnmaliveType SODNMALIVE_NOT_ACTIVE =
    Sod_nm_0x440_440_SodnmaliveType_SODNMALIVE_NOT_ACTIVE;
  static const SodnmaliveType SODNMALIVE_ACTIVE =
    Sod_nm_0x440_440_SodnmaliveType_SODNMALIVE_ACTIVE;
  static inline bool SodnmaliveType_IsValid(int value) {
    return Sod_nm_0x440_440_SodnmaliveType_IsValid(value);
  }
  static const SodnmaliveType SodnmaliveType_MIN =
    Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_MIN;
  static const SodnmaliveType SodnmaliveType_MAX =
    Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_MAX;
  static const int SodnmaliveType_ARRAYSIZE =
    Sod_nm_0x440_440_SodnmaliveType_SodnmaliveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SodnmaliveType_descriptor() {
    return Sod_nm_0x440_440_SodnmaliveType_descriptor();
  }
  static inline const ::std::string& SodnmaliveType_Name(SodnmaliveType value) {
    return Sod_nm_0x440_440_SodnmaliveType_Name(value);
  }
  static inline bool SodnmaliveType_Parse(const ::std::string& name,
      SodnmaliveType* value) {
    return Sod_nm_0x440_440_SodnmaliveType_Parse(name, value);
  }

  typedef Sod_nm_0x440_440_SodnmringType SodnmringType;
  static const SodnmringType SODNMRING_NOT_ACTIVE =
    Sod_nm_0x440_440_SodnmringType_SODNMRING_NOT_ACTIVE;
  static const SodnmringType SODNMRING_ACTIVE =
    Sod_nm_0x440_440_SodnmringType_SODNMRING_ACTIVE;
  static inline bool SodnmringType_IsValid(int value) {
    return Sod_nm_0x440_440_SodnmringType_IsValid(value);
  }
  static const SodnmringType SodnmringType_MIN =
    Sod_nm_0x440_440_SodnmringType_SodnmringType_MIN;
  static const SodnmringType SodnmringType_MAX =
    Sod_nm_0x440_440_SodnmringType_SodnmringType_MAX;
  static const int SodnmringType_ARRAYSIZE =
    Sod_nm_0x440_440_SodnmringType_SodnmringType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SodnmringType_descriptor() {
    return Sod_nm_0x440_440_SodnmringType_descriptor();
  }
  static inline const ::std::string& SodnmringType_Name(SodnmringType value) {
    return Sod_nm_0x440_440_SodnmringType_Name(value);
  }
  static inline bool SodnmringType_Parse(const ::std::string& name,
      SodnmringType* value) {
    return Sod_nm_0x440_440_SodnmringType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
  bool has_sodnmlimphome() const;
  void clear_sodnmlimphome();
  static const int kSodnmlimphomeFieldNumber = 1;
  ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType sodnmlimphome() const;
  void set_sodnmlimphome(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType value);

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
  bool has_sodnmsleepind() const;
  void clear_sodnmsleepind();
  static const int kSodnmsleepindFieldNumber = 2;
  ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType sodnmsleepind() const;
  void set_sodnmsleepind(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType value);

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
  bool has_sodnmsleepack() const;
  void clear_sodnmsleepack();
  static const int kSodnmsleepackFieldNumber = 3;
  ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType sodnmsleepack() const;
  void set_sodnmsleepack(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType value);

  // optional int32 sodnmdestaddr = 4;
  bool has_sodnmdestaddr() const;
  void clear_sodnmdestaddr();
  static const int kSodnmdestaddrFieldNumber = 4;
  ::google::protobuf::int32 sodnmdestaddr() const;
  void set_sodnmdestaddr(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
  bool has_sodnmalive() const;
  void clear_sodnmalive();
  static const int kSodnmaliveFieldNumber = 5;
  ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType sodnmalive() const;
  void set_sodnmalive(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType value);

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
  bool has_sodnmring() const;
  void clear_sodnmring();
  static const int kSodnmringFieldNumber = 6;
  ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType sodnmring() const;
  void set_sodnmring(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Sod_nm_0x440_440)
 private:
  void set_has_sodnmlimphome();
  void clear_has_sodnmlimphome();
  void set_has_sodnmsleepind();
  void clear_has_sodnmsleepind();
  void set_has_sodnmsleepack();
  void clear_has_sodnmsleepack();
  void set_has_sodnmdestaddr();
  void clear_has_sodnmdestaddr();
  void set_has_sodnmalive();
  void clear_has_sodnmalive();
  void set_has_sodnmring();
  void clear_has_sodnmring();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int sodnmlimphome_;
  int sodnmsleepind_;
  int sodnmsleepack_;
  ::google::protobuf::int32 sodnmdestaddr_;
  int sodnmalive_;
  int sodnmring_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_nm_0x460_460 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_nm_0x460_460) */ {
 public:
  Gw_nm_0x460_460();
  virtual ~Gw_nm_0x460_460();

  Gw_nm_0x460_460(const Gw_nm_0x460_460& from);

  inline Gw_nm_0x460_460& operator=(const Gw_nm_0x460_460& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_nm_0x460_460& default_instance();

  static inline const Gw_nm_0x460_460* internal_default_instance() {
    return reinterpret_cast<const Gw_nm_0x460_460*>(
               &_Gw_nm_0x460_460_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(Gw_nm_0x460_460* other);

  // implements Message ----------------------------------------------

  inline Gw_nm_0x460_460* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_nm_0x460_460* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_nm_0x460_460& from);
  void MergeFrom(const Gw_nm_0x460_460& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_nm_0x460_460* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_nm_0x460_460_GwnmlimphomeType GwnmlimphomeType;
  static const GwnmlimphomeType GWNMLIMPHOME_NOT_ACTIVE =
    Gw_nm_0x460_460_GwnmlimphomeType_GWNMLIMPHOME_NOT_ACTIVE;
  static const GwnmlimphomeType GWNMLIMPHOME_ACTIVE =
    Gw_nm_0x460_460_GwnmlimphomeType_GWNMLIMPHOME_ACTIVE;
  static inline bool GwnmlimphomeType_IsValid(int value) {
    return Gw_nm_0x460_460_GwnmlimphomeType_IsValid(value);
  }
  static const GwnmlimphomeType GwnmlimphomeType_MIN =
    Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_MIN;
  static const GwnmlimphomeType GwnmlimphomeType_MAX =
    Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_MAX;
  static const int GwnmlimphomeType_ARRAYSIZE =
    Gw_nm_0x460_460_GwnmlimphomeType_GwnmlimphomeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GwnmlimphomeType_descriptor() {
    return Gw_nm_0x460_460_GwnmlimphomeType_descriptor();
  }
  static inline const ::std::string& GwnmlimphomeType_Name(GwnmlimphomeType value) {
    return Gw_nm_0x460_460_GwnmlimphomeType_Name(value);
  }
  static inline bool GwnmlimphomeType_Parse(const ::std::string& name,
      GwnmlimphomeType* value) {
    return Gw_nm_0x460_460_GwnmlimphomeType_Parse(name, value);
  }

  typedef Gw_nm_0x460_460_GwnmsleepindType GwnmsleepindType;
  static const GwnmsleepindType GWNMSLEEPIND_NOT_ACTIVE =
    Gw_nm_0x460_460_GwnmsleepindType_GWNMSLEEPIND_NOT_ACTIVE;
  static const GwnmsleepindType GWNMSLEEPIND_ACTIVE =
    Gw_nm_0x460_460_GwnmsleepindType_GWNMSLEEPIND_ACTIVE;
  static inline bool GwnmsleepindType_IsValid(int value) {
    return Gw_nm_0x460_460_GwnmsleepindType_IsValid(value);
  }
  static const GwnmsleepindType GwnmsleepindType_MIN =
    Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_MIN;
  static const GwnmsleepindType GwnmsleepindType_MAX =
    Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_MAX;
  static const int GwnmsleepindType_ARRAYSIZE =
    Gw_nm_0x460_460_GwnmsleepindType_GwnmsleepindType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GwnmsleepindType_descriptor() {
    return Gw_nm_0x460_460_GwnmsleepindType_descriptor();
  }
  static inline const ::std::string& GwnmsleepindType_Name(GwnmsleepindType value) {
    return Gw_nm_0x460_460_GwnmsleepindType_Name(value);
  }
  static inline bool GwnmsleepindType_Parse(const ::std::string& name,
      GwnmsleepindType* value) {
    return Gw_nm_0x460_460_GwnmsleepindType_Parse(name, value);
  }

  typedef Gw_nm_0x460_460_GwnmsleepackType GwnmsleepackType;
  static const GwnmsleepackType GWNMSLEEPACK_NOT_ACTIVE =
    Gw_nm_0x460_460_GwnmsleepackType_GWNMSLEEPACK_NOT_ACTIVE;
  static const GwnmsleepackType GWNMSLEEPACK_ACTIVE =
    Gw_nm_0x460_460_GwnmsleepackType_GWNMSLEEPACK_ACTIVE;
  static inline bool GwnmsleepackType_IsValid(int value) {
    return Gw_nm_0x460_460_GwnmsleepackType_IsValid(value);
  }
  static const GwnmsleepackType GwnmsleepackType_MIN =
    Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_MIN;
  static const GwnmsleepackType GwnmsleepackType_MAX =
    Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_MAX;
  static const int GwnmsleepackType_ARRAYSIZE =
    Gw_nm_0x460_460_GwnmsleepackType_GwnmsleepackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GwnmsleepackType_descriptor() {
    return Gw_nm_0x460_460_GwnmsleepackType_descriptor();
  }
  static inline const ::std::string& GwnmsleepackType_Name(GwnmsleepackType value) {
    return Gw_nm_0x460_460_GwnmsleepackType_Name(value);
  }
  static inline bool GwnmsleepackType_Parse(const ::std::string& name,
      GwnmsleepackType* value) {
    return Gw_nm_0x460_460_GwnmsleepackType_Parse(name, value);
  }

  typedef Gw_nm_0x460_460_GwnmaliveType GwnmaliveType;
  static const GwnmaliveType GWNMALIVE_NOT_ACTIVE =
    Gw_nm_0x460_460_GwnmaliveType_GWNMALIVE_NOT_ACTIVE;
  static const GwnmaliveType GWNMALIVE_ACTIVE =
    Gw_nm_0x460_460_GwnmaliveType_GWNMALIVE_ACTIVE;
  static inline bool GwnmaliveType_IsValid(int value) {
    return Gw_nm_0x460_460_GwnmaliveType_IsValid(value);
  }
  static const GwnmaliveType GwnmaliveType_MIN =
    Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_MIN;
  static const GwnmaliveType GwnmaliveType_MAX =
    Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_MAX;
  static const int GwnmaliveType_ARRAYSIZE =
    Gw_nm_0x460_460_GwnmaliveType_GwnmaliveType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GwnmaliveType_descriptor() {
    return Gw_nm_0x460_460_GwnmaliveType_descriptor();
  }
  static inline const ::std::string& GwnmaliveType_Name(GwnmaliveType value) {
    return Gw_nm_0x460_460_GwnmaliveType_Name(value);
  }
  static inline bool GwnmaliveType_Parse(const ::std::string& name,
      GwnmaliveType* value) {
    return Gw_nm_0x460_460_GwnmaliveType_Parse(name, value);
  }

  typedef Gw_nm_0x460_460_GwnmringType GwnmringType;
  static const GwnmringType GWNMRING_NOT_ACTIVE =
    Gw_nm_0x460_460_GwnmringType_GWNMRING_NOT_ACTIVE;
  static const GwnmringType GWNMRING_ACTIVE =
    Gw_nm_0x460_460_GwnmringType_GWNMRING_ACTIVE;
  static inline bool GwnmringType_IsValid(int value) {
    return Gw_nm_0x460_460_GwnmringType_IsValid(value);
  }
  static const GwnmringType GwnmringType_MIN =
    Gw_nm_0x460_460_GwnmringType_GwnmringType_MIN;
  static const GwnmringType GwnmringType_MAX =
    Gw_nm_0x460_460_GwnmringType_GwnmringType_MAX;
  static const int GwnmringType_ARRAYSIZE =
    Gw_nm_0x460_460_GwnmringType_GwnmringType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GwnmringType_descriptor() {
    return Gw_nm_0x460_460_GwnmringType_descriptor();
  }
  static inline const ::std::string& GwnmringType_Name(GwnmringType value) {
    return Gw_nm_0x460_460_GwnmringType_Name(value);
  }
  static inline bool GwnmringType_Parse(const ::std::string& name,
      GwnmringType* value) {
    return Gw_nm_0x460_460_GwnmringType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
  bool has_gwnmlimphome() const;
  void clear_gwnmlimphome();
  static const int kGwnmlimphomeFieldNumber = 1;
  ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType gwnmlimphome() const;
  void set_gwnmlimphome(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType value);

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
  bool has_gwnmsleepind() const;
  void clear_gwnmsleepind();
  static const int kGwnmsleepindFieldNumber = 2;
  ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType gwnmsleepind() const;
  void set_gwnmsleepind(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType value);

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
  bool has_gwnmsleepack() const;
  void clear_gwnmsleepack();
  static const int kGwnmsleepackFieldNumber = 3;
  ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType gwnmsleepack() const;
  void set_gwnmsleepack(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType value);

  // optional int32 gwnmdestaddr = 4;
  bool has_gwnmdestaddr() const;
  void clear_gwnmdestaddr();
  static const int kGwnmdestaddrFieldNumber = 4;
  ::google::protobuf::int32 gwnmdestaddr() const;
  void set_gwnmdestaddr(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
  bool has_gwnmalive() const;
  void clear_gwnmalive();
  static const int kGwnmaliveFieldNumber = 5;
  ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType gwnmalive() const;
  void set_gwnmalive(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType value);

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
  bool has_gwnmring() const;
  void clear_gwnmring();
  static const int kGwnmringFieldNumber = 6;
  ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType gwnmring() const;
  void set_gwnmring(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_nm_0x460_460)
 private:
  void set_has_gwnmlimphome();
  void clear_has_gwnmlimphome();
  void set_has_gwnmsleepind();
  void clear_has_gwnmsleepind();
  void set_has_gwnmsleepack();
  void clear_has_gwnmsleepack();
  void set_has_gwnmdestaddr();
  void clear_has_gwnmdestaddr();
  void set_has_gwnmalive();
  void clear_has_gwnmalive();
  void set_has_gwnmring();
  void clear_has_gwnmring();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int gwnmlimphome_;
  int gwnmsleepind_;
  int gwnmsleepack_;
  ::google::protobuf::int32 gwnmdestaddr_;
  int gwnmalive_;
  int gwnmring_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Eps_0x260_260 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Eps_0x260_260) */ {
 public:
  Eps_0x260_260();
  virtual ~Eps_0x260_260();

  Eps_0x260_260(const Eps_0x260_260& from);

  inline Eps_0x260_260& operator=(const Eps_0x260_260& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Eps_0x260_260& default_instance();

  static inline const Eps_0x260_260* internal_default_instance() {
    return reinterpret_cast<const Eps_0x260_260*>(
               &_Eps_0x260_260_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(Eps_0x260_260* other);

  // implements Message ----------------------------------------------

  inline Eps_0x260_260* New() const PROTOBUF_FINAL { return New(NULL); }

  Eps_0x260_260* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Eps_0x260_260& from);
  void MergeFrom(const Eps_0x260_260& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Eps_0x260_260* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_sassoftlimitrightflgType;
  static const Eps_sassoftlimitrightflgType EPS_SASSOFTLIMITRIGHTFLG_NO_LEARNED =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_NO_LEARNED;
  static const Eps_sassoftlimitrightflgType EPS_SASSOFTLIMITRIGHTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS;
  static const Eps_sassoftlimitrightflgType EPS_SASSOFTLIMITRIGHTFLG_LEARNED =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_LEARNED;
  static const Eps_sassoftlimitrightflgType EPS_SASSOFTLIMITRIGHTFLG_RESERVED =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_EPS_SASSOFTLIMITRIGHTFLG_RESERVED;
  static inline bool Eps_sassoftlimitrightflgType_IsValid(int value) {
    return Eps_0x260_260_Eps_sassoftlimitrightflgType_IsValid(value);
  }
  static const Eps_sassoftlimitrightflgType Eps_sassoftlimitrightflgType_MIN =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_MIN;
  static const Eps_sassoftlimitrightflgType Eps_sassoftlimitrightflgType_MAX =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_MAX;
  static const int Eps_sassoftlimitrightflgType_ARRAYSIZE =
    Eps_0x260_260_Eps_sassoftlimitrightflgType_Eps_sassoftlimitrightflgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_sassoftlimitrightflgType_descriptor() {
    return Eps_0x260_260_Eps_sassoftlimitrightflgType_descriptor();
  }
  static inline const ::std::string& Eps_sassoftlimitrightflgType_Name(Eps_sassoftlimitrightflgType value) {
    return Eps_0x260_260_Eps_sassoftlimitrightflgType_Name(value);
  }
  static inline bool Eps_sassoftlimitrightflgType_Parse(const ::std::string& name,
      Eps_sassoftlimitrightflgType* value) {
    return Eps_0x260_260_Eps_sassoftlimitrightflgType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_st_emergencypowerlimitType;
  static const Eps_st_emergencypowerlimitType EPS_ST_EMERGENCYPOWERLIMIT_NORMAL =
    Eps_0x260_260_Eps_st_emergencypowerlimitType_EPS_ST_EMERGENCYPOWERLIMIT_NORMAL;
  static const Eps_st_emergencypowerlimitType EPS_ST_EMERGENCYPOWERLIMIT_POWER_DENSITY_LIMIT =
    Eps_0x260_260_Eps_st_emergencypowerlimitType_EPS_ST_EMERGENCYPOWERLIMIT_POWER_DENSITY_LIMIT;
  static inline bool Eps_st_emergencypowerlimitType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencypowerlimitType_IsValid(value);
  }
  static const Eps_st_emergencypowerlimitType Eps_st_emergencypowerlimitType_MIN =
    Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_MIN;
  static const Eps_st_emergencypowerlimitType Eps_st_emergencypowerlimitType_MAX =
    Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_MAX;
  static const int Eps_st_emergencypowerlimitType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencypowerlimitType_Eps_st_emergencypowerlimitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencypowerlimitType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencypowerlimitType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencypowerlimitType_Name(Eps_st_emergencypowerlimitType value) {
    return Eps_0x260_260_Eps_st_emergencypowerlimitType_Name(value);
  }
  static inline bool Eps_st_emergencypowerlimitType_Parse(const ::std::string& name,
      Eps_st_emergencypowerlimitType* value) {
    return Eps_0x260_260_Eps_st_emergencypowerlimitType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencymotorType Eps_st_emergencymotorType;
  static const Eps_st_emergencymotorType EPS_ST_EMERGENCYMOTOR_NORMAL =
    Eps_0x260_260_Eps_st_emergencymotorType_EPS_ST_EMERGENCYMOTOR_NORMAL;
  static const Eps_st_emergencymotorType EPS_ST_EMERGENCYMOTOR_SERVO_MOTOR_FAULT =
    Eps_0x260_260_Eps_st_emergencymotorType_EPS_ST_EMERGENCYMOTOR_SERVO_MOTOR_FAULT;
  static inline bool Eps_st_emergencymotorType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencymotorType_IsValid(value);
  }
  static const Eps_st_emergencymotorType Eps_st_emergencymotorType_MIN =
    Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_MIN;
  static const Eps_st_emergencymotorType Eps_st_emergencymotorType_MAX =
    Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_MAX;
  static const int Eps_st_emergencymotorType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencymotorType_Eps_st_emergencymotorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencymotorType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencymotorType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencymotorType_Name(Eps_st_emergencymotorType value) {
    return Eps_0x260_260_Eps_st_emergencymotorType_Name(value);
  }
  static inline bool Eps_st_emergencymotorType_Parse(const ::std::string& name,
      Eps_st_emergencymotorType* value) {
    return Eps_0x260_260_Eps_st_emergencymotorType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencyecuType Eps_st_emergencyecuType;
  static const Eps_st_emergencyecuType EPS_ST_EMERGENCYECU_NORMAL =
    Eps_0x260_260_Eps_st_emergencyecuType_EPS_ST_EMERGENCYECU_NORMAL;
  static const Eps_st_emergencyecuType EPS_ST_EMERGENCYECU_ECU_INNER_FAULT =
    Eps_0x260_260_Eps_st_emergencyecuType_EPS_ST_EMERGENCYECU_ECU_INNER_FAULT;
  static inline bool Eps_st_emergencyecuType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencyecuType_IsValid(value);
  }
  static const Eps_st_emergencyecuType Eps_st_emergencyecuType_MIN =
    Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_MIN;
  static const Eps_st_emergencyecuType Eps_st_emergencyecuType_MAX =
    Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_MAX;
  static const int Eps_st_emergencyecuType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencyecuType_Eps_st_emergencyecuType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencyecuType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencyecuType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencyecuType_Name(Eps_st_emergencyecuType value) {
    return Eps_0x260_260_Eps_st_emergencyecuType_Name(value);
  }
  static inline bool Eps_st_emergencyecuType_Parse(const ::std::string& name,
      Eps_st_emergencyecuType* value) {
    return Eps_0x260_260_Eps_st_emergencyecuType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_st_emergencycaninterfaceType;
  static const Eps_st_emergencycaninterfaceType EPS_ST_EMERGENCYCANINTERFACE_NORMAL =
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_EPS_ST_EMERGENCYCANINTERFACE_NORMAL;
  static const Eps_st_emergencycaninterfaceType EPS_ST_EMERGENCYCANINTERFACE_CAN_INTERFACE_IS_FAULT =
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_EPS_ST_EMERGENCYCANINTERFACE_CAN_INTERFACE_IS_FAULT;
  static inline bool Eps_st_emergencycaninterfaceType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencycaninterfaceType_IsValid(value);
  }
  static const Eps_st_emergencycaninterfaceType Eps_st_emergencycaninterfaceType_MIN =
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_MIN;
  static const Eps_st_emergencycaninterfaceType Eps_st_emergencycaninterfaceType_MAX =
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_MAX;
  static const int Eps_st_emergencycaninterfaceType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencycaninterfaceType_Eps_st_emergencycaninterfaceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencycaninterfaceType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencycaninterfaceType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencycaninterfaceType_Name(Eps_st_emergencycaninterfaceType value) {
    return Eps_0x260_260_Eps_st_emergencycaninterfaceType_Name(value);
  }
  static inline bool Eps_st_emergencycaninterfaceType_Parse(const ::std::string& name,
      Eps_st_emergencycaninterfaceType* value) {
    return Eps_0x260_260_Eps_st_emergencycaninterfaceType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencysensorType Eps_st_emergencysensorType;
  static const Eps_st_emergencysensorType EPS_ST_EMERGENCYSENSOR_NORMAL =
    Eps_0x260_260_Eps_st_emergencysensorType_EPS_ST_EMERGENCYSENSOR_NORMAL;
  static const Eps_st_emergencysensorType EPS_ST_EMERGENCYSENSOR_SENSOR_IS_FAULT =
    Eps_0x260_260_Eps_st_emergencysensorType_EPS_ST_EMERGENCYSENSOR_SENSOR_IS_FAULT;
  static inline bool Eps_st_emergencysensorType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencysensorType_IsValid(value);
  }
  static const Eps_st_emergencysensorType Eps_st_emergencysensorType_MIN =
    Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_MIN;
  static const Eps_st_emergencysensorType Eps_st_emergencysensorType_MAX =
    Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_MAX;
  static const int Eps_st_emergencysensorType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencysensorType_Eps_st_emergencysensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencysensorType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencysensorType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencysensorType_Name(Eps_st_emergencysensorType value) {
    return Eps_0x260_260_Eps_st_emergencysensorType_Name(value);
  }
  static inline bool Eps_st_emergencysensorType_Parse(const ::std::string& name,
      Eps_st_emergencysensorType* value) {
    return Eps_0x260_260_Eps_st_emergencysensorType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencyovertempType Eps_st_emergencyovertempType;
  static const Eps_st_emergencyovertempType EPS_ST_EMERGENCYOVERTEMP_NORMAL =
    Eps_0x260_260_Eps_st_emergencyovertempType_EPS_ST_EMERGENCYOVERTEMP_NORMAL;
  static const Eps_st_emergencyovertempType EPS_ST_EMERGENCYOVERTEMP_OVER_TEMPERATURE =
    Eps_0x260_260_Eps_st_emergencyovertempType_EPS_ST_EMERGENCYOVERTEMP_OVER_TEMPERATURE;
  static inline bool Eps_st_emergencyovertempType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencyovertempType_IsValid(value);
  }
  static const Eps_st_emergencyovertempType Eps_st_emergencyovertempType_MIN =
    Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_MIN;
  static const Eps_st_emergencyovertempType Eps_st_emergencyovertempType_MAX =
    Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_MAX;
  static const int Eps_st_emergencyovertempType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencyovertempType_Eps_st_emergencyovertempType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencyovertempType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencyovertempType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencyovertempType_Name(Eps_st_emergencyovertempType value) {
    return Eps_0x260_260_Eps_st_emergencyovertempType_Name(value);
  }
  static inline bool Eps_st_emergencyovertempType_Parse(const ::std::string& name,
      Eps_st_emergencyovertempType* value) {
    return Eps_0x260_260_Eps_st_emergencyovertempType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_st_emergencyovervoltageType;
  static const Eps_st_emergencyovervoltageType EPS_ST_EMERGENCYOVERVOLTAGE_NORMAL =
    Eps_0x260_260_Eps_st_emergencyovervoltageType_EPS_ST_EMERGENCYOVERVOLTAGE_NORMAL;
  static const Eps_st_emergencyovervoltageType EPS_ST_EMERGENCYOVERVOLTAGE_OVER_VOLTAGE =
    Eps_0x260_260_Eps_st_emergencyovervoltageType_EPS_ST_EMERGENCYOVERVOLTAGE_OVER_VOLTAGE;
  static inline bool Eps_st_emergencyovervoltageType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencyovervoltageType_IsValid(value);
  }
  static const Eps_st_emergencyovervoltageType Eps_st_emergencyovervoltageType_MIN =
    Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_MIN;
  static const Eps_st_emergencyovervoltageType Eps_st_emergencyovervoltageType_MAX =
    Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_MAX;
  static const int Eps_st_emergencyovervoltageType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencyovervoltageType_Eps_st_emergencyovervoltageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencyovervoltageType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencyovervoltageType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencyovervoltageType_Name(Eps_st_emergencyovervoltageType value) {
    return Eps_0x260_260_Eps_st_emergencyovervoltageType_Name(value);
  }
  static inline bool Eps_st_emergencyovervoltageType_Parse(const ::std::string& name,
      Eps_st_emergencyovervoltageType* value) {
    return Eps_0x260_260_Eps_st_emergencyovervoltageType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_st_emergencyundervoltageType;
  static const Eps_st_emergencyundervoltageType EPS_ST_EMERGENCYUNDERVOLTAGE_NORMAL =
    Eps_0x260_260_Eps_st_emergencyundervoltageType_EPS_ST_EMERGENCYUNDERVOLTAGE_NORMAL;
  static const Eps_st_emergencyundervoltageType EPS_ST_EMERGENCYUNDERVOLTAGE_UNDER_VOLTAGE =
    Eps_0x260_260_Eps_st_emergencyundervoltageType_EPS_ST_EMERGENCYUNDERVOLTAGE_UNDER_VOLTAGE;
  static inline bool Eps_st_emergencyundervoltageType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_emergencyundervoltageType_IsValid(value);
  }
  static const Eps_st_emergencyundervoltageType Eps_st_emergencyundervoltageType_MIN =
    Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_MIN;
  static const Eps_st_emergencyundervoltageType Eps_st_emergencyundervoltageType_MAX =
    Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_MAX;
  static const int Eps_st_emergencyundervoltageType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_emergencyundervoltageType_Eps_st_emergencyundervoltageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_emergencyundervoltageType_descriptor() {
    return Eps_0x260_260_Eps_st_emergencyundervoltageType_descriptor();
  }
  static inline const ::std::string& Eps_st_emergencyundervoltageType_Name(Eps_st_emergencyundervoltageType value) {
    return Eps_0x260_260_Eps_st_emergencyundervoltageType_Name(value);
  }
  static inline bool Eps_st_emergencyundervoltageType_Parse(const ::std::string& name,
      Eps_st_emergencyundervoltageType* value) {
    return Eps_0x260_260_Eps_st_emergencyundervoltageType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_f_ecutempvalidType Eps_f_ecutempvalidType;
  static const Eps_f_ecutempvalidType EPS_F_ECUTEMPVALID_INVALID =
    Eps_0x260_260_Eps_f_ecutempvalidType_EPS_F_ECUTEMPVALID_INVALID;
  static const Eps_f_ecutempvalidType EPS_F_ECUTEMPVALID_VALID =
    Eps_0x260_260_Eps_f_ecutempvalidType_EPS_F_ECUTEMPVALID_VALID;
  static inline bool Eps_f_ecutempvalidType_IsValid(int value) {
    return Eps_0x260_260_Eps_f_ecutempvalidType_IsValid(value);
  }
  static const Eps_f_ecutempvalidType Eps_f_ecutempvalidType_MIN =
    Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_MIN;
  static const Eps_f_ecutempvalidType Eps_f_ecutempvalidType_MAX =
    Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_MAX;
  static const int Eps_f_ecutempvalidType_ARRAYSIZE =
    Eps_0x260_260_Eps_f_ecutempvalidType_Eps_f_ecutempvalidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_f_ecutempvalidType_descriptor() {
    return Eps_0x260_260_Eps_f_ecutempvalidType_descriptor();
  }
  static inline const ::std::string& Eps_f_ecutempvalidType_Name(Eps_f_ecutempvalidType value) {
    return Eps_0x260_260_Eps_f_ecutempvalidType_Name(value);
  }
  static inline bool Eps_f_ecutempvalidType_Parse(const ::std::string& name,
      Eps_f_ecutempvalidType* value) {
    return Eps_0x260_260_Eps_f_ecutempvalidType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_sassoftlimitleftflgType;
  static const Eps_sassoftlimitleftflgType EPS_SASSOFTLIMITLEFTFLG_NO_LEARNED =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_NO_LEARNED;
  static const Eps_sassoftlimitleftflgType EPS_SASSOFTLIMITLEFTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS;
  static const Eps_sassoftlimitleftflgType EPS_SASSOFTLIMITLEFTFLG_LEARNED =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_LEARNED;
  static const Eps_sassoftlimitleftflgType EPS_SASSOFTLIMITLEFTFLG_RESERVED =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_EPS_SASSOFTLIMITLEFTFLG_RESERVED;
  static inline bool Eps_sassoftlimitleftflgType_IsValid(int value) {
    return Eps_0x260_260_Eps_sassoftlimitleftflgType_IsValid(value);
  }
  static const Eps_sassoftlimitleftflgType Eps_sassoftlimitleftflgType_MIN =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_MIN;
  static const Eps_sassoftlimitleftflgType Eps_sassoftlimitleftflgType_MAX =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_MAX;
  static const int Eps_sassoftlimitleftflgType_ARRAYSIZE =
    Eps_0x260_260_Eps_sassoftlimitleftflgType_Eps_sassoftlimitleftflgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_sassoftlimitleftflgType_descriptor() {
    return Eps_0x260_260_Eps_sassoftlimitleftflgType_descriptor();
  }
  static inline const ::std::string& Eps_sassoftlimitleftflgType_Name(Eps_sassoftlimitleftflgType value) {
    return Eps_0x260_260_Eps_sassoftlimitleftflgType_Name(value);
  }
  static inline bool Eps_sassoftlimitleftflgType_Parse(const ::std::string& name,
      Eps_sassoftlimitleftflgType* value) {
    return Eps_0x260_260_Eps_sassoftlimitleftflgType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_st_dtcflagType Eps_st_dtcflagType;
  static const Eps_st_dtcflagType EPS_ST_DTCFLAG_NO_DTC_EXIST =
    Eps_0x260_260_Eps_st_dtcflagType_EPS_ST_DTCFLAG_NO_DTC_EXIST;
  static const Eps_st_dtcflagType EPS_ST_DTCFLAG_DTC_EXIST =
    Eps_0x260_260_Eps_st_dtcflagType_EPS_ST_DTCFLAG_DTC_EXIST;
  static inline bool Eps_st_dtcflagType_IsValid(int value) {
    return Eps_0x260_260_Eps_st_dtcflagType_IsValid(value);
  }
  static const Eps_st_dtcflagType Eps_st_dtcflagType_MIN =
    Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_MIN;
  static const Eps_st_dtcflagType Eps_st_dtcflagType_MAX =
    Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_MAX;
  static const int Eps_st_dtcflagType_ARRAYSIZE =
    Eps_0x260_260_Eps_st_dtcflagType_Eps_st_dtcflagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_st_dtcflagType_descriptor() {
    return Eps_0x260_260_Eps_st_dtcflagType_descriptor();
  }
  static inline const ::std::string& Eps_st_dtcflagType_Name(Eps_st_dtcflagType value) {
    return Eps_0x260_260_Eps_st_dtcflagType_Name(value);
  }
  static inline bool Eps_st_dtcflagType_Parse(const ::std::string& name,
      Eps_st_dtcflagType* value) {
    return Eps_0x260_260_Eps_st_dtcflagType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_sasindexstsType Eps_sasindexstsType;
  static const Eps_sasindexstsType EPS_SASINDEXSTS_STEERWHEEL_NOT_AT_MIDDLE_POSITION =
    Eps_0x260_260_Eps_sasindexstsType_EPS_SASINDEXSTS_STEERWHEEL_NOT_AT_MIDDLE_POSITION;
  static const Eps_sasindexstsType EPS_SASINDEXSTS_STEERWHEEL_AT_MIDDLE_POSITION =
    Eps_0x260_260_Eps_sasindexstsType_EPS_SASINDEXSTS_STEERWHEEL_AT_MIDDLE_POSITION;
  static inline bool Eps_sasindexstsType_IsValid(int value) {
    return Eps_0x260_260_Eps_sasindexstsType_IsValid(value);
  }
  static const Eps_sasindexstsType Eps_sasindexstsType_MIN =
    Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_MIN;
  static const Eps_sasindexstsType Eps_sasindexstsType_MAX =
    Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_MAX;
  static const int Eps_sasindexstsType_ARRAYSIZE =
    Eps_0x260_260_Eps_sasindexstsType_Eps_sasindexstsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_sasindexstsType_descriptor() {
    return Eps_0x260_260_Eps_sasindexstsType_descriptor();
  }
  static inline const ::std::string& Eps_sasindexstsType_Name(Eps_sasindexstsType value) {
    return Eps_0x260_260_Eps_sasindexstsType_Name(value);
  }
  static inline bool Eps_sasindexstsType_Parse(const ::std::string& name,
      Eps_sasindexstsType* value) {
    return Eps_0x260_260_Eps_sasindexstsType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_s_warninglampyellowType Eps_s_warninglampyellowType;
  static const Eps_s_warninglampyellowType EPS_S_WARNINGLAMPYELLOW_CLOSE =
    Eps_0x260_260_Eps_s_warninglampyellowType_EPS_S_WARNINGLAMPYELLOW_CLOSE;
  static const Eps_s_warninglampyellowType EPS_S_WARNINGLAMPYELLOW_OPEN =
    Eps_0x260_260_Eps_s_warninglampyellowType_EPS_S_WARNINGLAMPYELLOW_OPEN;
  static inline bool Eps_s_warninglampyellowType_IsValid(int value) {
    return Eps_0x260_260_Eps_s_warninglampyellowType_IsValid(value);
  }
  static const Eps_s_warninglampyellowType Eps_s_warninglampyellowType_MIN =
    Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_MIN;
  static const Eps_s_warninglampyellowType Eps_s_warninglampyellowType_MAX =
    Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_MAX;
  static const int Eps_s_warninglampyellowType_ARRAYSIZE =
    Eps_0x260_260_Eps_s_warninglampyellowType_Eps_s_warninglampyellowType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_s_warninglampyellowType_descriptor() {
    return Eps_0x260_260_Eps_s_warninglampyellowType_descriptor();
  }
  static inline const ::std::string& Eps_s_warninglampyellowType_Name(Eps_s_warninglampyellowType value) {
    return Eps_0x260_260_Eps_s_warninglampyellowType_Name(value);
  }
  static inline bool Eps_s_warninglampyellowType_Parse(const ::std::string& name,
      Eps_s_warninglampyellowType* value) {
    return Eps_0x260_260_Eps_s_warninglampyellowType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_s_safelampredType Eps_s_safelampredType;
  static const Eps_s_safelampredType EPS_S_SAFELAMPRED_CLOSE =
    Eps_0x260_260_Eps_s_safelampredType_EPS_S_SAFELAMPRED_CLOSE;
  static const Eps_s_safelampredType EPS_S_SAFELAMPRED_OPEN =
    Eps_0x260_260_Eps_s_safelampredType_EPS_S_SAFELAMPRED_OPEN;
  static inline bool Eps_s_safelampredType_IsValid(int value) {
    return Eps_0x260_260_Eps_s_safelampredType_IsValid(value);
  }
  static const Eps_s_safelampredType Eps_s_safelampredType_MIN =
    Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_MIN;
  static const Eps_s_safelampredType Eps_s_safelampredType_MAX =
    Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_MAX;
  static const int Eps_s_safelampredType_ARRAYSIZE =
    Eps_0x260_260_Eps_s_safelampredType_Eps_s_safelampredType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_s_safelampredType_descriptor() {
    return Eps_0x260_260_Eps_s_safelampredType_descriptor();
  }
  static inline const ::std::string& Eps_s_safelampredType_Name(Eps_s_safelampredType value) {
    return Eps_0x260_260_Eps_s_safelampredType_Name(value);
  }
  static inline bool Eps_s_safelampredType_Parse(const ::std::string& name,
      Eps_s_safelampredType* value) {
    return Eps_0x260_260_Eps_s_safelampredType_Parse(name, value);
  }

  typedef Eps_0x260_260_Eps_f_loadinfoType Eps_f_loadinfoType;
  static const Eps_f_loadinfoType EPS_F_LOADINFO_NO_FAULT =
    Eps_0x260_260_Eps_f_loadinfoType_EPS_F_LOADINFO_NO_FAULT;
  static const Eps_f_loadinfoType EPS_F_LOADINFO_FAULT =
    Eps_0x260_260_Eps_f_loadinfoType_EPS_F_LOADINFO_FAULT;
  static inline bool Eps_f_loadinfoType_IsValid(int value) {
    return Eps_0x260_260_Eps_f_loadinfoType_IsValid(value);
  }
  static const Eps_f_loadinfoType Eps_f_loadinfoType_MIN =
    Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_MIN;
  static const Eps_f_loadinfoType Eps_f_loadinfoType_MAX =
    Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_MAX;
  static const int Eps_f_loadinfoType_ARRAYSIZE =
    Eps_0x260_260_Eps_f_loadinfoType_Eps_f_loadinfoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_f_loadinfoType_descriptor() {
    return Eps_0x260_260_Eps_f_loadinfoType_descriptor();
  }
  static inline const ::std::string& Eps_f_loadinfoType_Name(Eps_f_loadinfoType value) {
    return Eps_0x260_260_Eps_f_loadinfoType_Name(value);
  }
  static inline bool Eps_f_loadinfoType_Parse(const ::std::string& name,
      Eps_f_loadinfoType* value) {
    return Eps_0x260_260_Eps_f_loadinfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
  bool has_eps_sassoftlimitrightflg() const;
  void clear_eps_sassoftlimitrightflg();
  static const int kEpsSassoftlimitrightflgFieldNumber = 1;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg() const;
  void set_eps_sassoftlimitrightflg(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType value);

  // optional int32 eps_n_loadinfo = 2;
  bool has_eps_n_loadinfo() const;
  void clear_eps_n_loadinfo();
  static const int kEpsNLoadinfoFieldNumber = 2;
  ::google::protobuf::int32 eps_n_loadinfo() const;
  void set_eps_n_loadinfo(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
  bool has_eps_st_emergencypowerlimit() const;
  void clear_eps_st_emergencypowerlimit();
  static const int kEpsStEmergencypowerlimitFieldNumber = 3;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit() const;
  void set_eps_st_emergencypowerlimit(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
  bool has_eps_st_emergencymotor() const;
  void clear_eps_st_emergencymotor();
  static const int kEpsStEmergencymotorFieldNumber = 4;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType eps_st_emergencymotor() const;
  void set_eps_st_emergencymotor(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
  bool has_eps_st_emergencyecu() const;
  void clear_eps_st_emergencyecu();
  static const int kEpsStEmergencyecuFieldNumber = 5;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType eps_st_emergencyecu() const;
  void set_eps_st_emergencyecu(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
  bool has_eps_st_emergencycaninterface() const;
  void clear_eps_st_emergencycaninterface();
  static const int kEpsStEmergencycaninterfaceFieldNumber = 6;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface() const;
  void set_eps_st_emergencycaninterface(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
  bool has_eps_st_emergencysensor() const;
  void clear_eps_st_emergencysensor();
  static const int kEpsStEmergencysensorFieldNumber = 7;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType eps_st_emergencysensor() const;
  void set_eps_st_emergencysensor(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
  bool has_eps_st_emergencyovertemp() const;
  void clear_eps_st_emergencyovertemp();
  static const int kEpsStEmergencyovertempFieldNumber = 8;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType eps_st_emergencyovertemp() const;
  void set_eps_st_emergencyovertemp(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
  bool has_eps_st_emergencyovervoltage() const;
  void clear_eps_st_emergencyovervoltage();
  static const int kEpsStEmergencyovervoltageFieldNumber = 9;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage() const;
  void set_eps_st_emergencyovervoltage(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
  bool has_eps_st_emergencyundervoltage() const;
  void clear_eps_st_emergencyundervoltage();
  static const int kEpsStEmergencyundervoltageFieldNumber = 10;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage() const;
  void set_eps_st_emergencyundervoltage(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
  bool has_eps_f_ecutempvalid() const;
  void clear_eps_f_ecutempvalid();
  static const int kEpsFEcutempvalidFieldNumber = 11;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType eps_f_ecutempvalid() const;
  void set_eps_f_ecutempvalid(::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
  bool has_eps_sassoftlimitleftflg() const;
  void clear_eps_sassoftlimitleftflg();
  static const int kEpsSassoftlimitleftflgFieldNumber = 12;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg() const;
  void set_eps_sassoftlimitleftflg(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType value);

  // optional double eps_n_performanceredu = 14;
  bool has_eps_n_performanceredu() const;
  void clear_eps_n_performanceredu();
  static const int kEpsNPerformancereduFieldNumber = 14;
  double eps_n_performanceredu() const;
  void set_eps_n_performanceredu(double value);

  // optional int32 eps_n_ecutemp = 13;
  bool has_eps_n_ecutemp() const;
  void clear_eps_n_ecutemp();
  static const int kEpsNEcutempFieldNumber = 13;
  ::google::protobuf::int32 eps_n_ecutemp() const;
  void set_eps_n_ecutemp(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
  bool has_eps_st_dtcflag() const;
  void clear_eps_st_dtcflag();
  static const int kEpsStDtcflagFieldNumber = 15;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType eps_st_dtcflag() const;
  void set_eps_st_dtcflag(::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType value);

  // optional int32 rolling_counter_0x260 = 16;
  bool has_rolling_counter_0x260() const;
  void clear_rolling_counter_0x260();
  static const int kRollingCounter0X260FieldNumber = 16;
  ::google::protobuf::int32 rolling_counter_0x260() const;
  void set_rolling_counter_0x260(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
  bool has_eps_sasindexsts() const;
  void clear_eps_sasindexsts();
  static const int kEpsSasindexstsFieldNumber = 17;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType eps_sasindexsts() const;
  void set_eps_sasindexsts(::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
  bool has_eps_s_warninglampyellow() const;
  void clear_eps_s_warninglampyellow();
  static const int kEpsSWarninglampyellowFieldNumber = 18;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType eps_s_warninglampyellow() const;
  void set_eps_s_warninglampyellow(::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType value);

  // optional int32 checksum_0x260 = 19;
  bool has_checksum_0x260() const;
  void clear_checksum_0x260();
  static const int kChecksum0X260FieldNumber = 19;
  ::google::protobuf::int32 checksum_0x260() const;
  void set_checksum_0x260(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
  bool has_eps_s_safelampred() const;
  void clear_eps_s_safelampred();
  static const int kEpsSSafelampredFieldNumber = 20;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType eps_s_safelampred() const;
  void set_eps_s_safelampred(::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType value);

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
  bool has_eps_f_loadinfo() const;
  void clear_eps_f_loadinfo();
  static const int kEpsFLoadinfoFieldNumber = 21;
  ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType eps_f_loadinfo() const;
  void set_eps_f_loadinfo(::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Eps_0x260_260)
 private:
  void set_has_eps_sassoftlimitrightflg();
  void clear_has_eps_sassoftlimitrightflg();
  void set_has_eps_n_loadinfo();
  void clear_has_eps_n_loadinfo();
  void set_has_eps_st_emergencypowerlimit();
  void clear_has_eps_st_emergencypowerlimit();
  void set_has_eps_st_emergencymotor();
  void clear_has_eps_st_emergencymotor();
  void set_has_eps_st_emergencyecu();
  void clear_has_eps_st_emergencyecu();
  void set_has_eps_st_emergencycaninterface();
  void clear_has_eps_st_emergencycaninterface();
  void set_has_eps_st_emergencysensor();
  void clear_has_eps_st_emergencysensor();
  void set_has_eps_st_emergencyovertemp();
  void clear_has_eps_st_emergencyovertemp();
  void set_has_eps_st_emergencyovervoltage();
  void clear_has_eps_st_emergencyovervoltage();
  void set_has_eps_st_emergencyundervoltage();
  void clear_has_eps_st_emergencyundervoltage();
  void set_has_eps_f_ecutempvalid();
  void clear_has_eps_f_ecutempvalid();
  void set_has_eps_sassoftlimitleftflg();
  void clear_has_eps_sassoftlimitleftflg();
  void set_has_eps_n_ecutemp();
  void clear_has_eps_n_ecutemp();
  void set_has_eps_n_performanceredu();
  void clear_has_eps_n_performanceredu();
  void set_has_eps_st_dtcflag();
  void clear_has_eps_st_dtcflag();
  void set_has_rolling_counter_0x260();
  void clear_has_rolling_counter_0x260();
  void set_has_eps_sasindexsts();
  void clear_has_eps_sasindexsts();
  void set_has_eps_s_warninglampyellow();
  void clear_has_eps_s_warninglampyellow();
  void set_has_checksum_0x260();
  void clear_has_checksum_0x260();
  void set_has_eps_s_safelampred();
  void clear_has_eps_s_safelampred();
  void set_has_eps_f_loadinfo();
  void clear_has_eps_f_loadinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int eps_sassoftlimitrightflg_;
  ::google::protobuf::int32 eps_n_loadinfo_;
  int eps_st_emergencypowerlimit_;
  int eps_st_emergencymotor_;
  int eps_st_emergencyecu_;
  int eps_st_emergencycaninterface_;
  int eps_st_emergencysensor_;
  int eps_st_emergencyovertemp_;
  int eps_st_emergencyovervoltage_;
  int eps_st_emergencyundervoltage_;
  int eps_f_ecutempvalid_;
  int eps_sassoftlimitleftflg_;
  double eps_n_performanceredu_;
  ::google::protobuf::int32 eps_n_ecutemp_;
  int eps_st_dtcflag_;
  ::google::protobuf::int32 rolling_counter_0x260_;
  int eps_sasindexsts_;
  int eps_s_warninglampyellow_;
  ::google::protobuf::int32 checksum_0x260_;
  int eps_s_safelampred_;
  int eps_f_loadinfo_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sod_0x275_275 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Sod_0x275_275) */ {
 public:
  Sod_0x275_275();
  virtual ~Sod_0x275_275();

  Sod_0x275_275(const Sod_0x275_275& from);

  inline Sod_0x275_275& operator=(const Sod_0x275_275& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sod_0x275_275& default_instance();

  static inline const Sod_0x275_275* internal_default_instance() {
    return reinterpret_cast<const Sod_0x275_275*>(
               &_Sod_0x275_275_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(Sod_0x275_275* other);

  // implements Message ----------------------------------------------

  inline Sod_0x275_275* New() const PROTOBUF_FINAL { return New(NULL); }

  Sod_0x275_275* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sod_0x275_275& from);
  void MergeFrom(const Sod_0x275_275& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sod_0x275_275* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Sod_0x275_275_Sod_lca_warningreqrightType Sod_lca_warningreqrightType;
  static const Sod_lca_warningreqrightType SOD_LCA_WARNINGREQRIGHT_NO_WARNING =
    Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_NO_WARNING;
  static const Sod_lca_warningreqrightType SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_1 =
    Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_1;
  static const Sod_lca_warningreqrightType SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_2;
  static const Sod_lca_warningreqrightType SOD_LCA_WARNINGREQRIGHT_RESERVED =
    Sod_0x275_275_Sod_lca_warningreqrightType_SOD_LCA_WARNINGREQRIGHT_RESERVED;
  static inline bool Sod_lca_warningreqrightType_IsValid(int value) {
    return Sod_0x275_275_Sod_lca_warningreqrightType_IsValid(value);
  }
  static const Sod_lca_warningreqrightType Sod_lca_warningreqrightType_MIN =
    Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_MIN;
  static const Sod_lca_warningreqrightType Sod_lca_warningreqrightType_MAX =
    Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_MAX;
  static const int Sod_lca_warningreqrightType_ARRAYSIZE =
    Sod_0x275_275_Sod_lca_warningreqrightType_Sod_lca_warningreqrightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_lca_warningreqrightType_descriptor() {
    return Sod_0x275_275_Sod_lca_warningreqrightType_descriptor();
  }
  static inline const ::std::string& Sod_lca_warningreqrightType_Name(Sod_lca_warningreqrightType value) {
    return Sod_0x275_275_Sod_lca_warningreqrightType_Name(value);
  }
  static inline bool Sod_lca_warningreqrightType_Parse(const ::std::string& name,
      Sod_lca_warningreqrightType* value) {
    return Sod_0x275_275_Sod_lca_warningreqrightType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_blis_activeType Sod_blis_activeType;
  static const Sod_blis_activeType SOD_BLIS_ACTIVE_NO_ACTIVE =
    Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_NO_ACTIVE;
  static const Sod_blis_activeType SOD_BLIS_ACTIVE_STANBY =
    Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_STANBY;
  static const Sod_blis_activeType SOD_BLIS_ACTIVE_ACTIVE =
    Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_ACTIVE;
  static const Sod_blis_activeType SOD_BLIS_ACTIVE_FAIL =
    Sod_0x275_275_Sod_blis_activeType_SOD_BLIS_ACTIVE_FAIL;
  static inline bool Sod_blis_activeType_IsValid(int value) {
    return Sod_0x275_275_Sod_blis_activeType_IsValid(value);
  }
  static const Sod_blis_activeType Sod_blis_activeType_MIN =
    Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_MIN;
  static const Sod_blis_activeType Sod_blis_activeType_MAX =
    Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_MAX;
  static const int Sod_blis_activeType_ARRAYSIZE =
    Sod_0x275_275_Sod_blis_activeType_Sod_blis_activeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_blis_activeType_descriptor() {
    return Sod_0x275_275_Sod_blis_activeType_descriptor();
  }
  static inline const ::std::string& Sod_blis_activeType_Name(Sod_blis_activeType value) {
    return Sod_0x275_275_Sod_blis_activeType_Name(value);
  }
  static inline bool Sod_blis_activeType_Parse(const ::std::string& name,
      Sod_blis_activeType* value) {
    return Sod_0x275_275_Sod_blis_activeType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_blis_displayType Sod_blis_displayType;
  static const Sod_blis_displayType SOD_BLIS_DISPLAY_NO_DISPLAY =
    Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_NO_DISPLAY;
  static const Sod_blis_displayType SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_ERROR =
    Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_ERROR;
  static const Sod_blis_displayType SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_BLINDNESS =
    Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_BLINDNESS;
  static const Sod_blis_displayType SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_UNCALIBRATION =
    Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_UNCALIBRATION;
  static const Sod_blis_displayType SOD_BLIS_DISPLAY_TEMPORARY_ERROR =
    Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_TEMPORARY_ERROR;
  static const Sod_blis_displayType SOD_BLIS_DISPLAY_RESERVED =
    Sod_0x275_275_Sod_blis_displayType_SOD_BLIS_DISPLAY_RESERVED;
  static inline bool Sod_blis_displayType_IsValid(int value) {
    return Sod_0x275_275_Sod_blis_displayType_IsValid(value);
  }
  static const Sod_blis_displayType Sod_blis_displayType_MIN =
    Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_MIN;
  static const Sod_blis_displayType Sod_blis_displayType_MAX =
    Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_MAX;
  static const int Sod_blis_displayType_ARRAYSIZE =
    Sod_0x275_275_Sod_blis_displayType_Sod_blis_displayType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_blis_displayType_descriptor() {
    return Sod_0x275_275_Sod_blis_displayType_descriptor();
  }
  static inline const ::std::string& Sod_blis_displayType_Name(Sod_blis_displayType value) {
    return Sod_0x275_275_Sod_blis_displayType_Name(value);
  }
  static inline bool Sod_blis_displayType_Parse(const ::std::string& name,
      Sod_blis_displayType* value) {
    return Sod_0x275_275_Sod_blis_displayType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_lca_warningreqleftType Sod_lca_warningreqleftType;
  static const Sod_lca_warningreqleftType SOD_LCA_WARNINGREQLEFT_NO_WARNING =
    Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_NO_WARNING;
  static const Sod_lca_warningreqleftType SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_1 =
    Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_1;
  static const Sod_lca_warningreqleftType SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_2;
  static const Sod_lca_warningreqleftType SOD_LCA_WARNINGREQLEFT_RESERVED =
    Sod_0x275_275_Sod_lca_warningreqleftType_SOD_LCA_WARNINGREQLEFT_RESERVED;
  static inline bool Sod_lca_warningreqleftType_IsValid(int value) {
    return Sod_0x275_275_Sod_lca_warningreqleftType_IsValid(value);
  }
  static const Sod_lca_warningreqleftType Sod_lca_warningreqleftType_MIN =
    Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_MIN;
  static const Sod_lca_warningreqleftType Sod_lca_warningreqleftType_MAX =
    Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_MAX;
  static const int Sod_lca_warningreqleftType_ARRAYSIZE =
    Sod_0x275_275_Sod_lca_warningreqleftType_Sod_lca_warningreqleftType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_lca_warningreqleftType_descriptor() {
    return Sod_0x275_275_Sod_lca_warningreqleftType_descriptor();
  }
  static inline const ::std::string& Sod_lca_warningreqleftType_Name(Sod_lca_warningreqleftType value) {
    return Sod_0x275_275_Sod_lca_warningreqleftType_Name(value);
  }
  static inline bool Sod_lca_warningreqleftType_Parse(const ::std::string& name,
      Sod_lca_warningreqleftType* value) {
    return Sod_0x275_275_Sod_lca_warningreqleftType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_doa_warningreqleftrearType;
  static const Sod_doa_warningreqleftrearType SOD_DOA_WARNINGREQLEFTREAR_NO_WARNING =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_NO_WARNING;
  static const Sod_doa_warningreqleftrearType SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_1 =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_1;
  static const Sod_doa_warningreqleftrearType SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_2;
  static const Sod_doa_warningreqleftrearType SOD_DOA_WARNINGREQLEFTREAR_RESERVED =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_SOD_DOA_WARNINGREQLEFTREAR_RESERVED;
  static inline bool Sod_doa_warningreqleftrearType_IsValid(int value) {
    return Sod_0x275_275_Sod_doa_warningreqleftrearType_IsValid(value);
  }
  static const Sod_doa_warningreqleftrearType Sod_doa_warningreqleftrearType_MIN =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_MIN;
  static const Sod_doa_warningreqleftrearType Sod_doa_warningreqleftrearType_MAX =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_MAX;
  static const int Sod_doa_warningreqleftrearType_ARRAYSIZE =
    Sod_0x275_275_Sod_doa_warningreqleftrearType_Sod_doa_warningreqleftrearType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_doa_warningreqleftrearType_descriptor() {
    return Sod_0x275_275_Sod_doa_warningreqleftrearType_descriptor();
  }
  static inline const ::std::string& Sod_doa_warningreqleftrearType_Name(Sod_doa_warningreqleftrearType value) {
    return Sod_0x275_275_Sod_doa_warningreqleftrearType_Name(value);
  }
  static inline bool Sod_doa_warningreqleftrearType_Parse(const ::std::string& name,
      Sod_doa_warningreqleftrearType* value) {
    return Sod_0x275_275_Sod_doa_warningreqleftrearType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_doa_warningreqleftfrontType;
  static const Sod_doa_warningreqleftfrontType SOD_DOA_WARNINGREQLEFTFRONT_NO_WARNING =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_NO_WARNING;
  static const Sod_doa_warningreqleftfrontType SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_1 =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_1;
  static const Sod_doa_warningreqleftfrontType SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_2;
  static const Sod_doa_warningreqleftfrontType SOD_DOA_WARNINGREQLEFTFRONT_RESERVED =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_SOD_DOA_WARNINGREQLEFTFRONT_RESERVED;
  static inline bool Sod_doa_warningreqleftfrontType_IsValid(int value) {
    return Sod_0x275_275_Sod_doa_warningreqleftfrontType_IsValid(value);
  }
  static const Sod_doa_warningreqleftfrontType Sod_doa_warningreqleftfrontType_MIN =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_MIN;
  static const Sod_doa_warningreqleftfrontType Sod_doa_warningreqleftfrontType_MAX =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_MAX;
  static const int Sod_doa_warningreqleftfrontType_ARRAYSIZE =
    Sod_0x275_275_Sod_doa_warningreqleftfrontType_Sod_doa_warningreqleftfrontType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_doa_warningreqleftfrontType_descriptor() {
    return Sod_0x275_275_Sod_doa_warningreqleftfrontType_descriptor();
  }
  static inline const ::std::string& Sod_doa_warningreqleftfrontType_Name(Sod_doa_warningreqleftfrontType value) {
    return Sod_0x275_275_Sod_doa_warningreqleftfrontType_Name(value);
  }
  static inline bool Sod_doa_warningreqleftfrontType_Parse(const ::std::string& name,
      Sod_doa_warningreqleftfrontType* value) {
    return Sod_0x275_275_Sod_doa_warningreqleftfrontType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_cta_warningreqleftType Sod_cta_warningreqleftType;
  static const Sod_cta_warningreqleftType SOD_CTA_WARNINGREQLEFT_NO_WARNING =
    Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_NO_WARNING;
  static const Sod_cta_warningreqleftType SOD_CTA_WARNINGREQLEFT_RESERVED =
    Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_RESERVED;
  static const Sod_cta_warningreqleftType SOD_CTA_WARNINGREQLEFT_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_cta_warningreqleftType_SOD_CTA_WARNINGREQLEFT_WARNING_LEVEL_2;
  static inline bool Sod_cta_warningreqleftType_IsValid(int value) {
    return Sod_0x275_275_Sod_cta_warningreqleftType_IsValid(value);
  }
  static const Sod_cta_warningreqleftType Sod_cta_warningreqleftType_MIN =
    Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_MIN;
  static const Sod_cta_warningreqleftType Sod_cta_warningreqleftType_MAX =
    Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_MAX;
  static const int Sod_cta_warningreqleftType_ARRAYSIZE =
    Sod_0x275_275_Sod_cta_warningreqleftType_Sod_cta_warningreqleftType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_cta_warningreqleftType_descriptor() {
    return Sod_0x275_275_Sod_cta_warningreqleftType_descriptor();
  }
  static inline const ::std::string& Sod_cta_warningreqleftType_Name(Sod_cta_warningreqleftType value) {
    return Sod_0x275_275_Sod_cta_warningreqleftType_Name(value);
  }
  static inline bool Sod_cta_warningreqleftType_Parse(const ::std::string& name,
      Sod_cta_warningreqleftType* value) {
    return Sod_0x275_275_Sod_cta_warningreqleftType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_doa_stateType Sod_doa_stateType;
  static const Sod_doa_stateType SOD_DOA_STATE_INACTIVE =
    Sod_0x275_275_Sod_doa_stateType_SOD_DOA_STATE_INACTIVE;
  static const Sod_doa_stateType SOD_DOA_STATE_ACTIVE =
    Sod_0x275_275_Sod_doa_stateType_SOD_DOA_STATE_ACTIVE;
  static inline bool Sod_doa_stateType_IsValid(int value) {
    return Sod_0x275_275_Sod_doa_stateType_IsValid(value);
  }
  static const Sod_doa_stateType Sod_doa_stateType_MIN =
    Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_MIN;
  static const Sod_doa_stateType Sod_doa_stateType_MAX =
    Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_MAX;
  static const int Sod_doa_stateType_ARRAYSIZE =
    Sod_0x275_275_Sod_doa_stateType_Sod_doa_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_doa_stateType_descriptor() {
    return Sod_0x275_275_Sod_doa_stateType_descriptor();
  }
  static inline const ::std::string& Sod_doa_stateType_Name(Sod_doa_stateType value) {
    return Sod_0x275_275_Sod_doa_stateType_Name(value);
  }
  static inline bool Sod_doa_stateType_Parse(const ::std::string& name,
      Sod_doa_stateType* value) {
    return Sod_0x275_275_Sod_doa_stateType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_cta_stateType Sod_cta_stateType;
  static const Sod_cta_stateType SOD_CTA_STATE_INACTIVE =
    Sod_0x275_275_Sod_cta_stateType_SOD_CTA_STATE_INACTIVE;
  static const Sod_cta_stateType SOD_CTA_STATE_ACTIVE =
    Sod_0x275_275_Sod_cta_stateType_SOD_CTA_STATE_ACTIVE;
  static inline bool Sod_cta_stateType_IsValid(int value) {
    return Sod_0x275_275_Sod_cta_stateType_IsValid(value);
  }
  static const Sod_cta_stateType Sod_cta_stateType_MIN =
    Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_MIN;
  static const Sod_cta_stateType Sod_cta_stateType_MAX =
    Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_MAX;
  static const int Sod_cta_stateType_ARRAYSIZE =
    Sod_0x275_275_Sod_cta_stateType_Sod_cta_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_cta_stateType_descriptor() {
    return Sod_0x275_275_Sod_cta_stateType_descriptor();
  }
  static inline const ::std::string& Sod_cta_stateType_Name(Sod_cta_stateType value) {
    return Sod_0x275_275_Sod_cta_stateType_Name(value);
  }
  static inline bool Sod_cta_stateType_Parse(const ::std::string& name,
      Sod_cta_stateType* value) {
    return Sod_0x275_275_Sod_cta_stateType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_sodlca_stateType Sod_sodlca_stateType;
  static const Sod_sodlca_stateType SOD_SODLCA_STATE_INACTIVE =
    Sod_0x275_275_Sod_sodlca_stateType_SOD_SODLCA_STATE_INACTIVE;
  static const Sod_sodlca_stateType SOD_SODLCA_STATE_ACTIVE =
    Sod_0x275_275_Sod_sodlca_stateType_SOD_SODLCA_STATE_ACTIVE;
  static inline bool Sod_sodlca_stateType_IsValid(int value) {
    return Sod_0x275_275_Sod_sodlca_stateType_IsValid(value);
  }
  static const Sod_sodlca_stateType Sod_sodlca_stateType_MIN =
    Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_MIN;
  static const Sod_sodlca_stateType Sod_sodlca_stateType_MAX =
    Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_MAX;
  static const int Sod_sodlca_stateType_ARRAYSIZE =
    Sod_0x275_275_Sod_sodlca_stateType_Sod_sodlca_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_sodlca_stateType_descriptor() {
    return Sod_0x275_275_Sod_sodlca_stateType_descriptor();
  }
  static inline const ::std::string& Sod_sodlca_stateType_Name(Sod_sodlca_stateType value) {
    return Sod_0x275_275_Sod_sodlca_stateType_Name(value);
  }
  static inline bool Sod_sodlca_stateType_Parse(const ::std::string& name,
      Sod_sodlca_stateType* value) {
    return Sod_0x275_275_Sod_sodlca_stateType_Parse(name, value);
  }

  typedef Sod_0x275_275_Doa_offtelltaleType Doa_offtelltaleType;
  static const Doa_offtelltaleType DOA_OFFTELLTALE_OFFTELLTLAE_OFF =
    Sod_0x275_275_Doa_offtelltaleType_DOA_OFFTELLTALE_OFFTELLTLAE_OFF;
  static const Doa_offtelltaleType DOA_OFFTELLTALE_OFFTELLTALE_ON =
    Sod_0x275_275_Doa_offtelltaleType_DOA_OFFTELLTALE_OFFTELLTALE_ON;
  static inline bool Doa_offtelltaleType_IsValid(int value) {
    return Sod_0x275_275_Doa_offtelltaleType_IsValid(value);
  }
  static const Doa_offtelltaleType Doa_offtelltaleType_MIN =
    Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_MIN;
  static const Doa_offtelltaleType Doa_offtelltaleType_MAX =
    Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_MAX;
  static const int Doa_offtelltaleType_ARRAYSIZE =
    Sod_0x275_275_Doa_offtelltaleType_Doa_offtelltaleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Doa_offtelltaleType_descriptor() {
    return Sod_0x275_275_Doa_offtelltaleType_descriptor();
  }
  static inline const ::std::string& Doa_offtelltaleType_Name(Doa_offtelltaleType value) {
    return Sod_0x275_275_Doa_offtelltaleType_Name(value);
  }
  static inline bool Doa_offtelltaleType_Parse(const ::std::string& name,
      Doa_offtelltaleType* value) {
    return Sod_0x275_275_Doa_offtelltaleType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_doa_warningreqrightrearType;
  static const Sod_doa_warningreqrightrearType SOD_DOA_WARNINGREQRIGHTREAR_NO_WARNING =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_NO_WARNING;
  static const Sod_doa_warningreqrightrearType SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_1 =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_1;
  static const Sod_doa_warningreqrightrearType SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_2;
  static const Sod_doa_warningreqrightrearType SOD_DOA_WARNINGREQRIGHTREAR_RESERVED =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_SOD_DOA_WARNINGREQRIGHTREAR_RESERVED;
  static inline bool Sod_doa_warningreqrightrearType_IsValid(int value) {
    return Sod_0x275_275_Sod_doa_warningreqrightrearType_IsValid(value);
  }
  static const Sod_doa_warningreqrightrearType Sod_doa_warningreqrightrearType_MIN =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_MIN;
  static const Sod_doa_warningreqrightrearType Sod_doa_warningreqrightrearType_MAX =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_MAX;
  static const int Sod_doa_warningreqrightrearType_ARRAYSIZE =
    Sod_0x275_275_Sod_doa_warningreqrightrearType_Sod_doa_warningreqrightrearType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_doa_warningreqrightrearType_descriptor() {
    return Sod_0x275_275_Sod_doa_warningreqrightrearType_descriptor();
  }
  static inline const ::std::string& Sod_doa_warningreqrightrearType_Name(Sod_doa_warningreqrightrearType value) {
    return Sod_0x275_275_Sod_doa_warningreqrightrearType_Name(value);
  }
  static inline bool Sod_doa_warningreqrightrearType_Parse(const ::std::string& name,
      Sod_doa_warningreqrightrearType* value) {
    return Sod_0x275_275_Sod_doa_warningreqrightrearType_Parse(name, value);
  }

  typedef Sod_0x275_275_Cta_offtelltaleType Cta_offtelltaleType;
  static const Cta_offtelltaleType CTA_OFFTELLTALE_OFFTELLTLAE_OFF =
    Sod_0x275_275_Cta_offtelltaleType_CTA_OFFTELLTALE_OFFTELLTLAE_OFF;
  static const Cta_offtelltaleType CTA_OFFTELLTALE_OFFTELLTALE_ON =
    Sod_0x275_275_Cta_offtelltaleType_CTA_OFFTELLTALE_OFFTELLTALE_ON;
  static inline bool Cta_offtelltaleType_IsValid(int value) {
    return Sod_0x275_275_Cta_offtelltaleType_IsValid(value);
  }
  static const Cta_offtelltaleType Cta_offtelltaleType_MIN =
    Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_MIN;
  static const Cta_offtelltaleType Cta_offtelltaleType_MAX =
    Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_MAX;
  static const int Cta_offtelltaleType_ARRAYSIZE =
    Sod_0x275_275_Cta_offtelltaleType_Cta_offtelltaleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cta_offtelltaleType_descriptor() {
    return Sod_0x275_275_Cta_offtelltaleType_descriptor();
  }
  static inline const ::std::string& Cta_offtelltaleType_Name(Cta_offtelltaleType value) {
    return Sod_0x275_275_Cta_offtelltaleType_Name(value);
  }
  static inline bool Cta_offtelltaleType_Parse(const ::std::string& name,
      Cta_offtelltaleType* value) {
    return Sod_0x275_275_Cta_offtelltaleType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sodlca_offtelltaleType Sodlca_offtelltaleType;
  static const Sodlca_offtelltaleType SODLCA_OFFTELLTALE_OFFTELLTLAE_OFF =
    Sod_0x275_275_Sodlca_offtelltaleType_SODLCA_OFFTELLTALE_OFFTELLTLAE_OFF;
  static const Sodlca_offtelltaleType SODLCA_OFFTELLTALE_OFFTELLTALE_ON =
    Sod_0x275_275_Sodlca_offtelltaleType_SODLCA_OFFTELLTALE_OFFTELLTALE_ON;
  static inline bool Sodlca_offtelltaleType_IsValid(int value) {
    return Sod_0x275_275_Sodlca_offtelltaleType_IsValid(value);
  }
  static const Sodlca_offtelltaleType Sodlca_offtelltaleType_MIN =
    Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_MIN;
  static const Sodlca_offtelltaleType Sodlca_offtelltaleType_MAX =
    Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_MAX;
  static const int Sodlca_offtelltaleType_ARRAYSIZE =
    Sod_0x275_275_Sodlca_offtelltaleType_Sodlca_offtelltaleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sodlca_offtelltaleType_descriptor() {
    return Sod_0x275_275_Sodlca_offtelltaleType_descriptor();
  }
  static inline const ::std::string& Sodlca_offtelltaleType_Name(Sodlca_offtelltaleType value) {
    return Sod_0x275_275_Sodlca_offtelltaleType_Name(value);
  }
  static inline bool Sodlca_offtelltaleType_Parse(const ::std::string& name,
      Sodlca_offtelltaleType* value) {
    return Sod_0x275_275_Sodlca_offtelltaleType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_doa_warningreqrightfrontType;
  static const Sod_doa_warningreqrightfrontType SOD_DOA_WARNINGREQRIGHTFRONT_NO_WARNING =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_NO_WARNING;
  static const Sod_doa_warningreqrightfrontType SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_1 =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_1;
  static const Sod_doa_warningreqrightfrontType SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_2;
  static const Sod_doa_warningreqrightfrontType SOD_DOA_WARNINGREQRIGHTFRONT_RESERVED =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_SOD_DOA_WARNINGREQRIGHTFRONT_RESERVED;
  static inline bool Sod_doa_warningreqrightfrontType_IsValid(int value) {
    return Sod_0x275_275_Sod_doa_warningreqrightfrontType_IsValid(value);
  }
  static const Sod_doa_warningreqrightfrontType Sod_doa_warningreqrightfrontType_MIN =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_MIN;
  static const Sod_doa_warningreqrightfrontType Sod_doa_warningreqrightfrontType_MAX =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_MAX;
  static const int Sod_doa_warningreqrightfrontType_ARRAYSIZE =
    Sod_0x275_275_Sod_doa_warningreqrightfrontType_Sod_doa_warningreqrightfrontType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_doa_warningreqrightfrontType_descriptor() {
    return Sod_0x275_275_Sod_doa_warningreqrightfrontType_descriptor();
  }
  static inline const ::std::string& Sod_doa_warningreqrightfrontType_Name(Sod_doa_warningreqrightfrontType value) {
    return Sod_0x275_275_Sod_doa_warningreqrightfrontType_Name(value);
  }
  static inline bool Sod_doa_warningreqrightfrontType_Parse(const ::std::string& name,
      Sod_doa_warningreqrightfrontType* value) {
    return Sod_0x275_275_Sod_doa_warningreqrightfrontType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_cta_warningreqrightType Sod_cta_warningreqrightType;
  static const Sod_cta_warningreqrightType SOD_CTA_WARNINGREQRIGHT_NO_WARNING =
    Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_NO_WARNING;
  static const Sod_cta_warningreqrightType SOD_CTA_WARNINGREQRIGHT_RESERVED =
    Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_RESERVED;
  static const Sod_cta_warningreqrightType SOD_CTA_WARNINGREQRIGHT_WARNING_LEVEL_2 =
    Sod_0x275_275_Sod_cta_warningreqrightType_SOD_CTA_WARNINGREQRIGHT_WARNING_LEVEL_2;
  static inline bool Sod_cta_warningreqrightType_IsValid(int value) {
    return Sod_0x275_275_Sod_cta_warningreqrightType_IsValid(value);
  }
  static const Sod_cta_warningreqrightType Sod_cta_warningreqrightType_MIN =
    Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_MIN;
  static const Sod_cta_warningreqrightType Sod_cta_warningreqrightType_MAX =
    Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_MAX;
  static const int Sod_cta_warningreqrightType_ARRAYSIZE =
    Sod_0x275_275_Sod_cta_warningreqrightType_Sod_cta_warningreqrightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_cta_warningreqrightType_descriptor() {
    return Sod_0x275_275_Sod_cta_warningreqrightType_descriptor();
  }
  static inline const ::std::string& Sod_cta_warningreqrightType_Name(Sod_cta_warningreqrightType value) {
    return Sod_0x275_275_Sod_cta_warningreqrightType_Name(value);
  }
  static inline bool Sod_cta_warningreqrightType_Parse(const ::std::string& name,
      Sod_cta_warningreqrightType* value) {
    return Sod_0x275_275_Sod_cta_warningreqrightType_Parse(name, value);
  }

  typedef Sod_0x275_275_Sod_autoalignmentflagType Sod_autoalignmentflagType;
  static const Sod_autoalignmentflagType SOD_AUTOALIGNMENTFLAG_NO_SUCCESS =
    Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_NO_SUCCESS;
  static const Sod_autoalignmentflagType SOD_AUTOALIGNMENTFLAG_SUCCESSFUL =
    Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_SUCCESSFUL;
  static const Sod_autoalignmentflagType SOD_AUTOALIGNMENTFLAG_RESERVED =
    Sod_0x275_275_Sod_autoalignmentflagType_SOD_AUTOALIGNMENTFLAG_RESERVED;
  static inline bool Sod_autoalignmentflagType_IsValid(int value) {
    return Sod_0x275_275_Sod_autoalignmentflagType_IsValid(value);
  }
  static const Sod_autoalignmentflagType Sod_autoalignmentflagType_MIN =
    Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_MIN;
  static const Sod_autoalignmentflagType Sod_autoalignmentflagType_MAX =
    Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_MAX;
  static const int Sod_autoalignmentflagType_ARRAYSIZE =
    Sod_0x275_275_Sod_autoalignmentflagType_Sod_autoalignmentflagType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sod_autoalignmentflagType_descriptor() {
    return Sod_0x275_275_Sod_autoalignmentflagType_descriptor();
  }
  static inline const ::std::string& Sod_autoalignmentflagType_Name(Sod_autoalignmentflagType value) {
    return Sod_0x275_275_Sod_autoalignmentflagType_Name(value);
  }
  static inline bool Sod_autoalignmentflagType_Parse(const ::std::string& name,
      Sod_autoalignmentflagType* value) {
    return Sod_0x275_275_Sod_autoalignmentflagType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
  bool has_sod_lca_warningreqright() const;
  void clear_sod_lca_warningreqright();
  static const int kSodLcaWarningreqrightFieldNumber = 1;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType sod_lca_warningreqright() const;
  void set_sod_lca_warningreqright(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
  bool has_sod_blis_active() const;
  void clear_sod_blis_active();
  static const int kSodBlisActiveFieldNumber = 2;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType sod_blis_active() const;
  void set_sod_blis_active(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
  bool has_sod_blis_display() const;
  void clear_sod_blis_display();
  static const int kSodBlisDisplayFieldNumber = 3;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType sod_blis_display() const;
  void set_sod_blis_display(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
  bool has_sod_lca_warningreqleft() const;
  void clear_sod_lca_warningreqleft();
  static const int kSodLcaWarningreqleftFieldNumber = 4;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType sod_lca_warningreqleft() const;
  void set_sod_lca_warningreqleft(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
  bool has_sod_doa_warningreqleftrear() const;
  void clear_sod_doa_warningreqleftrear();
  static const int kSodDoaWarningreqleftrearFieldNumber = 5;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear() const;
  void set_sod_doa_warningreqleftrear(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
  bool has_sod_doa_warningreqleftfront() const;
  void clear_sod_doa_warningreqleftfront();
  static const int kSodDoaWarningreqleftfrontFieldNumber = 6;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront() const;
  void set_sod_doa_warningreqleftfront(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
  bool has_sod_cta_warningreqleft() const;
  void clear_sod_cta_warningreqleft();
  static const int kSodCtaWarningreqleftFieldNumber = 7;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType sod_cta_warningreqleft() const;
  void set_sod_cta_warningreqleft(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
  bool has_sod_doa_state() const;
  void clear_sod_doa_state();
  static const int kSodDoaStateFieldNumber = 8;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType sod_doa_state() const;
  void set_sod_doa_state(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
  bool has_sod_cta_state() const;
  void clear_sod_cta_state();
  static const int kSodCtaStateFieldNumber = 9;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType sod_cta_state() const;
  void set_sod_cta_state(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
  bool has_sod_sodlca_state() const;
  void clear_sod_sodlca_state();
  static const int kSodSodlcaStateFieldNumber = 10;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType sod_sodlca_state() const;
  void set_sod_sodlca_state(::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
  bool has_doa_offtelltale() const;
  void clear_doa_offtelltale();
  static const int kDoaOfftelltaleFieldNumber = 11;
  ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType doa_offtelltale() const;
  void set_doa_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
  bool has_sod_doa_warningreqrightrear() const;
  void clear_sod_doa_warningreqrightrear();
  static const int kSodDoaWarningreqrightrearFieldNumber = 12;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear() const;
  void set_sod_doa_warningreqrightrear(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
  bool has_cta_offtelltale() const;
  void clear_cta_offtelltale();
  static const int kCtaOfftelltaleFieldNumber = 13;
  ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType cta_offtelltale() const;
  void set_cta_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
  bool has_sodlca_offtelltale() const;
  void clear_sodlca_offtelltale();
  static const int kSodlcaOfftelltaleFieldNumber = 14;
  ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType sodlca_offtelltale() const;
  void set_sodlca_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
  bool has_sod_doa_warningreqrightfront() const;
  void clear_sod_doa_warningreqrightfront();
  static const int kSodDoaWarningreqrightfrontFieldNumber = 15;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront() const;
  void set_sod_doa_warningreqrightfront(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType value);

  // optional int32 rolling_counter_0x275 = 16;
  bool has_rolling_counter_0x275() const;
  void clear_rolling_counter_0x275();
  static const int kRollingCounter0X275FieldNumber = 16;
  ::google::protobuf::int32 rolling_counter_0x275() const;
  void set_rolling_counter_0x275(::google::protobuf::int32 value);

  // optional int32 checksum_0x275 = 17;
  bool has_checksum_0x275() const;
  void clear_checksum_0x275();
  static const int kChecksum0X275FieldNumber = 17;
  ::google::protobuf::int32 checksum_0x275() const;
  void set_checksum_0x275(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
  bool has_sod_cta_warningreqright() const;
  void clear_sod_cta_warningreqright();
  static const int kSodCtaWarningreqrightFieldNumber = 18;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType sod_cta_warningreqright() const;
  void set_sod_cta_warningreqright(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType value);

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
  bool has_sod_autoalignmentflag() const;
  void clear_sod_autoalignmentflag();
  static const int kSodAutoalignmentflagFieldNumber = 19;
  ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType sod_autoalignmentflag() const;
  void set_sod_autoalignmentflag(::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Sod_0x275_275)
 private:
  void set_has_sod_lca_warningreqright();
  void clear_has_sod_lca_warningreqright();
  void set_has_sod_blis_active();
  void clear_has_sod_blis_active();
  void set_has_sod_blis_display();
  void clear_has_sod_blis_display();
  void set_has_sod_lca_warningreqleft();
  void clear_has_sod_lca_warningreqleft();
  void set_has_sod_doa_warningreqleftrear();
  void clear_has_sod_doa_warningreqleftrear();
  void set_has_sod_doa_warningreqleftfront();
  void clear_has_sod_doa_warningreqleftfront();
  void set_has_sod_cta_warningreqleft();
  void clear_has_sod_cta_warningreqleft();
  void set_has_sod_doa_state();
  void clear_has_sod_doa_state();
  void set_has_sod_cta_state();
  void clear_has_sod_cta_state();
  void set_has_sod_sodlca_state();
  void clear_has_sod_sodlca_state();
  void set_has_doa_offtelltale();
  void clear_has_doa_offtelltale();
  void set_has_sod_doa_warningreqrightrear();
  void clear_has_sod_doa_warningreqrightrear();
  void set_has_cta_offtelltale();
  void clear_has_cta_offtelltale();
  void set_has_sodlca_offtelltale();
  void clear_has_sodlca_offtelltale();
  void set_has_sod_doa_warningreqrightfront();
  void clear_has_sod_doa_warningreqrightfront();
  void set_has_rolling_counter_0x275();
  void clear_has_rolling_counter_0x275();
  void set_has_checksum_0x275();
  void clear_has_checksum_0x275();
  void set_has_sod_cta_warningreqright();
  void clear_has_sod_cta_warningreqright();
  void set_has_sod_autoalignmentflag();
  void clear_has_sod_autoalignmentflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int sod_lca_warningreqright_;
  int sod_blis_active_;
  int sod_blis_display_;
  int sod_lca_warningreqleft_;
  int sod_doa_warningreqleftrear_;
  int sod_doa_warningreqleftfront_;
  int sod_cta_warningreqleft_;
  int sod_doa_state_;
  int sod_cta_state_;
  int sod_sodlca_state_;
  int doa_offtelltale_;
  int sod_doa_warningreqrightrear_;
  int cta_offtelltale_;
  int sodlca_offtelltale_;
  int sod_doa_warningreqrightfront_;
  ::google::protobuf::int32 rolling_counter_0x275_;
  ::google::protobuf::int32 checksum_0x275_;
  int sod_cta_warningreqright_;
  int sod_autoalignmentflag_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gw_tpms_tire_0x361_361 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Gw_tpms_tire_0x361_361) */ {
 public:
  Gw_tpms_tire_0x361_361();
  virtual ~Gw_tpms_tire_0x361_361();

  Gw_tpms_tire_0x361_361(const Gw_tpms_tire_0x361_361& from);

  inline Gw_tpms_tire_0x361_361& operator=(const Gw_tpms_tire_0x361_361& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gw_tpms_tire_0x361_361& default_instance();

  static inline const Gw_tpms_tire_0x361_361* internal_default_instance() {
    return reinterpret_cast<const Gw_tpms_tire_0x361_361*>(
               &_Gw_tpms_tire_0x361_361_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(Gw_tpms_tire_0x361_361* other);

  // implements Message ----------------------------------------------

  inline Gw_tpms_tire_0x361_361* New() const PROTOBUF_FINAL { return New(NULL); }

  Gw_tpms_tire_0x361_361* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gw_tpms_tire_0x361_361& from);
  void MergeFrom(const Gw_tpms_tire_0x361_361& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gw_tpms_tire_0x361_361* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Tpms_lf_pressure_warningType;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_NO_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_NO_WARNING;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_LOST_SENSOR =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOST_SENSOR;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_SENSOR_BATTERY_LOW =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
  static const Tpms_lf_pressure_warningType TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
  static inline bool Tpms_lf_pressure_warningType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_IsValid(value);
  }
  static const Tpms_lf_pressure_warningType Tpms_lf_pressure_warningType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_MIN;
  static const Tpms_lf_pressure_warningType Tpms_lf_pressure_warningType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_MAX;
  static const int Tpms_lf_pressure_warningType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Tpms_lf_pressure_warningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_lf_pressure_warningType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_descriptor();
  }
  static inline const ::std::string& Tpms_lf_pressure_warningType_Name(Tpms_lf_pressure_warningType value) {
    return Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Name(value);
  }
  static inline bool Tpms_lf_pressure_warningType_Parse(const ::std::string& name,
      Tpms_lf_pressure_warningType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Tpms_rf_pressure_warningType;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_NO_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_NO_WARNING;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_LOST_SENSOR =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOST_SENSOR;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_SENSOR_BATTERY_LOW =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
  static const Tpms_rf_pressure_warningType TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
  static inline bool Tpms_rf_pressure_warningType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_IsValid(value);
  }
  static const Tpms_rf_pressure_warningType Tpms_rf_pressure_warningType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_MIN;
  static const Tpms_rf_pressure_warningType Tpms_rf_pressure_warningType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_MAX;
  static const int Tpms_rf_pressure_warningType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Tpms_rf_pressure_warningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_rf_pressure_warningType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_descriptor();
  }
  static inline const ::std::string& Tpms_rf_pressure_warningType_Name(Tpms_rf_pressure_warningType value) {
    return Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Name(value);
  }
  static inline bool Tpms_rf_pressure_warningType_Parse(const ::std::string& name,
      Tpms_rf_pressure_warningType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_system_statusType Tpms_system_statusType;
  static const Tpms_system_statusType TPMS_SYSTEM_STATUS_NO_ANY_ERROR =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_NO_ANY_ERROR;
  static const Tpms_system_statusType TPMS_SYSTEM_STATUS_SYSTEM_ERROR =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_SYSTEM_ERROR;
  static const Tpms_system_statusType TPMS_SYSTEM_STATUS_SYETEM_WAIT_FOR_LEARNING =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_SYETEM_WAIT_FOR_LEARNING;
  static const Tpms_system_statusType TPMS_SYSTEM_STATUS_WINTER_MODE =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_TPMS_SYSTEM_STATUS_WINTER_MODE;
  static inline bool Tpms_system_statusType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_system_statusType_IsValid(value);
  }
  static const Tpms_system_statusType Tpms_system_statusType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_MIN;
  static const Tpms_system_statusType Tpms_system_statusType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_MAX;
  static const int Tpms_system_statusType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_system_statusType_Tpms_system_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_system_statusType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_system_statusType_descriptor();
  }
  static inline const ::std::string& Tpms_system_statusType_Name(Tpms_system_statusType value) {
    return Gw_tpms_tire_0x361_361_Tpms_system_statusType_Name(value);
  }
  static inline bool Tpms_system_statusType_Parse(const ::std::string& name,
      Tpms_system_statusType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_system_statusType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Tpms_rr_pressure_warningType;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_NO_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_NO_WARNING;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_LOST_SENSOR =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOST_SENSOR;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_SENSOR_BATTERY_LOW =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
  static const Tpms_rr_pressure_warningType TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
  static inline bool Tpms_rr_pressure_warningType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_IsValid(value);
  }
  static const Tpms_rr_pressure_warningType Tpms_rr_pressure_warningType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_MIN;
  static const Tpms_rr_pressure_warningType Tpms_rr_pressure_warningType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_MAX;
  static const int Tpms_rr_pressure_warningType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Tpms_rr_pressure_warningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_rr_pressure_warningType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_descriptor();
  }
  static inline const ::std::string& Tpms_rr_pressure_warningType_Name(Tpms_rr_pressure_warningType value) {
    return Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Name(value);
  }
  static inline bool Tpms_rr_pressure_warningType_Parse(const ::std::string& name,
      Tpms_rr_pressure_warningType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Tpms_lr_pressure_warningType;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_NO_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_NO_WARNING;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_LOST_SENSOR =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOST_SENSOR;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_SENSOR_BATTERY_LOW =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
  static const Tpms_lr_pressure_warningType TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
  static inline bool Tpms_lr_pressure_warningType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_IsValid(value);
  }
  static const Tpms_lr_pressure_warningType Tpms_lr_pressure_warningType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_MIN;
  static const Tpms_lr_pressure_warningType Tpms_lr_pressure_warningType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_MAX;
  static const int Tpms_lr_pressure_warningType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Tpms_lr_pressure_warningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_lr_pressure_warningType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_descriptor();
  }
  static inline const ::std::string& Tpms_lr_pressure_warningType_Name(Tpms_lr_pressure_warningType value) {
    return Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Name(value);
  }
  static inline bool Tpms_lr_pressure_warningType_Parse(const ::std::string& name,
      Tpms_lr_pressure_warningType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Tpms_temperature_warningType;
  static const Tpms_temperature_warningType TPMS_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_TPMS_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING;
  static const Tpms_temperature_warningType TPMS_TEMPERATURE_WARNING_TEMPERATURE_WARNING =
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_TPMS_TEMPERATURE_WARNING_TEMPERATURE_WARNING;
  static inline bool Tpms_temperature_warningType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_IsValid(value);
  }
  static const Tpms_temperature_warningType Tpms_temperature_warningType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_MIN;
  static const Tpms_temperature_warningType Tpms_temperature_warningType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_MAX;
  static const int Tpms_temperature_warningType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Tpms_temperature_warningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_temperature_warningType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_descriptor();
  }
  static inline const ::std::string& Tpms_temperature_warningType_Name(Tpms_temperature_warningType value) {
    return Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Name(value);
  }
  static inline bool Tpms_temperature_warningType_Parse(const ::std::string& name,
      Tpms_temperature_warningType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_resrvedType Tpms_resrvedType;
  static const Tpms_resrvedType TPMS_RESRVED_RESERVED =
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_TPMS_RESRVED_RESERVED;
  static const Tpms_resrvedType TPMS_RESRVED_RESERVED1 =
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_TPMS_RESRVED_RESERVED1;
  static inline bool Tpms_resrvedType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_resrvedType_IsValid(value);
  }
  static const Tpms_resrvedType Tpms_resrvedType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_MIN;
  static const Tpms_resrvedType Tpms_resrvedType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_MAX;
  static const int Tpms_resrvedType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_resrvedType_Tpms_resrvedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_resrvedType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_resrvedType_descriptor();
  }
  static inline const ::std::string& Tpms_resrvedType_Name(Tpms_resrvedType value) {
    return Gw_tpms_tire_0x361_361_Tpms_resrvedType_Name(value);
  }
  static inline bool Tpms_resrvedType_Parse(const ::std::string& name,
      Tpms_resrvedType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_resrvedType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tire_positionType Tire_positionType;
  static const Tire_positionType TIRE_POSITION_NO_ANY_SENSOR_ERROR =
    Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_NO_ANY_SENSOR_ERROR;
  static const Tire_positionType TIRE_POSITION_LEFT_FRONT_TIRE =
    Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_LEFT_FRONT_TIRE;
  static const Tire_positionType TIRE_POSITION_RIGHT_FRONT_TIRE =
    Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RIGHT_FRONT_TIRE;
  static const Tire_positionType TIRE_POSITION_RIGHT_REAR_TIRE =
    Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RIGHT_REAR_TIRE;
  static const Tire_positionType TIRE_POSITION_LEFT_REAR_TIRE =
    Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_LEFT_REAR_TIRE;
  static const Tire_positionType TIRE_POSITION_RESERVED =
    Gw_tpms_tire_0x361_361_Tire_positionType_TIRE_POSITION_RESERVED;
  static inline bool Tire_positionType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tire_positionType_IsValid(value);
  }
  static const Tire_positionType Tire_positionType_MIN =
    Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_MIN;
  static const Tire_positionType Tire_positionType_MAX =
    Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_MAX;
  static const int Tire_positionType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tire_positionType_Tire_positionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tire_positionType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tire_positionType_descriptor();
  }
  static inline const ::std::string& Tire_positionType_Name(Tire_positionType value) {
    return Gw_tpms_tire_0x361_361_Tire_positionType_Name(value);
  }
  static inline bool Tire_positionType_Parse(const ::std::string& name,
      Tire_positionType* value) {
    return Gw_tpms_tire_0x361_361_Tire_positionType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Tpms_lamp_statusType;
  static const Tpms_lamp_statusType TPMS_LAMP_STATUS_NO_LAMP_LIGHT =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_NO_LAMP_LIGHT;
  static const Tpms_lamp_statusType TPMS_LAMP_STATUS_LAMP_FLASH =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_LAMP_FLASH;
  static const Tpms_lamp_statusType TPMS_LAMP_STATUS_LAMP_LIGHT =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_LAMP_LIGHT;
  static const Tpms_lamp_statusType TPMS_LAMP_STATUS_RESEVED =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_TPMS_LAMP_STATUS_RESEVED;
  static inline bool Tpms_lamp_statusType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_IsValid(value);
  }
  static const Tpms_lamp_statusType Tpms_lamp_statusType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_MIN;
  static const Tpms_lamp_statusType Tpms_lamp_statusType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_MAX;
  static const int Tpms_lamp_statusType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Tpms_lamp_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_lamp_statusType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_descriptor();
  }
  static inline const ::std::string& Tpms_lamp_statusType_Name(Tpms_lamp_statusType value) {
    return Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Name(value);
  }
  static inline bool Tpms_lamp_statusType_Parse(const ::std::string& name,
      Tpms_lamp_statusType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_Parse(name, value);
  }

  typedef Gw_tpms_tire_0x361_361_Tpms_al_stateType Tpms_al_stateType;
  static const Tpms_al_stateType TPMS_AL_STATE_DEFAULTS =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_DEFAULTS;
  static const Tpms_al_stateType TPMS_AL_STATE_SELF_LEARNING =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_SELF_LEARNING;
  static const Tpms_al_stateType TPMS_AL_STATE_SELF_LEARNING_OVER =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_SELF_LEARNING_OVER;
  static const Tpms_al_stateType TPMS_AL_STATE_RESERVE =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_TPMS_AL_STATE_RESERVE;
  static inline bool Tpms_al_stateType_IsValid(int value) {
    return Gw_tpms_tire_0x361_361_Tpms_al_stateType_IsValid(value);
  }
  static const Tpms_al_stateType Tpms_al_stateType_MIN =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_MIN;
  static const Tpms_al_stateType Tpms_al_stateType_MAX =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_MAX;
  static const int Tpms_al_stateType_ARRAYSIZE =
    Gw_tpms_tire_0x361_361_Tpms_al_stateType_Tpms_al_stateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tpms_al_stateType_descriptor() {
    return Gw_tpms_tire_0x361_361_Tpms_al_stateType_descriptor();
  }
  static inline const ::std::string& Tpms_al_stateType_Name(Tpms_al_stateType value) {
    return Gw_tpms_tire_0x361_361_Tpms_al_stateType_Name(value);
  }
  static inline bool Tpms_al_stateType_Parse(const ::std::string& name,
      Tpms_al_stateType* value) {
    return Gw_tpms_tire_0x361_361_Tpms_al_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double tpms_rf_pressure = 1;
  bool has_tpms_rf_pressure() const;
  void clear_tpms_rf_pressure();
  static const int kTpmsRfPressureFieldNumber = 1;
  double tpms_rf_pressure() const;
  void set_tpms_rf_pressure(double value);

  // optional double tpms_rr_pressure = 2;
  bool has_tpms_rr_pressure() const;
  void clear_tpms_rr_pressure();
  static const int kTpmsRrPressureFieldNumber = 2;
  double tpms_rr_pressure() const;
  void set_tpms_rr_pressure(double value);

  // optional double tpms_lr_pressure = 3;
  bool has_tpms_lr_pressure() const;
  void clear_tpms_lr_pressure();
  static const int kTpmsLrPressureFieldNumber = 3;
  double tpms_lr_pressure() const;
  void set_tpms_lr_pressure(double value);

  // optional int32 tpms_tire_temperature = 4;
  bool has_tpms_tire_temperature() const;
  void clear_tpms_tire_temperature();
  static const int kTpmsTireTemperatureFieldNumber = 4;
  ::google::protobuf::int32 tpms_tire_temperature() const;
  void set_tpms_tire_temperature(::google::protobuf::int32 value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
  bool has_tpms_lf_pressure_warning() const;
  void clear_tpms_lf_pressure_warning();
  static const int kTpmsLfPressureWarningFieldNumber = 5;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType tpms_lf_pressure_warning() const;
  void set_tpms_lf_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
  bool has_tpms_rf_pressure_warning() const;
  void clear_tpms_rf_pressure_warning();
  static const int kTpmsRfPressureWarningFieldNumber = 6;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType tpms_rf_pressure_warning() const;
  void set_tpms_rf_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
  bool has_tpms_system_status() const;
  void clear_tpms_system_status();
  static const int kTpmsSystemStatusFieldNumber = 7;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType tpms_system_status() const;
  void set_tpms_system_status(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
  bool has_tpms_rr_pressure_warning() const;
  void clear_tpms_rr_pressure_warning();
  static const int kTpmsRrPressureWarningFieldNumber = 8;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType tpms_rr_pressure_warning() const;
  void set_tpms_rr_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
  bool has_tpms_lr_pressure_warning() const;
  void clear_tpms_lr_pressure_warning();
  static const int kTpmsLrPressureWarningFieldNumber = 9;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType tpms_lr_pressure_warning() const;
  void set_tpms_lr_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
  bool has_tpms_temperature_warning() const;
  void clear_tpms_temperature_warning();
  static const int kTpmsTemperatureWarningFieldNumber = 10;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType tpms_temperature_warning() const;
  void set_tpms_temperature_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
  bool has_tpms_resrved() const;
  void clear_tpms_resrved();
  static const int kTpmsResrvedFieldNumber = 11;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType tpms_resrved() const;
  void set_tpms_resrved(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
  bool has_tire_position() const;
  void clear_tire_position();
  static const int kTirePositionFieldNumber = 12;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType tire_position() const;
  void set_tire_position(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
  bool has_tpms_lamp_status() const;
  void clear_tpms_lamp_status();
  static const int kTpmsLampStatusFieldNumber = 13;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType tpms_lamp_status() const;
  void set_tpms_lamp_status(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType value);

  // optional double tpms_lf_pressure = 15;
  bool has_tpms_lf_pressure() const;
  void clear_tpms_lf_pressure();
  static const int kTpmsLfPressureFieldNumber = 15;
  double tpms_lf_pressure() const;
  void set_tpms_lf_pressure(double value);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
  bool has_tpms_al_state() const;
  void clear_tpms_al_state();
  static const int kTpmsAlStateFieldNumber = 14;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType tpms_al_state() const;
  void set_tpms_al_state(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
 private:
  void set_has_tpms_rf_pressure();
  void clear_has_tpms_rf_pressure();
  void set_has_tpms_rr_pressure();
  void clear_has_tpms_rr_pressure();
  void set_has_tpms_lr_pressure();
  void clear_has_tpms_lr_pressure();
  void set_has_tpms_tire_temperature();
  void clear_has_tpms_tire_temperature();
  void set_has_tpms_lf_pressure_warning();
  void clear_has_tpms_lf_pressure_warning();
  void set_has_tpms_rf_pressure_warning();
  void clear_has_tpms_rf_pressure_warning();
  void set_has_tpms_system_status();
  void clear_has_tpms_system_status();
  void set_has_tpms_rr_pressure_warning();
  void clear_has_tpms_rr_pressure_warning();
  void set_has_tpms_lr_pressure_warning();
  void clear_has_tpms_lr_pressure_warning();
  void set_has_tpms_temperature_warning();
  void clear_has_tpms_temperature_warning();
  void set_has_tpms_resrved();
  void clear_has_tpms_resrved();
  void set_has_tire_position();
  void clear_has_tire_position();
  void set_has_tpms_lamp_status();
  void clear_has_tpms_lamp_status();
  void set_has_tpms_al_state();
  void clear_has_tpms_al_state();
  void set_has_tpms_lf_pressure();
  void clear_has_tpms_lf_pressure();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double tpms_rf_pressure_;
  double tpms_rr_pressure_;
  double tpms_lr_pressure_;
  ::google::protobuf::int32 tpms_tire_temperature_;
  int tpms_lf_pressure_warning_;
  int tpms_rf_pressure_warning_;
  int tpms_system_status_;
  int tpms_rr_pressure_warning_;
  int tpms_lr_pressure_warning_;
  int tpms_temperature_warning_;
  int tpms_resrved_;
  int tire_position_;
  int tpms_lamp_status_;
  double tpms_lf_pressure_;
  int tpms_al_state_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_datainfo_506 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_datainfo_506) */ {
 public:
  Ins_datainfo_506();
  virtual ~Ins_datainfo_506();

  Ins_datainfo_506(const Ins_datainfo_506& from);

  inline Ins_datainfo_506& operator=(const Ins_datainfo_506& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_datainfo_506& default_instance();

  static inline const Ins_datainfo_506* internal_default_instance() {
    return reinterpret_cast<const Ins_datainfo_506*>(
               &_Ins_datainfo_506_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(Ins_datainfo_506* other);

  // implements Message ----------------------------------------------

  inline Ins_datainfo_506* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_datainfo_506* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_datainfo_506& from);
  void MergeFrom(const Ins_datainfo_506& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_datainfo_506* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ins_datainfo_506_Ins_car_statusType Ins_car_statusType;
  static const Ins_car_statusType INS_CAR_STATUS_RECEIVEWHEELSPEED =
    Ins_datainfo_506_Ins_car_statusType_INS_CAR_STATUS_RECEIVEWHEELSPEED;
  static const Ins_car_statusType INS_CAR_STATUS_NORECEIVE =
    Ins_datainfo_506_Ins_car_statusType_INS_CAR_STATUS_NORECEIVE;
  static inline bool Ins_car_statusType_IsValid(int value) {
    return Ins_datainfo_506_Ins_car_statusType_IsValid(value);
  }
  static const Ins_car_statusType Ins_car_statusType_MIN =
    Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_MIN;
  static const Ins_car_statusType Ins_car_statusType_MAX =
    Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_MAX;
  static const int Ins_car_statusType_ARRAYSIZE =
    Ins_datainfo_506_Ins_car_statusType_Ins_car_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ins_car_statusType_descriptor() {
    return Ins_datainfo_506_Ins_car_statusType_descriptor();
  }
  static inline const ::std::string& Ins_car_statusType_Name(Ins_car_statusType value) {
    return Ins_datainfo_506_Ins_car_statusType_Name(value);
  }
  static inline bool Ins_car_statusType_Parse(const ::std::string& name,
      Ins_car_statusType* value) {
    return Ins_datainfo_506_Ins_car_statusType_Parse(name, value);
  }

  typedef Ins_datainfo_506_Ins_statusType Ins_statusType;
  static const Ins_statusType INS_STATUS_NONE =
    Ins_datainfo_506_Ins_statusType_INS_STATUS_NONE;
  static const Ins_statusType INS_STATUS_ATTITUDEINITIALIZATION =
    Ins_datainfo_506_Ins_statusType_INS_STATUS_ATTITUDEINITIALIZATION;
  static const Ins_statusType INS_STATUS_NAVIGATION =
    Ins_datainfo_506_Ins_statusType_INS_STATUS_NAVIGATION;
  static inline bool Ins_statusType_IsValid(int value) {
    return Ins_datainfo_506_Ins_statusType_IsValid(value);
  }
  static const Ins_statusType Ins_statusType_MIN =
    Ins_datainfo_506_Ins_statusType_Ins_statusType_MIN;
  static const Ins_statusType Ins_statusType_MAX =
    Ins_datainfo_506_Ins_statusType_Ins_statusType_MAX;
  static const int Ins_statusType_ARRAYSIZE =
    Ins_datainfo_506_Ins_statusType_Ins_statusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Ins_statusType_descriptor() {
    return Ins_datainfo_506_Ins_statusType_descriptor();
  }
  static inline const ::std::string& Ins_statusType_Name(Ins_statusType value) {
    return Ins_datainfo_506_Ins_statusType_Name(value);
  }
  static inline bool Ins_statusType_Parse(const ::std::string& name,
      Ins_statusType* value) {
    return Ins_datainfo_506_Ins_statusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ins_gpsflag_pos = 1;
  bool has_ins_gpsflag_pos() const;
  void clear_ins_gpsflag_pos();
  static const int kInsGpsflagPosFieldNumber = 1;
  ::google::protobuf::int32 ins_gpsflag_pos() const;
  void set_ins_gpsflag_pos(::google::protobuf::int32 value);

  // optional int32 ins_numsv = 2;
  bool has_ins_numsv() const;
  void clear_ins_numsv();
  static const int kInsNumsvFieldNumber = 2;
  ::google::protobuf::int32 ins_numsv() const;
  void set_ins_numsv(::google::protobuf::int32 value);

  // optional int32 ins_gpsflag_heading = 3;
  bool has_ins_gpsflag_heading() const;
  void clear_ins_gpsflag_heading();
  static const int kInsGpsflagHeadingFieldNumber = 3;
  ::google::protobuf::int32 ins_gpsflag_heading() const;
  void set_ins_gpsflag_heading(::google::protobuf::int32 value);

  // optional int32 ins_gps_age = 4;
  bool has_ins_gps_age() const;
  void clear_ins_gps_age();
  static const int kInsGpsAgeFieldNumber = 4;
  ::google::protobuf::int32 ins_gps_age() const;
  void set_ins_gps_age(::google::protobuf::int32 value);

  // optional int32 ins_car_status = 5;
  bool has_ins_car_status() const;
  void clear_ins_car_status();
  static const int kInsCarStatusFieldNumber = 5;
  ::google::protobuf::int32 ins_car_status() const;
  void set_ins_car_status(::google::protobuf::int32 value);

  // optional int32 ins_status = 6;
  bool has_ins_status() const;
  void clear_ins_status();
  static const int kInsStatusFieldNumber = 6;
  ::google::protobuf::int32 ins_status() const;
  void set_ins_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_datainfo_506)
 private:
  void set_has_ins_gpsflag_pos();
  void clear_has_ins_gpsflag_pos();
  void set_has_ins_numsv();
  void clear_has_ins_numsv();
  void set_has_ins_gpsflag_heading();
  void clear_has_ins_gpsflag_heading();
  void set_has_ins_gps_age();
  void clear_has_ins_gps_age();
  void set_has_ins_car_status();
  void clear_has_ins_car_status();
  void set_has_ins_status();
  void clear_has_ins_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ins_gpsflag_pos_;
  ::google::protobuf::int32 ins_numsv_;
  ::google::protobuf::int32 ins_gpsflag_heading_;
  ::google::protobuf::int32 ins_gps_age_;
  ::google::protobuf::int32 ins_car_status_;
  ::google::protobuf::int32 ins_status_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_std_507 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_std_507) */ {
 public:
  Ins_std_507();
  virtual ~Ins_std_507();

  Ins_std_507(const Ins_std_507& from);

  inline Ins_std_507& operator=(const Ins_std_507& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_std_507& default_instance();

  static inline const Ins_std_507* internal_default_instance() {
    return reinterpret_cast<const Ins_std_507*>(
               &_Ins_std_507_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(Ins_std_507* other);

  // implements Message ----------------------------------------------

  inline Ins_std_507* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_std_507* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_std_507& from);
  void MergeFrom(const Ins_std_507& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_std_507* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ins_std_lat = 1;
  bool has_ins_std_lat() const;
  void clear_ins_std_lat();
  static const int kInsStdLatFieldNumber = 1;
  double ins_std_lat() const;
  void set_ins_std_lat(double value);

  // optional double ins_std_lon = 2;
  bool has_ins_std_lon() const;
  void clear_ins_std_lon();
  static const int kInsStdLonFieldNumber = 2;
  double ins_std_lon() const;
  void set_ins_std_lon(double value);

  // optional double ins_std_locatheight = 3;
  bool has_ins_std_locatheight() const;
  void clear_ins_std_locatheight();
  static const int kInsStdLocatheightFieldNumber = 3;
  double ins_std_locatheight() const;
  void set_ins_std_locatheight(double value);

  // optional double inins_std_heading = 4;
  bool has_inins_std_heading() const;
  void clear_inins_std_heading();
  static const int kIninsStdHeadingFieldNumber = 4;
  double inins_std_heading() const;
  void set_inins_std_heading(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_std_507)
 private:
  void set_has_ins_std_lat();
  void clear_has_ins_std_lat();
  void set_has_ins_std_lon();
  void clear_has_ins_std_lon();
  void set_has_ins_std_locatheight();
  void clear_has_ins_std_locatheight();
  void set_has_inins_std_heading();
  void clear_has_inins_std_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ins_std_lat_;
  double ins_std_lon_;
  double ins_std_locatheight_;
  double inins_std_heading_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_latitudelongitude_504 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_latitudelongitude_504) */ {
 public:
  Ins_latitudelongitude_504();
  virtual ~Ins_latitudelongitude_504();

  Ins_latitudelongitude_504(const Ins_latitudelongitude_504& from);

  inline Ins_latitudelongitude_504& operator=(const Ins_latitudelongitude_504& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_latitudelongitude_504& default_instance();

  static inline const Ins_latitudelongitude_504* internal_default_instance() {
    return reinterpret_cast<const Ins_latitudelongitude_504*>(
               &_Ins_latitudelongitude_504_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(Ins_latitudelongitude_504* other);

  // implements Message ----------------------------------------------

  inline Ins_latitudelongitude_504* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_latitudelongitude_504* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_latitudelongitude_504& from);
  void MergeFrom(const Ins_latitudelongitude_504& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_latitudelongitude_504* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ins__latitude = 1;
  bool has_ins__latitude() const;
  void clear_ins__latitude();
  static const int kInsLatitudeFieldNumber = 1;
  double ins__latitude() const;
  void set_ins__latitude(double value);

  // optional double ins_longitude = 2;
  bool has_ins_longitude() const;
  void clear_ins_longitude();
  static const int kInsLongitudeFieldNumber = 2;
  double ins_longitude() const;
  void set_ins_longitude(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_latitudelongitude_504)
 private:
  void set_has_ins__latitude();
  void clear_has_ins__latitude();
  void set_has_ins_longitude();
  void clear_has_ins_longitude();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ins__latitude_;
  double ins_longitude_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_speed_505 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_speed_505) */ {
 public:
  Ins_speed_505();
  virtual ~Ins_speed_505();

  Ins_speed_505(const Ins_speed_505& from);

  inline Ins_speed_505& operator=(const Ins_speed_505& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_speed_505& default_instance();

  static inline const Ins_speed_505* internal_default_instance() {
    return reinterpret_cast<const Ins_speed_505*>(
               &_Ins_speed_505_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(Ins_speed_505* other);

  // implements Message ----------------------------------------------

  inline Ins_speed_505* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_speed_505* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_speed_505& from);
  void MergeFrom(const Ins_speed_505& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_speed_505* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ins_northspd = 1;
  bool has_ins_northspd() const;
  void clear_ins_northspd();
  static const int kInsNorthspdFieldNumber = 1;
  double ins_northspd() const;
  void set_ins_northspd(double value);

  // optional double ins_eastspd = 2;
  bool has_ins_eastspd() const;
  void clear_ins_eastspd();
  static const int kInsEastspdFieldNumber = 2;
  double ins_eastspd() const;
  void set_ins_eastspd(double value);

  // optional double ins_togroundspd = 3;
  bool has_ins_togroundspd() const;
  void clear_ins_togroundspd();
  static const int kInsTogroundspdFieldNumber = 3;
  double ins_togroundspd() const;
  void set_ins_togroundspd(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_speed_505)
 private:
  void set_has_ins_northspd();
  void clear_has_ins_northspd();
  void set_has_ins_eastspd();
  void clear_has_ins_eastspd();
  void set_has_ins_togroundspd();
  void clear_has_ins_togroundspd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ins_northspd_;
  double ins_eastspd_;
  double ins_togroundspd_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_headingpitchroll_502 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_headingpitchroll_502) */ {
 public:
  Ins_headingpitchroll_502();
  virtual ~Ins_headingpitchroll_502();

  Ins_headingpitchroll_502(const Ins_headingpitchroll_502& from);

  inline Ins_headingpitchroll_502& operator=(const Ins_headingpitchroll_502& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_headingpitchroll_502& default_instance();

  static inline const Ins_headingpitchroll_502* internal_default_instance() {
    return reinterpret_cast<const Ins_headingpitchroll_502*>(
               &_Ins_headingpitchroll_502_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(Ins_headingpitchroll_502* other);

  // implements Message ----------------------------------------------

  inline Ins_headingpitchroll_502* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_headingpitchroll_502* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_headingpitchroll_502& from);
  void MergeFrom(const Ins_headingpitchroll_502& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_headingpitchroll_502* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ins_pitchangle = 1;
  bool has_ins_pitchangle() const;
  void clear_ins_pitchangle();
  static const int kInsPitchangleFieldNumber = 1;
  double ins_pitchangle() const;
  void set_ins_pitchangle(double value);

  // optional double ins_rollangle = 2;
  bool has_ins_rollangle() const;
  void clear_ins_rollangle();
  static const int kInsRollangleFieldNumber = 2;
  double ins_rollangle() const;
  void set_ins_rollangle(double value);

  // optional double ins_headingangle = 3;
  bool has_ins_headingangle() const;
  void clear_ins_headingangle();
  static const int kInsHeadingangleFieldNumber = 3;
  double ins_headingangle() const;
  void set_ins_headingangle(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_headingpitchroll_502)
 private:
  void set_has_ins_pitchangle();
  void clear_has_ins_pitchangle();
  void set_has_ins_rollangle();
  void clear_has_ins_rollangle();
  void set_has_ins_headingangle();
  void clear_has_ins_headingangle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ins_pitchangle_;
  double ins_rollangle_;
  double ins_headingangle_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_heightandtime_503 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_heightandtime_503) */ {
 public:
  Ins_heightandtime_503();
  virtual ~Ins_heightandtime_503();

  Ins_heightandtime_503(const Ins_heightandtime_503& from);

  inline Ins_heightandtime_503& operator=(const Ins_heightandtime_503& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_heightandtime_503& default_instance();

  static inline const Ins_heightandtime_503* internal_default_instance() {
    return reinterpret_cast<const Ins_heightandtime_503*>(
               &_Ins_heightandtime_503_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(Ins_heightandtime_503* other);

  // implements Message ----------------------------------------------

  inline Ins_heightandtime_503* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_heightandtime_503* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_heightandtime_503& from);
  void MergeFrom(const Ins_heightandtime_503& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_heightandtime_503* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ins_locatheight = 1;
  bool has_ins_locatheight() const;
  void clear_ins_locatheight();
  static const int kInsLocatheightFieldNumber = 1;
  double ins_locatheight() const;
  void set_ins_locatheight(double value);

  // optional int32 ins_time = 2;
  bool has_ins_time() const;
  void clear_ins_time();
  static const int kInsTimeFieldNumber = 2;
  ::google::protobuf::int32 ins_time() const;
  void set_ins_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_heightandtime_503)
 private:
  void set_has_ins_locatheight();
  void clear_has_ins_locatheight();
  void set_has_ins_time();
  void clear_has_ins_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double ins_locatheight_;
  ::google::protobuf::int32 ins_time_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_gyro_501 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_gyro_501) */ {
 public:
  Ins_gyro_501();
  virtual ~Ins_gyro_501();

  Ins_gyro_501(const Ins_gyro_501& from);

  inline Ins_gyro_501& operator=(const Ins_gyro_501& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_gyro_501& default_instance();

  static inline const Ins_gyro_501* internal_default_instance() {
    return reinterpret_cast<const Ins_gyro_501*>(
               &_Ins_gyro_501_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(Ins_gyro_501* other);

  // implements Message ----------------------------------------------

  inline Ins_gyro_501* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_gyro_501* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_gyro_501& from);
  void MergeFrom(const Ins_gyro_501& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_gyro_501* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double gyro_x = 1;
  bool has_gyro_x() const;
  void clear_gyro_x();
  static const int kGyroXFieldNumber = 1;
  double gyro_x() const;
  void set_gyro_x(double value);

  // optional double gyro_y = 2;
  bool has_gyro_y() const;
  void clear_gyro_y();
  static const int kGyroYFieldNumber = 2;
  double gyro_y() const;
  void set_gyro_y(double value);

  // optional double gyro_z = 3;
  bool has_gyro_z() const;
  void clear_gyro_z();
  static const int kGyroZFieldNumber = 3;
  double gyro_z() const;
  void set_gyro_z(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_gyro_501)
 private:
  void set_has_gyro_x();
  void clear_has_gyro_x();
  void set_has_gyro_y();
  void clear_has_gyro_y();
  void set_has_gyro_z();
  void clear_has_gyro_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins_acc_500 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Ins_acc_500) */ {
 public:
  Ins_acc_500();
  virtual ~Ins_acc_500();

  Ins_acc_500(const Ins_acc_500& from);

  inline Ins_acc_500& operator=(const Ins_acc_500& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ins_acc_500& default_instance();

  static inline const Ins_acc_500* internal_default_instance() {
    return reinterpret_cast<const Ins_acc_500*>(
               &_Ins_acc_500_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(Ins_acc_500* other);

  // implements Message ----------------------------------------------

  inline Ins_acc_500* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins_acc_500* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ins_acc_500& from);
  void MergeFrom(const Ins_acc_500& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ins_acc_500* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double acc_x = 1;
  bool has_acc_x() const;
  void clear_acc_x();
  static const int kAccXFieldNumber = 1;
  double acc_x() const;
  void set_acc_x(double value);

  // optional double acc_y = 2;
  bool has_acc_y() const;
  void clear_acc_y();
  static const int kAccYFieldNumber = 2;
  double acc_y() const;
  void set_acc_y(double value);

  // optional double acc_z = 3;
  bool has_acc_z() const;
  void clear_acc_z();
  static const int kAccZFieldNumber = 3;
  double acc_z() const;
  void set_acc_z(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Ins_acc_500)
 private:
  void set_has_acc_x();
  void clear_has_acc_x();
  void set_has_acc_y();
  void clear_has_acc_y();
  void set_has_acc_z();
  void clear_has_acc_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cx75 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Cx75) */ {
 public:
  Cx75();
  virtual ~Cx75();

  Cx75(const Cx75& from);

  inline Cx75& operator=(const Cx75& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cx75& default_instance();

  static inline const Cx75* internal_default_instance() {
    return reinterpret_cast<const Cx75*>(
               &_Cx75_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(Cx75* other);

  // implements Message ----------------------------------------------

  inline Cx75* New() const PROTOBUF_FINAL { return New(NULL); }

  Cx75* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cx75& from);
  void MergeFrom(const Cx75& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cx75* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
  bool has_gw_ems_sts_0x151_151() const;
  void clear_gw_ems_sts_0x151_151();
  static const int kGwEmsSts0X151151FieldNumber = 1;
  const ::jmc_auto::canbus::Gw_ems_sts_0x151_151& gw_ems_sts_0x151_151() const;
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151* mutable_gw_ems_sts_0x151_151();
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151* release_gw_ems_sts_0x151_151();
  void set_allocated_gw_ems_sts_0x151_151(::jmc_auto::canbus::Gw_ems_sts_0x151_151* gw_ems_sts_0x151_151);

  // optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
  bool has_esp_raw_0x212_212() const;
  void clear_esp_raw_0x212_212();
  static const int kEspRaw0X212212FieldNumber = 2;
  const ::jmc_auto::canbus::Esp_raw_0x212_212& esp_raw_0x212_212() const;
  ::jmc_auto::canbus::Esp_raw_0x212_212* mutable_esp_raw_0x212_212();
  ::jmc_auto::canbus::Esp_raw_0x212_212* release_esp_raw_0x212_212();
  void set_allocated_esp_raw_0x212_212(::jmc_auto::canbus::Esp_raw_0x212_212* esp_raw_0x212_212);

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
  bool has_gw_bcm_door_0x310_310() const;
  void clear_gw_bcm_door_0x310_310();
  static const int kGwBcmDoor0X310310FieldNumber = 3;
  const ::jmc_auto::canbus::Gw_bcm_door_0x310_310& gw_bcm_door_0x310_310() const;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310* mutable_gw_bcm_door_0x310_310();
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310* release_gw_bcm_door_0x310_310();
  void set_allocated_gw_bcm_door_0x310_310(::jmc_auto::canbus::Gw_bcm_door_0x310_310* gw_bcm_door_0x310_310);

  // optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
  bool has_pam_0x270_270() const;
  void clear_pam_0x270_270();
  static const int kPam0X270270FieldNumber = 4;
  const ::jmc_auto::canbus::Pam_0x270_270& pam_0x270_270() const;
  ::jmc_auto::canbus::Pam_0x270_270* mutable_pam_0x270_270();
  ::jmc_auto::canbus::Pam_0x270_270* release_pam_0x270_270();
  void set_allocated_pam_0x270_270(::jmc_auto::canbus::Pam_0x270_270* pam_0x270_270);

  // optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
  bool has_pam_0x271_271() const;
  void clear_pam_0x271_271();
  static const int kPam0X271271FieldNumber = 5;
  const ::jmc_auto::canbus::Pam_0x271_271& pam_0x271_271() const;
  ::jmc_auto::canbus::Pam_0x271_271* mutable_pam_0x271_271();
  ::jmc_auto::canbus::Pam_0x271_271* release_pam_0x271_271();
  void set_allocated_pam_0x271_271(::jmc_auto::canbus::Pam_0x271_271* pam_0x271_271);

  // optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
  bool has_pam_0x272_272() const;
  void clear_pam_0x272_272();
  static const int kPam0X272272FieldNumber = 6;
  const ::jmc_auto::canbus::Pam_0x272_272& pam_0x272_272() const;
  ::jmc_auto::canbus::Pam_0x272_272* mutable_pam_0x272_272();
  ::jmc_auto::canbus::Pam_0x272_272* release_pam_0x272_272();
  void set_allocated_pam_0x272_272(::jmc_auto::canbus::Pam_0x272_272* pam_0x272_272);

  // optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
  bool has_mrr_0x238_238() const;
  void clear_mrr_0x238_238();
  static const int kMrr0X238238FieldNumber = 7;
  const ::jmc_auto::canbus::Mrr_0x238_238& mrr_0x238_238() const;
  ::jmc_auto::canbus::Mrr_0x238_238* mutable_mrr_0x238_238();
  ::jmc_auto::canbus::Mrr_0x238_238* release_mrr_0x238_238();
  void set_allocated_mrr_0x238_238(::jmc_auto::canbus::Mrr_0x238_238* mrr_0x238_238);

  // optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
  bool has_mrr_0x239_239() const;
  void clear_mrr_0x239_239();
  static const int kMrr0X239239FieldNumber = 8;
  const ::jmc_auto::canbus::Mrr_0x239_239& mrr_0x239_239() const;
  ::jmc_auto::canbus::Mrr_0x239_239* mutable_mrr_0x239_239();
  ::jmc_auto::canbus::Mrr_0x239_239* release_mrr_0x239_239();
  void set_allocated_mrr_0x239_239(::jmc_auto::canbus::Mrr_0x239_239* mrr_0x239_239);

  // optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
  bool has_esp_direction_0x235_235() const;
  void clear_esp_direction_0x235_235();
  static const int kEspDirection0X235235FieldNumber = 9;
  const ::jmc_auto::canbus::Esp_direction_0x235_235& esp_direction_0x235_235() const;
  ::jmc_auto::canbus::Esp_direction_0x235_235* mutable_esp_direction_0x235_235();
  ::jmc_auto::canbus::Esp_direction_0x235_235* release_esp_direction_0x235_235();
  void set_allocated_esp_direction_0x235_235(::jmc_auto::canbus::Esp_direction_0x235_235* esp_direction_0x235_235);

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
  bool has_esp_advanced_0x234_234() const;
  void clear_esp_advanced_0x234_234();
  static const int kEspAdvanced0X234234FieldNumber = 10;
  const ::jmc_auto::canbus::Esp_advanced_0x234_234& esp_advanced_0x234_234() const;
  ::jmc_auto::canbus::Esp_advanced_0x234_234* mutable_esp_advanced_0x234_234();
  ::jmc_auto::canbus::Esp_advanced_0x234_234* release_esp_advanced_0x234_234();
  void set_allocated_esp_advanced_0x234_234(::jmc_auto::canbus::Esp_advanced_0x234_234* esp_advanced_0x234_234);

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
  bool has_eps_advanced_0x176_176() const;
  void clear_eps_advanced_0x176_176();
  static const int kEpsAdvanced0X176176FieldNumber = 11;
  const ::jmc_auto::canbus::Eps_advanced_0x176_176& eps_advanced_0x176_176() const;
  ::jmc_auto::canbus::Eps_advanced_0x176_176* mutable_eps_advanced_0x176_176();
  ::jmc_auto::canbus::Eps_advanced_0x176_176* release_eps_advanced_0x176_176();
  void set_allocated_eps_advanced_0x176_176(::jmc_auto::canbus::Eps_advanced_0x176_176* eps_advanced_0x176_176);

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
  bool has_esp_whlpulse_0x236_236() const;
  void clear_esp_whlpulse_0x236_236();
  static const int kEspWhlpulse0X236236FieldNumber = 12;
  const ::jmc_auto::canbus::Esp_whlpulse_0x236_236& esp_whlpulse_0x236_236() const;
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236* mutable_esp_whlpulse_0x236_236();
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236* release_esp_whlpulse_0x236_236();
  void set_allocated_esp_whlpulse_0x236_236(::jmc_auto::canbus::Esp_whlpulse_0x236_236* esp_whlpulse_0x236_236);

  // optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
  bool has_ipm_rightline_0x490_490() const;
  void clear_ipm_rightline_0x490_490();
  static const int kIpmRightline0X490490FieldNumber = 13;
  const ::jmc_auto::canbus::Ipm_rightline_0x490_490& ipm_rightline_0x490_490() const;
  ::jmc_auto::canbus::Ipm_rightline_0x490_490* mutable_ipm_rightline_0x490_490();
  ::jmc_auto::canbus::Ipm_rightline_0x490_490* release_ipm_rightline_0x490_490();
  void set_allocated_ipm_rightline_0x490_490(::jmc_auto::canbus::Ipm_rightline_0x490_490* ipm_rightline_0x490_490);

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
  bool has_sas_sensor_0x175_175() const;
  void clear_sas_sensor_0x175_175();
  static const int kSasSensor0X175175FieldNumber = 14;
  const ::jmc_auto::canbus::Sas_sensor_0x175_175& sas_sensor_0x175_175() const;
  ::jmc_auto::canbus::Sas_sensor_0x175_175* mutable_sas_sensor_0x175_175();
  ::jmc_auto::canbus::Sas_sensor_0x175_175* release_sas_sensor_0x175_175();
  void set_allocated_sas_sensor_0x175_175(::jmc_auto::canbus::Sas_sensor_0x175_175* sas_sensor_0x175_175);

  // optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
  bool has_gw_body_0x321_321() const;
  void clear_gw_body_0x321_321();
  static const int kGwBody0X321321FieldNumber = 15;
  const ::jmc_auto::canbus::Gw_body_0x321_321& gw_body_0x321_321() const;
  ::jmc_auto::canbus::Gw_body_0x321_321* mutable_gw_body_0x321_321();
  ::jmc_auto::canbus::Gw_body_0x321_321* release_gw_body_0x321_321();
  void set_allocated_gw_body_0x321_321(::jmc_auto::canbus::Gw_body_0x321_321* gw_body_0x321_321);

  // optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
  bool has_ipm_leftline_0x278_278() const;
  void clear_ipm_leftline_0x278_278();
  static const int kIpmLeftline0X278278FieldNumber = 16;
  const ::jmc_auto::canbus::Ipm_leftline_0x278_278& ipm_leftline_0x278_278() const;
  ::jmc_auto::canbus::Ipm_leftline_0x278_278* mutable_ipm_leftline_0x278_278();
  ::jmc_auto::canbus::Ipm_leftline_0x278_278* release_ipm_leftline_0x278_278();
  void set_allocated_ipm_leftline_0x278_278(::jmc_auto::canbus::Ipm_leftline_0x278_278* ipm_leftline_0x278_278);

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
  bool has_gw_ems_engstatus_0x142_142() const;
  void clear_gw_ems_engstatus_0x142_142();
  static const int kGwEmsEngstatus0X142142FieldNumber = 17;
  const ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142& gw_ems_engstatus_0x142_142() const;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* mutable_gw_ems_engstatus_0x142_142();
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* release_gw_ems_engstatus_0x142_142();
  void set_allocated_gw_ems_engstatus_0x142_142(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* gw_ems_engstatus_0x142_142);

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
  bool has_gw_tbox_location_0x580_580() const;
  void clear_gw_tbox_location_0x580_580();
  static const int kGwTboxLocation0X580580FieldNumber = 18;
  const ::jmc_auto::canbus::Gw_tbox_location_0x580_580& gw_tbox_location_0x580_580() const;
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580* mutable_gw_tbox_location_0x580_580();
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580* release_gw_tbox_location_0x580_580();
  void set_allocated_gw_tbox_location_0x580_580(::jmc_auto::canbus::Gw_tbox_location_0x580_580* gw_tbox_location_0x580_580);

  // optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
  bool has_srs_0x350_350() const;
  void clear_srs_0x350_350();
  static const int kSrs0X350350FieldNumber = 19;
  const ::jmc_auto::canbus::Srs_0x350_350& srs_0x350_350() const;
  ::jmc_auto::canbus::Srs_0x350_350* mutable_srs_0x350_350();
  ::jmc_auto::canbus::Srs_0x350_350* release_srs_0x350_350();
  void set_allocated_srs_0x350_350(::jmc_auto::canbus::Srs_0x350_350* srs_0x350_350);

  // optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
  bool has_ipm_0x245_245() const;
  void clear_ipm_0x245_245();
  static const int kIpm0X245245FieldNumber = 20;
  const ::jmc_auto::canbus::Ipm_0x245_245& ipm_0x245_245() const;
  ::jmc_auto::canbus::Ipm_0x245_245* mutable_ipm_0x245_245();
  ::jmc_auto::canbus::Ipm_0x245_245* release_ipm_0x245_245();
  void set_allocated_ipm_0x245_245(::jmc_auto::canbus::Ipm_0x245_245* ipm_0x245_245);

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
  bool has_gw_ems_tqwhl_0x111_111() const;
  void clear_gw_ems_tqwhl_0x111_111();
  static const int kGwEmsTqwhl0X111111FieldNumber = 21;
  const ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111& gw_ems_tqwhl_0x111_111() const;
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* mutable_gw_ems_tqwhl_0x111_111();
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* release_gw_ems_tqwhl_0x111_111();
  void set_allocated_gw_ems_tqwhl_0x111_111(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* gw_ems_tqwhl_0x111_111);

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
  bool has_gw_tcu_gearinfo_0x123_123() const;
  void clear_gw_tcu_gearinfo_0x123_123();
  static const int kGwTcuGearinfo0X123123FieldNumber = 22;
  const ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123& gw_tcu_gearinfo_0x123_123() const;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* mutable_gw_tcu_gearinfo_0x123_123();
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* release_gw_tcu_gearinfo_0x123_123();
  void set_allocated_gw_tcu_gearinfo_0x123_123(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* gw_tcu_gearinfo_0x123_123);

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
  bool has_esp_pressure_0x241_241() const;
  void clear_esp_pressure_0x241_241();
  static const int kEspPressure0X241241FieldNumber = 23;
  const ::jmc_auto::canbus::Esp_pressure_0x241_241& esp_pressure_0x241_241() const;
  ::jmc_auto::canbus::Esp_pressure_0x241_241* mutable_esp_pressure_0x241_241();
  ::jmc_auto::canbus::Esp_pressure_0x241_241* release_esp_pressure_0x241_241();
  void set_allocated_esp_pressure_0x241_241(::jmc_auto::canbus::Esp_pressure_0x241_241* esp_pressure_0x241_241);

  // optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
  bool has_esp_status_0x243_243() const;
  void clear_esp_status_0x243_243();
  static const int kEspStatus0X243243FieldNumber = 24;
  const ::jmc_auto::canbus::Esp_status_0x243_243& esp_status_0x243_243() const;
  ::jmc_auto::canbus::Esp_status_0x243_243* mutable_esp_status_0x243_243();
  ::jmc_auto::canbus::Esp_status_0x243_243* release_esp_status_0x243_243();
  void set_allocated_esp_status_0x243_243(::jmc_auto::canbus::Esp_status_0x243_243* esp_status_0x243_243);

  // optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
  bool has_esp_axay_0x242_242() const;
  void clear_esp_axay_0x242_242();
  static const int kEspAxay0X242242FieldNumber = 25;
  const ::jmc_auto::canbus::Esp_axay_0x242_242& esp_axay_0x242_242() const;
  ::jmc_auto::canbus::Esp_axay_0x242_242* mutable_esp_axay_0x242_242();
  ::jmc_auto::canbus::Esp_axay_0x242_242* release_esp_axay_0x242_242();
  void set_allocated_esp_axay_0x242_242(::jmc_auto::canbus::Esp_axay_0x242_242* esp_axay_0x242_242);

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
  bool has_gw_swm_mrr_0x31b_31b() const;
  void clear_gw_swm_mrr_0x31b_31b();
  static const int kGwSwmMrr0X31B31BFieldNumber = 26;
  const ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b& gw_swm_mrr_0x31b_31b() const;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* mutable_gw_swm_mrr_0x31b_31b();
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* release_gw_swm_mrr_0x31b_31b();
  void set_allocated_gw_swm_mrr_0x31b_31b(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* gw_swm_mrr_0x31b_31b);

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
  bool has_gw_swm_body_0x31a_31a() const;
  void clear_gw_swm_body_0x31a_31a();
  static const int kGwSwmBody0X31A31AFieldNumber = 27;
  const ::jmc_auto::canbus::Gw_swm_body_0x31a_31a& gw_swm_body_0x31a_31a() const;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* mutable_gw_swm_body_0x31a_31a();
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* release_gw_swm_body_0x31a_31a();
  void set_allocated_gw_swm_body_0x31a_31a(::jmc_auto::canbus::Gw_swm_body_0x31a_31a* gw_swm_body_0x31a_31a);

  // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
  bool has_gw_ems_tq_0x101_101() const;
  void clear_gw_ems_tq_0x101_101();
  static const int kGwEmsTq0X101101FieldNumber = 28;
  const ::jmc_auto::canbus::Gw_ems_tq_0x101_101& gw_ems_tq_0x101_101() const;
  ::jmc_auto::canbus::Gw_ems_tq_0x101_101* mutable_gw_ems_tq_0x101_101();
  ::jmc_auto::canbus::Gw_ems_tq_0x101_101* release_gw_ems_tq_0x101_101();
  void set_allocated_gw_ems_tq_0x101_101(::jmc_auto::canbus::Gw_ems_tq_0x101_101* gw_ems_tq_0x101_101);

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
  bool has_esp_vlc_0x223_223() const;
  void clear_esp_vlc_0x223_223();
  static const int kEspVlc0X223223FieldNumber = 29;
  const ::jmc_auto::canbus::Esp_vlc_0x223_223& esp_vlc_0x223_223() const;
  ::jmc_auto::canbus::Esp_vlc_0x223_223* mutable_esp_vlc_0x223_223();
  ::jmc_auto::canbus::Esp_vlc_0x223_223* release_esp_vlc_0x223_223();
  void set_allocated_esp_vlc_0x223_223(::jmc_auto::canbus::Esp_vlc_0x223_223* esp_vlc_0x223_223);

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
  bool has_gw_ems_whltq_0x107_107() const;
  void clear_gw_ems_whltq_0x107_107();
  static const int kGwEmsWhltq0X107107FieldNumber = 30;
  const ::jmc_auto::canbus::Gw_ems_whltq_0x107_107& gw_ems_whltq_0x107_107() const;
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* mutable_gw_ems_whltq_0x107_107();
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* release_gw_ems_whltq_0x107_107();
  void set_allocated_gw_ems_whltq_0x107_107(::jmc_auto::canbus::Gw_ems_whltq_0x107_107* gw_ems_whltq_0x107_107);

  // optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
  bool has_abs_sts_0x221_221() const;
  void clear_abs_sts_0x221_221();
  static const int kAbsSts0X221221FieldNumber = 31;
  const ::jmc_auto::canbus::Abs_sts_0x221_221& abs_sts_0x221_221() const;
  ::jmc_auto::canbus::Abs_sts_0x221_221* mutable_abs_sts_0x221_221();
  ::jmc_auto::canbus::Abs_sts_0x221_221* release_abs_sts_0x221_221();
  void set_allocated_abs_sts_0x221_221(::jmc_auto::canbus::Abs_sts_0x221_221* abs_sts_0x221_221);

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
  bool has_mrr_frobj_0x480_480() const;
  void clear_mrr_frobj_0x480_480();
  static const int kMrrFrobj0X480480FieldNumber = 32;
  const ::jmc_auto::canbus::Mrr_frobj_0x480_480& mrr_frobj_0x480_480() const;
  ::jmc_auto::canbus::Mrr_frobj_0x480_480* mutable_mrr_frobj_0x480_480();
  ::jmc_auto::canbus::Mrr_frobj_0x480_480* release_mrr_frobj_0x480_480();
  void set_allocated_mrr_frobj_0x480_480(::jmc_auto::canbus::Mrr_frobj_0x480_480* mrr_frobj_0x480_480);

  // optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
  bool has_mrr_0x246_246() const;
  void clear_mrr_0x246_246();
  static const int kMrr0X246246FieldNumber = 33;
  const ::jmc_auto::canbus::Mrr_0x246_246& mrr_0x246_246() const;
  ::jmc_auto::canbus::Mrr_0x246_246* mutable_mrr_0x246_246();
  ::jmc_auto::canbus::Mrr_0x246_246* release_mrr_0x246_246();
  void set_allocated_mrr_0x246_246(::jmc_auto::canbus::Mrr_0x246_246* mrr_0x246_246);

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
  bool has_gw_mp5_nav_0x533_533() const;
  void clear_gw_mp5_nav_0x533_533();
  static const int kGwMp5Nav0X533533FieldNumber = 34;
  const ::jmc_auto::canbus::Gw_mp5_nav_0x533_533& gw_mp5_nav_0x533_533() const;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* mutable_gw_mp5_nav_0x533_533();
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* release_gw_mp5_nav_0x533_533();
  void set_allocated_gw_mp5_nav_0x533_533(::jmc_auto::canbus::Gw_mp5_nav_0x533_533* gw_mp5_nav_0x533_533);

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
  bool has_gw_mp5_0x530_530() const;
  void clear_gw_mp5_0x530_530();
  static const int kGwMp50X530530FieldNumber = 35;
  const ::jmc_auto::canbus::Gw_mp5_0x530_530& gw_mp5_0x530_530() const;
  ::jmc_auto::canbus::Gw_mp5_0x530_530* mutable_gw_mp5_0x530_530();
  ::jmc_auto::canbus::Gw_mp5_0x530_530* release_gw_mp5_0x530_530();
  void set_allocated_gw_mp5_0x530_530(::jmc_auto::canbus::Gw_mp5_0x530_530* gw_mp5_0x530_530);

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
  bool has_mrr_frobj_0x279_279() const;
  void clear_mrr_frobj_0x279_279();
  static const int kMrrFrobj0X279279FieldNumber = 36;
  const ::jmc_auto::canbus::Mrr_frobj_0x279_279& mrr_frobj_0x279_279() const;
  ::jmc_auto::canbus::Mrr_frobj_0x279_279* mutable_mrr_frobj_0x279_279();
  ::jmc_auto::canbus::Mrr_frobj_0x279_279* release_mrr_frobj_0x279_279();
  void set_allocated_mrr_frobj_0x279_279(::jmc_auto::canbus::Mrr_frobj_0x279_279* mrr_frobj_0x279_279);

  // optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
  bool has_gw_ic_0x510_510() const;
  void clear_gw_ic_0x510_510();
  static const int kGwIc0X510510FieldNumber = 37;
  const ::jmc_auto::canbus::Gw_ic_0x510_510& gw_ic_0x510_510() const;
  ::jmc_auto::canbus::Gw_ic_0x510_510* mutable_gw_ic_0x510_510();
  ::jmc_auto::canbus::Gw_ic_0x510_510* release_gw_ic_0x510_510();
  void set_allocated_gw_ic_0x510_510(::jmc_auto::canbus::Gw_ic_0x510_510* gw_ic_0x510_510);

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
  bool has_abs_whlspd_0x211_211() const;
  void clear_abs_whlspd_0x211_211();
  static const int kAbsWhlspd0X211211FieldNumber = 38;
  const ::jmc_auto::canbus::Abs_whlspd_0x211_211& abs_whlspd_0x211_211() const;
  ::jmc_auto::canbus::Abs_whlspd_0x211_211* mutable_abs_whlspd_0x211_211();
  ::jmc_auto::canbus::Abs_whlspd_0x211_211* release_abs_whlspd_0x211_211();
  void set_allocated_abs_whlspd_0x211_211(::jmc_auto::canbus::Abs_whlspd_0x211_211* abs_whlspd_0x211_211);

  // optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
  bool has_esp_tq_0x217_217() const;
  void clear_esp_tq_0x217_217();
  static const int kEspTq0X217217FieldNumber = 39;
  const ::jmc_auto::canbus::Esp_tq_0x217_217& esp_tq_0x217_217() const;
  ::jmc_auto::canbus::Esp_tq_0x217_217* mutable_esp_tq_0x217_217();
  ::jmc_auto::canbus::Esp_tq_0x217_217* release_esp_tq_0x217_217();
  void set_allocated_esp_tq_0x217_217(::jmc_auto::canbus::Esp_tq_0x217_217* esp_tq_0x217_217);

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
  bool has_esp_rpmf_0x213_213() const;
  void clear_esp_rpmf_0x213_213();
  static const int kEspRpmf0X213213FieldNumber = 40;
  const ::jmc_auto::canbus::Esp_rpmf_0x213_213& esp_rpmf_0x213_213() const;
  ::jmc_auto::canbus::Esp_rpmf_0x213_213* mutable_esp_rpmf_0x213_213();
  ::jmc_auto::canbus::Esp_rpmf_0x213_213* release_esp_rpmf_0x213_213();
  void set_allocated_esp_rpmf_0x213_213(::jmc_auto::canbus::Esp_rpmf_0x213_213* esp_rpmf_0x213_213);

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
  bool has_gw_ic_time_0x581_581() const;
  void clear_gw_ic_time_0x581_581();
  static const int kGwIcTime0X581581FieldNumber = 41;
  const ::jmc_auto::canbus::Gw_ic_time_0x581_581& gw_ic_time_0x581_581() const;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581* mutable_gw_ic_time_0x581_581();
  ::jmc_auto::canbus::Gw_ic_time_0x581_581* release_gw_ic_time_0x581_581();
  void set_allocated_gw_ic_time_0x581_581(::jmc_auto::canbus::Gw_ic_time_0x581_581* gw_ic_time_0x581_581);

  // optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
  bool has_afs_0x5a0_5a0() const;
  void clear_afs_0x5a0_5a0();
  static const int kAfs0X5A05A0FieldNumber = 42;
  const ::jmc_auto::canbus::Afs_0x5a0_5a0& afs_0x5a0_5a0() const;
  ::jmc_auto::canbus::Afs_0x5a0_5a0* mutable_afs_0x5a0_5a0();
  ::jmc_auto::canbus::Afs_0x5a0_5a0* release_afs_0x5a0_5a0();
  void set_allocated_afs_0x5a0_5a0(::jmc_auto::canbus::Afs_0x5a0_5a0* afs_0x5a0_5a0);

  // optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
  bool has_sod_nm_0x440_440() const;
  void clear_sod_nm_0x440_440();
  static const int kSodNm0X440440FieldNumber = 43;
  const ::jmc_auto::canbus::Sod_nm_0x440_440& sod_nm_0x440_440() const;
  ::jmc_auto::canbus::Sod_nm_0x440_440* mutable_sod_nm_0x440_440();
  ::jmc_auto::canbus::Sod_nm_0x440_440* release_sod_nm_0x440_440();
  void set_allocated_sod_nm_0x440_440(::jmc_auto::canbus::Sod_nm_0x440_440* sod_nm_0x440_440);

  // optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
  bool has_gw_nm_0x460_460() const;
  void clear_gw_nm_0x460_460();
  static const int kGwNm0X460460FieldNumber = 44;
  const ::jmc_auto::canbus::Gw_nm_0x460_460& gw_nm_0x460_460() const;
  ::jmc_auto::canbus::Gw_nm_0x460_460* mutable_gw_nm_0x460_460();
  ::jmc_auto::canbus::Gw_nm_0x460_460* release_gw_nm_0x460_460();
  void set_allocated_gw_nm_0x460_460(::jmc_auto::canbus::Gw_nm_0x460_460* gw_nm_0x460_460);

  // optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
  bool has_eps_0x260_260() const;
  void clear_eps_0x260_260();
  static const int kEps0X260260FieldNumber = 45;
  const ::jmc_auto::canbus::Eps_0x260_260& eps_0x260_260() const;
  ::jmc_auto::canbus::Eps_0x260_260* mutable_eps_0x260_260();
  ::jmc_auto::canbus::Eps_0x260_260* release_eps_0x260_260();
  void set_allocated_eps_0x260_260(::jmc_auto::canbus::Eps_0x260_260* eps_0x260_260);

  // optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
  bool has_sod_0x275_275() const;
  void clear_sod_0x275_275();
  static const int kSod0X275275FieldNumber = 46;
  const ::jmc_auto::canbus::Sod_0x275_275& sod_0x275_275() const;
  ::jmc_auto::canbus::Sod_0x275_275* mutable_sod_0x275_275();
  ::jmc_auto::canbus::Sod_0x275_275* release_sod_0x275_275();
  void set_allocated_sod_0x275_275(::jmc_auto::canbus::Sod_0x275_275* sod_0x275_275);

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
  bool has_gw_tpms_tire_0x361_361() const;
  void clear_gw_tpms_tire_0x361_361();
  static const int kGwTpmsTire0X361361FieldNumber = 47;
  const ::jmc_auto::canbus::Gw_tpms_tire_0x361_361& gw_tpms_tire_0x361_361() const;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* mutable_gw_tpms_tire_0x361_361();
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* release_gw_tpms_tire_0x361_361();
  void set_allocated_gw_tpms_tire_0x361_361(::jmc_auto::canbus::Gw_tpms_tire_0x361_361* gw_tpms_tire_0x361_361);

  // optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
  bool has_ins_datainfo_506() const;
  void clear_ins_datainfo_506();
  static const int kInsDatainfo506FieldNumber = 48;
  const ::jmc_auto::canbus::Ins_datainfo_506& ins_datainfo_506() const;
  ::jmc_auto::canbus::Ins_datainfo_506* mutable_ins_datainfo_506();
  ::jmc_auto::canbus::Ins_datainfo_506* release_ins_datainfo_506();
  void set_allocated_ins_datainfo_506(::jmc_auto::canbus::Ins_datainfo_506* ins_datainfo_506);

  // optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
  bool has_ins_std_507() const;
  void clear_ins_std_507();
  static const int kInsStd507FieldNumber = 49;
  const ::jmc_auto::canbus::Ins_std_507& ins_std_507() const;
  ::jmc_auto::canbus::Ins_std_507* mutable_ins_std_507();
  ::jmc_auto::canbus::Ins_std_507* release_ins_std_507();
  void set_allocated_ins_std_507(::jmc_auto::canbus::Ins_std_507* ins_std_507);

  // optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
  bool has_ins_latitudelongitude_504() const;
  void clear_ins_latitudelongitude_504();
  static const int kInsLatitudelongitude504FieldNumber = 50;
  const ::jmc_auto::canbus::Ins_latitudelongitude_504& ins_latitudelongitude_504() const;
  ::jmc_auto::canbus::Ins_latitudelongitude_504* mutable_ins_latitudelongitude_504();
  ::jmc_auto::canbus::Ins_latitudelongitude_504* release_ins_latitudelongitude_504();
  void set_allocated_ins_latitudelongitude_504(::jmc_auto::canbus::Ins_latitudelongitude_504* ins_latitudelongitude_504);

  // optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
  bool has_ins_speed_505() const;
  void clear_ins_speed_505();
  static const int kInsSpeed505FieldNumber = 51;
  const ::jmc_auto::canbus::Ins_speed_505& ins_speed_505() const;
  ::jmc_auto::canbus::Ins_speed_505* mutable_ins_speed_505();
  ::jmc_auto::canbus::Ins_speed_505* release_ins_speed_505();
  void set_allocated_ins_speed_505(::jmc_auto::canbus::Ins_speed_505* ins_speed_505);

  // optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
  bool has_ins_headingpitchroll_502() const;
  void clear_ins_headingpitchroll_502();
  static const int kInsHeadingpitchroll502FieldNumber = 52;
  const ::jmc_auto::canbus::Ins_headingpitchroll_502& ins_headingpitchroll_502() const;
  ::jmc_auto::canbus::Ins_headingpitchroll_502* mutable_ins_headingpitchroll_502();
  ::jmc_auto::canbus::Ins_headingpitchroll_502* release_ins_headingpitchroll_502();
  void set_allocated_ins_headingpitchroll_502(::jmc_auto::canbus::Ins_headingpitchroll_502* ins_headingpitchroll_502);

  // optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
  bool has_ins_heightandtime_503() const;
  void clear_ins_heightandtime_503();
  static const int kInsHeightandtime503FieldNumber = 53;
  const ::jmc_auto::canbus::Ins_heightandtime_503& ins_heightandtime_503() const;
  ::jmc_auto::canbus::Ins_heightandtime_503* mutable_ins_heightandtime_503();
  ::jmc_auto::canbus::Ins_heightandtime_503* release_ins_heightandtime_503();
  void set_allocated_ins_heightandtime_503(::jmc_auto::canbus::Ins_heightandtime_503* ins_heightandtime_503);

  // optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
  bool has_ins_gyro_501() const;
  void clear_ins_gyro_501();
  static const int kInsGyro501FieldNumber = 54;
  const ::jmc_auto::canbus::Ins_gyro_501& ins_gyro_501() const;
  ::jmc_auto::canbus::Ins_gyro_501* mutable_ins_gyro_501();
  ::jmc_auto::canbus::Ins_gyro_501* release_ins_gyro_501();
  void set_allocated_ins_gyro_501(::jmc_auto::canbus::Ins_gyro_501* ins_gyro_501);

  // optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
  bool has_ins_acc_500() const;
  void clear_ins_acc_500();
  static const int kInsAcc500FieldNumber = 55;
  const ::jmc_auto::canbus::Ins_acc_500& ins_acc_500() const;
  ::jmc_auto::canbus::Ins_acc_500* mutable_ins_acc_500();
  ::jmc_auto::canbus::Ins_acc_500* release_ins_acc_500();
  void set_allocated_ins_acc_500(::jmc_auto::canbus::Ins_acc_500* ins_acc_500);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Cx75)
 private:
  void set_has_gw_ems_sts_0x151_151();
  void clear_has_gw_ems_sts_0x151_151();
  void set_has_esp_raw_0x212_212();
  void clear_has_esp_raw_0x212_212();
  void set_has_gw_bcm_door_0x310_310();
  void clear_has_gw_bcm_door_0x310_310();
  void set_has_pam_0x270_270();
  void clear_has_pam_0x270_270();
  void set_has_pam_0x271_271();
  void clear_has_pam_0x271_271();
  void set_has_pam_0x272_272();
  void clear_has_pam_0x272_272();
  void set_has_mrr_0x238_238();
  void clear_has_mrr_0x238_238();
  void set_has_mrr_0x239_239();
  void clear_has_mrr_0x239_239();
  void set_has_esp_direction_0x235_235();
  void clear_has_esp_direction_0x235_235();
  void set_has_esp_advanced_0x234_234();
  void clear_has_esp_advanced_0x234_234();
  void set_has_eps_advanced_0x176_176();
  void clear_has_eps_advanced_0x176_176();
  void set_has_esp_whlpulse_0x236_236();
  void clear_has_esp_whlpulse_0x236_236();
  void set_has_ipm_rightline_0x490_490();
  void clear_has_ipm_rightline_0x490_490();
  void set_has_sas_sensor_0x175_175();
  void clear_has_sas_sensor_0x175_175();
  void set_has_gw_body_0x321_321();
  void clear_has_gw_body_0x321_321();
  void set_has_ipm_leftline_0x278_278();
  void clear_has_ipm_leftline_0x278_278();
  void set_has_gw_ems_engstatus_0x142_142();
  void clear_has_gw_ems_engstatus_0x142_142();
  void set_has_gw_tbox_location_0x580_580();
  void clear_has_gw_tbox_location_0x580_580();
  void set_has_srs_0x350_350();
  void clear_has_srs_0x350_350();
  void set_has_ipm_0x245_245();
  void clear_has_ipm_0x245_245();
  void set_has_gw_ems_tqwhl_0x111_111();
  void clear_has_gw_ems_tqwhl_0x111_111();
  void set_has_gw_tcu_gearinfo_0x123_123();
  void clear_has_gw_tcu_gearinfo_0x123_123();
  void set_has_esp_pressure_0x241_241();
  void clear_has_esp_pressure_0x241_241();
  void set_has_esp_status_0x243_243();
  void clear_has_esp_status_0x243_243();
  void set_has_esp_axay_0x242_242();
  void clear_has_esp_axay_0x242_242();
  void set_has_gw_swm_mrr_0x31b_31b();
  void clear_has_gw_swm_mrr_0x31b_31b();
  void set_has_gw_swm_body_0x31a_31a();
  void clear_has_gw_swm_body_0x31a_31a();
  void set_has_gw_ems_tq_0x101_101();
  void clear_has_gw_ems_tq_0x101_101();
  void set_has_esp_vlc_0x223_223();
  void clear_has_esp_vlc_0x223_223();
  void set_has_gw_ems_whltq_0x107_107();
  void clear_has_gw_ems_whltq_0x107_107();
  void set_has_abs_sts_0x221_221();
  void clear_has_abs_sts_0x221_221();
  void set_has_mrr_frobj_0x480_480();
  void clear_has_mrr_frobj_0x480_480();
  void set_has_mrr_0x246_246();
  void clear_has_mrr_0x246_246();
  void set_has_gw_mp5_nav_0x533_533();
  void clear_has_gw_mp5_nav_0x533_533();
  void set_has_gw_mp5_0x530_530();
  void clear_has_gw_mp5_0x530_530();
  void set_has_mrr_frobj_0x279_279();
  void clear_has_mrr_frobj_0x279_279();
  void set_has_gw_ic_0x510_510();
  void clear_has_gw_ic_0x510_510();
  void set_has_abs_whlspd_0x211_211();
  void clear_has_abs_whlspd_0x211_211();
  void set_has_esp_tq_0x217_217();
  void clear_has_esp_tq_0x217_217();
  void set_has_esp_rpmf_0x213_213();
  void clear_has_esp_rpmf_0x213_213();
  void set_has_gw_ic_time_0x581_581();
  void clear_has_gw_ic_time_0x581_581();
  void set_has_afs_0x5a0_5a0();
  void clear_has_afs_0x5a0_5a0();
  void set_has_sod_nm_0x440_440();
  void clear_has_sod_nm_0x440_440();
  void set_has_gw_nm_0x460_460();
  void clear_has_gw_nm_0x460_460();
  void set_has_eps_0x260_260();
  void clear_has_eps_0x260_260();
  void set_has_sod_0x275_275();
  void clear_has_sod_0x275_275();
  void set_has_gw_tpms_tire_0x361_361();
  void clear_has_gw_tpms_tire_0x361_361();
  void set_has_ins_datainfo_506();
  void clear_has_ins_datainfo_506();
  void set_has_ins_std_507();
  void clear_has_ins_std_507();
  void set_has_ins_latitudelongitude_504();
  void clear_has_ins_latitudelongitude_504();
  void set_has_ins_speed_505();
  void clear_has_ins_speed_505();
  void set_has_ins_headingpitchroll_502();
  void clear_has_ins_headingpitchroll_502();
  void set_has_ins_heightandtime_503();
  void clear_has_ins_heightandtime_503();
  void set_has_ins_gyro_501();
  void clear_has_ins_gyro_501();
  void set_has_ins_acc_500();
  void clear_has_ins_acc_500();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151* gw_ems_sts_0x151_151_;
  ::jmc_auto::canbus::Esp_raw_0x212_212* esp_raw_0x212_212_;
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310* gw_bcm_door_0x310_310_;
  ::jmc_auto::canbus::Pam_0x270_270* pam_0x270_270_;
  ::jmc_auto::canbus::Pam_0x271_271* pam_0x271_271_;
  ::jmc_auto::canbus::Pam_0x272_272* pam_0x272_272_;
  ::jmc_auto::canbus::Mrr_0x238_238* mrr_0x238_238_;
  ::jmc_auto::canbus::Mrr_0x239_239* mrr_0x239_239_;
  ::jmc_auto::canbus::Esp_direction_0x235_235* esp_direction_0x235_235_;
  ::jmc_auto::canbus::Esp_advanced_0x234_234* esp_advanced_0x234_234_;
  ::jmc_auto::canbus::Eps_advanced_0x176_176* eps_advanced_0x176_176_;
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236* esp_whlpulse_0x236_236_;
  ::jmc_auto::canbus::Ipm_rightline_0x490_490* ipm_rightline_0x490_490_;
  ::jmc_auto::canbus::Sas_sensor_0x175_175* sas_sensor_0x175_175_;
  ::jmc_auto::canbus::Gw_body_0x321_321* gw_body_0x321_321_;
  ::jmc_auto::canbus::Ipm_leftline_0x278_278* ipm_leftline_0x278_278_;
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* gw_ems_engstatus_0x142_142_;
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580* gw_tbox_location_0x580_580_;
  ::jmc_auto::canbus::Srs_0x350_350* srs_0x350_350_;
  ::jmc_auto::canbus::Ipm_0x245_245* ipm_0x245_245_;
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* gw_ems_tqwhl_0x111_111_;
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* gw_tcu_gearinfo_0x123_123_;
  ::jmc_auto::canbus::Esp_pressure_0x241_241* esp_pressure_0x241_241_;
  ::jmc_auto::canbus::Esp_status_0x243_243* esp_status_0x243_243_;
  ::jmc_auto::canbus::Esp_axay_0x242_242* esp_axay_0x242_242_;
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* gw_swm_mrr_0x31b_31b_;
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* gw_swm_body_0x31a_31a_;
  ::jmc_auto::canbus::Gw_ems_tq_0x101_101* gw_ems_tq_0x101_101_;
  ::jmc_auto::canbus::Esp_vlc_0x223_223* esp_vlc_0x223_223_;
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* gw_ems_whltq_0x107_107_;
  ::jmc_auto::canbus::Abs_sts_0x221_221* abs_sts_0x221_221_;
  ::jmc_auto::canbus::Mrr_frobj_0x480_480* mrr_frobj_0x480_480_;
  ::jmc_auto::canbus::Mrr_0x246_246* mrr_0x246_246_;
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* gw_mp5_nav_0x533_533_;
  ::jmc_auto::canbus::Gw_mp5_0x530_530* gw_mp5_0x530_530_;
  ::jmc_auto::canbus::Mrr_frobj_0x279_279* mrr_frobj_0x279_279_;
  ::jmc_auto::canbus::Gw_ic_0x510_510* gw_ic_0x510_510_;
  ::jmc_auto::canbus::Abs_whlspd_0x211_211* abs_whlspd_0x211_211_;
  ::jmc_auto::canbus::Esp_tq_0x217_217* esp_tq_0x217_217_;
  ::jmc_auto::canbus::Esp_rpmf_0x213_213* esp_rpmf_0x213_213_;
  ::jmc_auto::canbus::Gw_ic_time_0x581_581* gw_ic_time_0x581_581_;
  ::jmc_auto::canbus::Afs_0x5a0_5a0* afs_0x5a0_5a0_;
  ::jmc_auto::canbus::Sod_nm_0x440_440* sod_nm_0x440_440_;
  ::jmc_auto::canbus::Gw_nm_0x460_460* gw_nm_0x460_460_;
  ::jmc_auto::canbus::Eps_0x260_260* eps_0x260_260_;
  ::jmc_auto::canbus::Sod_0x275_275* sod_0x275_275_;
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* gw_tpms_tire_0x361_361_;
  ::jmc_auto::canbus::Ins_datainfo_506* ins_datainfo_506_;
  ::jmc_auto::canbus::Ins_std_507* ins_std_507_;
  ::jmc_auto::canbus::Ins_latitudelongitude_504* ins_latitudelongitude_504_;
  ::jmc_auto::canbus::Ins_speed_505* ins_speed_505_;
  ::jmc_auto::canbus::Ins_headingpitchroll_502* ins_headingpitchroll_502_;
  ::jmc_auto::canbus::Ins_heightandtime_503* ins_heightandtime_503_;
  ::jmc_auto::canbus::Ins_gyro_501* ins_gyro_501_;
  ::jmc_auto::canbus::Ins_acc_500* ins_acc_500_;
  mutable int _cached_size_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Abs_whlspd_0x211_211

// optional double abs_whlspdfrntri = 1;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdfrntri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdfrntri() {
  abs_whlspdfrntri_ = 0;
  clear_has_abs_whlspdfrntri();
}
inline double Abs_whlspd_0x211_211::abs_whlspdfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntri)
  return abs_whlspdfrntri_;
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdfrntri(double value) {
  set_has_abs_whlspdfrntri();
  abs_whlspdfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntri)
}

// optional double abs_whlspdrele = 2;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdrele() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdrele() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdrele() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdrele() {
  abs_whlspdrele_ = 0;
  clear_has_abs_whlspdrele();
}
inline double Abs_whlspd_0x211_211::abs_whlspdrele() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrele)
  return abs_whlspdrele_;
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdrele(double value) {
  set_has_abs_whlspdrele();
  abs_whlspdrele_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrele)
}

// optional double abs_whlspdreri = 3;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdreri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdreri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdreri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdreri() {
  abs_whlspdreri_ = 0;
  clear_has_abs_whlspdreri();
}
inline double Abs_whlspd_0x211_211::abs_whlspdreri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreri)
  return abs_whlspdreri_;
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdreri(double value) {
  set_has_abs_whlspdreri();
  abs_whlspdreri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreri)
}

// optional int32 rollingcounter_0x211 = 4;
inline bool Abs_whlspd_0x211_211::has_rollingcounter_0x211() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_rollingcounter_0x211() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Abs_whlspd_0x211_211::clear_has_rollingcounter_0x211() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Abs_whlspd_0x211_211::clear_rollingcounter_0x211() {
  rollingcounter_0x211_ = 0;
  clear_has_rollingcounter_0x211();
}
inline ::google::protobuf::int32 Abs_whlspd_0x211_211::rollingcounter_0x211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.rollingcounter_0x211)
  return rollingcounter_0x211_;
}
inline void Abs_whlspd_0x211_211::set_rollingcounter_0x211(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x211();
  rollingcounter_0x211_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.rollingcounter_0x211)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdreristatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdreristatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdreristatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdreristatus() {
  abs_whlspdreristatus_ = 0;
  clear_has_abs_whlspdreristatus();
}
inline ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211::abs_whlspdreristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreristatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType >(abs_whlspdreristatus_);
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdreristatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType_IsValid(value));
  set_has_abs_whlspdreristatus();
  abs_whlspdreristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreristatus)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdrelestatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdrelestatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdrelestatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdrelestatus() {
  abs_whlspdrelestatus_ = 0;
  clear_has_abs_whlspdrelestatus();
}
inline ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211::abs_whlspdrelestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrelestatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType >(abs_whlspdrelestatus_);
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdrelestatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_IsValid(value));
  set_has_abs_whlspdrelestatus();
  abs_whlspdrelestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrelestatus)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdfrntristatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntristatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntristatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdfrntristatus() {
  abs_whlspdfrntristatus_ = 0;
  clear_has_abs_whlspdfrntristatus();
}
inline ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211::abs_whlspdfrntristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntristatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType >(abs_whlspdfrntristatus_);
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdfrntristatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_IsValid(value));
  set_has_abs_whlspdfrntristatus();
  abs_whlspdfrntristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntristatus)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdfrntlestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntlestatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntlestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdfrntlestatus() {
  abs_whlspdfrntlestatus_ = 0;
  clear_has_abs_whlspdfrntlestatus();
}
inline ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211::abs_whlspdfrntlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntlestatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType >(abs_whlspdfrntlestatus_);
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdfrntlestatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_IsValid(value));
  set_has_abs_whlspdfrntlestatus();
  abs_whlspdfrntlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntlestatus)
}

// optional int32 checksum_0x211 = 9;
inline bool Abs_whlspd_0x211_211::has_checksum_0x211() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_checksum_0x211() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Abs_whlspd_0x211_211::clear_has_checksum_0x211() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Abs_whlspd_0x211_211::clear_checksum_0x211() {
  checksum_0x211_ = 0;
  clear_has_checksum_0x211();
}
inline ::google::protobuf::int32 Abs_whlspd_0x211_211::checksum_0x211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.checksum_0x211)
  return checksum_0x211_;
}
inline void Abs_whlspd_0x211_211::set_checksum_0x211(::google::protobuf::int32 value) {
  set_has_checksum_0x211();
  checksum_0x211_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.checksum_0x211)
}

// optional double abs_whlspdfrntle = 10;
inline bool Abs_whlspd_0x211_211::has_abs_whlspdfrntle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Abs_whlspd_0x211_211::clear_abs_whlspdfrntle() {
  abs_whlspdfrntle_ = 0;
  clear_has_abs_whlspdfrntle();
}
inline double Abs_whlspd_0x211_211::abs_whlspdfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntle)
  return abs_whlspdfrntle_;
}
inline void Abs_whlspd_0x211_211::set_abs_whlspdfrntle(double value) {
  set_has_abs_whlspdfrntle();
  abs_whlspdfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntle)
}

// -------------------------------------------------------------------

// Gw_ems_sts_0x151_151

// optional int32 ems_engbarometricpressure = 1;
inline bool Gw_ems_sts_0x151_151::has_ems_engbarometricpressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_engbarometricpressure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_engbarometricpressure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_engbarometricpressure() {
  ems_engbarometricpressure_ = 0;
  clear_has_ems_engbarometricpressure();
}
inline ::google::protobuf::int32 Gw_ems_sts_0x151_151::ems_engbarometricpressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engbarometricpressure)
  return ems_engbarometricpressure_;
}
inline void Gw_ems_sts_0x151_151::set_ems_engbarometricpressure(::google::protobuf::int32 value) {
  set_has_ems_engbarometricpressure();
  ems_engbarometricpressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engbarometricpressure)
}

// optional double ems_vacuumpressure = 2;
inline bool Gw_ems_sts_0x151_151::has_ems_vacuumpressure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_vacuumpressure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_vacuumpressure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_vacuumpressure() {
  ems_vacuumpressure_ = 0;
  clear_has_ems_vacuumpressure();
}
inline double Gw_ems_sts_0x151_151::ems_vacuumpressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_vacuumpressure)
  return ems_vacuumpressure_;
}
inline void Gw_ems_sts_0x151_151::set_ems_vacuumpressure(double value) {
  set_has_ems_vacuumpressure();
  ems_vacuumpressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_vacuumpressure)
}

// optional double ems_targcruisespeed = 3;
inline bool Gw_ems_sts_0x151_151::has_ems_targcruisespeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_targcruisespeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_targcruisespeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_targcruisespeed() {
  ems_targcruisespeed_ = 0;
  clear_has_ems_targcruisespeed();
}
inline double Gw_ems_sts_0x151_151::ems_targcruisespeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_targcruisespeed)
  return ems_targcruisespeed_;
}
inline void Gw_ems_sts_0x151_151::set_ems_targcruisespeed(double value) {
  set_has_ems_targcruisespeed();
  ems_targcruisespeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_targcruisespeed)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
inline bool Gw_ems_sts_0x151_151::has_ems_atsdrivingmodestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_atsdrivingmodestatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_atsdrivingmodestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_atsdrivingmodestatus() {
  ems_atsdrivingmodestatus_ = 0;
  clear_has_ems_atsdrivingmodestatus();
}
inline ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::ems_atsdrivingmodestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_atsdrivingmodestatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType >(ems_atsdrivingmodestatus_);
}
inline void Gw_ems_sts_0x151_151::set_ems_atsdrivingmodestatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_IsValid(value));
  set_has_ems_atsdrivingmodestatus();
  ems_atsdrivingmodestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_atsdrivingmodestatus)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
inline bool Gw_ems_sts_0x151_151::has_ems_enginestopstartstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_enginestopstartstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_enginestopstartstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_enginestopstartstatus() {
  ems_enginestopstartstatus_ = 0;
  clear_has_ems_enginestopstartstatus();
}
inline ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::ems_enginestopstartstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_enginestopstartstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType >(ems_enginestopstartstatus_);
}
inline void Gw_ems_sts_0x151_151::set_ems_enginestopstartstatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_IsValid(value));
  set_has_ems_enginestopstartstatus();
  ems_enginestopstartstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_enginestopstartstatus)
}

// optional int32 dcm_ems_rollingcounter_0x151 = 6;
inline bool Gw_ems_sts_0x151_151::has_dcm_ems_rollingcounter_0x151() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_dcm_ems_rollingcounter_0x151() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ems_sts_0x151_151::clear_has_dcm_ems_rollingcounter_0x151() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ems_sts_0x151_151::clear_dcm_ems_rollingcounter_0x151() {
  dcm_ems_rollingcounter_0x151_ = 0;
  clear_has_dcm_ems_rollingcounter_0x151();
}
inline ::google::protobuf::int32 Gw_ems_sts_0x151_151::dcm_ems_rollingcounter_0x151() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_rollingcounter_0x151)
  return dcm_ems_rollingcounter_0x151_;
}
inline void Gw_ems_sts_0x151_151::set_dcm_ems_rollingcounter_0x151(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x151();
  dcm_ems_rollingcounter_0x151_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_rollingcounter_0x151)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
inline bool Gw_ems_sts_0x151_151::has_ems_cruisecontrolstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_cruisecontrolstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_cruisecontrolstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_cruisecontrolstatus() {
  ems_cruisecontrolstatus_ = 0;
  clear_has_ems_cruisecontrolstatus();
}
inline ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::ems_cruisecontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_cruisecontrolstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType >(ems_cruisecontrolstatus_);
}
inline void Gw_ems_sts_0x151_151::set_ems_cruisecontrolstatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_IsValid(value));
  set_has_ems_cruisecontrolstatus();
  ems_cruisecontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_cruisecontrolstatus)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
inline bool Gw_ems_sts_0x151_151::has_ems_drivingmodechange_fault_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_drivingmodechange_fault_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_drivingmodechange_fault_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_drivingmodechange_fault_flag() {
  ems_drivingmodechange_fault_flag_ = 0;
  clear_has_ems_drivingmodechange_fault_flag();
}
inline ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151::ems_drivingmodechange_fault_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_drivingmodechange_fault_flag)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType >(ems_drivingmodechange_fault_flag_);
}
inline void Gw_ems_sts_0x151_151::set_ems_drivingmodechange_fault_flag(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_IsValid(value));
  set_has_ems_drivingmodechange_fault_flag();
  ems_drivingmodechange_fault_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_drivingmodechange_fault_flag)
}

// optional int32 dcm_ems_checksum_0x151 = 9;
inline bool Gw_ems_sts_0x151_151::has_dcm_ems_checksum_0x151() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_dcm_ems_checksum_0x151() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_ems_sts_0x151_151::clear_has_dcm_ems_checksum_0x151() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_ems_sts_0x151_151::clear_dcm_ems_checksum_0x151() {
  dcm_ems_checksum_0x151_ = 0;
  clear_has_dcm_ems_checksum_0x151();
}
inline ::google::protobuf::int32 Gw_ems_sts_0x151_151::dcm_ems_checksum_0x151() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_checksum_0x151)
  return dcm_ems_checksum_0x151_;
}
inline void Gw_ems_sts_0x151_151::set_dcm_ems_checksum_0x151(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x151();
  dcm_ems_checksum_0x151_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_checksum_0x151)
}

// optional int32 ems_engofftime = 10;
inline bool Gw_ems_sts_0x151_151::has_ems_engofftime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_ems_sts_0x151_151::set_has_ems_engofftime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_ems_sts_0x151_151::clear_has_ems_engofftime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_ems_sts_0x151_151::clear_ems_engofftime() {
  ems_engofftime_ = 0;
  clear_has_ems_engofftime();
}
inline ::google::protobuf::int32 Gw_ems_sts_0x151_151::ems_engofftime() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engofftime)
  return ems_engofftime_;
}
inline void Gw_ems_sts_0x151_151::set_ems_engofftime(::google::protobuf::int32 value) {
  set_has_ems_engofftime();
  ems_engofftime_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engofftime)
}

// -------------------------------------------------------------------

// Esp_raw_0x212_212

// optional double esp_vxwwheelrawfr = 1;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelrawfr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelrawfr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawfr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelrawfr() {
  esp_vxwwheelrawfr_ = 0;
  clear_has_esp_vxwwheelrawfr();
}
inline double Esp_raw_0x212_212::esp_vxwwheelrawfr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfr)
  return esp_vxwwheelrawfr_;
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelrawfr(double value) {
  set_has_esp_vxwwheelrawfr();
  esp_vxwwheelrawfr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfr)
}

// optional double esp_vxwwheelrawrl = 2;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelrawrl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelrawrl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawrl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelrawrl() {
  esp_vxwwheelrawrl_ = 0;
  clear_has_esp_vxwwheelrawrl();
}
inline double Esp_raw_0x212_212::esp_vxwwheelrawrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrl)
  return esp_vxwwheelrawrl_;
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelrawrl(double value) {
  set_has_esp_vxwwheelrawrl();
  esp_vxwwheelrawrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrl)
}

// optional double esp_vxwwheelrawrr = 3;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelrawrr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelrawrr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawrr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelrawrr() {
  esp_vxwwheelrawrr_ = 0;
  clear_has_esp_vxwwheelrawrr();
}
inline double Esp_raw_0x212_212::esp_vxwwheelrawrr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrr)
  return esp_vxwwheelrawrr_;
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelrawrr(double value) {
  set_has_esp_vxwwheelrawrr();
  esp_vxwwheelrawrr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrr)
}

// optional int32 rolling_counter_0x212 = 4;
inline bool Esp_raw_0x212_212::has_rolling_counter_0x212() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_raw_0x212_212::set_has_rolling_counter_0x212() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_raw_0x212_212::clear_has_rolling_counter_0x212() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_raw_0x212_212::clear_rolling_counter_0x212() {
  rolling_counter_0x212_ = 0;
  clear_has_rolling_counter_0x212();
}
inline ::google::protobuf::int32 Esp_raw_0x212_212::rolling_counter_0x212() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.rolling_counter_0x212)
  return rolling_counter_0x212_;
}
inline void Esp_raw_0x212_212::set_rolling_counter_0x212(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x212();
  rolling_counter_0x212_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.rolling_counter_0x212)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelrrvalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelrrvalid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelrrvalid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelrrvalid() {
  esp_vxwwheelrrvalid_ = 0;
  clear_has_esp_vxwwheelrrvalid();
}
inline ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212::esp_vxwwheelrrvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrrvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType >(esp_vxwwheelrrvalid_);
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelrrvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_IsValid(value));
  set_has_esp_vxwwheelrrvalid();
  esp_vxwwheelrrvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrrvalid)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelrlvalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelrlvalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelrlvalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelrlvalid() {
  esp_vxwwheelrlvalid_ = 0;
  clear_has_esp_vxwwheelrlvalid();
}
inline ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212::esp_vxwwheelrlvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrlvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType >(esp_vxwwheelrlvalid_);
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelrlvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_IsValid(value));
  set_has_esp_vxwwheelrlvalid();
  esp_vxwwheelrlvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrlvalid)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelfrvalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelfrvalid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelfrvalid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelfrvalid() {
  esp_vxwwheelfrvalid_ = 0;
  clear_has_esp_vxwwheelfrvalid();
}
inline ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212::esp_vxwwheelfrvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelfrvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType >(esp_vxwwheelfrvalid_);
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelfrvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_IsValid(value));
  set_has_esp_vxwwheelfrvalid();
  esp_vxwwheelfrvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelfrvalid)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelflvalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelflvalid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelflvalid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelflvalid() {
  esp_vxwwheelflvalid_ = 0;
  clear_has_esp_vxwwheelflvalid();
}
inline ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212::esp_vxwwheelflvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelflvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType >(esp_vxwwheelflvalid_);
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelflvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType_IsValid(value));
  set_has_esp_vxwwheelflvalid();
  esp_vxwwheelflvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelflvalid)
}

// optional int32 checksum_0x212 = 9;
inline bool Esp_raw_0x212_212::has_checksum_0x212() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Esp_raw_0x212_212::set_has_checksum_0x212() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Esp_raw_0x212_212::clear_has_checksum_0x212() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Esp_raw_0x212_212::clear_checksum_0x212() {
  checksum_0x212_ = 0;
  clear_has_checksum_0x212();
}
inline ::google::protobuf::int32 Esp_raw_0x212_212::checksum_0x212() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.checksum_0x212)
  return checksum_0x212_;
}
inline void Esp_raw_0x212_212::set_checksum_0x212(::google::protobuf::int32 value) {
  set_has_checksum_0x212();
  checksum_0x212_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.checksum_0x212)
}

// optional double esp_vxwwheelrawfl = 10;
inline bool Esp_raw_0x212_212::has_esp_vxwwheelrawfl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Esp_raw_0x212_212::set_has_esp_vxwwheelrawfl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawfl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Esp_raw_0x212_212::clear_esp_vxwwheelrawfl() {
  esp_vxwwheelrawfl_ = 0;
  clear_has_esp_vxwwheelrawfl();
}
inline double Esp_raw_0x212_212::esp_vxwwheelrawfl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfl)
  return esp_vxwwheelrawfl_;
}
inline void Esp_raw_0x212_212::set_esp_vxwwheelrawfl(double value) {
  set_has_esp_vxwwheelrawfl();
  esp_vxwwheelrawfl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfl)
}

// -------------------------------------------------------------------

// Gw_bcm_door_0x310_310

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorstsrearri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorstsrearri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsrearri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorstsrearri() {
  bcm_doorstsrearri_ = 0;
  clear_has_bcm_doorstsrearri();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::bcm_doorstsrearri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType >(bcm_doorstsrearri_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorstsrearri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(value));
  set_has_bcm_doorstsrearri();
  bcm_doorstsrearri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearri)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsrearle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsrearle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsrearle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsrearle() {
  bcm_doorlockstsrearle_ = 0;
  clear_has_bcm_doorlockstsrearle();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::bcm_doorlockstsrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType >(bcm_doorlockstsrearle_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorlockstsrearle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(value));
  set_has_bcm_doorlockstsrearle();
  bcm_doorlockstsrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsfrntri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsfrntri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsfrntri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsfrntri() {
  bcm_doorlockstsfrntri_ = 0;
  clear_has_bcm_doorlockstsfrntri();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::bcm_doorlockstsfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType >(bcm_doorlockstsfrntri_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorlockstsfrntri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(value));
  set_has_bcm_doorlockstsfrntri();
  bcm_doorlockstsfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntri)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsfrntle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsfrntle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsfrntle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsfrntle() {
  bcm_doorlockstsfrntle_ = 0;
  clear_has_bcm_doorlockstsfrntle();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::bcm_doorlockstsfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType >(bcm_doorlockstsfrntle_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorlockstsfrntle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(value));
  set_has_bcm_doorlockstsfrntle();
  bcm_doorlockstsfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
inline bool Gw_bcm_door_0x310_310::has_bcm_antitheftsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_antitheftsts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_antitheftsts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_antitheftsts() {
  bcm_antitheftsts_ = 0;
  clear_has_bcm_antitheftsts();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::bcm_antitheftsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_antitheftsts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType >(bcm_antitheftsts_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_antitheftsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(value));
  set_has_bcm_antitheftsts();
  bcm_antitheftsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_antitheftsts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
inline bool Gw_bcm_door_0x310_310::has_bcm_loadsensitivity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_loadsensitivity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_loadsensitivity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_loadsensitivity() {
  bcm_loadsensitivity_ = 0;
  clear_has_bcm_loadsensitivity();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310::bcm_loadsensitivity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_loadsensitivity)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType >(bcm_loadsensitivity_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_loadsensitivity(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_IsValid(value));
  set_has_bcm_loadsensitivity();
  bcm_loadsensitivity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_loadsensitivity)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
inline bool Gw_bcm_door_0x310_310::has_bcm_lockunlockfeedback() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_lockunlockfeedback() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_lockunlockfeedback() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_lockunlockfeedback() {
  bcm_lockunlockfeedback_ = 0;
  clear_has_bcm_lockunlockfeedback();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::bcm_lockunlockfeedback() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_lockunlockfeedback)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType >(bcm_lockunlockfeedback_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_lockunlockfeedback(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(value));
  set_has_bcm_lockunlockfeedback();
  bcm_lockunlockfeedback_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_lockunlockfeedback)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorlockststrunk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorlockststrunk() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockststrunk() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorlockststrunk() {
  bcm_doorlockststrunk_ = 0;
  clear_has_bcm_doorlockststrunk();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::bcm_doorlockststrunk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockststrunk)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType >(bcm_doorlockststrunk_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorlockststrunk(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(value));
  set_has_bcm_doorlockststrunk();
  bcm_doorlockststrunk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockststrunk)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorststrunk() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorststrunk() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorststrunk() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorststrunk() {
  bcm_doorststrunk_ = 0;
  clear_has_bcm_doorststrunk();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::bcm_doorststrunk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorststrunk)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType >(bcm_doorststrunk_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorststrunk(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(value));
  set_has_bcm_doorststrunk();
  bcm_doorststrunk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorststrunk)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
inline bool Gw_bcm_door_0x310_310::has_bcm_trunkdoorpreunlocksts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_trunkdoorpreunlocksts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_trunkdoorpreunlocksts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_trunkdoorpreunlocksts() {
  bcm_trunkdoorpreunlocksts_ = 0;
  clear_has_bcm_trunkdoorpreunlocksts();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310::bcm_trunkdoorpreunlocksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_trunkdoorpreunlocksts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType >(bcm_trunkdoorpreunlocksts_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_trunkdoorpreunlocksts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(value));
  set_has_bcm_trunkdoorpreunlocksts();
  bcm_trunkdoorpreunlocksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_trunkdoorpreunlocksts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorstsrearle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorstsrearle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsrearle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorstsrearle() {
  bcm_doorstsrearle_ = 0;
  clear_has_bcm_doorstsrearle();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::bcm_doorstsrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType >(bcm_doorstsrearle_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorstsrearle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(value));
  set_has_bcm_doorstsrearle();
  bcm_doorstsrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
inline bool Gw_bcm_door_0x310_310::has_bcm_frontwipersts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_frontwipersts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_frontwipersts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_frontwipersts() {
  bcm_frontwipersts_ = 0;
  clear_has_bcm_frontwipersts();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::bcm_frontwipersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_frontwipersts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType >(bcm_frontwipersts_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_frontwipersts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(value));
  set_has_bcm_frontwipersts();
  bcm_frontwipersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_frontwipersts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
inline bool Gw_bcm_door_0x310_310::has_bcm_enginehoodsts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_enginehoodsts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_enginehoodsts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_enginehoodsts() {
  bcm_enginehoodsts_ = 0;
  clear_has_bcm_enginehoodsts();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::bcm_enginehoodsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_enginehoodsts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType >(bcm_enginehoodsts_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_enginehoodsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(value));
  set_has_bcm_enginehoodsts();
  bcm_enginehoodsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_enginehoodsts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
inline bool Gw_bcm_door_0x310_310::has_bcm_plg_driversw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_plg_driversw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_plg_driversw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_plg_driversw() {
  bcm_plg_driversw_ = 0;
  clear_has_bcm_plg_driversw();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::bcm_plg_driversw() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_plg_driversw)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType >(bcm_plg_driversw_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_plg_driversw(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType_IsValid(value));
  set_has_bcm_plg_driversw();
  bcm_plg_driversw_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_plg_driversw)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
inline bool Gw_bcm_door_0x310_310::has_bcm_windowscmd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_windowscmd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_windowscmd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_windowscmd() {
  bcm_windowscmd_ = 0;
  clear_has_bcm_windowscmd();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::bcm_windowscmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_windowscmd)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType >(bcm_windowscmd_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_windowscmd(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType_IsValid(value));
  set_has_bcm_windowscmd();
  bcm_windowscmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_windowscmd)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
inline bool Gw_bcm_door_0x310_310::has_bcm_rearwipersts() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_rearwipersts() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_rearwipersts() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_rearwipersts() {
  bcm_rearwipersts_ = 0;
  clear_has_bcm_rearwipersts();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::bcm_rearwipersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rearwipersts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType >(bcm_rearwipersts_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_rearwipersts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(value));
  set_has_bcm_rearwipersts();
  bcm_rearwipersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rearwipersts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorstsfrntri() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorstsfrntri() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsfrntri() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorstsfrntri() {
  bcm_doorstsfrntri_ = 0;
  clear_has_bcm_doorstsfrntri();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::bcm_doorstsfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType >(bcm_doorstsfrntri_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorstsfrntri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(value));
  set_has_bcm_doorstsfrntri();
  bcm_doorstsfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntri)
}

// optional int32 bcm_rolling_counter_0x310 = 18;
inline bool Gw_bcm_door_0x310_310::has_bcm_rolling_counter_0x310() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_rolling_counter_0x310() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_rolling_counter_0x310() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_rolling_counter_0x310() {
  bcm_rolling_counter_0x310_ = 0;
  clear_has_bcm_rolling_counter_0x310();
}
inline ::google::protobuf::int32 Gw_bcm_door_0x310_310::bcm_rolling_counter_0x310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rolling_counter_0x310)
  return bcm_rolling_counter_0x310_;
}
inline void Gw_bcm_door_0x310_310::set_bcm_rolling_counter_0x310(::google::protobuf::int32 value) {
  set_has_bcm_rolling_counter_0x310();
  bcm_rolling_counter_0x310_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rolling_counter_0x310)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
inline bool Gw_bcm_door_0x310_310::has_bcm_turnindicatorsts() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_turnindicatorsts() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_turnindicatorsts() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_turnindicatorsts() {
  bcm_turnindicatorsts_ = 0;
  clear_has_bcm_turnindicatorsts();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::bcm_turnindicatorsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_turnindicatorsts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType >(bcm_turnindicatorsts_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_turnindicatorsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_IsValid(value));
  set_has_bcm_turnindicatorsts();
  bcm_turnindicatorsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_turnindicatorsts)
}

// optional int32 bcm_checksum_0x310 = 20;
inline bool Gw_bcm_door_0x310_310::has_bcm_checksum_0x310() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_checksum_0x310() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_checksum_0x310() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_checksum_0x310() {
  bcm_checksum_0x310_ = 0;
  clear_has_bcm_checksum_0x310();
}
inline ::google::protobuf::int32 Gw_bcm_door_0x310_310::bcm_checksum_0x310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_checksum_0x310)
  return bcm_checksum_0x310_;
}
inline void Gw_bcm_door_0x310_310::set_bcm_checksum_0x310(::google::protobuf::int32 value) {
  set_has_bcm_checksum_0x310();
  bcm_checksum_0x310_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_checksum_0x310)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorstsfrntle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorstsfrntle() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsfrntle() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorstsfrntle() {
  bcm_doorstsfrntle_ = 0;
  clear_has_bcm_doorstsfrntle();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::bcm_doorstsfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType >(bcm_doorstsfrntle_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorstsfrntle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(value));
  set_has_bcm_doorstsfrntle();
  bcm_doorstsfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
inline bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsrearri() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsrearri() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsrearri() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsrearri() {
  bcm_doorlockstsrearri_ = 0;
  clear_has_bcm_doorlockstsrearri();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::bcm_doorlockstsrearri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType >(bcm_doorlockstsrearri_);
}
inline void Gw_bcm_door_0x310_310::set_bcm_doorlockstsrearri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(value));
  set_has_bcm_doorlockstsrearri();
  bcm_doorlockstsrearri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearri)
}

// -------------------------------------------------------------------

// Pam_0x270_270

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
inline bool Pam_0x270_270::has_pam_esp_target_gear_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pam_0x270_270::set_has_pam_esp_target_gear_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pam_0x270_270::clear_has_pam_esp_target_gear_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pam_0x270_270::clear_pam_esp_target_gear_request() {
  pam_esp_target_gear_request_ = 0;
  clear_has_pam_esp_target_gear_request();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::pam_esp_target_gear_request() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_esp_target_gear_request)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType >(pam_esp_target_gear_request_);
}
inline void Pam_0x270_270::set_pam_esp_target_gear_request(::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType_IsValid(value));
  set_has_pam_esp_target_gear_request();
  pam_esp_target_gear_request_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_esp_target_gear_request)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
inline bool Pam_0x270_270::has_pam_brakefunctionmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pam_0x270_270::set_has_pam_brakefunctionmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pam_0x270_270::clear_has_pam_brakefunctionmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pam_0x270_270::clear_pam_brakefunctionmode() {
  pam_brakefunctionmode_ = 0;
  clear_has_pam_brakefunctionmode();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270::pam_brakefunctionmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_brakefunctionmode)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType >(pam_brakefunctionmode_);
}
inline void Pam_0x270_270::set_pam_brakefunctionmode(::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType_IsValid(value));
  set_has_pam_brakefunctionmode();
  pam_brakefunctionmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_brakefunctionmode)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
inline bool Pam_0x270_270::has_stopstartinhibit_apa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pam_0x270_270::set_has_stopstartinhibit_apa() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pam_0x270_270::clear_has_stopstartinhibit_apa() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pam_0x270_270::clear_stopstartinhibit_apa() {
  stopstartinhibit_apa_ = 0;
  clear_has_stopstartinhibit_apa();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270::stopstartinhibit_apa() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.stopstartinhibit_apa)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType >(stopstartinhibit_apa_);
}
inline void Pam_0x270_270::set_stopstartinhibit_apa(::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType_IsValid(value));
  set_has_stopstartinhibit_apa();
  stopstartinhibit_apa_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.stopstartinhibit_apa)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
inline bool Pam_0x270_270::has_pam_apaf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pam_0x270_270::set_has_pam_apaf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pam_0x270_270::clear_has_pam_apaf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pam_0x270_270::clear_pam_apaf() {
  pam_apaf_ = 0;
  clear_has_pam_apaf();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType Pam_0x270_270::pam_apaf() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_apaf)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType >(pam_apaf_);
}
inline void Pam_0x270_270::set_pam_apaf(::jmc_auto::canbus::Pam_0x270_270_Pam_apafType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_apafType_IsValid(value));
  set_has_pam_apaf();
  pam_apaf_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_apaf)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
inline bool Pam_0x270_270::has_pam_cmdepssts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pam_0x270_270::set_has_pam_cmdepssts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pam_0x270_270::clear_has_pam_cmdepssts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pam_0x270_270::clear_pam_cmdepssts() {
  pam_cmdepssts_ = 0;
  clear_has_pam_cmdepssts();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::pam_cmdepssts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_cmdepssts)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType >(pam_cmdepssts_);
}
inline void Pam_0x270_270::set_pam_cmdepssts(::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType_IsValid(value));
  set_has_pam_cmdepssts();
  pam_cmdepssts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_cmdepssts)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
inline bool Pam_0x270_270::has_pam_sts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pam_0x270_270::set_has_pam_sts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pam_0x270_270::clear_has_pam_sts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pam_0x270_270::clear_pam_sts() {
  pam_sts_ = 0;
  clear_has_pam_sts();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType Pam_0x270_270::pam_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_sts)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType >(pam_sts_);
}
inline void Pam_0x270_270::set_pam_sts(::jmc_auto::canbus::Pam_0x270_270_Pam_stsType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_stsType_IsValid(value));
  set_has_pam_sts();
  pam_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_sts)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
inline bool Pam_0x270_270::has_pam_brakemodests() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pam_0x270_270::set_has_pam_brakemodests() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pam_0x270_270::clear_has_pam_brakemodests() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pam_0x270_270::clear_pam_brakemodests() {
  pam_brakemodests_ = 0;
  clear_has_pam_brakemodests();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::pam_brakemodests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_brakemodests)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType >(pam_brakemodests_);
}
inline void Pam_0x270_270::set_pam_brakemodests(::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType_IsValid(value));
  set_has_pam_brakemodests();
  pam_brakemodests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_brakemodests)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
inline bool Pam_0x270_270::has_pam_failurebrakemode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pam_0x270_270::set_has_pam_failurebrakemode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Pam_0x270_270::clear_has_pam_failurebrakemode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Pam_0x270_270::clear_pam_failurebrakemode() {
  pam_failurebrakemode_ = 0;
  clear_has_pam_failurebrakemode();
}
inline ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::pam_failurebrakemode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_failurebrakemode)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType >(pam_failurebrakemode_);
}
inline void Pam_0x270_270::set_pam_failurebrakemode(::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType_IsValid(value));
  set_has_pam_failurebrakemode();
  pam_failurebrakemode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_failurebrakemode)
}

// optional float pam_esp_speed_target = 9;
inline bool Pam_0x270_270::has_pam_esp_speed_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pam_0x270_270::set_has_pam_esp_speed_target() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Pam_0x270_270::clear_has_pam_esp_speed_target() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Pam_0x270_270::clear_pam_esp_speed_target() {
  pam_esp_speed_target_ = 0;
  clear_has_pam_esp_speed_target();
}
inline float Pam_0x270_270::pam_esp_speed_target() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_esp_speed_target)
  return pam_esp_speed_target_;
}
inline void Pam_0x270_270::set_pam_esp_speed_target(float value) {
  set_has_pam_esp_speed_target();
  pam_esp_speed_target_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_esp_speed_target)
}

// optional int32 pam_esp_stop_distance = 10;
inline bool Pam_0x270_270::has_pam_esp_stop_distance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Pam_0x270_270::set_has_pam_esp_stop_distance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Pam_0x270_270::clear_has_pam_esp_stop_distance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Pam_0x270_270::clear_pam_esp_stop_distance() {
  pam_esp_stop_distance_ = 0;
  clear_has_pam_esp_stop_distance();
}
inline ::google::protobuf::int32 Pam_0x270_270::pam_esp_stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_esp_stop_distance)
  return pam_esp_stop_distance_;
}
inline void Pam_0x270_270::set_pam_esp_stop_distance(::google::protobuf::int32 value) {
  set_has_pam_esp_stop_distance();
  pam_esp_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_esp_stop_distance)
}

// optional int32 rolling_counter_0x270 = 11;
inline bool Pam_0x270_270::has_rolling_counter_0x270() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Pam_0x270_270::set_has_rolling_counter_0x270() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Pam_0x270_270::clear_has_rolling_counter_0x270() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Pam_0x270_270::clear_rolling_counter_0x270() {
  rolling_counter_0x270_ = 0;
  clear_has_rolling_counter_0x270();
}
inline ::google::protobuf::int32 Pam_0x270_270::rolling_counter_0x270() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.rolling_counter_0x270)
  return rolling_counter_0x270_;
}
inline void Pam_0x270_270::set_rolling_counter_0x270(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x270();
  rolling_counter_0x270_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.rolling_counter_0x270)
}

// optional int32 checksum_0x270 = 12;
inline bool Pam_0x270_270::has_checksum_0x270() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Pam_0x270_270::set_has_checksum_0x270() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Pam_0x270_270::clear_has_checksum_0x270() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Pam_0x270_270::clear_checksum_0x270() {
  checksum_0x270_ = 0;
  clear_has_checksum_0x270();
}
inline ::google::protobuf::int32 Pam_0x270_270::checksum_0x270() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.checksum_0x270)
  return checksum_0x270_;
}
inline void Pam_0x270_270::set_checksum_0x270(::google::protobuf::int32 value) {
  set_has_checksum_0x270();
  checksum_0x270_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.checksum_0x270)
}

// optional double pam_trgtepsstrgwhlang = 13;
inline bool Pam_0x270_270::has_pam_trgtepsstrgwhlang() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Pam_0x270_270::set_has_pam_trgtepsstrgwhlang() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Pam_0x270_270::clear_has_pam_trgtepsstrgwhlang() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Pam_0x270_270::clear_pam_trgtepsstrgwhlang() {
  pam_trgtepsstrgwhlang_ = 0;
  clear_has_pam_trgtepsstrgwhlang();
}
inline double Pam_0x270_270::pam_trgtepsstrgwhlang() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_trgtepsstrgwhlang)
  return pam_trgtepsstrgwhlang_;
}
inline void Pam_0x270_270::set_pam_trgtepsstrgwhlang(double value) {
  set_has_pam_trgtepsstrgwhlang();
  pam_trgtepsstrgwhlang_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_trgtepsstrgwhlang)
}

// -------------------------------------------------------------------

// Pam_0x271_271

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
inline bool Pam_0x271_271::has_pam_infodisplayreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pam_0x271_271::set_has_pam_infodisplayreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pam_0x271_271::clear_has_pam_infodisplayreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pam_0x271_271::clear_pam_infodisplayreq() {
  pam_infodisplayreq_ = 0;
  clear_has_pam_infodisplayreq();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::pam_infodisplayreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_infodisplayreq)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType >(pam_infodisplayreq_);
}
inline void Pam_0x271_271::set_pam_infodisplayreq(::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType_IsValid(value));
  set_has_pam_infodisplayreq();
  pam_infodisplayreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_infodisplayreq)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
inline bool Pam_0x271_271::has_pam_objectstsflm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsflm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsflm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pam_0x271_271::clear_pam_objectstsflm() {
  pam_objectstsflm_ = 0;
  clear_has_pam_objectstsflm();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::pam_objectstsflm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType >(pam_objectstsflm_);
}
inline void Pam_0x271_271::set_pam_objectstsflm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType_IsValid(value));
  set_has_pam_objectstsflm();
  pam_objectstsflm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
inline bool Pam_0x271_271::has_pam_objectstsflc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsflc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsflc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pam_0x271_271::clear_pam_objectstsflc() {
  pam_objectstsflc_ = 0;
  clear_has_pam_objectstsflc();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::pam_objectstsflc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType >(pam_objectstsflc_);
}
inline void Pam_0x271_271::set_pam_objectstsflc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType_IsValid(value));
  set_has_pam_objectstsflc();
  pam_objectstsflc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
inline bool Pam_0x271_271::has_pam_objectstsfrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsfrc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsfrc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pam_0x271_271::clear_pam_objectstsfrc() {
  pam_objectstsfrc_ = 0;
  clear_has_pam_objectstsfrc();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::pam_objectstsfrc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType >(pam_objectstsfrc_);
}
inline void Pam_0x271_271::set_pam_objectstsfrc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType_IsValid(value));
  set_has_pam_objectstsfrc();
  pam_objectstsfrc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
inline bool Pam_0x271_271::has_pam_objectstsfrm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsfrm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsfrm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pam_0x271_271::clear_pam_objectstsfrm() {
  pam_objectstsfrm_ = 0;
  clear_has_pam_objectstsfrm();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::pam_objectstsfrm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType >(pam_objectstsfrm_);
}
inline void Pam_0x271_271::set_pam_objectstsfrm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType_IsValid(value));
  set_has_pam_objectstsfrm();
  pam_objectstsfrm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
inline bool Pam_0x271_271::has_pam_objectstsrlm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsrlm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsrlm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pam_0x271_271::clear_pam_objectstsrlm() {
  pam_objectstsrlm_ = 0;
  clear_has_pam_objectstsrlm();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::pam_objectstsrlm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType >(pam_objectstsrlm_);
}
inline void Pam_0x271_271::set_pam_objectstsrlm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType_IsValid(value));
  set_has_pam_objectstsrlm();
  pam_objectstsrlm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
inline bool Pam_0x271_271::has_pam_objectstsrlc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsrlc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsrlc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pam_0x271_271::clear_pam_objectstsrlc() {
  pam_objectstsrlc_ = 0;
  clear_has_pam_objectstsrlc();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::pam_objectstsrlc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType >(pam_objectstsrlc_);
}
inline void Pam_0x271_271::set_pam_objectstsrlc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType_IsValid(value));
  set_has_pam_objectstsrlc();
  pam_objectstsrlc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
inline bool Pam_0x271_271::has_pam_objectstsrrc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsrrc() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsrrc() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Pam_0x271_271::clear_pam_objectstsrrc() {
  pam_objectstsrrc_ = 0;
  clear_has_pam_objectstsrrc();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::pam_objectstsrrc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType >(pam_objectstsrrc_);
}
inline void Pam_0x271_271::set_pam_objectstsrrc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType_IsValid(value));
  set_has_pam_objectstsrrc();
  pam_objectstsrrc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
inline bool Pam_0x271_271::has_pam_objectstsrrm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pam_0x271_271::set_has_pam_objectstsrrm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Pam_0x271_271::clear_has_pam_objectstsrrm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Pam_0x271_271::clear_pam_objectstsrrm() {
  pam_objectstsrrm_ = 0;
  clear_has_pam_objectstsrrm();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::pam_objectstsrrm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType >(pam_objectstsrrm_);
}
inline void Pam_0x271_271::set_pam_objectstsrrm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType_IsValid(value));
  set_has_pam_objectstsrrm();
  pam_objectstsrrm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
inline bool Pam_0x271_271::has_pam_chimecmdsoundstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Pam_0x271_271::set_has_pam_chimecmdsoundstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Pam_0x271_271::clear_has_pam_chimecmdsoundstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Pam_0x271_271::clear_pam_chimecmdsoundstatus() {
  pam_chimecmdsoundstatus_ = 0;
  clear_has_pam_chimecmdsoundstatus();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::pam_chimecmdsoundstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundstatus)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType >(pam_chimecmdsoundstatus_);
}
inline void Pam_0x271_271::set_pam_chimecmdsoundstatus(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType_IsValid(value));
  set_has_pam_chimecmdsoundstatus();
  pam_chimecmdsoundstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundstatus)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
inline bool Pam_0x271_271::has_pam_rearsystemworksts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Pam_0x271_271::set_has_pam_rearsystemworksts() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Pam_0x271_271::clear_has_pam_rearsystemworksts() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Pam_0x271_271::clear_pam_rearsystemworksts() {
  pam_rearsystemworksts_ = 0;
  clear_has_pam_rearsystemworksts();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::pam_rearsystemworksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_rearsystemworksts)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType >(pam_rearsystemworksts_);
}
inline void Pam_0x271_271::set_pam_rearsystemworksts(::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType_IsValid(value));
  set_has_pam_rearsystemworksts();
  pam_rearsystemworksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_rearsystemworksts)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
inline bool Pam_0x271_271::has_pam_frontsystemworksts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Pam_0x271_271::set_has_pam_frontsystemworksts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Pam_0x271_271::clear_has_pam_frontsystemworksts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Pam_0x271_271::clear_pam_frontsystemworksts() {
  pam_frontsystemworksts_ = 0;
  clear_has_pam_frontsystemworksts();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::pam_frontsystemworksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_frontsystemworksts)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType >(pam_frontsystemworksts_);
}
inline void Pam_0x271_271::set_pam_frontsystemworksts(::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType_IsValid(value));
  set_has_pam_frontsystemworksts();
  pam_frontsystemworksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_frontsystemworksts)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
inline bool Pam_0x271_271::has_pam_parkingbarsts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Pam_0x271_271::set_has_pam_parkingbarsts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Pam_0x271_271::clear_has_pam_parkingbarsts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Pam_0x271_271::clear_pam_parkingbarsts() {
  pam_parkingbarsts_ = 0;
  clear_has_pam_parkingbarsts();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::pam_parkingbarsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarsts)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType >(pam_parkingbarsts_);
}
inline void Pam_0x271_271::set_pam_parkingbarsts(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType_IsValid(value));
  set_has_pam_parkingbarsts();
  pam_parkingbarsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarsts)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
inline bool Pam_0x271_271::has_pam_chimecmdsoundcadence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Pam_0x271_271::set_has_pam_chimecmdsoundcadence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Pam_0x271_271::clear_has_pam_chimecmdsoundcadence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Pam_0x271_271::clear_pam_chimecmdsoundcadence() {
  pam_chimecmdsoundcadence_ = 0;
  clear_has_pam_chimecmdsoundcadence();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::pam_chimecmdsoundcadence() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundcadence)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType >(pam_chimecmdsoundcadence_);
}
inline void Pam_0x271_271::set_pam_chimecmdsoundcadence(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType_IsValid(value));
  set_has_pam_chimecmdsoundcadence();
  pam_chimecmdsoundcadence_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundcadence)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
inline bool Pam_0x271_271::has_pam_parkingbarpercent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Pam_0x271_271::set_has_pam_parkingbarpercent() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Pam_0x271_271::clear_has_pam_parkingbarpercent() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Pam_0x271_271::clear_pam_parkingbarpercent() {
  pam_parkingbarpercent_ = 0;
  clear_has_pam_parkingbarpercent();
}
inline ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::pam_parkingbarpercent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarpercent)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType >(pam_parkingbarpercent_);
}
inline void Pam_0x271_271::set_pam_parkingbarpercent(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType_IsValid(value));
  set_has_pam_parkingbarpercent();
  pam_parkingbarpercent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarpercent)
}

// -------------------------------------------------------------------

// Pam_0x272_272

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
inline bool Pam_0x272_272::has_apa_parkslot_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pam_0x272_272::set_has_apa_parkslot_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pam_0x272_272::clear_has_apa_parkslot_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pam_0x272_272::clear_apa_parkslot_state() {
  apa_parkslot_state_ = 0;
  clear_has_apa_parkslot_state();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::apa_parkslot_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_parkslot_state)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType >(apa_parkslot_state_);
}
inline void Pam_0x272_272::set_apa_parkslot_state(::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType_IsValid(value));
  set_has_apa_parkslot_state();
  apa_parkslot_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_parkslot_state)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
inline bool Pam_0x272_272::has_sdg_objectsts_frs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pam_0x272_272::set_has_sdg_objectsts_frs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pam_0x272_272::clear_has_sdg_objectsts_frs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pam_0x272_272::clear_sdg_objectsts_frs() {
  sdg_objectsts_frs_ = 0;
  clear_has_sdg_objectsts_frs();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::sdg_objectsts_frs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectsts_frs)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType >(sdg_objectsts_frs_);
}
inline void Pam_0x272_272::set_sdg_objectsts_frs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType_IsValid(value));
  set_has_sdg_objectsts_frs();
  sdg_objectsts_frs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectsts_frs)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
inline bool Pam_0x272_272::has_sdg_objectstsrls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pam_0x272_272::set_has_sdg_objectstsrls() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pam_0x272_272::clear_has_sdg_objectstsrls() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pam_0x272_272::clear_sdg_objectstsrls() {
  sdg_objectstsrls_ = 0;
  clear_has_sdg_objectstsrls();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::sdg_objectstsrls() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrls)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType >(sdg_objectstsrls_);
}
inline void Pam_0x272_272::set_sdg_objectstsrls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType_IsValid(value));
  set_has_sdg_objectstsrls();
  sdg_objectstsrls_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrls)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
inline bool Pam_0x272_272::has_apa_selectedside() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pam_0x272_272::set_has_apa_selectedside() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pam_0x272_272::clear_has_apa_selectedside() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pam_0x272_272::clear_apa_selectedside() {
  apa_selectedside_ = 0;
  clear_has_apa_selectedside();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::apa_selectedside() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_selectedside)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType >(apa_selectedside_);
}
inline void Pam_0x272_272::set_apa_selectedside(::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType_IsValid(value));
  set_has_apa_selectedside();
  apa_selectedside_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_selectedside)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
inline bool Pam_0x272_272::has_sdg_objectstsrrs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pam_0x272_272::set_has_sdg_objectstsrrs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pam_0x272_272::clear_has_sdg_objectstsrrs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pam_0x272_272::clear_sdg_objectstsrrs() {
  sdg_objectstsrrs_ = 0;
  clear_has_sdg_objectstsrrs();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::sdg_objectstsrrs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrrs)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType >(sdg_objectstsrrs_);
}
inline void Pam_0x272_272::set_sdg_objectstsrrs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType_IsValid(value));
  set_has_sdg_objectstsrrs();
  sdg_objectstsrrs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrrs)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
inline bool Pam_0x272_272::has_sdg_objectstsfrs_rrs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pam_0x272_272::set_has_sdg_objectstsfrs_rrs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pam_0x272_272::clear_has_sdg_objectstsfrs_rrs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pam_0x272_272::clear_sdg_objectstsfrs_rrs() {
  sdg_objectstsfrs_rrs_ = 0;
  clear_has_sdg_objectstsfrs_rrs();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::sdg_objectstsfrs_rrs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfrs_rrs)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType >(sdg_objectstsfrs_rrs_);
}
inline void Pam_0x272_272::set_sdg_objectstsfrs_rrs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType_IsValid(value));
  set_has_sdg_objectstsfrs_rrs();
  sdg_objectstsfrs_rrs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfrs_rrs)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
inline bool Pam_0x272_272::has_apa_quit_indication() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pam_0x272_272::set_has_apa_quit_indication() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pam_0x272_272::clear_has_apa_quit_indication() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pam_0x272_272::clear_apa_quit_indication() {
  apa_quit_indication_ = 0;
  clear_has_apa_quit_indication();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::apa_quit_indication() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_quit_indication)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType >(apa_quit_indication_);
}
inline void Pam_0x272_272::set_apa_quit_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType_IsValid(value));
  set_has_apa_quit_indication();
  apa_quit_indication_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_quit_indication)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
inline bool Pam_0x272_272::has_apa_recover_int_indication() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pam_0x272_272::set_has_apa_recover_int_indication() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Pam_0x272_272::clear_has_apa_recover_int_indication() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Pam_0x272_272::clear_apa_recover_int_indication() {
  apa_recover_int_indication_ = 0;
  clear_has_apa_recover_int_indication();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::apa_recover_int_indication() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_recover_int_indication)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType >(apa_recover_int_indication_);
}
inline void Pam_0x272_272::set_apa_recover_int_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType_IsValid(value));
  set_has_apa_recover_int_indication();
  apa_recover_int_indication_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_recover_int_indication)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
inline bool Pam_0x272_272::has_sdg_objectstsfls_rls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pam_0x272_272::set_has_sdg_objectstsfls_rls() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Pam_0x272_272::clear_has_sdg_objectstsfls_rls() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Pam_0x272_272::clear_sdg_objectstsfls_rls() {
  sdg_objectstsfls_rls_ = 0;
  clear_has_sdg_objectstsfls_rls();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::sdg_objectstsfls_rls() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls_rls)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType >(sdg_objectstsfls_rls_);
}
inline void Pam_0x272_272::set_sdg_objectstsfls_rls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType_IsValid(value));
  set_has_sdg_objectstsfls_rls();
  sdg_objectstsfls_rls_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls_rls)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
inline bool Pam_0x272_272::has_apa_indication() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Pam_0x272_272::set_has_apa_indication() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Pam_0x272_272::clear_has_apa_indication() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Pam_0x272_272::clear_apa_indication() {
  apa_indication_ = 0;
  clear_has_apa_indication();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType Pam_0x272_272::apa_indication() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_indication)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType >(apa_indication_);
}
inline void Pam_0x272_272::set_apa_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType_IsValid(value));
  set_has_apa_indication();
  apa_indication_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_indication)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
inline bool Pam_0x272_272::has_sdg_objectstsfls() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Pam_0x272_272::set_has_sdg_objectstsfls() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Pam_0x272_272::clear_has_sdg_objectstsfls() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Pam_0x272_272::clear_sdg_objectstsfls() {
  sdg_objectstsfls_ = 0;
  clear_has_sdg_objectstsfls();
}
inline ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::sdg_objectstsfls() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType >(sdg_objectstsfls_);
}
inline void Pam_0x272_272::set_sdg_objectstsfls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType_IsValid(value));
  set_has_sdg_objectstsfls();
  sdg_objectstsfls_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls)
}

// -------------------------------------------------------------------

// Mrr_0x238_238

// optional double acc_tgtaxlowercomftband = 1;
inline bool Mrr_0x238_238::has_acc_tgtaxlowercomftband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mrr_0x238_238::set_has_acc_tgtaxlowercomftband() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mrr_0x238_238::clear_has_acc_tgtaxlowercomftband() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mrr_0x238_238::clear_acc_tgtaxlowercomftband() {
  acc_tgtaxlowercomftband_ = 0;
  clear_has_acc_tgtaxlowercomftband();
}
inline double Mrr_0x238_238::acc_tgtaxlowercomftband() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowercomftband)
  return acc_tgtaxlowercomftband_;
}
inline void Mrr_0x238_238::set_acc_tgtaxlowercomftband(double value) {
  set_has_acc_tgtaxlowercomftband();
  acc_tgtaxlowercomftband_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowercomftband)
}

// optional double acc_tgtaxupperlim = 2;
inline bool Mrr_0x238_238::has_acc_tgtaxupperlim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mrr_0x238_238::set_has_acc_tgtaxupperlim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mrr_0x238_238::clear_has_acc_tgtaxupperlim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mrr_0x238_238::clear_acc_tgtaxupperlim() {
  acc_tgtaxupperlim_ = 0;
  clear_has_acc_tgtaxupperlim();
}
inline double Mrr_0x238_238::acc_tgtaxupperlim() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxupperlim)
  return acc_tgtaxupperlim_;
}
inline void Mrr_0x238_238::set_acc_tgtaxupperlim(double value) {
  set_has_acc_tgtaxupperlim();
  acc_tgtaxupperlim_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxupperlim)
}

// optional double acc_tgtaxlowerlim = 3;
inline bool Mrr_0x238_238::has_acc_tgtaxlowerlim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mrr_0x238_238::set_has_acc_tgtaxlowerlim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mrr_0x238_238::clear_has_acc_tgtaxlowerlim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mrr_0x238_238::clear_acc_tgtaxlowerlim() {
  acc_tgtaxlowerlim_ = 0;
  clear_has_acc_tgtaxlowerlim();
}
inline double Mrr_0x238_238::acc_tgtaxlowerlim() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowerlim)
  return acc_tgtaxlowerlim_;
}
inline void Mrr_0x238_238::set_acc_tgtaxlowerlim(double value) {
  set_has_acc_tgtaxlowerlim();
  acc_tgtaxlowerlim_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowerlim)
}

// optional double acc_tgtax = 4;
inline bool Mrr_0x238_238::has_acc_tgtax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mrr_0x238_238::set_has_acc_tgtax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mrr_0x238_238::clear_has_acc_tgtax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mrr_0x238_238::clear_acc_tgtax() {
  acc_tgtax_ = 0;
  clear_has_acc_tgtax();
}
inline double Mrr_0x238_238::acc_tgtax() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtax)
  return acc_tgtax_;
}
inline void Mrr_0x238_238::set_acc_tgtax(double value) {
  set_has_acc_tgtax();
  acc_tgtax_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtax)
}

// optional int32 rolling_counter_0x238 = 5;
inline bool Mrr_0x238_238::has_rolling_counter_0x238() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mrr_0x238_238::set_has_rolling_counter_0x238() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mrr_0x238_238::clear_has_rolling_counter_0x238() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mrr_0x238_238::clear_rolling_counter_0x238() {
  rolling_counter_0x238_ = 0;
  clear_has_rolling_counter_0x238();
}
inline ::google::protobuf::int32 Mrr_0x238_238::rolling_counter_0x238() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.rolling_counter_0x238)
  return rolling_counter_0x238_;
}
inline void Mrr_0x238_238::set_rolling_counter_0x238(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x238();
  rolling_counter_0x238_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.rolling_counter_0x238)
}

// optional int32 checksum_0x238 = 6;
inline bool Mrr_0x238_238::has_checksum_0x238() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mrr_0x238_238::set_has_checksum_0x238() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mrr_0x238_238::clear_has_checksum_0x238() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mrr_0x238_238::clear_checksum_0x238() {
  checksum_0x238_ = 0;
  clear_has_checksum_0x238();
}
inline ::google::protobuf::int32 Mrr_0x238_238::checksum_0x238() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.checksum_0x238)
  return checksum_0x238_;
}
inline void Mrr_0x238_238::set_checksum_0x238(::google::protobuf::int32 value) {
  set_has_checksum_0x238();
  checksum_0x238_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.checksum_0x238)
}

// optional double acc_tgtaxuppercomftband = 7;
inline bool Mrr_0x238_238::has_acc_tgtaxuppercomftband() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mrr_0x238_238::set_has_acc_tgtaxuppercomftband() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mrr_0x238_238::clear_has_acc_tgtaxuppercomftband() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mrr_0x238_238::clear_acc_tgtaxuppercomftband() {
  acc_tgtaxuppercomftband_ = 0;
  clear_has_acc_tgtaxuppercomftband();
}
inline double Mrr_0x238_238::acc_tgtaxuppercomftband() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxuppercomftband)
  return acc_tgtaxuppercomftband_;
}
inline void Mrr_0x238_238::set_acc_tgtaxuppercomftband(double value) {
  set_has_acc_tgtaxuppercomftband();
  acc_tgtaxuppercomftband_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxuppercomftband)
}

// -------------------------------------------------------------------

// Mrr_0x239_239

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
inline bool Mrr_0x239_239::has_acc_uppercomftbandreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mrr_0x239_239::set_has_acc_uppercomftbandreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mrr_0x239_239::clear_has_acc_uppercomftbandreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mrr_0x239_239::clear_acc_uppercomftbandreq() {
  acc_uppercomftbandreq_ = 0;
  clear_has_acc_uppercomftbandreq();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239::acc_uppercomftbandreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_uppercomftbandreq)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType >(acc_uppercomftbandreq_);
}
inline void Mrr_0x239_239::set_acc_uppercomftbandreq(::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType_IsValid(value));
  set_has_acc_uppercomftbandreq();
  acc_uppercomftbandreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_uppercomftbandreq)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
inline bool Mrr_0x239_239::has_acc_brakepreferred() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mrr_0x239_239::set_has_acc_brakepreferred() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mrr_0x239_239::clear_has_acc_brakepreferred() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mrr_0x239_239::clear_acc_brakepreferred() {
  acc_brakepreferred_ = 0;
  clear_has_acc_brakepreferred();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239::acc_brakepreferred() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_brakepreferred)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType >(acc_brakepreferred_);
}
inline void Mrr_0x239_239::set_acc_brakepreferred(::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType_IsValid(value));
  set_has_acc_brakepreferred();
  acc_brakepreferred_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_brakepreferred)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
inline bool Mrr_0x239_239::has_eba_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mrr_0x239_239::set_has_eba_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mrr_0x239_239::clear_has_eba_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mrr_0x239_239::clear_eba_req() {
  eba_req_ = 0;
  clear_has_eba_req();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType Mrr_0x239_239::eba_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.eba_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType >(eba_req_);
}
inline void Mrr_0x239_239::set_eba_req(::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType_IsValid(value));
  set_has_eba_req();
  eba_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.eba_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
inline bool Mrr_0x239_239::has_aeb_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mrr_0x239_239::set_has_aeb_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mrr_0x239_239::clear_has_aeb_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mrr_0x239_239::clear_aeb_req() {
  aeb_req_ = 0;
  clear_has_aeb_req();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType Mrr_0x239_239::aeb_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aeb_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType >(aeb_req_);
}
inline void Mrr_0x239_239::set_aeb_req(::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType_IsValid(value));
  set_has_aeb_req();
  aeb_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aeb_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
inline bool Mrr_0x239_239::has_acc_standstillreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mrr_0x239_239::set_has_acc_standstillreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mrr_0x239_239::clear_has_acc_standstillreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mrr_0x239_239::clear_acc_standstillreq() {
  acc_standstillreq_ = 0;
  clear_has_acc_standstillreq();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239::acc_standstillreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_standstillreq)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType >(acc_standstillreq_);
}
inline void Mrr_0x239_239::set_acc_standstillreq(::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType_IsValid(value));
  set_has_acc_standstillreq();
  acc_standstillreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_standstillreq)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
inline bool Mrr_0x239_239::has_acc_driveoff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mrr_0x239_239::set_has_acc_driveoff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mrr_0x239_239::clear_has_acc_driveoff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mrr_0x239_239::clear_acc_driveoff() {
  acc_driveoff_ = 0;
  clear_has_acc_driveoff();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239::acc_driveoff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_driveoff)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType >(acc_driveoff_);
}
inline void Mrr_0x239_239::set_acc_driveoff(::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType_IsValid(value));
  set_has_acc_driveoff();
  acc_driveoff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_driveoff)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
inline bool Mrr_0x239_239::has_awb_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mrr_0x239_239::set_has_awb_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mrr_0x239_239::clear_has_awb_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mrr_0x239_239::clear_awb_level() {
  awb_level_ = 0;
  clear_has_awb_level();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType Mrr_0x239_239::awb_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.awb_level)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType >(awb_level_);
}
inline void Mrr_0x239_239::set_awb_level(::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType_IsValid(value));
  set_has_awb_level();
  awb_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.awb_level)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
inline bool Mrr_0x239_239::has_abp_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mrr_0x239_239::set_has_abp_req() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mrr_0x239_239::clear_has_abp_req() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mrr_0x239_239::clear_abp_req() {
  abp_req_ = 0;
  clear_has_abp_req();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType Mrr_0x239_239::abp_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.abp_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType >(abp_req_);
}
inline void Mrr_0x239_239::set_abp_req(::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType_IsValid(value));
  set_has_abp_req();
  abp_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.abp_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
inline bool Mrr_0x239_239::has_awb_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Mrr_0x239_239::set_has_awb_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Mrr_0x239_239::clear_has_awb_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Mrr_0x239_239::clear_awb_req() {
  awb_req_ = 0;
  clear_has_awb_req();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType Mrr_0x239_239::awb_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.awb_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType >(awb_req_);
}
inline void Mrr_0x239_239::set_awb_req(::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType_IsValid(value));
  set_has_awb_req();
  awb_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.awb_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
inline bool Mrr_0x239_239::has_aba_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Mrr_0x239_239::set_has_aba_req() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Mrr_0x239_239::clear_has_aba_req() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Mrr_0x239_239::clear_aba_req() {
  aba_req_ = 0;
  clear_has_aba_req();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType Mrr_0x239_239::aba_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aba_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType >(aba_req_);
}
inline void Mrr_0x239_239::set_aba_req(::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType_IsValid(value));
  set_has_aba_req();
  aba_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aba_req)
}

// optional double aeb_tgtax = 11;
inline bool Mrr_0x239_239::has_aeb_tgtax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Mrr_0x239_239::set_has_aeb_tgtax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Mrr_0x239_239::clear_has_aeb_tgtax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Mrr_0x239_239::clear_aeb_tgtax() {
  aeb_tgtax_ = 0;
  clear_has_aeb_tgtax();
}
inline double Mrr_0x239_239::aeb_tgtax() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aeb_tgtax)
  return aeb_tgtax_;
}
inline void Mrr_0x239_239::set_aeb_tgtax(double value) {
  set_has_aeb_tgtax();
  aeb_tgtax_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aeb_tgtax)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
inline bool Mrr_0x239_239::has_acc_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Mrr_0x239_239::set_has_acc_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Mrr_0x239_239::clear_has_acc_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Mrr_0x239_239::clear_acc_state() {
  acc_state_ = 0;
  clear_has_acc_state();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType Mrr_0x239_239::acc_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_state)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType >(acc_state_);
}
inline void Mrr_0x239_239::set_acc_state(::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType_IsValid(value));
  set_has_acc_state();
  acc_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_state)
}

// optional int32 rolling_counter_0x239 = 13;
inline bool Mrr_0x239_239::has_rolling_counter_0x239() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Mrr_0x239_239::set_has_rolling_counter_0x239() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Mrr_0x239_239::clear_has_rolling_counter_0x239() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Mrr_0x239_239::clear_rolling_counter_0x239() {
  rolling_counter_0x239_ = 0;
  clear_has_rolling_counter_0x239();
}
inline ::google::protobuf::int32 Mrr_0x239_239::rolling_counter_0x239() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.rolling_counter_0x239)
  return rolling_counter_0x239_;
}
inline void Mrr_0x239_239::set_rolling_counter_0x239(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x239();
  rolling_counter_0x239_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.rolling_counter_0x239)
}

// optional int32 checksum_0x239 = 14;
inline bool Mrr_0x239_239::has_checksum_0x239() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Mrr_0x239_239::set_has_checksum_0x239() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Mrr_0x239_239::clear_has_checksum_0x239() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Mrr_0x239_239::clear_checksum_0x239() {
  checksum_0x239_ = 0;
  clear_has_checksum_0x239();
}
inline ::google::protobuf::int32 Mrr_0x239_239::checksum_0x239() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.checksum_0x239)
  return checksum_0x239_;
}
inline void Mrr_0x239_239::set_checksum_0x239(::google::protobuf::int32 value) {
  set_has_checksum_0x239();
  checksum_0x239_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.checksum_0x239)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
inline bool Mrr_0x239_239::has_shutdownmode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Mrr_0x239_239::set_has_shutdownmode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Mrr_0x239_239::clear_has_shutdownmode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Mrr_0x239_239::clear_shutdownmode() {
  shutdownmode_ = 0;
  clear_has_shutdownmode();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::shutdownmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.shutdownmode)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType >(shutdownmode_);
}
inline void Mrr_0x239_239::set_shutdownmode(::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType_IsValid(value));
  set_has_shutdownmode();
  shutdownmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.shutdownmode)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
inline bool Mrr_0x239_239::has_aba_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Mrr_0x239_239::set_has_aba_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Mrr_0x239_239::clear_has_aba_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Mrr_0x239_239::clear_aba_level() {
  aba_level_ = 0;
  clear_has_aba_level();
}
inline ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType Mrr_0x239_239::aba_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aba_level)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType >(aba_level_);
}
inline void Mrr_0x239_239::set_aba_level(::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType_IsValid(value));
  set_has_aba_level();
  aba_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aba_level)
}

// -------------------------------------------------------------------

// Esp_direction_0x235_235

// optional int32 esp_whlmilgrearre = 1;
inline bool Esp_direction_0x235_235::has_esp_whlmilgrearre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_whlmilgrearre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_direction_0x235_235::clear_has_esp_whlmilgrearre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_direction_0x235_235::clear_esp_whlmilgrearre() {
  esp_whlmilgrearre_ = 0;
  clear_has_esp_whlmilgrearre();
}
inline ::google::protobuf::int32 Esp_direction_0x235_235::esp_whlmilgrearre() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearre)
  return esp_whlmilgrearre_;
}
inline void Esp_direction_0x235_235::set_esp_whlmilgrearre(::google::protobuf::int32 value) {
  set_has_esp_whlmilgrearre();
  esp_whlmilgrearre_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearre)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
inline bool Esp_direction_0x235_235::has_esp_frwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_frwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_direction_0x235_235::clear_has_esp_frwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_direction_0x235_235::clear_esp_frwheeldrivedirstatus() {
  esp_frwheeldrivedirstatus_ = 0;
  clear_has_esp_frwheeldrivedirstatus();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235::esp_frwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType >(esp_frwheeldrivedirstatus_);
}
inline void Esp_direction_0x235_235::set_esp_frwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_IsValid(value));
  set_has_esp_frwheeldrivedirstatus();
  esp_frwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
inline bool Esp_direction_0x235_235::has_esp_flwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_flwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_direction_0x235_235::clear_has_esp_flwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_direction_0x235_235::clear_esp_flwheeldrivedirstatus() {
  esp_flwheeldrivedirstatus_ = 0;
  clear_has_esp_flwheeldrivedirstatus();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235::esp_flwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType >(esp_flwheeldrivedirstatus_);
}
inline void Esp_direction_0x235_235::set_esp_flwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_IsValid(value));
  set_has_esp_flwheeldrivedirstatus();
  esp_flwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
inline bool Esp_direction_0x235_235::has_esp_rrwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_rrwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_direction_0x235_235::clear_has_esp_rrwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_direction_0x235_235::clear_esp_rrwheeldrivedirstatus() {
  esp_rrwheeldrivedirstatus_ = 0;
  clear_has_esp_rrwheeldrivedirstatus();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235::esp_rrwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType >(esp_rrwheeldrivedirstatus_);
}
inline void Esp_direction_0x235_235::set_esp_rrwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_IsValid(value));
  set_has_esp_rrwheeldrivedirstatus();
  esp_rrwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
inline bool Esp_direction_0x235_235::has_esp_rlwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_rlwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_direction_0x235_235::clear_has_esp_rlwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_direction_0x235_235::clear_esp_rlwheeldrivedirstatus() {
  esp_rlwheeldrivedirstatus_ = 0;
  clear_has_esp_rlwheeldrivedirstatus();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235::esp_rlwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType >(esp_rlwheeldrivedirstatus_);
}
inline void Esp_direction_0x235_235::set_esp_rlwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_IsValid(value));
  set_has_esp_rlwheeldrivedirstatus();
  esp_rlwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
inline bool Esp_direction_0x235_235::has_esp_rrwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_rrwheeldrivedirection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_direction_0x235_235::clear_has_esp_rrwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_direction_0x235_235::clear_esp_rrwheeldrivedirection() {
  esp_rrwheeldrivedirection_ = 0;
  clear_has_esp_rrwheeldrivedirection();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::esp_rrwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType >(esp_rrwheeldrivedirection_);
}
inline void Esp_direction_0x235_235::set_esp_rrwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_IsValid(value));
  set_has_esp_rrwheeldrivedirection();
  esp_rrwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirection)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
inline bool Esp_direction_0x235_235::has_esp_rlwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_rlwheeldrivedirection() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_direction_0x235_235::clear_has_esp_rlwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_direction_0x235_235::clear_esp_rlwheeldrivedirection() {
  esp_rlwheeldrivedirection_ = 0;
  clear_has_esp_rlwheeldrivedirection();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::esp_rlwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType >(esp_rlwheeldrivedirection_);
}
inline void Esp_direction_0x235_235::set_esp_rlwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_IsValid(value));
  set_has_esp_rlwheeldrivedirection();
  esp_rlwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirection)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
inline bool Esp_direction_0x235_235::has_esp_frwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_frwheeldrivedirection() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_direction_0x235_235::clear_has_esp_frwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_direction_0x235_235::clear_esp_frwheeldrivedirection() {
  esp_frwheeldrivedirection_ = 0;
  clear_has_esp_frwheeldrivedirection();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::esp_frwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType >(esp_frwheeldrivedirection_);
}
inline void Esp_direction_0x235_235::set_esp_frwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_IsValid(value));
  set_has_esp_frwheeldrivedirection();
  esp_frwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirection)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
inline bool Esp_direction_0x235_235::has_esp_flwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_flwheeldrivedirection() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Esp_direction_0x235_235::clear_has_esp_flwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Esp_direction_0x235_235::clear_esp_flwheeldrivedirection() {
  esp_flwheeldrivedirection_ = 0;
  clear_has_esp_flwheeldrivedirection();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::esp_flwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType >(esp_flwheeldrivedirection_);
}
inline void Esp_direction_0x235_235::set_esp_flwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_IsValid(value));
  set_has_esp_flwheeldrivedirection();
  esp_flwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirection)
}

// optional int32 rolling_counter_0x235 = 10;
inline bool Esp_direction_0x235_235::has_rolling_counter_0x235() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Esp_direction_0x235_235::set_has_rolling_counter_0x235() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Esp_direction_0x235_235::clear_has_rolling_counter_0x235() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Esp_direction_0x235_235::clear_rolling_counter_0x235() {
  rolling_counter_0x235_ = 0;
  clear_has_rolling_counter_0x235();
}
inline ::google::protobuf::int32 Esp_direction_0x235_235::rolling_counter_0x235() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.rolling_counter_0x235)
  return rolling_counter_0x235_;
}
inline void Esp_direction_0x235_235::set_rolling_counter_0x235(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x235();
  rolling_counter_0x235_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.rolling_counter_0x235)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
inline bool Esp_direction_0x235_235::has_esp_whlmilgrearlestatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_whlmilgrearlestatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Esp_direction_0x235_235::clear_has_esp_whlmilgrearlestatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Esp_direction_0x235_235::clear_esp_whlmilgrearlestatus() {
  esp_whlmilgrearlestatus_ = 0;
  clear_has_esp_whlmilgrearlestatus();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235::esp_whlmilgrearlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearlestatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType >(esp_whlmilgrearlestatus_);
}
inline void Esp_direction_0x235_235::set_esp_whlmilgrearlestatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_IsValid(value));
  set_has_esp_whlmilgrearlestatus();
  esp_whlmilgrearlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearlestatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
inline bool Esp_direction_0x235_235::has_esp_whlmilgrearristatus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_whlmilgrearristatus() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Esp_direction_0x235_235::clear_has_esp_whlmilgrearristatus() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Esp_direction_0x235_235::clear_esp_whlmilgrearristatus() {
  esp_whlmilgrearristatus_ = 0;
  clear_has_esp_whlmilgrearristatus();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235::esp_whlmilgrearristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearristatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType >(esp_whlmilgrearristatus_);
}
inline void Esp_direction_0x235_235::set_esp_whlmilgrearristatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType_IsValid(value));
  set_has_esp_whlmilgrearristatus();
  esp_whlmilgrearristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearristatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
inline bool Esp_direction_0x235_235::has_esp_vehiclestandstill() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_vehiclestandstill() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Esp_direction_0x235_235::clear_has_esp_vehiclestandstill() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Esp_direction_0x235_235::clear_esp_vehiclestandstill() {
  esp_vehiclestandstill_ = 0;
  clear_has_esp_vehiclestandstill();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::esp_vehiclestandstill() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_vehiclestandstill)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType >(esp_vehiclestandstill_);
}
inline void Esp_direction_0x235_235::set_esp_vehiclestandstill(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType_IsValid(value));
  set_has_esp_vehiclestandstill();
  esp_vehiclestandstill_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_vehiclestandstill)
}

// optional int32 checksum_0x235 = 14;
inline bool Esp_direction_0x235_235::has_checksum_0x235() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Esp_direction_0x235_235::set_has_checksum_0x235() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Esp_direction_0x235_235::clear_has_checksum_0x235() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Esp_direction_0x235_235::clear_checksum_0x235() {
  checksum_0x235_ = 0;
  clear_has_checksum_0x235();
}
inline ::google::protobuf::int32 Esp_direction_0x235_235::checksum_0x235() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.checksum_0x235)
  return checksum_0x235_;
}
inline void Esp_direction_0x235_235::set_checksum_0x235(::google::protobuf::int32 value) {
  set_has_checksum_0x235();
  checksum_0x235_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.checksum_0x235)
}

// optional int32 esp_whlmilgrearle = 15;
inline bool Esp_direction_0x235_235::has_esp_whlmilgrearle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Esp_direction_0x235_235::set_has_esp_whlmilgrearle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Esp_direction_0x235_235::clear_has_esp_whlmilgrearle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Esp_direction_0x235_235::clear_esp_whlmilgrearle() {
  esp_whlmilgrearle_ = 0;
  clear_has_esp_whlmilgrearle();
}
inline ::google::protobuf::int32 Esp_direction_0x235_235::esp_whlmilgrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearle)
  return esp_whlmilgrearle_;
}
inline void Esp_direction_0x235_235::set_esp_whlmilgrearle(::google::protobuf::int32 value) {
  set_has_esp_whlmilgrearle();
  esp_whlmilgrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearle)
}

// -------------------------------------------------------------------

// Esp_advanced_0x234_234

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
inline bool Esp_advanced_0x234_234::has_esp_vdcactive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_vdcactive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_vdcactive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_advanced_0x234_234::clear_esp_vdcactive() {
  esp_vdcactive_ = 0;
  clear_has_esp_vdcactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234::esp_vdcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vdcactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType >(esp_vdcactive_);
}
inline void Esp_advanced_0x234_234::set_esp_vdcactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType_IsValid(value));
  set_has_esp_vdcactive();
  esp_vdcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vdcactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
inline bool Esp_advanced_0x234_234::has_esp_ebdactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_ebdactive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_ebdactive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_advanced_0x234_234::clear_esp_ebdactive() {
  esp_ebdactive_ = 0;
  clear_has_esp_ebdactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234::esp_ebdactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ebdactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType >(esp_ebdactive_);
}
inline void Esp_advanced_0x234_234::set_esp_ebdactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType_IsValid(value));
  set_has_esp_ebdactive();
  esp_ebdactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ebdactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
inline bool Esp_advanced_0x234_234::has_esp_ecdtempoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_ecdtempoff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_ecdtempoff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_advanced_0x234_234::clear_esp_ecdtempoff() {
  esp_ecdtempoff_ = 0;
  clear_has_esp_ecdtempoff();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234::esp_ecdtempoff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ecdtempoff)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType >(esp_ecdtempoff_);
}
inline void Esp_advanced_0x234_234::set_esp_ecdtempoff(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType_IsValid(value));
  set_has_esp_ecdtempoff();
  esp_ecdtempoff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ecdtempoff)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
inline bool Esp_advanced_0x234_234::has_esp_nobrakeforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_nobrakeforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_nobrakeforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_advanced_0x234_234::clear_esp_nobrakeforce() {
  esp_nobrakeforce_ = 0;
  clear_has_esp_nobrakeforce();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234::esp_nobrakeforce() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_nobrakeforce)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType >(esp_nobrakeforce_);
}
inline void Esp_advanced_0x234_234::set_esp_nobrakeforce(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType_IsValid(value));
  set_has_esp_nobrakeforce();
  esp_nobrakeforce_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_nobrakeforce)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
inline bool Esp_advanced_0x234_234::has_esp_brkfrictqtotatwhlvaild() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_brkfrictqtotatwhlvaild() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_brkfrictqtotatwhlvaild() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_advanced_0x234_234::clear_esp_brkfrictqtotatwhlvaild() {
  esp_brkfrictqtotatwhlvaild_ = 0;
  clear_has_esp_brkfrictqtotatwhlvaild();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234::esp_brkfrictqtotatwhlvaild() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhlvaild)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType >(esp_brkfrictqtotatwhlvaild_);
}
inline void Esp_advanced_0x234_234::set_esp_brkfrictqtotatwhlvaild(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_IsValid(value));
  set_has_esp_brkfrictqtotatwhlvaild();
  esp_brkfrictqtotatwhlvaild_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhlvaild)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
inline bool Esp_advanced_0x234_234::has_esp_aebdecavailable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_aebdecavailable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_aebdecavailable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_advanced_0x234_234::clear_esp_aebdecavailable() {
  esp_aebdecavailable_ = 0;
  clear_has_esp_aebdecavailable();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234::esp_aebdecavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType >(esp_aebdecavailable_);
}
inline void Esp_advanced_0x234_234::set_esp_aebdecavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType_IsValid(value));
  set_has_esp_aebdecavailable();
  esp_aebdecavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
inline bool Esp_advanced_0x234_234::has_esp_aebdecactive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_aebdecactive() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_aebdecactive() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_advanced_0x234_234::clear_esp_aebdecactive() {
  esp_aebdecactive_ = 0;
  clear_has_esp_aebdecactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234::esp_aebdecactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType >(esp_aebdecactive_);
}
inline void Esp_advanced_0x234_234::set_esp_aebdecactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType_IsValid(value));
  set_has_esp_aebdecactive();
  esp_aebdecactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
inline bool Esp_advanced_0x234_234::has_esp_prefillavailable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_prefillavailable() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_prefillavailable() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_advanced_0x234_234::clear_esp_prefillavailable() {
  esp_prefillavailable_ = 0;
  clear_has_esp_prefillavailable();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234::esp_prefillavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType >(esp_prefillavailable_);
}
inline void Esp_advanced_0x234_234::set_esp_prefillavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType_IsValid(value));
  set_has_esp_prefillavailable();
  esp_prefillavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
inline bool Esp_advanced_0x234_234::has_esp_prefillactive() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_prefillactive() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_prefillactive() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Esp_advanced_0x234_234::clear_esp_prefillactive() {
  esp_prefillactive_ = 0;
  clear_has_esp_prefillactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234::esp_prefillactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType >(esp_prefillactive_);
}
inline void Esp_advanced_0x234_234::set_esp_prefillactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType_IsValid(value));
  set_has_esp_prefillactive();
  esp_prefillactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
inline bool Esp_advanced_0x234_234::has_esp_abaavailable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_abaavailable() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_abaavailable() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Esp_advanced_0x234_234::clear_esp_abaavailable() {
  esp_abaavailable_ = 0;
  clear_has_esp_abaavailable();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234::esp_abaavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType >(esp_abaavailable_);
}
inline void Esp_advanced_0x234_234::set_esp_abaavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType_IsValid(value));
  set_has_esp_abaavailable();
  esp_abaavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
inline bool Esp_advanced_0x234_234::has_esp_abaactive() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_abaactive() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_abaactive() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Esp_advanced_0x234_234::clear_esp_abaactive() {
  esp_abaactive_ = 0;
  clear_has_esp_abaactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234::esp_abaactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType >(esp_abaactive_);
}
inline void Esp_advanced_0x234_234::set_esp_abaactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType_IsValid(value));
  set_has_esp_abaactive();
  esp_abaactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
inline bool Esp_advanced_0x234_234::has_esp_cddavailable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_cddavailable() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_cddavailable() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Esp_advanced_0x234_234::clear_esp_cddavailable() {
  esp_cddavailable_ = 0;
  clear_has_esp_cddavailable();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234::esp_cddavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType >(esp_cddavailable_);
}
inline void Esp_advanced_0x234_234::set_esp_cddavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType_IsValid(value));
  set_has_esp_cddavailable();
  esp_cddavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
inline bool Esp_advanced_0x234_234::has_esp_dtcactive() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_dtcactive() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_dtcactive() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Esp_advanced_0x234_234::clear_esp_dtcactive() {
  esp_dtcactive_ = 0;
  clear_has_esp_dtcactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234::esp_dtcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_dtcactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType >(esp_dtcactive_);
}
inline void Esp_advanced_0x234_234::set_esp_dtcactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType_IsValid(value));
  set_has_esp_dtcactive();
  esp_dtcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_dtcactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
inline bool Esp_advanced_0x234_234::has_esp_awbavailable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_awbavailable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_awbavailable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Esp_advanced_0x234_234::clear_esp_awbavailable() {
  esp_awbavailable_ = 0;
  clear_has_esp_awbavailable();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234::esp_awbavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType >(esp_awbavailable_);
}
inline void Esp_advanced_0x234_234::set_esp_awbavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType_IsValid(value));
  set_has_esp_awbavailable();
  esp_awbavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
inline bool Esp_advanced_0x234_234::has_esp_awbactive() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_awbactive() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_awbactive() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Esp_advanced_0x234_234::clear_esp_awbactive() {
  esp_awbactive_ = 0;
  clear_has_esp_awbactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234::esp_awbactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType >(esp_awbactive_);
}
inline void Esp_advanced_0x234_234::set_esp_awbactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType_IsValid(value));
  set_has_esp_awbactive();
  esp_awbactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbactive)
}

// optional int32 esp_brkfrictqtotatwhl = 16;
inline bool Esp_advanced_0x234_234::has_esp_brkfrictqtotatwhl() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_brkfrictqtotatwhl() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_brkfrictqtotatwhl() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Esp_advanced_0x234_234::clear_esp_brkfrictqtotatwhl() {
  esp_brkfrictqtotatwhl_ = 0;
  clear_has_esp_brkfrictqtotatwhl();
}
inline ::google::protobuf::int32 Esp_advanced_0x234_234::esp_brkfrictqtotatwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhl)
  return esp_brkfrictqtotatwhl_;
}
inline void Esp_advanced_0x234_234::set_esp_brkfrictqtotatwhl(::google::protobuf::int32 value) {
  set_has_esp_brkfrictqtotatwhl();
  esp_brkfrictqtotatwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhl)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
inline bool Esp_advanced_0x234_234::has_esp_vlcerror() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_vlcerror() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_vlcerror() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Esp_advanced_0x234_234::clear_esp_vlcerror() {
  esp_vlcerror_ = 0;
  clear_has_esp_vlcerror();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234::esp_vlcerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vlcerror)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType >(esp_vlcerror_);
}
inline void Esp_advanced_0x234_234::set_esp_vlcerror(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType_IsValid(value));
  set_has_esp_vlcerror();
  esp_vlcerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vlcerror)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
inline bool Esp_advanced_0x234_234::has_esp_cdderror() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_cdderror() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_cdderror() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Esp_advanced_0x234_234::clear_esp_cdderror() {
  esp_cdderror_ = 0;
  clear_has_esp_cdderror();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234::esp_cdderror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdderror)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType >(esp_cdderror_);
}
inline void Esp_advanced_0x234_234::set_esp_cdderror(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType_IsValid(value));
  set_has_esp_cdderror();
  esp_cdderror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdderror)
}

// optional int32 rolling_counter_0x234 = 19;
inline bool Esp_advanced_0x234_234::has_rolling_counter_0x234() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_rolling_counter_0x234() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Esp_advanced_0x234_234::clear_has_rolling_counter_0x234() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Esp_advanced_0x234_234::clear_rolling_counter_0x234() {
  rolling_counter_0x234_ = 0;
  clear_has_rolling_counter_0x234();
}
inline ::google::protobuf::int32 Esp_advanced_0x234_234::rolling_counter_0x234() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.rolling_counter_0x234)
  return rolling_counter_0x234_;
}
inline void Esp_advanced_0x234_234::set_rolling_counter_0x234(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x234();
  rolling_counter_0x234_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.rolling_counter_0x234)
}

// optional int32 checksum_0x234 = 20;
inline bool Esp_advanced_0x234_234::has_checksum_0x234() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_checksum_0x234() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Esp_advanced_0x234_234::clear_has_checksum_0x234() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Esp_advanced_0x234_234::clear_checksum_0x234() {
  checksum_0x234_ = 0;
  clear_has_checksum_0x234();
}
inline ::google::protobuf::int32 Esp_advanced_0x234_234::checksum_0x234() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.checksum_0x234)
  return checksum_0x234_;
}
inline void Esp_advanced_0x234_234::set_checksum_0x234(::google::protobuf::int32 value) {
  set_has_checksum_0x234();
  checksum_0x234_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.checksum_0x234)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
inline bool Esp_advanced_0x234_234::has_esp_cddactive() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_cddactive() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_cddactive() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Esp_advanced_0x234_234::clear_esp_cddactive() {
  esp_cddactive_ = 0;
  clear_has_esp_cddactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234::esp_cddactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType >(esp_cddactive_);
}
inline void Esp_advanced_0x234_234::set_esp_cddactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType_IsValid(value));
  set_has_esp_cddactive();
  esp_cddactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
inline bool Esp_advanced_0x234_234::has_esp_cdd_apactive() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Esp_advanced_0x234_234::set_has_esp_cdd_apactive() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Esp_advanced_0x234_234::clear_has_esp_cdd_apactive() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Esp_advanced_0x234_234::clear_esp_cdd_apactive() {
  esp_cdd_apactive_ = 0;
  clear_has_esp_cdd_apactive();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234::esp_cdd_apactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdd_apactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType >(esp_cdd_apactive_);
}
inline void Esp_advanced_0x234_234::set_esp_cdd_apactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType_IsValid(value));
  set_has_esp_cdd_apactive();
  esp_cdd_apactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdd_apactive)
}

// -------------------------------------------------------------------

// Eps_advanced_0x176_176

// optional double eps_lkaresponsetorque = 1;
inline bool Eps_advanced_0x176_176::has_eps_lkaresponsetorque() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_lkaresponsetorque() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_lkaresponsetorque() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Eps_advanced_0x176_176::clear_eps_lkaresponsetorque() {
  eps_lkaresponsetorque_ = 0;
  clear_has_eps_lkaresponsetorque();
}
inline double Eps_advanced_0x176_176::eps_lkaresponsetorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorque)
  return eps_lkaresponsetorque_;
}
inline void Eps_advanced_0x176_176::set_eps_lkaresponsetorque(double value) {
  set_has_eps_lkaresponsetorque();
  eps_lkaresponsetorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorque)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
inline bool Eps_advanced_0x176_176::has_eps_tosionbartorquevalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_tosionbartorquevalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_tosionbartorquevalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Eps_advanced_0x176_176::clear_eps_tosionbartorquevalid() {
  eps_tosionbartorquevalid_ = 0;
  clear_has_eps_tosionbartorquevalid();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176::eps_tosionbartorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_tosionbartorquevalid)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType >(eps_tosionbartorquevalid_);
}
inline void Eps_advanced_0x176_176::set_eps_tosionbartorquevalid(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_IsValid(value));
  set_has_eps_tosionbartorquevalid();
  eps_tosionbartorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_tosionbartorquevalid)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
inline bool Eps_advanced_0x176_176::has_eps_lkaresponsetorquevalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_lkaresponsetorquevalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_lkaresponsetorquevalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Eps_advanced_0x176_176::clear_eps_lkaresponsetorquevalid() {
  eps_lkaresponsetorquevalid_ = 0;
  clear_has_eps_lkaresponsetorquevalid();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176::eps_lkaresponsetorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorquevalid)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType >(eps_lkaresponsetorquevalid_);
}
inline void Eps_advanced_0x176_176::set_eps_lkaresponsetorquevalid(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_IsValid(value));
  set_has_eps_lkaresponsetorquevalid();
  eps_lkaresponsetorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorquevalid)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
inline bool Eps_advanced_0x176_176::has_eps_ldwcontrolstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_ldwcontrolstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_ldwcontrolstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Eps_advanced_0x176_176::clear_eps_ldwcontrolstatus() {
  eps_ldwcontrolstatus_ = 0;
  clear_has_eps_ldwcontrolstatus();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::eps_ldwcontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_ldwcontrolstatus)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType >(eps_ldwcontrolstatus_);
}
inline void Eps_advanced_0x176_176::set_eps_ldwcontrolstatus(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_IsValid(value));
  set_has_eps_ldwcontrolstatus();
  eps_ldwcontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_ldwcontrolstatus)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
inline bool Eps_advanced_0x176_176::has_eps_pam_steeringsts_reserved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_pam_steeringsts_reserved() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_pam_steeringsts_reserved() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Eps_advanced_0x176_176::clear_eps_pam_steeringsts_reserved() {
  eps_pam_steeringsts_reserved_ = 0;
  clear_has_eps_pam_steeringsts_reserved();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176::eps_pam_steeringsts_reserved() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_pam_steeringsts_reserved)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType >(eps_pam_steeringsts_reserved_);
}
inline void Eps_advanced_0x176_176::set_eps_pam_steeringsts_reserved(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_IsValid(value));
  set_has_eps_pam_steeringsts_reserved();
  eps_pam_steeringsts_reserved_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_pam_steeringsts_reserved)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
inline bool Eps_advanced_0x176_176::has_eps_lkacontrolstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_lkacontrolstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_lkacontrolstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Eps_advanced_0x176_176::clear_eps_lkacontrolstatus() {
  eps_lkacontrolstatus_ = 0;
  clear_has_eps_lkacontrolstatus();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::eps_lkacontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkacontrolstatus)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType >(eps_lkacontrolstatus_);
}
inline void Eps_advanced_0x176_176::set_eps_lkacontrolstatus(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType_IsValid(value));
  set_has_eps_lkacontrolstatus();
  eps_lkacontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkacontrolstatus)
}

// optional int32 eps_epspaminh = 7;
inline bool Eps_advanced_0x176_176::has_eps_epspaminh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_epspaminh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_epspaminh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Eps_advanced_0x176_176::clear_eps_epspaminh() {
  eps_epspaminh_ = 0;
  clear_has_eps_epspaminh();
}
inline ::google::protobuf::int32 Eps_advanced_0x176_176::eps_epspaminh() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspaminh)
  return eps_epspaminh_;
}
inline void Eps_advanced_0x176_176::set_eps_epspaminh(::google::protobuf::int32 value) {
  set_has_eps_epspaminh();
  eps_epspaminh_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspaminh)
}

// optional int32 rolling_counter_0x176 = 8;
inline bool Eps_advanced_0x176_176::has_rolling_counter_0x176() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_rolling_counter_0x176() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Eps_advanced_0x176_176::clear_has_rolling_counter_0x176() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Eps_advanced_0x176_176::clear_rolling_counter_0x176() {
  rolling_counter_0x176_ = 0;
  clear_has_rolling_counter_0x176();
}
inline ::google::protobuf::int32 Eps_advanced_0x176_176::rolling_counter_0x176() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.rolling_counter_0x176)
  return rolling_counter_0x176_;
}
inline void Eps_advanced_0x176_176::set_rolling_counter_0x176(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x176();
  rolling_counter_0x176_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.rolling_counter_0x176)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
inline bool Eps_advanced_0x176_176::has_eps_epspamsts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_epspamsts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_epspamsts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Eps_advanced_0x176_176::clear_eps_epspamsts() {
  eps_epspamsts_ = 0;
  clear_has_eps_epspamsts();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::eps_epspamsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspamsts)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType >(eps_epspamsts_);
}
inline void Eps_advanced_0x176_176::set_eps_epspamsts(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType_IsValid(value));
  set_has_eps_epspamsts();
  eps_epspamsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspamsts)
}

// optional int32 checksum_0x176 = 10;
inline bool Eps_advanced_0x176_176::has_checksum_0x176() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_checksum_0x176() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Eps_advanced_0x176_176::clear_has_checksum_0x176() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Eps_advanced_0x176_176::clear_checksum_0x176() {
  checksum_0x176_ = 0;
  clear_has_checksum_0x176();
}
inline ::google::protobuf::int32 Eps_advanced_0x176_176::checksum_0x176() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.checksum_0x176)
  return checksum_0x176_;
}
inline void Eps_advanced_0x176_176::set_checksum_0x176(::google::protobuf::int32 value) {
  set_has_checksum_0x176();
  checksum_0x176_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.checksum_0x176)
}

// optional double eps_torsionbartorque = 11;
inline bool Eps_advanced_0x176_176::has_eps_torsionbartorque() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Eps_advanced_0x176_176::set_has_eps_torsionbartorque() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Eps_advanced_0x176_176::clear_has_eps_torsionbartorque() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Eps_advanced_0x176_176::clear_eps_torsionbartorque() {
  eps_torsionbartorque_ = 0;
  clear_has_eps_torsionbartorque();
}
inline double Eps_advanced_0x176_176::eps_torsionbartorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_torsionbartorque)
  return eps_torsionbartorque_;
}
inline void Eps_advanced_0x176_176::set_eps_torsionbartorque(double value) {
  set_has_eps_torsionbartorque();
  eps_torsionbartorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_torsionbartorque)
}

// -------------------------------------------------------------------

// Esp_whlpulse_0x236_236

// optional int32 esp_wheelpulse_fr = 1;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fr() {
  esp_wheelpulse_fr_ = 0;
  clear_has_esp_wheelpulse_fr();
}
inline ::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr)
  return esp_wheelpulse_fr_;
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fr();
  esp_wheelpulse_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr)
}

// optional int32 esp_wheelpulse_rl = 2;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rl() {
  esp_wheelpulse_rl_ = 0;
  clear_has_esp_wheelpulse_rl();
}
inline ::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl)
  return esp_wheelpulse_rl_;
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rl();
  esp_wheelpulse_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl)
}

// optional int32 esp_wheelpulse_rr = 3;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rr() {
  esp_wheelpulse_rr_ = 0;
  clear_has_esp_wheelpulse_rr();
}
inline ::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr)
  return esp_wheelpulse_rr_;
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rr();
  esp_wheelpulse_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr)
}

// optional int32 rollingcounter_esp_0x236 = 4;
inline bool Esp_whlpulse_0x236_236::has_rollingcounter_esp_0x236() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_rollingcounter_esp_0x236() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_whlpulse_0x236_236::clear_has_rollingcounter_esp_0x236() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_whlpulse_0x236_236::clear_rollingcounter_esp_0x236() {
  rollingcounter_esp_0x236_ = 0;
  clear_has_rollingcounter_esp_0x236();
}
inline ::google::protobuf::int32 Esp_whlpulse_0x236_236::rollingcounter_esp_0x236() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.rollingcounter_esp_0x236)
  return rollingcounter_esp_0x236_;
}
inline void Esp_whlpulse_0x236_236::set_rollingcounter_esp_0x236(::google::protobuf::int32 value) {
  set_has_rollingcounter_esp_0x236();
  rollingcounter_esp_0x236_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.rollingcounter_esp_0x236)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rr_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rr_valid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rr_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rr_valid() {
  esp_wheelpulse_rr_valid_ = 0;
  clear_has_esp_wheelpulse_rr_valid();
}
inline ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236::esp_wheelpulse_rr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType >(esp_wheelpulse_rr_valid_);
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rr_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_IsValid(value));
  set_has_esp_wheelpulse_rr_valid();
  esp_wheelpulse_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr_valid)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rl_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rl_valid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rl_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rl_valid() {
  esp_wheelpulse_rl_valid_ = 0;
  clear_has_esp_wheelpulse_rl_valid();
}
inline ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236::esp_wheelpulse_rl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType >(esp_wheelpulse_rl_valid_);
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rl_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_IsValid(value));
  set_has_esp_wheelpulse_rl_valid();
  esp_wheelpulse_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl_valid)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fr_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fr_valid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fr_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fr_valid() {
  esp_wheelpulse_fr_valid_ = 0;
  clear_has_esp_wheelpulse_fr_valid();
}
inline ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236::esp_wheelpulse_fr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType >(esp_wheelpulse_fr_valid_);
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fr_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_IsValid(value));
  set_has_esp_wheelpulse_fr_valid();
  esp_wheelpulse_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr_valid)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fl_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fl_valid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fl_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fl_valid() {
  esp_wheelpulse_fl_valid_ = 0;
  clear_has_esp_wheelpulse_fl_valid();
}
inline ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236::esp_wheelpulse_fl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType >(esp_wheelpulse_fl_valid_);
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fl_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_IsValid(value));
  set_has_esp_wheelpulse_fl_valid();
  esp_wheelpulse_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl_valid)
}

// optional int32 checksum_esp_0x236 = 9;
inline bool Esp_whlpulse_0x236_236::has_checksum_esp_0x236() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_checksum_esp_0x236() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Esp_whlpulse_0x236_236::clear_has_checksum_esp_0x236() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Esp_whlpulse_0x236_236::clear_checksum_esp_0x236() {
  checksum_esp_0x236_ = 0;
  clear_has_checksum_esp_0x236();
}
inline ::google::protobuf::int32 Esp_whlpulse_0x236_236::checksum_esp_0x236() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.checksum_esp_0x236)
  return checksum_esp_0x236_;
}
inline void Esp_whlpulse_0x236_236::set_checksum_esp_0x236(::google::protobuf::int32 value) {
  set_has_checksum_esp_0x236();
  checksum_esp_0x236_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.checksum_esp_0x236)
}

// optional int32 esp_wheelpulse_fl = 10;
inline bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fl() {
  esp_wheelpulse_fl_ = 0;
  clear_has_esp_wheelpulse_fl();
}
inline ::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl)
  return esp_wheelpulse_fl_;
}
inline void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fl();
  esp_wheelpulse_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl)
}

// -------------------------------------------------------------------

// Ipm_rightline_0x490_490

// optional double ipm_rightline_dy = 1;
inline bool Ipm_rightline_0x490_490::has_ipm_rightline_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ipm_rightline_0x490_490::set_has_ipm_rightline_dy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ipm_rightline_0x490_490::clear_has_ipm_rightline_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ipm_rightline_0x490_490::clear_ipm_rightline_dy() {
  ipm_rightline_dy_ = 0;
  clear_has_ipm_rightline_dy();
}
inline double Ipm_rightline_0x490_490::ipm_rightline_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dy)
  return ipm_rightline_dy_;
}
inline void Ipm_rightline_0x490_490::set_ipm_rightline_dy(double value) {
  set_has_ipm_rightline_dy();
  ipm_rightline_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dy)
}

// optional double ipm_rightline_dx_lookhead = 2;
inline bool Ipm_rightline_0x490_490::has_ipm_rightline_dx_lookhead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ipm_rightline_0x490_490::set_has_ipm_rightline_dx_lookhead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ipm_rightline_0x490_490::clear_has_ipm_rightline_dx_lookhead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ipm_rightline_0x490_490::clear_ipm_rightline_dx_lookhead() {
  ipm_rightline_dx_lookhead_ = 0;
  clear_has_ipm_rightline_dx_lookhead();
}
inline double Ipm_rightline_0x490_490::ipm_rightline_dx_lookhead() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_lookhead)
  return ipm_rightline_dx_lookhead_;
}
inline void Ipm_rightline_0x490_490::set_ipm_rightline_dx_lookhead(double value) {
  set_has_ipm_rightline_dx_lookhead();
  ipm_rightline_dx_lookhead_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_lookhead)
}

// optional double ipm_rightline_hor_curve = 3;
inline bool Ipm_rightline_0x490_490::has_ipm_rightline_hor_curve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ipm_rightline_0x490_490::set_has_ipm_rightline_hor_curve() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ipm_rightline_0x490_490::clear_has_ipm_rightline_hor_curve() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ipm_rightline_0x490_490::clear_ipm_rightline_hor_curve() {
  ipm_rightline_hor_curve_ = 0;
  clear_has_ipm_rightline_hor_curve();
}
inline double Ipm_rightline_0x490_490::ipm_rightline_hor_curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_hor_curve)
  return ipm_rightline_hor_curve_;
}
inline void Ipm_rightline_0x490_490::set_ipm_rightline_hor_curve(double value) {
  set_has_ipm_rightline_hor_curve();
  ipm_rightline_hor_curve_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_hor_curve)
}

// optional double ipm_rightline_yawangle = 4;
inline bool Ipm_rightline_0x490_490::has_ipm_rightline_yawangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ipm_rightline_0x490_490::set_has_ipm_rightline_yawangle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ipm_rightline_0x490_490::clear_has_ipm_rightline_yawangle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ipm_rightline_0x490_490::clear_ipm_rightline_yawangle() {
  ipm_rightline_yawangle_ = 0;
  clear_has_ipm_rightline_yawangle();
}
inline double Ipm_rightline_0x490_490::ipm_rightline_yawangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_yawangle)
  return ipm_rightline_yawangle_;
}
inline void Ipm_rightline_0x490_490::set_ipm_rightline_yawangle(double value) {
  set_has_ipm_rightline_yawangle();
  ipm_rightline_yawangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_yawangle)
}

// optional double ipm_rightline_dx_start = 5;
inline bool Ipm_rightline_0x490_490::has_ipm_rightline_dx_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ipm_rightline_0x490_490::set_has_ipm_rightline_dx_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ipm_rightline_0x490_490::clear_has_ipm_rightline_dx_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ipm_rightline_0x490_490::clear_ipm_rightline_dx_start() {
  ipm_rightline_dx_start_ = 0;
  clear_has_ipm_rightline_dx_start();
}
inline double Ipm_rightline_0x490_490::ipm_rightline_dx_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_start)
  return ipm_rightline_dx_start_;
}
inline void Ipm_rightline_0x490_490::set_ipm_rightline_dx_start(double value) {
  set_has_ipm_rightline_dx_start();
  ipm_rightline_dx_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_start)
}

// -------------------------------------------------------------------

// Sas_sensor_0x175_175

// optional double sas_raw_steerwheelangle = 1;
inline bool Sas_sensor_0x175_175::has_sas_raw_steerwheelangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_raw_steerwheelangle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_raw_steerwheelangle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sas_sensor_0x175_175::clear_sas_raw_steerwheelangle() {
  sas_raw_steerwheelangle_ = 0;
  clear_has_sas_raw_steerwheelangle();
}
inline double Sas_sensor_0x175_175::sas_raw_steerwheelangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_steerwheelangle)
  return sas_raw_steerwheelangle_;
}
inline void Sas_sensor_0x175_175::set_sas_raw_steerwheelangle(double value) {
  set_has_sas_raw_steerwheelangle();
  sas_raw_steerwheelangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_steerwheelangle)
}

// optional double sas_steerwheelrotspd = 2;
inline bool Sas_sensor_0x175_175::has_sas_steerwheelrotspd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_steerwheelrotspd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_steerwheelrotspd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sas_sensor_0x175_175::clear_sas_steerwheelrotspd() {
  sas_steerwheelrotspd_ = 0;
  clear_has_sas_steerwheelrotspd();
}
inline double Sas_sensor_0x175_175::sas_steerwheelrotspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspd)
  return sas_steerwheelrotspd_;
}
inline void Sas_sensor_0x175_175::set_sas_steerwheelrotspd(double value) {
  set_has_sas_steerwheelrotspd();
  sas_steerwheelrotspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspd)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
inline bool Sas_sensor_0x175_175::has_sas_trimmingsts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_trimmingsts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_trimmingsts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sas_sensor_0x175_175::clear_sas_trimmingsts() {
  sas_trimmingsts_ = 0;
  clear_has_sas_trimmingsts();
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175::sas_trimmingsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_trimmingsts)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType >(sas_trimmingsts_);
}
inline void Sas_sensor_0x175_175::set_sas_trimmingsts(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType_IsValid(value));
  set_has_sas_trimmingsts();
  sas_trimmingsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_trimmingsts)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
inline bool Sas_sensor_0x175_175::has_sas_steerwheelrotspdstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_steerwheelrotspdstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_steerwheelrotspdstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sas_sensor_0x175_175::clear_sas_steerwheelrotspdstatus() {
  sas_steerwheelrotspdstatus_ = 0;
  clear_has_sas_steerwheelrotspdstatus();
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175::sas_steerwheelrotspdstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspdstatus)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType >(sas_steerwheelrotspdstatus_);
}
inline void Sas_sensor_0x175_175::set_sas_steerwheelrotspdstatus(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_IsValid(value));
  set_has_sas_steerwheelrotspdstatus();
  sas_steerwheelrotspdstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspdstatus)
}

// optional int32 rolling_counter_0x175 = 5;
inline bool Sas_sensor_0x175_175::has_rolling_counter_0x175() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_rolling_counter_0x175() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sas_sensor_0x175_175::clear_has_rolling_counter_0x175() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sas_sensor_0x175_175::clear_rolling_counter_0x175() {
  rolling_counter_0x175_ = 0;
  clear_has_rolling_counter_0x175();
}
inline ::google::protobuf::int32 Sas_sensor_0x175_175::rolling_counter_0x175() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.rolling_counter_0x175)
  return rolling_counter_0x175_;
}
inline void Sas_sensor_0x175_175::set_rolling_counter_0x175(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x175();
  rolling_counter_0x175_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.rolling_counter_0x175)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
inline bool Sas_sensor_0x175_175::has_sas_sasstscal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_sasstscal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_sasstscal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sas_sensor_0x175_175::clear_sas_sasstscal() {
  sas_sasstscal_ = 0;
  clear_has_sas_sasstscal();
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175::sas_sasstscal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstscal)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType >(sas_sasstscal_);
}
inline void Sas_sensor_0x175_175::set_sas_sasstscal(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType_IsValid(value));
  set_has_sas_sasstscal();
  sas_sasstscal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstscal)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
inline bool Sas_sensor_0x175_175::has_sas_raw_sasstssnsr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_raw_sasstssnsr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_raw_sasstssnsr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sas_sensor_0x175_175::clear_sas_raw_sasstssnsr() {
  sas_raw_sasstssnsr_ = 0;
  clear_has_sas_raw_sasstssnsr();
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175::sas_raw_sasstssnsr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_sasstssnsr)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType >(sas_raw_sasstssnsr_);
}
inline void Sas_sensor_0x175_175::set_sas_raw_sasstssnsr(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_IsValid(value));
  set_has_sas_raw_sasstssnsr();
  sas_raw_sasstssnsr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_sasstssnsr)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
inline bool Sas_sensor_0x175_175::has_sas_sasstssnsr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_sasstssnsr() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_sasstssnsr() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sas_sensor_0x175_175::clear_sas_sasstssnsr() {
  sas_sasstssnsr_ = 0;
  clear_has_sas_sasstssnsr();
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175::sas_sasstssnsr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstssnsr)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType >(sas_sasstssnsr_);
}
inline void Sas_sensor_0x175_175::set_sas_sasstssnsr(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType_IsValid(value));
  set_has_sas_sasstssnsr();
  sas_sasstssnsr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstssnsr)
}

// optional int32 checksum_0x175 = 9;
inline bool Sas_sensor_0x175_175::has_checksum_0x175() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_checksum_0x175() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Sas_sensor_0x175_175::clear_has_checksum_0x175() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Sas_sensor_0x175_175::clear_checksum_0x175() {
  checksum_0x175_ = 0;
  clear_has_checksum_0x175();
}
inline ::google::protobuf::int32 Sas_sensor_0x175_175::checksum_0x175() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.checksum_0x175)
  return checksum_0x175_;
}
inline void Sas_sensor_0x175_175::set_checksum_0x175(::google::protobuf::int32 value) {
  set_has_checksum_0x175();
  checksum_0x175_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.checksum_0x175)
}

// optional double sas_steerwheelangle = 10;
inline bool Sas_sensor_0x175_175::has_sas_steerwheelangle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Sas_sensor_0x175_175::set_has_sas_steerwheelangle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Sas_sensor_0x175_175::clear_has_sas_steerwheelangle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Sas_sensor_0x175_175::clear_sas_steerwheelangle() {
  sas_steerwheelangle_ = 0;
  clear_has_sas_steerwheelangle();
}
inline double Sas_sensor_0x175_175::sas_steerwheelangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelangle)
  return sas_steerwheelangle_;
}
inline void Sas_sensor_0x175_175::set_sas_steerwheelangle(double value) {
  set_has_sas_steerwheelangle();
  sas_steerwheelangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelangle)
}

// -------------------------------------------------------------------

// Gw_body_0x321_321

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
inline bool Gw_body_0x321_321::has_bcm_outsidetempdig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_outsidetempdig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_body_0x321_321::clear_has_bcm_outsidetempdig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_body_0x321_321::clear_bcm_outsidetempdig() {
  bcm_outsidetempdig_ = 0;
  clear_has_bcm_outsidetempdig();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::bcm_outsidetempdig() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetempdig)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType >(bcm_outsidetempdig_);
}
inline void Gw_body_0x321_321::set_bcm_outsidetempdig(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType_IsValid(value));
  set_has_bcm_outsidetempdig();
  bcm_outsidetempdig_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetempdig)
}

// optional double bcm_outsidetemp = 2;
inline bool Gw_body_0x321_321::has_bcm_outsidetemp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_outsidetemp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_body_0x321_321::clear_has_bcm_outsidetemp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_body_0x321_321::clear_bcm_outsidetemp() {
  bcm_outsidetemp_ = 0;
  clear_has_bcm_outsidetemp();
}
inline double Gw_body_0x321_321::bcm_outsidetemp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetemp)
  return bcm_outsidetemp_;
}
inline void Gw_body_0x321_321::set_bcm_outsidetemp(double value) {
  set_has_bcm_outsidetemp();
  bcm_outsidetemp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetemp)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
inline bool Gw_body_0x321_321::has_bcm_driving_mode_req_bcm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_driving_mode_req_bcm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_body_0x321_321::clear_has_bcm_driving_mode_req_bcm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_body_0x321_321::clear_bcm_driving_mode_req_bcm() {
  bcm_driving_mode_req_bcm_ = 0;
  clear_has_bcm_driving_mode_req_bcm();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::bcm_driving_mode_req_bcm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_driving_mode_req_bcm)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType >(bcm_driving_mode_req_bcm_);
}
inline void Gw_body_0x321_321::set_bcm_driving_mode_req_bcm(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_IsValid(value));
  set_has_bcm_driving_mode_req_bcm();
  bcm_driving_mode_req_bcm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_driving_mode_req_bcm)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
inline bool Gw_body_0x321_321::has_bcm_powermode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_powermode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_body_0x321_321::clear_has_bcm_powermode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_body_0x321_321::clear_bcm_powermode() {
  bcm_powermode_ = 0;
  clear_has_bcm_powermode();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::bcm_powermode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_powermode)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType >(bcm_powermode_);
}
inline void Gw_body_0x321_321::set_bcm_powermode(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType_IsValid(value));
  set_has_bcm_powermode();
  bcm_powermode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_powermode)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
inline bool Gw_body_0x321_321::has_bcm_frntfoglmpsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_frntfoglmpsts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_body_0x321_321::clear_has_bcm_frntfoglmpsts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_body_0x321_321::clear_bcm_frntfoglmpsts() {
  bcm_frntfoglmpsts_ = 0;
  clear_has_bcm_frntfoglmpsts();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::bcm_frntfoglmpsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_frntfoglmpsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType >(bcm_frntfoglmpsts_);
}
inline void Gw_body_0x321_321::set_bcm_frntfoglmpsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType_IsValid(value));
  set_has_bcm_frntfoglmpsts();
  bcm_frntfoglmpsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_frntfoglmpsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
inline bool Gw_body_0x321_321::has_bcm_lowbeamsts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_lowbeamsts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_body_0x321_321::clear_has_bcm_lowbeamsts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_body_0x321_321::clear_bcm_lowbeamsts() {
  bcm_lowbeamsts_ = 0;
  clear_has_bcm_lowbeamsts();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::bcm_lowbeamsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_lowbeamsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType >(bcm_lowbeamsts_);
}
inline void Gw_body_0x321_321::set_bcm_lowbeamsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType_IsValid(value));
  set_has_bcm_lowbeamsts();
  bcm_lowbeamsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_lowbeamsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
inline bool Gw_body_0x321_321::has_bcm_highbeamsts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_highbeamsts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_body_0x321_321::clear_has_bcm_highbeamsts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_body_0x321_321::clear_bcm_highbeamsts() {
  bcm_highbeamsts_ = 0;
  clear_has_bcm_highbeamsts();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::bcm_highbeamsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_highbeamsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType >(bcm_highbeamsts_);
}
inline void Gw_body_0x321_321::set_bcm_highbeamsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType_IsValid(value));
  set_has_bcm_highbeamsts();
  bcm_highbeamsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_highbeamsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
inline bool Gw_body_0x321_321::has_bcm_ss_enablests() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_ss_enablests() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_body_0x321_321::clear_has_bcm_ss_enablests() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_body_0x321_321::clear_bcm_ss_enablests() {
  bcm_ss_enablests_ = 0;
  clear_has_bcm_ss_enablests();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::bcm_ss_enablests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_ss_enablests)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType >(bcm_ss_enablests_);
}
inline void Gw_body_0x321_321::set_bcm_ss_enablests(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType_IsValid(value));
  set_has_bcm_ss_enablests();
  bcm_ss_enablests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_ss_enablests)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
inline bool Gw_body_0x321_321::has_bcm_reardef_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_reardef_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_body_0x321_321::clear_has_bcm_reardef_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_body_0x321_321::clear_bcm_reardef_status() {
  bcm_reardef_status_ = 0;
  clear_has_bcm_reardef_status();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::bcm_reardef_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_reardef_status)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType >(bcm_reardef_status_);
}
inline void Gw_body_0x321_321::set_bcm_reardef_status(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType_IsValid(value));
  set_has_bcm_reardef_status();
  bcm_reardef_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_reardef_status)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
inline bool Gw_body_0x321_321::has_bcm_brakefluidsts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_brakefluidsts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_body_0x321_321::clear_has_bcm_brakefluidsts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_body_0x321_321::clear_bcm_brakefluidsts() {
  bcm_brakefluidsts_ = 0;
  clear_has_bcm_brakefluidsts();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::bcm_brakefluidsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_brakefluidsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType >(bcm_brakefluidsts_);
}
inline void Gw_body_0x321_321::set_bcm_brakefluidsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType_IsValid(value));
  set_has_bcm_brakefluidsts();
  bcm_brakefluidsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_brakefluidsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
inline bool Gw_body_0x321_321::has_bcm_autolampsts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_autolampsts() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_body_0x321_321::clear_has_bcm_autolampsts() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_body_0x321_321::clear_bcm_autolampsts() {
  bcm_autolampsts_ = 0;
  clear_has_bcm_autolampsts();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::bcm_autolampsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_autolampsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType >(bcm_autolampsts_);
}
inline void Gw_body_0x321_321::set_bcm_autolampsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType_IsValid(value));
  set_has_bcm_autolampsts();
  bcm_autolampsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_autolampsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
inline bool Gw_body_0x321_321::has_bcm_poslmpsts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_poslmpsts() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_body_0x321_321::clear_has_bcm_poslmpsts() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_body_0x321_321::clear_bcm_poslmpsts() {
  bcm_poslmpsts_ = 0;
  clear_has_bcm_poslmpsts();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::bcm_poslmpsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_poslmpsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType >(bcm_poslmpsts_);
}
inline void Gw_body_0x321_321::set_bcm_poslmpsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType_IsValid(value));
  set_has_bcm_poslmpsts();
  bcm_poslmpsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_poslmpsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
inline bool Gw_body_0x321_321::has_bcm_bgllumlvlsetting() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_bgllumlvlsetting() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_body_0x321_321::clear_has_bcm_bgllumlvlsetting() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_body_0x321_321::clear_bcm_bgllumlvlsetting() {
  bcm_bgllumlvlsetting_ = 0;
  clear_has_bcm_bgllumlvlsetting();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::bcm_bgllumlvlsetting() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_bgllumlvlsetting)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType >(bcm_bgllumlvlsetting_);
}
inline void Gw_body_0x321_321::set_bcm_bgllumlvlsetting(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType_IsValid(value));
  set_has_bcm_bgllumlvlsetting();
  bcm_bgllumlvlsetting_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_bgllumlvlsetting)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
inline bool Gw_body_0x321_321::has_bcm_reverse_gear() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_body_0x321_321::set_has_bcm_reverse_gear() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_body_0x321_321::clear_has_bcm_reverse_gear() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_body_0x321_321::clear_bcm_reverse_gear() {
  bcm_reverse_gear_ = 0;
  clear_has_bcm_reverse_gear();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::bcm_reverse_gear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_reverse_gear)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType >(bcm_reverse_gear_);
}
inline void Gw_body_0x321_321::set_bcm_reverse_gear(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType_IsValid(value));
  set_has_bcm_reverse_gear();
  bcm_reverse_gear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_reverse_gear)
}

// -------------------------------------------------------------------

// Ipm_leftline_0x278_278

// optional double ipm_leftline_dy = 1;
inline bool Ipm_leftline_0x278_278::has_ipm_leftline_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ipm_leftline_0x278_278::set_has_ipm_leftline_dy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ipm_leftline_0x278_278::clear_has_ipm_leftline_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ipm_leftline_0x278_278::clear_ipm_leftline_dy() {
  ipm_leftline_dy_ = 0;
  clear_has_ipm_leftline_dy();
}
inline double Ipm_leftline_0x278_278::ipm_leftline_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dy)
  return ipm_leftline_dy_;
}
inline void Ipm_leftline_0x278_278::set_ipm_leftline_dy(double value) {
  set_has_ipm_leftline_dy();
  ipm_leftline_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dy)
}

// optional double ipm_leftline_dx_lookhead = 2;
inline bool Ipm_leftline_0x278_278::has_ipm_leftline_dx_lookhead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ipm_leftline_0x278_278::set_has_ipm_leftline_dx_lookhead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ipm_leftline_0x278_278::clear_has_ipm_leftline_dx_lookhead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ipm_leftline_0x278_278::clear_ipm_leftline_dx_lookhead() {
  ipm_leftline_dx_lookhead_ = 0;
  clear_has_ipm_leftline_dx_lookhead();
}
inline double Ipm_leftline_0x278_278::ipm_leftline_dx_lookhead() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dx_lookhead)
  return ipm_leftline_dx_lookhead_;
}
inline void Ipm_leftline_0x278_278::set_ipm_leftline_dx_lookhead(double value) {
  set_has_ipm_leftline_dx_lookhead();
  ipm_leftline_dx_lookhead_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dx_lookhead)
}

// optional double ipm_leftline_hor_curve = 3;
inline bool Ipm_leftline_0x278_278::has_ipm_leftline_hor_curve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ipm_leftline_0x278_278::set_has_ipm_leftline_hor_curve() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ipm_leftline_0x278_278::clear_has_ipm_leftline_hor_curve() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ipm_leftline_0x278_278::clear_ipm_leftline_hor_curve() {
  ipm_leftline_hor_curve_ = 0;
  clear_has_ipm_leftline_hor_curve();
}
inline double Ipm_leftline_0x278_278::ipm_leftline_hor_curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_hor_curve)
  return ipm_leftline_hor_curve_;
}
inline void Ipm_leftline_0x278_278::set_ipm_leftline_hor_curve(double value) {
  set_has_ipm_leftline_hor_curve();
  ipm_leftline_hor_curve_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_hor_curve)
}

// optional double ipm_leftline_yawangle = 4;
inline bool Ipm_leftline_0x278_278::has_ipm_leftline_yawangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ipm_leftline_0x278_278::set_has_ipm_leftline_yawangle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ipm_leftline_0x278_278::clear_has_ipm_leftline_yawangle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ipm_leftline_0x278_278::clear_ipm_leftline_yawangle() {
  ipm_leftline_yawangle_ = 0;
  clear_has_ipm_leftline_yawangle();
}
inline double Ipm_leftline_0x278_278::ipm_leftline_yawangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_yawangle)
  return ipm_leftline_yawangle_;
}
inline void Ipm_leftline_0x278_278::set_ipm_leftline_yawangle(double value) {
  set_has_ipm_leftline_yawangle();
  ipm_leftline_yawangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_yawangle)
}

// optional double ipm_ledtline_dx_start = 5;
inline bool Ipm_leftline_0x278_278::has_ipm_ledtline_dx_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ipm_leftline_0x278_278::set_has_ipm_ledtline_dx_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ipm_leftline_0x278_278::clear_has_ipm_ledtline_dx_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ipm_leftline_0x278_278::clear_ipm_ledtline_dx_start() {
  ipm_ledtline_dx_start_ = 0;
  clear_has_ipm_ledtline_dx_start();
}
inline double Ipm_leftline_0x278_278::ipm_ledtline_dx_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_ledtline_dx_start)
  return ipm_ledtline_dx_start_;
}
inline void Ipm_leftline_0x278_278::set_ipm_ledtline_dx_start(double value) {
  set_has_ipm_ledtline_dx_start();
  ipm_ledtline_dx_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_ledtline_dx_start)
}

// -------------------------------------------------------------------

// Gw_ems_engstatus_0x142_142

// optional int32 ems_ignitiontiming = 1;
inline bool Gw_ems_engstatus_0x142_142::has_ems_ignitiontiming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_ignitiontiming() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_ignitiontiming() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_ignitiontiming() {
  ems_ignitiontiming_ = 0;
  clear_has_ems_ignitiontiming();
}
inline ::google::protobuf::int32 Gw_ems_engstatus_0x142_142::ems_ignitiontiming() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignitiontiming)
  return ems_ignitiontiming_;
}
inline void Gw_ems_engstatus_0x142_142::set_ems_ignitiontiming(::google::protobuf::int32 value) {
  set_has_ems_ignitiontiming();
  ems_ignitiontiming_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignitiontiming)
}

// optional double ems_setlengidlespeed = 2;
inline bool Gw_ems_engstatus_0x142_142::has_ems_setlengidlespeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_setlengidlespeed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_setlengidlespeed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_setlengidlespeed() {
  ems_setlengidlespeed_ = 0;
  clear_has_ems_setlengidlespeed();
}
inline double Gw_ems_engstatus_0x142_142::ems_setlengidlespeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_setlengidlespeed)
  return ems_setlengidlespeed_;
}
inline void Gw_ems_engstatus_0x142_142::set_ems_setlengidlespeed(double value) {
  set_has_ems_setlengidlespeed();
  ems_setlengidlespeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_setlengidlespeed)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
inline bool Gw_ems_engstatus_0x142_142::has_ems_engoperationstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_engoperationstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_engoperationstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_engoperationstatus() {
  ems_engoperationstatus_ = 0;
  clear_has_ems_engoperationstatus();
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::ems_engoperationstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engoperationstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType >(ems_engoperationstatus_);
}
inline void Gw_ems_engstatus_0x142_142::set_ems_engoperationstatus(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_IsValid(value));
  set_has_ems_engoperationstatus();
  ems_engoperationstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engoperationstatus)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
inline bool Gw_ems_engstatus_0x142_142::has_ems_aircompressorstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_aircompressorstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_aircompressorstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_aircompressorstatus() {
  ems_aircompressorstatus_ = 0;
  clear_has_ems_aircompressorstatus();
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142::ems_aircompressorstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_aircompressorstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType >(ems_aircompressorstatus_);
}
inline void Gw_ems_engstatus_0x142_142::set_ems_aircompressorstatus(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_IsValid(value));
  set_has_ems_aircompressorstatus();
  ems_aircompressorstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_aircompressorstatus)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
inline bool Gw_ems_engstatus_0x142_142::has_ems_throttleplatepositionerror() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_throttleplatepositionerror() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_throttleplatepositionerror() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_throttleplatepositionerror() {
  ems_throttleplatepositionerror_ = 0;
  clear_has_ems_throttleplatepositionerror();
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142::ems_throttleplatepositionerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_throttleplatepositionerror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType >(ems_throttleplatepositionerror_);
}
inline void Gw_ems_engstatus_0x142_142::set_ems_throttleplatepositionerror(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_IsValid(value));
  set_has_ems_throttleplatepositionerror();
  ems_throttleplatepositionerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_throttleplatepositionerror)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
inline bool Gw_ems_engstatus_0x142_142::has_ems_startstopmessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_startstopmessage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_startstopmessage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_startstopmessage() {
  ems_startstopmessage_ = 0;
  clear_has_ems_startstopmessage();
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::ems_startstopmessage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_startstopmessage)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType >(ems_startstopmessage_);
}
inline void Gw_ems_engstatus_0x142_142::set_ems_startstopmessage(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_IsValid(value));
  set_has_ems_startstopmessage();
  ems_startstopmessage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_startstopmessage)
}

// optional int32 dcm_ems_rollingcounter_0x142 = 7;
inline bool Gw_ems_engstatus_0x142_142::has_dcm_ems_rollingcounter_0x142() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_dcm_ems_rollingcounter_0x142() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_dcm_ems_rollingcounter_0x142() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_ems_engstatus_0x142_142::clear_dcm_ems_rollingcounter_0x142() {
  dcm_ems_rollingcounter_0x142_ = 0;
  clear_has_dcm_ems_rollingcounter_0x142();
}
inline ::google::protobuf::int32 Gw_ems_engstatus_0x142_142::dcm_ems_rollingcounter_0x142() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_rollingcounter_0x142)
  return dcm_ems_rollingcounter_0x142_;
}
inline void Gw_ems_engstatus_0x142_142::set_dcm_ems_rollingcounter_0x142(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x142();
  dcm_ems_rollingcounter_0x142_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_rollingcounter_0x142)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
inline bool Gw_ems_engstatus_0x142_142::has_ems_ignswtsts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_ignswtsts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_ignswtsts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_ignswtsts() {
  ems_ignswtsts_ = 0;
  clear_has_ems_ignswtsts();
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142::ems_ignswtsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignswtsts)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType >(ems_ignswtsts_);
}
inline void Gw_ems_engstatus_0x142_142::set_ems_ignswtsts(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_IsValid(value));
  set_has_ems_ignswtsts();
  ems_ignswtsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignswtsts)
}

// optional int32 dcm_ems_checksum_0x142 = 9;
inline bool Gw_ems_engstatus_0x142_142::has_dcm_ems_checksum_0x142() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_dcm_ems_checksum_0x142() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_dcm_ems_checksum_0x142() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_ems_engstatus_0x142_142::clear_dcm_ems_checksum_0x142() {
  dcm_ems_checksum_0x142_ = 0;
  clear_has_dcm_ems_checksum_0x142();
}
inline ::google::protobuf::int32 Gw_ems_engstatus_0x142_142::dcm_ems_checksum_0x142() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_checksum_0x142)
  return dcm_ems_checksum_0x142_;
}
inline void Gw_ems_engstatus_0x142_142::set_dcm_ems_checksum_0x142(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x142();
  dcm_ems_checksum_0x142_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_checksum_0x142)
}

// optional double ems_engthrottleposition = 10;
inline bool Gw_ems_engstatus_0x142_142::has_ems_engthrottleposition() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_ems_engstatus_0x142_142::set_has_ems_engthrottleposition() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_ems_engstatus_0x142_142::clear_has_ems_engthrottleposition() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_ems_engstatus_0x142_142::clear_ems_engthrottleposition() {
  ems_engthrottleposition_ = 0;
  clear_has_ems_engthrottleposition();
}
inline double Gw_ems_engstatus_0x142_142::ems_engthrottleposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engthrottleposition)
  return ems_engthrottleposition_;
}
inline void Gw_ems_engstatus_0x142_142::set_ems_engthrottleposition(double value) {
  set_has_ems_engthrottleposition();
  ems_engthrottleposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engthrottleposition)
}

// -------------------------------------------------------------------

// Gw_tbox_location_0x580_580

// optional double tbox_longitude = 1;
inline bool Gw_tbox_location_0x580_580::has_tbox_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_tbox_location_0x580_580::set_has_tbox_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_tbox_location_0x580_580::clear_has_tbox_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_tbox_location_0x580_580::clear_tbox_longitude() {
  tbox_longitude_ = 0;
  clear_has_tbox_longitude();
}
inline double Gw_tbox_location_0x580_580::tbox_longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_longitude)
  return tbox_longitude_;
}
inline void Gw_tbox_location_0x580_580::set_tbox_longitude(double value) {
  set_has_tbox_longitude();
  tbox_longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_longitude)
}

// optional double tbox_latidude = 2;
inline bool Gw_tbox_location_0x580_580::has_tbox_latidude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_tbox_location_0x580_580::set_has_tbox_latidude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_tbox_location_0x580_580::clear_has_tbox_latidude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_tbox_location_0x580_580::clear_tbox_latidude() {
  tbox_latidude_ = 0;
  clear_has_tbox_latidude();
}
inline double Gw_tbox_location_0x580_580::tbox_latidude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_latidude)
  return tbox_latidude_;
}
inline void Gw_tbox_location_0x580_580::set_tbox_latidude(double value) {
  set_has_tbox_latidude();
  tbox_latidude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_latidude)
}

// optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
inline bool Gw_tbox_location_0x580_580::has_tbox_gps_ub() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_tbox_location_0x580_580::set_has_tbox_gps_ub() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_tbox_location_0x580_580::clear_has_tbox_gps_ub() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_tbox_location_0x580_580::clear_tbox_gps_ub() {
  tbox_gps_ub_ = 0;
  clear_has_tbox_gps_ub();
}
inline ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580::tbox_gps_ub() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_gps_ub)
  return static_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType >(tbox_gps_ub_);
}
inline void Gw_tbox_location_0x580_580::set_tbox_gps_ub(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType value) {
  assert(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType_IsValid(value));
  set_has_tbox_gps_ub();
  tbox_gps_ub_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_gps_ub)
}

// optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
inline bool Gw_tbox_location_0x580_580::has_tbox_locationsts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_tbox_location_0x580_580::set_has_tbox_locationsts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_tbox_location_0x580_580::clear_has_tbox_locationsts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_tbox_location_0x580_580::clear_tbox_locationsts() {
  tbox_locationsts_ = 0;
  clear_has_tbox_locationsts();
}
inline ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::tbox_locationsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_locationsts)
  return static_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType >(tbox_locationsts_);
}
inline void Gw_tbox_location_0x580_580::set_tbox_locationsts(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType value) {
  assert(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType_IsValid(value));
  set_has_tbox_locationsts();
  tbox_locationsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_locationsts)
}

// -------------------------------------------------------------------

// Srs_0x350_350

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
inline bool Srs_0x350_350::has_srs_sbr_secondrowright() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Srs_0x350_350::set_has_srs_sbr_secondrowright() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Srs_0x350_350::clear_has_srs_sbr_secondrowright() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Srs_0x350_350::clear_srs_sbr_secondrowright() {
  srs_sbr_secondrowright_ = 0;
  clear_has_srs_sbr_secondrowright();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::srs_sbr_secondrowright() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowright)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType >(srs_sbr_secondrowright_);
}
inline void Srs_0x350_350::set_srs_sbr_secondrowright(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType_IsValid(value));
  set_has_srs_sbr_secondrowright();
  srs_sbr_secondrowright_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowright)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
inline bool Srs_0x350_350::has_srs_sbr_secondrowmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Srs_0x350_350::set_has_srs_sbr_secondrowmid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Srs_0x350_350::clear_has_srs_sbr_secondrowmid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Srs_0x350_350::clear_srs_sbr_secondrowmid() {
  srs_sbr_secondrowmid_ = 0;
  clear_has_srs_sbr_secondrowmid();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::srs_sbr_secondrowmid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowmid)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType >(srs_sbr_secondrowmid_);
}
inline void Srs_0x350_350::set_srs_sbr_secondrowmid(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType_IsValid(value));
  set_has_srs_sbr_secondrowmid();
  srs_sbr_secondrowmid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowmid)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
inline bool Srs_0x350_350::has_srs_sbr_secondrowleft() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Srs_0x350_350::set_has_srs_sbr_secondrowleft() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Srs_0x350_350::clear_has_srs_sbr_secondrowleft() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Srs_0x350_350::clear_srs_sbr_secondrowleft() {
  srs_sbr_secondrowleft_ = 0;
  clear_has_srs_sbr_secondrowleft();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::srs_sbr_secondrowleft() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowleft)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType >(srs_sbr_secondrowleft_);
}
inline void Srs_0x350_350::set_srs_sbr_secondrowleft(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType_IsValid(value));
  set_has_srs_sbr_secondrowleft();
  srs_sbr_secondrowleft_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowleft)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
inline bool Srs_0x350_350::has_srs_sbr_pamsenger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Srs_0x350_350::set_has_srs_sbr_pamsenger() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Srs_0x350_350::clear_has_srs_sbr_pamsenger() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Srs_0x350_350::clear_srs_sbr_pamsenger() {
  srs_sbr_pamsenger_ = 0;
  clear_has_srs_sbr_pamsenger();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::srs_sbr_pamsenger() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_pamsenger)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType >(srs_sbr_pamsenger_);
}
inline void Srs_0x350_350::set_srs_sbr_pamsenger(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType_IsValid(value));
  set_has_srs_sbr_pamsenger();
  srs_sbr_pamsenger_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_pamsenger)
}

// optional int32 rolling_counter_0x350 = 5;
inline bool Srs_0x350_350::has_rolling_counter_0x350() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Srs_0x350_350::set_has_rolling_counter_0x350() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Srs_0x350_350::clear_has_rolling_counter_0x350() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Srs_0x350_350::clear_rolling_counter_0x350() {
  rolling_counter_0x350_ = 0;
  clear_has_rolling_counter_0x350();
}
inline ::google::protobuf::int32 Srs_0x350_350::rolling_counter_0x350() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.rolling_counter_0x350)
  return rolling_counter_0x350_;
}
inline void Srs_0x350_350::set_rolling_counter_0x350(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x350();
  rolling_counter_0x350_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.rolling_counter_0x350)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
inline bool Srs_0x350_350::has_srs_sbr_driver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Srs_0x350_350::set_has_srs_sbr_driver() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Srs_0x350_350::clear_has_srs_sbr_driver() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Srs_0x350_350::clear_srs_sbr_driver() {
  srs_sbr_driver_ = 0;
  clear_has_srs_sbr_driver();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::srs_sbr_driver() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_driver)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType >(srs_sbr_driver_);
}
inline void Srs_0x350_350::set_srs_sbr_driver(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType_IsValid(value));
  set_has_srs_sbr_driver();
  srs_sbr_driver_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_driver)
}

// optional int32 checksum_0x350 = 7;
inline bool Srs_0x350_350::has_checksum_0x350() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Srs_0x350_350::set_has_checksum_0x350() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Srs_0x350_350::clear_has_checksum_0x350() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Srs_0x350_350::clear_checksum_0x350() {
  checksum_0x350_ = 0;
  clear_has_checksum_0x350();
}
inline ::google::protobuf::int32 Srs_0x350_350::checksum_0x350() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.checksum_0x350)
  return checksum_0x350_;
}
inline void Srs_0x350_350::set_checksum_0x350(::google::protobuf::int32 value) {
  set_has_checksum_0x350();
  checksum_0x350_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.checksum_0x350)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
inline bool Srs_0x350_350::has_srs_crashoutputsts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Srs_0x350_350::set_has_srs_crashoutputsts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Srs_0x350_350::clear_has_srs_crashoutputsts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Srs_0x350_350::clear_srs_crashoutputsts() {
  srs_crashoutputsts_ = 0;
  clear_has_srs_crashoutputsts();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350::srs_crashoutputsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_crashoutputsts)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType >(srs_crashoutputsts_);
}
inline void Srs_0x350_350::set_srs_crashoutputsts(::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType_IsValid(value));
  set_has_srs_crashoutputsts();
  srs_crashoutputsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_crashoutputsts)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
inline bool Srs_0x350_350::has_srs_airbagfailsts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Srs_0x350_350::set_has_srs_airbagfailsts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Srs_0x350_350::clear_has_srs_airbagfailsts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Srs_0x350_350::clear_srs_airbagfailsts() {
  srs_airbagfailsts_ = 0;
  clear_has_srs_airbagfailsts();
}
inline ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::srs_airbagfailsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_airbagfailsts)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType >(srs_airbagfailsts_);
}
inline void Srs_0x350_350::set_srs_airbagfailsts(::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType_IsValid(value));
  set_has_srs_airbagfailsts();
  srs_airbagfailsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_airbagfailsts)
}

// -------------------------------------------------------------------

// Ipm_0x245_245

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
inline bool Ipm_0x245_245::has_ipm_laneassit_torquereqstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_torquereqstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_torquereqstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_torquereqstatus() {
  ipm_laneassit_torquereqstatus_ = 0;
  clear_has_ipm_laneassit_torquereqstatus();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::ipm_laneassit_torquereqstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereqstatus)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType >(ipm_laneassit_torquereqstatus_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_torquereqstatus(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IsValid(value));
  set_has_ipm_laneassit_torquereqstatus();
  ipm_laneassit_torquereqstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereqstatus)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
inline bool Ipm_0x245_245::has_ipm_laneassit_torquevalidity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_torquevalidity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_torquevalidity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_torquevalidity() {
  ipm_laneassit_torquevalidity_ = 0;
  clear_has_ipm_laneassit_torquevalidity();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245::ipm_laneassit_torquevalidity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquevalidity)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType >(ipm_laneassit_torquevalidity_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_torquevalidity(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IsValid(value));
  set_has_ipm_laneassit_torquevalidity();
  ipm_laneassit_torquevalidity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquevalidity)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
inline bool Ipm_0x245_245::has_ipm_laneassit_sensitivity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_sensitivity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_sensitivity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_sensitivity() {
  ipm_laneassit_sensitivity_ = 0;
  clear_has_ipm_laneassit_sensitivity();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245::ipm_laneassit_sensitivity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_sensitivity)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType >(ipm_laneassit_sensitivity_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_sensitivity(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType_IsValid(value));
  set_has_ipm_laneassit_sensitivity();
  ipm_laneassit_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_sensitivity)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
inline bool Ipm_0x245_245::has_ipm_laneassit_warningaudio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_warningaudio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_warningaudio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_warningaudio() {
  ipm_laneassit_warningaudio_ = 0;
  clear_has_ipm_laneassit_warningaudio();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245::ipm_laneassit_warningaudio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningaudio)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType >(ipm_laneassit_warningaudio_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_warningaudio(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType_IsValid(value));
  set_has_ipm_laneassit_warningaudio();
  ipm_laneassit_warningaudio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningaudio)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
inline bool Ipm_0x245_245::has_ipm_laneassit_leftvisualization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_leftvisualization() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_leftvisualization() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_leftvisualization() {
  ipm_laneassit_leftvisualization_ = 0;
  clear_has_ipm_laneassit_leftvisualization();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::ipm_laneassit_leftvisualization() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_leftvisualization)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType >(ipm_laneassit_leftvisualization_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_leftvisualization(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IsValid(value));
  set_has_ipm_laneassit_leftvisualization();
  ipm_laneassit_leftvisualization_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_leftvisualization)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
inline bool Ipm_0x245_245::has_ipm_laneassit_rightvisualization() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_rightvisualization() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_rightvisualization() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_rightvisualization() {
  ipm_laneassit_rightvisualization_ = 0;
  clear_has_ipm_laneassit_rightvisualization();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::ipm_laneassit_rightvisualization() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_rightvisualization)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType >(ipm_laneassit_rightvisualization_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_rightvisualization(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IsValid(value));
  set_has_ipm_laneassit_rightvisualization();
  ipm_laneassit_rightvisualization_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_rightvisualization)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
inline bool Ipm_0x245_245::has_ipm_slaspdlimitunits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_slaspdlimitunits() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ipm_0x245_245::clear_has_ipm_slaspdlimitunits() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ipm_0x245_245::clear_ipm_slaspdlimitunits() {
  ipm_slaspdlimitunits_ = 0;
  clear_has_ipm_slaspdlimitunits();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::ipm_slaspdlimitunits() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimitunits)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType >(ipm_slaspdlimitunits_);
}
inline void Ipm_0x245_245::set_ipm_slaspdlimitunits(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType_IsValid(value));
  set_has_ipm_slaspdlimitunits();
  ipm_slaspdlimitunits_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimitunits)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
inline bool Ipm_0x245_245::has_ipm_slastate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_slastate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ipm_0x245_245::clear_has_ipm_slastate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ipm_0x245_245::clear_ipm_slastate() {
  ipm_slastate_ = 0;
  clear_has_ipm_slastate();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::ipm_slastate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_slastate)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType >(ipm_slastate_);
}
inline void Ipm_0x245_245::set_ipm_slastate(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType_IsValid(value));
  set_has_ipm_slastate();
  ipm_slastate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_slastate)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
inline bool Ipm_0x245_245::has_ipm_laneassit_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_status() {
  ipm_laneassit_status_ = 0;
  clear_has_ipm_laneassit_status();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::ipm_laneassit_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_status)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType >(ipm_laneassit_status_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType_IsValid(value));
  set_has_ipm_laneassit_status();
  ipm_laneassit_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_status)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
inline bool Ipm_0x245_245::has_ipm_slaspdlimit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_slaspdlimit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ipm_0x245_245::clear_has_ipm_slaspdlimit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ipm_0x245_245::clear_ipm_slaspdlimit() {
  ipm_slaspdlimit_ = 0;
  clear_has_ipm_slaspdlimit();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::ipm_slaspdlimit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimit)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType >(ipm_slaspdlimit_);
}
inline void Ipm_0x245_245::set_ipm_slaspdlimit(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType_IsValid(value));
  set_has_ipm_slaspdlimit();
  ipm_slaspdlimit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimit)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
inline bool Ipm_0x245_245::has_ipm_hma_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_hma_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ipm_0x245_245::clear_has_ipm_hma_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ipm_0x245_245::clear_ipm_hma_status() {
  ipm_hma_status_ = 0;
  clear_has_ipm_hma_status();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::ipm_hma_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_status)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType >(ipm_hma_status_);
}
inline void Ipm_0x245_245::set_ipm_hma_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType_IsValid(value));
  set_has_ipm_hma_status();
  ipm_hma_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_status)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
inline bool Ipm_0x245_245::has_ipm_tjaica_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_tjaica_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ipm_0x245_245::clear_has_ipm_tjaica_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ipm_0x245_245::clear_ipm_tjaica_status() {
  ipm_tjaica_status_ = 0;
  clear_has_ipm_tjaica_status();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245::ipm_tjaica_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_tjaica_status)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType >(ipm_tjaica_status_);
}
inline void Ipm_0x245_245::set_ipm_tjaica_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType_IsValid(value));
  set_has_ipm_tjaica_status();
  ipm_tjaica_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_tjaica_status)
}

// optional int32 rolling_counter_0x245 = 13;
inline bool Ipm_0x245_245::has_rolling_counter_0x245() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ipm_0x245_245::set_has_rolling_counter_0x245() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ipm_0x245_245::clear_has_rolling_counter_0x245() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ipm_0x245_245::clear_rolling_counter_0x245() {
  rolling_counter_0x245_ = 0;
  clear_has_rolling_counter_0x245();
}
inline ::google::protobuf::int32 Ipm_0x245_245::rolling_counter_0x245() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.rolling_counter_0x245)
  return rolling_counter_0x245_;
}
inline void Ipm_0x245_245::set_rolling_counter_0x245(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x245();
  rolling_counter_0x245_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.rolling_counter_0x245)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
inline bool Ipm_0x245_245::has_ipm_ldwwarningtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_ldwwarningtype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ipm_0x245_245::clear_has_ipm_ldwwarningtype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ipm_0x245_245::clear_ipm_ldwwarningtype() {
  ipm_ldwwarningtype_ = 0;
  clear_has_ipm_ldwwarningtype();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::ipm_ldwwarningtype() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_ldwwarningtype)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType >(ipm_ldwwarningtype_);
}
inline void Ipm_0x245_245::set_ipm_ldwwarningtype(::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType_IsValid(value));
  set_has_ipm_ldwwarningtype();
  ipm_ldwwarningtype_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_ldwwarningtype)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
inline bool Ipm_0x245_245::has_ipm_laneassit_handsonreq() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_handsonreq() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_handsonreq() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_handsonreq() {
  ipm_laneassit_handsonreq_ = 0;
  clear_has_ipm_laneassit_handsonreq();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245::ipm_laneassit_handsonreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_handsonreq)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType >(ipm_laneassit_handsonreq_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_handsonreq(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType_IsValid(value));
  set_has_ipm_laneassit_handsonreq();
  ipm_laneassit_handsonreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_handsonreq)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
inline bool Ipm_0x245_245::has_ipm_hma_highbeamreq() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_hma_highbeamreq() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Ipm_0x245_245::clear_has_ipm_hma_highbeamreq() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Ipm_0x245_245::clear_ipm_hma_highbeamreq() {
  ipm_hma_highbeamreq_ = 0;
  clear_has_ipm_hma_highbeamreq();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245::ipm_hma_highbeamreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_highbeamreq)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType >(ipm_hma_highbeamreq_);
}
inline void Ipm_0x245_245::set_ipm_hma_highbeamreq(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType_IsValid(value));
  set_has_ipm_hma_highbeamreq();
  ipm_hma_highbeamreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_highbeamreq)
}

// optional int32 checksum_0x245 = 17;
inline bool Ipm_0x245_245::has_checksum_0x245() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Ipm_0x245_245::set_has_checksum_0x245() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Ipm_0x245_245::clear_has_checksum_0x245() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Ipm_0x245_245::clear_checksum_0x245() {
  checksum_0x245_ = 0;
  clear_has_checksum_0x245();
}
inline ::google::protobuf::int32 Ipm_0x245_245::checksum_0x245() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.checksum_0x245)
  return checksum_0x245_;
}
inline void Ipm_0x245_245::set_checksum_0x245(::google::protobuf::int32 value) {
  set_has_checksum_0x245();
  checksum_0x245_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.checksum_0x245)
}

// optional double ipm_laneassit_torquereq = 18;
inline bool Ipm_0x245_245::has_ipm_laneassit_torquereq() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_torquereq() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_torquereq() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_torquereq() {
  ipm_laneassit_torquereq_ = 0;
  clear_has_ipm_laneassit_torquereq();
}
inline double Ipm_0x245_245::ipm_laneassit_torquereq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereq)
  return ipm_laneassit_torquereq_;
}
inline void Ipm_0x245_245::set_ipm_laneassit_torquereq(double value) {
  set_has_ipm_laneassit_torquereq();
  ipm_laneassit_torquereq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereq)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
inline bool Ipm_0x245_245::has_ipm_laneassittype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassittype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassittype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Ipm_0x245_245::clear_ipm_laneassittype() {
  ipm_laneassittype_ = 0;
  clear_has_ipm_laneassittype();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::ipm_laneassittype() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassittype)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType >(ipm_laneassittype_);
}
inline void Ipm_0x245_245::set_ipm_laneassittype(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType_IsValid(value));
  set_has_ipm_laneassittype();
  ipm_laneassittype_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassittype)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
inline bool Ipm_0x245_245::has_ipm_laneassit_warningvibration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Ipm_0x245_245::set_has_ipm_laneassit_warningvibration() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Ipm_0x245_245::clear_has_ipm_laneassit_warningvibration() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Ipm_0x245_245::clear_ipm_laneassit_warningvibration() {
  ipm_laneassit_warningvibration_ = 0;
  clear_has_ipm_laneassit_warningvibration();
}
inline ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245::ipm_laneassit_warningvibration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningvibration)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType >(ipm_laneassit_warningvibration_);
}
inline void Ipm_0x245_245::set_ipm_laneassit_warningvibration(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IsValid(value));
  set_has_ipm_laneassit_warningvibration();
  ipm_laneassit_warningvibration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningvibration)
}

// -------------------------------------------------------------------

// Gw_ems_tqwhl_0x111_111

// optional int32 ems_indicatedrealengtorqwhl = 1;
inline bool Gw_ems_tqwhl_0x111_111::has_ems_indicatedrealengtorqwhl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_ems_indicatedrealengtorqwhl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicatedrealengtorqwhl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_ems_indicatedrealengtorqwhl() {
  ems_indicatedrealengtorqwhl_ = 0;
  clear_has_ems_indicatedrealengtorqwhl();
}
inline ::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::ems_indicatedrealengtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedrealengtorqwhl)
  return ems_indicatedrealengtorqwhl_;
}
inline void Gw_ems_tqwhl_0x111_111::set_ems_indicatedrealengtorqwhl(::google::protobuf::int32 value) {
  set_has_ems_indicatedrealengtorqwhl();
  ems_indicatedrealengtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedrealengtorqwhl)
}

// optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
inline bool Gw_ems_tqwhl_0x111_111::has_ems_indicatedaccmesgerror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_ems_indicatedaccmesgerror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicatedaccmesgerror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_ems_indicatedaccmesgerror() {
  ems_indicatedaccmesgerror_ = 0;
  clear_has_ems_indicatedaccmesgerror();
}
inline ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::ems_indicatedaccmesgerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedaccmesgerror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType >(ems_indicatedaccmesgerror_);
}
inline void Gw_ems_tqwhl_0x111_111::set_ems_indicatedaccmesgerror(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_IsValid(value));
  set_has_ems_indicatedaccmesgerror();
  ems_indicatedaccmesgerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedaccmesgerror)
}

// optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
inline bool Gw_ems_tqwhl_0x111_111::has_ems_indicateddriveroverride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_ems_indicateddriveroverride() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicateddriveroverride() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_ems_indicateddriveroverride() {
  ems_indicateddriveroverride_ = 0;
  clear_has_ems_indicateddriveroverride();
}
inline ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111::ems_indicateddriveroverride() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriveroverride)
  return static_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType >(ems_indicateddriveroverride_);
}
inline void Gw_ems_tqwhl_0x111_111::set_ems_indicateddriveroverride(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType value) {
  assert(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_IsValid(value));
  set_has_ems_indicateddriveroverride();
  ems_indicateddriveroverride_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriveroverride)
}

// optional double ems_indicateddriverreqtorq = 4;
inline bool Gw_ems_tqwhl_0x111_111::has_ems_indicateddriverreqtorq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_ems_indicateddriverreqtorq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicateddriverreqtorq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_ems_indicateddriverreqtorq() {
  ems_indicateddriverreqtorq_ = 0;
  clear_has_ems_indicateddriverreqtorq();
}
inline double Gw_ems_tqwhl_0x111_111::ems_indicateddriverreqtorq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorq)
  return ems_indicateddriverreqtorq_;
}
inline void Gw_ems_tqwhl_0x111_111::set_ems_indicateddriverreqtorq(double value) {
  set_has_ems_indicateddriverreqtorq();
  ems_indicateddriverreqtorq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorq)
}

// optional int32 dcm_ems_rollingcounter_0x111 = 5;
inline bool Gw_ems_tqwhl_0x111_111::has_dcm_ems_rollingcounter_0x111() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_dcm_ems_rollingcounter_0x111() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_dcm_ems_rollingcounter_0x111() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_dcm_ems_rollingcounter_0x111() {
  dcm_ems_rollingcounter_0x111_ = 0;
  clear_has_dcm_ems_rollingcounter_0x111();
}
inline ::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::dcm_ems_rollingcounter_0x111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_rollingcounter_0x111)
  return dcm_ems_rollingcounter_0x111_;
}
inline void Gw_ems_tqwhl_0x111_111::set_dcm_ems_rollingcounter_0x111(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x111();
  dcm_ems_rollingcounter_0x111_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_rollingcounter_0x111)
}

// optional int32 dcm_ems_checksum_0x111 = 6;
inline bool Gw_ems_tqwhl_0x111_111::has_dcm_ems_checksum_0x111() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_dcm_ems_checksum_0x111() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_dcm_ems_checksum_0x111() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_dcm_ems_checksum_0x111() {
  dcm_ems_checksum_0x111_ = 0;
  clear_has_dcm_ems_checksum_0x111();
}
inline ::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::dcm_ems_checksum_0x111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_checksum_0x111)
  return dcm_ems_checksum_0x111_;
}
inline void Gw_ems_tqwhl_0x111_111::set_dcm_ems_checksum_0x111(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x111();
  dcm_ems_checksum_0x111_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_checksum_0x111)
}

// optional int32 ems_indicateddriverreqtorqwhl = 7;
inline bool Gw_ems_tqwhl_0x111_111::has_ems_indicateddriverreqtorqwhl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_ems_tqwhl_0x111_111::set_has_ems_indicateddriverreqtorqwhl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicateddriverreqtorqwhl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_ems_tqwhl_0x111_111::clear_ems_indicateddriverreqtorqwhl() {
  ems_indicateddriverreqtorqwhl_ = 0;
  clear_has_ems_indicateddriverreqtorqwhl();
}
inline ::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::ems_indicateddriverreqtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorqwhl)
  return ems_indicateddriverreqtorqwhl_;
}
inline void Gw_ems_tqwhl_0x111_111::set_ems_indicateddriverreqtorqwhl(::google::protobuf::int32 value) {
  set_has_ems_indicateddriverreqtorqwhl();
  ems_indicateddriverreqtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorqwhl)
}

// -------------------------------------------------------------------

// Gw_tcu_gearinfo_0x123_123

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_displaygear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_displaygear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_displaygear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_displaygear() {
  tcu_displaygear_ = 0;
  clear_has_tcu_displaygear();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::tcu_displaygear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_displaygear)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType >(tcu_displaygear_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_displaygear(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_IsValid(value));
  set_has_tcu_displaygear();
  tcu_displaygear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_displaygear)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_gearselectorreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_gearselectorreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_gearselectorreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_gearselectorreq() {
  tcu_gearselectorreq_ = 0;
  clear_has_tcu_gearselectorreq();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::tcu_gearselectorreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearselectorreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType >(tcu_gearselectorreq_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_gearselectorreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_IsValid(value));
  set_has_tcu_gearselectorreq();
  tcu_gearselectorreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearselectorreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_transpmotoparkreqinvalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_transpmotoparkreqinvalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_transpmotoparkreqinvalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_transpmotoparkreqinvalid() {
  tcu_transpmotoparkreqinvalid_ = 0;
  clear_has_tcu_transpmotoparkreqinvalid();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123::tcu_transpmotoparkreqinvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotoparkreqinvalid)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType >(tcu_transpmotoparkreqinvalid_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_transpmotoparkreqinvalid(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_IsValid(value));
  set_has_tcu_transpmotoparkreqinvalid();
  tcu_transpmotoparkreqinvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotoparkreqinvalid)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_gearshiftinprogress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_gearshiftinprogress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_gearshiftinprogress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_gearshiftinprogress() {
  tcu_gearshiftinprogress_ = 0;
  clear_has_tcu_gearshiftinprogress();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123::tcu_gearshiftinprogress() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearshiftinprogress)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType >(tcu_gearshiftinprogress_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_gearshiftinprogress(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_IsValid(value));
  set_has_tcu_gearshiftinprogress();
  tcu_gearshiftinprogress_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearshiftinprogress)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_shiftleverpos_sbwm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_shiftleverpos_sbwm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_shiftleverpos_sbwm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_shiftleverpos_sbwm() {
  tcu_shiftleverpos_sbwm_ = 0;
  clear_has_tcu_shiftleverpos_sbwm();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::tcu_shiftleverpos_sbwm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftleverpos_sbwm)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType >(tcu_shiftleverpos_sbwm_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_shiftleverpos_sbwm(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_IsValid(value));
  set_has_tcu_shiftleverpos_sbwm();
  tcu_shiftleverpos_sbwm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftleverpos_sbwm)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_targetgearreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_targetgearreq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_targetgearreq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_targetgearreq() {
  tcu_targetgearreq_ = 0;
  clear_has_tcu_targetgearreq();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::tcu_targetgearreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_targetgearreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType >(tcu_targetgearreq_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_targetgearreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_IsValid(value));
  set_has_tcu_targetgearreq();
  tcu_targetgearreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_targetgearreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_available() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_available() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_available() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_available() {
  tcu_available_ = 0;
  clear_has_tcu_available();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123::tcu_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_available)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType >(tcu_available_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_available(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType_IsValid(value));
  set_has_tcu_available();
  tcu_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_available)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_driverintervention() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_driverintervention() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_driverintervention() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_driverintervention() {
  tcu_driverintervention_ = 0;
  clear_has_tcu_driverintervention();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123::tcu_driverintervention() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driverintervention)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType >(tcu_driverintervention_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_driverintervention(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_IsValid(value));
  set_has_tcu_driverintervention();
  tcu_driverintervention_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driverintervention)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_trsmfaultflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_trsmfaultflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_trsmfaultflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_trsmfaultflag() {
  tcu_trsmfaultflag_ = 0;
  clear_has_tcu_trsmfaultflag();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::tcu_trsmfaultflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_trsmfaultflag)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType >(tcu_trsmfaultflag_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_trsmfaultflag(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_IsValid(value));
  set_has_tcu_trsmfaultflag();
  tcu_trsmfaultflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_trsmfaultflag)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_stgearmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_stgearmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_stgearmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_stgearmode() {
  tcu_stgearmode_ = 0;
  clear_has_tcu_stgearmode();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::tcu_stgearmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_stgearmode)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType >(tcu_stgearmode_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_stgearmode(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_IsValid(value));
  set_has_tcu_stgearmode();
  tcu_stgearmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_stgearmode)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_driving_mode_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_driving_mode_req() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_driving_mode_req() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_driving_mode_req() {
  tcu_driving_mode_req_ = 0;
  clear_has_tcu_driving_mode_req();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::tcu_driving_mode_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driving_mode_req)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType >(tcu_driving_mode_req_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_driving_mode_req(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_IsValid(value));
  set_has_tcu_driving_mode_req();
  tcu_driving_mode_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driving_mode_req)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_epblockreq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_epblockreq() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_epblockreq() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_epblockreq() {
  tcu_epblockreq_ = 0;
  clear_has_tcu_epblockreq();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123::tcu_epblockreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_epblockreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType >(tcu_epblockreq_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_epblockreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_IsValid(value));
  set_has_tcu_epblockreq();
  tcu_epblockreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_epblockreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_highresistance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_highresistance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_highresistance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_highresistance() {
  tcu_highresistance_ = 0;
  clear_has_tcu_highresistance();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123::tcu_highresistance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_highresistance)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType >(tcu_highresistance_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_highresistance(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_IsValid(value));
  set_has_tcu_highresistance();
  tcu_highresistance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_highresistance)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_drivingmodechange_fault_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_drivingmodechange_fault_flag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_drivingmodechange_fault_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_drivingmodechange_fault_flag() {
  tcu_drivingmodechange_fault_flag_ = 0;
  clear_has_tcu_drivingmodechange_fault_flag();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123::tcu_drivingmodechange_fault_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_drivingmodechange_fault_flag)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType >(tcu_drivingmodechange_fault_flag_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_drivingmodechange_fault_flag(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_IsValid(value));
  set_has_tcu_drivingmodechange_fault_flag();
  tcu_drivingmodechange_fault_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_drivingmodechange_fault_flag)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_shiftlevertopreqinvalid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_shiftlevertopreqinvalid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_shiftlevertopreqinvalid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_shiftlevertopreqinvalid() {
  tcu_shiftlevertopreqinvalid_ = 0;
  clear_has_tcu_shiftlevertopreqinvalid();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123::tcu_shiftlevertopreqinvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreqinvalid)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType >(tcu_shiftlevertopreqinvalid_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_shiftlevertopreqinvalid(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_IsValid(value));
  set_has_tcu_shiftlevertopreqinvalid();
  tcu_shiftlevertopreqinvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreqinvalid)
}

// optional int32 tcu_status_alivecounter0x123 = 16;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_status_alivecounter0x123() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_status_alivecounter0x123() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_status_alivecounter0x123() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_status_alivecounter0x123() {
  tcu_status_alivecounter0x123_ = 0;
  clear_has_tcu_status_alivecounter0x123();
}
inline ::google::protobuf::int32 Gw_tcu_gearinfo_0x123_123::tcu_status_alivecounter0x123() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_alivecounter0x123)
  return tcu_status_alivecounter0x123_;
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_status_alivecounter0x123(::google::protobuf::int32 value) {
  set_has_tcu_status_alivecounter0x123();
  tcu_status_alivecounter0x123_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_alivecounter0x123)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_transpmotorparkreq() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_transpmotorparkreq() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_transpmotorparkreq() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_transpmotorparkreq() {
  tcu_transpmotorparkreq_ = 0;
  clear_has_tcu_transpmotorparkreq();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::tcu_transpmotorparkreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotorparkreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType >(tcu_transpmotorparkreq_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_transpmotorparkreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_IsValid(value));
  set_has_tcu_transpmotorparkreq();
  tcu_transpmotorparkreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotorparkreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_shiftlevertopreq() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_shiftlevertopreq() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_shiftlevertopreq() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_shiftlevertopreq() {
  tcu_shiftlevertopreq_ = 0;
  clear_has_tcu_shiftlevertopreq();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::tcu_shiftlevertopreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType >(tcu_shiftlevertopreq_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_shiftlevertopreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_IsValid(value));
  set_has_tcu_shiftlevertopreq();
  tcu_shiftlevertopreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreq)
}

// optional int32 tcu_status_checksum0x123 = 19;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_status_checksum0x123() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_status_checksum0x123() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_status_checksum0x123() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_status_checksum0x123() {
  tcu_status_checksum0x123_ = 0;
  clear_has_tcu_status_checksum0x123();
}
inline ::google::protobuf::int32 Gw_tcu_gearinfo_0x123_123::tcu_status_checksum0x123() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_checksum0x123)
  return tcu_status_checksum0x123_;
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_status_checksum0x123(::google::protobuf::int32 value) {
  set_has_tcu_status_checksum0x123();
  tcu_status_checksum0x123_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_checksum0x123)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
inline bool Gw_tcu_gearinfo_0x123_123::has_tcu_currentgearposition() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Gw_tcu_gearinfo_0x123_123::set_has_tcu_currentgearposition() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_currentgearposition() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Gw_tcu_gearinfo_0x123_123::clear_tcu_currentgearposition() {
  tcu_currentgearposition_ = 0;
  clear_has_tcu_currentgearposition();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::tcu_currentgearposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_currentgearposition)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType >(tcu_currentgearposition_);
}
inline void Gw_tcu_gearinfo_0x123_123::set_tcu_currentgearposition(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_IsValid(value));
  set_has_tcu_currentgearposition();
  tcu_currentgearposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_currentgearposition)
}

// -------------------------------------------------------------------

// Esp_pressure_0x241_241

// optional int32 esp_trfcasetqlmtdbyesp = 1;
inline bool Esp_pressure_0x241_241::has_esp_trfcasetqlmtdbyesp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_esp_trfcasetqlmtdbyesp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_pressure_0x241_241::clear_has_esp_trfcasetqlmtdbyesp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_pressure_0x241_241::clear_esp_trfcasetqlmtdbyesp() {
  esp_trfcasetqlmtdbyesp_ = 0;
  clear_has_esp_trfcasetqlmtdbyesp();
}
inline ::google::protobuf::int32 Esp_pressure_0x241_241::esp_trfcasetqlmtdbyesp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasetqlmtdbyesp)
  return esp_trfcasetqlmtdbyesp_;
}
inline void Esp_pressure_0x241_241::set_esp_trfcasetqlmtdbyesp(::google::protobuf::int32 value) {
  set_has_esp_trfcasetqlmtdbyesp();
  esp_trfcasetqlmtdbyesp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasetqlmtdbyesp)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
inline bool Esp_pressure_0x241_241::has_esp_trfcasemodreqdbyesp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_esp_trfcasemodreqdbyesp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_pressure_0x241_241::clear_has_esp_trfcasemodreqdbyesp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_pressure_0x241_241::clear_esp_trfcasemodreqdbyesp() {
  esp_trfcasemodreqdbyesp_ = 0;
  clear_has_esp_trfcasemodreqdbyesp();
}
inline ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::esp_trfcasemodreqdbyesp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasemodreqdbyesp)
  return static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType >(esp_trfcasemodreqdbyesp_);
}
inline void Esp_pressure_0x241_241::set_esp_trfcasemodreqdbyesp(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType value) {
  assert(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_IsValid(value));
  set_has_esp_trfcasemodreqdbyesp();
  esp_trfcasemodreqdbyesp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasemodreqdbyesp)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
inline bool Esp_pressure_0x241_241::has_esp_presoffsetmastercylindervali() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_esp_presoffsetmastercylindervali() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_pressure_0x241_241::clear_has_esp_presoffsetmastercylindervali() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_pressure_0x241_241::clear_esp_presoffsetmastercylindervali() {
  esp_presoffsetmastercylindervali_ = 0;
  clear_has_esp_presoffsetmastercylindervali();
}
inline ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241::esp_presoffsetmastercylindervali() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylindervali)
  return static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType >(esp_presoffsetmastercylindervali_);
}
inline void Esp_pressure_0x241_241::set_esp_presoffsetmastercylindervali(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType value) {
  assert(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_IsValid(value));
  set_has_esp_presoffsetmastercylindervali();
  esp_presoffsetmastercylindervali_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylindervali)
}

// optional int32 esp_presoffsetmastercylinder = 4;
inline bool Esp_pressure_0x241_241::has_esp_presoffsetmastercylinder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_esp_presoffsetmastercylinder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_pressure_0x241_241::clear_has_esp_presoffsetmastercylinder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_pressure_0x241_241::clear_esp_presoffsetmastercylinder() {
  esp_presoffsetmastercylinder_ = 0;
  clear_has_esp_presoffsetmastercylinder();
}
inline ::google::protobuf::int32 Esp_pressure_0x241_241::esp_presoffsetmastercylinder() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylinder)
  return esp_presoffsetmastercylinder_;
}
inline void Esp_pressure_0x241_241::set_esp_presoffsetmastercylinder(::google::protobuf::int32 value) {
  set_has_esp_presoffsetmastercylinder();
  esp_presoffsetmastercylinder_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylinder)
}

// optional int32 rolling_counter_0x241 = 5;
inline bool Esp_pressure_0x241_241::has_rolling_counter_0x241() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_rolling_counter_0x241() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_pressure_0x241_241::clear_has_rolling_counter_0x241() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_pressure_0x241_241::clear_rolling_counter_0x241() {
  rolling_counter_0x241_ = 0;
  clear_has_rolling_counter_0x241();
}
inline ::google::protobuf::int32 Esp_pressure_0x241_241::rolling_counter_0x241() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.rolling_counter_0x241)
  return rolling_counter_0x241_;
}
inline void Esp_pressure_0x241_241::set_rolling_counter_0x241(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x241();
  rolling_counter_0x241_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.rolling_counter_0x241)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
inline bool Esp_pressure_0x241_241::has_esp_master_cylinder_pressure_sta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_esp_master_cylinder_pressure_sta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_pressure_0x241_241::clear_has_esp_master_cylinder_pressure_sta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_pressure_0x241_241::clear_esp_master_cylinder_pressure_sta() {
  esp_master_cylinder_pressure_sta_ = 0;
  clear_has_esp_master_cylinder_pressure_sta();
}
inline ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241::esp_master_cylinder_pressure_sta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure_sta)
  return static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType >(esp_master_cylinder_pressure_sta_);
}
inline void Esp_pressure_0x241_241::set_esp_master_cylinder_pressure_sta(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType value) {
  assert(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_IsValid(value));
  set_has_esp_master_cylinder_pressure_sta();
  esp_master_cylinder_pressure_sta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure_sta)
}

// optional int32 checksum_0x241 = 7;
inline bool Esp_pressure_0x241_241::has_checksum_0x241() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_checksum_0x241() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_pressure_0x241_241::clear_has_checksum_0x241() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_pressure_0x241_241::clear_checksum_0x241() {
  checksum_0x241_ = 0;
  clear_has_checksum_0x241();
}
inline ::google::protobuf::int32 Esp_pressure_0x241_241::checksum_0x241() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.checksum_0x241)
  return checksum_0x241_;
}
inline void Esp_pressure_0x241_241::set_checksum_0x241(::google::protobuf::int32 value) {
  set_has_checksum_0x241();
  checksum_0x241_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.checksum_0x241)
}

// optional double esp_master_cylinder_pressure = 8;
inline bool Esp_pressure_0x241_241::has_esp_master_cylinder_pressure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_pressure_0x241_241::set_has_esp_master_cylinder_pressure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_pressure_0x241_241::clear_has_esp_master_cylinder_pressure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_pressure_0x241_241::clear_esp_master_cylinder_pressure() {
  esp_master_cylinder_pressure_ = 0;
  clear_has_esp_master_cylinder_pressure();
}
inline double Esp_pressure_0x241_241::esp_master_cylinder_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure)
  return esp_master_cylinder_pressure_;
}
inline void Esp_pressure_0x241_241::set_esp_master_cylinder_pressure(double value) {
  set_has_esp_master_cylinder_pressure();
  esp_master_cylinder_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure)
}

// -------------------------------------------------------------------

// Esp_status_0x243_243

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
inline bool Esp_status_0x243_243::has_esp_hhcavailable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_hhcavailable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_status_0x243_243::clear_has_esp_hhcavailable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_status_0x243_243::clear_esp_hhcavailable() {
  esp_hhcavailable_ = 0;
  clear_has_esp_hhcavailable();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243::esp_hhcavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcavailable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType >(esp_hhcavailable_);
}
inline void Esp_status_0x243_243::set_esp_hhcavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType_IsValid(value));
  set_has_esp_hhcavailable();
  esp_hhcavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcavailable)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
inline bool Esp_status_0x243_243::has_esp_hhcactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_hhcactive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_status_0x243_243::clear_has_esp_hhcactive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_status_0x243_243::clear_esp_hhcactive() {
  esp_hhcactive_ = 0;
  clear_has_esp_hhcactive();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243::esp_hhcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType >(esp_hhcactive_);
}
inline void Esp_status_0x243_243::set_esp_hhcactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType_IsValid(value));
  set_has_esp_hhcactive();
  esp_hhcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
inline bool Esp_status_0x243_243::has_esp_hdcactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_hdcactive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_status_0x243_243::clear_has_esp_hdcactive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_status_0x243_243::clear_esp_hdcactive() {
  esp_hdcactive_ = 0;
  clear_has_esp_hdcactive();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::esp_hdcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType >(esp_hdcactive_);
}
inline void Esp_status_0x243_243::set_esp_hdcactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType_IsValid(value));
  set_has_esp_hdcactive();
  esp_hdcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
inline bool Esp_status_0x243_243::has_esp_ldmblc_blrequestcontroller() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_ldmblc_blrequestcontroller() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_status_0x243_243::clear_has_esp_ldmblc_blrequestcontroller() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_status_0x243_243::clear_esp_ldmblc_blrequestcontroller() {
  esp_ldmblc_blrequestcontroller_ = 0;
  clear_has_esp_ldmblc_blrequestcontroller();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243::esp_ldmblc_blrequestcontroller() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_ldmblc_blrequestcontroller)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType >(esp_ldmblc_blrequestcontroller_);
}
inline void Esp_status_0x243_243::set_esp_ldmblc_blrequestcontroller(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_IsValid(value));
  set_has_esp_ldmblc_blrequestcontroller();
  esp_ldmblc_blrequestcontroller_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_ldmblc_blrequestcontroller)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
inline bool Esp_status_0x243_243::has_esp_cdpavailable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_cdpavailable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_status_0x243_243::clear_has_esp_cdpavailable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_status_0x243_243::clear_esp_cdpavailable() {
  esp_cdpavailable_ = 0;
  clear_has_esp_cdpavailable();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243::esp_cdpavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpavailable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType >(esp_cdpavailable_);
}
inline void Esp_status_0x243_243::set_esp_cdpavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType_IsValid(value));
  set_has_esp_cdpavailable();
  esp_cdpavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpavailable)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
inline bool Esp_status_0x243_243::has_esp_cdpactive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_cdpactive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_status_0x243_243::clear_has_esp_cdpactive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_status_0x243_243::clear_esp_cdpactive() {
  esp_cdpactive_ = 0;
  clear_has_esp_cdpactive();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243::esp_cdpactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType >(esp_cdpactive_);
}
inline void Esp_status_0x243_243::set_esp_cdpactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType_IsValid(value));
  set_has_esp_cdpactive();
  esp_cdpactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
inline bool Esp_status_0x243_243::has_esp_epbwarningmessage3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_epbwarningmessage3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_status_0x243_243::clear_has_esp_epbwarningmessage3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_status_0x243_243::clear_esp_epbwarningmessage3() {
  esp_epbwarningmessage3_ = 0;
  clear_has_esp_epbwarningmessage3();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243::esp_epbwarningmessage3() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage3)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type >(esp_epbwarningmessage3_);
}
inline void Esp_status_0x243_243::set_esp_epbwarningmessage3(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type_IsValid(value));
  set_has_esp_epbwarningmessage3();
  esp_epbwarningmessage3_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage3)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
inline bool Esp_status_0x243_243::has_esp_epbwarningmessage2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_epbwarningmessage2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_status_0x243_243::clear_has_esp_epbwarningmessage2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_status_0x243_243::clear_esp_epbwarningmessage2() {
  esp_epbwarningmessage2_ = 0;
  clear_has_esp_epbwarningmessage2();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243::esp_epbwarningmessage2() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage2)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type >(esp_epbwarningmessage2_);
}
inline void Esp_status_0x243_243::set_esp_epbwarningmessage2(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type_IsValid(value));
  set_has_esp_epbwarningmessage2();
  esp_epbwarningmessage2_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage2)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
inline bool Esp_status_0x243_243::has_esp_epbwarningmessage1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_epbwarningmessage1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Esp_status_0x243_243::clear_has_esp_epbwarningmessage1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Esp_status_0x243_243::clear_esp_epbwarningmessage1() {
  esp_epbwarningmessage1_ = 0;
  clear_has_esp_epbwarningmessage1();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243::esp_epbwarningmessage1() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage1)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type >(esp_epbwarningmessage1_);
}
inline void Esp_status_0x243_243::set_esp_epbwarningmessage1(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type_IsValid(value));
  set_has_esp_epbwarningmessage1();
  esp_epbwarningmessage1_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage1)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
inline bool Esp_status_0x243_243::has_esp_avhwarningmessage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_avhwarningmessage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Esp_status_0x243_243::clear_has_esp_avhwarningmessage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Esp_status_0x243_243::clear_esp_avhwarningmessage() {
  esp_avhwarningmessage_ = 0;
  clear_has_esp_avhwarningmessage();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243::esp_avhwarningmessage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhwarningmessage)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType >(esp_avhwarningmessage_);
}
inline void Esp_status_0x243_243::set_esp_avhwarningmessage(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType_IsValid(value));
  set_has_esp_avhwarningmessage();
  esp_avhwarningmessage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhwarningmessage)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
inline bool Esp_status_0x243_243::has_esp_avhactive() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_avhactive() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Esp_status_0x243_243::clear_has_esp_avhactive() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Esp_status_0x243_243::clear_esp_avhactive() {
  esp_avhactive_ = 0;
  clear_has_esp_avhactive();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243::esp_avhactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType >(esp_avhactive_);
}
inline void Esp_status_0x243_243::set_esp_avhactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType_IsValid(value));
  set_has_esp_avhactive();
  esp_avhactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
inline bool Esp_status_0x243_243::has_esp_avhstandby() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_avhstandby() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Esp_status_0x243_243::clear_has_esp_avhstandby() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Esp_status_0x243_243::clear_esp_avhstandby() {
  esp_avhstandby_ = 0;
  clear_has_esp_avhstandby();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243::esp_avhstandby() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhstandby)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType >(esp_avhstandby_);
}
inline void Esp_status_0x243_243::set_esp_avhstandby(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType_IsValid(value));
  set_has_esp_avhstandby();
  esp_avhstandby_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhstandby)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
inline bool Esp_status_0x243_243::has_esp_avhavabliable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_avhavabliable() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Esp_status_0x243_243::clear_has_esp_avhavabliable() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Esp_status_0x243_243::clear_esp_avhavabliable() {
  esp_avhavabliable_ = 0;
  clear_has_esp_avhavabliable();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243::esp_avhavabliable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhavabliable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType >(esp_avhavabliable_);
}
inline void Esp_status_0x243_243::set_esp_avhavabliable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType_IsValid(value));
  set_has_esp_avhavabliable();
  esp_avhavabliable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhavabliable)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
inline bool Esp_status_0x243_243::has_esp_vdcflgflt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_vdcflgflt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Esp_status_0x243_243::clear_has_esp_vdcflgflt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Esp_status_0x243_243::clear_esp_vdcflgflt() {
  esp_vdcflgflt_ = 0;
  clear_has_esp_vdcflgflt();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243::esp_vdcflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_vdcflgflt)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType >(esp_vdcflgflt_);
}
inline void Esp_status_0x243_243::set_esp_vdcflgflt(::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType_IsValid(value));
  set_has_esp_vdcflgflt();
  esp_vdcflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_vdcflgflt)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
inline bool Esp_status_0x243_243::has_esp_tcsflgflt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_tcsflgflt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Esp_status_0x243_243::clear_has_esp_tcsflgflt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Esp_status_0x243_243::clear_esp_tcsflgflt() {
  esp_tcsflgflt_ = 0;
  clear_has_esp_tcsflgflt();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243::esp_tcsflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsflgflt)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType >(esp_tcsflgflt_);
}
inline void Esp_status_0x243_243::set_esp_tcsflgflt(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType_IsValid(value));
  set_has_esp_tcsflgflt();
  esp_tcsflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsflgflt)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
inline bool Esp_status_0x243_243::has_esp_tcsctrlactv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_tcsctrlactv() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Esp_status_0x243_243::clear_has_esp_tcsctrlactv() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Esp_status_0x243_243::clear_esp_tcsctrlactv() {
  esp_tcsctrlactv_ = 0;
  clear_has_esp_tcsctrlactv();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243::esp_tcsctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsctrlactv)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType >(esp_tcsctrlactv_);
}
inline void Esp_status_0x243_243::set_esp_tcsctrlactv(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType_IsValid(value));
  set_has_esp_tcsctrlactv();
  esp_tcsctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsctrlactv)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
inline bool Esp_status_0x243_243::has_esp_espctrlactv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_espctrlactv() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Esp_status_0x243_243::clear_has_esp_espctrlactv() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Esp_status_0x243_243::clear_esp_espctrlactv() {
  esp_espctrlactv_ = 0;
  clear_has_esp_espctrlactv();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243::esp_espctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_espctrlactv)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType >(esp_espctrlactv_);
}
inline void Esp_status_0x243_243::set_esp_espctrlactv(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType_IsValid(value));
  set_has_esp_espctrlactv();
  esp_espctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_espctrlactv)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
inline bool Esp_status_0x243_243::has_esp_driving_mode_req() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_driving_mode_req() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Esp_status_0x243_243::clear_has_esp_driving_mode_req() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Esp_status_0x243_243::clear_esp_driving_mode_req() {
  esp_driving_mode_req_ = 0;
  clear_has_esp_driving_mode_req();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::esp_driving_mode_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_driving_mode_req)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType >(esp_driving_mode_req_);
}
inline void Esp_status_0x243_243::set_esp_driving_mode_req(::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType_IsValid(value));
  set_has_esp_driving_mode_req();
  esp_driving_mode_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_driving_mode_req)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
inline bool Esp_status_0x243_243::has_esp_espinfolamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_espinfolamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Esp_status_0x243_243::clear_has_esp_espinfolamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Esp_status_0x243_243::clear_esp_espinfolamp() {
  esp_espinfolamp_ = 0;
  clear_has_esp_espinfolamp();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243::esp_espinfolamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_espinfolamp)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType >(esp_espinfolamp_);
}
inline void Esp_status_0x243_243::set_esp_espinfolamp(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType_IsValid(value));
  set_has_esp_espinfolamp();
  esp_espinfolamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_espinfolamp)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
inline bool Esp_status_0x243_243::has_esp_espenablests() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_espenablests() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Esp_status_0x243_243::clear_has_esp_espenablests() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Esp_status_0x243_243::clear_esp_espenablests() {
  esp_espenablests_ = 0;
  clear_has_esp_espenablests();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243::esp_espenablests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_espenablests)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType >(esp_espenablests_);
}
inline void Esp_status_0x243_243::set_esp_espenablests(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType_IsValid(value));
  set_has_esp_espenablests();
  esp_espenablests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_espenablests)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
inline bool Esp_status_0x243_243::has_esp_gearshiftprevn() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_gearshiftprevn() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Esp_status_0x243_243::clear_has_esp_gearshiftprevn() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Esp_status_0x243_243::clear_esp_gearshiftprevn() {
  esp_gearshiftprevn_ = 0;
  clear_has_esp_gearshiftprevn();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::esp_gearshiftprevn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_gearshiftprevn)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType >(esp_gearshiftprevn_);
}
inline void Esp_status_0x243_243::set_esp_gearshiftprevn(::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType_IsValid(value));
  set_has_esp_gearshiftprevn();
  esp_gearshiftprevn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_gearshiftprevn)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
inline bool Esp_status_0x243_243::has_esp_epbstatus() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_epbstatus() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Esp_status_0x243_243::clear_has_esp_epbstatus() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Esp_status_0x243_243::clear_esp_epbstatus() {
  esp_epbstatus_ = 0;
  clear_has_esp_epbstatus();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::esp_epbstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbstatus)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType >(esp_epbstatus_);
}
inline void Esp_status_0x243_243::set_esp_epbstatus(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType_IsValid(value));
  set_has_esp_epbstatus();
  esp_epbstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbstatus)
}

// optional int32 rollingcounter_0x243 = 23;
inline bool Esp_status_0x243_243::has_rollingcounter_0x243() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Esp_status_0x243_243::set_has_rollingcounter_0x243() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Esp_status_0x243_243::clear_has_rollingcounter_0x243() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Esp_status_0x243_243::clear_rollingcounter_0x243() {
  rollingcounter_0x243_ = 0;
  clear_has_rollingcounter_0x243();
}
inline ::google::protobuf::int32 Esp_status_0x243_243::rollingcounter_0x243() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.rollingcounter_0x243)
  return rollingcounter_0x243_;
}
inline void Esp_status_0x243_243::set_rollingcounter_0x243(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x243();
  rollingcounter_0x243_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.rollingcounter_0x243)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
inline bool Esp_status_0x243_243::has_rollerbenchmodests() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Esp_status_0x243_243::set_has_rollerbenchmodests() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Esp_status_0x243_243::clear_has_rollerbenchmodests() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Esp_status_0x243_243::clear_rollerbenchmodests() {
  rollerbenchmodests_ = 0;
  clear_has_rollerbenchmodests();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243::rollerbenchmodests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.rollerbenchmodests)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType >(rollerbenchmodests_);
}
inline void Esp_status_0x243_243::set_rollerbenchmodests(::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType_IsValid(value));
  set_has_rollerbenchmodests();
  rollerbenchmodests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.rollerbenchmodests)
}

// optional int32 checksum_0x243 = 25;
inline bool Esp_status_0x243_243::has_checksum_0x243() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Esp_status_0x243_243::set_has_checksum_0x243() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Esp_status_0x243_243::clear_has_checksum_0x243() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Esp_status_0x243_243::clear_checksum_0x243() {
  checksum_0x243_ = 0;
  clear_has_checksum_0x243();
}
inline ::google::protobuf::int32 Esp_status_0x243_243::checksum_0x243() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.checksum_0x243)
  return checksum_0x243_;
}
inline void Esp_status_0x243_243::set_checksum_0x243(::google::protobuf::int32 value) {
  set_has_checksum_0x243();
  checksum_0x243_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.checksum_0x243)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
inline bool Esp_status_0x243_243::has_esp_epberrorstatus() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_epberrorstatus() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Esp_status_0x243_243::clear_has_esp_epberrorstatus() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Esp_status_0x243_243::clear_esp_epberrorstatus() {
  esp_epberrorstatus_ = 0;
  clear_has_esp_epberrorstatus();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::esp_epberrorstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epberrorstatus)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType >(esp_epberrorstatus_);
}
inline void Esp_status_0x243_243::set_esp_epberrorstatus(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType_IsValid(value));
  set_has_esp_epberrorstatus();
  esp_epberrorstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epberrorstatus)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
inline bool Esp_status_0x243_243::has_esp_ccswitchoff() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_ccswitchoff() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Esp_status_0x243_243::clear_has_esp_ccswitchoff() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Esp_status_0x243_243::clear_esp_ccswitchoff() {
  esp_ccswitchoff_ = 0;
  clear_has_esp_ccswitchoff();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243::esp_ccswitchoff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_ccswitchoff)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType >(esp_ccswitchoff_);
}
inline void Esp_status_0x243_243::set_esp_ccswitchoff(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType_IsValid(value));
  set_has_esp_ccswitchoff();
  esp_ccswitchoff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_ccswitchoff)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
inline bool Esp_status_0x243_243::has_esp_hdcavailable() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Esp_status_0x243_243::set_has_esp_hdcavailable() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Esp_status_0x243_243::clear_has_esp_hdcavailable() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Esp_status_0x243_243::clear_esp_hdcavailable() {
  esp_hdcavailable_ = 0;
  clear_has_esp_hdcavailable();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243::esp_hdcavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcavailable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType >(esp_hdcavailable_);
}
inline void Esp_status_0x243_243::set_esp_hdcavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType_IsValid(value));
  set_has_esp_hdcavailable();
  esp_hdcavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcavailable)
}

// -------------------------------------------------------------------

// Esp_axay_0x242_242

// optional double esp_alat = 1;
inline bool Esp_axay_0x242_242::has_esp_alat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_axay_0x242_242::set_has_esp_alat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_axay_0x242_242::clear_has_esp_alat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_axay_0x242_242::clear_esp_alat() {
  esp_alat_ = 0;
  clear_has_esp_alat();
}
inline double Esp_axay_0x242_242::esp_alat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_alat)
  return esp_alat_;
}
inline void Esp_axay_0x242_242::set_esp_alat(double value) {
  set_has_esp_alat();
  esp_alat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_alat)
}

// optional double esp_yawrate = 2;
inline bool Esp_axay_0x242_242::has_esp_yawrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_axay_0x242_242::set_has_esp_yawrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_axay_0x242_242::clear_has_esp_yawrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_axay_0x242_242::clear_esp_yawrate() {
  esp_yawrate_ = 0;
  clear_has_esp_yawrate();
}
inline double Esp_axay_0x242_242::esp_yawrate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawrate)
  return esp_yawrate_;
}
inline void Esp_axay_0x242_242::set_esp_yawrate(double value) {
  set_has_esp_yawrate();
  esp_yawrate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawrate)
}

// optional int32 rolling_counter_0x242 = 3;
inline bool Esp_axay_0x242_242::has_rolling_counter_0x242() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_axay_0x242_242::set_has_rolling_counter_0x242() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_axay_0x242_242::clear_has_rolling_counter_0x242() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_axay_0x242_242::clear_rolling_counter_0x242() {
  rolling_counter_0x242_ = 0;
  clear_has_rolling_counter_0x242();
}
inline ::google::protobuf::int32 Esp_axay_0x242_242::rolling_counter_0x242() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.rolling_counter_0x242)
  return rolling_counter_0x242_;
}
inline void Esp_axay_0x242_242::set_rolling_counter_0x242(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x242();
  rolling_counter_0x242_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.rolling_counter_0x242)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
inline bool Esp_axay_0x242_242::has_esp_yawratestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_axay_0x242_242::set_has_esp_yawratestatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_axay_0x242_242::clear_has_esp_yawratestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_axay_0x242_242::clear_esp_yawratestatus() {
  esp_yawratestatus_ = 0;
  clear_has_esp_yawratestatus();
}
inline ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242::esp_yawratestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawratestatus)
  return static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType >(esp_yawratestatus_);
}
inline void Esp_axay_0x242_242::set_esp_yawratestatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType value) {
  assert(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType_IsValid(value));
  set_has_esp_yawratestatus();
  esp_yawratestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawratestatus)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
inline bool Esp_axay_0x242_242::has_esp_alatstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_axay_0x242_242::set_has_esp_alatstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_axay_0x242_242::clear_has_esp_alatstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_axay_0x242_242::clear_esp_alatstatus() {
  esp_alatstatus_ = 0;
  clear_has_esp_alatstatus();
}
inline ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242::esp_alatstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_alatstatus)
  return static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType >(esp_alatstatus_);
}
inline void Esp_axay_0x242_242::set_esp_alatstatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType value) {
  assert(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType_IsValid(value));
  set_has_esp_alatstatus();
  esp_alatstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_alatstatus)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
inline bool Esp_axay_0x242_242::has_esp_algtstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_axay_0x242_242::set_has_esp_algtstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_axay_0x242_242::clear_has_esp_algtstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_axay_0x242_242::clear_esp_algtstatus() {
  esp_algtstatus_ = 0;
  clear_has_esp_algtstatus();
}
inline ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242::esp_algtstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_algtstatus)
  return static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType >(esp_algtstatus_);
}
inline void Esp_axay_0x242_242::set_esp_algtstatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType value) {
  assert(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType_IsValid(value));
  set_has_esp_algtstatus();
  esp_algtstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_algtstatus)
}

// optional int32 checksum_0x242 = 7;
inline bool Esp_axay_0x242_242::has_checksum_0x242() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_axay_0x242_242::set_has_checksum_0x242() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_axay_0x242_242::clear_has_checksum_0x242() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_axay_0x242_242::clear_checksum_0x242() {
  checksum_0x242_ = 0;
  clear_has_checksum_0x242();
}
inline ::google::protobuf::int32 Esp_axay_0x242_242::checksum_0x242() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.checksum_0x242)
  return checksum_0x242_;
}
inline void Esp_axay_0x242_242::set_checksum_0x242(::google::protobuf::int32 value) {
  set_has_checksum_0x242();
  checksum_0x242_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.checksum_0x242)
}

// optional double esp_algt = 8;
inline bool Esp_axay_0x242_242::has_esp_algt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_axay_0x242_242::set_has_esp_algt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_axay_0x242_242::clear_has_esp_algt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_axay_0x242_242::clear_esp_algt() {
  esp_algt_ = 0;
  clear_has_esp_algt();
}
inline double Esp_axay_0x242_242::esp_algt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_algt)
  return esp_algt_;
}
inline void Esp_axay_0x242_242::set_esp_algt(double value) {
  set_has_esp_algt();
  esp_algt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_algt)
}

// -------------------------------------------------------------------

// Gw_swm_mrr_0x31b_31b

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_acctaugapsetplus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_acctaugapsetplus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_acctaugapsetplus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_acctaugapsetplus() {
  swm_acctaugapsetplus_ = 0;
  clear_has_swm_acctaugapsetplus();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b::swm_acctaugapsetplus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetplus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType >(swm_acctaugapsetplus_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_acctaugapsetplus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_IsValid(value));
  set_has_swm_acctaugapsetplus();
  swm_acctaugapsetplus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetplus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accvsetminus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accvsetminus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accvsetminus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accvsetminus() {
  swm_accvsetminus_ = 0;
  clear_has_swm_accvsetminus();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b::swm_accvsetminus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetminus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType >(swm_accvsetminus_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accvsetminus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_IsValid(value));
  set_has_swm_accvsetminus();
  swm_accvsetminus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetminus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_shiftpadrequp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_shiftpadrequp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_shiftpadrequp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_shiftpadrequp() {
  swm_shiftpadrequp_ = 0;
  clear_has_swm_shiftpadrequp();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b::swm_shiftpadrequp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadrequp)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType >(swm_shiftpadrequp_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_shiftpadrequp(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_IsValid(value));
  set_has_swm_shiftpadrequp();
  swm_shiftpadrequp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadrequp)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_acclimphomests() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_acclimphomests() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_acclimphomests() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_acclimphomests() {
  swm_acclimphomests_ = 0;
  clear_has_swm_acclimphomests();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b::swm_acclimphomests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acclimphomests)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType >(swm_acclimphomests_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_acclimphomests(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_IsValid(value));
  set_has_swm_acclimphomests();
  swm_acclimphomests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acclimphomests)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_laneassistswitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_laneassistswitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_laneassistswitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_laneassistswitch() {
  swm_laneassistswitch_ = 0;
  clear_has_swm_laneassistswitch();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b::swm_laneassistswitch() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_laneassistswitch)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType >(swm_laneassistswitch_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_laneassistswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_IsValid(value));
  set_has_swm_laneassistswitch();
  swm_laneassistswitch_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_laneassistswitch)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_acctaugapsetminus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_acctaugapsetminus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_acctaugapsetminus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_acctaugapsetminus() {
  swm_acctaugapsetminus_ = 0;
  clear_has_swm_acctaugapsetminus();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b::swm_acctaugapsetminus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetminus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType >(swm_acctaugapsetminus_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_acctaugapsetminus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_IsValid(value));
  set_has_swm_acctaugapsetminus();
  swm_acctaugapsetminus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetminus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accvsetplus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accvsetplus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accvsetplus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accvsetplus() {
  swm_accvsetplus_ = 0;
  clear_has_swm_accvsetplus();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b::swm_accvsetplus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetplus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType >(swm_accvsetplus_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accvsetplus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_IsValid(value));
  set_has_swm_accvsetplus();
  swm_accvsetplus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetplus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_shiftpadflt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_shiftpadflt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_shiftpadflt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_shiftpadflt() {
  swm_shiftpadflt_ = 0;
  clear_has_swm_shiftpadflt();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b::swm_shiftpadflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadflt)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType >(swm_shiftpadflt_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_shiftpadflt(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_IsValid(value));
  set_has_swm_shiftpadflt();
  swm_shiftpadflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadflt)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accdeactivate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accdeactivate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accdeactivate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accdeactivate() {
  swm_accdeactivate_ = 0;
  clear_has_swm_accdeactivate();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b::swm_accdeactivate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accdeactivate)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType >(swm_accdeactivate_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accdeactivate(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_IsValid(value));
  set_has_swm_accdeactivate();
  swm_accdeactivate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accdeactivate)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accresume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accresume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accresume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accresume() {
  swm_accresume_ = 0;
  clear_has_swm_accresume();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b::swm_accresume() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType >(swm_accresume_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accresume(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType_IsValid(value));
  set_has_swm_accresume();
  swm_accresume_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accset() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accset() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accset() {
  swm_accset_ = 0;
  clear_has_swm_accset();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b::swm_accset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accset)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType >(swm_accset_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accset(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType_IsValid(value));
  set_has_swm_accset();
  swm_accset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accset)
}

// optional int32 rolling_counter_0x31b = 12;
inline bool Gw_swm_mrr_0x31b_31b::has_rolling_counter_0x31b() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_rolling_counter_0x31b() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_rolling_counter_0x31b() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_rolling_counter_0x31b() {
  rolling_counter_0x31b_ = 0;
  clear_has_rolling_counter_0x31b();
}
inline ::google::protobuf::int32 Gw_swm_mrr_0x31b_31b::rolling_counter_0x31b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.rolling_counter_0x31b)
  return rolling_counter_0x31b_;
}
inline void Gw_swm_mrr_0x31b_31b::set_rolling_counter_0x31b(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x31b();
  rolling_counter_0x31b_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.rolling_counter_0x31b)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accenableswitch() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accenableswitch() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accenableswitch() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accenableswitch() {
  swm_accenableswitch_ = 0;
  clear_has_swm_accenableswitch();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b::swm_accenableswitch() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accenableswitch)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType >(swm_accenableswitch_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accenableswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_IsValid(value));
  set_has_swm_accenableswitch();
  swm_accenableswitch_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accenableswitch)
}

// optional int32 checksum_0x31b = 14;
inline bool Gw_swm_mrr_0x31b_31b::has_checksum_0x31b() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_checksum_0x31b() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_checksum_0x31b() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_checksum_0x31b() {
  checksum_0x31b_ = 0;
  clear_has_checksum_0x31b();
}
inline ::google::protobuf::int32 Gw_swm_mrr_0x31b_31b::checksum_0x31b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.checksum_0x31b)
  return checksum_0x31b_;
}
inline void Gw_swm_mrr_0x31b_31b::set_checksum_0x31b(::google::protobuf::int32 value) {
  set_has_checksum_0x31b();
  checksum_0x31b_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.checksum_0x31b)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_accresume_qt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_accresume_qt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_accresume_qt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_accresume_qt() {
  swm_accresume_qt_ = 0;
  clear_has_swm_accresume_qt();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b::swm_accresume_qt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume_qt)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType >(swm_accresume_qt_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_accresume_qt(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_IsValid(value));
  set_has_swm_accresume_qt();
  swm_accresume_qt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume_qt)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_tjaswitch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_tjaswitch() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_tjaswitch() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_tjaswitch() {
  swm_tjaswitch_ = 0;
  clear_has_swm_tjaswitch();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b::swm_tjaswitch() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_tjaswitch)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType >(swm_tjaswitch_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_tjaswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_IsValid(value));
  set_has_swm_tjaswitch();
  swm_tjaswitch_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_tjaswitch)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
inline bool Gw_swm_mrr_0x31b_31b::has_swm_shiftpadreqdown() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_swm_mrr_0x31b_31b::set_has_swm_shiftpadreqdown() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_has_swm_shiftpadreqdown() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_swm_mrr_0x31b_31b::clear_swm_shiftpadreqdown() {
  swm_shiftpadreqdown_ = 0;
  clear_has_swm_shiftpadreqdown();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b::swm_shiftpadreqdown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadreqdown)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType >(swm_shiftpadreqdown_);
}
inline void Gw_swm_mrr_0x31b_31b::set_swm_shiftpadreqdown(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_IsValid(value));
  set_has_swm_shiftpadreqdown();
  swm_shiftpadreqdown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadreqdown)
}

// -------------------------------------------------------------------

// Gw_swm_body_0x31a_31a

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
inline bool Gw_swm_body_0x31a_31a::has_swm_highbeam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_highbeam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_highbeam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_highbeam() {
  swm_highbeam_ = 0;
  clear_has_swm_highbeam();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::swm_highbeam() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_highbeam)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType >(swm_highbeam_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_highbeam(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType_IsValid(value));
  set_has_swm_highbeam();
  swm_highbeam_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_highbeam)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
inline bool Gw_swm_body_0x31a_31a::has_swm_frontwipingmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_frontwipingmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_frontwipingmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_frontwipingmode() {
  swm_frontwipingmode_ = 0;
  clear_has_swm_frontwipingmode();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::swm_frontwipingmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontwipingmode)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType >(swm_frontwipingmode_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_frontwipingmode(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_IsValid(value));
  set_has_swm_frontwipingmode();
  swm_frontwipingmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontwipingmode)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
inline bool Gw_swm_body_0x31a_31a::has_swm_wipinginterval_sensitvity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_wipinginterval_sensitvity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_wipinginterval_sensitvity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_wipinginterval_sensitvity() {
  swm_wipinginterval_sensitvity_ = 0;
  clear_has_swm_wipinginterval_sensitvity();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::swm_wipinginterval_sensitvity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wipinginterval_sensitvity)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType >(swm_wipinginterval_sensitvity_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_wipinginterval_sensitvity(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_IsValid(value));
  set_has_swm_wipinginterval_sensitvity();
  swm_wipinginterval_sensitvity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wipinginterval_sensitvity)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
inline bool Gw_swm_body_0x31a_31a::has_swm_rearfoglight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_rearfoglight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_rearfoglight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_rearfoglight() {
  swm_rearfoglight_ = 0;
  clear_has_swm_rearfoglight();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::swm_rearfoglight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearfoglight)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType >(swm_rearfoglight_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_rearfoglight(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType_IsValid(value));
  set_has_swm_rearfoglight();
  swm_rearfoglight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearfoglight)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
inline bool Gw_swm_body_0x31a_31a::has_swm_frontfoglight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_frontfoglight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_frontfoglight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_frontfoglight() {
  swm_frontfoglight_ = 0;
  clear_has_swm_frontfoglight();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::swm_frontfoglight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontfoglight)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType >(swm_frontfoglight_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_frontfoglight(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType_IsValid(value));
  set_has_swm_frontfoglight();
  swm_frontfoglight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontfoglight)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
inline bool Gw_swm_body_0x31a_31a::has_swm_washerlimphomests() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_washerlimphomests() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_washerlimphomests() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_washerlimphomests() {
  swm_washerlimphomests_ = 0;
  clear_has_swm_washerlimphomests();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a::swm_washerlimphomests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_washerlimphomests)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType >(swm_washerlimphomests_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_washerlimphomests(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_IsValid(value));
  set_has_swm_washerlimphomests();
  swm_washerlimphomests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_washerlimphomests)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
inline bool Gw_swm_body_0x31a_31a::has_swm_rearwipingmode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_rearwipingmode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_rearwipingmode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_rearwipingmode() {
  swm_rearwipingmode_ = 0;
  clear_has_swm_rearwipingmode();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::swm_rearwipingmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearwipingmode)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType >(swm_rearwipingmode_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_rearwipingmode(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_IsValid(value));
  set_has_swm_rearwipingmode();
  swm_rearwipingmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearwipingmode)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
inline bool Gw_swm_body_0x31a_31a::has_swm_turnindicationact() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_turnindicationact() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_turnindicationact() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_turnindicationact() {
  swm_turnindicationact_ = 0;
  clear_has_swm_turnindicationact();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::swm_turnindicationact() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_turnindicationact)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType >(swm_turnindicationact_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_turnindicationact(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType_IsValid(value));
  set_has_swm_turnindicationact();
  swm_turnindicationact_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_turnindicationact)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
inline bool Gw_swm_body_0x31a_31a::has_swm_vol_plus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_vol_plus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_vol_plus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_vol_plus() {
  swm_vol_plus_ = 0;
  clear_has_swm_vol_plus();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::swm_vol_plus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_plus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType >(swm_vol_plus_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_vol_plus(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType_IsValid(value));
  set_has_swm_vol_plus();
  swm_vol_plus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_plus)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
inline bool Gw_swm_body_0x31a_31a::has_swm_vol_minus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_vol_minus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_vol_minus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_vol_minus() {
  swm_vol_minus_ = 0;
  clear_has_swm_vol_minus();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::swm_vol_minus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_minus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType >(swm_vol_minus_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_vol_minus(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType_IsValid(value));
  set_has_swm_vol_minus();
  swm_vol_minus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_minus)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
inline bool Gw_swm_body_0x31a_31a::has_swm_wechat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_wechat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_wechat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_wechat() {
  swm_wechat_ = 0;
  clear_has_swm_wechat();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a::swm_wechat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wechat)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType >(swm_wechat_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_wechat(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType_IsValid(value));
  set_has_swm_wechat();
  swm_wechat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wechat)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
inline bool Gw_swm_body_0x31a_31a::has_swm_lamplimphomests() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_lamplimphomests() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_lamplimphomests() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_lamplimphomests() {
  swm_lamplimphomests_ = 0;
  clear_has_swm_lamplimphomests();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a::swm_lamplimphomests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_lamplimphomests)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType >(swm_lamplimphomests_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_lamplimphomests(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_IsValid(value));
  set_has_swm_lamplimphomests();
  swm_lamplimphomests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_lamplimphomests)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
inline bool Gw_swm_body_0x31a_31a::has_swm_headlamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_headlamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_headlamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_headlamp() {
  swm_headlamp_ = 0;
  clear_has_swm_headlamp();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::swm_headlamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_headlamp)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType >(swm_headlamp_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_headlamp(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType_IsValid(value));
  set_has_swm_headlamp();
  swm_headlamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_headlamp)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
inline bool Gw_swm_body_0x31a_31a::has_swm_next_song() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_next_song() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_next_song() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_next_song() {
  swm_next_song_ = 0;
  clear_has_swm_next_song();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::swm_next_song() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_next_song)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType >(swm_next_song_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_next_song(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType_IsValid(value));
  set_has_swm_next_song();
  swm_next_song_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_next_song)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
inline bool Gw_swm_body_0x31a_31a::has_swm_previous_song() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_previous_song() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_previous_song() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_previous_song() {
  swm_previous_song_ = 0;
  clear_has_swm_previous_song();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::swm_previous_song() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_previous_song)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType >(swm_previous_song_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_previous_song(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType_IsValid(value));
  set_has_swm_previous_song();
  swm_previous_song_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_previous_song)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
inline bool Gw_swm_body_0x31a_31a::has_swm_phone() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_phone() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_phone() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_phone() {
  swm_phone_ = 0;
  clear_has_swm_phone();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::swm_phone() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_phone)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType >(swm_phone_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_phone(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType_IsValid(value));
  set_has_swm_phone();
  swm_phone_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_phone)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
inline bool Gw_swm_body_0x31a_31a::has_swm_mute() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_mute() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_mute() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_mute() {
  swm_mute_ = 0;
  clear_has_swm_mute();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::swm_mute() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_mute)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType >(swm_mute_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_mute(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType_IsValid(value));
  set_has_swm_mute();
  swm_mute_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_mute)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
inline bool Gw_swm_body_0x31a_31a::has_swm_menu_right() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_menu_right() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_menu_right() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_menu_right() {
  swm_menu_right_ = 0;
  clear_has_swm_menu_right();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::swm_menu_right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_right)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType >(swm_menu_right_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_menu_right(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType_IsValid(value));
  set_has_swm_menu_right();
  swm_menu_right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_right)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
inline bool Gw_swm_body_0x31a_31a::has_swm_menu_left() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_menu_left() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_menu_left() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_menu_left() {
  swm_menu_left_ = 0;
  clear_has_swm_menu_left();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::swm_menu_left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_left)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType >(swm_menu_left_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_menu_left(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType_IsValid(value));
  set_has_swm_menu_left();
  swm_menu_left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_left)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
inline bool Gw_swm_body_0x31a_31a::has_swm_menu_down() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_menu_down() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_menu_down() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_menu_down() {
  swm_menu_down_ = 0;
  clear_has_swm_menu_down();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::swm_menu_down() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_down)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType >(swm_menu_down_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_menu_down(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType_IsValid(value));
  set_has_swm_menu_down();
  swm_menu_down_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_down)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
inline bool Gw_swm_body_0x31a_31a::has_swm_menu_up() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_menu_up() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_menu_up() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_menu_up() {
  swm_menu_up_ = 0;
  clear_has_swm_menu_up();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::swm_menu_up() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_up)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType >(swm_menu_up_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_menu_up(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType_IsValid(value));
  set_has_swm_menu_up();
  swm_menu_up_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_up)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
inline bool Gw_swm_body_0x31a_31a::has_swm_fwashersts() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_fwashersts() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_fwashersts() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_fwashersts() {
  swm_fwashersts_ = 0;
  clear_has_swm_fwashersts();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::swm_fwashersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_fwashersts)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType >(swm_fwashersts_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_fwashersts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType_IsValid(value));
  set_has_swm_fwashersts();
  swm_fwashersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_fwashersts)
}

// optional int32 rolling_counter_0x31a = 23;
inline bool Gw_swm_body_0x31a_31a::has_rolling_counter_0x31a() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_rolling_counter_0x31a() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_rolling_counter_0x31a() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Gw_swm_body_0x31a_31a::clear_rolling_counter_0x31a() {
  rolling_counter_0x31a_ = 0;
  clear_has_rolling_counter_0x31a();
}
inline ::google::protobuf::int32 Gw_swm_body_0x31a_31a::rolling_counter_0x31a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.rolling_counter_0x31a)
  return rolling_counter_0x31a_;
}
inline void Gw_swm_body_0x31a_31a::set_rolling_counter_0x31a(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x31a();
  rolling_counter_0x31a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.rolling_counter_0x31a)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
inline bool Gw_swm_body_0x31a_31a::has_swm_menu_return() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_menu_return() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_menu_return() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_menu_return() {
  swm_menu_return_ = 0;
  clear_has_swm_menu_return();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::swm_menu_return() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_return)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType >(swm_menu_return_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_menu_return(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType_IsValid(value));
  set_has_swm_menu_return();
  swm_menu_return_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_return)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
inline bool Gw_swm_body_0x31a_31a::has_swm_menu_confirm() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_menu_confirm() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_menu_confirm() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_menu_confirm() {
  swm_menu_confirm_ = 0;
  clear_has_swm_menu_confirm();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::swm_menu_confirm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_confirm)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType >(swm_menu_confirm_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_menu_confirm(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType_IsValid(value));
  set_has_swm_menu_confirm();
  swm_menu_confirm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_confirm)
}

// optional int32 checksum_0x31a = 26;
inline bool Gw_swm_body_0x31a_31a::has_checksum_0x31a() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_checksum_0x31a() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_checksum_0x31a() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_checksum_0x31a() {
  checksum_0x31a_ = 0;
  clear_has_checksum_0x31a();
}
inline ::google::protobuf::int32 Gw_swm_body_0x31a_31a::checksum_0x31a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.checksum_0x31a)
  return checksum_0x31a_;
}
inline void Gw_swm_body_0x31a_31a::set_checksum_0x31a(::google::protobuf::int32 value) {
  set_has_checksum_0x31a();
  checksum_0x31a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.checksum_0x31a)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
inline bool Gw_swm_body_0x31a_31a::has_swm_rwashersts() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_rwashersts() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_rwashersts() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_rwashersts() {
  swm_rwashersts_ = 0;
  clear_has_swm_rwashersts();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::swm_rwashersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rwashersts)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType >(swm_rwashersts_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_rwashersts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType_IsValid(value));
  set_has_swm_rwashersts();
  swm_rwashersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rwashersts)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
inline bool Gw_swm_body_0x31a_31a::has_swm_flashlightsts() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Gw_swm_body_0x31a_31a::set_has_swm_flashlightsts() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_has_swm_flashlightsts() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Gw_swm_body_0x31a_31a::clear_swm_flashlightsts() {
  swm_flashlightsts_ = 0;
  clear_has_swm_flashlightsts();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::swm_flashlightsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_flashlightsts)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType >(swm_flashlightsts_);
}
inline void Gw_swm_body_0x31a_31a::set_swm_flashlightsts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType_IsValid(value));
  set_has_swm_flashlightsts();
  swm_flashlightsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_flashlightsts)
}

// -------------------------------------------------------------------

// Gw_ems_tq_0x101_101

// optional double ems_indicatedrealengtorq = 1;
inline bool Gw_ems_tq_0x101_101::has_ems_indicatedrealengtorq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_ems_indicatedrealengtorq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ems_tq_0x101_101::clear_has_ems_indicatedrealengtorq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ems_tq_0x101_101::clear_ems_indicatedrealengtorq() {
  ems_indicatedrealengtorq_ = 0;
  clear_has_ems_indicatedrealengtorq();
}
inline double Gw_ems_tq_0x101_101::ems_indicatedrealengtorq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_indicatedrealengtorq)
  return ems_indicatedrealengtorq_;
}
inline void Gw_ems_tq_0x101_101::set_ems_indicatedrealengtorq(double value) {
  set_has_ems_indicatedrealengtorq();
  ems_indicatedrealengtorq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_indicatedrealengtorq)
}

// optional double ems_engspeed = 2;
inline bool Gw_ems_tq_0x101_101::has_ems_engspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_ems_engspeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ems_tq_0x101_101::clear_has_ems_engspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ems_tq_0x101_101::clear_ems_engspeed() {
  ems_engspeed_ = 0;
  clear_has_ems_engspeed();
}
inline double Gw_ems_tq_0x101_101::ems_engspeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeed)
  return ems_engspeed_;
}
inline void Gw_ems_tq_0x101_101::set_ems_engspeed(double value) {
  set_has_ems_engspeed();
  ems_engspeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeed)
}

// optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
inline bool Gw_ems_tq_0x101_101::has_ems_engspeederror() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_ems_engspeederror() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ems_tq_0x101_101::clear_has_ems_engspeederror() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ems_tq_0x101_101::clear_ems_engspeederror() {
  ems_engspeederror_ = 0;
  clear_has_ems_engspeederror();
}
inline ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101::ems_engspeederror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeederror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType >(ems_engspeederror_);
}
inline void Gw_ems_tq_0x101_101::set_ems_engspeederror(::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType_IsValid(value));
  set_has_ems_engspeederror();
  ems_engspeederror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeederror)
}

// optional double ems_rngmodtorqcrsleadmin = 4;
inline bool Gw_ems_tq_0x101_101::has_ems_rngmodtorqcrsleadmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_ems_rngmodtorqcrsleadmin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ems_tq_0x101_101::clear_has_ems_rngmodtorqcrsleadmin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ems_tq_0x101_101::clear_ems_rngmodtorqcrsleadmin() {
  ems_rngmodtorqcrsleadmin_ = 0;
  clear_has_ems_rngmodtorqcrsleadmin();
}
inline double Gw_ems_tq_0x101_101::ems_rngmodtorqcrsleadmin() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmin)
  return ems_rngmodtorqcrsleadmin_;
}
inline void Gw_ems_tq_0x101_101::set_ems_rngmodtorqcrsleadmin(double value) {
  set_has_ems_rngmodtorqcrsleadmin();
  ems_rngmodtorqcrsleadmin_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmin)
}

// optional int32 dcm_ems_rollingcounter_0x101 = 5;
inline bool Gw_ems_tq_0x101_101::has_dcm_ems_rollingcounter_0x101() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_dcm_ems_rollingcounter_0x101() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ems_tq_0x101_101::clear_has_dcm_ems_rollingcounter_0x101() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ems_tq_0x101_101::clear_dcm_ems_rollingcounter_0x101() {
  dcm_ems_rollingcounter_0x101_ = 0;
  clear_has_dcm_ems_rollingcounter_0x101();
}
inline ::google::protobuf::int32 Gw_ems_tq_0x101_101::dcm_ems_rollingcounter_0x101() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_rollingcounter_0x101)
  return dcm_ems_rollingcounter_0x101_;
}
inline void Gw_ems_tq_0x101_101::set_dcm_ems_rollingcounter_0x101(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x101();
  dcm_ems_rollingcounter_0x101_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_rollingcounter_0x101)
}

// optional int32 dcm_ems_checksum_0x101 = 6;
inline bool Gw_ems_tq_0x101_101::has_dcm_ems_checksum_0x101() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_dcm_ems_checksum_0x101() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_ems_tq_0x101_101::clear_has_dcm_ems_checksum_0x101() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_ems_tq_0x101_101::clear_dcm_ems_checksum_0x101() {
  dcm_ems_checksum_0x101_ = 0;
  clear_has_dcm_ems_checksum_0x101();
}
inline ::google::protobuf::int32 Gw_ems_tq_0x101_101::dcm_ems_checksum_0x101() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_checksum_0x101)
  return dcm_ems_checksum_0x101_;
}
inline void Gw_ems_tq_0x101_101::set_dcm_ems_checksum_0x101(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x101();
  dcm_ems_checksum_0x101_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_checksum_0x101)
}

// optional double ems_rngmodtorqcrsleadmax = 7;
inline bool Gw_ems_tq_0x101_101::has_ems_rngmodtorqcrsleadmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ems_tq_0x101_101::set_has_ems_rngmodtorqcrsleadmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ems_tq_0x101_101::clear_has_ems_rngmodtorqcrsleadmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ems_tq_0x101_101::clear_ems_rngmodtorqcrsleadmax() {
  ems_rngmodtorqcrsleadmax_ = 0;
  clear_has_ems_rngmodtorqcrsleadmax();
}
inline double Gw_ems_tq_0x101_101::ems_rngmodtorqcrsleadmax() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmax)
  return ems_rngmodtorqcrsleadmax_;
}
inline void Gw_ems_tq_0x101_101::set_ems_rngmodtorqcrsleadmax(double value) {
  set_has_ems_rngmodtorqcrsleadmax();
  ems_rngmodtorqcrsleadmax_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmax)
}

// -------------------------------------------------------------------

// Esp_vlc_0x223_223

// optional double esp_vlc_internaltargetacce = 1;
inline bool Esp_vlc_0x223_223::has_esp_vlc_internaltargetacce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlc_internaltargetacce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlc_internaltargetacce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlc_internaltargetacce() {
  esp_vlc_internaltargetacce_ = 0;
  clear_has_esp_vlc_internaltargetacce();
}
inline double Esp_vlc_0x223_223::esp_vlc_internaltargetacce() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_internaltargetacce)
  return esp_vlc_internaltargetacce_;
}
inline void Esp_vlc_0x223_223::set_esp_vlc_internaltargetacce(double value) {
  set_has_esp_vlc_internaltargetacce();
  esp_vlc_internaltargetacce_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_internaltargetacce)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
inline bool Esp_vlc_0x223_223::has_esp_apa_gearboxenable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_apa_gearboxenable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_apa_gearboxenable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_vlc_0x223_223::clear_esp_apa_gearboxenable() {
  esp_apa_gearboxenable_ = 0;
  clear_has_esp_apa_gearboxenable();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223::esp_apa_gearboxenable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_apa_gearboxenable)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType >(esp_apa_gearboxenable_);
}
inline void Esp_vlc_0x223_223::set_esp_apa_gearboxenable(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType_IsValid(value));
  set_has_esp_apa_gearboxenable();
  esp_apa_gearboxenable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_apa_gearboxenable)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
inline bool Esp_vlc_0x223_223::has_esp_target_gear_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_target_gear_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_target_gear_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_vlc_0x223_223::clear_esp_target_gear_request() {
  esp_target_gear_request_ = 0;
  clear_has_esp_target_gear_request();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::esp_target_gear_request() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_target_gear_request)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType >(esp_target_gear_request_);
}
inline void Esp_vlc_0x223_223::set_esp_target_gear_request(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType_IsValid(value));
  set_has_esp_target_gear_request();
  esp_target_gear_request_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_target_gear_request)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
inline bool Esp_vlc_0x223_223::has_esp_vlc_apactive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlc_apactive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlc_apactive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlc_apactive() {
  esp_vlc_apactive_ = 0;
  clear_has_esp_vlc_apactive();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223::esp_vlc_apactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_apactive)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType >(esp_vlc_apactive_);
}
inline void Esp_vlc_0x223_223::set_esp_vlc_apactive(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType_IsValid(value));
  set_has_esp_vlc_apactive();
  esp_vlc_apactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_apactive)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
inline bool Esp_vlc_0x223_223::has_esp_pam_lc_failurests() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_pam_lc_failurests() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_pam_lc_failurests() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_vlc_0x223_223::clear_esp_pam_lc_failurests() {
  esp_pam_lc_failurests_ = 0;
  clear_has_esp_pam_lc_failurests();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::esp_pam_lc_failurests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_failurests)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType >(esp_pam_lc_failurests_);
}
inline void Esp_vlc_0x223_223::set_esp_pam_lc_failurests(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_IsValid(value));
  set_has_esp_pam_lc_failurests();
  esp_pam_lc_failurests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_failurests)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
inline bool Esp_vlc_0x223_223::has_esp_pam_lc_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_pam_lc_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_pam_lc_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_vlc_0x223_223::clear_esp_pam_lc_status() {
  esp_pam_lc_status_ = 0;
  clear_has_esp_pam_lc_status();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::esp_pam_lc_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_status)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType >(esp_pam_lc_status_);
}
inline void Esp_vlc_0x223_223::set_esp_pam_lc_status(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType_IsValid(value));
  set_has_esp_pam_lc_status();
  esp_pam_lc_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_status)
}

// optional int32 rolling_counter_0x223 = 7;
inline bool Esp_vlc_0x223_223::has_rolling_counter_0x223() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_rolling_counter_0x223() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_vlc_0x223_223::clear_has_rolling_counter_0x223() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_vlc_0x223_223::clear_rolling_counter_0x223() {
  rolling_counter_0x223_ = 0;
  clear_has_rolling_counter_0x223();
}
inline ::google::protobuf::int32 Esp_vlc_0x223_223::rolling_counter_0x223() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.rolling_counter_0x223)
  return rolling_counter_0x223_;
}
inline void Esp_vlc_0x223_223::set_rolling_counter_0x223(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x223();
  rolling_counter_0x223_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.rolling_counter_0x223)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
inline bool Esp_vlc_0x223_223::has_esp_vlc_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlc_active() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlc_active() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlc_active() {
  esp_vlc_active_ = 0;
  clear_has_esp_vlc_active();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223::esp_vlc_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_active)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType >(esp_vlc_active_);
}
inline void Esp_vlc_0x223_223::set_esp_vlc_active(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType_IsValid(value));
  set_has_esp_vlc_active();
  esp_vlc_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_active)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
inline bool Esp_vlc_0x223_223::has_esp_vlc_available() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlc_available() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlc_available() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlc_available() {
  esp_vlc_available_ = 0;
  clear_has_esp_vlc_available();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223::esp_vlc_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_available)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType >(esp_vlc_available_);
}
inline void Esp_vlc_0x223_223::set_esp_vlc_available(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType_IsValid(value));
  set_has_esp_vlc_available();
  esp_vlc_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_available)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
inline bool Esp_vlc_0x223_223::has_esp_vlcapa_available() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlcapa_available() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlcapa_available() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlcapa_available() {
  esp_vlcapa_available_ = 0;
  clear_has_esp_vlcapa_available();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223::esp_vlcapa_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcapa_available)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType >(esp_vlcapa_available_);
}
inline void Esp_vlc_0x223_223::set_esp_vlcapa_available(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType_IsValid(value));
  set_has_esp_vlcapa_available();
  esp_vlcapa_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcapa_available)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
inline bool Esp_vlc_0x223_223::has_esp_vlcengtorqreqact() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlcengtorqreqact() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlcengtorqreqact() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlcengtorqreqact() {
  esp_vlcengtorqreqact_ = 0;
  clear_has_esp_vlcengtorqreqact();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223::esp_vlcengtorqreqact() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreqact)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType >(esp_vlcengtorqreqact_);
}
inline void Esp_vlc_0x223_223::set_esp_vlcengtorqreqact(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_IsValid(value));
  set_has_esp_vlcengtorqreqact();
  esp_vlcengtorqreqact_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreqact)
}

// optional int32 checksum_0x223 = 12;
inline bool Esp_vlc_0x223_223::has_checksum_0x223() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_checksum_0x223() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Esp_vlc_0x223_223::clear_has_checksum_0x223() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Esp_vlc_0x223_223::clear_checksum_0x223() {
  checksum_0x223_ = 0;
  clear_has_checksum_0x223();
}
inline ::google::protobuf::int32 Esp_vlc_0x223_223::checksum_0x223() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.checksum_0x223)
  return checksum_0x223_;
}
inline void Esp_vlc_0x223_223::set_checksum_0x223(::google::protobuf::int32 value) {
  set_has_checksum_0x223();
  checksum_0x223_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.checksum_0x223)
}

// optional int32 esp_vlcengtorqreq = 13;
inline bool Esp_vlc_0x223_223::has_esp_vlcengtorqreq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Esp_vlc_0x223_223::set_has_esp_vlcengtorqreq() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Esp_vlc_0x223_223::clear_has_esp_vlcengtorqreq() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Esp_vlc_0x223_223::clear_esp_vlcengtorqreq() {
  esp_vlcengtorqreq_ = 0;
  clear_has_esp_vlcengtorqreq();
}
inline ::google::protobuf::int32 Esp_vlc_0x223_223::esp_vlcengtorqreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreq)
  return esp_vlcengtorqreq_;
}
inline void Esp_vlc_0x223_223::set_esp_vlcengtorqreq(::google::protobuf::int32 value) {
  set_has_esp_vlcengtorqreq();
  esp_vlcengtorqreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreq)
}

// -------------------------------------------------------------------

// Gw_ems_whltq_0x107_107

// optional int32 minindicatedtorqwhl = 1;
inline bool Gw_ems_whltq_0x107_107::has_minindicatedtorqwhl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_minindicatedtorqwhl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_minindicatedtorqwhl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ems_whltq_0x107_107::clear_minindicatedtorqwhl() {
  minindicatedtorqwhl_ = 0;
  clear_has_minindicatedtorqwhl();
}
inline ::google::protobuf::int32 Gw_ems_whltq_0x107_107::minindicatedtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.minindicatedtorqwhl)
  return minindicatedtorqwhl_;
}
inline void Gw_ems_whltq_0x107_107::set_minindicatedtorqwhl(::google::protobuf::int32 value) {
  set_has_minindicatedtorqwhl();
  minindicatedtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.minindicatedtorqwhl)
}

// optional double ems_accrawpedalratio = 2;
inline bool Gw_ems_whltq_0x107_107::has_ems_accrawpedalratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_ems_accrawpedalratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_ems_accrawpedalratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ems_whltq_0x107_107::clear_ems_accrawpedalratio() {
  ems_accrawpedalratio_ = 0;
  clear_has_ems_accrawpedalratio();
}
inline double Gw_ems_whltq_0x107_107::ems_accrawpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accrawpedalratio)
  return ems_accrawpedalratio_;
}
inline void Gw_ems_whltq_0x107_107::set_ems_accrawpedalratio(double value) {
  set_has_ems_accrawpedalratio();
  ems_accrawpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accrawpedalratio)
}

// optional double ems_accpedalratio = 3;
inline bool Gw_ems_whltq_0x107_107::has_ems_accpedalratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_ems_accpedalratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_ems_accpedalratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ems_whltq_0x107_107::clear_ems_accpedalratio() {
  ems_accpedalratio_ = 0;
  clear_has_ems_accpedalratio();
}
inline double Gw_ems_whltq_0x107_107::ems_accpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratio)
  return ems_accpedalratio_;
}
inline void Gw_ems_whltq_0x107_107::set_ems_accpedalratio(double value) {
  set_has_ems_accpedalratio();
  ems_accpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratio)
}

// optional int32 dcm_ems_rollingcounter_0x107 = 4;
inline bool Gw_ems_whltq_0x107_107::has_dcm_ems_rollingcounter_0x107() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_dcm_ems_rollingcounter_0x107() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_dcm_ems_rollingcounter_0x107() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ems_whltq_0x107_107::clear_dcm_ems_rollingcounter_0x107() {
  dcm_ems_rollingcounter_0x107_ = 0;
  clear_has_dcm_ems_rollingcounter_0x107();
}
inline ::google::protobuf::int32 Gw_ems_whltq_0x107_107::dcm_ems_rollingcounter_0x107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_rollingcounter_0x107)
  return dcm_ems_rollingcounter_0x107_;
}
inline void Gw_ems_whltq_0x107_107::set_dcm_ems_rollingcounter_0x107(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x107();
  dcm_ems_rollingcounter_0x107_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_rollingcounter_0x107)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
inline bool Gw_ems_whltq_0x107_107::has_ems_kickdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_ems_kickdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_ems_kickdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ems_whltq_0x107_107::clear_ems_kickdown() {
  ems_kickdown_ = 0;
  clear_has_ems_kickdown();
}
inline ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107::ems_kickdown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_kickdown)
  return static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType >(ems_kickdown_);
}
inline void Gw_ems_whltq_0x107_107::set_ems_kickdown(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType value) {
  assert(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType_IsValid(value));
  set_has_ems_kickdown();
  ems_kickdown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_kickdown)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
inline bool Gw_ems_whltq_0x107_107::has_ems_accpedalratioerror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_ems_accpedalratioerror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_ems_accpedalratioerror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ems_whltq_0x107_107::clear_ems_accpedalratioerror() {
  ems_accpedalratioerror_ = 0;
  clear_has_ems_accpedalratioerror();
}
inline ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107::ems_accpedalratioerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratioerror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType >(ems_accpedalratioerror_);
}
inline void Gw_ems_whltq_0x107_107::set_ems_accpedalratioerror(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_IsValid(value));
  set_has_ems_accpedalratioerror();
  ems_accpedalratioerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratioerror)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
inline bool Gw_ems_whltq_0x107_107::has_ems_brkpedalstasus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_ems_brkpedalstasus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_ems_brkpedalstasus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_ems_whltq_0x107_107::clear_ems_brkpedalstasus() {
  ems_brkpedalstasus_ = 0;
  clear_has_ems_brkpedalstasus();
}
inline ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::ems_brkpedalstasus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_brkpedalstasus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType >(ems_brkpedalstasus_);
}
inline void Gw_ems_whltq_0x107_107::set_ems_brkpedalstasus(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType value) {
  assert(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_IsValid(value));
  set_has_ems_brkpedalstasus();
  ems_brkpedalstasus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_brkpedalstasus)
}

// optional int32 dcm_ems_checksum_0x107 = 8;
inline bool Gw_ems_whltq_0x107_107::has_dcm_ems_checksum_0x107() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_dcm_ems_checksum_0x107() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_dcm_ems_checksum_0x107() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_ems_whltq_0x107_107::clear_dcm_ems_checksum_0x107() {
  dcm_ems_checksum_0x107_ = 0;
  clear_has_dcm_ems_checksum_0x107();
}
inline ::google::protobuf::int32 Gw_ems_whltq_0x107_107::dcm_ems_checksum_0x107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_checksum_0x107)
  return dcm_ems_checksum_0x107_;
}
inline void Gw_ems_whltq_0x107_107::set_dcm_ems_checksum_0x107(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x107();
  dcm_ems_checksum_0x107_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_checksum_0x107)
}

// optional int32 maxindicatedtorqwhl = 9;
inline bool Gw_ems_whltq_0x107_107::has_maxindicatedtorqwhl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_ems_whltq_0x107_107::set_has_maxindicatedtorqwhl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_ems_whltq_0x107_107::clear_has_maxindicatedtorqwhl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_ems_whltq_0x107_107::clear_maxindicatedtorqwhl() {
  maxindicatedtorqwhl_ = 0;
  clear_has_maxindicatedtorqwhl();
}
inline ::google::protobuf::int32 Gw_ems_whltq_0x107_107::maxindicatedtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.maxindicatedtorqwhl)
  return maxindicatedtorqwhl_;
}
inline void Gw_ems_whltq_0x107_107::set_maxindicatedtorqwhl(::google::protobuf::int32 value) {
  set_has_maxindicatedtorqwhl();
  maxindicatedtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.maxindicatedtorqwhl)
}

// -------------------------------------------------------------------

// Abs_sts_0x221_221

// optional int32 abs_whlmilgfrntri = 1;
inline bool Abs_sts_0x221_221::has_abs_whlmilgfrntri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_whlmilgfrntri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Abs_sts_0x221_221::clear_abs_whlmilgfrntri() {
  abs_whlmilgfrntri_ = 0;
  clear_has_abs_whlmilgfrntri();
}
inline ::google::protobuf::int32 Abs_sts_0x221_221::abs_whlmilgfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntri)
  return abs_whlmilgfrntri_;
}
inline void Abs_sts_0x221_221::set_abs_whlmilgfrntri(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntri();
  abs_whlmilgfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntri)
}

// optional double abs_vehspdlgt = 2;
inline bool Abs_sts_0x221_221::has_abs_vehspdlgt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_vehspdlgt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Abs_sts_0x221_221::clear_has_abs_vehspdlgt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Abs_sts_0x221_221::clear_abs_vehspdlgt() {
  abs_vehspdlgt_ = 0;
  clear_has_abs_vehspdlgt();
}
inline double Abs_sts_0x221_221::abs_vehspdlgt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgt)
  return abs_vehspdlgt_;
}
inline void Abs_sts_0x221_221::set_abs_vehspdlgt(double value) {
  set_has_abs_vehspdlgt();
  abs_vehspdlgt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgt)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
inline bool Abs_sts_0x221_221::has_abs_vehspddirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_vehspddirection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Abs_sts_0x221_221::clear_has_abs_vehspddirection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Abs_sts_0x221_221::clear_abs_vehspddirection() {
  abs_vehspddirection_ = 0;
  clear_has_abs_vehspddirection();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221::abs_vehspddirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspddirection)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType >(abs_vehspddirection_);
}
inline void Abs_sts_0x221_221::set_abs_vehspddirection(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(value));
  set_has_abs_vehspddirection();
  abs_vehspddirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspddirection)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
inline bool Abs_sts_0x221_221::has_abs_ebdflgflt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_ebdflgflt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Abs_sts_0x221_221::clear_has_abs_ebdflgflt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Abs_sts_0x221_221::clear_abs_ebdflgflt() {
  abs_ebdflgflt_ = 0;
  clear_has_abs_ebdflgflt();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221::abs_ebdflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_ebdflgflt)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType >(abs_ebdflgflt_);
}
inline void Abs_sts_0x221_221::set_abs_ebdflgflt(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(value));
  set_has_abs_ebdflgflt();
  abs_ebdflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_ebdflgflt)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
inline bool Abs_sts_0x221_221::has_abs_absflgflt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_absflgflt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Abs_sts_0x221_221::clear_has_abs_absflgflt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Abs_sts_0x221_221::clear_abs_absflgflt() {
  abs_absflgflt_ = 0;
  clear_has_abs_absflgflt();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221::abs_absflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_absflgflt)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType >(abs_absflgflt_);
}
inline void Abs_sts_0x221_221::set_abs_absflgflt(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType_IsValid(value));
  set_has_abs_absflgflt();
  abs_absflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_absflgflt)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
inline bool Abs_sts_0x221_221::has_abs_absctrlactv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_absctrlactv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Abs_sts_0x221_221::clear_has_abs_absctrlactv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Abs_sts_0x221_221::clear_abs_absctrlactv() {
  abs_absctrlactv_ = 0;
  clear_has_abs_absctrlactv();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221::abs_absctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_absctrlactv)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType >(abs_absctrlactv_);
}
inline void Abs_sts_0x221_221::set_abs_absctrlactv(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType_IsValid(value));
  set_has_abs_absctrlactv();
  abs_absctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_absctrlactv)
}

// optional int32 rollingcounter_0x221 = 7;
inline bool Abs_sts_0x221_221::has_rollingcounter_0x221() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Abs_sts_0x221_221::set_has_rollingcounter_0x221() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Abs_sts_0x221_221::clear_has_rollingcounter_0x221() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Abs_sts_0x221_221::clear_rollingcounter_0x221() {
  rollingcounter_0x221_ = 0;
  clear_has_rollingcounter_0x221();
}
inline ::google::protobuf::int32 Abs_sts_0x221_221::rollingcounter_0x221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.rollingcounter_0x221)
  return rollingcounter_0x221_;
}
inline void Abs_sts_0x221_221::set_rollingcounter_0x221(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x221();
  rollingcounter_0x221_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.rollingcounter_0x221)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
inline bool Abs_sts_0x221_221::has_abs_whlmilgfrntlestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_whlmilgfrntlestatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntlestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Abs_sts_0x221_221::clear_abs_whlmilgfrntlestatus() {
  abs_whlmilgfrntlestatus_ = 0;
  clear_has_abs_whlmilgfrntlestatus();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221::abs_whlmilgfrntlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntlestatus)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType >(abs_whlmilgfrntlestatus_);
}
inline void Abs_sts_0x221_221::set_abs_whlmilgfrntlestatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(value));
  set_has_abs_whlmilgfrntlestatus();
  abs_whlmilgfrntlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntlestatus)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
inline bool Abs_sts_0x221_221::has_abs_whlmilgfrntristatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_whlmilgfrntristatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntristatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Abs_sts_0x221_221::clear_abs_whlmilgfrntristatus() {
  abs_whlmilgfrntristatus_ = 0;
  clear_has_abs_whlmilgfrntristatus();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221::abs_whlmilgfrntristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntristatus)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType >(abs_whlmilgfrntristatus_);
}
inline void Abs_sts_0x221_221::set_abs_whlmilgfrntristatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(value));
  set_has_abs_whlmilgfrntristatus();
  abs_whlmilgfrntristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntristatus)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
inline bool Abs_sts_0x221_221::has_abs_vehspdlgtstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_vehspdlgtstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Abs_sts_0x221_221::clear_has_abs_vehspdlgtstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Abs_sts_0x221_221::clear_abs_vehspdlgtstatus() {
  abs_vehspdlgtstatus_ = 0;
  clear_has_abs_vehspdlgtstatus();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::abs_vehspdlgtstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgtstatus)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType >(abs_vehspdlgtstatus_);
}
inline void Abs_sts_0x221_221::set_abs_vehspdlgtstatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(value));
  set_has_abs_vehspdlgtstatus();
  abs_vehspdlgtstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgtstatus)
}

// optional int32 checksum_0x221 = 11;
inline bool Abs_sts_0x221_221::has_checksum_0x221() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Abs_sts_0x221_221::set_has_checksum_0x221() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Abs_sts_0x221_221::clear_has_checksum_0x221() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Abs_sts_0x221_221::clear_checksum_0x221() {
  checksum_0x221_ = 0;
  clear_has_checksum_0x221();
}
inline ::google::protobuf::int32 Abs_sts_0x221_221::checksum_0x221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.checksum_0x221)
  return checksum_0x221_;
}
inline void Abs_sts_0x221_221::set_checksum_0x221(::google::protobuf::int32 value) {
  set_has_checksum_0x221();
  checksum_0x221_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.checksum_0x221)
}

// optional int32 abs_whlmilgfrntle = 12;
inline bool Abs_sts_0x221_221::has_abs_whlmilgfrntle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Abs_sts_0x221_221::set_has_abs_whlmilgfrntle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Abs_sts_0x221_221::clear_abs_whlmilgfrntle() {
  abs_whlmilgfrntle_ = 0;
  clear_has_abs_whlmilgfrntle();
}
inline ::google::protobuf::int32 Abs_sts_0x221_221::abs_whlmilgfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntle)
  return abs_whlmilgfrntle_;
}
inline void Abs_sts_0x221_221::set_abs_whlmilgfrntle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntle();
  abs_whlmilgfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntle)
}

// -------------------------------------------------------------------

// Mrr_frobj_0x480_480

// optional double mrr_l_object_dy = 1;
inline bool Mrr_frobj_0x480_480::has_mrr_l_object_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_l_object_dy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_l_object_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_l_object_dy() {
  mrr_l_object_dy_ = 0;
  clear_has_mrr_l_object_dy();
}
inline double Mrr_frobj_0x480_480::mrr_l_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dy)
  return mrr_l_object_dy_;
}
inline void Mrr_frobj_0x480_480::set_mrr_l_object_dy(double value) {
  set_has_mrr_l_object_dy();
  mrr_l_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
inline bool Mrr_frobj_0x480_480::has_mrr_l_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_l_obj_0x_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_l_obj_0x_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_l_obj_0x_class() {
  mrr_l_obj_0x_class_ = 0;
  clear_has_mrr_l_obj_0x_class();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::mrr_l_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType >(mrr_l_obj_0x_class_);
}
inline void Mrr_frobj_0x480_480::set_mrr_l_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_IsValid(value));
  set_has_mrr_l_obj_0x_class();
  mrr_l_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_obj_0x_class)
}

// optional double mrr_r_object_dx = 3;
inline bool Mrr_frobj_0x480_480::has_mrr_r_object_dx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_r_object_dx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_r_object_dx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_r_object_dx() {
  mrr_r_object_dx_ = 0;
  clear_has_mrr_r_object_dx();
}
inline double Mrr_frobj_0x480_480::mrr_r_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dx)
  return mrr_r_object_dx_;
}
inline void Mrr_frobj_0x480_480::set_mrr_r_object_dx(double value) {
  set_has_mrr_r_object_dx();
  mrr_r_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dx)
}

// optional double mrr_r_object_dy = 4;
inline bool Mrr_frobj_0x480_480::has_mrr_r_object_dy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_r_object_dy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_r_object_dy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_r_object_dy() {
  mrr_r_object_dy_ = 0;
  clear_has_mrr_r_object_dy();
}
inline double Mrr_frobj_0x480_480::mrr_r_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dy)
  return mrr_r_object_dy_;
}
inline void Mrr_frobj_0x480_480::set_mrr_r_object_dy(double value) {
  set_has_mrr_r_object_dy();
  mrr_r_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
inline bool Mrr_frobj_0x480_480::has_mrr_r_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_r_obj_0x_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_r_obj_0x_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_r_obj_0x_class() {
  mrr_r_obj_0x_class_ = 0;
  clear_has_mrr_r_obj_0x_class();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::mrr_r_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType >(mrr_r_obj_0x_class_);
}
inline void Mrr_frobj_0x480_480::set_mrr_r_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_IsValid(value));
  set_has_mrr_r_obj_0x_class();
  mrr_r_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_obj_0x_class)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
inline bool Mrr_frobj_0x480_480::has_mrr_lefttargrtdetection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_lefttargrtdetection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_lefttargrtdetection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_lefttargrtdetection() {
  mrr_lefttargrtdetection_ = 0;
  clear_has_mrr_lefttargrtdetection();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480::mrr_lefttargrtdetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_lefttargrtdetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType >(mrr_lefttargrtdetection_);
}
inline void Mrr_frobj_0x480_480::set_mrr_lefttargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_IsValid(value));
  set_has_mrr_lefttargrtdetection();
  mrr_lefttargrtdetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_lefttargrtdetection)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
inline bool Mrr_frobj_0x480_480::has_mrr_righttargrtdetection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_righttargrtdetection() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_righttargrtdetection() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_righttargrtdetection() {
  mrr_righttargrtdetection_ = 0;
  clear_has_mrr_righttargrtdetection();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480::mrr_righttargrtdetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_righttargrtdetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType >(mrr_righttargrtdetection_);
}
inline void Mrr_frobj_0x480_480::set_mrr_righttargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_IsValid(value));
  set_has_mrr_righttargrtdetection();
  mrr_righttargrtdetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_righttargrtdetection)
}

// optional double mrr_l_object_dx = 8;
inline bool Mrr_frobj_0x480_480::has_mrr_l_object_dx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mrr_frobj_0x480_480::set_has_mrr_l_object_dx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mrr_frobj_0x480_480::clear_has_mrr_l_object_dx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mrr_frobj_0x480_480::clear_mrr_l_object_dx() {
  mrr_l_object_dx_ = 0;
  clear_has_mrr_l_object_dx();
}
inline double Mrr_frobj_0x480_480::mrr_l_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dx)
  return mrr_l_object_dx_;
}
inline void Mrr_frobj_0x480_480::set_mrr_l_object_dx(double value) {
  set_has_mrr_l_object_dx();
  mrr_l_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dx)
}

// -------------------------------------------------------------------

// Mrr_0x246_246

// optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
inline bool Mrr_0x246_246::has_taugapset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mrr_0x246_246::set_has_taugapset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mrr_0x246_246::clear_has_taugapset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mrr_0x246_246::clear_taugapset() {
  taugapset_ = 0;
  clear_has_taugapset();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType Mrr_0x246_246::taugapset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.taugapset)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType >(taugapset_);
}
inline void Mrr_0x246_246::set_taugapset(::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType_IsValid(value));
  set_has_taugapset();
  taugapset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.taugapset)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
inline bool Mrr_0x246_246::has_dxtarobj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mrr_0x246_246::set_has_dxtarobj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mrr_0x246_246::clear_has_dxtarobj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mrr_0x246_246::clear_dxtarobj() {
  dxtarobj_ = 0;
  clear_has_dxtarobj();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType Mrr_0x246_246::dxtarobj() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.dxtarobj)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType >(dxtarobj_);
}
inline void Mrr_0x246_246::set_dxtarobj(::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType_IsValid(value));
  set_has_dxtarobj();
  dxtarobj_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.dxtarobj)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
inline bool Mrr_0x246_246::has_acchmi_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mrr_0x246_246::set_has_acchmi_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mrr_0x246_246::clear_has_acchmi_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mrr_0x246_246::clear_acchmi_mode() {
  acchmi_mode_ = 0;
  clear_has_acchmi_mode();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::acchmi_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.acchmi_mode)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType >(acchmi_mode_);
}
inline void Mrr_0x246_246::set_acchmi_mode(::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType_IsValid(value));
  set_has_acchmi_mode();
  acchmi_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.acchmi_mode)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
inline bool Mrr_0x246_246::has_accfailinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mrr_0x246_246::set_has_accfailinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mrr_0x246_246::clear_has_accfailinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mrr_0x246_246::clear_accfailinfo() {
  accfailinfo_ = 0;
  clear_has_accfailinfo();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType Mrr_0x246_246::accfailinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.accfailinfo)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType >(accfailinfo_);
}
inline void Mrr_0x246_246::set_accfailinfo(::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType_IsValid(value));
  set_has_accfailinfo();
  accfailinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.accfailinfo)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
inline bool Mrr_0x246_246::has_takeoverreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mrr_0x246_246::set_has_takeoverreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mrr_0x246_246::clear_has_takeoverreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mrr_0x246_246::clear_takeoverreq() {
  takeoverreq_ = 0;
  clear_has_takeoverreq();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType Mrr_0x246_246::takeoverreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.takeoverreq)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType >(takeoverreq_);
}
inline void Mrr_0x246_246::set_takeoverreq(::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType_IsValid(value));
  set_has_takeoverreq();
  takeoverreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.takeoverreq)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
inline bool Mrr_0x246_246::has_mrr_fcw_sensitive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mrr_0x246_246::set_has_mrr_fcw_sensitive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mrr_0x246_246::clear_has_mrr_fcw_sensitive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mrr_0x246_246::clear_mrr_fcw_sensitive() {
  mrr_fcw_sensitive_ = 0;
  clear_has_mrr_fcw_sensitive();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::mrr_fcw_sensitive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.mrr_fcw_sensitive)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType >(mrr_fcw_sensitive_);
}
inline void Mrr_0x246_246::set_mrr_fcw_sensitive(::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType_IsValid(value));
  set_has_mrr_fcw_sensitive();
  mrr_fcw_sensitive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.mrr_fcw_sensitive)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
inline bool Mrr_0x246_246::has_aeb_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mrr_0x246_246::set_has_aeb_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mrr_0x246_246::clear_has_aeb_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mrr_0x246_246::clear_aeb_state() {
  aeb_state_ = 0;
  clear_has_aeb_state();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::aeb_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.aeb_state)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType >(aeb_state_);
}
inline void Mrr_0x246_246::set_aeb_state(::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType_IsValid(value));
  set_has_aeb_state();
  aeb_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.aeb_state)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
inline bool Mrr_0x246_246::has_acc_startstop_infor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mrr_0x246_246::set_has_acc_startstop_infor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mrr_0x246_246::clear_has_acc_startstop_infor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mrr_0x246_246::clear_acc_startstop_infor() {
  acc_startstop_infor_ = 0;
  clear_has_acc_startstop_infor();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::acc_startstop_infor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.acc_startstop_infor)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType >(acc_startstop_infor_);
}
inline void Mrr_0x246_246::set_acc_startstop_infor(::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType_IsValid(value));
  set_has_acc_startstop_infor();
  acc_startstop_infor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.acc_startstop_infor)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
inline bool Mrr_0x246_246::has_fcw_prewarning() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Mrr_0x246_246::set_has_fcw_prewarning() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Mrr_0x246_246::clear_has_fcw_prewarning() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Mrr_0x246_246::clear_fcw_prewarning() {
  fcw_prewarning_ = 0;
  clear_has_fcw_prewarning();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246::fcw_prewarning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.fcw_prewarning)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType >(fcw_prewarning_);
}
inline void Mrr_0x246_246::set_fcw_prewarning(::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType_IsValid(value));
  set_has_fcw_prewarning();
  fcw_prewarning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.fcw_prewarning)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
inline bool Mrr_0x246_246::has_fcw_latentwarning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Mrr_0x246_246::set_has_fcw_latentwarning() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Mrr_0x246_246::clear_has_fcw_latentwarning() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Mrr_0x246_246::clear_fcw_latentwarning() {
  fcw_latentwarning_ = 0;
  clear_has_fcw_latentwarning();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246::fcw_latentwarning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.fcw_latentwarning)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType >(fcw_latentwarning_);
}
inline void Mrr_0x246_246::set_fcw_latentwarning(::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType_IsValid(value));
  set_has_fcw_latentwarning();
  fcw_latentwarning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.fcw_latentwarning)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
inline bool Mrr_0x246_246::has_fcw_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Mrr_0x246_246::set_has_fcw_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Mrr_0x246_246::clear_has_fcw_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Mrr_0x246_246::clear_fcw_state() {
  fcw_state_ = 0;
  clear_has_fcw_state();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::fcw_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.fcw_state)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType >(fcw_state_);
}
inline void Mrr_0x246_246::set_fcw_state(::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType_IsValid(value));
  set_has_fcw_state();
  fcw_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.fcw_state)
}

// optional int32 obj_speed = 12;
inline bool Mrr_0x246_246::has_obj_speed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Mrr_0x246_246::set_has_obj_speed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Mrr_0x246_246::clear_has_obj_speed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Mrr_0x246_246::clear_obj_speed() {
  obj_speed_ = 0;
  clear_has_obj_speed();
}
inline ::google::protobuf::int32 Mrr_0x246_246::obj_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.obj_speed)
  return obj_speed_;
}
inline void Mrr_0x246_246::set_obj_speed(::google::protobuf::int32 value) {
  set_has_obj_speed();
  obj_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.obj_speed)
}

// optional int32 rolling_counter_0x246 = 13;
inline bool Mrr_0x246_246::has_rolling_counter_0x246() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Mrr_0x246_246::set_has_rolling_counter_0x246() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Mrr_0x246_246::clear_has_rolling_counter_0x246() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Mrr_0x246_246::clear_rolling_counter_0x246() {
  rolling_counter_0x246_ = 0;
  clear_has_rolling_counter_0x246();
}
inline ::google::protobuf::int32 Mrr_0x246_246::rolling_counter_0x246() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.rolling_counter_0x246)
  return rolling_counter_0x246_;
}
inline void Mrr_0x246_246::set_rolling_counter_0x246(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x246();
  rolling_counter_0x246_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.rolling_counter_0x246)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
inline bool Mrr_0x246_246::has_textinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Mrr_0x246_246::set_has_textinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Mrr_0x246_246::clear_has_textinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Mrr_0x246_246::clear_textinfo() {
  textinfo_ = 0;
  clear_has_textinfo();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType Mrr_0x246_246::textinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.textinfo)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType >(textinfo_);
}
inline void Mrr_0x246_246::set_textinfo(::jmc_auto::canbus::Mrr_0x246_246_TextinfoType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_TextinfoType_IsValid(value));
  set_has_textinfo();
  textinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.textinfo)
}

// optional int32 checksum_0x246 = 15;
inline bool Mrr_0x246_246::has_checksum_0x246() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Mrr_0x246_246::set_has_checksum_0x246() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Mrr_0x246_246::clear_has_checksum_0x246() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Mrr_0x246_246::clear_checksum_0x246() {
  checksum_0x246_ = 0;
  clear_has_checksum_0x246();
}
inline ::google::protobuf::int32 Mrr_0x246_246::checksum_0x246() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.checksum_0x246)
  return checksum_0x246_;
}
inline void Mrr_0x246_246::set_checksum_0x246(::google::protobuf::int32 value) {
  set_has_checksum_0x246();
  checksum_0x246_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.checksum_0x246)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
inline bool Mrr_0x246_246::has_vsetdis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Mrr_0x246_246::set_has_vsetdis() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Mrr_0x246_246::clear_has_vsetdis() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Mrr_0x246_246::clear_vsetdis() {
  vsetdis_ = 511;
  clear_has_vsetdis();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType Mrr_0x246_246::vsetdis() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.vsetdis)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType >(vsetdis_);
}
inline void Mrr_0x246_246::set_vsetdis(::jmc_auto::canbus::Mrr_0x246_246_VsetdisType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_VsetdisType_IsValid(value));
  set_has_vsetdis();
  vsetdis_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.vsetdis)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
inline bool Mrr_0x246_246::has_objvalid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Mrr_0x246_246::set_has_objvalid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Mrr_0x246_246::clear_has_objvalid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Mrr_0x246_246::clear_objvalid() {
  objvalid_ = 0;
  clear_has_objvalid();
}
inline ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType Mrr_0x246_246::objvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.objvalid)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType >(objvalid_);
}
inline void Mrr_0x246_246::set_objvalid(::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType_IsValid(value));
  set_has_objvalid();
  objvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.objvalid)
}

// -------------------------------------------------------------------

// Gw_mp5_nav_0x533_533

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
inline bool Gw_mp5_nav_0x533_533::has_nav_speedlimitunits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_nav_speedlimitunits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_nav_speedlimitunits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_mp5_nav_0x533_533::clear_nav_speedlimitunits() {
  nav_speedlimitunits_ = 0;
  clear_has_nav_speedlimitunits();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::nav_speedlimitunits() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitunits)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType >(nav_speedlimitunits_);
}
inline void Gw_mp5_nav_0x533_533::set_nav_speedlimitunits(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_IsValid(value));
  set_has_nav_speedlimitunits();
  nav_speedlimitunits_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitunits)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
inline bool Gw_mp5_nav_0x533_533::has_nav_currroadtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_nav_currroadtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_nav_currroadtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_mp5_nav_0x533_533::clear_nav_currroadtype() {
  nav_currroadtype_ = 0;
  clear_has_nav_currroadtype();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::nav_currroadtype() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_currroadtype)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType >(nav_currroadtype_);
}
inline void Gw_mp5_nav_0x533_533::set_nav_currroadtype(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType_IsValid(value));
  set_has_nav_currroadtype();
  nav_currroadtype_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_currroadtype)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
inline bool Gw_mp5_nav_0x533_533::has_nav_speedlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_nav_speedlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_nav_speedlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_mp5_nav_0x533_533::clear_nav_speedlimit() {
  nav_speedlimit_ = 0;
  clear_has_nav_speedlimit();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::nav_speedlimit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimit)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType >(nav_speedlimit_);
}
inline void Gw_mp5_nav_0x533_533::set_nav_speedlimit(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType_IsValid(value));
  set_has_nav_speedlimit();
  nav_speedlimit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimit)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
inline bool Gw_mp5_nav_0x533_533::has_mp5_apaactive_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_mp5_apaactive_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_mp5_apaactive_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_mp5_nav_0x533_533::clear_mp5_apaactive_cmd() {
  mp5_apaactive_cmd_ = 0;
  clear_has_mp5_apaactive_cmd();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533::mp5_apaactive_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apaactive_cmd)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType >(mp5_apaactive_cmd_);
}
inline void Gw_mp5_nav_0x533_533::set_mp5_apaactive_cmd(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_IsValid(value));
  set_has_mp5_apaactive_cmd();
  mp5_apaactive_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apaactive_cmd)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
inline bool Gw_mp5_nav_0x533_533::has_mp5_apa_confirmbutton() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_mp5_apa_confirmbutton() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_mp5_apa_confirmbutton() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_mp5_nav_0x533_533::clear_mp5_apa_confirmbutton() {
  mp5_apa_confirmbutton_ = 0;
  clear_has_mp5_apa_confirmbutton();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::mp5_apa_confirmbutton() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_confirmbutton)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType >(mp5_apa_confirmbutton_);
}
inline void Gw_mp5_nav_0x533_533::set_mp5_apa_confirmbutton(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_IsValid(value));
  set_has_mp5_apa_confirmbutton();
  mp5_apa_confirmbutton_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_confirmbutton)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
inline bool Gw_mp5_nav_0x533_533::has_mp5_apa_function_select() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_mp5_apa_function_select() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_mp5_apa_function_select() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_mp5_nav_0x533_533::clear_mp5_apa_function_select() {
  mp5_apa_function_select_ = 0;
  clear_has_mp5_apa_function_select();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::mp5_apa_function_select() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_function_select)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType >(mp5_apa_function_select_);
}
inline void Gw_mp5_nav_0x533_533::set_mp5_apa_function_select(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_IsValid(value));
  set_has_mp5_apa_function_select();
  mp5_apa_function_select_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_function_select)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
inline bool Gw_mp5_nav_0x533_533::has_nav_sts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_nav_sts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_nav_sts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_mp5_nav_0x533_533::clear_nav_sts() {
  nav_sts_ = 0;
  clear_has_nav_sts();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533::nav_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType >(nav_sts_);
}
inline void Gw_mp5_nav_0x533_533::set_nav_sts(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType_IsValid(value));
  set_has_nav_sts();
  nav_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_sts)
}

// optional int32 nav_countrycode = 8;
inline bool Gw_mp5_nav_0x533_533::has_nav_countrycode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_nav_countrycode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_nav_countrycode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_mp5_nav_0x533_533::clear_nav_countrycode() {
  nav_countrycode_ = 0;
  clear_has_nav_countrycode();
}
inline ::google::protobuf::int32 Gw_mp5_nav_0x533_533::nav_countrycode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_countrycode)
  return nav_countrycode_;
}
inline void Gw_mp5_nav_0x533_533::set_nav_countrycode(::google::protobuf::int32 value) {
  set_has_nav_countrycode();
  nav_countrycode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_countrycode)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
inline bool Gw_mp5_nav_0x533_533::has_nav_speedlimitstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_mp5_nav_0x533_533::set_has_nav_speedlimitstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_mp5_nav_0x533_533::clear_has_nav_speedlimitstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_mp5_nav_0x533_533::clear_nav_speedlimitstatus() {
  nav_speedlimitstatus_ = 0;
  clear_has_nav_speedlimitstatus();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::nav_speedlimitstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitstatus)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType >(nav_speedlimitstatus_);
}
inline void Gw_mp5_nav_0x533_533::set_nav_speedlimitstatus(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_IsValid(value));
  set_has_nav_speedlimitstatus();
  nav_speedlimitstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitstatus)
}

// -------------------------------------------------------------------

// Gw_mp5_0x530_530

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
inline bool Gw_mp5_0x530_530::has_mp5_fcw_sensitive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_fcw_sensitive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_fcw_sensitive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_mp5_0x530_530::clear_mp5_fcw_sensitive() {
  mp5_fcw_sensitive_ = 0;
  clear_has_mp5_fcw_sensitive();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::mp5_fcw_sensitive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_sensitive)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType >(mp5_fcw_sensitive_);
}
inline void Gw_mp5_0x530_530::set_mp5_fcw_sensitive(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_IsValid(value));
  set_has_mp5_fcw_sensitive();
  mp5_fcw_sensitive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_sensitive)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
inline bool Gw_mp5_0x530_530::has_mp5_icmenushift_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_icmenushift_button() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_icmenushift_button() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_mp5_0x530_530::clear_mp5_icmenushift_button() {
  mp5_icmenushift_button_ = 0;
  clear_has_mp5_icmenushift_button();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::mp5_icmenushift_button() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenushift_button)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType >(mp5_icmenushift_button_);
}
inline void Gw_mp5_0x530_530::set_mp5_icmenushift_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_IsValid(value));
  set_has_mp5_icmenushift_button();
  mp5_icmenushift_button_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenushift_button)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
inline bool Gw_mp5_0x530_530::has_mp5_aeb_on_off() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_aeb_on_off() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_aeb_on_off() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_mp5_0x530_530::clear_mp5_aeb_on_off() {
  mp5_aeb_on_off_ = 0;
  clear_has_mp5_aeb_on_off();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530::mp5_aeb_on_off() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_aeb_on_off)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType >(mp5_aeb_on_off_);
}
inline void Gw_mp5_0x530_530::set_mp5_aeb_on_off(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType_IsValid(value));
  set_has_mp5_aeb_on_off();
  mp5_aeb_on_off_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_aeb_on_off)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
inline bool Gw_mp5_0x530_530::has_mp5_fcw_on_off() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_fcw_on_off() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_fcw_on_off() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_mp5_0x530_530::clear_mp5_fcw_on_off() {
  mp5_fcw_on_off_ = 0;
  clear_has_mp5_fcw_on_off();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530::mp5_fcw_on_off() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_on_off)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType >(mp5_fcw_on_off_);
}
inline void Gw_mp5_0x530_530::set_mp5_fcw_on_off(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType_IsValid(value));
  set_has_mp5_fcw_on_off();
  mp5_fcw_on_off_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_on_off)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
inline bool Gw_mp5_0x530_530::has_mp5_bsdswitchsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_bsdswitchsts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_bsdswitchsts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_mp5_0x530_530::clear_mp5_bsdswitchsts() {
  mp5_bsdswitchsts_ = 0;
  clear_has_mp5_bsdswitchsts();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530::mp5_bsdswitchsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdswitchsts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType >(mp5_bsdswitchsts_);
}
inline void Gw_mp5_0x530_530::set_mp5_bsdswitchsts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType_IsValid(value));
  set_has_mp5_bsdswitchsts();
  mp5_bsdswitchsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdswitchsts)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
inline bool Gw_mp5_0x530_530::has_mp5_afs_swtichsts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_afs_swtichsts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_afs_swtichsts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_mp5_0x530_530::clear_mp5_afs_swtichsts() {
  mp5_afs_swtichsts_ = 0;
  clear_has_mp5_afs_swtichsts();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530::mp5_afs_swtichsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_afs_swtichsts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType >(mp5_afs_swtichsts_);
}
inline void Gw_mp5_0x530_530::set_mp5_afs_swtichsts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType_IsValid(value));
  set_has_mp5_afs_swtichsts();
  mp5_afs_swtichsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_afs_swtichsts)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
inline bool Gw_mp5_0x530_530::has_mp5_laneassittypereq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_laneassittypereq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_laneassittypereq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_mp5_0x530_530::clear_mp5_laneassittypereq() {
  mp5_laneassittypereq_ = 0;
  clear_has_mp5_laneassittypereq();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::mp5_laneassittypereq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_laneassittypereq)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType >(mp5_laneassittypereq_);
}
inline void Gw_mp5_0x530_530::set_mp5_laneassittypereq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType_IsValid(value));
  set_has_mp5_laneassittypereq();
  mp5_laneassittypereq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_laneassittypereq)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
inline bool Gw_mp5_0x530_530::has_mp5_icmenuactive_button() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_icmenuactive_button() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_icmenuactive_button() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_mp5_0x530_530::clear_mp5_icmenuactive_button() {
  mp5_icmenuactive_button_ = 0;
  clear_has_mp5_icmenuactive_button();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::mp5_icmenuactive_button() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenuactive_button)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType >(mp5_icmenuactive_button_);
}
inline void Gw_mp5_0x530_530::set_mp5_icmenuactive_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_IsValid(value));
  set_has_mp5_icmenuactive_button();
  mp5_icmenuactive_button_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenuactive_button)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
inline bool Gw_mp5_0x530_530::has_mp5_alarmstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_alarmstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_alarmstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_mp5_0x530_530::clear_mp5_alarmstatus() {
  mp5_alarmstatus_ = 0;
  clear_has_mp5_alarmstatus();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::mp5_alarmstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmstatus)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType >(mp5_alarmstatus_);
}
inline void Gw_mp5_0x530_530::set_mp5_alarmstatus(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType_IsValid(value));
  set_has_mp5_alarmstatus();
  mp5_alarmstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmstatus)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
inline bool Gw_mp5_0x530_530::has_mp5_alarmornot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_alarmornot() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_alarmornot() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_mp5_0x530_530::clear_mp5_alarmornot() {
  mp5_alarmornot_ = 0;
  clear_has_mp5_alarmornot();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530::mp5_alarmornot() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmornot)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType >(mp5_alarmornot_);
}
inline void Gw_mp5_0x530_530::set_mp5_alarmornot(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType_IsValid(value));
  set_has_mp5_alarmornot();
  mp5_alarmornot_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmornot)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
inline bool Gw_mp5_0x530_530::has_mp5_paakreset_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_paakreset_req() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_paakreset_req() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_mp5_0x530_530::clear_mp5_paakreset_req() {
  mp5_paakreset_req_ = 0;
  clear_has_mp5_paakreset_req();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530::mp5_paakreset_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_paakreset_req)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType >(mp5_paakreset_req_);
}
inline void Gw_mp5_0x530_530::set_mp5_paakreset_req(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType_IsValid(value));
  set_has_mp5_paakreset_req();
  mp5_paakreset_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_paakreset_req)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
inline bool Gw_mp5_0x530_530::has_mp5_cta_active() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_cta_active() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_cta_active() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_mp5_0x530_530::clear_mp5_cta_active() {
  mp5_cta_active_ = 0;
  clear_has_mp5_cta_active();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530::mp5_cta_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_cta_active)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType >(mp5_cta_active_);
}
inline void Gw_mp5_0x530_530::set_mp5_cta_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType_IsValid(value));
  set_has_mp5_cta_active();
  mp5_cta_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_cta_active)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
inline bool Gw_mp5_0x530_530::has_mp5_bsdlca_active() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_bsdlca_active() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_bsdlca_active() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_bsdlca_active() {
  mp5_bsdlca_active_ = 0;
  clear_has_mp5_bsdlca_active();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530::mp5_bsdlca_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdlca_active)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType >(mp5_bsdlca_active_);
}
inline void Gw_mp5_0x530_530::set_mp5_bsdlca_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType_IsValid(value));
  set_has_mp5_bsdlca_active();
  mp5_bsdlca_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdlca_active)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
inline bool Gw_mp5_0x530_530::has_mp5_tsrmenureq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_tsrmenureq() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_tsrmenureq() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_tsrmenureq() {
  mp5_tsrmenureq_ = 0;
  clear_has_mp5_tsrmenureq();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530::mp5_tsrmenureq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tsrmenureq)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType >(mp5_tsrmenureq_);
}
inline void Gw_mp5_0x530_530::set_mp5_tsrmenureq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType_IsValid(value));
  set_has_mp5_tsrmenureq();
  mp5_tsrmenureq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tsrmenureq)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
inline bool Gw_mp5_0x530_530::has_mp5_ldwwarning() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_ldwwarning() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_ldwwarning() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_ldwwarning() {
  mp5_ldwwarning_ = 0;
  clear_has_mp5_ldwwarning();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::mp5_ldwwarning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwwarning)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType >(mp5_ldwwarning_);
}
inline void Gw_mp5_0x530_530::set_mp5_ldwwarning(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType_IsValid(value));
  set_has_mp5_ldwwarning();
  mp5_ldwwarning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwwarning)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
inline bool Gw_mp5_0x530_530::has_mp5_ldwsensitvity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_ldwsensitvity() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_ldwsensitvity() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_ldwsensitvity() {
  mp5_ldwsensitvity_ = 0;
  clear_has_mp5_ldwsensitvity();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::mp5_ldwsensitvity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwsensitvity)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType >(mp5_ldwsensitvity_);
}
inline void Gw_mp5_0x530_530::set_mp5_ldwsensitvity(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType_IsValid(value));
  set_has_mp5_ldwsensitvity();
  mp5_ldwsensitvity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwsensitvity)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
inline bool Gw_mp5_0x530_530::has_mp5_avm_angle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_avm_angle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_avm_angle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_avm_angle() {
  mp5_avm_angle_ = 0;
  clear_has_mp5_avm_angle();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::mp5_avm_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_angle)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType >(mp5_avm_angle_);
}
inline void Gw_mp5_0x530_530::set_mp5_avm_angle(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType_IsValid(value));
  set_has_mp5_avm_angle();
  mp5_avm_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_angle)
}

// optional int32 mp5_avm_rotationchange = 18;
inline bool Gw_mp5_0x530_530::has_mp5_avm_rotationchange() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_avm_rotationchange() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_avm_rotationchange() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_avm_rotationchange() {
  mp5_avm_rotationchange_ = 0;
  clear_has_mp5_avm_rotationchange();
}
inline ::google::protobuf::int32 Gw_mp5_0x530_530::mp5_avm_rotationchange() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationchange)
  return mp5_avm_rotationchange_;
}
inline void Gw_mp5_0x530_530::set_mp5_avm_rotationchange(::google::protobuf::int32 value) {
  set_has_mp5_avm_rotationchange();
  mp5_avm_rotationchange_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationchange)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
inline bool Gw_mp5_0x530_530::has_mp5_ihcmenureq() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_ihcmenureq() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_ihcmenureq() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_ihcmenureq() {
  mp5_ihcmenureq_ = 0;
  clear_has_mp5_ihcmenureq();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530::mp5_ihcmenureq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ihcmenureq)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType >(mp5_ihcmenureq_);
}
inline void Gw_mp5_0x530_530::set_mp5_ihcmenureq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType_IsValid(value));
  set_has_mp5_ihcmenureq();
  mp5_ihcmenureq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ihcmenureq)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
inline bool Gw_mp5_0x530_530::has_mp5_doa_active() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_doa_active() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_doa_active() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_doa_active() {
  mp5_doa_active_ = 0;
  clear_has_mp5_doa_active();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530::mp5_doa_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_doa_active)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType >(mp5_doa_active_);
}
inline void Gw_mp5_0x530_530::set_mp5_doa_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType_IsValid(value));
  set_has_mp5_doa_active();
  mp5_doa_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_doa_active)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
inline bool Gw_mp5_0x530_530::has_mp5_apa_available_sts() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_apa_available_sts() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_apa_available_sts() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_apa_available_sts() {
  mp5_apa_available_sts_ = 0;
  clear_has_mp5_apa_available_sts();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::mp5_apa_available_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_apa_available_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType >(mp5_apa_available_sts_);
}
inline void Gw_mp5_0x530_530::set_mp5_apa_available_sts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType_IsValid(value));
  set_has_mp5_apa_available_sts();
  mp5_apa_available_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_apa_available_sts)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
inline bool Gw_mp5_0x530_530::has_mp5_tpmsautolocationsetting() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_tpmsautolocationsetting() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_tpmsautolocationsetting() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_tpmsautolocationsetting() {
  mp5_tpmsautolocationsetting_ = 0;
  clear_has_mp5_tpmsautolocationsetting();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530::mp5_tpmsautolocationsetting() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tpmsautolocationsetting)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType >(mp5_tpmsautolocationsetting_);
}
inline void Gw_mp5_0x530_530::set_mp5_tpmsautolocationsetting(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_IsValid(value));
  set_has_mp5_tpmsautolocationsetting();
  mp5_tpmsautolocationsetting_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tpmsautolocationsetting)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
inline bool Gw_mp5_0x530_530::has_mp5_avm_rotationdirection() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_avm_rotationdirection() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_avm_rotationdirection() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_avm_rotationdirection() {
  mp5_avm_rotationdirection_ = 0;
  clear_has_mp5_avm_rotationdirection();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::mp5_avm_rotationdirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationdirection)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType >(mp5_avm_rotationdirection_);
}
inline void Gw_mp5_0x530_530::set_mp5_avm_rotationdirection(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_IsValid(value));
  set_has_mp5_avm_rotationdirection();
  mp5_avm_rotationdirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationdirection)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
inline bool Gw_mp5_0x530_530::has_mp5_avm_button() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_avm_button() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_avm_button() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_avm_button() {
  mp5_avm_button_ = 0;
  clear_has_mp5_avm_button();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::mp5_avm_button() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_button)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType >(mp5_avm_button_);
}
inline void Gw_mp5_0x530_530::set_mp5_avm_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType_IsValid(value));
  set_has_mp5_avm_button();
  mp5_avm_button_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_button)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
inline bool Gw_mp5_0x530_530::has_mp5_view_choice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Gw_mp5_0x530_530::set_has_mp5_view_choice() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Gw_mp5_0x530_530::clear_has_mp5_view_choice() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Gw_mp5_0x530_530::clear_mp5_view_choice() {
  mp5_view_choice_ = 0;
  clear_has_mp5_view_choice();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530::mp5_view_choice() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_view_choice)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType >(mp5_view_choice_);
}
inline void Gw_mp5_0x530_530::set_mp5_view_choice(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType_IsValid(value));
  set_has_mp5_view_choice();
  mp5_view_choice_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_view_choice)
}

// -------------------------------------------------------------------

// Mrr_frobj_0x279_279

// optional double mrr_f_object_dy = 1;
inline bool Mrr_frobj_0x279_279::has_mrr_f_object_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_f_object_dy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_f_object_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_f_object_dy() {
  mrr_f_object_dy_ = 0;
  clear_has_mrr_f_object_dy();
}
inline double Mrr_frobj_0x279_279::mrr_f_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dy)
  return mrr_f_object_dy_;
}
inline void Mrr_frobj_0x279_279::set_mrr_f_object_dy(double value) {
  set_has_mrr_f_object_dy();
  mrr_f_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
inline bool Mrr_frobj_0x279_279::has_mrr_f_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_f_obj_0x_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_f_obj_0x_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_f_obj_0x_class() {
  mrr_f_obj_0x_class_ = 0;
  clear_has_mrr_f_obj_0x_class();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::mrr_f_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType >(mrr_f_obj_0x_class_);
}
inline void Mrr_frobj_0x279_279::set_mrr_f_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_IsValid(value));
  set_has_mrr_f_obj_0x_class();
  mrr_f_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_obj_0x_class)
}

// optional double mrr_ff_object_dx = 3;
inline bool Mrr_frobj_0x279_279::has_mrr_ff_object_dx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_ff_object_dx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_ff_object_dx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_ff_object_dx() {
  mrr_ff_object_dx_ = 0;
  clear_has_mrr_ff_object_dx();
}
inline double Mrr_frobj_0x279_279::mrr_ff_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dx)
  return mrr_ff_object_dx_;
}
inline void Mrr_frobj_0x279_279::set_mrr_ff_object_dx(double value) {
  set_has_mrr_ff_object_dx();
  mrr_ff_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dx)
}

// optional double mrr_ff_object_dy = 4;
inline bool Mrr_frobj_0x279_279::has_mrr_ff_object_dy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_ff_object_dy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_ff_object_dy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_ff_object_dy() {
  mrr_ff_object_dy_ = 0;
  clear_has_mrr_ff_object_dy();
}
inline double Mrr_frobj_0x279_279::mrr_ff_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dy)
  return mrr_ff_object_dy_;
}
inline void Mrr_frobj_0x279_279::set_mrr_ff_object_dy(double value) {
  set_has_mrr_ff_object_dy();
  mrr_ff_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
inline bool Mrr_frobj_0x279_279::has_mrr_ff_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_ff_obj_0x_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_ff_obj_0x_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_ff_obj_0x_class() {
  mrr_ff_obj_0x_class_ = 0;
  clear_has_mrr_ff_obj_0x_class();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::mrr_ff_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType >(mrr_ff_obj_0x_class_);
}
inline void Mrr_frobj_0x279_279::set_mrr_ff_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_IsValid(value));
  set_has_mrr_ff_obj_0x_class();
  mrr_ff_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_obj_0x_class)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
inline bool Mrr_frobj_0x279_279::has_mrr_fftargrtdetection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_fftargrtdetection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_fftargrtdetection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_fftargrtdetection() {
  mrr_fftargrtdetection_ = 0;
  clear_has_mrr_fftargrtdetection();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279::mrr_fftargrtdetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_fftargrtdetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType >(mrr_fftargrtdetection_);
}
inline void Mrr_frobj_0x279_279::set_mrr_fftargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_IsValid(value));
  set_has_mrr_fftargrtdetection();
  mrr_fftargrtdetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_fftargrtdetection)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
inline bool Mrr_frobj_0x279_279::has_mrr_peddetection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_peddetection() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_peddetection() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_peddetection() {
  mrr_peddetection_ = 0;
  clear_has_mrr_peddetection();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279::mrr_peddetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_peddetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType >(mrr_peddetection_);
}
inline void Mrr_frobj_0x279_279::set_mrr_peddetection(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType_IsValid(value));
  set_has_mrr_peddetection();
  mrr_peddetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_peddetection)
}

// optional double mrr_f_object_dx = 8;
inline bool Mrr_frobj_0x279_279::has_mrr_f_object_dx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mrr_frobj_0x279_279::set_has_mrr_f_object_dx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mrr_frobj_0x279_279::clear_has_mrr_f_object_dx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mrr_frobj_0x279_279::clear_mrr_f_object_dx() {
  mrr_f_object_dx_ = 0;
  clear_has_mrr_f_object_dx();
}
inline double Mrr_frobj_0x279_279::mrr_f_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dx)
  return mrr_f_object_dx_;
}
inline void Mrr_frobj_0x279_279::set_mrr_f_object_dx(double value) {
  set_has_mrr_f_object_dx();
  mrr_f_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dx)
}

// -------------------------------------------------------------------

// Gw_ic_0x510_510

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
inline bool Gw_ic_0x510_510::has_ic_airbagtelltalebehavior() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_airbagtelltalebehavior() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ic_0x510_510::clear_has_ic_airbagtelltalebehavior() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ic_0x510_510::clear_ic_airbagtelltalebehavior() {
  ic_airbagtelltalebehavior_ = 0;
  clear_has_ic_airbagtelltalebehavior();
}
inline ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::ic_airbagtelltalebehavior() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_airbagtelltalebehavior)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType >(ic_airbagtelltalebehavior_);
}
inline void Gw_ic_0x510_510::set_ic_airbagtelltalebehavior(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IsValid(value));
  set_has_ic_airbagtelltalebehavior();
  ic_airbagtelltalebehavior_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_airbagtelltalebehavior)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
inline bool Gw_ic_0x510_510::has_ic_vehbrkpump_err_ic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_vehbrkpump_err_ic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ic_0x510_510::clear_has_ic_vehbrkpump_err_ic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ic_0x510_510::clear_ic_vehbrkpump_err_ic() {
  ic_vehbrkpump_err_ic_ = 0;
  clear_has_ic_vehbrkpump_err_ic();
}
inline ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510::ic_vehbrkpump_err_ic() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehbrkpump_err_ic)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType >(ic_vehbrkpump_err_ic_);
}
inline void Gw_ic_0x510_510::set_ic_vehbrkpump_err_ic(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IsValid(value));
  set_has_ic_vehbrkpump_err_ic();
  ic_vehbrkpump_err_ic_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehbrkpump_err_ic)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
inline bool Gw_ic_0x510_510::has_ic_disfail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_disfail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ic_0x510_510::clear_has_ic_disfail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ic_0x510_510::clear_ic_disfail() {
  ic_disfail_ = 0;
  clear_has_ic_disfail();
}
inline ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510::ic_disfail() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_disfail)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType >(ic_disfail_);
}
inline void Gw_ic_0x510_510::set_ic_disfail(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType_IsValid(value));
  set_has_ic_disfail();
  ic_disfail_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_disfail)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
inline bool Gw_ic_0x510_510::has_ic_qdashaccfail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_qdashaccfail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ic_0x510_510::clear_has_ic_qdashaccfail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ic_0x510_510::clear_ic_qdashaccfail() {
  ic_qdashaccfail_ = 0;
  clear_has_ic_qdashaccfail();
}
inline ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::ic_qdashaccfail() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_qdashaccfail)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType >(ic_qdashaccfail_);
}
inline void Gw_ic_0x510_510::set_ic_qdashaccfail(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType_IsValid(value));
  set_has_ic_qdashaccfail();
  ic_qdashaccfail_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_qdashaccfail)
}

// optional int32 ic_vehspd_hmi = 5;
inline bool Gw_ic_0x510_510::has_ic_vehspd_hmi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_vehspd_hmi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ic_0x510_510::clear_has_ic_vehspd_hmi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ic_0x510_510::clear_ic_vehspd_hmi() {
  ic_vehspd_hmi_ = 0;
  clear_has_ic_vehspd_hmi();
}
inline ::google::protobuf::int32 Gw_ic_0x510_510::ic_vehspd_hmi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehspd_hmi)
  return ic_vehspd_hmi_;
}
inline void Gw_ic_0x510_510::set_ic_vehspd_hmi(::google::protobuf::int32 value) {
  set_has_ic_vehspd_hmi();
  ic_vehspd_hmi_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehspd_hmi)
}

// optional int32 ic_rolling_counter_0x510 = 6;
inline bool Gw_ic_0x510_510::has_ic_rolling_counter_0x510() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_rolling_counter_0x510() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ic_0x510_510::clear_has_ic_rolling_counter_0x510() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ic_0x510_510::clear_ic_rolling_counter_0x510() {
  ic_rolling_counter_0x510_ = 0;
  clear_has_ic_rolling_counter_0x510();
}
inline ::google::protobuf::int32 Gw_ic_0x510_510::ic_rolling_counter_0x510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_rolling_counter_0x510)
  return ic_rolling_counter_0x510_;
}
inline void Gw_ic_0x510_510::set_ic_rolling_counter_0x510(::google::protobuf::int32 value) {
  set_has_ic_rolling_counter_0x510();
  ic_rolling_counter_0x510_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_rolling_counter_0x510)
}

// optional int32 ic_checksum_0x510 = 7;
inline bool Gw_ic_0x510_510::has_ic_checksum_0x510() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_checksum_0x510() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_ic_0x510_510::clear_has_ic_checksum_0x510() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_ic_0x510_510::clear_ic_checksum_0x510() {
  ic_checksum_0x510_ = 0;
  clear_has_ic_checksum_0x510();
}
inline ::google::protobuf::int32 Gw_ic_0x510_510::ic_checksum_0x510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_checksum_0x510)
  return ic_checksum_0x510_;
}
inline void Gw_ic_0x510_510::set_ic_checksum_0x510(::google::protobuf::int32 value) {
  set_has_ic_checksum_0x510();
  ic_checksum_0x510_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_checksum_0x510)
}

// optional double ic_odometermastervalue = 8;
inline bool Gw_ic_0x510_510::has_ic_odometermastervalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_ic_0x510_510::set_has_ic_odometermastervalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_ic_0x510_510::clear_has_ic_odometermastervalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_ic_0x510_510::clear_ic_odometermastervalue() {
  ic_odometermastervalue_ = 0;
  clear_has_ic_odometermastervalue();
}
inline double Gw_ic_0x510_510::ic_odometermastervalue() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_odometermastervalue)
  return ic_odometermastervalue_;
}
inline void Gw_ic_0x510_510::set_ic_odometermastervalue(double value) {
  set_has_ic_odometermastervalue();
  ic_odometermastervalue_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_odometermastervalue)
}

// -------------------------------------------------------------------

// Esp_tq_0x217_217

// optional double esp_tqdecreqdbyespslow = 1;
inline bool Esp_tq_0x217_217::has_esp_tqdecreqdbyespslow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_tq_0x217_217::set_has_esp_tqdecreqdbyespslow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_tq_0x217_217::clear_has_esp_tqdecreqdbyespslow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_tq_0x217_217::clear_esp_tqdecreqdbyespslow() {
  esp_tqdecreqdbyespslow_ = 0;
  clear_has_esp_tqdecreqdbyespslow();
}
inline double Esp_tq_0x217_217::esp_tqdecreqdbyespslow() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespslow)
  return esp_tqdecreqdbyespslow_;
}
inline void Esp_tq_0x217_217::set_esp_tqdecreqdbyespslow(double value) {
  set_has_esp_tqdecreqdbyespslow();
  esp_tqdecreqdbyespslow_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespslow)
}

// optional double esp_tqinccreqdbyesp = 2;
inline bool Esp_tq_0x217_217::has_esp_tqinccreqdbyesp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_tq_0x217_217::set_has_esp_tqinccreqdbyesp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_tq_0x217_217::clear_has_esp_tqinccreqdbyesp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_tq_0x217_217::clear_esp_tqinccreqdbyesp() {
  esp_tqinccreqdbyesp_ = 0;
  clear_has_esp_tqinccreqdbyesp();
}
inline double Esp_tq_0x217_217::esp_tqinccreqdbyesp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqinccreqdbyesp)
  return esp_tqinccreqdbyesp_;
}
inline void Esp_tq_0x217_217::set_esp_tqinccreqdbyesp(double value) {
  set_has_esp_tqinccreqdbyesp();
  esp_tqinccreqdbyesp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqinccreqdbyesp)
}

// optional int32 rolling_counter_0x217 = 3;
inline bool Esp_tq_0x217_217::has_rolling_counter_0x217() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_tq_0x217_217::set_has_rolling_counter_0x217() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_tq_0x217_217::clear_has_rolling_counter_0x217() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_tq_0x217_217::clear_rolling_counter_0x217() {
  rolling_counter_0x217_ = 0;
  clear_has_rolling_counter_0x217();
}
inline ::google::protobuf::int32 Esp_tq_0x217_217::rolling_counter_0x217() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.rolling_counter_0x217)
  return rolling_counter_0x217_;
}
inline void Esp_tq_0x217_217::set_rolling_counter_0x217(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x217();
  rolling_counter_0x217_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.rolling_counter_0x217)
}

// optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
inline bool Esp_tq_0x217_217::has_esp_trqinc_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_tq_0x217_217::set_has_esp_trqinc_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_tq_0x217_217::clear_has_esp_trqinc_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_tq_0x217_217::clear_esp_trqinc_req() {
  esp_trqinc_req_ = 0;
  clear_has_esp_trqinc_req();
}
inline ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217::esp_trqinc_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqinc_req)
  return static_cast< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType >(esp_trqinc_req_);
}
inline void Esp_tq_0x217_217::set_esp_trqinc_req(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType value) {
  assert(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType_IsValid(value));
  set_has_esp_trqinc_req();
  esp_trqinc_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqinc_req)
}

// optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
inline bool Esp_tq_0x217_217::has_esp_trqred_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_tq_0x217_217::set_has_esp_trqred_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_tq_0x217_217::clear_has_esp_trqred_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_tq_0x217_217::clear_esp_trqred_req() {
  esp_trqred_req_ = 0;
  clear_has_esp_trqred_req();
}
inline ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217::esp_trqred_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqred_req)
  return static_cast< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType >(esp_trqred_req_);
}
inline void Esp_tq_0x217_217::set_esp_trqred_req(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType value) {
  assert(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType_IsValid(value));
  set_has_esp_trqred_req();
  esp_trqred_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqred_req)
}

// optional int32 checksum_0x217 = 6;
inline bool Esp_tq_0x217_217::has_checksum_0x217() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_tq_0x217_217::set_has_checksum_0x217() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_tq_0x217_217::clear_has_checksum_0x217() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_tq_0x217_217::clear_checksum_0x217() {
  checksum_0x217_ = 0;
  clear_has_checksum_0x217();
}
inline ::google::protobuf::int32 Esp_tq_0x217_217::checksum_0x217() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.checksum_0x217)
  return checksum_0x217_;
}
inline void Esp_tq_0x217_217::set_checksum_0x217(::google::protobuf::int32 value) {
  set_has_checksum_0x217();
  checksum_0x217_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.checksum_0x217)
}

// optional double esp_tqdecreqdbyespfast = 7;
inline bool Esp_tq_0x217_217::has_esp_tqdecreqdbyespfast() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Esp_tq_0x217_217::set_has_esp_tqdecreqdbyespfast() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Esp_tq_0x217_217::clear_has_esp_tqdecreqdbyespfast() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Esp_tq_0x217_217::clear_esp_tqdecreqdbyespfast() {
  esp_tqdecreqdbyespfast_ = 0;
  clear_has_esp_tqdecreqdbyespfast();
}
inline double Esp_tq_0x217_217::esp_tqdecreqdbyespfast() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespfast)
  return esp_tqdecreqdbyespfast_;
}
inline void Esp_tq_0x217_217::set_esp_tqdecreqdbyespfast(double value) {
  set_has_esp_tqdecreqdbyespfast();
  esp_tqdecreqdbyespfast_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespfast)
}

// -------------------------------------------------------------------

// Esp_rpmf_0x213_213

// optional double esp_wheelrpmfr = 1;
inline bool Esp_rpmf_0x213_213::has_esp_wheelrpmfr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Esp_rpmf_0x213_213::set_has_esp_wheelrpmfr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmfr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Esp_rpmf_0x213_213::clear_esp_wheelrpmfr() {
  esp_wheelrpmfr_ = 0;
  clear_has_esp_wheelrpmfr();
}
inline double Esp_rpmf_0x213_213::esp_wheelrpmfr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfr)
  return esp_wheelrpmfr_;
}
inline void Esp_rpmf_0x213_213::set_esp_wheelrpmfr(double value) {
  set_has_esp_wheelrpmfr();
  esp_wheelrpmfr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfr)
}

// optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
inline bool Esp_rpmf_0x213_213::has_esp_wheelrpmfrvalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Esp_rpmf_0x213_213::set_has_esp_wheelrpmfrvalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmfrvalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Esp_rpmf_0x213_213::clear_esp_wheelrpmfrvalid() {
  esp_wheelrpmfrvalid_ = 0;
  clear_has_esp_wheelrpmfrvalid();
}
inline ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213::esp_wheelrpmfrvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfrvalid)
  return static_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType >(esp_wheelrpmfrvalid_);
}
inline void Esp_rpmf_0x213_213::set_esp_wheelrpmfrvalid(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType value) {
  assert(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_IsValid(value));
  set_has_esp_wheelrpmfrvalid();
  esp_wheelrpmfrvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfrvalid)
}

// optional int32 rolling_counter_0x213 = 3;
inline bool Esp_rpmf_0x213_213::has_rolling_counter_0x213() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Esp_rpmf_0x213_213::set_has_rolling_counter_0x213() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Esp_rpmf_0x213_213::clear_has_rolling_counter_0x213() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Esp_rpmf_0x213_213::clear_rolling_counter_0x213() {
  rolling_counter_0x213_ = 0;
  clear_has_rolling_counter_0x213();
}
inline ::google::protobuf::int32 Esp_rpmf_0x213_213::rolling_counter_0x213() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.rolling_counter_0x213)
  return rolling_counter_0x213_;
}
inline void Esp_rpmf_0x213_213::set_rolling_counter_0x213(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x213();
  rolling_counter_0x213_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.rolling_counter_0x213)
}

// optional int32 checksum_0x213 = 4;
inline bool Esp_rpmf_0x213_213::has_checksum_0x213() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Esp_rpmf_0x213_213::set_has_checksum_0x213() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Esp_rpmf_0x213_213::clear_has_checksum_0x213() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Esp_rpmf_0x213_213::clear_checksum_0x213() {
  checksum_0x213_ = 0;
  clear_has_checksum_0x213();
}
inline ::google::protobuf::int32 Esp_rpmf_0x213_213::checksum_0x213() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.checksum_0x213)
  return checksum_0x213_;
}
inline void Esp_rpmf_0x213_213::set_checksum_0x213(::google::protobuf::int32 value) {
  set_has_checksum_0x213();
  checksum_0x213_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.checksum_0x213)
}

// optional double esp_wheelrpmfl = 5;
inline bool Esp_rpmf_0x213_213::has_esp_wheelrpmfl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Esp_rpmf_0x213_213::set_has_esp_wheelrpmfl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmfl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Esp_rpmf_0x213_213::clear_esp_wheelrpmfl() {
  esp_wheelrpmfl_ = 0;
  clear_has_esp_wheelrpmfl();
}
inline double Esp_rpmf_0x213_213::esp_wheelrpmfl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfl)
  return esp_wheelrpmfl_;
}
inline void Esp_rpmf_0x213_213::set_esp_wheelrpmfl(double value) {
  set_has_esp_wheelrpmfl();
  esp_wheelrpmfl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfl)
}

// optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
inline bool Esp_rpmf_0x213_213::has_esp_wheelrpmflvalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Esp_rpmf_0x213_213::set_has_esp_wheelrpmflvalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmflvalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Esp_rpmf_0x213_213::clear_esp_wheelrpmflvalid() {
  esp_wheelrpmflvalid_ = 0;
  clear_has_esp_wheelrpmflvalid();
}
inline ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213::esp_wheelrpmflvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmflvalid)
  return static_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType >(esp_wheelrpmflvalid_);
}
inline void Esp_rpmf_0x213_213::set_esp_wheelrpmflvalid(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType value) {
  assert(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_IsValid(value));
  set_has_esp_wheelrpmflvalid();
  esp_wheelrpmflvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmflvalid)
}

// -------------------------------------------------------------------

// Gw_ic_time_0x581_581

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
inline bool Gw_ic_time_0x581_581::has_ic_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_ic_time_0x581_581::set_has_ic_month() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_ic_time_0x581_581::clear_has_ic_month() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_ic_time_0x581_581::clear_ic_month() {
  ic_month_ = 0;
  clear_has_ic_month();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::ic_month() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_month)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType >(ic_month_);
}
inline void Gw_ic_time_0x581_581::set_ic_month(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType_IsValid(value));
  set_has_ic_month();
  ic_month_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_month)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
inline bool Gw_ic_time_0x581_581::has_ic_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_ic_time_0x581_581::set_has_ic_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_ic_time_0x581_581::clear_has_ic_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_ic_time_0x581_581::clear_ic_date() {
  ic_date_ = 0;
  clear_has_ic_date();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::ic_date() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_date)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType >(ic_date_);
}
inline void Gw_ic_time_0x581_581::set_ic_date(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType_IsValid(value));
  set_has_ic_date();
  ic_date_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_date)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
inline bool Gw_ic_time_0x581_581::has_ic_hour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_ic_time_0x581_581::set_has_ic_hour() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_ic_time_0x581_581::clear_has_ic_hour() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_ic_time_0x581_581::clear_ic_hour() {
  ic_hour_ = 0;
  clear_has_ic_hour();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::ic_hour() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_hour)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType >(ic_hour_);
}
inline void Gw_ic_time_0x581_581::set_ic_hour(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType_IsValid(value));
  set_has_ic_hour();
  ic_hour_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_hour)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
inline bool Gw_ic_time_0x581_581::has_ic_minute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_ic_time_0x581_581::set_has_ic_minute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_ic_time_0x581_581::clear_has_ic_minute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_ic_time_0x581_581::clear_ic_minute() {
  ic_minute_ = 0;
  clear_has_ic_minute();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::ic_minute() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_minute)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType >(ic_minute_);
}
inline void Gw_ic_time_0x581_581::set_ic_minute(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType_IsValid(value));
  set_has_ic_minute();
  ic_minute_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_minute)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
inline bool Gw_ic_time_0x581_581::has_ic_second() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_ic_time_0x581_581::set_has_ic_second() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_ic_time_0x581_581::clear_has_ic_second() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_ic_time_0x581_581::clear_ic_second() {
  ic_second_ = 0;
  clear_has_ic_second();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::ic_second() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_second)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType >(ic_second_);
}
inline void Gw_ic_time_0x581_581::set_ic_second(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType_IsValid(value));
  set_has_ic_second();
  ic_second_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_second)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
inline bool Gw_ic_time_0x581_581::has_ic_year() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_ic_time_0x581_581::set_has_ic_year() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_ic_time_0x581_581::clear_has_ic_year() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_ic_time_0x581_581::clear_ic_year() {
  ic_year_ = 2;
  clear_has_ic_year();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::ic_year() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_year)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType >(ic_year_);
}
inline void Gw_ic_time_0x581_581::set_ic_year(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType_IsValid(value));
  set_has_ic_year();
  ic_year_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_year)
}

// -------------------------------------------------------------------

// Afs_0x5a0_5a0

// optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
inline bool Afs_0x5a0_5a0::has_afs_work_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Afs_0x5a0_5a0::set_has_afs_work_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Afs_0x5a0_5a0::clear_has_afs_work_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Afs_0x5a0_5a0::clear_afs_work_sts() {
  afs_work_sts_ = 0;
  clear_has_afs_work_sts();
}
inline ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::afs_work_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Afs_0x5a0_5a0.afs_work_sts)
  return static_cast< ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType >(afs_work_sts_);
}
inline void Afs_0x5a0_5a0::set_afs_work_sts(::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType value) {
  assert(::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType_IsValid(value));
  set_has_afs_work_sts();
  afs_work_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Afs_0x5a0_5a0.afs_work_sts)
}

// -------------------------------------------------------------------

// Sod_nm_0x440_440

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
inline bool Sod_nm_0x440_440::has_sodnmlimphome() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sod_nm_0x440_440::set_has_sodnmlimphome() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sod_nm_0x440_440::clear_has_sodnmlimphome() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sod_nm_0x440_440::clear_sodnmlimphome() {
  sodnmlimphome_ = 0;
  clear_has_sodnmlimphome();
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440::sodnmlimphome() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmlimphome)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType >(sodnmlimphome_);
}
inline void Sod_nm_0x440_440::set_sodnmlimphome(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType_IsValid(value));
  set_has_sodnmlimphome();
  sodnmlimphome_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmlimphome)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
inline bool Sod_nm_0x440_440::has_sodnmsleepind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sod_nm_0x440_440::set_has_sodnmsleepind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sod_nm_0x440_440::clear_has_sodnmsleepind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sod_nm_0x440_440::clear_sodnmsleepind() {
  sodnmsleepind_ = 0;
  clear_has_sodnmsleepind();
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440::sodnmsleepind() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepind)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType >(sodnmsleepind_);
}
inline void Sod_nm_0x440_440::set_sodnmsleepind(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType_IsValid(value));
  set_has_sodnmsleepind();
  sodnmsleepind_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepind)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
inline bool Sod_nm_0x440_440::has_sodnmsleepack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sod_nm_0x440_440::set_has_sodnmsleepack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sod_nm_0x440_440::clear_has_sodnmsleepack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sod_nm_0x440_440::clear_sodnmsleepack() {
  sodnmsleepack_ = 0;
  clear_has_sodnmsleepack();
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440::sodnmsleepack() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepack)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType >(sodnmsleepack_);
}
inline void Sod_nm_0x440_440::set_sodnmsleepack(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType_IsValid(value));
  set_has_sodnmsleepack();
  sodnmsleepack_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepack)
}

// optional int32 sodnmdestaddr = 4;
inline bool Sod_nm_0x440_440::has_sodnmdestaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sod_nm_0x440_440::set_has_sodnmdestaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sod_nm_0x440_440::clear_has_sodnmdestaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sod_nm_0x440_440::clear_sodnmdestaddr() {
  sodnmdestaddr_ = 0;
  clear_has_sodnmdestaddr();
}
inline ::google::protobuf::int32 Sod_nm_0x440_440::sodnmdestaddr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmdestaddr)
  return sodnmdestaddr_;
}
inline void Sod_nm_0x440_440::set_sodnmdestaddr(::google::protobuf::int32 value) {
  set_has_sodnmdestaddr();
  sodnmdestaddr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmdestaddr)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
inline bool Sod_nm_0x440_440::has_sodnmalive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sod_nm_0x440_440::set_has_sodnmalive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sod_nm_0x440_440::clear_has_sodnmalive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sod_nm_0x440_440::clear_sodnmalive() {
  sodnmalive_ = 0;
  clear_has_sodnmalive();
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440::sodnmalive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmalive)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType >(sodnmalive_);
}
inline void Sod_nm_0x440_440::set_sodnmalive(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType_IsValid(value));
  set_has_sodnmalive();
  sodnmalive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmalive)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
inline bool Sod_nm_0x440_440::has_sodnmring() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sod_nm_0x440_440::set_has_sodnmring() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sod_nm_0x440_440::clear_has_sodnmring() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sod_nm_0x440_440::clear_sodnmring() {
  sodnmring_ = 0;
  clear_has_sodnmring();
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440::sodnmring() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmring)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType >(sodnmring_);
}
inline void Sod_nm_0x440_440::set_sodnmring(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType_IsValid(value));
  set_has_sodnmring();
  sodnmring_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmring)
}

// -------------------------------------------------------------------

// Gw_nm_0x460_460

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
inline bool Gw_nm_0x460_460::has_gwnmlimphome() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_nm_0x460_460::set_has_gwnmlimphome() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_nm_0x460_460::clear_has_gwnmlimphome() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_nm_0x460_460::clear_gwnmlimphome() {
  gwnmlimphome_ = 0;
  clear_has_gwnmlimphome();
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460::gwnmlimphome() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmlimphome)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType >(gwnmlimphome_);
}
inline void Gw_nm_0x460_460::set_gwnmlimphome(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType_IsValid(value));
  set_has_gwnmlimphome();
  gwnmlimphome_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmlimphome)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
inline bool Gw_nm_0x460_460::has_gwnmsleepind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_nm_0x460_460::set_has_gwnmsleepind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_nm_0x460_460::clear_has_gwnmsleepind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_nm_0x460_460::clear_gwnmsleepind() {
  gwnmsleepind_ = 0;
  clear_has_gwnmsleepind();
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460::gwnmsleepind() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepind)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType >(gwnmsleepind_);
}
inline void Gw_nm_0x460_460::set_gwnmsleepind(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType_IsValid(value));
  set_has_gwnmsleepind();
  gwnmsleepind_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepind)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
inline bool Gw_nm_0x460_460::has_gwnmsleepack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_nm_0x460_460::set_has_gwnmsleepack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_nm_0x460_460::clear_has_gwnmsleepack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_nm_0x460_460::clear_gwnmsleepack() {
  gwnmsleepack_ = 0;
  clear_has_gwnmsleepack();
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460::gwnmsleepack() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepack)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType >(gwnmsleepack_);
}
inline void Gw_nm_0x460_460::set_gwnmsleepack(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType_IsValid(value));
  set_has_gwnmsleepack();
  gwnmsleepack_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepack)
}

// optional int32 gwnmdestaddr = 4;
inline bool Gw_nm_0x460_460::has_gwnmdestaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_nm_0x460_460::set_has_gwnmdestaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_nm_0x460_460::clear_has_gwnmdestaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_nm_0x460_460::clear_gwnmdestaddr() {
  gwnmdestaddr_ = 0;
  clear_has_gwnmdestaddr();
}
inline ::google::protobuf::int32 Gw_nm_0x460_460::gwnmdestaddr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmdestaddr)
  return gwnmdestaddr_;
}
inline void Gw_nm_0x460_460::set_gwnmdestaddr(::google::protobuf::int32 value) {
  set_has_gwnmdestaddr();
  gwnmdestaddr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmdestaddr)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
inline bool Gw_nm_0x460_460::has_gwnmalive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_nm_0x460_460::set_has_gwnmalive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_nm_0x460_460::clear_has_gwnmalive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_nm_0x460_460::clear_gwnmalive() {
  gwnmalive_ = 0;
  clear_has_gwnmalive();
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460::gwnmalive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmalive)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType >(gwnmalive_);
}
inline void Gw_nm_0x460_460::set_gwnmalive(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType_IsValid(value));
  set_has_gwnmalive();
  gwnmalive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmalive)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
inline bool Gw_nm_0x460_460::has_gwnmring() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_nm_0x460_460::set_has_gwnmring() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_nm_0x460_460::clear_has_gwnmring() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_nm_0x460_460::clear_gwnmring() {
  gwnmring_ = 0;
  clear_has_gwnmring();
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460::gwnmring() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmring)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType >(gwnmring_);
}
inline void Gw_nm_0x460_460::set_gwnmring(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType_IsValid(value));
  set_has_gwnmring();
  gwnmring_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmring)
}

// -------------------------------------------------------------------

// Eps_0x260_260

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
inline bool Eps_0x260_260::has_eps_sassoftlimitrightflg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Eps_0x260_260::set_has_eps_sassoftlimitrightflg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Eps_0x260_260::clear_has_eps_sassoftlimitrightflg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Eps_0x260_260::clear_eps_sassoftlimitrightflg() {
  eps_sassoftlimitrightflg_ = 0;
  clear_has_eps_sassoftlimitrightflg();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::eps_sassoftlimitrightflg() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitrightflg)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType >(eps_sassoftlimitrightflg_);
}
inline void Eps_0x260_260::set_eps_sassoftlimitrightflg(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType_IsValid(value));
  set_has_eps_sassoftlimitrightflg();
  eps_sassoftlimitrightflg_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitrightflg)
}

// optional int32 eps_n_loadinfo = 2;
inline bool Eps_0x260_260::has_eps_n_loadinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Eps_0x260_260::set_has_eps_n_loadinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Eps_0x260_260::clear_has_eps_n_loadinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Eps_0x260_260::clear_eps_n_loadinfo() {
  eps_n_loadinfo_ = 0;
  clear_has_eps_n_loadinfo();
}
inline ::google::protobuf::int32 Eps_0x260_260::eps_n_loadinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_n_loadinfo)
  return eps_n_loadinfo_;
}
inline void Eps_0x260_260::set_eps_n_loadinfo(::google::protobuf::int32 value) {
  set_has_eps_n_loadinfo();
  eps_n_loadinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_n_loadinfo)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
inline bool Eps_0x260_260::has_eps_st_emergencypowerlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencypowerlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencypowerlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Eps_0x260_260::clear_eps_st_emergencypowerlimit() {
  eps_st_emergencypowerlimit_ = 0;
  clear_has_eps_st_emergencypowerlimit();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260::eps_st_emergencypowerlimit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencypowerlimit)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType >(eps_st_emergencypowerlimit_);
}
inline void Eps_0x260_260::set_eps_st_emergencypowerlimit(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType_IsValid(value));
  set_has_eps_st_emergencypowerlimit();
  eps_st_emergencypowerlimit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencypowerlimit)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
inline bool Eps_0x260_260::has_eps_st_emergencymotor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencymotor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencymotor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Eps_0x260_260::clear_eps_st_emergencymotor() {
  eps_st_emergencymotor_ = 0;
  clear_has_eps_st_emergencymotor();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260::eps_st_emergencymotor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencymotor)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType >(eps_st_emergencymotor_);
}
inline void Eps_0x260_260::set_eps_st_emergencymotor(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType_IsValid(value));
  set_has_eps_st_emergencymotor();
  eps_st_emergencymotor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencymotor)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
inline bool Eps_0x260_260::has_eps_st_emergencyecu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencyecu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencyecu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Eps_0x260_260::clear_eps_st_emergencyecu() {
  eps_st_emergencyecu_ = 0;
  clear_has_eps_st_emergencyecu();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260::eps_st_emergencyecu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyecu)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType >(eps_st_emergencyecu_);
}
inline void Eps_0x260_260::set_eps_st_emergencyecu(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType_IsValid(value));
  set_has_eps_st_emergencyecu();
  eps_st_emergencyecu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyecu)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
inline bool Eps_0x260_260::has_eps_st_emergencycaninterface() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencycaninterface() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencycaninterface() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Eps_0x260_260::clear_eps_st_emergencycaninterface() {
  eps_st_emergencycaninterface_ = 0;
  clear_has_eps_st_emergencycaninterface();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260::eps_st_emergencycaninterface() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencycaninterface)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType >(eps_st_emergencycaninterface_);
}
inline void Eps_0x260_260::set_eps_st_emergencycaninterface(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType_IsValid(value));
  set_has_eps_st_emergencycaninterface();
  eps_st_emergencycaninterface_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencycaninterface)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
inline bool Eps_0x260_260::has_eps_st_emergencysensor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencysensor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencysensor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Eps_0x260_260::clear_eps_st_emergencysensor() {
  eps_st_emergencysensor_ = 0;
  clear_has_eps_st_emergencysensor();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260::eps_st_emergencysensor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencysensor)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType >(eps_st_emergencysensor_);
}
inline void Eps_0x260_260::set_eps_st_emergencysensor(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType_IsValid(value));
  set_has_eps_st_emergencysensor();
  eps_st_emergencysensor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencysensor)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
inline bool Eps_0x260_260::has_eps_st_emergencyovertemp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencyovertemp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencyovertemp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Eps_0x260_260::clear_eps_st_emergencyovertemp() {
  eps_st_emergencyovertemp_ = 0;
  clear_has_eps_st_emergencyovertemp();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260::eps_st_emergencyovertemp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovertemp)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType >(eps_st_emergencyovertemp_);
}
inline void Eps_0x260_260::set_eps_st_emergencyovertemp(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType_IsValid(value));
  set_has_eps_st_emergencyovertemp();
  eps_st_emergencyovertemp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovertemp)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
inline bool Eps_0x260_260::has_eps_st_emergencyovervoltage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencyovervoltage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencyovervoltage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Eps_0x260_260::clear_eps_st_emergencyovervoltage() {
  eps_st_emergencyovervoltage_ = 0;
  clear_has_eps_st_emergencyovervoltage();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260::eps_st_emergencyovervoltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovervoltage)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType >(eps_st_emergencyovervoltage_);
}
inline void Eps_0x260_260::set_eps_st_emergencyovervoltage(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType_IsValid(value));
  set_has_eps_st_emergencyovervoltage();
  eps_st_emergencyovervoltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovervoltage)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
inline bool Eps_0x260_260::has_eps_st_emergencyundervoltage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_emergencyundervoltage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Eps_0x260_260::clear_has_eps_st_emergencyundervoltage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Eps_0x260_260::clear_eps_st_emergencyundervoltage() {
  eps_st_emergencyundervoltage_ = 0;
  clear_has_eps_st_emergencyundervoltage();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260::eps_st_emergencyundervoltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyundervoltage)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType >(eps_st_emergencyundervoltage_);
}
inline void Eps_0x260_260::set_eps_st_emergencyundervoltage(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType_IsValid(value));
  set_has_eps_st_emergencyundervoltage();
  eps_st_emergencyundervoltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyundervoltage)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
inline bool Eps_0x260_260::has_eps_f_ecutempvalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Eps_0x260_260::set_has_eps_f_ecutempvalid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Eps_0x260_260::clear_has_eps_f_ecutempvalid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Eps_0x260_260::clear_eps_f_ecutempvalid() {
  eps_f_ecutempvalid_ = 0;
  clear_has_eps_f_ecutempvalid();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260::eps_f_ecutempvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_f_ecutempvalid)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType >(eps_f_ecutempvalid_);
}
inline void Eps_0x260_260::set_eps_f_ecutempvalid(::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType_IsValid(value));
  set_has_eps_f_ecutempvalid();
  eps_f_ecutempvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_f_ecutempvalid)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
inline bool Eps_0x260_260::has_eps_sassoftlimitleftflg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Eps_0x260_260::set_has_eps_sassoftlimitleftflg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Eps_0x260_260::clear_has_eps_sassoftlimitleftflg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Eps_0x260_260::clear_eps_sassoftlimitleftflg() {
  eps_sassoftlimitleftflg_ = 0;
  clear_has_eps_sassoftlimitleftflg();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::eps_sassoftlimitleftflg() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitleftflg)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType >(eps_sassoftlimitleftflg_);
}
inline void Eps_0x260_260::set_eps_sassoftlimitleftflg(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType_IsValid(value));
  set_has_eps_sassoftlimitleftflg();
  eps_sassoftlimitleftflg_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitleftflg)
}

// optional int32 eps_n_ecutemp = 13;
inline bool Eps_0x260_260::has_eps_n_ecutemp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_n_ecutemp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Eps_0x260_260::clear_has_eps_n_ecutemp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Eps_0x260_260::clear_eps_n_ecutemp() {
  eps_n_ecutemp_ = 0;
  clear_has_eps_n_ecutemp();
}
inline ::google::protobuf::int32 Eps_0x260_260::eps_n_ecutemp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_n_ecutemp)
  return eps_n_ecutemp_;
}
inline void Eps_0x260_260::set_eps_n_ecutemp(::google::protobuf::int32 value) {
  set_has_eps_n_ecutemp();
  eps_n_ecutemp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_n_ecutemp)
}

// optional double eps_n_performanceredu = 14;
inline bool Eps_0x260_260::has_eps_n_performanceredu() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_n_performanceredu() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Eps_0x260_260::clear_has_eps_n_performanceredu() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Eps_0x260_260::clear_eps_n_performanceredu() {
  eps_n_performanceredu_ = 0;
  clear_has_eps_n_performanceredu();
}
inline double Eps_0x260_260::eps_n_performanceredu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_n_performanceredu)
  return eps_n_performanceredu_;
}
inline void Eps_0x260_260::set_eps_n_performanceredu(double value) {
  set_has_eps_n_performanceredu();
  eps_n_performanceredu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_n_performanceredu)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
inline bool Eps_0x260_260::has_eps_st_dtcflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_st_dtcflag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Eps_0x260_260::clear_has_eps_st_dtcflag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Eps_0x260_260::clear_eps_st_dtcflag() {
  eps_st_dtcflag_ = 0;
  clear_has_eps_st_dtcflag();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260::eps_st_dtcflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_dtcflag)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType >(eps_st_dtcflag_);
}
inline void Eps_0x260_260::set_eps_st_dtcflag(::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType_IsValid(value));
  set_has_eps_st_dtcflag();
  eps_st_dtcflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_dtcflag)
}

// optional int32 rolling_counter_0x260 = 16;
inline bool Eps_0x260_260::has_rolling_counter_0x260() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Eps_0x260_260::set_has_rolling_counter_0x260() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Eps_0x260_260::clear_has_rolling_counter_0x260() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Eps_0x260_260::clear_rolling_counter_0x260() {
  rolling_counter_0x260_ = 0;
  clear_has_rolling_counter_0x260();
}
inline ::google::protobuf::int32 Eps_0x260_260::rolling_counter_0x260() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.rolling_counter_0x260)
  return rolling_counter_0x260_;
}
inline void Eps_0x260_260::set_rolling_counter_0x260(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x260();
  rolling_counter_0x260_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.rolling_counter_0x260)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
inline bool Eps_0x260_260::has_eps_sasindexsts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_sasindexsts() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Eps_0x260_260::clear_has_eps_sasindexsts() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Eps_0x260_260::clear_eps_sasindexsts() {
  eps_sasindexsts_ = 0;
  clear_has_eps_sasindexsts();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260::eps_sasindexsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_sasindexsts)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType >(eps_sasindexsts_);
}
inline void Eps_0x260_260::set_eps_sasindexsts(::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType_IsValid(value));
  set_has_eps_sasindexsts();
  eps_sasindexsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_sasindexsts)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
inline bool Eps_0x260_260::has_eps_s_warninglampyellow() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_s_warninglampyellow() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Eps_0x260_260::clear_has_eps_s_warninglampyellow() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Eps_0x260_260::clear_eps_s_warninglampyellow() {
  eps_s_warninglampyellow_ = 0;
  clear_has_eps_s_warninglampyellow();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260::eps_s_warninglampyellow() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_s_warninglampyellow)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType >(eps_s_warninglampyellow_);
}
inline void Eps_0x260_260::set_eps_s_warninglampyellow(::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType_IsValid(value));
  set_has_eps_s_warninglampyellow();
  eps_s_warninglampyellow_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_s_warninglampyellow)
}

// optional int32 checksum_0x260 = 19;
inline bool Eps_0x260_260::has_checksum_0x260() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Eps_0x260_260::set_has_checksum_0x260() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Eps_0x260_260::clear_has_checksum_0x260() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Eps_0x260_260::clear_checksum_0x260() {
  checksum_0x260_ = 0;
  clear_has_checksum_0x260();
}
inline ::google::protobuf::int32 Eps_0x260_260::checksum_0x260() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.checksum_0x260)
  return checksum_0x260_;
}
inline void Eps_0x260_260::set_checksum_0x260(::google::protobuf::int32 value) {
  set_has_checksum_0x260();
  checksum_0x260_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.checksum_0x260)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
inline bool Eps_0x260_260::has_eps_s_safelampred() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_s_safelampred() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Eps_0x260_260::clear_has_eps_s_safelampred() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Eps_0x260_260::clear_eps_s_safelampred() {
  eps_s_safelampred_ = 0;
  clear_has_eps_s_safelampred();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260::eps_s_safelampred() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_s_safelampred)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType >(eps_s_safelampred_);
}
inline void Eps_0x260_260::set_eps_s_safelampred(::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType_IsValid(value));
  set_has_eps_s_safelampred();
  eps_s_safelampred_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_s_safelampred)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
inline bool Eps_0x260_260::has_eps_f_loadinfo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Eps_0x260_260::set_has_eps_f_loadinfo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Eps_0x260_260::clear_has_eps_f_loadinfo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Eps_0x260_260::clear_eps_f_loadinfo() {
  eps_f_loadinfo_ = 0;
  clear_has_eps_f_loadinfo();
}
inline ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260::eps_f_loadinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_f_loadinfo)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType >(eps_f_loadinfo_);
}
inline void Eps_0x260_260::set_eps_f_loadinfo(::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType_IsValid(value));
  set_has_eps_f_loadinfo();
  eps_f_loadinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_f_loadinfo)
}

// -------------------------------------------------------------------

// Sod_0x275_275

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
inline bool Sod_0x275_275::has_sod_lca_warningreqright() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sod_0x275_275::set_has_sod_lca_warningreqright() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sod_0x275_275::clear_has_sod_lca_warningreqright() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sod_0x275_275::clear_sod_lca_warningreqright() {
  sod_lca_warningreqright_ = 0;
  clear_has_sod_lca_warningreqright();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::sod_lca_warningreqright() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqright)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType >(sod_lca_warningreqright_);
}
inline void Sod_0x275_275::set_sod_lca_warningreqright(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType_IsValid(value));
  set_has_sod_lca_warningreqright();
  sod_lca_warningreqright_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqright)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
inline bool Sod_0x275_275::has_sod_blis_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sod_0x275_275::set_has_sod_blis_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sod_0x275_275::clear_has_sod_blis_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sod_0x275_275::clear_sod_blis_active() {
  sod_blis_active_ = 0;
  clear_has_sod_blis_active();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::sod_blis_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_blis_active)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType >(sod_blis_active_);
}
inline void Sod_0x275_275::set_sod_blis_active(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType_IsValid(value));
  set_has_sod_blis_active();
  sod_blis_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_blis_active)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
inline bool Sod_0x275_275::has_sod_blis_display() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sod_0x275_275::set_has_sod_blis_display() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sod_0x275_275::clear_has_sod_blis_display() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sod_0x275_275::clear_sod_blis_display() {
  sod_blis_display_ = 0;
  clear_has_sod_blis_display();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::sod_blis_display() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_blis_display)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType >(sod_blis_display_);
}
inline void Sod_0x275_275::set_sod_blis_display(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType_IsValid(value));
  set_has_sod_blis_display();
  sod_blis_display_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_blis_display)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
inline bool Sod_0x275_275::has_sod_lca_warningreqleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sod_0x275_275::set_has_sod_lca_warningreqleft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sod_0x275_275::clear_has_sod_lca_warningreqleft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sod_0x275_275::clear_sod_lca_warningreqleft() {
  sod_lca_warningreqleft_ = 0;
  clear_has_sod_lca_warningreqleft();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::sod_lca_warningreqleft() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqleft)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType >(sod_lca_warningreqleft_);
}
inline void Sod_0x275_275::set_sod_lca_warningreqleft(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType_IsValid(value));
  set_has_sod_lca_warningreqleft();
  sod_lca_warningreqleft_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqleft)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
inline bool Sod_0x275_275::has_sod_doa_warningreqleftrear() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sod_0x275_275::set_has_sod_doa_warningreqleftrear() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sod_0x275_275::clear_has_sod_doa_warningreqleftrear() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sod_0x275_275::clear_sod_doa_warningreqleftrear() {
  sod_doa_warningreqleftrear_ = 0;
  clear_has_sod_doa_warningreqleftrear();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::sod_doa_warningreqleftrear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftrear)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType >(sod_doa_warningreqleftrear_);
}
inline void Sod_0x275_275::set_sod_doa_warningreqleftrear(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType_IsValid(value));
  set_has_sod_doa_warningreqleftrear();
  sod_doa_warningreqleftrear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftrear)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
inline bool Sod_0x275_275::has_sod_doa_warningreqleftfront() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sod_0x275_275::set_has_sod_doa_warningreqleftfront() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sod_0x275_275::clear_has_sod_doa_warningreqleftfront() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sod_0x275_275::clear_sod_doa_warningreqleftfront() {
  sod_doa_warningreqleftfront_ = 0;
  clear_has_sod_doa_warningreqleftfront();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::sod_doa_warningreqleftfront() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftfront)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType >(sod_doa_warningreqleftfront_);
}
inline void Sod_0x275_275::set_sod_doa_warningreqleftfront(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType_IsValid(value));
  set_has_sod_doa_warningreqleftfront();
  sod_doa_warningreqleftfront_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftfront)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
inline bool Sod_0x275_275::has_sod_cta_warningreqleft() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sod_0x275_275::set_has_sod_cta_warningreqleft() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sod_0x275_275::clear_has_sod_cta_warningreqleft() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sod_0x275_275::clear_sod_cta_warningreqleft() {
  sod_cta_warningreqleft_ = 0;
  clear_has_sod_cta_warningreqleft();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::sod_cta_warningreqleft() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqleft)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType >(sod_cta_warningreqleft_);
}
inline void Sod_0x275_275::set_sod_cta_warningreqleft(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType_IsValid(value));
  set_has_sod_cta_warningreqleft();
  sod_cta_warningreqleft_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqleft)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
inline bool Sod_0x275_275::has_sod_doa_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sod_0x275_275::set_has_sod_doa_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sod_0x275_275::clear_has_sod_doa_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sod_0x275_275::clear_sod_doa_state() {
  sod_doa_state_ = 0;
  clear_has_sod_doa_state();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType Sod_0x275_275::sod_doa_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_state)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType >(sod_doa_state_);
}
inline void Sod_0x275_275::set_sod_doa_state(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType_IsValid(value));
  set_has_sod_doa_state();
  sod_doa_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_state)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
inline bool Sod_0x275_275::has_sod_cta_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Sod_0x275_275::set_has_sod_cta_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Sod_0x275_275::clear_has_sod_cta_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Sod_0x275_275::clear_sod_cta_state() {
  sod_cta_state_ = 0;
  clear_has_sod_cta_state();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType Sod_0x275_275::sod_cta_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_cta_state)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType >(sod_cta_state_);
}
inline void Sod_0x275_275::set_sod_cta_state(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType_IsValid(value));
  set_has_sod_cta_state();
  sod_cta_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_cta_state)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
inline bool Sod_0x275_275::has_sod_sodlca_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Sod_0x275_275::set_has_sod_sodlca_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Sod_0x275_275::clear_has_sod_sodlca_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Sod_0x275_275::clear_sod_sodlca_state() {
  sod_sodlca_state_ = 0;
  clear_has_sod_sodlca_state();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275::sod_sodlca_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_sodlca_state)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType >(sod_sodlca_state_);
}
inline void Sod_0x275_275::set_sod_sodlca_state(::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType_IsValid(value));
  set_has_sod_sodlca_state();
  sod_sodlca_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_sodlca_state)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
inline bool Sod_0x275_275::has_doa_offtelltale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Sod_0x275_275::set_has_doa_offtelltale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Sod_0x275_275::clear_has_doa_offtelltale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Sod_0x275_275::clear_doa_offtelltale() {
  doa_offtelltale_ = 0;
  clear_has_doa_offtelltale();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275::doa_offtelltale() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.doa_offtelltale)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType >(doa_offtelltale_);
}
inline void Sod_0x275_275::set_doa_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType_IsValid(value));
  set_has_doa_offtelltale();
  doa_offtelltale_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.doa_offtelltale)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
inline bool Sod_0x275_275::has_sod_doa_warningreqrightrear() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Sod_0x275_275::set_has_sod_doa_warningreqrightrear() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Sod_0x275_275::clear_has_sod_doa_warningreqrightrear() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Sod_0x275_275::clear_sod_doa_warningreqrightrear() {
  sod_doa_warningreqrightrear_ = 0;
  clear_has_sod_doa_warningreqrightrear();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::sod_doa_warningreqrightrear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightrear)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType >(sod_doa_warningreqrightrear_);
}
inline void Sod_0x275_275::set_sod_doa_warningreqrightrear(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType_IsValid(value));
  set_has_sod_doa_warningreqrightrear();
  sod_doa_warningreqrightrear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightrear)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
inline bool Sod_0x275_275::has_cta_offtelltale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Sod_0x275_275::set_has_cta_offtelltale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Sod_0x275_275::clear_has_cta_offtelltale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Sod_0x275_275::clear_cta_offtelltale() {
  cta_offtelltale_ = 0;
  clear_has_cta_offtelltale();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275::cta_offtelltale() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.cta_offtelltale)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType >(cta_offtelltale_);
}
inline void Sod_0x275_275::set_cta_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType_IsValid(value));
  set_has_cta_offtelltale();
  cta_offtelltale_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.cta_offtelltale)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
inline bool Sod_0x275_275::has_sodlca_offtelltale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Sod_0x275_275::set_has_sodlca_offtelltale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Sod_0x275_275::clear_has_sodlca_offtelltale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Sod_0x275_275::clear_sodlca_offtelltale() {
  sodlca_offtelltale_ = 0;
  clear_has_sodlca_offtelltale();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275::sodlca_offtelltale() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sodlca_offtelltale)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType >(sodlca_offtelltale_);
}
inline void Sod_0x275_275::set_sodlca_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType_IsValid(value));
  set_has_sodlca_offtelltale();
  sodlca_offtelltale_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sodlca_offtelltale)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
inline bool Sod_0x275_275::has_sod_doa_warningreqrightfront() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Sod_0x275_275::set_has_sod_doa_warningreqrightfront() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Sod_0x275_275::clear_has_sod_doa_warningreqrightfront() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Sod_0x275_275::clear_sod_doa_warningreqrightfront() {
  sod_doa_warningreqrightfront_ = 0;
  clear_has_sod_doa_warningreqrightfront();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::sod_doa_warningreqrightfront() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightfront)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType >(sod_doa_warningreqrightfront_);
}
inline void Sod_0x275_275::set_sod_doa_warningreqrightfront(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType_IsValid(value));
  set_has_sod_doa_warningreqrightfront();
  sod_doa_warningreqrightfront_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightfront)
}

// optional int32 rolling_counter_0x275 = 16;
inline bool Sod_0x275_275::has_rolling_counter_0x275() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Sod_0x275_275::set_has_rolling_counter_0x275() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Sod_0x275_275::clear_has_rolling_counter_0x275() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Sod_0x275_275::clear_rolling_counter_0x275() {
  rolling_counter_0x275_ = 0;
  clear_has_rolling_counter_0x275();
}
inline ::google::protobuf::int32 Sod_0x275_275::rolling_counter_0x275() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.rolling_counter_0x275)
  return rolling_counter_0x275_;
}
inline void Sod_0x275_275::set_rolling_counter_0x275(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x275();
  rolling_counter_0x275_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.rolling_counter_0x275)
}

// optional int32 checksum_0x275 = 17;
inline bool Sod_0x275_275::has_checksum_0x275() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Sod_0x275_275::set_has_checksum_0x275() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Sod_0x275_275::clear_has_checksum_0x275() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Sod_0x275_275::clear_checksum_0x275() {
  checksum_0x275_ = 0;
  clear_has_checksum_0x275();
}
inline ::google::protobuf::int32 Sod_0x275_275::checksum_0x275() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.checksum_0x275)
  return checksum_0x275_;
}
inline void Sod_0x275_275::set_checksum_0x275(::google::protobuf::int32 value) {
  set_has_checksum_0x275();
  checksum_0x275_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.checksum_0x275)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
inline bool Sod_0x275_275::has_sod_cta_warningreqright() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Sod_0x275_275::set_has_sod_cta_warningreqright() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Sod_0x275_275::clear_has_sod_cta_warningreqright() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Sod_0x275_275::clear_sod_cta_warningreqright() {
  sod_cta_warningreqright_ = 0;
  clear_has_sod_cta_warningreqright();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::sod_cta_warningreqright() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqright)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType >(sod_cta_warningreqright_);
}
inline void Sod_0x275_275::set_sod_cta_warningreqright(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType_IsValid(value));
  set_has_sod_cta_warningreqright();
  sod_cta_warningreqright_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqright)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
inline bool Sod_0x275_275::has_sod_autoalignmentflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Sod_0x275_275::set_has_sod_autoalignmentflag() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Sod_0x275_275::clear_has_sod_autoalignmentflag() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Sod_0x275_275::clear_sod_autoalignmentflag() {
  sod_autoalignmentflag_ = 0;
  clear_has_sod_autoalignmentflag();
}
inline ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::sod_autoalignmentflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_autoalignmentflag)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType >(sod_autoalignmentflag_);
}
inline void Sod_0x275_275::set_sod_autoalignmentflag(::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType_IsValid(value));
  set_has_sod_autoalignmentflag();
  sod_autoalignmentflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_autoalignmentflag)
}

// -------------------------------------------------------------------

// Gw_tpms_tire_0x361_361

// optional double tpms_rf_pressure = 1;
inline bool Gw_tpms_tire_0x361_361::has_tpms_rf_pressure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_rf_pressure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_rf_pressure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_rf_pressure() {
  tpms_rf_pressure_ = 0;
  clear_has_tpms_rf_pressure();
}
inline double Gw_tpms_tire_0x361_361::tpms_rf_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure)
  return tpms_rf_pressure_;
}
inline void Gw_tpms_tire_0x361_361::set_tpms_rf_pressure(double value) {
  set_has_tpms_rf_pressure();
  tpms_rf_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure)
}

// optional double tpms_rr_pressure = 2;
inline bool Gw_tpms_tire_0x361_361::has_tpms_rr_pressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_rr_pressure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_rr_pressure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_rr_pressure() {
  tpms_rr_pressure_ = 0;
  clear_has_tpms_rr_pressure();
}
inline double Gw_tpms_tire_0x361_361::tpms_rr_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure)
  return tpms_rr_pressure_;
}
inline void Gw_tpms_tire_0x361_361::set_tpms_rr_pressure(double value) {
  set_has_tpms_rr_pressure();
  tpms_rr_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure)
}

// optional double tpms_lr_pressure = 3;
inline bool Gw_tpms_tire_0x361_361::has_tpms_lr_pressure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_lr_pressure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_lr_pressure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_lr_pressure() {
  tpms_lr_pressure_ = 0;
  clear_has_tpms_lr_pressure();
}
inline double Gw_tpms_tire_0x361_361::tpms_lr_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure)
  return tpms_lr_pressure_;
}
inline void Gw_tpms_tire_0x361_361::set_tpms_lr_pressure(double value) {
  set_has_tpms_lr_pressure();
  tpms_lr_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure)
}

// optional int32 tpms_tire_temperature = 4;
inline bool Gw_tpms_tire_0x361_361::has_tpms_tire_temperature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_tire_temperature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_tire_temperature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_tire_temperature() {
  tpms_tire_temperature_ = 0;
  clear_has_tpms_tire_temperature();
}
inline ::google::protobuf::int32 Gw_tpms_tire_0x361_361::tpms_tire_temperature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_tire_temperature)
  return tpms_tire_temperature_;
}
inline void Gw_tpms_tire_0x361_361::set_tpms_tire_temperature(::google::protobuf::int32 value) {
  set_has_tpms_tire_temperature();
  tpms_tire_temperature_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_tire_temperature)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
inline bool Gw_tpms_tire_0x361_361::has_tpms_lf_pressure_warning() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_lf_pressure_warning() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_lf_pressure_warning() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_lf_pressure_warning() {
  tpms_lf_pressure_warning_ = 0;
  clear_has_tpms_lf_pressure_warning();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::tpms_lf_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType >(tpms_lf_pressure_warning_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_lf_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_IsValid(value));
  set_has_tpms_lf_pressure_warning();
  tpms_lf_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
inline bool Gw_tpms_tire_0x361_361::has_tpms_rf_pressure_warning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_rf_pressure_warning() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_rf_pressure_warning() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_rf_pressure_warning() {
  tpms_rf_pressure_warning_ = 0;
  clear_has_tpms_rf_pressure_warning();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::tpms_rf_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType >(tpms_rf_pressure_warning_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_rf_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_IsValid(value));
  set_has_tpms_rf_pressure_warning();
  tpms_rf_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
inline bool Gw_tpms_tire_0x361_361::has_tpms_system_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_system_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_system_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_system_status() {
  tpms_system_status_ = 0;
  clear_has_tpms_system_status();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::tpms_system_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_system_status)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType >(tpms_system_status_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_system_status(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType_IsValid(value));
  set_has_tpms_system_status();
  tpms_system_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_system_status)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
inline bool Gw_tpms_tire_0x361_361::has_tpms_rr_pressure_warning() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_rr_pressure_warning() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_rr_pressure_warning() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_rr_pressure_warning() {
  tpms_rr_pressure_warning_ = 0;
  clear_has_tpms_rr_pressure_warning();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::tpms_rr_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType >(tpms_rr_pressure_warning_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_rr_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_IsValid(value));
  set_has_tpms_rr_pressure_warning();
  tpms_rr_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
inline bool Gw_tpms_tire_0x361_361::has_tpms_lr_pressure_warning() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_lr_pressure_warning() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_lr_pressure_warning() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_lr_pressure_warning() {
  tpms_lr_pressure_warning_ = 0;
  clear_has_tpms_lr_pressure_warning();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::tpms_lr_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType >(tpms_lr_pressure_warning_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_lr_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_IsValid(value));
  set_has_tpms_lr_pressure_warning();
  tpms_lr_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
inline bool Gw_tpms_tire_0x361_361::has_tpms_temperature_warning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_temperature_warning() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_temperature_warning() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_temperature_warning() {
  tpms_temperature_warning_ = 0;
  clear_has_tpms_temperature_warning();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361::tpms_temperature_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_temperature_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType >(tpms_temperature_warning_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_temperature_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_IsValid(value));
  set_has_tpms_temperature_warning();
  tpms_temperature_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_temperature_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
inline bool Gw_tpms_tire_0x361_361::has_tpms_resrved() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_resrved() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_resrved() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_resrved() {
  tpms_resrved_ = 0;
  clear_has_tpms_resrved();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361::tpms_resrved() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_resrved)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType >(tpms_resrved_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_resrved(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType_IsValid(value));
  set_has_tpms_resrved();
  tpms_resrved_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_resrved)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
inline bool Gw_tpms_tire_0x361_361::has_tire_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tire_position() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tire_position() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gw_tpms_tire_0x361_361::clear_tire_position() {
  tire_position_ = 0;
  clear_has_tire_position();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::tire_position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tire_position)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType >(tire_position_);
}
inline void Gw_tpms_tire_0x361_361::set_tire_position(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType_IsValid(value));
  set_has_tire_position();
  tire_position_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tire_position)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
inline bool Gw_tpms_tire_0x361_361::has_tpms_lamp_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_lamp_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_lamp_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_lamp_status() {
  tpms_lamp_status_ = 0;
  clear_has_tpms_lamp_status();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::tpms_lamp_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lamp_status)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType >(tpms_lamp_status_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_lamp_status(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_IsValid(value));
  set_has_tpms_lamp_status();
  tpms_lamp_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lamp_status)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
inline bool Gw_tpms_tire_0x361_361::has_tpms_al_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_al_state() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_al_state() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_al_state() {
  tpms_al_state_ = 0;
  clear_has_tpms_al_state();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::tpms_al_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_al_state)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType >(tpms_al_state_);
}
inline void Gw_tpms_tire_0x361_361::set_tpms_al_state(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType_IsValid(value));
  set_has_tpms_al_state();
  tpms_al_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_al_state)
}

// optional double tpms_lf_pressure = 15;
inline bool Gw_tpms_tire_0x361_361::has_tpms_lf_pressure() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Gw_tpms_tire_0x361_361::set_has_tpms_lf_pressure() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Gw_tpms_tire_0x361_361::clear_has_tpms_lf_pressure() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Gw_tpms_tire_0x361_361::clear_tpms_lf_pressure() {
  tpms_lf_pressure_ = 0;
  clear_has_tpms_lf_pressure();
}
inline double Gw_tpms_tire_0x361_361::tpms_lf_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure)
  return tpms_lf_pressure_;
}
inline void Gw_tpms_tire_0x361_361::set_tpms_lf_pressure(double value) {
  set_has_tpms_lf_pressure();
  tpms_lf_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure)
}

// -------------------------------------------------------------------

// Ins_datainfo_506

// optional int32 ins_gpsflag_pos = 1;
inline bool Ins_datainfo_506::has_ins_gpsflag_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_datainfo_506::set_has_ins_gpsflag_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_datainfo_506::clear_has_ins_gpsflag_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_datainfo_506::clear_ins_gpsflag_pos() {
  ins_gpsflag_pos_ = 0;
  clear_has_ins_gpsflag_pos();
}
inline ::google::protobuf::int32 Ins_datainfo_506::ins_gpsflag_pos() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_pos)
  return ins_gpsflag_pos_;
}
inline void Ins_datainfo_506::set_ins_gpsflag_pos(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_pos();
  ins_gpsflag_pos_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_pos)
}

// optional int32 ins_numsv = 2;
inline bool Ins_datainfo_506::has_ins_numsv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_datainfo_506::set_has_ins_numsv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_datainfo_506::clear_has_ins_numsv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_datainfo_506::clear_ins_numsv() {
  ins_numsv_ = 0;
  clear_has_ins_numsv();
}
inline ::google::protobuf::int32 Ins_datainfo_506::ins_numsv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_numsv)
  return ins_numsv_;
}
inline void Ins_datainfo_506::set_ins_numsv(::google::protobuf::int32 value) {
  set_has_ins_numsv();
  ins_numsv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_numsv)
}

// optional int32 ins_gpsflag_heading = 3;
inline bool Ins_datainfo_506::has_ins_gpsflag_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins_datainfo_506::set_has_ins_gpsflag_heading() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins_datainfo_506::clear_has_ins_gpsflag_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins_datainfo_506::clear_ins_gpsflag_heading() {
  ins_gpsflag_heading_ = 0;
  clear_has_ins_gpsflag_heading();
}
inline ::google::protobuf::int32 Ins_datainfo_506::ins_gpsflag_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_heading)
  return ins_gpsflag_heading_;
}
inline void Ins_datainfo_506::set_ins_gpsflag_heading(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_heading();
  ins_gpsflag_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_heading)
}

// optional int32 ins_gps_age = 4;
inline bool Ins_datainfo_506::has_ins_gps_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ins_datainfo_506::set_has_ins_gps_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ins_datainfo_506::clear_has_ins_gps_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ins_datainfo_506::clear_ins_gps_age() {
  ins_gps_age_ = 0;
  clear_has_ins_gps_age();
}
inline ::google::protobuf::int32 Ins_datainfo_506::ins_gps_age() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_gps_age)
  return ins_gps_age_;
}
inline void Ins_datainfo_506::set_ins_gps_age(::google::protobuf::int32 value) {
  set_has_ins_gps_age();
  ins_gps_age_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_gps_age)
}

// optional int32 ins_car_status = 5;
inline bool Ins_datainfo_506::has_ins_car_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ins_datainfo_506::set_has_ins_car_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ins_datainfo_506::clear_has_ins_car_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ins_datainfo_506::clear_ins_car_status() {
  ins_car_status_ = 0;
  clear_has_ins_car_status();
}
inline ::google::protobuf::int32 Ins_datainfo_506::ins_car_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_car_status)
  return ins_car_status_;
}
inline void Ins_datainfo_506::set_ins_car_status(::google::protobuf::int32 value) {
  set_has_ins_car_status();
  ins_car_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_car_status)
}

// optional int32 ins_status = 6;
inline bool Ins_datainfo_506::has_ins_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ins_datainfo_506::set_has_ins_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ins_datainfo_506::clear_has_ins_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ins_datainfo_506::clear_ins_status() {
  ins_status_ = 0;
  clear_has_ins_status();
}
inline ::google::protobuf::int32 Ins_datainfo_506::ins_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_status)
  return ins_status_;
}
inline void Ins_datainfo_506::set_ins_status(::google::protobuf::int32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_status)
}

// -------------------------------------------------------------------

// Ins_std_507

// optional double ins_std_lat = 1;
inline bool Ins_std_507::has_ins_std_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_std_507::set_has_ins_std_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_std_507::clear_has_ins_std_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_std_507::clear_ins_std_lat() {
  ins_std_lat_ = 0;
  clear_has_ins_std_lat();
}
inline double Ins_std_507::ins_std_lat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.ins_std_lat)
  return ins_std_lat_;
}
inline void Ins_std_507::set_ins_std_lat(double value) {
  set_has_ins_std_lat();
  ins_std_lat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.ins_std_lat)
}

// optional double ins_std_lon = 2;
inline bool Ins_std_507::has_ins_std_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_std_507::set_has_ins_std_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_std_507::clear_has_ins_std_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_std_507::clear_ins_std_lon() {
  ins_std_lon_ = 0;
  clear_has_ins_std_lon();
}
inline double Ins_std_507::ins_std_lon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.ins_std_lon)
  return ins_std_lon_;
}
inline void Ins_std_507::set_ins_std_lon(double value) {
  set_has_ins_std_lon();
  ins_std_lon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.ins_std_lon)
}

// optional double ins_std_locatheight = 3;
inline bool Ins_std_507::has_ins_std_locatheight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins_std_507::set_has_ins_std_locatheight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins_std_507::clear_has_ins_std_locatheight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins_std_507::clear_ins_std_locatheight() {
  ins_std_locatheight_ = 0;
  clear_has_ins_std_locatheight();
}
inline double Ins_std_507::ins_std_locatheight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.ins_std_locatheight)
  return ins_std_locatheight_;
}
inline void Ins_std_507::set_ins_std_locatheight(double value) {
  set_has_ins_std_locatheight();
  ins_std_locatheight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.ins_std_locatheight)
}

// optional double inins_std_heading = 4;
inline bool Ins_std_507::has_inins_std_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ins_std_507::set_has_inins_std_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ins_std_507::clear_has_inins_std_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ins_std_507::clear_inins_std_heading() {
  inins_std_heading_ = 0;
  clear_has_inins_std_heading();
}
inline double Ins_std_507::inins_std_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.inins_std_heading)
  return inins_std_heading_;
}
inline void Ins_std_507::set_inins_std_heading(double value) {
  set_has_inins_std_heading();
  inins_std_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.inins_std_heading)
}

// -------------------------------------------------------------------

// Ins_latitudelongitude_504

// optional double ins__latitude = 1;
inline bool Ins_latitudelongitude_504::has_ins__latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_latitudelongitude_504::set_has_ins__latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_latitudelongitude_504::clear_has_ins__latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_latitudelongitude_504::clear_ins__latitude() {
  ins__latitude_ = 0;
  clear_has_ins__latitude();
}
inline double Ins_latitudelongitude_504::ins__latitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_latitudelongitude_504.ins__latitude)
  return ins__latitude_;
}
inline void Ins_latitudelongitude_504::set_ins__latitude(double value) {
  set_has_ins__latitude();
  ins__latitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_latitudelongitude_504.ins__latitude)
}

// optional double ins_longitude = 2;
inline bool Ins_latitudelongitude_504::has_ins_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_latitudelongitude_504::set_has_ins_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_latitudelongitude_504::clear_has_ins_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_latitudelongitude_504::clear_ins_longitude() {
  ins_longitude_ = 0;
  clear_has_ins_longitude();
}
inline double Ins_latitudelongitude_504::ins_longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_latitudelongitude_504.ins_longitude)
  return ins_longitude_;
}
inline void Ins_latitudelongitude_504::set_ins_longitude(double value) {
  set_has_ins_longitude();
  ins_longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_latitudelongitude_504.ins_longitude)
}

// -------------------------------------------------------------------

// Ins_speed_505

// optional double ins_northspd = 1;
inline bool Ins_speed_505::has_ins_northspd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_speed_505::set_has_ins_northspd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_speed_505::clear_has_ins_northspd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_speed_505::clear_ins_northspd() {
  ins_northspd_ = 0;
  clear_has_ins_northspd();
}
inline double Ins_speed_505::ins_northspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_speed_505.ins_northspd)
  return ins_northspd_;
}
inline void Ins_speed_505::set_ins_northspd(double value) {
  set_has_ins_northspd();
  ins_northspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_speed_505.ins_northspd)
}

// optional double ins_eastspd = 2;
inline bool Ins_speed_505::has_ins_eastspd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_speed_505::set_has_ins_eastspd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_speed_505::clear_has_ins_eastspd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_speed_505::clear_ins_eastspd() {
  ins_eastspd_ = 0;
  clear_has_ins_eastspd();
}
inline double Ins_speed_505::ins_eastspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_speed_505.ins_eastspd)
  return ins_eastspd_;
}
inline void Ins_speed_505::set_ins_eastspd(double value) {
  set_has_ins_eastspd();
  ins_eastspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_speed_505.ins_eastspd)
}

// optional double ins_togroundspd = 3;
inline bool Ins_speed_505::has_ins_togroundspd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins_speed_505::set_has_ins_togroundspd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins_speed_505::clear_has_ins_togroundspd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins_speed_505::clear_ins_togroundspd() {
  ins_togroundspd_ = 0;
  clear_has_ins_togroundspd();
}
inline double Ins_speed_505::ins_togroundspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_speed_505.ins_togroundspd)
  return ins_togroundspd_;
}
inline void Ins_speed_505::set_ins_togroundspd(double value) {
  set_has_ins_togroundspd();
  ins_togroundspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_speed_505.ins_togroundspd)
}

// -------------------------------------------------------------------

// Ins_headingpitchroll_502

// optional double ins_pitchangle = 1;
inline bool Ins_headingpitchroll_502::has_ins_pitchangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_headingpitchroll_502::set_has_ins_pitchangle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_headingpitchroll_502::clear_has_ins_pitchangle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_headingpitchroll_502::clear_ins_pitchangle() {
  ins_pitchangle_ = 0;
  clear_has_ins_pitchangle();
}
inline double Ins_headingpitchroll_502::ins_pitchangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_headingpitchroll_502.ins_pitchangle)
  return ins_pitchangle_;
}
inline void Ins_headingpitchroll_502::set_ins_pitchangle(double value) {
  set_has_ins_pitchangle();
  ins_pitchangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_headingpitchroll_502.ins_pitchangle)
}

// optional double ins_rollangle = 2;
inline bool Ins_headingpitchroll_502::has_ins_rollangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_headingpitchroll_502::set_has_ins_rollangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_headingpitchroll_502::clear_has_ins_rollangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_headingpitchroll_502::clear_ins_rollangle() {
  ins_rollangle_ = 0;
  clear_has_ins_rollangle();
}
inline double Ins_headingpitchroll_502::ins_rollangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_headingpitchroll_502.ins_rollangle)
  return ins_rollangle_;
}
inline void Ins_headingpitchroll_502::set_ins_rollangle(double value) {
  set_has_ins_rollangle();
  ins_rollangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_headingpitchroll_502.ins_rollangle)
}

// optional double ins_headingangle = 3;
inline bool Ins_headingpitchroll_502::has_ins_headingangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins_headingpitchroll_502::set_has_ins_headingangle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins_headingpitchroll_502::clear_has_ins_headingangle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins_headingpitchroll_502::clear_ins_headingangle() {
  ins_headingangle_ = 0;
  clear_has_ins_headingangle();
}
inline double Ins_headingpitchroll_502::ins_headingangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_headingpitchroll_502.ins_headingangle)
  return ins_headingangle_;
}
inline void Ins_headingpitchroll_502::set_ins_headingangle(double value) {
  set_has_ins_headingangle();
  ins_headingangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_headingpitchroll_502.ins_headingangle)
}

// -------------------------------------------------------------------

// Ins_heightandtime_503

// optional double ins_locatheight = 1;
inline bool Ins_heightandtime_503::has_ins_locatheight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_heightandtime_503::set_has_ins_locatheight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_heightandtime_503::clear_has_ins_locatheight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_heightandtime_503::clear_ins_locatheight() {
  ins_locatheight_ = 0;
  clear_has_ins_locatheight();
}
inline double Ins_heightandtime_503::ins_locatheight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_heightandtime_503.ins_locatheight)
  return ins_locatheight_;
}
inline void Ins_heightandtime_503::set_ins_locatheight(double value) {
  set_has_ins_locatheight();
  ins_locatheight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_heightandtime_503.ins_locatheight)
}

// optional int32 ins_time = 2;
inline bool Ins_heightandtime_503::has_ins_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_heightandtime_503::set_has_ins_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_heightandtime_503::clear_has_ins_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_heightandtime_503::clear_ins_time() {
  ins_time_ = 0;
  clear_has_ins_time();
}
inline ::google::protobuf::int32 Ins_heightandtime_503::ins_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_heightandtime_503.ins_time)
  return ins_time_;
}
inline void Ins_heightandtime_503::set_ins_time(::google::protobuf::int32 value) {
  set_has_ins_time();
  ins_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_heightandtime_503.ins_time)
}

// -------------------------------------------------------------------

// Ins_gyro_501

// optional double gyro_x = 1;
inline bool Ins_gyro_501::has_gyro_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_gyro_501::set_has_gyro_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_gyro_501::clear_has_gyro_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_gyro_501::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
inline double Ins_gyro_501::gyro_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_gyro_501.gyro_x)
  return gyro_x_;
}
inline void Ins_gyro_501::set_gyro_x(double value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_gyro_501.gyro_x)
}

// optional double gyro_y = 2;
inline bool Ins_gyro_501::has_gyro_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_gyro_501::set_has_gyro_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_gyro_501::clear_has_gyro_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_gyro_501::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
inline double Ins_gyro_501::gyro_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_gyro_501.gyro_y)
  return gyro_y_;
}
inline void Ins_gyro_501::set_gyro_y(double value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_gyro_501.gyro_y)
}

// optional double gyro_z = 3;
inline bool Ins_gyro_501::has_gyro_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins_gyro_501::set_has_gyro_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins_gyro_501::clear_has_gyro_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins_gyro_501::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
inline double Ins_gyro_501::gyro_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_gyro_501.gyro_z)
  return gyro_z_;
}
inline void Ins_gyro_501::set_gyro_z(double value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_gyro_501.gyro_z)
}

// -------------------------------------------------------------------

// Ins_acc_500

// optional double acc_x = 1;
inline bool Ins_acc_500::has_acc_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins_acc_500::set_has_acc_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins_acc_500::clear_has_acc_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins_acc_500::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
inline double Ins_acc_500::acc_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_acc_500.acc_x)
  return acc_x_;
}
inline void Ins_acc_500::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_acc_500.acc_x)
}

// optional double acc_y = 2;
inline bool Ins_acc_500::has_acc_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins_acc_500::set_has_acc_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins_acc_500::clear_has_acc_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins_acc_500::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
inline double Ins_acc_500::acc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_acc_500.acc_y)
  return acc_y_;
}
inline void Ins_acc_500::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_acc_500.acc_y)
}

// optional double acc_z = 3;
inline bool Ins_acc_500::has_acc_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins_acc_500::set_has_acc_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins_acc_500::clear_has_acc_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins_acc_500::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
inline double Ins_acc_500::acc_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_acc_500.acc_z)
  return acc_z_;
}
inline void Ins_acc_500::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_acc_500.acc_z)
}

// -------------------------------------------------------------------

// Cx75

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
inline bool Cx75::has_gw_ems_sts_0x151_151() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cx75::set_has_gw_ems_sts_0x151_151() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cx75::clear_has_gw_ems_sts_0x151_151() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cx75::clear_gw_ems_sts_0x151_151() {
  if (gw_ems_sts_0x151_151_ != NULL) gw_ems_sts_0x151_151_->::jmc_auto::canbus::Gw_ems_sts_0x151_151::Clear();
  clear_has_gw_ems_sts_0x151_151();
}
inline const ::jmc_auto::canbus::Gw_ems_sts_0x151_151& Cx75::gw_ems_sts_0x151_151() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
  return gw_ems_sts_0x151_151_ != NULL ? *gw_ems_sts_0x151_151_
                         : *::jmc_auto::canbus::Gw_ems_sts_0x151_151::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ems_sts_0x151_151* Cx75::mutable_gw_ems_sts_0x151_151() {
  set_has_gw_ems_sts_0x151_151();
  if (gw_ems_sts_0x151_151_ == NULL) {
    gw_ems_sts_0x151_151_ = new ::jmc_auto::canbus::Gw_ems_sts_0x151_151;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
  return gw_ems_sts_0x151_151_;
}
inline ::jmc_auto::canbus::Gw_ems_sts_0x151_151* Cx75::release_gw_ems_sts_0x151_151() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
  clear_has_gw_ems_sts_0x151_151();
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151* temp = gw_ems_sts_0x151_151_;
  gw_ems_sts_0x151_151_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ems_sts_0x151_151(::jmc_auto::canbus::Gw_ems_sts_0x151_151* gw_ems_sts_0x151_151) {
  delete gw_ems_sts_0x151_151_;
  gw_ems_sts_0x151_151_ = gw_ems_sts_0x151_151;
  if (gw_ems_sts_0x151_151) {
    set_has_gw_ems_sts_0x151_151();
  } else {
    clear_has_gw_ems_sts_0x151_151();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
inline bool Cx75::has_esp_raw_0x212_212() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cx75::set_has_esp_raw_0x212_212() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Cx75::clear_has_esp_raw_0x212_212() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Cx75::clear_esp_raw_0x212_212() {
  if (esp_raw_0x212_212_ != NULL) esp_raw_0x212_212_->::jmc_auto::canbus::Esp_raw_0x212_212::Clear();
  clear_has_esp_raw_0x212_212();
}
inline const ::jmc_auto::canbus::Esp_raw_0x212_212& Cx75::esp_raw_0x212_212() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
  return esp_raw_0x212_212_ != NULL ? *esp_raw_0x212_212_
                         : *::jmc_auto::canbus::Esp_raw_0x212_212::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_raw_0x212_212* Cx75::mutable_esp_raw_0x212_212() {
  set_has_esp_raw_0x212_212();
  if (esp_raw_0x212_212_ == NULL) {
    esp_raw_0x212_212_ = new ::jmc_auto::canbus::Esp_raw_0x212_212;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
  return esp_raw_0x212_212_;
}
inline ::jmc_auto::canbus::Esp_raw_0x212_212* Cx75::release_esp_raw_0x212_212() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
  clear_has_esp_raw_0x212_212();
  ::jmc_auto::canbus::Esp_raw_0x212_212* temp = esp_raw_0x212_212_;
  esp_raw_0x212_212_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_raw_0x212_212(::jmc_auto::canbus::Esp_raw_0x212_212* esp_raw_0x212_212) {
  delete esp_raw_0x212_212_;
  esp_raw_0x212_212_ = esp_raw_0x212_212;
  if (esp_raw_0x212_212) {
    set_has_esp_raw_0x212_212();
  } else {
    clear_has_esp_raw_0x212_212();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
inline bool Cx75::has_gw_bcm_door_0x310_310() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Cx75::set_has_gw_bcm_door_0x310_310() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Cx75::clear_has_gw_bcm_door_0x310_310() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Cx75::clear_gw_bcm_door_0x310_310() {
  if (gw_bcm_door_0x310_310_ != NULL) gw_bcm_door_0x310_310_->::jmc_auto::canbus::Gw_bcm_door_0x310_310::Clear();
  clear_has_gw_bcm_door_0x310_310();
}
inline const ::jmc_auto::canbus::Gw_bcm_door_0x310_310& Cx75::gw_bcm_door_0x310_310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
  return gw_bcm_door_0x310_310_ != NULL ? *gw_bcm_door_0x310_310_
                         : *::jmc_auto::canbus::Gw_bcm_door_0x310_310::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310* Cx75::mutable_gw_bcm_door_0x310_310() {
  set_has_gw_bcm_door_0x310_310();
  if (gw_bcm_door_0x310_310_ == NULL) {
    gw_bcm_door_0x310_310_ = new ::jmc_auto::canbus::Gw_bcm_door_0x310_310;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
  return gw_bcm_door_0x310_310_;
}
inline ::jmc_auto::canbus::Gw_bcm_door_0x310_310* Cx75::release_gw_bcm_door_0x310_310() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
  clear_has_gw_bcm_door_0x310_310();
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310* temp = gw_bcm_door_0x310_310_;
  gw_bcm_door_0x310_310_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_bcm_door_0x310_310(::jmc_auto::canbus::Gw_bcm_door_0x310_310* gw_bcm_door_0x310_310) {
  delete gw_bcm_door_0x310_310_;
  gw_bcm_door_0x310_310_ = gw_bcm_door_0x310_310;
  if (gw_bcm_door_0x310_310) {
    set_has_gw_bcm_door_0x310_310();
  } else {
    clear_has_gw_bcm_door_0x310_310();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
}

// optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
inline bool Cx75::has_pam_0x270_270() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Cx75::set_has_pam_0x270_270() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Cx75::clear_has_pam_0x270_270() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Cx75::clear_pam_0x270_270() {
  if (pam_0x270_270_ != NULL) pam_0x270_270_->::jmc_auto::canbus::Pam_0x270_270::Clear();
  clear_has_pam_0x270_270();
}
inline const ::jmc_auto::canbus::Pam_0x270_270& Cx75::pam_0x270_270() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.pam_0x270_270)
  return pam_0x270_270_ != NULL ? *pam_0x270_270_
                         : *::jmc_auto::canbus::Pam_0x270_270::internal_default_instance();
}
inline ::jmc_auto::canbus::Pam_0x270_270* Cx75::mutable_pam_0x270_270() {
  set_has_pam_0x270_270();
  if (pam_0x270_270_ == NULL) {
    pam_0x270_270_ = new ::jmc_auto::canbus::Pam_0x270_270;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.pam_0x270_270)
  return pam_0x270_270_;
}
inline ::jmc_auto::canbus::Pam_0x270_270* Cx75::release_pam_0x270_270() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.pam_0x270_270)
  clear_has_pam_0x270_270();
  ::jmc_auto::canbus::Pam_0x270_270* temp = pam_0x270_270_;
  pam_0x270_270_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_pam_0x270_270(::jmc_auto::canbus::Pam_0x270_270* pam_0x270_270) {
  delete pam_0x270_270_;
  pam_0x270_270_ = pam_0x270_270;
  if (pam_0x270_270) {
    set_has_pam_0x270_270();
  } else {
    clear_has_pam_0x270_270();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.pam_0x270_270)
}

// optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
inline bool Cx75::has_pam_0x271_271() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Cx75::set_has_pam_0x271_271() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Cx75::clear_has_pam_0x271_271() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Cx75::clear_pam_0x271_271() {
  if (pam_0x271_271_ != NULL) pam_0x271_271_->::jmc_auto::canbus::Pam_0x271_271::Clear();
  clear_has_pam_0x271_271();
}
inline const ::jmc_auto::canbus::Pam_0x271_271& Cx75::pam_0x271_271() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.pam_0x271_271)
  return pam_0x271_271_ != NULL ? *pam_0x271_271_
                         : *::jmc_auto::canbus::Pam_0x271_271::internal_default_instance();
}
inline ::jmc_auto::canbus::Pam_0x271_271* Cx75::mutable_pam_0x271_271() {
  set_has_pam_0x271_271();
  if (pam_0x271_271_ == NULL) {
    pam_0x271_271_ = new ::jmc_auto::canbus::Pam_0x271_271;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.pam_0x271_271)
  return pam_0x271_271_;
}
inline ::jmc_auto::canbus::Pam_0x271_271* Cx75::release_pam_0x271_271() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.pam_0x271_271)
  clear_has_pam_0x271_271();
  ::jmc_auto::canbus::Pam_0x271_271* temp = pam_0x271_271_;
  pam_0x271_271_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_pam_0x271_271(::jmc_auto::canbus::Pam_0x271_271* pam_0x271_271) {
  delete pam_0x271_271_;
  pam_0x271_271_ = pam_0x271_271;
  if (pam_0x271_271) {
    set_has_pam_0x271_271();
  } else {
    clear_has_pam_0x271_271();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.pam_0x271_271)
}

// optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
inline bool Cx75::has_pam_0x272_272() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Cx75::set_has_pam_0x272_272() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Cx75::clear_has_pam_0x272_272() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Cx75::clear_pam_0x272_272() {
  if (pam_0x272_272_ != NULL) pam_0x272_272_->::jmc_auto::canbus::Pam_0x272_272::Clear();
  clear_has_pam_0x272_272();
}
inline const ::jmc_auto::canbus::Pam_0x272_272& Cx75::pam_0x272_272() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.pam_0x272_272)
  return pam_0x272_272_ != NULL ? *pam_0x272_272_
                         : *::jmc_auto::canbus::Pam_0x272_272::internal_default_instance();
}
inline ::jmc_auto::canbus::Pam_0x272_272* Cx75::mutable_pam_0x272_272() {
  set_has_pam_0x272_272();
  if (pam_0x272_272_ == NULL) {
    pam_0x272_272_ = new ::jmc_auto::canbus::Pam_0x272_272;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.pam_0x272_272)
  return pam_0x272_272_;
}
inline ::jmc_auto::canbus::Pam_0x272_272* Cx75::release_pam_0x272_272() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.pam_0x272_272)
  clear_has_pam_0x272_272();
  ::jmc_auto::canbus::Pam_0x272_272* temp = pam_0x272_272_;
  pam_0x272_272_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_pam_0x272_272(::jmc_auto::canbus::Pam_0x272_272* pam_0x272_272) {
  delete pam_0x272_272_;
  pam_0x272_272_ = pam_0x272_272;
  if (pam_0x272_272) {
    set_has_pam_0x272_272();
  } else {
    clear_has_pam_0x272_272();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.pam_0x272_272)
}

// optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
inline bool Cx75::has_mrr_0x238_238() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Cx75::set_has_mrr_0x238_238() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Cx75::clear_has_mrr_0x238_238() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Cx75::clear_mrr_0x238_238() {
  if (mrr_0x238_238_ != NULL) mrr_0x238_238_->::jmc_auto::canbus::Mrr_0x238_238::Clear();
  clear_has_mrr_0x238_238();
}
inline const ::jmc_auto::canbus::Mrr_0x238_238& Cx75::mrr_0x238_238() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_0x238_238)
  return mrr_0x238_238_ != NULL ? *mrr_0x238_238_
                         : *::jmc_auto::canbus::Mrr_0x238_238::internal_default_instance();
}
inline ::jmc_auto::canbus::Mrr_0x238_238* Cx75::mutable_mrr_0x238_238() {
  set_has_mrr_0x238_238();
  if (mrr_0x238_238_ == NULL) {
    mrr_0x238_238_ = new ::jmc_auto::canbus::Mrr_0x238_238;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_0x238_238)
  return mrr_0x238_238_;
}
inline ::jmc_auto::canbus::Mrr_0x238_238* Cx75::release_mrr_0x238_238() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_0x238_238)
  clear_has_mrr_0x238_238();
  ::jmc_auto::canbus::Mrr_0x238_238* temp = mrr_0x238_238_;
  mrr_0x238_238_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_mrr_0x238_238(::jmc_auto::canbus::Mrr_0x238_238* mrr_0x238_238) {
  delete mrr_0x238_238_;
  mrr_0x238_238_ = mrr_0x238_238;
  if (mrr_0x238_238) {
    set_has_mrr_0x238_238();
  } else {
    clear_has_mrr_0x238_238();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_0x238_238)
}

// optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
inline bool Cx75::has_mrr_0x239_239() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Cx75::set_has_mrr_0x239_239() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Cx75::clear_has_mrr_0x239_239() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Cx75::clear_mrr_0x239_239() {
  if (mrr_0x239_239_ != NULL) mrr_0x239_239_->::jmc_auto::canbus::Mrr_0x239_239::Clear();
  clear_has_mrr_0x239_239();
}
inline const ::jmc_auto::canbus::Mrr_0x239_239& Cx75::mrr_0x239_239() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_0x239_239)
  return mrr_0x239_239_ != NULL ? *mrr_0x239_239_
                         : *::jmc_auto::canbus::Mrr_0x239_239::internal_default_instance();
}
inline ::jmc_auto::canbus::Mrr_0x239_239* Cx75::mutable_mrr_0x239_239() {
  set_has_mrr_0x239_239();
  if (mrr_0x239_239_ == NULL) {
    mrr_0x239_239_ = new ::jmc_auto::canbus::Mrr_0x239_239;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_0x239_239)
  return mrr_0x239_239_;
}
inline ::jmc_auto::canbus::Mrr_0x239_239* Cx75::release_mrr_0x239_239() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_0x239_239)
  clear_has_mrr_0x239_239();
  ::jmc_auto::canbus::Mrr_0x239_239* temp = mrr_0x239_239_;
  mrr_0x239_239_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_mrr_0x239_239(::jmc_auto::canbus::Mrr_0x239_239* mrr_0x239_239) {
  delete mrr_0x239_239_;
  mrr_0x239_239_ = mrr_0x239_239;
  if (mrr_0x239_239) {
    set_has_mrr_0x239_239();
  } else {
    clear_has_mrr_0x239_239();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_0x239_239)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
inline bool Cx75::has_esp_direction_0x235_235() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Cx75::set_has_esp_direction_0x235_235() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Cx75::clear_has_esp_direction_0x235_235() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Cx75::clear_esp_direction_0x235_235() {
  if (esp_direction_0x235_235_ != NULL) esp_direction_0x235_235_->::jmc_auto::canbus::Esp_direction_0x235_235::Clear();
  clear_has_esp_direction_0x235_235();
}
inline const ::jmc_auto::canbus::Esp_direction_0x235_235& Cx75::esp_direction_0x235_235() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
  return esp_direction_0x235_235_ != NULL ? *esp_direction_0x235_235_
                         : *::jmc_auto::canbus::Esp_direction_0x235_235::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235* Cx75::mutable_esp_direction_0x235_235() {
  set_has_esp_direction_0x235_235();
  if (esp_direction_0x235_235_ == NULL) {
    esp_direction_0x235_235_ = new ::jmc_auto::canbus::Esp_direction_0x235_235;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
  return esp_direction_0x235_235_;
}
inline ::jmc_auto::canbus::Esp_direction_0x235_235* Cx75::release_esp_direction_0x235_235() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
  clear_has_esp_direction_0x235_235();
  ::jmc_auto::canbus::Esp_direction_0x235_235* temp = esp_direction_0x235_235_;
  esp_direction_0x235_235_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_direction_0x235_235(::jmc_auto::canbus::Esp_direction_0x235_235* esp_direction_0x235_235) {
  delete esp_direction_0x235_235_;
  esp_direction_0x235_235_ = esp_direction_0x235_235;
  if (esp_direction_0x235_235) {
    set_has_esp_direction_0x235_235();
  } else {
    clear_has_esp_direction_0x235_235();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
inline bool Cx75::has_esp_advanced_0x234_234() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Cx75::set_has_esp_advanced_0x234_234() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Cx75::clear_has_esp_advanced_0x234_234() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Cx75::clear_esp_advanced_0x234_234() {
  if (esp_advanced_0x234_234_ != NULL) esp_advanced_0x234_234_->::jmc_auto::canbus::Esp_advanced_0x234_234::Clear();
  clear_has_esp_advanced_0x234_234();
}
inline const ::jmc_auto::canbus::Esp_advanced_0x234_234& Cx75::esp_advanced_0x234_234() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
  return esp_advanced_0x234_234_ != NULL ? *esp_advanced_0x234_234_
                         : *::jmc_auto::canbus::Esp_advanced_0x234_234::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234* Cx75::mutable_esp_advanced_0x234_234() {
  set_has_esp_advanced_0x234_234();
  if (esp_advanced_0x234_234_ == NULL) {
    esp_advanced_0x234_234_ = new ::jmc_auto::canbus::Esp_advanced_0x234_234;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
  return esp_advanced_0x234_234_;
}
inline ::jmc_auto::canbus::Esp_advanced_0x234_234* Cx75::release_esp_advanced_0x234_234() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
  clear_has_esp_advanced_0x234_234();
  ::jmc_auto::canbus::Esp_advanced_0x234_234* temp = esp_advanced_0x234_234_;
  esp_advanced_0x234_234_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_advanced_0x234_234(::jmc_auto::canbus::Esp_advanced_0x234_234* esp_advanced_0x234_234) {
  delete esp_advanced_0x234_234_;
  esp_advanced_0x234_234_ = esp_advanced_0x234_234;
  if (esp_advanced_0x234_234) {
    set_has_esp_advanced_0x234_234();
  } else {
    clear_has_esp_advanced_0x234_234();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
inline bool Cx75::has_eps_advanced_0x176_176() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Cx75::set_has_eps_advanced_0x176_176() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Cx75::clear_has_eps_advanced_0x176_176() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Cx75::clear_eps_advanced_0x176_176() {
  if (eps_advanced_0x176_176_ != NULL) eps_advanced_0x176_176_->::jmc_auto::canbus::Eps_advanced_0x176_176::Clear();
  clear_has_eps_advanced_0x176_176();
}
inline const ::jmc_auto::canbus::Eps_advanced_0x176_176& Cx75::eps_advanced_0x176_176() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
  return eps_advanced_0x176_176_ != NULL ? *eps_advanced_0x176_176_
                         : *::jmc_auto::canbus::Eps_advanced_0x176_176::internal_default_instance();
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176* Cx75::mutable_eps_advanced_0x176_176() {
  set_has_eps_advanced_0x176_176();
  if (eps_advanced_0x176_176_ == NULL) {
    eps_advanced_0x176_176_ = new ::jmc_auto::canbus::Eps_advanced_0x176_176;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
  return eps_advanced_0x176_176_;
}
inline ::jmc_auto::canbus::Eps_advanced_0x176_176* Cx75::release_eps_advanced_0x176_176() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
  clear_has_eps_advanced_0x176_176();
  ::jmc_auto::canbus::Eps_advanced_0x176_176* temp = eps_advanced_0x176_176_;
  eps_advanced_0x176_176_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_eps_advanced_0x176_176(::jmc_auto::canbus::Eps_advanced_0x176_176* eps_advanced_0x176_176) {
  delete eps_advanced_0x176_176_;
  eps_advanced_0x176_176_ = eps_advanced_0x176_176;
  if (eps_advanced_0x176_176) {
    set_has_eps_advanced_0x176_176();
  } else {
    clear_has_eps_advanced_0x176_176();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
inline bool Cx75::has_esp_whlpulse_0x236_236() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Cx75::set_has_esp_whlpulse_0x236_236() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Cx75::clear_has_esp_whlpulse_0x236_236() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Cx75::clear_esp_whlpulse_0x236_236() {
  if (esp_whlpulse_0x236_236_ != NULL) esp_whlpulse_0x236_236_->::jmc_auto::canbus::Esp_whlpulse_0x236_236::Clear();
  clear_has_esp_whlpulse_0x236_236();
}
inline const ::jmc_auto::canbus::Esp_whlpulse_0x236_236& Cx75::esp_whlpulse_0x236_236() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
  return esp_whlpulse_0x236_236_ != NULL ? *esp_whlpulse_0x236_236_
                         : *::jmc_auto::canbus::Esp_whlpulse_0x236_236::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_whlpulse_0x236_236* Cx75::mutable_esp_whlpulse_0x236_236() {
  set_has_esp_whlpulse_0x236_236();
  if (esp_whlpulse_0x236_236_ == NULL) {
    esp_whlpulse_0x236_236_ = new ::jmc_auto::canbus::Esp_whlpulse_0x236_236;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
  return esp_whlpulse_0x236_236_;
}
inline ::jmc_auto::canbus::Esp_whlpulse_0x236_236* Cx75::release_esp_whlpulse_0x236_236() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
  clear_has_esp_whlpulse_0x236_236();
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236* temp = esp_whlpulse_0x236_236_;
  esp_whlpulse_0x236_236_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_whlpulse_0x236_236(::jmc_auto::canbus::Esp_whlpulse_0x236_236* esp_whlpulse_0x236_236) {
  delete esp_whlpulse_0x236_236_;
  esp_whlpulse_0x236_236_ = esp_whlpulse_0x236_236;
  if (esp_whlpulse_0x236_236) {
    set_has_esp_whlpulse_0x236_236();
  } else {
    clear_has_esp_whlpulse_0x236_236();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
}

// optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
inline bool Cx75::has_ipm_rightline_0x490_490() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Cx75::set_has_ipm_rightline_0x490_490() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Cx75::clear_has_ipm_rightline_0x490_490() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Cx75::clear_ipm_rightline_0x490_490() {
  if (ipm_rightline_0x490_490_ != NULL) ipm_rightline_0x490_490_->::jmc_auto::canbus::Ipm_rightline_0x490_490::Clear();
  clear_has_ipm_rightline_0x490_490();
}
inline const ::jmc_auto::canbus::Ipm_rightline_0x490_490& Cx75::ipm_rightline_0x490_490() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
  return ipm_rightline_0x490_490_ != NULL ? *ipm_rightline_0x490_490_
                         : *::jmc_auto::canbus::Ipm_rightline_0x490_490::internal_default_instance();
}
inline ::jmc_auto::canbus::Ipm_rightline_0x490_490* Cx75::mutable_ipm_rightline_0x490_490() {
  set_has_ipm_rightline_0x490_490();
  if (ipm_rightline_0x490_490_ == NULL) {
    ipm_rightline_0x490_490_ = new ::jmc_auto::canbus::Ipm_rightline_0x490_490;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
  return ipm_rightline_0x490_490_;
}
inline ::jmc_auto::canbus::Ipm_rightline_0x490_490* Cx75::release_ipm_rightline_0x490_490() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
  clear_has_ipm_rightline_0x490_490();
  ::jmc_auto::canbus::Ipm_rightline_0x490_490* temp = ipm_rightline_0x490_490_;
  ipm_rightline_0x490_490_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ipm_rightline_0x490_490(::jmc_auto::canbus::Ipm_rightline_0x490_490* ipm_rightline_0x490_490) {
  delete ipm_rightline_0x490_490_;
  ipm_rightline_0x490_490_ = ipm_rightline_0x490_490;
  if (ipm_rightline_0x490_490) {
    set_has_ipm_rightline_0x490_490();
  } else {
    clear_has_ipm_rightline_0x490_490();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
inline bool Cx75::has_sas_sensor_0x175_175() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Cx75::set_has_sas_sensor_0x175_175() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Cx75::clear_has_sas_sensor_0x175_175() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Cx75::clear_sas_sensor_0x175_175() {
  if (sas_sensor_0x175_175_ != NULL) sas_sensor_0x175_175_->::jmc_auto::canbus::Sas_sensor_0x175_175::Clear();
  clear_has_sas_sensor_0x175_175();
}
inline const ::jmc_auto::canbus::Sas_sensor_0x175_175& Cx75::sas_sensor_0x175_175() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
  return sas_sensor_0x175_175_ != NULL ? *sas_sensor_0x175_175_
                         : *::jmc_auto::canbus::Sas_sensor_0x175_175::internal_default_instance();
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175* Cx75::mutable_sas_sensor_0x175_175() {
  set_has_sas_sensor_0x175_175();
  if (sas_sensor_0x175_175_ == NULL) {
    sas_sensor_0x175_175_ = new ::jmc_auto::canbus::Sas_sensor_0x175_175;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
  return sas_sensor_0x175_175_;
}
inline ::jmc_auto::canbus::Sas_sensor_0x175_175* Cx75::release_sas_sensor_0x175_175() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
  clear_has_sas_sensor_0x175_175();
  ::jmc_auto::canbus::Sas_sensor_0x175_175* temp = sas_sensor_0x175_175_;
  sas_sensor_0x175_175_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_sas_sensor_0x175_175(::jmc_auto::canbus::Sas_sensor_0x175_175* sas_sensor_0x175_175) {
  delete sas_sensor_0x175_175_;
  sas_sensor_0x175_175_ = sas_sensor_0x175_175;
  if (sas_sensor_0x175_175) {
    set_has_sas_sensor_0x175_175();
  } else {
    clear_has_sas_sensor_0x175_175();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
inline bool Cx75::has_gw_body_0x321_321() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Cx75::set_has_gw_body_0x321_321() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Cx75::clear_has_gw_body_0x321_321() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Cx75::clear_gw_body_0x321_321() {
  if (gw_body_0x321_321_ != NULL) gw_body_0x321_321_->::jmc_auto::canbus::Gw_body_0x321_321::Clear();
  clear_has_gw_body_0x321_321();
}
inline const ::jmc_auto::canbus::Gw_body_0x321_321& Cx75::gw_body_0x321_321() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_body_0x321_321)
  return gw_body_0x321_321_ != NULL ? *gw_body_0x321_321_
                         : *::jmc_auto::canbus::Gw_body_0x321_321::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_body_0x321_321* Cx75::mutable_gw_body_0x321_321() {
  set_has_gw_body_0x321_321();
  if (gw_body_0x321_321_ == NULL) {
    gw_body_0x321_321_ = new ::jmc_auto::canbus::Gw_body_0x321_321;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_body_0x321_321)
  return gw_body_0x321_321_;
}
inline ::jmc_auto::canbus::Gw_body_0x321_321* Cx75::release_gw_body_0x321_321() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_body_0x321_321)
  clear_has_gw_body_0x321_321();
  ::jmc_auto::canbus::Gw_body_0x321_321* temp = gw_body_0x321_321_;
  gw_body_0x321_321_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_body_0x321_321(::jmc_auto::canbus::Gw_body_0x321_321* gw_body_0x321_321) {
  delete gw_body_0x321_321_;
  gw_body_0x321_321_ = gw_body_0x321_321;
  if (gw_body_0x321_321) {
    set_has_gw_body_0x321_321();
  } else {
    clear_has_gw_body_0x321_321();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_body_0x321_321)
}

// optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
inline bool Cx75::has_ipm_leftline_0x278_278() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Cx75::set_has_ipm_leftline_0x278_278() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Cx75::clear_has_ipm_leftline_0x278_278() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Cx75::clear_ipm_leftline_0x278_278() {
  if (ipm_leftline_0x278_278_ != NULL) ipm_leftline_0x278_278_->::jmc_auto::canbus::Ipm_leftline_0x278_278::Clear();
  clear_has_ipm_leftline_0x278_278();
}
inline const ::jmc_auto::canbus::Ipm_leftline_0x278_278& Cx75::ipm_leftline_0x278_278() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
  return ipm_leftline_0x278_278_ != NULL ? *ipm_leftline_0x278_278_
                         : *::jmc_auto::canbus::Ipm_leftline_0x278_278::internal_default_instance();
}
inline ::jmc_auto::canbus::Ipm_leftline_0x278_278* Cx75::mutable_ipm_leftline_0x278_278() {
  set_has_ipm_leftline_0x278_278();
  if (ipm_leftline_0x278_278_ == NULL) {
    ipm_leftline_0x278_278_ = new ::jmc_auto::canbus::Ipm_leftline_0x278_278;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
  return ipm_leftline_0x278_278_;
}
inline ::jmc_auto::canbus::Ipm_leftline_0x278_278* Cx75::release_ipm_leftline_0x278_278() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
  clear_has_ipm_leftline_0x278_278();
  ::jmc_auto::canbus::Ipm_leftline_0x278_278* temp = ipm_leftline_0x278_278_;
  ipm_leftline_0x278_278_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ipm_leftline_0x278_278(::jmc_auto::canbus::Ipm_leftline_0x278_278* ipm_leftline_0x278_278) {
  delete ipm_leftline_0x278_278_;
  ipm_leftline_0x278_278_ = ipm_leftline_0x278_278;
  if (ipm_leftline_0x278_278) {
    set_has_ipm_leftline_0x278_278();
  } else {
    clear_has_ipm_leftline_0x278_278();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
inline bool Cx75::has_gw_ems_engstatus_0x142_142() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Cx75::set_has_gw_ems_engstatus_0x142_142() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Cx75::clear_has_gw_ems_engstatus_0x142_142() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Cx75::clear_gw_ems_engstatus_0x142_142() {
  if (gw_ems_engstatus_0x142_142_ != NULL) gw_ems_engstatus_0x142_142_->::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::Clear();
  clear_has_gw_ems_engstatus_0x142_142();
}
inline const ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142& Cx75::gw_ems_engstatus_0x142_142() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
  return gw_ems_engstatus_0x142_142_ != NULL ? *gw_ems_engstatus_0x142_142_
                         : *::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* Cx75::mutable_gw_ems_engstatus_0x142_142() {
  set_has_gw_ems_engstatus_0x142_142();
  if (gw_ems_engstatus_0x142_142_ == NULL) {
    gw_ems_engstatus_0x142_142_ = new ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
  return gw_ems_engstatus_0x142_142_;
}
inline ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* Cx75::release_gw_ems_engstatus_0x142_142() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
  clear_has_gw_ems_engstatus_0x142_142();
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* temp = gw_ems_engstatus_0x142_142_;
  gw_ems_engstatus_0x142_142_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ems_engstatus_0x142_142(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* gw_ems_engstatus_0x142_142) {
  delete gw_ems_engstatus_0x142_142_;
  gw_ems_engstatus_0x142_142_ = gw_ems_engstatus_0x142_142;
  if (gw_ems_engstatus_0x142_142) {
    set_has_gw_ems_engstatus_0x142_142();
  } else {
    clear_has_gw_ems_engstatus_0x142_142();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
}

// optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
inline bool Cx75::has_gw_tbox_location_0x580_580() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Cx75::set_has_gw_tbox_location_0x580_580() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Cx75::clear_has_gw_tbox_location_0x580_580() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Cx75::clear_gw_tbox_location_0x580_580() {
  if (gw_tbox_location_0x580_580_ != NULL) gw_tbox_location_0x580_580_->::jmc_auto::canbus::Gw_tbox_location_0x580_580::Clear();
  clear_has_gw_tbox_location_0x580_580();
}
inline const ::jmc_auto::canbus::Gw_tbox_location_0x580_580& Cx75::gw_tbox_location_0x580_580() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
  return gw_tbox_location_0x580_580_ != NULL ? *gw_tbox_location_0x580_580_
                         : *::jmc_auto::canbus::Gw_tbox_location_0x580_580::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_tbox_location_0x580_580* Cx75::mutable_gw_tbox_location_0x580_580() {
  set_has_gw_tbox_location_0x580_580();
  if (gw_tbox_location_0x580_580_ == NULL) {
    gw_tbox_location_0x580_580_ = new ::jmc_auto::canbus::Gw_tbox_location_0x580_580;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
  return gw_tbox_location_0x580_580_;
}
inline ::jmc_auto::canbus::Gw_tbox_location_0x580_580* Cx75::release_gw_tbox_location_0x580_580() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
  clear_has_gw_tbox_location_0x580_580();
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580* temp = gw_tbox_location_0x580_580_;
  gw_tbox_location_0x580_580_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_tbox_location_0x580_580(::jmc_auto::canbus::Gw_tbox_location_0x580_580* gw_tbox_location_0x580_580) {
  delete gw_tbox_location_0x580_580_;
  gw_tbox_location_0x580_580_ = gw_tbox_location_0x580_580;
  if (gw_tbox_location_0x580_580) {
    set_has_gw_tbox_location_0x580_580();
  } else {
    clear_has_gw_tbox_location_0x580_580();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
}

// optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
inline bool Cx75::has_srs_0x350_350() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Cx75::set_has_srs_0x350_350() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Cx75::clear_has_srs_0x350_350() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Cx75::clear_srs_0x350_350() {
  if (srs_0x350_350_ != NULL) srs_0x350_350_->::jmc_auto::canbus::Srs_0x350_350::Clear();
  clear_has_srs_0x350_350();
}
inline const ::jmc_auto::canbus::Srs_0x350_350& Cx75::srs_0x350_350() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.srs_0x350_350)
  return srs_0x350_350_ != NULL ? *srs_0x350_350_
                         : *::jmc_auto::canbus::Srs_0x350_350::internal_default_instance();
}
inline ::jmc_auto::canbus::Srs_0x350_350* Cx75::mutable_srs_0x350_350() {
  set_has_srs_0x350_350();
  if (srs_0x350_350_ == NULL) {
    srs_0x350_350_ = new ::jmc_auto::canbus::Srs_0x350_350;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.srs_0x350_350)
  return srs_0x350_350_;
}
inline ::jmc_auto::canbus::Srs_0x350_350* Cx75::release_srs_0x350_350() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.srs_0x350_350)
  clear_has_srs_0x350_350();
  ::jmc_auto::canbus::Srs_0x350_350* temp = srs_0x350_350_;
  srs_0x350_350_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_srs_0x350_350(::jmc_auto::canbus::Srs_0x350_350* srs_0x350_350) {
  delete srs_0x350_350_;
  srs_0x350_350_ = srs_0x350_350;
  if (srs_0x350_350) {
    set_has_srs_0x350_350();
  } else {
    clear_has_srs_0x350_350();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.srs_0x350_350)
}

// optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
inline bool Cx75::has_ipm_0x245_245() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Cx75::set_has_ipm_0x245_245() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Cx75::clear_has_ipm_0x245_245() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Cx75::clear_ipm_0x245_245() {
  if (ipm_0x245_245_ != NULL) ipm_0x245_245_->::jmc_auto::canbus::Ipm_0x245_245::Clear();
  clear_has_ipm_0x245_245();
}
inline const ::jmc_auto::canbus::Ipm_0x245_245& Cx75::ipm_0x245_245() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ipm_0x245_245)
  return ipm_0x245_245_ != NULL ? *ipm_0x245_245_
                         : *::jmc_auto::canbus::Ipm_0x245_245::internal_default_instance();
}
inline ::jmc_auto::canbus::Ipm_0x245_245* Cx75::mutable_ipm_0x245_245() {
  set_has_ipm_0x245_245();
  if (ipm_0x245_245_ == NULL) {
    ipm_0x245_245_ = new ::jmc_auto::canbus::Ipm_0x245_245;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ipm_0x245_245)
  return ipm_0x245_245_;
}
inline ::jmc_auto::canbus::Ipm_0x245_245* Cx75::release_ipm_0x245_245() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ipm_0x245_245)
  clear_has_ipm_0x245_245();
  ::jmc_auto::canbus::Ipm_0x245_245* temp = ipm_0x245_245_;
  ipm_0x245_245_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ipm_0x245_245(::jmc_auto::canbus::Ipm_0x245_245* ipm_0x245_245) {
  delete ipm_0x245_245_;
  ipm_0x245_245_ = ipm_0x245_245;
  if (ipm_0x245_245) {
    set_has_ipm_0x245_245();
  } else {
    clear_has_ipm_0x245_245();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ipm_0x245_245)
}

// optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
inline bool Cx75::has_gw_ems_tqwhl_0x111_111() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Cx75::set_has_gw_ems_tqwhl_0x111_111() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Cx75::clear_has_gw_ems_tqwhl_0x111_111() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Cx75::clear_gw_ems_tqwhl_0x111_111() {
  if (gw_ems_tqwhl_0x111_111_ != NULL) gw_ems_tqwhl_0x111_111_->::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::Clear();
  clear_has_gw_ems_tqwhl_0x111_111();
}
inline const ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111& Cx75::gw_ems_tqwhl_0x111_111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
  return gw_ems_tqwhl_0x111_111_ != NULL ? *gw_ems_tqwhl_0x111_111_
                         : *::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* Cx75::mutable_gw_ems_tqwhl_0x111_111() {
  set_has_gw_ems_tqwhl_0x111_111();
  if (gw_ems_tqwhl_0x111_111_ == NULL) {
    gw_ems_tqwhl_0x111_111_ = new ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
  return gw_ems_tqwhl_0x111_111_;
}
inline ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* Cx75::release_gw_ems_tqwhl_0x111_111() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
  clear_has_gw_ems_tqwhl_0x111_111();
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* temp = gw_ems_tqwhl_0x111_111_;
  gw_ems_tqwhl_0x111_111_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ems_tqwhl_0x111_111(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* gw_ems_tqwhl_0x111_111) {
  delete gw_ems_tqwhl_0x111_111_;
  gw_ems_tqwhl_0x111_111_ = gw_ems_tqwhl_0x111_111;
  if (gw_ems_tqwhl_0x111_111) {
    set_has_gw_ems_tqwhl_0x111_111();
  } else {
    clear_has_gw_ems_tqwhl_0x111_111();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
inline bool Cx75::has_gw_tcu_gearinfo_0x123_123() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Cx75::set_has_gw_tcu_gearinfo_0x123_123() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Cx75::clear_has_gw_tcu_gearinfo_0x123_123() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Cx75::clear_gw_tcu_gearinfo_0x123_123() {
  if (gw_tcu_gearinfo_0x123_123_ != NULL) gw_tcu_gearinfo_0x123_123_->::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::Clear();
  clear_has_gw_tcu_gearinfo_0x123_123();
}
inline const ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123& Cx75::gw_tcu_gearinfo_0x123_123() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
  return gw_tcu_gearinfo_0x123_123_ != NULL ? *gw_tcu_gearinfo_0x123_123_
                         : *::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* Cx75::mutable_gw_tcu_gearinfo_0x123_123() {
  set_has_gw_tcu_gearinfo_0x123_123();
  if (gw_tcu_gearinfo_0x123_123_ == NULL) {
    gw_tcu_gearinfo_0x123_123_ = new ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
  return gw_tcu_gearinfo_0x123_123_;
}
inline ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* Cx75::release_gw_tcu_gearinfo_0x123_123() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
  clear_has_gw_tcu_gearinfo_0x123_123();
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* temp = gw_tcu_gearinfo_0x123_123_;
  gw_tcu_gearinfo_0x123_123_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_tcu_gearinfo_0x123_123(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* gw_tcu_gearinfo_0x123_123) {
  delete gw_tcu_gearinfo_0x123_123_;
  gw_tcu_gearinfo_0x123_123_ = gw_tcu_gearinfo_0x123_123;
  if (gw_tcu_gearinfo_0x123_123) {
    set_has_gw_tcu_gearinfo_0x123_123();
  } else {
    clear_has_gw_tcu_gearinfo_0x123_123();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
inline bool Cx75::has_esp_pressure_0x241_241() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Cx75::set_has_esp_pressure_0x241_241() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Cx75::clear_has_esp_pressure_0x241_241() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Cx75::clear_esp_pressure_0x241_241() {
  if (esp_pressure_0x241_241_ != NULL) esp_pressure_0x241_241_->::jmc_auto::canbus::Esp_pressure_0x241_241::Clear();
  clear_has_esp_pressure_0x241_241();
}
inline const ::jmc_auto::canbus::Esp_pressure_0x241_241& Cx75::esp_pressure_0x241_241() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
  return esp_pressure_0x241_241_ != NULL ? *esp_pressure_0x241_241_
                         : *::jmc_auto::canbus::Esp_pressure_0x241_241::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_pressure_0x241_241* Cx75::mutable_esp_pressure_0x241_241() {
  set_has_esp_pressure_0x241_241();
  if (esp_pressure_0x241_241_ == NULL) {
    esp_pressure_0x241_241_ = new ::jmc_auto::canbus::Esp_pressure_0x241_241;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
  return esp_pressure_0x241_241_;
}
inline ::jmc_auto::canbus::Esp_pressure_0x241_241* Cx75::release_esp_pressure_0x241_241() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
  clear_has_esp_pressure_0x241_241();
  ::jmc_auto::canbus::Esp_pressure_0x241_241* temp = esp_pressure_0x241_241_;
  esp_pressure_0x241_241_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_pressure_0x241_241(::jmc_auto::canbus::Esp_pressure_0x241_241* esp_pressure_0x241_241) {
  delete esp_pressure_0x241_241_;
  esp_pressure_0x241_241_ = esp_pressure_0x241_241;
  if (esp_pressure_0x241_241) {
    set_has_esp_pressure_0x241_241();
  } else {
    clear_has_esp_pressure_0x241_241();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
inline bool Cx75::has_esp_status_0x243_243() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Cx75::set_has_esp_status_0x243_243() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Cx75::clear_has_esp_status_0x243_243() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Cx75::clear_esp_status_0x243_243() {
  if (esp_status_0x243_243_ != NULL) esp_status_0x243_243_->::jmc_auto::canbus::Esp_status_0x243_243::Clear();
  clear_has_esp_status_0x243_243();
}
inline const ::jmc_auto::canbus::Esp_status_0x243_243& Cx75::esp_status_0x243_243() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_status_0x243_243)
  return esp_status_0x243_243_ != NULL ? *esp_status_0x243_243_
                         : *::jmc_auto::canbus::Esp_status_0x243_243::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_status_0x243_243* Cx75::mutable_esp_status_0x243_243() {
  set_has_esp_status_0x243_243();
  if (esp_status_0x243_243_ == NULL) {
    esp_status_0x243_243_ = new ::jmc_auto::canbus::Esp_status_0x243_243;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_status_0x243_243)
  return esp_status_0x243_243_;
}
inline ::jmc_auto::canbus::Esp_status_0x243_243* Cx75::release_esp_status_0x243_243() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_status_0x243_243)
  clear_has_esp_status_0x243_243();
  ::jmc_auto::canbus::Esp_status_0x243_243* temp = esp_status_0x243_243_;
  esp_status_0x243_243_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_status_0x243_243(::jmc_auto::canbus::Esp_status_0x243_243* esp_status_0x243_243) {
  delete esp_status_0x243_243_;
  esp_status_0x243_243_ = esp_status_0x243_243;
  if (esp_status_0x243_243) {
    set_has_esp_status_0x243_243();
  } else {
    clear_has_esp_status_0x243_243();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_status_0x243_243)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
inline bool Cx75::has_esp_axay_0x242_242() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Cx75::set_has_esp_axay_0x242_242() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Cx75::clear_has_esp_axay_0x242_242() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Cx75::clear_esp_axay_0x242_242() {
  if (esp_axay_0x242_242_ != NULL) esp_axay_0x242_242_->::jmc_auto::canbus::Esp_axay_0x242_242::Clear();
  clear_has_esp_axay_0x242_242();
}
inline const ::jmc_auto::canbus::Esp_axay_0x242_242& Cx75::esp_axay_0x242_242() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
  return esp_axay_0x242_242_ != NULL ? *esp_axay_0x242_242_
                         : *::jmc_auto::canbus::Esp_axay_0x242_242::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_axay_0x242_242* Cx75::mutable_esp_axay_0x242_242() {
  set_has_esp_axay_0x242_242();
  if (esp_axay_0x242_242_ == NULL) {
    esp_axay_0x242_242_ = new ::jmc_auto::canbus::Esp_axay_0x242_242;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
  return esp_axay_0x242_242_;
}
inline ::jmc_auto::canbus::Esp_axay_0x242_242* Cx75::release_esp_axay_0x242_242() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
  clear_has_esp_axay_0x242_242();
  ::jmc_auto::canbus::Esp_axay_0x242_242* temp = esp_axay_0x242_242_;
  esp_axay_0x242_242_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_axay_0x242_242(::jmc_auto::canbus::Esp_axay_0x242_242* esp_axay_0x242_242) {
  delete esp_axay_0x242_242_;
  esp_axay_0x242_242_ = esp_axay_0x242_242;
  if (esp_axay_0x242_242) {
    set_has_esp_axay_0x242_242();
  } else {
    clear_has_esp_axay_0x242_242();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
inline bool Cx75::has_gw_swm_mrr_0x31b_31b() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Cx75::set_has_gw_swm_mrr_0x31b_31b() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Cx75::clear_has_gw_swm_mrr_0x31b_31b() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Cx75::clear_gw_swm_mrr_0x31b_31b() {
  if (gw_swm_mrr_0x31b_31b_ != NULL) gw_swm_mrr_0x31b_31b_->::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::Clear();
  clear_has_gw_swm_mrr_0x31b_31b();
}
inline const ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b& Cx75::gw_swm_mrr_0x31b_31b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
  return gw_swm_mrr_0x31b_31b_ != NULL ? *gw_swm_mrr_0x31b_31b_
                         : *::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* Cx75::mutable_gw_swm_mrr_0x31b_31b() {
  set_has_gw_swm_mrr_0x31b_31b();
  if (gw_swm_mrr_0x31b_31b_ == NULL) {
    gw_swm_mrr_0x31b_31b_ = new ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
  return gw_swm_mrr_0x31b_31b_;
}
inline ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* Cx75::release_gw_swm_mrr_0x31b_31b() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
  clear_has_gw_swm_mrr_0x31b_31b();
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* temp = gw_swm_mrr_0x31b_31b_;
  gw_swm_mrr_0x31b_31b_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_swm_mrr_0x31b_31b(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* gw_swm_mrr_0x31b_31b) {
  delete gw_swm_mrr_0x31b_31b_;
  gw_swm_mrr_0x31b_31b_ = gw_swm_mrr_0x31b_31b;
  if (gw_swm_mrr_0x31b_31b) {
    set_has_gw_swm_mrr_0x31b_31b();
  } else {
    clear_has_gw_swm_mrr_0x31b_31b();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
inline bool Cx75::has_gw_swm_body_0x31a_31a() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Cx75::set_has_gw_swm_body_0x31a_31a() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Cx75::clear_has_gw_swm_body_0x31a_31a() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Cx75::clear_gw_swm_body_0x31a_31a() {
  if (gw_swm_body_0x31a_31a_ != NULL) gw_swm_body_0x31a_31a_->::jmc_auto::canbus::Gw_swm_body_0x31a_31a::Clear();
  clear_has_gw_swm_body_0x31a_31a();
}
inline const ::jmc_auto::canbus::Gw_swm_body_0x31a_31a& Cx75::gw_swm_body_0x31a_31a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
  return gw_swm_body_0x31a_31a_ != NULL ? *gw_swm_body_0x31a_31a_
                         : *::jmc_auto::canbus::Gw_swm_body_0x31a_31a::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* Cx75::mutable_gw_swm_body_0x31a_31a() {
  set_has_gw_swm_body_0x31a_31a();
  if (gw_swm_body_0x31a_31a_ == NULL) {
    gw_swm_body_0x31a_31a_ = new ::jmc_auto::canbus::Gw_swm_body_0x31a_31a;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
  return gw_swm_body_0x31a_31a_;
}
inline ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* Cx75::release_gw_swm_body_0x31a_31a() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
  clear_has_gw_swm_body_0x31a_31a();
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* temp = gw_swm_body_0x31a_31a_;
  gw_swm_body_0x31a_31a_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_swm_body_0x31a_31a(::jmc_auto::canbus::Gw_swm_body_0x31a_31a* gw_swm_body_0x31a_31a) {
  delete gw_swm_body_0x31a_31a_;
  gw_swm_body_0x31a_31a_ = gw_swm_body_0x31a_31a;
  if (gw_swm_body_0x31a_31a) {
    set_has_gw_swm_body_0x31a_31a();
  } else {
    clear_has_gw_swm_body_0x31a_31a();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
}

// optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
inline bool Cx75::has_gw_ems_tq_0x101_101() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Cx75::set_has_gw_ems_tq_0x101_101() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Cx75::clear_has_gw_ems_tq_0x101_101() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Cx75::clear_gw_ems_tq_0x101_101() {
  if (gw_ems_tq_0x101_101_ != NULL) gw_ems_tq_0x101_101_->::jmc_auto::canbus::Gw_ems_tq_0x101_101::Clear();
  clear_has_gw_ems_tq_0x101_101();
}
inline const ::jmc_auto::canbus::Gw_ems_tq_0x101_101& Cx75::gw_ems_tq_0x101_101() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
  return gw_ems_tq_0x101_101_ != NULL ? *gw_ems_tq_0x101_101_
                         : *::jmc_auto::canbus::Gw_ems_tq_0x101_101::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ems_tq_0x101_101* Cx75::mutable_gw_ems_tq_0x101_101() {
  set_has_gw_ems_tq_0x101_101();
  if (gw_ems_tq_0x101_101_ == NULL) {
    gw_ems_tq_0x101_101_ = new ::jmc_auto::canbus::Gw_ems_tq_0x101_101;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
  return gw_ems_tq_0x101_101_;
}
inline ::jmc_auto::canbus::Gw_ems_tq_0x101_101* Cx75::release_gw_ems_tq_0x101_101() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
  clear_has_gw_ems_tq_0x101_101();
  ::jmc_auto::canbus::Gw_ems_tq_0x101_101* temp = gw_ems_tq_0x101_101_;
  gw_ems_tq_0x101_101_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ems_tq_0x101_101(::jmc_auto::canbus::Gw_ems_tq_0x101_101* gw_ems_tq_0x101_101) {
  delete gw_ems_tq_0x101_101_;
  gw_ems_tq_0x101_101_ = gw_ems_tq_0x101_101;
  if (gw_ems_tq_0x101_101) {
    set_has_gw_ems_tq_0x101_101();
  } else {
    clear_has_gw_ems_tq_0x101_101();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
inline bool Cx75::has_esp_vlc_0x223_223() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Cx75::set_has_esp_vlc_0x223_223() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Cx75::clear_has_esp_vlc_0x223_223() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Cx75::clear_esp_vlc_0x223_223() {
  if (esp_vlc_0x223_223_ != NULL) esp_vlc_0x223_223_->::jmc_auto::canbus::Esp_vlc_0x223_223::Clear();
  clear_has_esp_vlc_0x223_223();
}
inline const ::jmc_auto::canbus::Esp_vlc_0x223_223& Cx75::esp_vlc_0x223_223() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
  return esp_vlc_0x223_223_ != NULL ? *esp_vlc_0x223_223_
                         : *::jmc_auto::canbus::Esp_vlc_0x223_223::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223* Cx75::mutable_esp_vlc_0x223_223() {
  set_has_esp_vlc_0x223_223();
  if (esp_vlc_0x223_223_ == NULL) {
    esp_vlc_0x223_223_ = new ::jmc_auto::canbus::Esp_vlc_0x223_223;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
  return esp_vlc_0x223_223_;
}
inline ::jmc_auto::canbus::Esp_vlc_0x223_223* Cx75::release_esp_vlc_0x223_223() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
  clear_has_esp_vlc_0x223_223();
  ::jmc_auto::canbus::Esp_vlc_0x223_223* temp = esp_vlc_0x223_223_;
  esp_vlc_0x223_223_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_vlc_0x223_223(::jmc_auto::canbus::Esp_vlc_0x223_223* esp_vlc_0x223_223) {
  delete esp_vlc_0x223_223_;
  esp_vlc_0x223_223_ = esp_vlc_0x223_223;
  if (esp_vlc_0x223_223) {
    set_has_esp_vlc_0x223_223();
  } else {
    clear_has_esp_vlc_0x223_223();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
inline bool Cx75::has_gw_ems_whltq_0x107_107() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Cx75::set_has_gw_ems_whltq_0x107_107() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Cx75::clear_has_gw_ems_whltq_0x107_107() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Cx75::clear_gw_ems_whltq_0x107_107() {
  if (gw_ems_whltq_0x107_107_ != NULL) gw_ems_whltq_0x107_107_->::jmc_auto::canbus::Gw_ems_whltq_0x107_107::Clear();
  clear_has_gw_ems_whltq_0x107_107();
}
inline const ::jmc_auto::canbus::Gw_ems_whltq_0x107_107& Cx75::gw_ems_whltq_0x107_107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
  return gw_ems_whltq_0x107_107_ != NULL ? *gw_ems_whltq_0x107_107_
                         : *::jmc_auto::canbus::Gw_ems_whltq_0x107_107::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* Cx75::mutable_gw_ems_whltq_0x107_107() {
  set_has_gw_ems_whltq_0x107_107();
  if (gw_ems_whltq_0x107_107_ == NULL) {
    gw_ems_whltq_0x107_107_ = new ::jmc_auto::canbus::Gw_ems_whltq_0x107_107;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
  return gw_ems_whltq_0x107_107_;
}
inline ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* Cx75::release_gw_ems_whltq_0x107_107() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
  clear_has_gw_ems_whltq_0x107_107();
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* temp = gw_ems_whltq_0x107_107_;
  gw_ems_whltq_0x107_107_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ems_whltq_0x107_107(::jmc_auto::canbus::Gw_ems_whltq_0x107_107* gw_ems_whltq_0x107_107) {
  delete gw_ems_whltq_0x107_107_;
  gw_ems_whltq_0x107_107_ = gw_ems_whltq_0x107_107;
  if (gw_ems_whltq_0x107_107) {
    set_has_gw_ems_whltq_0x107_107();
  } else {
    clear_has_gw_ems_whltq_0x107_107();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
inline bool Cx75::has_abs_sts_0x221_221() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Cx75::set_has_abs_sts_0x221_221() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Cx75::clear_has_abs_sts_0x221_221() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Cx75::clear_abs_sts_0x221_221() {
  if (abs_sts_0x221_221_ != NULL) abs_sts_0x221_221_->::jmc_auto::canbus::Abs_sts_0x221_221::Clear();
  clear_has_abs_sts_0x221_221();
}
inline const ::jmc_auto::canbus::Abs_sts_0x221_221& Cx75::abs_sts_0x221_221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
  return abs_sts_0x221_221_ != NULL ? *abs_sts_0x221_221_
                         : *::jmc_auto::canbus::Abs_sts_0x221_221::internal_default_instance();
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221* Cx75::mutable_abs_sts_0x221_221() {
  set_has_abs_sts_0x221_221();
  if (abs_sts_0x221_221_ == NULL) {
    abs_sts_0x221_221_ = new ::jmc_auto::canbus::Abs_sts_0x221_221;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
  return abs_sts_0x221_221_;
}
inline ::jmc_auto::canbus::Abs_sts_0x221_221* Cx75::release_abs_sts_0x221_221() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
  clear_has_abs_sts_0x221_221();
  ::jmc_auto::canbus::Abs_sts_0x221_221* temp = abs_sts_0x221_221_;
  abs_sts_0x221_221_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_abs_sts_0x221_221(::jmc_auto::canbus::Abs_sts_0x221_221* abs_sts_0x221_221) {
  delete abs_sts_0x221_221_;
  abs_sts_0x221_221_ = abs_sts_0x221_221;
  if (abs_sts_0x221_221) {
    set_has_abs_sts_0x221_221();
  } else {
    clear_has_abs_sts_0x221_221();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
inline bool Cx75::has_mrr_frobj_0x480_480() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Cx75::set_has_mrr_frobj_0x480_480() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Cx75::clear_has_mrr_frobj_0x480_480() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Cx75::clear_mrr_frobj_0x480_480() {
  if (mrr_frobj_0x480_480_ != NULL) mrr_frobj_0x480_480_->::jmc_auto::canbus::Mrr_frobj_0x480_480::Clear();
  clear_has_mrr_frobj_0x480_480();
}
inline const ::jmc_auto::canbus::Mrr_frobj_0x480_480& Cx75::mrr_frobj_0x480_480() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
  return mrr_frobj_0x480_480_ != NULL ? *mrr_frobj_0x480_480_
                         : *::jmc_auto::canbus::Mrr_frobj_0x480_480::internal_default_instance();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x480_480* Cx75::mutable_mrr_frobj_0x480_480() {
  set_has_mrr_frobj_0x480_480();
  if (mrr_frobj_0x480_480_ == NULL) {
    mrr_frobj_0x480_480_ = new ::jmc_auto::canbus::Mrr_frobj_0x480_480;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
  return mrr_frobj_0x480_480_;
}
inline ::jmc_auto::canbus::Mrr_frobj_0x480_480* Cx75::release_mrr_frobj_0x480_480() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
  clear_has_mrr_frobj_0x480_480();
  ::jmc_auto::canbus::Mrr_frobj_0x480_480* temp = mrr_frobj_0x480_480_;
  mrr_frobj_0x480_480_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_mrr_frobj_0x480_480(::jmc_auto::canbus::Mrr_frobj_0x480_480* mrr_frobj_0x480_480) {
  delete mrr_frobj_0x480_480_;
  mrr_frobj_0x480_480_ = mrr_frobj_0x480_480;
  if (mrr_frobj_0x480_480) {
    set_has_mrr_frobj_0x480_480();
  } else {
    clear_has_mrr_frobj_0x480_480();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
}

// optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
inline bool Cx75::has_mrr_0x246_246() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Cx75::set_has_mrr_0x246_246() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Cx75::clear_has_mrr_0x246_246() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Cx75::clear_mrr_0x246_246() {
  if (mrr_0x246_246_ != NULL) mrr_0x246_246_->::jmc_auto::canbus::Mrr_0x246_246::Clear();
  clear_has_mrr_0x246_246();
}
inline const ::jmc_auto::canbus::Mrr_0x246_246& Cx75::mrr_0x246_246() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_0x246_246)
  return mrr_0x246_246_ != NULL ? *mrr_0x246_246_
                         : *::jmc_auto::canbus::Mrr_0x246_246::internal_default_instance();
}
inline ::jmc_auto::canbus::Mrr_0x246_246* Cx75::mutable_mrr_0x246_246() {
  set_has_mrr_0x246_246();
  if (mrr_0x246_246_ == NULL) {
    mrr_0x246_246_ = new ::jmc_auto::canbus::Mrr_0x246_246;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_0x246_246)
  return mrr_0x246_246_;
}
inline ::jmc_auto::canbus::Mrr_0x246_246* Cx75::release_mrr_0x246_246() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_0x246_246)
  clear_has_mrr_0x246_246();
  ::jmc_auto::canbus::Mrr_0x246_246* temp = mrr_0x246_246_;
  mrr_0x246_246_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_mrr_0x246_246(::jmc_auto::canbus::Mrr_0x246_246* mrr_0x246_246) {
  delete mrr_0x246_246_;
  mrr_0x246_246_ = mrr_0x246_246;
  if (mrr_0x246_246) {
    set_has_mrr_0x246_246();
  } else {
    clear_has_mrr_0x246_246();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_0x246_246)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
inline bool Cx75::has_gw_mp5_nav_0x533_533() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Cx75::set_has_gw_mp5_nav_0x533_533() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Cx75::clear_has_gw_mp5_nav_0x533_533() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Cx75::clear_gw_mp5_nav_0x533_533() {
  if (gw_mp5_nav_0x533_533_ != NULL) gw_mp5_nav_0x533_533_->::jmc_auto::canbus::Gw_mp5_nav_0x533_533::Clear();
  clear_has_gw_mp5_nav_0x533_533();
}
inline const ::jmc_auto::canbus::Gw_mp5_nav_0x533_533& Cx75::gw_mp5_nav_0x533_533() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
  return gw_mp5_nav_0x533_533_ != NULL ? *gw_mp5_nav_0x533_533_
                         : *::jmc_auto::canbus::Gw_mp5_nav_0x533_533::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* Cx75::mutable_gw_mp5_nav_0x533_533() {
  set_has_gw_mp5_nav_0x533_533();
  if (gw_mp5_nav_0x533_533_ == NULL) {
    gw_mp5_nav_0x533_533_ = new ::jmc_auto::canbus::Gw_mp5_nav_0x533_533;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
  return gw_mp5_nav_0x533_533_;
}
inline ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* Cx75::release_gw_mp5_nav_0x533_533() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
  clear_has_gw_mp5_nav_0x533_533();
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* temp = gw_mp5_nav_0x533_533_;
  gw_mp5_nav_0x533_533_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_mp5_nav_0x533_533(::jmc_auto::canbus::Gw_mp5_nav_0x533_533* gw_mp5_nav_0x533_533) {
  delete gw_mp5_nav_0x533_533_;
  gw_mp5_nav_0x533_533_ = gw_mp5_nav_0x533_533;
  if (gw_mp5_nav_0x533_533) {
    set_has_gw_mp5_nav_0x533_533();
  } else {
    clear_has_gw_mp5_nav_0x533_533();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
inline bool Cx75::has_gw_mp5_0x530_530() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Cx75::set_has_gw_mp5_0x530_530() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Cx75::clear_has_gw_mp5_0x530_530() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Cx75::clear_gw_mp5_0x530_530() {
  if (gw_mp5_0x530_530_ != NULL) gw_mp5_0x530_530_->::jmc_auto::canbus::Gw_mp5_0x530_530::Clear();
  clear_has_gw_mp5_0x530_530();
}
inline const ::jmc_auto::canbus::Gw_mp5_0x530_530& Cx75::gw_mp5_0x530_530() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
  return gw_mp5_0x530_530_ != NULL ? *gw_mp5_0x530_530_
                         : *::jmc_auto::canbus::Gw_mp5_0x530_530::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530* Cx75::mutable_gw_mp5_0x530_530() {
  set_has_gw_mp5_0x530_530();
  if (gw_mp5_0x530_530_ == NULL) {
    gw_mp5_0x530_530_ = new ::jmc_auto::canbus::Gw_mp5_0x530_530;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
  return gw_mp5_0x530_530_;
}
inline ::jmc_auto::canbus::Gw_mp5_0x530_530* Cx75::release_gw_mp5_0x530_530() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
  clear_has_gw_mp5_0x530_530();
  ::jmc_auto::canbus::Gw_mp5_0x530_530* temp = gw_mp5_0x530_530_;
  gw_mp5_0x530_530_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_mp5_0x530_530(::jmc_auto::canbus::Gw_mp5_0x530_530* gw_mp5_0x530_530) {
  delete gw_mp5_0x530_530_;
  gw_mp5_0x530_530_ = gw_mp5_0x530_530;
  if (gw_mp5_0x530_530) {
    set_has_gw_mp5_0x530_530();
  } else {
    clear_has_gw_mp5_0x530_530();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
inline bool Cx75::has_mrr_frobj_0x279_279() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Cx75::set_has_mrr_frobj_0x279_279() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Cx75::clear_has_mrr_frobj_0x279_279() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Cx75::clear_mrr_frobj_0x279_279() {
  if (mrr_frobj_0x279_279_ != NULL) mrr_frobj_0x279_279_->::jmc_auto::canbus::Mrr_frobj_0x279_279::Clear();
  clear_has_mrr_frobj_0x279_279();
}
inline const ::jmc_auto::canbus::Mrr_frobj_0x279_279& Cx75::mrr_frobj_0x279_279() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
  return mrr_frobj_0x279_279_ != NULL ? *mrr_frobj_0x279_279_
                         : *::jmc_auto::canbus::Mrr_frobj_0x279_279::internal_default_instance();
}
inline ::jmc_auto::canbus::Mrr_frobj_0x279_279* Cx75::mutable_mrr_frobj_0x279_279() {
  set_has_mrr_frobj_0x279_279();
  if (mrr_frobj_0x279_279_ == NULL) {
    mrr_frobj_0x279_279_ = new ::jmc_auto::canbus::Mrr_frobj_0x279_279;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
  return mrr_frobj_0x279_279_;
}
inline ::jmc_auto::canbus::Mrr_frobj_0x279_279* Cx75::release_mrr_frobj_0x279_279() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
  clear_has_mrr_frobj_0x279_279();
  ::jmc_auto::canbus::Mrr_frobj_0x279_279* temp = mrr_frobj_0x279_279_;
  mrr_frobj_0x279_279_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_mrr_frobj_0x279_279(::jmc_auto::canbus::Mrr_frobj_0x279_279* mrr_frobj_0x279_279) {
  delete mrr_frobj_0x279_279_;
  mrr_frobj_0x279_279_ = mrr_frobj_0x279_279;
  if (mrr_frobj_0x279_279) {
    set_has_mrr_frobj_0x279_279();
  } else {
    clear_has_mrr_frobj_0x279_279();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
inline bool Cx75::has_gw_ic_0x510_510() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Cx75::set_has_gw_ic_0x510_510() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Cx75::clear_has_gw_ic_0x510_510() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Cx75::clear_gw_ic_0x510_510() {
  if (gw_ic_0x510_510_ != NULL) gw_ic_0x510_510_->::jmc_auto::canbus::Gw_ic_0x510_510::Clear();
  clear_has_gw_ic_0x510_510();
}
inline const ::jmc_auto::canbus::Gw_ic_0x510_510& Cx75::gw_ic_0x510_510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
  return gw_ic_0x510_510_ != NULL ? *gw_ic_0x510_510_
                         : *::jmc_auto::canbus::Gw_ic_0x510_510::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ic_0x510_510* Cx75::mutable_gw_ic_0x510_510() {
  set_has_gw_ic_0x510_510();
  if (gw_ic_0x510_510_ == NULL) {
    gw_ic_0x510_510_ = new ::jmc_auto::canbus::Gw_ic_0x510_510;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
  return gw_ic_0x510_510_;
}
inline ::jmc_auto::canbus::Gw_ic_0x510_510* Cx75::release_gw_ic_0x510_510() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
  clear_has_gw_ic_0x510_510();
  ::jmc_auto::canbus::Gw_ic_0x510_510* temp = gw_ic_0x510_510_;
  gw_ic_0x510_510_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ic_0x510_510(::jmc_auto::canbus::Gw_ic_0x510_510* gw_ic_0x510_510) {
  delete gw_ic_0x510_510_;
  gw_ic_0x510_510_ = gw_ic_0x510_510;
  if (gw_ic_0x510_510) {
    set_has_gw_ic_0x510_510();
  } else {
    clear_has_gw_ic_0x510_510();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
inline bool Cx75::has_abs_whlspd_0x211_211() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Cx75::set_has_abs_whlspd_0x211_211() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Cx75::clear_has_abs_whlspd_0x211_211() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Cx75::clear_abs_whlspd_0x211_211() {
  if (abs_whlspd_0x211_211_ != NULL) abs_whlspd_0x211_211_->::jmc_auto::canbus::Abs_whlspd_0x211_211::Clear();
  clear_has_abs_whlspd_0x211_211();
}
inline const ::jmc_auto::canbus::Abs_whlspd_0x211_211& Cx75::abs_whlspd_0x211_211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
  return abs_whlspd_0x211_211_ != NULL ? *abs_whlspd_0x211_211_
                         : *::jmc_auto::canbus::Abs_whlspd_0x211_211::internal_default_instance();
}
inline ::jmc_auto::canbus::Abs_whlspd_0x211_211* Cx75::mutable_abs_whlspd_0x211_211() {
  set_has_abs_whlspd_0x211_211();
  if (abs_whlspd_0x211_211_ == NULL) {
    abs_whlspd_0x211_211_ = new ::jmc_auto::canbus::Abs_whlspd_0x211_211;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
  return abs_whlspd_0x211_211_;
}
inline ::jmc_auto::canbus::Abs_whlspd_0x211_211* Cx75::release_abs_whlspd_0x211_211() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
  clear_has_abs_whlspd_0x211_211();
  ::jmc_auto::canbus::Abs_whlspd_0x211_211* temp = abs_whlspd_0x211_211_;
  abs_whlspd_0x211_211_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_abs_whlspd_0x211_211(::jmc_auto::canbus::Abs_whlspd_0x211_211* abs_whlspd_0x211_211) {
  delete abs_whlspd_0x211_211_;
  abs_whlspd_0x211_211_ = abs_whlspd_0x211_211;
  if (abs_whlspd_0x211_211) {
    set_has_abs_whlspd_0x211_211();
  } else {
    clear_has_abs_whlspd_0x211_211();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
}

// optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
inline bool Cx75::has_esp_tq_0x217_217() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Cx75::set_has_esp_tq_0x217_217() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Cx75::clear_has_esp_tq_0x217_217() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Cx75::clear_esp_tq_0x217_217() {
  if (esp_tq_0x217_217_ != NULL) esp_tq_0x217_217_->::jmc_auto::canbus::Esp_tq_0x217_217::Clear();
  clear_has_esp_tq_0x217_217();
}
inline const ::jmc_auto::canbus::Esp_tq_0x217_217& Cx75::esp_tq_0x217_217() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
  return esp_tq_0x217_217_ != NULL ? *esp_tq_0x217_217_
                         : *::jmc_auto::canbus::Esp_tq_0x217_217::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_tq_0x217_217* Cx75::mutable_esp_tq_0x217_217() {
  set_has_esp_tq_0x217_217();
  if (esp_tq_0x217_217_ == NULL) {
    esp_tq_0x217_217_ = new ::jmc_auto::canbus::Esp_tq_0x217_217;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
  return esp_tq_0x217_217_;
}
inline ::jmc_auto::canbus::Esp_tq_0x217_217* Cx75::release_esp_tq_0x217_217() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
  clear_has_esp_tq_0x217_217();
  ::jmc_auto::canbus::Esp_tq_0x217_217* temp = esp_tq_0x217_217_;
  esp_tq_0x217_217_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_tq_0x217_217(::jmc_auto::canbus::Esp_tq_0x217_217* esp_tq_0x217_217) {
  delete esp_tq_0x217_217_;
  esp_tq_0x217_217_ = esp_tq_0x217_217;
  if (esp_tq_0x217_217) {
    set_has_esp_tq_0x217_217();
  } else {
    clear_has_esp_tq_0x217_217();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
}

// optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
inline bool Cx75::has_esp_rpmf_0x213_213() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Cx75::set_has_esp_rpmf_0x213_213() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Cx75::clear_has_esp_rpmf_0x213_213() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Cx75::clear_esp_rpmf_0x213_213() {
  if (esp_rpmf_0x213_213_ != NULL) esp_rpmf_0x213_213_->::jmc_auto::canbus::Esp_rpmf_0x213_213::Clear();
  clear_has_esp_rpmf_0x213_213();
}
inline const ::jmc_auto::canbus::Esp_rpmf_0x213_213& Cx75::esp_rpmf_0x213_213() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
  return esp_rpmf_0x213_213_ != NULL ? *esp_rpmf_0x213_213_
                         : *::jmc_auto::canbus::Esp_rpmf_0x213_213::internal_default_instance();
}
inline ::jmc_auto::canbus::Esp_rpmf_0x213_213* Cx75::mutable_esp_rpmf_0x213_213() {
  set_has_esp_rpmf_0x213_213();
  if (esp_rpmf_0x213_213_ == NULL) {
    esp_rpmf_0x213_213_ = new ::jmc_auto::canbus::Esp_rpmf_0x213_213;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
  return esp_rpmf_0x213_213_;
}
inline ::jmc_auto::canbus::Esp_rpmf_0x213_213* Cx75::release_esp_rpmf_0x213_213() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
  clear_has_esp_rpmf_0x213_213();
  ::jmc_auto::canbus::Esp_rpmf_0x213_213* temp = esp_rpmf_0x213_213_;
  esp_rpmf_0x213_213_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_esp_rpmf_0x213_213(::jmc_auto::canbus::Esp_rpmf_0x213_213* esp_rpmf_0x213_213) {
  delete esp_rpmf_0x213_213_;
  esp_rpmf_0x213_213_ = esp_rpmf_0x213_213;
  if (esp_rpmf_0x213_213) {
    set_has_esp_rpmf_0x213_213();
  } else {
    clear_has_esp_rpmf_0x213_213();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
inline bool Cx75::has_gw_ic_time_0x581_581() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Cx75::set_has_gw_ic_time_0x581_581() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Cx75::clear_has_gw_ic_time_0x581_581() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Cx75::clear_gw_ic_time_0x581_581() {
  if (gw_ic_time_0x581_581_ != NULL) gw_ic_time_0x581_581_->::jmc_auto::canbus::Gw_ic_time_0x581_581::Clear();
  clear_has_gw_ic_time_0x581_581();
}
inline const ::jmc_auto::canbus::Gw_ic_time_0x581_581& Cx75::gw_ic_time_0x581_581() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
  return gw_ic_time_0x581_581_ != NULL ? *gw_ic_time_0x581_581_
                         : *::jmc_auto::canbus::Gw_ic_time_0x581_581::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581* Cx75::mutable_gw_ic_time_0x581_581() {
  set_has_gw_ic_time_0x581_581();
  if (gw_ic_time_0x581_581_ == NULL) {
    gw_ic_time_0x581_581_ = new ::jmc_auto::canbus::Gw_ic_time_0x581_581;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
  return gw_ic_time_0x581_581_;
}
inline ::jmc_auto::canbus::Gw_ic_time_0x581_581* Cx75::release_gw_ic_time_0x581_581() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
  clear_has_gw_ic_time_0x581_581();
  ::jmc_auto::canbus::Gw_ic_time_0x581_581* temp = gw_ic_time_0x581_581_;
  gw_ic_time_0x581_581_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_ic_time_0x581_581(::jmc_auto::canbus::Gw_ic_time_0x581_581* gw_ic_time_0x581_581) {
  delete gw_ic_time_0x581_581_;
  gw_ic_time_0x581_581_ = gw_ic_time_0x581_581;
  if (gw_ic_time_0x581_581) {
    set_has_gw_ic_time_0x581_581();
  } else {
    clear_has_gw_ic_time_0x581_581();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
}

// optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
inline bool Cx75::has_afs_0x5a0_5a0() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Cx75::set_has_afs_0x5a0_5a0() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Cx75::clear_has_afs_0x5a0_5a0() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Cx75::clear_afs_0x5a0_5a0() {
  if (afs_0x5a0_5a0_ != NULL) afs_0x5a0_5a0_->::jmc_auto::canbus::Afs_0x5a0_5a0::Clear();
  clear_has_afs_0x5a0_5a0();
}
inline const ::jmc_auto::canbus::Afs_0x5a0_5a0& Cx75::afs_0x5a0_5a0() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
  return afs_0x5a0_5a0_ != NULL ? *afs_0x5a0_5a0_
                         : *::jmc_auto::canbus::Afs_0x5a0_5a0::internal_default_instance();
}
inline ::jmc_auto::canbus::Afs_0x5a0_5a0* Cx75::mutable_afs_0x5a0_5a0() {
  set_has_afs_0x5a0_5a0();
  if (afs_0x5a0_5a0_ == NULL) {
    afs_0x5a0_5a0_ = new ::jmc_auto::canbus::Afs_0x5a0_5a0;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
  return afs_0x5a0_5a0_;
}
inline ::jmc_auto::canbus::Afs_0x5a0_5a0* Cx75::release_afs_0x5a0_5a0() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
  clear_has_afs_0x5a0_5a0();
  ::jmc_auto::canbus::Afs_0x5a0_5a0* temp = afs_0x5a0_5a0_;
  afs_0x5a0_5a0_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_afs_0x5a0_5a0(::jmc_auto::canbus::Afs_0x5a0_5a0* afs_0x5a0_5a0) {
  delete afs_0x5a0_5a0_;
  afs_0x5a0_5a0_ = afs_0x5a0_5a0;
  if (afs_0x5a0_5a0) {
    set_has_afs_0x5a0_5a0();
  } else {
    clear_has_afs_0x5a0_5a0();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
inline bool Cx75::has_sod_nm_0x440_440() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Cx75::set_has_sod_nm_0x440_440() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Cx75::clear_has_sod_nm_0x440_440() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Cx75::clear_sod_nm_0x440_440() {
  if (sod_nm_0x440_440_ != NULL) sod_nm_0x440_440_->::jmc_auto::canbus::Sod_nm_0x440_440::Clear();
  clear_has_sod_nm_0x440_440();
}
inline const ::jmc_auto::canbus::Sod_nm_0x440_440& Cx75::sod_nm_0x440_440() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
  return sod_nm_0x440_440_ != NULL ? *sod_nm_0x440_440_
                         : *::jmc_auto::canbus::Sod_nm_0x440_440::internal_default_instance();
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440* Cx75::mutable_sod_nm_0x440_440() {
  set_has_sod_nm_0x440_440();
  if (sod_nm_0x440_440_ == NULL) {
    sod_nm_0x440_440_ = new ::jmc_auto::canbus::Sod_nm_0x440_440;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
  return sod_nm_0x440_440_;
}
inline ::jmc_auto::canbus::Sod_nm_0x440_440* Cx75::release_sod_nm_0x440_440() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
  clear_has_sod_nm_0x440_440();
  ::jmc_auto::canbus::Sod_nm_0x440_440* temp = sod_nm_0x440_440_;
  sod_nm_0x440_440_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_sod_nm_0x440_440(::jmc_auto::canbus::Sod_nm_0x440_440* sod_nm_0x440_440) {
  delete sod_nm_0x440_440_;
  sod_nm_0x440_440_ = sod_nm_0x440_440;
  if (sod_nm_0x440_440) {
    set_has_sod_nm_0x440_440();
  } else {
    clear_has_sod_nm_0x440_440();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
inline bool Cx75::has_gw_nm_0x460_460() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Cx75::set_has_gw_nm_0x460_460() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Cx75::clear_has_gw_nm_0x460_460() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Cx75::clear_gw_nm_0x460_460() {
  if (gw_nm_0x460_460_ != NULL) gw_nm_0x460_460_->::jmc_auto::canbus::Gw_nm_0x460_460::Clear();
  clear_has_gw_nm_0x460_460();
}
inline const ::jmc_auto::canbus::Gw_nm_0x460_460& Cx75::gw_nm_0x460_460() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
  return gw_nm_0x460_460_ != NULL ? *gw_nm_0x460_460_
                         : *::jmc_auto::canbus::Gw_nm_0x460_460::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460* Cx75::mutable_gw_nm_0x460_460() {
  set_has_gw_nm_0x460_460();
  if (gw_nm_0x460_460_ == NULL) {
    gw_nm_0x460_460_ = new ::jmc_auto::canbus::Gw_nm_0x460_460;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
  return gw_nm_0x460_460_;
}
inline ::jmc_auto::canbus::Gw_nm_0x460_460* Cx75::release_gw_nm_0x460_460() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
  clear_has_gw_nm_0x460_460();
  ::jmc_auto::canbus::Gw_nm_0x460_460* temp = gw_nm_0x460_460_;
  gw_nm_0x460_460_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_nm_0x460_460(::jmc_auto::canbus::Gw_nm_0x460_460* gw_nm_0x460_460) {
  delete gw_nm_0x460_460_;
  gw_nm_0x460_460_ = gw_nm_0x460_460;
  if (gw_nm_0x460_460) {
    set_has_gw_nm_0x460_460();
  } else {
    clear_has_gw_nm_0x460_460();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
}

// optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
inline bool Cx75::has_eps_0x260_260() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Cx75::set_has_eps_0x260_260() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Cx75::clear_has_eps_0x260_260() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Cx75::clear_eps_0x260_260() {
  if (eps_0x260_260_ != NULL) eps_0x260_260_->::jmc_auto::canbus::Eps_0x260_260::Clear();
  clear_has_eps_0x260_260();
}
inline const ::jmc_auto::canbus::Eps_0x260_260& Cx75::eps_0x260_260() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.eps_0x260_260)
  return eps_0x260_260_ != NULL ? *eps_0x260_260_
                         : *::jmc_auto::canbus::Eps_0x260_260::internal_default_instance();
}
inline ::jmc_auto::canbus::Eps_0x260_260* Cx75::mutable_eps_0x260_260() {
  set_has_eps_0x260_260();
  if (eps_0x260_260_ == NULL) {
    eps_0x260_260_ = new ::jmc_auto::canbus::Eps_0x260_260;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.eps_0x260_260)
  return eps_0x260_260_;
}
inline ::jmc_auto::canbus::Eps_0x260_260* Cx75::release_eps_0x260_260() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.eps_0x260_260)
  clear_has_eps_0x260_260();
  ::jmc_auto::canbus::Eps_0x260_260* temp = eps_0x260_260_;
  eps_0x260_260_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_eps_0x260_260(::jmc_auto::canbus::Eps_0x260_260* eps_0x260_260) {
  delete eps_0x260_260_;
  eps_0x260_260_ = eps_0x260_260;
  if (eps_0x260_260) {
    set_has_eps_0x260_260();
  } else {
    clear_has_eps_0x260_260();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.eps_0x260_260)
}

// optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
inline bool Cx75::has_sod_0x275_275() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Cx75::set_has_sod_0x275_275() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Cx75::clear_has_sod_0x275_275() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Cx75::clear_sod_0x275_275() {
  if (sod_0x275_275_ != NULL) sod_0x275_275_->::jmc_auto::canbus::Sod_0x275_275::Clear();
  clear_has_sod_0x275_275();
}
inline const ::jmc_auto::canbus::Sod_0x275_275& Cx75::sod_0x275_275() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.sod_0x275_275)
  return sod_0x275_275_ != NULL ? *sod_0x275_275_
                         : *::jmc_auto::canbus::Sod_0x275_275::internal_default_instance();
}
inline ::jmc_auto::canbus::Sod_0x275_275* Cx75::mutable_sod_0x275_275() {
  set_has_sod_0x275_275();
  if (sod_0x275_275_ == NULL) {
    sod_0x275_275_ = new ::jmc_auto::canbus::Sod_0x275_275;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.sod_0x275_275)
  return sod_0x275_275_;
}
inline ::jmc_auto::canbus::Sod_0x275_275* Cx75::release_sod_0x275_275() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.sod_0x275_275)
  clear_has_sod_0x275_275();
  ::jmc_auto::canbus::Sod_0x275_275* temp = sod_0x275_275_;
  sod_0x275_275_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_sod_0x275_275(::jmc_auto::canbus::Sod_0x275_275* sod_0x275_275) {
  delete sod_0x275_275_;
  sod_0x275_275_ = sod_0x275_275;
  if (sod_0x275_275) {
    set_has_sod_0x275_275();
  } else {
    clear_has_sod_0x275_275();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.sod_0x275_275)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
inline bool Cx75::has_gw_tpms_tire_0x361_361() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Cx75::set_has_gw_tpms_tire_0x361_361() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Cx75::clear_has_gw_tpms_tire_0x361_361() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Cx75::clear_gw_tpms_tire_0x361_361() {
  if (gw_tpms_tire_0x361_361_ != NULL) gw_tpms_tire_0x361_361_->::jmc_auto::canbus::Gw_tpms_tire_0x361_361::Clear();
  clear_has_gw_tpms_tire_0x361_361();
}
inline const ::jmc_auto::canbus::Gw_tpms_tire_0x361_361& Cx75::gw_tpms_tire_0x361_361() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
  return gw_tpms_tire_0x361_361_ != NULL ? *gw_tpms_tire_0x361_361_
                         : *::jmc_auto::canbus::Gw_tpms_tire_0x361_361::internal_default_instance();
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* Cx75::mutable_gw_tpms_tire_0x361_361() {
  set_has_gw_tpms_tire_0x361_361();
  if (gw_tpms_tire_0x361_361_ == NULL) {
    gw_tpms_tire_0x361_361_ = new ::jmc_auto::canbus::Gw_tpms_tire_0x361_361;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
  return gw_tpms_tire_0x361_361_;
}
inline ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* Cx75::release_gw_tpms_tire_0x361_361() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
  clear_has_gw_tpms_tire_0x361_361();
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* temp = gw_tpms_tire_0x361_361_;
  gw_tpms_tire_0x361_361_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_gw_tpms_tire_0x361_361(::jmc_auto::canbus::Gw_tpms_tire_0x361_361* gw_tpms_tire_0x361_361) {
  delete gw_tpms_tire_0x361_361_;
  gw_tpms_tire_0x361_361_ = gw_tpms_tire_0x361_361;
  if (gw_tpms_tire_0x361_361) {
    set_has_gw_tpms_tire_0x361_361();
  } else {
    clear_has_gw_tpms_tire_0x361_361();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
}

// optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
inline bool Cx75::has_ins_datainfo_506() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Cx75::set_has_ins_datainfo_506() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Cx75::clear_has_ins_datainfo_506() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Cx75::clear_ins_datainfo_506() {
  if (ins_datainfo_506_ != NULL) ins_datainfo_506_->::jmc_auto::canbus::Ins_datainfo_506::Clear();
  clear_has_ins_datainfo_506();
}
inline const ::jmc_auto::canbus::Ins_datainfo_506& Cx75::ins_datainfo_506() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_datainfo_506)
  return ins_datainfo_506_ != NULL ? *ins_datainfo_506_
                         : *::jmc_auto::canbus::Ins_datainfo_506::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_datainfo_506* Cx75::mutable_ins_datainfo_506() {
  set_has_ins_datainfo_506();
  if (ins_datainfo_506_ == NULL) {
    ins_datainfo_506_ = new ::jmc_auto::canbus::Ins_datainfo_506;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_datainfo_506)
  return ins_datainfo_506_;
}
inline ::jmc_auto::canbus::Ins_datainfo_506* Cx75::release_ins_datainfo_506() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_datainfo_506)
  clear_has_ins_datainfo_506();
  ::jmc_auto::canbus::Ins_datainfo_506* temp = ins_datainfo_506_;
  ins_datainfo_506_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_datainfo_506(::jmc_auto::canbus::Ins_datainfo_506* ins_datainfo_506) {
  delete ins_datainfo_506_;
  ins_datainfo_506_ = ins_datainfo_506;
  if (ins_datainfo_506) {
    set_has_ins_datainfo_506();
  } else {
    clear_has_ins_datainfo_506();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_datainfo_506)
}

// optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
inline bool Cx75::has_ins_std_507() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Cx75::set_has_ins_std_507() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Cx75::clear_has_ins_std_507() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Cx75::clear_ins_std_507() {
  if (ins_std_507_ != NULL) ins_std_507_->::jmc_auto::canbus::Ins_std_507::Clear();
  clear_has_ins_std_507();
}
inline const ::jmc_auto::canbus::Ins_std_507& Cx75::ins_std_507() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_std_507)
  return ins_std_507_ != NULL ? *ins_std_507_
                         : *::jmc_auto::canbus::Ins_std_507::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_std_507* Cx75::mutable_ins_std_507() {
  set_has_ins_std_507();
  if (ins_std_507_ == NULL) {
    ins_std_507_ = new ::jmc_auto::canbus::Ins_std_507;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_std_507)
  return ins_std_507_;
}
inline ::jmc_auto::canbus::Ins_std_507* Cx75::release_ins_std_507() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_std_507)
  clear_has_ins_std_507();
  ::jmc_auto::canbus::Ins_std_507* temp = ins_std_507_;
  ins_std_507_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_std_507(::jmc_auto::canbus::Ins_std_507* ins_std_507) {
  delete ins_std_507_;
  ins_std_507_ = ins_std_507;
  if (ins_std_507) {
    set_has_ins_std_507();
  } else {
    clear_has_ins_std_507();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_std_507)
}

// optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
inline bool Cx75::has_ins_latitudelongitude_504() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Cx75::set_has_ins_latitudelongitude_504() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Cx75::clear_has_ins_latitudelongitude_504() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Cx75::clear_ins_latitudelongitude_504() {
  if (ins_latitudelongitude_504_ != NULL) ins_latitudelongitude_504_->::jmc_auto::canbus::Ins_latitudelongitude_504::Clear();
  clear_has_ins_latitudelongitude_504();
}
inline const ::jmc_auto::canbus::Ins_latitudelongitude_504& Cx75::ins_latitudelongitude_504() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
  return ins_latitudelongitude_504_ != NULL ? *ins_latitudelongitude_504_
                         : *::jmc_auto::canbus::Ins_latitudelongitude_504::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_latitudelongitude_504* Cx75::mutable_ins_latitudelongitude_504() {
  set_has_ins_latitudelongitude_504();
  if (ins_latitudelongitude_504_ == NULL) {
    ins_latitudelongitude_504_ = new ::jmc_auto::canbus::Ins_latitudelongitude_504;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
  return ins_latitudelongitude_504_;
}
inline ::jmc_auto::canbus::Ins_latitudelongitude_504* Cx75::release_ins_latitudelongitude_504() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
  clear_has_ins_latitudelongitude_504();
  ::jmc_auto::canbus::Ins_latitudelongitude_504* temp = ins_latitudelongitude_504_;
  ins_latitudelongitude_504_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_latitudelongitude_504(::jmc_auto::canbus::Ins_latitudelongitude_504* ins_latitudelongitude_504) {
  delete ins_latitudelongitude_504_;
  ins_latitudelongitude_504_ = ins_latitudelongitude_504;
  if (ins_latitudelongitude_504) {
    set_has_ins_latitudelongitude_504();
  } else {
    clear_has_ins_latitudelongitude_504();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
}

// optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
inline bool Cx75::has_ins_speed_505() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Cx75::set_has_ins_speed_505() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Cx75::clear_has_ins_speed_505() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Cx75::clear_ins_speed_505() {
  if (ins_speed_505_ != NULL) ins_speed_505_->::jmc_auto::canbus::Ins_speed_505::Clear();
  clear_has_ins_speed_505();
}
inline const ::jmc_auto::canbus::Ins_speed_505& Cx75::ins_speed_505() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_speed_505)
  return ins_speed_505_ != NULL ? *ins_speed_505_
                         : *::jmc_auto::canbus::Ins_speed_505::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_speed_505* Cx75::mutable_ins_speed_505() {
  set_has_ins_speed_505();
  if (ins_speed_505_ == NULL) {
    ins_speed_505_ = new ::jmc_auto::canbus::Ins_speed_505;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_speed_505)
  return ins_speed_505_;
}
inline ::jmc_auto::canbus::Ins_speed_505* Cx75::release_ins_speed_505() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_speed_505)
  clear_has_ins_speed_505();
  ::jmc_auto::canbus::Ins_speed_505* temp = ins_speed_505_;
  ins_speed_505_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_speed_505(::jmc_auto::canbus::Ins_speed_505* ins_speed_505) {
  delete ins_speed_505_;
  ins_speed_505_ = ins_speed_505;
  if (ins_speed_505) {
    set_has_ins_speed_505();
  } else {
    clear_has_ins_speed_505();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_speed_505)
}

// optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
inline bool Cx75::has_ins_headingpitchroll_502() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Cx75::set_has_ins_headingpitchroll_502() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Cx75::clear_has_ins_headingpitchroll_502() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Cx75::clear_ins_headingpitchroll_502() {
  if (ins_headingpitchroll_502_ != NULL) ins_headingpitchroll_502_->::jmc_auto::canbus::Ins_headingpitchroll_502::Clear();
  clear_has_ins_headingpitchroll_502();
}
inline const ::jmc_auto::canbus::Ins_headingpitchroll_502& Cx75::ins_headingpitchroll_502() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
  return ins_headingpitchroll_502_ != NULL ? *ins_headingpitchroll_502_
                         : *::jmc_auto::canbus::Ins_headingpitchroll_502::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_headingpitchroll_502* Cx75::mutable_ins_headingpitchroll_502() {
  set_has_ins_headingpitchroll_502();
  if (ins_headingpitchroll_502_ == NULL) {
    ins_headingpitchroll_502_ = new ::jmc_auto::canbus::Ins_headingpitchroll_502;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
  return ins_headingpitchroll_502_;
}
inline ::jmc_auto::canbus::Ins_headingpitchroll_502* Cx75::release_ins_headingpitchroll_502() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
  clear_has_ins_headingpitchroll_502();
  ::jmc_auto::canbus::Ins_headingpitchroll_502* temp = ins_headingpitchroll_502_;
  ins_headingpitchroll_502_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_headingpitchroll_502(::jmc_auto::canbus::Ins_headingpitchroll_502* ins_headingpitchroll_502) {
  delete ins_headingpitchroll_502_;
  ins_headingpitchroll_502_ = ins_headingpitchroll_502;
  if (ins_headingpitchroll_502) {
    set_has_ins_headingpitchroll_502();
  } else {
    clear_has_ins_headingpitchroll_502();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
}

// optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
inline bool Cx75::has_ins_heightandtime_503() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Cx75::set_has_ins_heightandtime_503() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Cx75::clear_has_ins_heightandtime_503() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Cx75::clear_ins_heightandtime_503() {
  if (ins_heightandtime_503_ != NULL) ins_heightandtime_503_->::jmc_auto::canbus::Ins_heightandtime_503::Clear();
  clear_has_ins_heightandtime_503();
}
inline const ::jmc_auto::canbus::Ins_heightandtime_503& Cx75::ins_heightandtime_503() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_heightandtime_503)
  return ins_heightandtime_503_ != NULL ? *ins_heightandtime_503_
                         : *::jmc_auto::canbus::Ins_heightandtime_503::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_heightandtime_503* Cx75::mutable_ins_heightandtime_503() {
  set_has_ins_heightandtime_503();
  if (ins_heightandtime_503_ == NULL) {
    ins_heightandtime_503_ = new ::jmc_auto::canbus::Ins_heightandtime_503;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_heightandtime_503)
  return ins_heightandtime_503_;
}
inline ::jmc_auto::canbus::Ins_heightandtime_503* Cx75::release_ins_heightandtime_503() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_heightandtime_503)
  clear_has_ins_heightandtime_503();
  ::jmc_auto::canbus::Ins_heightandtime_503* temp = ins_heightandtime_503_;
  ins_heightandtime_503_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_heightandtime_503(::jmc_auto::canbus::Ins_heightandtime_503* ins_heightandtime_503) {
  delete ins_heightandtime_503_;
  ins_heightandtime_503_ = ins_heightandtime_503;
  if (ins_heightandtime_503) {
    set_has_ins_heightandtime_503();
  } else {
    clear_has_ins_heightandtime_503();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_heightandtime_503)
}

// optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
inline bool Cx75::has_ins_gyro_501() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Cx75::set_has_ins_gyro_501() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Cx75::clear_has_ins_gyro_501() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Cx75::clear_ins_gyro_501() {
  if (ins_gyro_501_ != NULL) ins_gyro_501_->::jmc_auto::canbus::Ins_gyro_501::Clear();
  clear_has_ins_gyro_501();
}
inline const ::jmc_auto::canbus::Ins_gyro_501& Cx75::ins_gyro_501() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_gyro_501)
  return ins_gyro_501_ != NULL ? *ins_gyro_501_
                         : *::jmc_auto::canbus::Ins_gyro_501::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_gyro_501* Cx75::mutable_ins_gyro_501() {
  set_has_ins_gyro_501();
  if (ins_gyro_501_ == NULL) {
    ins_gyro_501_ = new ::jmc_auto::canbus::Ins_gyro_501;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_gyro_501)
  return ins_gyro_501_;
}
inline ::jmc_auto::canbus::Ins_gyro_501* Cx75::release_ins_gyro_501() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_gyro_501)
  clear_has_ins_gyro_501();
  ::jmc_auto::canbus::Ins_gyro_501* temp = ins_gyro_501_;
  ins_gyro_501_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_gyro_501(::jmc_auto::canbus::Ins_gyro_501* ins_gyro_501) {
  delete ins_gyro_501_;
  ins_gyro_501_ = ins_gyro_501;
  if (ins_gyro_501) {
    set_has_ins_gyro_501();
  } else {
    clear_has_ins_gyro_501();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_gyro_501)
}

// optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
inline bool Cx75::has_ins_acc_500() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Cx75::set_has_ins_acc_500() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Cx75::clear_has_ins_acc_500() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Cx75::clear_ins_acc_500() {
  if (ins_acc_500_ != NULL) ins_acc_500_->::jmc_auto::canbus::Ins_acc_500::Clear();
  clear_has_ins_acc_500();
}
inline const ::jmc_auto::canbus::Ins_acc_500& Cx75::ins_acc_500() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_acc_500)
  return ins_acc_500_ != NULL ? *ins_acc_500_
                         : *::jmc_auto::canbus::Ins_acc_500::internal_default_instance();
}
inline ::jmc_auto::canbus::Ins_acc_500* Cx75::mutable_ins_acc_500() {
  set_has_ins_acc_500();
  if (ins_acc_500_ == NULL) {
    ins_acc_500_ = new ::jmc_auto::canbus::Ins_acc_500;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_acc_500)
  return ins_acc_500_;
}
inline ::jmc_auto::canbus::Ins_acc_500* Cx75::release_ins_acc_500() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_acc_500)
  clear_has_ins_acc_500();
  ::jmc_auto::canbus::Ins_acc_500* temp = ins_acc_500_;
  ins_acc_500_ = NULL;
  return temp;
}
inline void Cx75::set_allocated_ins_acc_500(::jmc_auto::canbus::Ins_acc_500* ins_acc_500) {
  delete ins_acc_500_;
  ins_acc_500_ = ins_acc_500;
  if (ins_acc_500) {
    set_has_ins_acc_500();
  } else {
    clear_has_ins_acc_500();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_acc_500)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType>() {
  return ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType>() {
  return ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType>() {
  return ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType>() {
  return ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType>() {
  return ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType>() {
  return ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType>() {
  return ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType>() {
  return ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType>() {
  return ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType>() {
  return ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType>() {
  return ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType>() {
  return ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType>() {
  return ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType>() {
  return ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType>() {
  return ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType>() {
  return ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType>() {
  return ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType>() {
  return ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType>() {
  return ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspaminhType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspaminhType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspaminhType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType>() {
  return ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType>() {
  return ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType>() {
  return ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType>() {
  return ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType>() {
  return ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType>() {
  return ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType>() {
  return ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType>() {
  return ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType>() {
  return ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType>() {
  return ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType>() {
  return ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType>() {
  return ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType>() {
  return ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType>() {
  return ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType>() {
  return ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType>() {
  return ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType>() {
  return ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType>() {
  return ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType>() {
  return ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType>() {
  return ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType>() {
  return ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType>() {
  return ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType>() {
  return ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType>() {
  return ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType>() {
  return ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType>() {
  return ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType>() {
  return ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType>() {
  return ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType>() {
  return ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType>() {
  return ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType>() {
  return ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType>() {
  return ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType>() {
  return ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType>() {
  return ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType>() {
  return ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType>() {
  return ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType>() {
  return ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType>() {
  return ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType>() {
  return ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType>() {
  return ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType>() {
  return ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType>() {
  return ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType>() {
  return ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType>() {
  return ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType>() {
  return ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType>() {
  return ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType>() {
  return ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType>() {
  return ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType>() {
  return ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType>() {
  return ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType>() {
  return ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType>() {
  return ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType>() {
  return ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType>() {
  return ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType>() {
  return ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType>() {
  return ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType>() {
  return ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType>() {
  return ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType>() {
  return ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType>() {
  return ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType>() {
  return ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType>() {
  return ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType>() {
  return ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType>() {
  return ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType>() {
  return ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType>() {
  return ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType>() {
  return ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType>() {
  return ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType>() {
  return ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType>() {
  return ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ins_datainfo_506_Ins_car_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ins_datainfo_506_Ins_car_statusType>() {
  return ::jmc_auto::canbus::Ins_datainfo_506_Ins_car_statusType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Ins_datainfo_506_Ins_statusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Ins_datainfo_506_Ins_statusType>() {
  return ::jmc_auto::canbus::Ins_datainfo_506_Ins_statusType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcanbus_2fproto_2fcx75_2eproto__INCLUDED
